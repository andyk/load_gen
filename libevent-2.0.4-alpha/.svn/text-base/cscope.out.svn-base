cscope 15 $HOME/LoCalCluster/load_gen/libevent-2.0.4-alpha               0002353048
	@WIN32-Code/event-config.h

10 #iвdeа
_EVENT_CONFIG_H_


11 
	#_EVENT_CONFIG_H_


	)

26 
	#_EVENT_DNS_USE_FTIME_FOR_ID
 1

	)

56 
	#_EVENT_HAVE_FCNTL_H
 1

	)

59 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

62 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

65 
	#_EVENT_HAVE_GETPROTOBYNUMBER
 1

	)

68 
	#_EVENT_HAVE_GETSERVBYNAME
 1

	)

92 
	#_EVENT_HAVE_MEMORY_H
 1

	)

140 
	#_EVENT_HAVE_SIGNAL
 1

	)

146 
	#_EVENT_HAVE_STDARG_H
 1

	)

149 
	#_EVENT_HAVE_STDDEF_H
 1

	)

155 
	#_EVENT_HAVE_STDLIB_H
 1

	)

158 
	#_EVENT_HAVE_STRINGS_H
 1

	)

161 
	#_EVENT_HAVE_STRING_H
 1

	)

175 
	#_EVENT_HAVE_STRUCT_ADDRINFO
 1

	)

178 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

181 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

184 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

187 
	#_EVENT_HAVE_STRUCT_SOCKADDR_IN6
 1

	)

229 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

235 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

247 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

250 
	#_EVENT_HAVE_TIMERCMP
 1

	)

253 
	#_EVENT_HAVE_TIMERISSET
 1

	)

277 
	#_EVENT_NUMERIC_VERSION
 0x02000400

	)

280 
	#_EVENT_PACKAGE
 "libevТt"

	)

283 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

286 
	#_EVENT_PACKAGE_NAME
 ""

	)

289 
	#_EVENT_PACKAGE_STRING
 ""

	)

292 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

295 
	#_EVENT_PACKAGE_VERSION
 ""

	)

302 
	#_EVENT_SIZEOF_INT
 4

	)

305 
	#_EVENT_SIZEOF_LONG
 4

	)

308 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

311 
	#_EVENT_SIZEOF_SHORT
 2

	)

314 #ifdeа
_WIN64


315 
	#_EVENT_SIZEOF_SIZE_T
 8

	)

317 
	#_EVENT_SIZEOF_SIZE_T
 4

	)

321 
	#_EVENT_STDC_HEADERS
 1

	)

324 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

327 
	#_EVENT_VERSION
 "2.0.4-Ѓpha"

	)

330 
	#_EVENT___func__
 
__FUNCTION__


	)

337 #iвdeа
_EVENT___эlu•lus


338 
	#_EVENT_ЪlЪe
 
__ЪlЪe


	)

348 
	#_EVENT_sockЋn_t
 

	)

351 
	#_EVENT_ssize_t
 
SSIZE_T


	)

	@WIN32-Code/tree.h

27 #iвdef 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

57 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

58 
	s«me
 { \

59 
ty≥
 *
•h_roў
; \

60 }

	)

62 
	#SPLAY_INITIALIZER
(
roў
) \

63 { 
NULL
 }

	)

65 
	#SPLAY_INIT
(
roў
) do { \

66 (
roў
)->
•h_roў
 = 
NULL
; \

67 } 0)

	)

69 
	#SPLAY_ENTRY
(
ty≥
) \

71 
ty≥
 *
•e_Ћб
; \

72 
ty≥
 *
•e_right
; \

73 }

	)

75 
	#SPLAY_LEFT
(
Цm
, 
fЫld
и”lm)->fЫld.
•e_Ћб


	)

76 
	#SPLAY_RIGHT
(
Цm
, 
fЫld
и”lm)->fЫld.
•e_right


	)

77 
	#SPLAY_ROOT
(
hЧd
и(hЧd)->
•h_roў


	)

78 
	#SPLAY_EMPTY
(
hЧd
и(
	`SPLAY_ROOT
(hЧdи=р
NULL
)

	)

81 
	#SPLAY_ROTATE_RIGHT
(
hЧd
, 
tmp
, 
fЫld
) do { \

82 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_RIGHT
(
tmp
, field); \

83 
	`SPLAY_RIGHT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

84 (
hЧd
)->
•h_roў
 = 
tmp
; \

85 } 0)

	)

87 
	#SPLAY_ROTATE_LEFT
(
hЧd
, 
tmp
, 
fЫld
) do { \

88 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_LEFT
(
tmp
, field); \

89 
	`SPLAY_LEFT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

90 (
hЧd
)->
•h_roў
 = 
tmp
; \

91 } 0)

	)

93 
	#SPLAY_LINKLEFT
(
hЧd
, 
tmp
, 
fЫld
) do { \

94 
	`SPLAY_LEFT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

95 
tmp
 = (
hЧd
)->
•h_roў
; \

96 (
hЧd
)->
•h_roў
 = 
	`SPLAY_LEFT
((hЧd)->•h_roў, 
fЫld
); \

97 } 0)

	)

99 
	#SPLAY_LINKRIGHT
(
hЧd
, 
tmp
, 
fЫld
) do { \

100 
	`SPLAY_RIGHT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

101 
tmp
 = (
hЧd
)->
•h_roў
; \

102 (
hЧd
)->
•h_roў
 = 
	`SPLAY_RIGHT
((hЧd)->•h_roў, 
fЫld
); \

103 } 0)

	)

105 
	#SPLAY_ASSEMBLE
(
hЧd
, 
node
, 
Ћб
, 
right
, 
fЫld
) do { \

106 
	`SPLAY_RIGHT
(
Ћб
, 
fЫld
ир
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, field); \

107 
	`SPLAY_LEFT
(
right
, 
fЫld
ир
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, field);\

108 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_RIGHT
(
node
, field); \

109 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_LEFT
(
node
, field); \

110 } 0)

	)

114 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

115 
«me
##
	`_SPLAY
(«mР*, 
ty≥
 *); \

116 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

117 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

118 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

121 
__ЪlЪe
 
ty≥
 * \

122 
«me
##
	`_SPLAY_FIND
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

124 iа(
	`SPLAY_EMPTY
(
hЧd
)) \

125 (
NULL
); \

126 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

127 iа((
cmp
)(
Цm
, (
hЧd
)->
•h_roў
) == 0) \

128  (
hЧd
->
•h_roў
); \

129  (
NULL
); \

132 
__ЪlЪe
 
ty≥
 * \

133 
«me
##
	`_SPLAY_NEXT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

135 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

136 iа(
	`SPLAY_RIGHT
(
Цm
, 
fЫld
и!р
NULL
) { \

137 
Цm
 = 
	`SPLAY_RIGHT
”lm, 
fЫld
); \

138 
	`SPLAY_LEFT
(
Цm
, 
fЫld
и!р
NULL
) { \

139 
Цm
 = 
	`SPLAY_LEFT
”lm, 
fЫld
); \

142 
Цm
 = 
NULL
; \

143  (
Цm
); \

146 
__ЪlЪe
 
ty≥
 * \

147 
«me
##
	`_SPLAY_MIN_MAX
(«mР*
hЧd
, 
vЃ
) \

149 
«me
##
	`_SPLAY_MINMAX
(
hЧd
, 
vЃ
); \

150  (
	`SPLAY_ROOT
(
hЧd
)); \

151 }

	)

156 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

157 
ty≥
 * \

158 
«me
##
	`_SPLAY_INSERT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

160 iа(
	`SPLAY_EMPTY
(
hЧd
)) { \

161 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ир
	`SPLAY_RIGHT
”lm, fЫldир
NULL
; \

163 
__comp
; \

164 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

165 
__comp
 = (
cmp
)(
Цm
, (
hЧd
)->
•h_roў
); \

166 if(
__comp
 < 0) { \

167 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ирSPLAY_LEFT((
hЧd
)->
•h_roў
, field);\

168 
	`SPLAY_RIGHT
(
Цm
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

169 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
NULL
; \

170 } iа(
__comp
 > 0) { \

171 
	`SPLAY_RIGHT
(
Цm
, 
fЫld
ирSPLAY_RIGHT((
hЧd
)->
•h_roў
, field);\

172 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

173 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
NULL
; \

175  ((
hЧd
)->
•h_roў
); \

177 (
hЧd
)->
•h_roў
 = (
Цm
); \

178  (
NULL
); \

181 
ty≥
 * \

182 
«me
##
	`_SPLAY_REMOVE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

184 
ty≥
 *
__tmp
; \

185 iа(
	`SPLAY_EMPTY
(
hЧd
)) \

186  (
NULL
); \

187 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

188 iа((
cmp
)(
Цm
, (
hЧd
)->
•h_roў
) == 0) { \

189 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
) { \

190 (
hЧd
)->
•h_roў
 = 
	`SPLAY_RIGHT
((hЧd)->•h_roў, 
fЫld
);\

192 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

193 (
hЧd
)->
•h_roў
 = 
	`SPLAY_LEFT
((hЧd)->•h_roў, 
fЫld
);\

194 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

195 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
__tmp
; \

197  (
Цm
); \

199  (
NULL
); \

203 
«me
##
	`_SPLAY
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

205 
ty≥
 
__node
, *
__Ћб
, *
__right
, *
__tmp
; \

206 
__comp
; \

208 
	`SPLAY_LEFT
(&
__node
, 
fЫld
ир
	`SPLAY_RIGHT
(&__node, fЫldир
NULL
;\

209 
__Ћб
 = 
__right
 = &
__node
; \

211 (
__comp
 = (
cmp
)(
Цm
, (
hЧd
)->
•h_roў
))) { \

212 iа(
__comp
 < 0) { \

213 
__tmp
 = 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
); \

214 iа(
__tmp
 =р
NULL
) \

216 iа((
cmp
)(
Цm
, 
__tmp
) < 0){ \

217 
	`SPLAY_ROTATE_RIGHT
(
hЧd
, 
__tmp
, 
fЫld
); \

218 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

221 
	`SPLAY_LINKLEFT
(
hЧd
, 
__right
, 
fЫld
); \

222 } iа(
__comp
 > 0) { \

223 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

224 iа(
__tmp
 =р
NULL
) \

226 iа((
cmp
)(
Цm
, 
__tmp
) > 0){ \

227 
	`SPLAY_ROTATE_LEFT
(
hЧd
, 
__tmp
, 
fЫld
); \

228 iа(
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

231 
	`SPLAY_LINKRIGHT
(
hЧd
, 
__Ћб
, 
fЫld
); \

234 
	`SPLAY_ASSEMBLE
(
hЧd
, &
__node
, 
__Ћб
, 
__right
, 
fЫld
); \

240 
«me
##
	`_SPLAY_MINMAX
(«mР*
hЧd
, 
__comp
) \

242 
ty≥
 
__node
, *
__Ћб
, *
__right
, *
__tmp
; \

244 
	`SPLAY_LEFT
(&
__node
, 
fЫld
ир
	`SPLAY_RIGHT
(&__node, fЫldир
NULL
;\

245 
__Ћб
 = 
__right
 = &
__node
; \

248 iа(
__comp
 < 0) { \

249 
__tmp
 = 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
); \

250 iа(
__tmp
 =р
NULL
) \

252 iа(
__comp
 < 0){ \

253 
	`SPLAY_ROTATE_RIGHT
(
hЧd
, 
__tmp
, 
fЫld
); \

254 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

257 
	`SPLAY_LINKLEFT
(
hЧd
, 
__right
, 
fЫld
); \

258 } iа(
__comp
 > 0) { \

259 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

260 iа(
__tmp
 =р
NULL
) \

262 iа(
__comp
 > 0) { \

263 
	`SPLAY_ROTATE_LEFT
(
hЧd
, 
__tmp
, 
fЫld
); \

264 iа(
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

267 
	`SPLAY_LINKRIGHT
(
hЧd
, 
__Ћб
, 
fЫld
); \

270 
	`SPLAY_ASSEMBLE
(
hЧd
, &
__node
, 
__Ћб
, 
__right
, 
fЫld
); \

271 }

	)

273 
	#SPLAY_NEGINF
 -1

	)

274 
	#SPLAY_INF
 1

	)

276 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_INSERT
(x, y)

	)

277 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_REMOVE
(x, y)

	)

278 
	#SPLAY_FIND
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_FIND
(x, y)

	)

279 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_NEXT
(x, y)

	)

280 
	#SPLAY_MIN
(
«me
, 
x
и(
	`SPLAY_EMPTY
(xи? 
NULL
 \

281 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

282 
	#SPLAY_MAX
(
«me
, 
x
и(
	`SPLAY_EMPTY
(xи? 
NULL
 \

283 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

285 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hЧd
) \

286 (
x
ир
	`SPLAY_MIN
(
«me
, 
hЧd
); \

287 (
x
и!р
NULL
; \

288 (
x
ир
	`SPLAY_NEXT
(
«me
, 
hЧd
, x))

	)

291 
	#RB_HEAD
(
«me
, 
ty≥
) \

292 
	s«me
 { \

293 
ty≥
 *
rbh_roў
; \

294 }

	)

296 
	#RB_INITIALIZER
(
roў
) \

297 { 
NULL
 }

	)

299 
	#RB_INIT
(
roў
) do { \

300 (
roў
)->
rbh_roў
 = 
NULL
; \

301 } 0)

	)

303 
	#RB_BLACK
 0

	)

304 
	#RB_RED
 1

	)

305 
	#RB_ENTRY
(
ty≥
) \

307 
ty≥
 *
rbe_Ћб
; \

308 
ty≥
 *
rbe_right
; \

309 
ty≥
 *
rbe_ЈїЅ
; \

310 
rbe_cё№
; \

311 }

	)

313 
	#RB_LEFT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_Ћб


	)

314 
	#RB_RIGHT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_right


	)

315 
	#RB_PARENT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_ЈїЅ


	)

316 
	#RB_COLOR
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_cё№


	)

317 
	#RB_ROOT
(
hЧd
и(hЧd)->
rbh_roў


	)

318 
	#RB_EMPTY
(
hЧd
и(
	`RB_ROOT
(hЧdи=р
NULL
)

	)

320 
	#RB_SET
(
Цm
, 
ЈїЅ
, 
fЫld
) do { \

321 
	`RB_PARENT
(
Цm
, 
fЫld
ир
ЈїЅ
; \

322 
	`RB_LEFT
(
Цm
, 
fЫld
ир
	`RB_RIGHT
”lm, fЫldир
NULL
; \

323 
	`RB_COLOR
(
Цm
, 
fЫld
ир
RB_RED
; \

324 } 0)

	)

326 
	#RB_SET_BLACKRED
(
bѕck
, 
їd
, 
fЫld
) do { \

327 
	`RB_COLOR
(
bѕck
, 
fЫld
ир
RB_BLACK
; \

328 
	`RB_COLOR
(
їd
, 
fЫld
ир
RB_RED
; \

329 } 0)

	)

331 #iвdeа
RB_AUGMENT


332 
	#RB_AUGMENT
(
x
)

	)

335 
	#RB_ROTATE_LEFT
(
hЧd
, 
Цm
, 
tmp
, 
fЫld
) do { \

336 (
tmp
ир
	`RB_RIGHT
(
Цm
, 
fЫld
); \

337 iа((
	`RB_RIGHT
(
Цm
, 
fЫld
ир
	`RB_LEFT
(
tmp
, field))) { \

338 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldир(
Цm
); \

340 
	`RB_AUGMENT
(
Цm
); \

341 iа((
	`RB_PARENT
(
tmp
, 
fЫld
ирRB_PARENT(
Цm
, field))) { \

342 iа((
Цm
и=р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field)) \

343 
	`RB_LEFT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

345 
	`RB_RIGHT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

347 (
hЧd
)->
rbh_roў
 = (
tmp
); \

348 
	`RB_LEFT
(
tmp
, 
fЫld
ир(
Цm
); \

349 
	`RB_PARENT
(
Цm
, 
fЫld
ир(
tmp
); \

350 
	`RB_AUGMENT
(
tmp
); \

351 iа((
	`RB_PARENT
(
tmp
, 
fЫld
))) \

352 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fЫld
)); \

353 } 0)

	)

355 
	#RB_ROTATE_RIGHT
(
hЧd
, 
Цm
, 
tmp
, 
fЫld
) do { \

356 (
tmp
ир
	`RB_LEFT
(
Цm
, 
fЫld
); \

357 iа((
	`RB_LEFT
(
Цm
, 
fЫld
ир
	`RB_RIGHT
(
tmp
, field))) { \

358 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldир(
Цm
); \

360 
	`RB_AUGMENT
(
Цm
); \

361 iа((
	`RB_PARENT
(
tmp
, 
fЫld
ирRB_PARENT(
Цm
, field))) { \

362 iа((
Цm
и=р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field)) \

363 
	`RB_LEFT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

365 
	`RB_RIGHT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

367 (
hЧd
)->
rbh_roў
 = (
tmp
); \

368 
	`RB_RIGHT
(
tmp
, 
fЫld
ир(
Цm
); \

369 
	`RB_PARENT
(
Цm
, 
fЫld
ир(
tmp
); \

370 
	`RB_AUGMENT
(
tmp
); \

371 iа((
	`RB_PARENT
(
tmp
, 
fЫld
))) \

372 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fЫld
)); \

373 } 0)

	)

376 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

377 
«me
##
	`_RB_INSERT_COLOR
(«mР*, 
ty≥
 *); \

378 
«me
##
	`_RB_REMOVE_COLOR
(«mР*, 
ty≥
 *, type *);\

379 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

380 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

381 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

382 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

383 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

385 

	)

389 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

391 
«me
##
	`_RB_INSERT_COLOR
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

393 
ty≥
 *
ЈїЅ
, *
gЈїЅ
, *
tmp
; \

394 (
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
)) && \

395 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
и=р
RB_RED
) { \

396 
gЈїЅ
 = 
	`RB_PARENT
(
ЈїЅ
, 
fЫld
); \

397 iа(
ЈїЅ
 =р
	`RB_LEFT
(
gЈїЅ
, 
fЫld
)) { \

398 
tmp
 = 
	`RB_RIGHT
(
gЈїЅ
, 
fЫld
); \

399 iа(
tmp
 && 
	`RB_COLOR
—mp, 
fЫld
и=р
RB_RED
) { \

400 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_BLACK
; \

401 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
);\

402 
Цm
 = 
gЈїЅ
; \

405 iа(
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

406 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

407 
tmp
 = 
ЈїЅ
; \

408 
ЈїЅ
 = 
Цm
; \

409 
Цm
 = 
tmp
; \

411 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
); \

412 
	`RB_ROTATE_RIGHT
(
hЧd
, 
gЈїЅ
, 
tmp
, 
fЫld
); \

414 
tmp
 = 
	`RB_LEFT
(
gЈїЅ
, 
fЫld
); \

415 iа(
tmp
 && 
	`RB_COLOR
—mp, 
fЫld
и=р
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
);\

418 
Цm
 = 
gЈїЅ
; \

421 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

422 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

423 
tmp
 = 
ЈїЅ
; \

424 
ЈїЅ
 = 
Цm
; \

425 
Цm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
); \

428 
	`RB_ROTATE_LEFT
(
hЧd
, 
gЈїЅ
, 
tmp
, 
fЫld
); \

431 
	`RB_COLOR
(
hЧd
->
rbh_roў
, 
fЫld
ир
RB_BLACK
; \

435 
«me
##
	`_RB_REMOVE_COLOR
(«mР*
hЧd
, 
ty≥
 *
ЈїЅ
, ty≥ *
Цm
) \

437 
ty≥
 *
tmp
; \

438 (
Цm
 =р
NULL
 || 
	`RB_COLOR
”lm, 
fЫld
и=р
RB_BLACK
) && \

439 
Цm
 !р
	`RB_ROOT
(
hЧd
)) { \

440 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

441 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

442 iа(
	`RB_COLOR
(
tmp
, 
fЫld
и=р
RB_RED
) { \

443 
	`RB_SET_BLACKRED
(
tmp
, 
ЈїЅ
, 
fЫld
); \

444 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

445 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

447 iа((
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

448 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) &&\

449 (
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

450 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
)) {\

451 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

452 
Цm
 = 
ЈїЅ
; \

453 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

455 iа(
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

456 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) {\

457 
ty≥
 *
ёeб
; \

458 iа((
ёeб
 = 
	`RB_LEFT
(
tmp
, 
fЫld
)))\

459 
	`RB_COLOR
(
ёeб
, 
fЫld
ир
RB_BLACK
;\

460 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

461 
	`RB_ROTATE_RIGHT
(
hЧd
, 
tmp
, 
ёeб
, 
fЫld
);\

462 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

464 
	`RB_COLOR
(
tmp
, 
fЫld
ирRB_COLOR(
ЈїЅ
, field);\

465 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
ир
RB_BLACK
; \

466 iа(
	`RB_RIGHT
(
tmp
, 
fЫld
)) \

467 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldир
RB_BLACK
;\

468 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

469 
Цm
 = 
	`RB_ROOT
(
hЧd
); \

473 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

474 iа(
	`RB_COLOR
(
tmp
, 
fЫld
и=р
RB_RED
) { \

475 
	`RB_SET_BLACKRED
(
tmp
, 
ЈїЅ
, 
fЫld
); \

476 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

477 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

479 iа((
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

480 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) &&\

481 (
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

482 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
)) {\

483 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

484 
Цm
 = 
ЈїЅ
; \

485 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

487 iа(
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

488 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) {\

489 
ty≥
 *
№ight
; \

490 iа((
№ight
 = 
	`RB_RIGHT
(
tmp
, 
fЫld
)))\

491 
	`RB_COLOR
(
№ight
, 
fЫld
ир
RB_BLACK
;\

492 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

493 
	`RB_ROTATE_LEFT
(
hЧd
, 
tmp
, 
№ight
, 
fЫld
);\

494 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

496 
	`RB_COLOR
(
tmp
, 
fЫld
ирRB_COLOR(
ЈїЅ
, field);\

497 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
ир
RB_BLACK
; \

498 iа(
	`RB_LEFT
(
tmp
, 
fЫld
)) \

499 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldир
RB_BLACK
;\

500 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

501 
Цm
 = 
	`RB_ROOT
(
hЧd
); \

506 iа(
Цm
) \

507 
	`RB_COLOR
(
Цm
, 
fЫld
ир
RB_BLACK
; \

510 
ty≥
 * \

511 
«me
##
	`_RB_REMOVE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

513 
ty≥
 *
chЮd
, *
ЈїЅ
, *
ёd
 = 
Цm
; \

514 
cё№
; \

515 iа(
	`RB_LEFT
(
Цm
, 
fЫld
и=р
NULL
) \

516 
chЮd
 = 
	`RB_RIGHT
(
Цm
, 
fЫld
); \

517 iа(
	`RB_RIGHT
(
Цm
, 
fЫld
и=р
NULL
) \

518 
chЮd
 = 
	`RB_LEFT
(
Цm
, 
fЫld
); \

520 
ty≥
 *
Ћб
; \

521 
Цm
 = 
	`RB_RIGHT
”lm, 
fЫld
); \

522 (
Ћб
 = 
	`RB_LEFT
(
Цm
, 
fЫld
))) \

523 
Цm
 = 
Ћб
; \

524 
chЮd
 = 
	`RB_RIGHT
(
Цm
, 
fЫld
); \

525 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

526 
cё№
 = 
	`RB_COLOR
(
Цm
, 
fЫld
); \

527 iа(
chЮd
) \

528 
	`RB_PARENT
(
chЮd
, 
fЫld
ир
ЈїЅ
; \

529 iа(
ЈїЅ
) { \

530 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) \

531 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

533 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

534 
	`RB_AUGMENT
(
ЈїЅ
); \

536 
	`RB_ROOT
(
hЧd
ир
chЮd
; \

537 iа(
	`RB_PARENT
(
Цm
, 
fЫld
и=р
ёd
) \

538 
ЈїЅ
 = 
Цm
; \

539 (
Цm
)->
fЫld
 = (
ёd
)->field; \

540 iа(
	`RB_PARENT
(
ёd
, 
fЫld
)) { \

541 iа(
	`RB_LEFT
(
	`RB_PARENT
(
ёd
, 
fЫld
), field) == old)\

542 
	`RB_LEFT
(
	`RB_PARENT
(
ёd
, 
fЫld
), fЫldир
Цm
;\

544 
	`RB_RIGHT
(
	`RB_PARENT
(
ёd
, 
fЫld
), fЫldир
Цm
;\

545 
	`RB_AUGMENT
(
	`RB_PARENT
(
ёd
, 
fЫld
)); \

547 
	`RB_ROOT
(
hЧd
ир
Цm
; \

548 
	`RB_PARENT
(
	`RB_LEFT
(
ёd
, 
fЫld
), fЫldир
Цm
; \

549 iа(
	`RB_RIGHT
(
ёd
, 
fЫld
)) \

550 
	`RB_PARENT
(
	`RB_RIGHT
(
ёd
, 
fЫld
), fЫldир
Цm
; \

551 iа(
ЈїЅ
) { \

552 
Ћб
 = 
ЈїЅ
; \

554 
	`RB_AUGMENT
(
Ћб
); \

555 } (
Ћб
 = 
	`RB_PARENT
÷eб, 
fЫld
))); \

557 
cё№
; \

559 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

560 
cё№
 = 
	`RB_COLOR
(
Цm
, 
fЫld
); \

561 iа(
chЮd
) \

562 
	`RB_PARENT
(
chЮd
, 
fЫld
ир
ЈїЅ
; \

563 iа(
ЈїЅ
) { \

564 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) \

565 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

567 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

568 
	`RB_AUGMENT
(
ЈїЅ
); \

570 
	`RB_ROOT
(
hЧd
ир
chЮd
; \

571 
cё№
: \

572 iа(
cё№
 =р
RB_BLACK
) \

573 
«me
##
	`_RB_REMOVE_COLOR
(
hЧd
, 
ЈїЅ
, 
chЮd
); \

574  (
ёd
); \

578 
ty≥
 * \

579 
«me
##
	`_RB_INSERT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

581 
ty≥
 *
tmp
; \

582 
ty≥
 *
ЈїЅ
 = 
NULL
; \

583 
comp
 = 0; \

584 
tmp
 = 
	`RB_ROOT
(
hЧd
); \

585 
tmp
) { \

586 
ЈїЅ
 = 
tmp
; \

587 
comp
 = (
cmp
)(
Цm
, 
ЈїЅ
); \

588 iа(
comp
 < 0) \

589 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

590 iа(
comp
 > 0) \

591 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

593  (
tmp
); \

595 
	`RB_SET
(
Цm
, 
ЈїЅ
, 
fЫld
); \

596 iа(
ЈїЅ
 !р
NULL
) { \

597 iа(
comp
 < 0) \

598 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
Цm
; \

600 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
Цm
; \

601 
	`RB_AUGMENT
(
ЈїЅ
); \

603 
	`RB_ROOT
(
hЧd
ир
Цm
; \

604 
«me
##
	`_RB_INSERT_COLOR
(
hЧd
, 
Цm
); \

605  (
NULL
); \

609 
ty≥
 * \

610 
«me
##
	`_RB_FIND
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

612 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hЧd
); \

613 
comp
; \

614 
tmp
) { \

615 
comp
 = 
	`cmp
(
Цm
, 
tmp
); \

616 iа(
comp
 < 0) \

617 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

618 iа(
comp
 > 0) \

619 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

621  (
tmp
); \

623  (
NULL
); \

626 
ty≥
 * \

627 
«me
##
	`_RB_NEXT
(
ty≥
 *
Цm
) \

629 iа(
	`RB_RIGHT
(
Цm
, 
fЫld
)) { \

630 
Цm
 = 
	`RB_RIGHT
”lm, 
fЫld
); \

631 
	`RB_LEFT
(
Цm
, 
fЫld
)) \

632 
Цm
 = 
	`RB_LEFT
”lm, 
fЫld
); \

634 iа(
	`RB_PARENT
(
Цm
, 
fЫld
) && \

635 (
Цm
 =р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field))) \

636 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

638 
	`RB_PARENT
(
Цm
, 
fЫld
) && \

639 (
Цm
 =р
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fЫld
), field)))\

640 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

641 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

644  (
Цm
); \

647 
ty≥
 * \

648 
«me
##
	`_RB_MINMAX
(«mР*
hЧd
, 
vЃ
) \

650 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hЧd
); \

651 
ty≥
 *
ЈїЅ
 = 
NULL
; \

652 
tmp
) { \

653 
ЈїЅ
 = 
tmp
; \

654 iа(
vЃ
 < 0) \

655 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

657 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

659  (
ЈїЅ
); \

660 }

	)

662 
	#RB_NEGINF
 -1

	)

663 
	#RB_INF
 1

	)

665 
	#RB_INSERT
(
«me
, 
x
, 
y
и«me##
	`_RB_INSERT
(x, y)

	)

666 
	#RB_REMOVE
(
«me
, 
x
, 
y
и«me##
	`_RB_REMOVE
(x, y)

	)

667 
	#RB_FIND
(
«me
, 
x
, 
y
и«me##
	`_RB_FIND
(x, y)

	)

668 
	#RB_NEXT
(
«me
, 
x
, 
y
и«me##
	`_RB_NEXT
(y)

	)

669 
	#RB_MIN
(
«me
, 
x
и«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

670 
	#RB_MAX
(
«me
, 
x
и«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

672 
	#RB_FOREACH
(
x
, 
«me
, 
hЧd
) \

673 (
x
ир
	`RB_MIN
(
«me
, 
hЧd
); \

674 (
x
и!р
NULL
; \

675 (
x
ир
«me
##
	`_RB_NEXT
(x))

	)

704 #iвdef 
_SYS_TREE_H_


705 
	#_SYS_TREE_H_


	)

734 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

735 
	s«me
 { \

736 
ty≥
 *
•h_roў
; \

737 }

	)

739 
	#SPLAY_INITIALIZER
(
roў
) \

740 { 
NULL
 }

	)

742 
	#SPLAY_INIT
(
roў
) do { \

743 (
roў
)->
•h_roў
 = 
NULL
; \

744 } 0)

	)

746 
	#SPLAY_ENTRY
(
ty≥
) \

748 
ty≥
 *
•e_Ћб
; \

749 
ty≥
 *
•e_right
; \

750 }

	)

752 
	#SPLAY_LEFT
(
Цm
, 
fЫld
и”lm)->fЫld.
•e_Ћб


	)

753 
	#SPLAY_RIGHT
(
Цm
, 
fЫld
и”lm)->fЫld.
•e_right


	)

754 
	#SPLAY_ROOT
(
hЧd
и(hЧd)->
•h_roў


	)

755 
	#SPLAY_EMPTY
(
hЧd
и(
	`SPLAY_ROOT
(hЧdи=р
NULL
)

	)

758 
	#SPLAY_ROTATE_RIGHT
(
hЧd
, 
tmp
, 
fЫld
) do { \

759 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_RIGHT
(
tmp
, field); \

760 
	`SPLAY_RIGHT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

761 (
hЧd
)->
•h_roў
 = 
tmp
; \

762 } 0)

	)

764 
	#SPLAY_ROTATE_LEFT
(
hЧd
, 
tmp
, 
fЫld
) do { \

765 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_LEFT
(
tmp
, field); \

766 
	`SPLAY_LEFT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

767 (
hЧd
)->
•h_roў
 = 
tmp
; \

768 } 0)

	)

770 
	#SPLAY_LINKLEFT
(
hЧd
, 
tmp
, 
fЫld
) do { \

771 
	`SPLAY_LEFT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

772 
tmp
 = (
hЧd
)->
•h_roў
; \

773 (
hЧd
)->
•h_roў
 = 
	`SPLAY_LEFT
((hЧd)->•h_roў, 
fЫld
); \

774 } 0)

	)

776 
	#SPLAY_LINKRIGHT
(
hЧd
, 
tmp
, 
fЫld
) do { \

777 
	`SPLAY_RIGHT
(
tmp
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

778 
tmp
 = (
hЧd
)->
•h_roў
; \

779 (
hЧd
)->
•h_roў
 = 
	`SPLAY_RIGHT
((hЧd)->•h_roў, 
fЫld
); \

780 } 0)

	)

782 
	#SPLAY_ASSEMBLE
(
hЧd
, 
node
, 
Ћб
, 
right
, 
fЫld
) do { \

783 
	`SPLAY_RIGHT
(
Ћб
, 
fЫld
ир
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, field); \

784 
	`SPLAY_LEFT
(
right
, 
fЫld
ир
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, field);\

785 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_RIGHT
(
node
, field); \

786 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
	`SPLAY_LEFT
(
node
, field); \

787 } 0)

	)

791 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

792 
«me
##
	`_SPLAY
(«mР*, 
ty≥
 *); \

793 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

794 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

795 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

798 
__ЪlЪe
 
ty≥
 * \

799 
«me
##
	`_SPLAY_FIND
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

801 iа(
	`SPLAY_EMPTY
(
hЧd
)) \

802 (
NULL
); \

803 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

804 iа((
cmp
)(
Цm
, (
hЧd
)->
•h_roў
) == 0) \

805  (
hЧd
->
•h_roў
); \

806  (
NULL
); \

809 
__ЪlЪe
 
ty≥
 * \

810 
«me
##
	`_SPLAY_NEXT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

812 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

813 iа(
	`SPLAY_RIGHT
(
Цm
, 
fЫld
и!р
NULL
) { \

814 
Цm
 = 
	`SPLAY_RIGHT
”lm, 
fЫld
); \

815 
	`SPLAY_LEFT
(
Цm
, 
fЫld
и!р
NULL
) { \

816 
Цm
 = 
	`SPLAY_LEFT
”lm, 
fЫld
); \

819 
Цm
 = 
NULL
; \

820  (
Цm
); \

823 
__ЪlЪe
 
ty≥
 * \

824 
«me
##
	`_SPLAY_MIN_MAX
(«mР*
hЧd
, 
vЃ
) \

826 
«me
##
	`_SPLAY_MINMAX
(
hЧd
, 
vЃ
); \

827  (
	`SPLAY_ROOT
(
hЧd
)); \

828 }

	)

833 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

834 
ty≥
 * \

835 
«me
##
	`_SPLAY_INSERT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

837 iа(
	`SPLAY_EMPTY
(
hЧd
)) { \

838 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ир
	`SPLAY_RIGHT
”lm, fЫldир
NULL
; \

840 
__comp
; \

841 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

842 
__comp
 = (
cmp
)(
Цm
, (
hЧd
)->
•h_roў
); \

843 if(
__comp
 < 0) { \

844 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ирSPLAY_LEFT((
hЧd
)->
•h_roў
, field);\

845 
	`SPLAY_RIGHT
(
Цm
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

846 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
ир
NULL
; \

847 } iа(
__comp
 > 0) { \

848 
	`SPLAY_RIGHT
(
Цm
, 
fЫld
ирSPLAY_RIGHT((
hЧd
)->
•h_roў
, field);\

849 
	`SPLAY_LEFT
(
Цm
, 
fЫld
ир(
hЧd
)->
•h_roў
; \

850 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
NULL
; \

852  ((
hЧd
)->
•h_roў
); \

854 (
hЧd
)->
•h_roў
 = (
Цm
); \

855  (
NULL
); \

858 
ty≥
 * \

859 
«me
##
	`_SPLAY_REMOVE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

861 
ty≥
 *
__tmp
; \

862 iа(
	`SPLAY_EMPTY
(
hЧd
)) \

863  (
NULL
); \

864 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

865 iа((
cmp
)(
Цm
, (
hЧd
)->
•h_roў
) == 0) { \

866 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
) { \

867 (
hЧd
)->
•h_roў
 = 
	`SPLAY_RIGHT
((hЧd)->•h_roў, 
fЫld
);\

869 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

870 (
hЧd
)->
•h_roў
 = 
	`SPLAY_LEFT
((hЧd)->•h_roў, 
fЫld
);\

871 
«me
##
	`_SPLAY
(
hЧd
, 
Цm
); \

872 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
ир
__tmp
; \

874  (
Цm
); \

876  (
NULL
); \

880 
«me
##
	`_SPLAY
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

882 
ty≥
 
__node
, *
__Ћб
, *
__right
, *
__tmp
; \

883 
__comp
; \

885 
	`SPLAY_LEFT
(&
__node
, 
fЫld
ир
	`SPLAY_RIGHT
(&__node, fЫldир
NULL
;\

886 
__Ћб
 = 
__right
 = &
__node
; \

888 (
__comp
 = (
cmp
)(
Цm
, (
hЧd
)->
•h_roў
))) { \

889 iа(
__comp
 < 0) { \

890 
__tmp
 = 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
); \

891 iа(
__tmp
 =р
NULL
) \

893 iа((
cmp
)(
Цm
, 
__tmp
) < 0){ \

894 
	`SPLAY_ROTATE_RIGHT
(
hЧd
, 
__tmp
, 
fЫld
); \

895 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

898 
	`SPLAY_LINKLEFT
(
hЧd
, 
__right
, 
fЫld
); \

899 } iа(
__comp
 > 0) { \

900 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

901 iа(
__tmp
 =р
NULL
) \

903 iа((
cmp
)(
Цm
, 
__tmp
) > 0){ \

904 
	`SPLAY_ROTATE_LEFT
(
hЧd
, 
__tmp
, 
fЫld
); \

905 iа(
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

908 
	`SPLAY_LINKRIGHT
(
hЧd
, 
__Ћб
, 
fЫld
); \

911 
	`SPLAY_ASSEMBLE
(
hЧd
, &
__node
, 
__Ћб
, 
__right
, 
fЫld
); \

917 
«me
##
	`_SPLAY_MINMAX
(«mР*
hЧd
, 
__comp
) \

919 
ty≥
 
__node
, *
__Ћб
, *
__right
, *
__tmp
; \

921 
	`SPLAY_LEFT
(&
__node
, 
fЫld
ир
	`SPLAY_RIGHT
(&__node, fЫldир
NULL
;\

922 
__Ћб
 = 
__right
 = &
__node
; \

925 iа(
__comp
 < 0) { \

926 
__tmp
 = 
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
); \

927 iа(
__tmp
 =р
NULL
) \

929 iа(
__comp
 < 0){ \

930 
	`SPLAY_ROTATE_RIGHT
(
hЧd
, 
__tmp
, 
fЫld
); \

931 iа(
	`SPLAY_LEFT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

934 
	`SPLAY_LINKLEFT
(
hЧd
, 
__right
, 
fЫld
); \

935 } iа(
__comp
 > 0) { \

936 
__tmp
 = 
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
); \

937 iа(
__tmp
 =р
NULL
) \

939 iа(
__comp
 > 0) { \

940 
	`SPLAY_ROTATE_LEFT
(
hЧd
, 
__tmp
, 
fЫld
); \

941 iа(
	`SPLAY_RIGHT
((
hЧd
)->
•h_roў
, 
fЫld
и=р
NULL
)\

944 
	`SPLAY_LINKRIGHT
(
hЧd
, 
__Ћб
, 
fЫld
); \

947 
	`SPLAY_ASSEMBLE
(
hЧd
, &
__node
, 
__Ћб
, 
__right
, 
fЫld
); \

948 }

	)

950 
	#SPLAY_NEGINF
 -1

	)

951 
	#SPLAY_INF
 1

	)

953 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_INSERT
(x, y)

	)

954 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_REMOVE
(x, y)

	)

955 
	#SPLAY_FIND
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_FIND
(x, y)

	)

956 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
и«me##
	`_SPLAY_NEXT
(x, y)

	)

957 
	#SPLAY_MIN
(
«me
, 
x
и(
	`SPLAY_EMPTY
(xи? 
NULL
 \

958 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

959 
	#SPLAY_MAX
(
«me
, 
x
и(
	`SPLAY_EMPTY
(xи? 
NULL
 \

960 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

962 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hЧd
) \

963 (
x
ир
	`SPLAY_MIN
(
«me
, 
hЧd
); \

964 (
x
и!р
NULL
; \

965 (
x
ир
	`SPLAY_NEXT
(
«me
, 
hЧd
, x))

	)

968 
	#RB_HEAD
(
«me
, 
ty≥
) \

969 
	s«me
 { \

970 
ty≥
 *
rbh_roў
; \

971 }

	)

973 
	#RB_INITIALIZER
(
roў
) \

974 { 
NULL
 }

	)

976 
	#RB_INIT
(
roў
) do { \

977 (
roў
)->
rbh_roў
 = 
NULL
; \

978 } 0)

	)

980 
	#RB_BLACK
 0

	)

981 
	#RB_RED
 1

	)

982 
	#RB_ENTRY
(
ty≥
) \

984 
ty≥
 *
rbe_Ћб
; \

985 
ty≥
 *
rbe_right
; \

986 
ty≥
 *
rbe_ЈїЅ
; \

987 
rbe_cё№
; \

988 }

	)

990 
	#RB_LEFT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_Ћб


	)

991 
	#RB_RIGHT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_right


	)

992 
	#RB_PARENT
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_ЈїЅ


	)

993 
	#RB_COLOR
(
Цm
, 
fЫld
и”lm)->fЫld.
rbe_cё№


	)

994 
	#RB_ROOT
(
hЧd
и(hЧd)->
rbh_roў


	)

995 
	#RB_EMPTY
(
hЧd
и(
	`RB_ROOT
(hЧdи=р
NULL
)

	)

997 
	#RB_SET
(
Цm
, 
ЈїЅ
, 
fЫld
) do { \

998 
	`RB_PARENT
(
Цm
, 
fЫld
ир
ЈїЅ
; \

999 
	`RB_LEFT
(
Цm
, 
fЫld
ир
	`RB_RIGHT
”lm, fЫldир
NULL
; \

1000 
	`RB_COLOR
(
Цm
, 
fЫld
ир
RB_RED
; \

1001 } 0)

	)

1003 
	#RB_SET_BLACKRED
(
bѕck
, 
їd
, 
fЫld
) do { \

1004 
	`RB_COLOR
(
bѕck
, 
fЫld
ир
RB_BLACK
; \

1005 
	`RB_COLOR
(
їd
, 
fЫld
ир
RB_RED
; \

1006 } 0)

	)

1008 #iвdeа
RB_AUGMENT


1009 
	#RB_AUGMENT
(
x
)

	)

1012 
	#RB_ROTATE_LEFT
(
hЧd
, 
Цm
, 
tmp
, 
fЫld
) do { \

1013 (
tmp
ир
	`RB_RIGHT
(
Цm
, 
fЫld
); \

1014 iа((
	`RB_RIGHT
(
Цm
, 
fЫld
ир
	`RB_LEFT
(
tmp
, field))) { \

1015 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldир(
Цm
); \

1017 
	`RB_AUGMENT
(
Цm
); \

1018 iа((
	`RB_PARENT
(
tmp
, 
fЫld
ирRB_PARENT(
Цm
, field))) { \

1019 iа((
Цm
и=р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field)) \

1020 
	`RB_LEFT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

1022 
	`RB_RIGHT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

1024 (
hЧd
)->
rbh_roў
 = (
tmp
); \

1025 
	`RB_LEFT
(
tmp
, 
fЫld
ир(
Цm
); \

1026 
	`RB_PARENT
(
Цm
, 
fЫld
ир(
tmp
); \

1027 
	`RB_AUGMENT
(
tmp
); \

1028 iа((
	`RB_PARENT
(
tmp
, 
fЫld
))) \

1029 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fЫld
)); \

1030 } 0)

	)

1032 
	#RB_ROTATE_RIGHT
(
hЧd
, 
Цm
, 
tmp
, 
fЫld
) do { \

1033 (
tmp
ир
	`RB_LEFT
(
Цm
, 
fЫld
); \

1034 iа((
	`RB_LEFT
(
Цm
, 
fЫld
ир
	`RB_RIGHT
(
tmp
, field))) { \

1035 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldир(
Цm
); \

1037 
	`RB_AUGMENT
(
Цm
); \

1038 iа((
	`RB_PARENT
(
tmp
, 
fЫld
ирRB_PARENT(
Цm
, field))) { \

1039 iа((
Цm
и=р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field)) \

1040 
	`RB_LEFT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

1042 
	`RB_RIGHT
(
	`RB_PARENT
(
Цm
, 
fЫld
), fЫldир(
tmp
); \

1044 (
hЧd
)->
rbh_roў
 = (
tmp
); \

1045 
	`RB_RIGHT
(
tmp
, 
fЫld
ир(
Цm
); \

1046 
	`RB_PARENT
(
Цm
, 
fЫld
ир(
tmp
); \

1047 
	`RB_AUGMENT
(
tmp
); \

1048 iа((
	`RB_PARENT
(
tmp
, 
fЫld
))) \

1049 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fЫld
)); \

1050 } 0)

	)

1053 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

1054 
«me
##
	`_RB_INSERT_COLOR
(«mР*, 
ty≥
 *); \

1055 
«me
##
	`_RB_REMOVE_COLOR
(«mР*, 
ty≥
 *, type *);\

1056 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

1057 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

1058 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

1059 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

1060 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

1062 

	)

1066 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fЫld
, 
cmp
) \

1068 
«me
##
	`_RB_INSERT_COLOR
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

1070 
ty≥
 *
ЈїЅ
, *
gЈїЅ
, *
tmp
; \

1071 (
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
)) && \

1072 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
и=р
RB_RED
) { \

1073 
gЈїЅ
 = 
	`RB_PARENT
(
ЈїЅ
, 
fЫld
); \

1074 iа(
ЈїЅ
 =р
	`RB_LEFT
(
gЈїЅ
, 
fЫld
)) { \

1075 
tmp
 = 
	`RB_RIGHT
(
gЈїЅ
, 
fЫld
); \

1076 iа(
tmp
 && 
	`RB_COLOR
—mp, 
fЫld
и=р
RB_RED
) { \

1077 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_BLACK
; \

1078 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
);\

1079 
Цm
 = 
gЈїЅ
; \

1082 iа(
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

1083 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1084 
tmp
 = 
ЈїЅ
; \

1085 
ЈїЅ
 = 
Цm
; \

1086 
Цm
 = 
tmp
; \

1088 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
); \

1089 
	`RB_ROTATE_RIGHT
(
hЧd
, 
gЈїЅ
, 
tmp
, 
fЫld
); \

1091 
tmp
 = 
	`RB_LEFT
(
gЈїЅ
, 
fЫld
); \

1092 iа(
tmp
 && 
	`RB_COLOR
—mp, 
fЫld
и=р
RB_RED
) { \

1093 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_BLACK
; \

1094 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
);\

1095 
Цm
 = 
gЈїЅ
; \

1098 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

1099 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1100 
tmp
 = 
ЈїЅ
; \

1101 
ЈїЅ
 = 
Цm
; \

1102 
Цm
 = 
tmp
; \

1104 
	`RB_SET_BLACKRED
(
ЈїЅ
, 
gЈїЅ
, 
fЫld
); \

1105 
	`RB_ROTATE_LEFT
(
hЧd
, 
gЈїЅ
, 
tmp
, 
fЫld
); \

1108 
	`RB_COLOR
(
hЧd
->
rbh_roў
, 
fЫld
ир
RB_BLACK
; \

1112 
«me
##
	`_RB_REMOVE_COLOR
(«mР*
hЧd
, 
ty≥
 *
ЈїЅ
, ty≥ *
Цm
) \

1114 
ty≥
 *
tmp
; \

1115 (
Цm
 =р
NULL
 || 
	`RB_COLOR
”lm, 
fЫld
и=р
RB_BLACK
) && \

1116 
Цm
 !р
	`RB_ROOT
(
hЧd
)) { \

1117 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) { \

1118 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

1119 iа(
	`RB_COLOR
(
tmp
, 
fЫld
и=р
RB_RED
) { \

1120 
	`RB_SET_BLACKRED
(
tmp
, 
ЈїЅ
, 
fЫld
); \

1121 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1122 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

1124 iа((
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

1125 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) &&\

1126 (
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

1127 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
)) {\

1128 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

1129 
Цm
 = 
ЈїЅ
; \

1130 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

1132 iа(
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

1133 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) {\

1134 
ty≥
 *
ёeб
; \

1135 iа((
ёeб
 = 
	`RB_LEFT
(
tmp
, 
fЫld
)))\

1136 
	`RB_COLOR
(
ёeб
, 
fЫld
ир
RB_BLACK
;\

1137 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

1138 
	`RB_ROTATE_RIGHT
(
hЧd
, 
tmp
, 
ёeб
, 
fЫld
);\

1139 
tmp
 = 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
); \

1141 
	`RB_COLOR
(
tmp
, 
fЫld
ирRB_COLOR(
ЈїЅ
, field);\

1142 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
ир
RB_BLACK
; \

1143 iа(
	`RB_RIGHT
(
tmp
, 
fЫld
)) \

1144 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldир
RB_BLACK
;\

1145 
	`RB_ROTATE_LEFT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1146 
Цm
 = 
	`RB_ROOT
(
hЧd
); \

1150 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

1151 iа(
	`RB_COLOR
(
tmp
, 
fЫld
и=р
RB_RED
) { \

1152 
	`RB_SET_BLACKRED
(
tmp
, 
ЈїЅ
, 
fЫld
); \

1153 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1154 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

1156 iа((
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

1157 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) &&\

1158 (
	`RB_RIGHT
(
tmp
, 
fЫld
и=р
NULL
 || \

1159 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
)) {\

1160 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

1161 
Цm
 = 
ЈїЅ
; \

1162 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

1164 iа(
	`RB_LEFT
(
tmp
, 
fЫld
и=р
NULL
 || \

1165 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldи=р
RB_BLACK
) {\

1166 
ty≥
 *
№ight
; \

1167 iа((
№ight
 = 
	`RB_RIGHT
(
tmp
, 
fЫld
)))\

1168 
	`RB_COLOR
(
№ight
, 
fЫld
ир
RB_BLACK
;\

1169 
	`RB_COLOR
(
tmp
, 
fЫld
ир
RB_RED
; \

1170 
	`RB_ROTATE_LEFT
(
hЧd
, 
tmp
, 
№ight
, 
fЫld
);\

1171 
tmp
 = 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
); \

1173 
	`RB_COLOR
(
tmp
, 
fЫld
ирRB_COLOR(
ЈїЅ
, field);\

1174 
	`RB_COLOR
(
ЈїЅ
, 
fЫld
ир
RB_BLACK
; \

1175 iа(
	`RB_LEFT
(
tmp
, 
fЫld
)) \

1176 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fЫld
), fЫldир
RB_BLACK
;\

1177 
	`RB_ROTATE_RIGHT
(
hЧd
, 
ЈїЅ
, 
tmp
, 
fЫld
);\

1178 
Цm
 = 
	`RB_ROOT
(
hЧd
); \

1183 iа(
Цm
) \

1184 
	`RB_COLOR
(
Цm
, 
fЫld
ир
RB_BLACK
; \

1187 
ty≥
 * \

1188 
«me
##
	`_RB_REMOVE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

1190 
ty≥
 *
chЮd
, *
ЈїЅ
, *
ёd
 = 
Цm
; \

1191 
cё№
; \

1192 iа(
	`RB_LEFT
(
Цm
, 
fЫld
и=р
NULL
) \

1193 
chЮd
 = 
	`RB_RIGHT
(
Цm
, 
fЫld
); \

1194 iа(
	`RB_RIGHT
(
Цm
, 
fЫld
и=р
NULL
) \

1195 
chЮd
 = 
	`RB_LEFT
(
Цm
, 
fЫld
); \

1197 
ty≥
 *
Ћб
; \

1198 
Цm
 = 
	`RB_RIGHT
”lm, 
fЫld
); \

1199 (
Ћб
 = 
	`RB_LEFT
(
Цm
, 
fЫld
))) \

1200 
Цm
 = 
Ћб
; \

1201 
chЮd
 = 
	`RB_RIGHT
(
Цm
, 
fЫld
); \

1202 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

1203 
cё№
 = 
	`RB_COLOR
(
Цm
, 
fЫld
); \

1204 iа(
chЮd
) \

1205 
	`RB_PARENT
(
chЮd
, 
fЫld
ир
ЈїЅ
; \

1206 iа(
ЈїЅ
) { \

1207 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) \

1208 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

1210 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

1211 
	`RB_AUGMENT
(
ЈїЅ
); \

1213 
	`RB_ROOT
(
hЧd
ир
chЮd
; \

1214 iа(
	`RB_PARENT
(
Цm
, 
fЫld
и=р
ёd
) \

1215 
ЈїЅ
 = 
Цm
; \

1216 (
Цm
)->
fЫld
 = (
ёd
)->field; \

1217 iа(
	`RB_PARENT
(
ёd
, 
fЫld
)) { \

1218 iа(
	`RB_LEFT
(
	`RB_PARENT
(
ёd
, 
fЫld
), field) == old)\

1219 
	`RB_LEFT
(
	`RB_PARENT
(
ёd
, 
fЫld
), fЫldир
Цm
;\

1221 
	`RB_RIGHT
(
	`RB_PARENT
(
ёd
, 
fЫld
), fЫldир
Цm
;\

1222 
	`RB_AUGMENT
(
	`RB_PARENT
(
ёd
, 
fЫld
)); \

1224 
	`RB_ROOT
(
hЧd
ир
Цm
; \

1225 
	`RB_PARENT
(
	`RB_LEFT
(
ёd
, 
fЫld
), fЫldир
Цm
; \

1226 iа(
	`RB_RIGHT
(
ёd
, 
fЫld
)) \

1227 
	`RB_PARENT
(
	`RB_RIGHT
(
ёd
, 
fЫld
), fЫldир
Цm
; \

1228 iа(
ЈїЅ
) { \

1229 
Ћб
 = 
ЈїЅ
; \

1231 
	`RB_AUGMENT
(
Ћб
); \

1232 } (
Ћб
 = 
	`RB_PARENT
÷eб, 
fЫld
))); \

1234 
cё№
; \

1236 
ЈїЅ
 = 
	`RB_PARENT
(
Цm
, 
fЫld
); \

1237 
cё№
 = 
	`RB_COLOR
(
Цm
, 
fЫld
); \

1238 iа(
chЮd
) \

1239 
	`RB_PARENT
(
chЮd
, 
fЫld
ир
ЈїЅ
; \

1240 iа(
ЈїЅ
) { \

1241 iа(
	`RB_LEFT
(
ЈїЅ
, 
fЫld
и=р
Цm
) \

1242 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

1244 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
chЮd
; \

1245 
	`RB_AUGMENT
(
ЈїЅ
); \

1247 
	`RB_ROOT
(
hЧd
ир
chЮd
; \

1248 
cё№
: \

1249 iа(
cё№
 =р
RB_BLACK
) \

1250 
«me
##
	`_RB_REMOVE_COLOR
(
hЧd
, 
ЈїЅ
, 
chЮd
); \

1251  (
ёd
); \

1255 
ty≥
 * \

1256 
«me
##
	`_RB_INSERT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

1258 
ty≥
 *
tmp
; \

1259 
ty≥
 *
ЈїЅ
 = 
NULL
; \

1260 
comp
 = 0; \

1261 
tmp
 = 
	`RB_ROOT
(
hЧd
); \

1262 
tmp
) { \

1263 
ЈїЅ
 = 
tmp
; \

1264 
comp
 = (
cmp
)(
Цm
, 
ЈїЅ
); \

1265 iа(
comp
 < 0) \

1266 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

1267 iа(
comp
 > 0) \

1268 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

1270  (
tmp
); \

1272 
	`RB_SET
(
Цm
, 
ЈїЅ
, 
fЫld
); \

1273 iа(
ЈїЅ
 !р
NULL
) { \

1274 iа(
comp
 < 0) \

1275 
	`RB_LEFT
(
ЈїЅ
, 
fЫld
ир
Цm
; \

1277 
	`RB_RIGHT
(
ЈїЅ
, 
fЫld
ир
Цm
; \

1278 
	`RB_AUGMENT
(
ЈїЅ
); \

1280 
	`RB_ROOT
(
hЧd
ир
Цm
; \

1281 
«me
##
	`_RB_INSERT_COLOR
(
hЧd
, 
Цm
); \

1282  (
NULL
); \

1286 
ty≥
 * \

1287 
«me
##
	`_RB_FIND
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

1289 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hЧd
); \

1290 
comp
; \

1291 
tmp
) { \

1292 
comp
 = 
	`cmp
(
Цm
, 
tmp
); \

1293 iа(
comp
 < 0) \

1294 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

1295 iа(
comp
 > 0) \

1296 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

1298  (
tmp
); \

1300  (
NULL
); \

1303 
ty≥
 * \

1304 
«me
##
	`_RB_NEXT
(
ty≥
 *
Цm
) \

1306 iа(
	`RB_RIGHT
(
Цm
, 
fЫld
)) { \

1307 
Цm
 = 
	`RB_RIGHT
”lm, 
fЫld
); \

1308 
	`RB_LEFT
(
Цm
, 
fЫld
)) \

1309 
Цm
 = 
	`RB_LEFT
”lm, 
fЫld
); \

1311 iа(
	`RB_PARENT
(
Цm
, 
fЫld
) && \

1312 (
Цm
 =р
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fЫld
), field))) \

1313 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

1315 
	`RB_PARENT
(
Цm
, 
fЫld
) && \

1316 (
Цm
 =р
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fЫld
), field)))\

1317 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

1318 
Цm
 = 
	`RB_PARENT
”lm, 
fЫld
); \

1321  (
Цm
); \

1324 
ty≥
 * \

1325 
«me
##
	`_RB_MINMAX
(«mР*
hЧd
, 
vЃ
) \

1327 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hЧd
); \

1328 
ty≥
 *
ЈїЅ
 = 
NULL
; \

1329 
tmp
) { \

1330 
ЈїЅ
 = 
tmp
; \

1331 iа(
vЃ
 < 0) \

1332 
tmp
 = 
	`RB_LEFT
—mp, 
fЫld
); \

1334 
tmp
 = 
	`RB_RIGHT
—mp, 
fЫld
); \

1336  (
ЈїЅ
); \

1337 }

	)

1339 
	#RB_NEGINF
 -1

	)

1340 
	#RB_INF
 1

	)

1342 
	#RB_INSERT
(
«me
, 
x
, 
y
и«me##
	`_RB_INSERT
(x, y)

	)

1343 
	#RB_REMOVE
(
«me
, 
x
, 
y
и«me##
	`_RB_REMOVE
(x, y)

	)

1344 
	#RB_FIND
(
«me
, 
x
, 
y
и«me##
	`_RB_FIND
(x, y)

	)

1345 
	#RB_NEXT
(
«me
, 
x
, 
y
и«me##
	`_RB_NEXT
(y)

	)

1346 
	#RB_MIN
(
«me
, 
x
и«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

1347 
	#RB_MAX
(
«me
, 
x
и«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

1349 
	#RB_FOREACH
(
x
, 
«me
, 
hЧd
) \

1350 (
x
ир
	`RB_MIN
(
«me
, 
hЧd
); \

1351 (
x
и!р
NULL
; \

1352 (
x
ир
«me
##
	`_RB_NEXT
(x))

	)

	@arc4random.c

42 #iвdeа
ARC4RANDOM_EXPORT


43 
	#ARC4RANDOM_EXPORT


	)

46 #iвdeа
ARC4RANDOM_UINT32


47 
	#ARC4RANDOM_UINT32
 
uЪt32_t


	)

50 #iвdeа
ARC4RANDOM_NO_INCLUDES


51 #ifdeа
WIN32


52 
	~<wЪьy±.h
>

53 
	~<іoыss.h
>

55 
	~<fъО.h
>

56 
	~<uni°d.h
>

57 
	~<sys/Јњm.h
>

58 
	~<sys/time.h
>

60 
	~<limЩs.h
>

61 
	~<°dlib.h
>

62 
	~<°rЪg.h
>

66 
	#ADD_ENTROPY
 32

	)

69 
	#BYTES_BEFORE_RESEED
 1600000

	)

71 
	sђc4_°їam
 {

72 
	mi
;

73 
	mj
;

74 
	ms
[256];

77 #ifdeа
WIN32


78 
	#gСpid
 
_gСpid


	)

79 
	#pid_t
 

	)

82 
	grs_ЪЩЯlized
;

83 
ђc4_°їam
 
	grs
;

84 
pid_t
 
	gђc4_°Ь_pid
;

85 
	gђc4_couЅ
;

86 
	gђc4_£eded_ok
;

88 
ЪlЪe
 
ђc4_gСbyЛ
();

90 
ЪlЪe
 

91 
	$ђc4_ЪЩ
()

93 
n
;

95 
n
 = 0;В < 256;В++)

96 
rs
.
s
[
n
] =В;

97 
rs
.
i
 = 0;

98 
rs
.
j
 = 0;

99 
	}
}

101 
ЪlЪe
 

102 
	$ђc4_addњndom
(cЏ° *
d©
, 
d©Ћn
)

104 
n
;

105 
si
;

107 
rs
.
i
--;

108 
n
 = 0;В < 256;В++) {

109 
rs
.
i
 = (rs.i + 1);

110 
si
 = 
rs
.
s
[rs.
i
];

111 
rs
.
j
 = (rs.j + 
si
 + 
d©
[
n
 % 
d©Ћn
]);

112 
rs
.
s
[rs.
i
] =Дs.s[rs.
j
];

113 
rs
.
s
[rs.
j
] = 
si
;

115 
rs
.
j
 =Дs.
i
;

116 
	}
}

118 #iвdeа
WIN32


119 
ssize_t


120 
	$їad_Ѓl
(
fd
, *
buf
, 
size_t
 
couЅ
)

122 
size_t
 
numїad
 = 0;

123 
ssize_t
 
їsu…
;

125 
numїad
 < 
couЅ
) {

126 
їsu…
 = 
	`їad
(
fd
, 
buf
+
numїad
, 
couЅ
-numread);

127 iа(
їsu…
<0)

129 iа(
їsu…
 == 0)

131 
numїad
 +р
їsu…
;

134  (
ssize_t
)
numїad
;

135 
	}
}

140 
	$ђc4_£ed
()

142 
buf
[
ADD_ENTROPY
];

145 #ifdeа
WIN32


146 
іovidФ_£t
 = 0;

147 
HCRYPTPROV
 
іovidФ
;

149 cЏ° *
fЮТames
[] = {

150 "/dev/§™dom", "/dev/uњndom", "/dev/њndom", 
NULL


152 
fd
, 
i
;

153 
size_t
 
n
;

156 #ifdeа
WIN32


157 iа(!
іovidФ_£t
) {

158 iа(!
	`Cry±AcquЬeCЏЛxt
(&
іovidФ
, 
NULL
, NULL, 
PROV_RSA_FULL
,

159 
CRYPT_VERIFYCONTEXT
)) {

160 iа(()
	`GСLa°EЉ№
(и!р()
NTE_BAD_KEYSET
)

163 
іovidФ_£t
 = 1;

165 iа(!
	`Cry±GТR™dom
(
іovidФ
, (
buf
), buf))

167 
	`ђc4_addњndom
(
buf
, (buf));

168 
	`mem£t
(
buf
, 0, (buf));

169 
ђc4_£eded_ok
 = 1;

172 
i
 = 0; 
fЮТames
[i]; ++i) {

173 
fd
 = 
	`ЁТ
(
fЮТames
[
i
], 
O_RDONLY
, 0);

174 iа(
fd
<0)

176 
n
 = 
	`їad_Ѓl
(
fd
, 
buf
, (buf));

177 
	`юo£
(
fd
);

178 iа(
n
 !р(
buf
))

180 
	`ђc4_addњndom
(
buf
, (buf));

181 
	`mem£t
(
buf
, 0, (buf));

182 
ђc4_£eded_ok
 = 1;

188 
	}
}

191 
	$ђc4_°Ь
()

193 
i
;

195 iа(!
rs_ЪЩЯlized
) {

196 
	`ђc4_ЪЩ
();

197 
rs_ЪЩЯlized
 = 1;

200 
	`ђc4_£ed
();

220 
i
 = 0; i < 12*256; i++)

221 ()
	`ђc4_gСbyЛ
();

222 
ђc4_couЅ
 = 
BYTES_BEFORE_RESEED
;

223 
	}
}

227 
	$ђc4_°Ь_if_√eded
()

229 
pid_t
 
pid
 = 
	`gСpid
();

231 iа(
ђc4_couЅ
 <р0 || !
rs_ЪЩЯlized
 || 
ђc4_°Ь_pid
 !р
pid
)

233 
ђc4_°Ь_pid
 = 
pid
;

234 
	`ђc4_°Ь
();

236 
	}
}

238 
ЪlЪe
 

239 
	$ђc4_gСbyЛ
()

241 
si
, 
sj
;

243 
rs
.
i
 = (rs.i + 1);

244 
si
 = 
rs
.
s
[rs.
i
];

245 
rs
.
j
 = (rs.j + 
si
);

246 
sj
 = 
rs
.
s
[rs.
j
];

247 
rs
.
s
[rs.
i
] = 
sj
;

248 
rs
.
s
[rs.
j
] = 
si
;

249  (
rs
.
s
[(
si
 + 
sj
) & 0xff]);

250 
	}
}

252 
ЪlЪe
 

253 
	$ђc4_gСw№d
()

255 
vЃ
;

257 
vЃ
 = 
	`ђc4_gСbyЛ
() << 24;

258 
vЃ
 |р
	`ђc4_gСbyЛ
() << 16;

259 
vЃ
 |р
	`ђc4_gСbyЛ
() << 8;

260 
vЃ
 |р
	`ђc4_gСbyЛ
();

262  
vЃ
;

263 
	}
}

265 #iвdeа
ARC4RANDOM_NOSTIR


266 
ARC4RANDOM_EXPORT
 

267 
	$ђc4њndom_°Ь
()

269 
vЃ
;

270 
	`_ARC4_LOCK
();

271 
vЃ
 = 
	`ђc4_°Ь
();

272 
	`_ARC4_UNLOCK
();

273  
vЃ
;

274 
	}
}

277 #iвdeа
ARC4RANDOM_NOADDRANDOM


278 
ARC4RANDOM_EXPORT
 

279 
	$ђc4њndom_addњndom
(cЏ° *
d©
, 
d©Ћn
)

281 
j
;

282 
	`_ARC4_LOCK
();

283 iа(!
rs_ЪЩЯlized
)

284 
	`ђc4_°Ь
();

285 
j
 = 0; j < 
d©Ћn
; j += 256) {

290 
	`ђc4_addњndom
(
d©
 + 
j
, 
d©Ћn
 - j);

292 
	`_ARC4_UNLOCK
();

293 
	}
}

296 #iвdeа
ARC4RANDOM_NORANDOM


297 
ARC4RANDOM_EXPORT
 
ARC4RANDOM_UINT32


298 
	$ђc4њndom
()

300 
ARC4RANDOM_UINT32
 
vЃ
;

301 
	`_ARC4_LOCK
();

302 
ђc4_couЅ
 -= 4;

303 
	`ђc4_°Ь_if_√eded
();

304 
vЃ
 = 
	`ђc4_gСw№d
();

305 
	`_ARC4_UNLOCK
();

306  
vЃ
;

307 
	}
}

310 
ARC4RANDOM_EXPORT
 

311 
	$ђc4њndom_buf
(*
_buf
, 
size_t
 
n
)

313 *
buf
 = 
_buf
;

314 
	`_ARC4_LOCK
();

315 
	`ђc4_°Ь_if_√eded
();

316 
n
--) {

317 iа(--
ђc4_couЅ
 <= 0)

318 
	`ђc4_°Ь
();

319 
buf
[
n
] = 
	`ђc4_gСbyЛ
();

321 
	`_ARC4_UNLOCK
();

322 
	}
}

324 #iвdeа
ARC4RANDOM_NOUNIFORM


335 
ARC4RANDOM_EXPORT
 

336 
	$ђc4њndom_unif№m
(
uµФ_bound
)

338 
ARC4RANDOM_UINT32
 
r
, 
mЪ
;

340 iа(
uµФ_bound
 < 2)

343 #iа(
UINT_MAX
 > 0xffffffffUL)

344 
mЪ
 = 0x100000000UL % 
uµФ_bound
;

347 iа(
uµФ_bound
 > 0x80000000)

348 
mЪ
 = 1 + ~
uµФ_bound
;

351 
mЪ
 = ((0xfffffffа- (
uµФ_bound
 * 2)) + 1) % upper_bound;

362 
r
 = 
	`ђc4њndom
();

363 iа(
r
 >р
mЪ
)

367  
r
 % 
uµФ_bound
;

368 
	}
}

	@buffer.c

28 
	~"evТt-cЏfig.h
"

30 #ifdeа
WIN32


31 
	~<wЪsock2.h
>

32 
	~<wЪdows.h
>

33 
	~<io.h
>

36 #ifdeа
_EVENT_HAVE_VASPRINTF


38 
	#_GNU_SOURCE


	)

41 
	~<sys/ty≥s.h
>

43 #ifdeа
_EVENT_HAVE_SYS_TIME_H


44 
	~<sys/time.h
>

47 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


48 
	~<sys/sockС.h
>

51 #ifdeа
_EVENT_HAVE_SYS_UIO_H


52 
	~<sys/uio.h
>

55 #ifdeа
_EVENT_HAVE_SYS_IOCTL_H


56 
	~<sys/ioщl.h
>

59 #ifdeа
_EVENT_HAVE_SYS_MMAN_H


60 
	~<sys/mm™.h
>

63 #ifdeа
_EVENT_HAVE_SYS_SENDFILE_H


64 
	~<sys/£ndfЮe.h
>

67 
	~<ФЇo.h
>

68 
	~<°dio.h
>

69 
	~<°dlib.h
>

70 
	~<°rЪg.h
>

71 #ifdeа
_EVENT_HAVE_STDARG_H


72 
	~<°dђg.h
>

74 #ifdeа
_EVENT_HAVE_UNISTD_H


75 
	~<uni°d.h
>

78 
	~"evТt2/evТt.h
"

79 
	~"evТt2/bufгr.h
"

80 
	~"evТt2/bufгr_comЈt.h
"

81 
	~"evТt2/bufгїvТt.h
"

82 
	~"evТt2/bufгїvТt_comЈt.h
"

83 
	~"evТt2/bufгїvТt_°ruщ.h
"

84 
	~"evТt2/thїad.h
"

85 
	~"evТt-cЏfig.h
"

86 
	~"log-ЪЛЇЃ.h
"

87 
	~"mm-ЪЛЇЃ.h
"

88 
	~"utЮ-ЪЛЇЃ.h
"

89 
	~"evthїad-ЪЛЇЃ.h
"

90 
	~"evbufгr-ЪЛЇЃ.h
"

91 
	~"bufгїvТt-ЪЛЇЃ.h
"

94 #iвdeа
MAP_FAILED


95 
	#MAP_FAILED
 ((*)-1)

	)

99 #iа
defЪed
(
_EVENT_HAVE_SYS_SENDFILE_H
и&& defЪed(
_EVENT_HAVE_SENDFILE
и&& defЪed(
__lЪux__
)

100 
	#USE_SENDFILE
 1

	)

101 
	#SENDFILE_IS_LINUX
 1

	)

102 #Цiа
defЪed
(
_EVENT_HAVE_SENDFILE
и&& defЪed(
__FїeBSD__
)

103 
	#USE_SENDFILE
 1

	)

104 
	#SENDFILE_IS_FREEBSD
 1

	)

105 #Цiа
defЪed
(
_EVENT_HAVE_SENDFILE
и&& defЪed(
__APPLE__
)

106 
	#USE_SENDFILE
 1

	)

107 
	#SENDFILE_IS_MACOSX
 1

	)

108 #Цiа
defЪed
(
_EVENT_HAVE_SENDFILE
и&& defЪed(
__sun__
и&& defЪed(
__svr4__
)

109 
	#USE_SENDFILE
 1

	)

110 
	#SENDFILE_IS_SOLARIS
 1

	)

113 #ifdeа
USE_SENDFILE


114 
	gu£_£ndfЮe
 = 1;

116 #ifdeа
_EVENT_HAVE_MMAP


117 
	gu£_mm≠
 = 1;

122 
	#EVBUFFER_CB_USER_FLAGS
 0xffff

	)

124 
	#EVBUFFER_CB_INTERNAL_FLAGS
 0xffff0000

	)

127 
	#EVBUFFER_CB_OBSOLETE
 0x00040000

	)

130 
	#CHAIN_SPACE_PTR
(
ch
и((ch)->
bufгr
 + (ch)->
miІlign
 + (ch)->
off
)

	)

131 
	#CHAIN_SPACE_LEN
(
ch
и((ch)->
жags
 & 
EVBUFFER_IMMUTABLE
 ? \

132 0 : (
ch
)->
bufгr_Ћn
 - ((ch)->
miІlign
 + (ch)->
off
))

	)

134 
	#CHAIN_PINNED
(
ch
и(((ch)->
жags
 & 
EVBUFFER_MEM_PINNED_ANY
и!р0)

	)

135 
	#CHAIN_PINNED_R
(
ch
и(((ch)->
жags
 & 
EVBUFFER_MEM_PINNED_R
и!р0)

	)

137 
evbufгr_chaЪ_Ѓign
(
evbufгr_chaЪ
 *
chaЪ
);

138 
evbufгr_deгЉed_€ќback
(
deгЉed_cb
 *
cb
, *
ђg
);

139 
evbufгr_±r_memcmp
(cЏ° 
evbufгr
 *
buf
,

140 cЏ° 
evbufгr_±r
 *
pos
, cЏ° *
mem
, 
size_t
 
Ћn
);

142 
evbufгr_chaЪ
 *

143 
	$evbufгr_chaЪ_√w
(
size_t
 
size
)

145 
evbufгr_chaЪ
 *
chaЪ
;

146 
size_t
 
to_Ѓloc
;

148 
size
 +р
EVBUFFER_CHAIN_SIZE
;

151 
to_Ѓloc
 = 
MIN_BUFFER_SIZE
;

152 
to_Ѓloc
 < 
size
)

153 
to_Ѓloc
 <<= 1;

156 iа((
chaЪ
 = 
	`mm_mЃloc
(
to_Ѓloc
)и=р
NULL
)

157  (
NULL
);

159 
	`mem£t
(
chaЪ
, 0, 
EVBUFFER_CHAIN_SIZE
);

161 
chaЪ
->
bufгr_Ћn
 = 
to_Ѓloc
 - 
EVBUFFER_CHAIN_SIZE
;

166 
chaЪ
->
bufгr
 = 
	`EVBUFFER_CHAIN_EXTRA
(
u_chђ
, chain);

168  (
chaЪ
);

169 
	}
}

171 
ЪlЪe
 

172 
	$evbufгr_chaЪ_дУ
(
evbufгr_chaЪ
 *
chaЪ
)

174 iа(
	`CHAIN_PINNED
(
chaЪ
)) {

175 
chaЪ
->
жags
 |р
EVBUFFER_DANGLING
;

178 iа(
chaЪ
->
жags
 & (
EVBUFFER_MMAP
|
EVBUFFER_SENDFILE
|

179 
EVBUFFER_REFERENCE
)) {

180 iа(
chaЪ
->
жags
 & 
EVBUFFER_REFERENCE
) {

181 
evbufгr_chaЪ_їгїnы
 *
Ъfo
 =

182 
	`EVBUFFER_CHAIN_EXTRA
(

183 
evbufгr_chaЪ_їгїnы
,

184 
chaЪ
);

185 iа(
Ъfo
->
юЧnupв
)

186 (*
Ъfo
->
юЧnupв
)(
chaЪ
->
bufгr
,

187 
chaЪ
->
bufгr_Ћn
,

188 
Ъfo
->
exМa
);

190 #ifdeа
_EVENT_HAVE_MMAP


191 iа(
chaЪ
->
жags
 & 
EVBUFFER_MMAP
) {

192 
evbufгr_chaЪ_fd
 *
Ъfo
 =

193 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_fd
,

194 
chaЪ
);

195 iа(
	`munm≠
(
chaЪ
->
bufгr
, chaЪ->
bufгr_Ћn
) == -1)

196 
	`evТt_wђn
("%s: munm≠ faЮed", 
__func__
);

197 iа(
	`юo£
(
Ъfo
->
fd
) == -1)

198 
	`evТt_wђn
("%s: close(%d) failed",

199 
__func__
, 
Ъfo
->
fd
);

202 #ifdeа
USE_SENDFILE


203 iа(
chaЪ
->
жags
 & 
EVBUFFER_SENDFILE
) {

204 
evbufгr_chaЪ_fd
 *
Ъfo
 =

205 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_fd
,

206 
chaЪ
);

207 iа(
	`юo£
(
Ъfo
->
fd
) == -1)

208 
	`evТt_wђn
("%s: close(%d) failed",

209 
__func__
, 
Ъfo
->
fd
);

213 
	`mm_дУ
(
chaЪ
);

214 
	}
}

216 
ЪlЪe
 

217 
	$evbufгr_chaЪ_Ъ£є
(
evbufгr
 *
buf
, 
evbufгr_chaЪ
 *
chaЪ
)

219 
	`ASSERT_EVBUFFER_LOCKED
(
buf
);

220 iа(
buf
->
fЬ°
 =р
NULL
) {

221 
buf
->
fЬ°
 = buf->
ѕ°
 = 
chaЪ
;

222 
buf
->
іevious_to_ѕ°
 = 
NULL
;

225 iа(
buf
->
ѕ°
->
off
 =р0 && !
	`CHAIN_PINNED
(buf->last)) {

226 
	`evbufгr_chaЪ_дУ
(
buf
->
ѕ°
);

227 
buf
->
іevious_to_ѕ°
->
√xt
 = 
chaЪ
;

228 
buf
->
ѕ°
 = 
chaЪ
;

230 
buf
->
іevious_to_ѕ°
 = buf->
ѕ°
;

231 
buf
->
ѕ°
->
√xt
 = 
chaЪ
;

232 
buf
->
ѕ°
 = 
chaЪ
;

236 
buf
->
tўЃ_Ћn
 +р
chaЪ
->
off
;

237 
	}
}

240 
	$_evbufгr_chaЪ_pЪ
(
evbufгr_chaЪ
 *
chaЪ
, 
жag
)

242 
	`EVUTIL_ASSERT
((
chaЪ
->
жags
 & 
жag
) == 0);

243 
chaЪ
->
жags
 |р
жag
;

244 
	}
}

247 
	$_evbufгr_chaЪ_u≈Ъ
(
evbufгr_chaЪ
 *
chaЪ
, 
жag
)

249 
	`EVUTIL_ASSERT
((
chaЪ
->
жags
 & 
жag
) != 0);

250 
chaЪ
->
жags
 &р~
жag
;

251 iа(
chaЪ
->
жags
 & 
EVBUFFER_DANGLING
)

252 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

253 
	}
}

255 
evbufгr
 *

256 
	$evbufгr_√w
()

258 
evbufгr
 *
bufгr
;

260 
bufгr
 = 
	`mm_€ќoc
(1, (
evbufгr
));

261 iа(
bufгr
 =р
NULL
)

262  (
NULL
);

264 
	`TAILQ_INIT
(&
bufгr
->
€ќbacks
);

265 
bufгr
->
їfъt
 = 1;

267  (
bufгr
);

268 
	}
}

271 
	$_evbufгr_Ъьef
(
evbufгr
 *
buf
)

273 
	`EVBUFFER_LOCK
(
buf
);

274 ++
buf
->
їfъt
;

275 
	`EVBUFFER_UNLOCK
(
buf
);

276 
	}
}

279 
	$_evbufгr_Ъьef_™d_lock
(
evbufгr
 *
buf
)

281 
	`EVBUFFER_LOCK
(
buf
);

282 ++
buf
->
їfъt
;

283 
	}
}

286 
	$evbufгr_deгr_€ќbacks
(
evbufгr
 *
bufгr
, 
evТt_ba£
 *
ba£
)

288 
	`EVBUFFER_LOCK
(
bufгr
);

289 
bufгr
->
cb_queue
 = 
	`evТt_ba£_gС_deгЉed_cb_queue
(
ba£
);

290 
bufгr
->
deгЉed_cbs
 = 1;

291 
	`evТt_deгЉed_cb_ЪЩ
(&
bufгr
->
deгЉed
,

292 
evbufгr_deгЉed_€ќback
, 
bufгr
);

293 
	`EVBUFFER_UNLOCK
(
bufгr
);

295 
	}
}

298 
	$evbufгr_ТabЋ_lockЪg
(
evbufгr
 *
buf
, *
lock
)

300 #ifdeа
_EVENT_DISABLE_THREAD_SUPPORT


303 iа(
buf
->
lock
)

306 iа(!
lock
) {

307 
	`EVTHREAD_ALLOC_LOCK
(
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

308 iа(!
lock
)

310 
buf
->
lock
 =Жock;

311 
buf
->
own_lock
 = 1;

313 
buf
->
lock
 =Жock;

314 
buf
->
own_lock
 = 0;

319 
	}
}

322 
	$evbufгr_£t_ЈїЅ
(
evbufгr
 *
buf
, 
bufгїvТt
 *
bev
)

324 
	`EVBUFFER_LOCK
(
buf
);

325 
buf
->
ЈїЅ
 = 
bev
;

326 
	`EVBUFFER_UNLOCK
(
buf
);

327 
	}
}

330 
	$evbufгr_run_€ќbacks
(
evbufгr
 *
bufгr
, 
ru¬Ъg_deгЉed
)

332 
evbufгr_cb_ТМy
 *
cbТt
, *
√xt
;

333 
evbufгr_cb_Ъfo
 
Ъfo
;

334 
size_t
 
√w_size
;

335 
ev_uЪt32_t
 
mask
, 
masked_vЃ
;

336 
юЧr
 = 1;

338 iа(
ru¬Ъg_deгЉed
) {

339 
mask
 = 
EVBUFFER_CB_NODEFER
|
EVBUFFER_CB_ENABLED
;

340 
masked_vЃ
 = 
EVBUFFER_CB_ENABLED
;

341 } iа(
bufгr
->
deгЉed_cbs
) {

342 
mask
 = 
EVBUFFER_CB_NODEFER
|
EVBUFFER_CB_ENABLED
;

343 
masked_vЃ
 = 
EVBUFFER_CB_NODEFER
|
EVBUFFER_CB_ENABLED
;

346 
юЧr
 = 0;

348 
mask
 = 
EVBUFFER_CB_ENABLED
;

349 
masked_vЃ
 = 
EVBUFFER_CB_ENABLED
;

352 
	`ASSERT_EVBUFFER_LOCKED
(
bufгr
);

354 iа(
	`TAILQ_EMPTY
(&
bufгr
->
€ќbacks
)) {

355 
bufгr
->
n_add_f№_cb
 = bufгr->
n_dЦ_f№_cb
 = 0;

358 iа(
bufгr
->
n_add_f№_cb
 =р0 && bufгr->
n_dЦ_f№_cb
 == 0)

361 
√w_size
 = 
bufгr
->
tўЃ_Ћn
;

362 
Ъfo
.
№ig_size
 = 
√w_size
 + 
bufгr
->
n_dЦ_f№_cb
 - bufгr->
n_add_f№_cb
;

363 
Ъfo
.
n_added
 = 
bufгr
->
n_add_f№_cb
;

364 
Ъfo
.
n_dЦСed
 = 
bufгr
->
n_dЦ_f№_cb
;

365 iа(
юЧr
) {

366 
bufгr
->
n_add_f№_cb
 = 0;

367 
bufгr
->
n_dЦ_f№_cb
 = 0;

369 
cbТt
 = 
	`TAILQ_FIRST
(&
bufгr
->
€ќbacks
);

370 
cbТt
 !р
	`TAILQ_END
(&
bufгr
->
€ќbacks
);

371 
cbТt
 = 
√xt
) {

374 
√xt
 = 
	`TAILQ_NEXT
(
cbТt
,Вext);

376 iа((
cbТt
->
жags
 & 
mask
и!р
masked_vЃ
)

379 iа((
cbТt
->
жags
 & 
EVBUFFER_CB_OBSOLETE
))

380 
cbТt
->
cb
.
	`cb_obsёСe
(
bufгr
,

381 
Ъfo
.
№ig_size
, 
√w_size
, 
cbТt
->
cbђg
);

383 
cbТt
->
cb
.
	`cb_func
(
bufгr
, &
Ъfo
, cbТt->
cbђg
);

385 
	}
}

387 
ЪlЪe
 

388 
	$evbufгr_Ъvoke_€ќbacks
(
evbufгr
 *
bufгr
)

390 iа(
bufгr
->
deгЉed_cbs
) {

391 iа(
bufгr
->
deгЉed
.
queued
)

393 
	`_evbufгr_Ъьef_™d_lock
(
bufгr
);

394 iа(
bufгr
->
ЈїЅ
)

395 
	`bufгїvТt_Ъьef
(
bufгr
->
ЈїЅ
);

396 
	`EVBUFFER_UNLOCK
(
bufгr
);

397 
	`evТt_deгЉed_cb_scheduЋ
(
bufгr
->
cb_queue
, &bufгr->
deгЉed
);

400 
	`evbufгr_run_€ќbacks
(
bufгr
, 0);

401 
	}
}

404 
	$evbufгr_deгЉed_€ќback
(
deгЉed_cb
 *
cb
, *
ђg
)

406 
bufгїvТt
 *
ЈїЅ
 = 
NULL
;

407 
evbufгr
 *
bufгr
 = 
ђg
;

411 
	`EVBUFFER_LOCK
(
bufгr
);

412 
ЈїЅ
 = 
bufгr
->parent;

413 
	`evbufгr_run_€ќbacks
(
bufгr
, 1);

414 
	`_evbufгr_deьef_™d_u∆ock
(
bufгr
);

415 iа(
ЈїЅ
)

416 
	`bufгїvТt_deьef
(
ЈїЅ
);

417 
	}
}

420 
	$evbufгr_їmove_Ѓl_€ќbacks
(
evbufгr
 *
bufгr
)

422 
evbufгr_cb_ТМy
 *
cbТt
;

424 (
cbТt
 = 
	`TAILQ_FIRST
(&
bufгr
->
€ќbacks
))) {

425 
	`TAILQ_REMOVE
(&
bufгr
->
€ќbacks
, 
cbТt
, 
√xt
);

426 
	`mm_дУ
(
cbТt
);

428 
	}
}

431 
	$_evbufгr_deьef_™d_u∆ock
(
evbufгr
 *
bufгr
)

433 
evbufгr_chaЪ
 *
chaЪ
, *
√xt
;

434 
	`ASSERT_EVBUFFER_LOCKED
(
bufгr
);

436 iа(--
bufгr
->
їfъt
 > 0) {

437 
	`EVBUFFER_UNLOCK
(
bufгr
);

441 
chaЪ
 = 
bufгr
->
fЬ°
; chaЪ !р
NULL
; chaЪ = 
√xt
) {

442 
√xt
 = 
chaЪ
->next;

443 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

445 
	`evbufгr_їmove_Ѓl_€ќbacks
(
bufгr
);

446 iа(
bufгr
->
deгЉed_cbs
)

447 
	`evТt_deгЉed_cb_€nыl
(
bufгr
->
cb_queue
, &bufгr->
deгЉed
);

449 
	`EVBUFFER_UNLOCK
(
bufгr
);

450 iа(
bufгr
->
own_lock
)

451 
	`EVTHREAD_FREE_LOCK
(
bufгr
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

452 
	`mm_дУ
(
bufгr
);

453 
	}
}

456 
	$evbufгr_дУ
(
evbufгr
 *
bufгr
)

458 
	`EVBUFFER_LOCK
(
bufгr
);

459 
	`_evbufгr_deьef_™d_u∆ock
(
bufгr
);

460 
	}
}

463 
	$evbufгr_lock
(
evbufгr
 *
buf
)

465 
	`EVBUFFER_LOCK
(
buf
);

466 
	}
}

469 
	$evbufгr_u∆ock
(
evbufгr
 *
buf
)

471 
	`EVBUFFER_UNLOCK
(
buf
);

472 
	}
}

474 
size_t


475 
	$evbufгr_gС_Ћngth
(cЏ° 
evbufгr
 *
bufгr
)

477 
size_t
 
їsu…
;

479 
	`EVBUFFER_LOCK
(
bufгr
);

481 
їsu…
 = (
bufгr
->
tўЃ_Ћn
);

483 
	`EVBUFFER_UNLOCK
(
bufгr
);

485  
їsu…
;

486 
	}
}

488 
size_t


489 
	$evbufгr_gС_cЏtiguous_•aы
(cЏ° 
evbufгr
 *
buf
)

491 
evbufгr_chaЪ
 *
chaЪ
;

492 
size_t
 
їsu…
;

494 
	`EVBUFFER_LOCK
(
buf
);

495 
chaЪ
 = 
buf
->
fЬ°
;

496 
їsu…
 = (
chaЪ
 !р
NULL
 ? chaЪ->
off
 : 0);

497 
	`EVBUFFER_UNLOCK
(
buf
);

499  
їsu…
;

500 
	}
}

503 
	$evbufгr_ї£rve_•aы
(
evbufгr
 *
buf
, 
ev_ssize_t
 
size
,

504 
evbufгr_iovec
 *
vec
, 
n_vecs
)

506 
evbufгr_chaЪ
 *
chaЪ
;

507 
n
 = -1;

509 
	`EVBUFFER_LOCK
(
buf
);

510 iа(
buf
->
дУze_Тd
)

511 
dЏe
;

512 iа(
n_vecs
 < 1)

513 
dЏe
;

514 iа(
n_vecs
 == 1) {

515 iа(
	`evbufгr_exЈnd
(
buf
, 
size
) == -1)

516 
dЏe
;

517 
chaЪ
 = 
buf
->
ѕ°
;

519 
vec
[0].
iov_ba£
 = 
	`CHAIN_SPACE_PTR
(
chaЪ
);

520 
vec
[0].
iov_Ћn
 = 
	`CHAIN_SPACE_LEN
(
chaЪ
);

521 
n
 = 1;

523 iа(
	`_evbufгr_exЈnd_з°
(
buf
, 
size
)<0)

524 
dЏe
;

525 
n
 = 
	`_evbufгr_їad_£tup_vecs
(
buf
, 
size
, 
vec
, &
chaЪ
, 0);

528 
dЏe
:

529 
	`EVBUFFER_UNLOCK
(
buf
);

530  
n
;

532 
	}
}

535 
	$evbufгr_commЩ_•aы
(
evbufгr
 *
buf
,

536 
evbufгr_iovec
 *
vec
, 
n_vecs
)

538 
evbufгr_chaЪ
 *
ѕ°
, *
іev
;

539 
їsu…
 = -1;

540 
size_t
 
added
;

542 
	`EVBUFFER_LOCK
(
buf
);

544 
іev
 = 
buf
->
іevious_to_ѕ°
;

545 
ѕ°
 = 
buf
->last;

547 iа(
buf
->
дУze_Тd
)

548 
dЏe
;

549 iа(
n_vecs
 < 1 ||В_vecs > 2)

550 
dЏe
;

551 iа(
n_vecs
 == 2) {

552 iа(!
іev
 || !
ѕ°
 ||

553 
vec
[0].
iov_ba£
 !р
	`CHAIN_SPACE_PTR
(
іev
) ||

554 
vec
[1].
iov_ba£
 !р
	`CHAIN_SPACE_PTR
(
ѕ°
) ||

555 
vec
[0].
iov_Ћn
 > 
	`CHAIN_SPACE_LEN
(
іev
) ||

556 
vec
[1].
iov_Ћn
 > 
	`CHAIN_SPACE_LEN
(
ѕ°
))

557 
dЏe
;

559 
іev
->
off
 +р
vec
[0].
iov_Ћn
;

560 
ѕ°
->
off
 +р
vec
[1].
iov_Ћn
;

561 
added
 = 
vec
[0].
iov_Ћn
 + vec[1].iov_len;

564 
evbufгr_chaЪ
 *
chaЪ
;

565 iа(
іev
 && 
vec
[0].
iov_ba£
 =р
	`CHAIN_SPACE_PTR
(prev))

566 
chaЪ
 = 
іev
;

567 iа(
ѕ°
 && 
vec
[0].
iov_ba£
 =р
	`CHAIN_SPACE_PTR
(last))

568 
chaЪ
 = 
ѕ°
;

570 
dЏe
;

571 iа(
vec
[0].
iov_Ћn
 > 
	`CHAIN_SPACE_LEN
(
chaЪ
))

572 
dЏe
;

574 
chaЪ
->
off
 +р
vec
[0].
iov_Ћn
;

575 
added
 = 
vec
[0].
iov_Ћn
;

578 
buf
->
tўЃ_Ћn
 +р
added
;

579 
buf
->
n_add_f№_cb
 +р
added
;

580 
їsu…
 = 0;

581 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

583 
dЏe
:

584 
	`EVBUFFER_UNLOCK
(
buf
);

585  
їsu…
;

586 
	}
}

588 
	#ZERO_CHAIN
(
d°
) do { \

589 
	`ASSERT_EVBUFFER_LOCKED
(
d°
); \

590 (
d°
)->
fЬ°
 = 
NULL
; \

591 (
d°
)->
ѕ°
 = 
NULL
; \

592 (
d°
)->
іevious_to_ѕ°
 = 
NULL
; \

593 (
d°
)->
tўЃ_Ћn
 = 0; \

594 } 0)

	)

596 
	#COPY_CHAIN
(
d°
, 
§c
) do { \

597 
	`ASSERT_EVBUFFER_LOCKED
(
d°
); \

598 
	`ASSERT_EVBUFFER_LOCKED
(
§c
); \

599 (
d°
)->
fЬ°
 = (
§c
)->first; \

600 (
d°
)->
іevious_to_ѕ°
 = (
§c
)->previous_to_last; \

601 (
d°
)->
ѕ°
 = (
§c
)->last; \

602 (
d°
)->
tўЃ_Ћn
 = (
§c
)->total_len; \

603 } 0)

	)

605 
	#APPEND_CHAIN
(
d°
, 
§c
) do { \

606 
	`ASSERT_EVBUFFER_LOCKED
(
d°
); \

607 
	`ASSERT_EVBUFFER_LOCKED
(
§c
); \

608 (
d°
)->
ѕ°
->
√xt
 = (
§c
)->
fЬ°
; \

609 (
d°
)->
іevious_to_ѕ°
 = (
§c
)->previous_to_last ? \

610 (
§c
)->
іevious_to_ѕ°
 : (
d°
)->
ѕ°
; \

611 (
d°
)->
ѕ°
 = (
§c
)->last; \

612 (
d°
)->
tўЃ_Ћn
 +р(
§c
)->total_len; \

613 } 0)

	)

615 
	#PREPEND_CHAIN
(
d°
, 
§c
) do { \

616 
	`ASSERT_EVBUFFER_LOCKED
(
d°
); \

617 
	`ASSERT_EVBUFFER_LOCKED
(
§c
); \

618 (
§c
)->
ѕ°
->
√xt
 = (
d°
)->
fЬ°
; \

619 (
d°
)->
fЬ°
 = (
§c
)->first; \

620 (
d°
)->
tўЃ_Ћn
 +р(
§c
)->total_len; \

621 iа((
d°
)->
іevious_to_ѕ°
 =р
NULL
) \

622 (
d°
)->
іevious_to_ѕ°
 = (
§c
)->
ѕ°
; \

623 } 0)

	)

627 
	$evbufгr_add_bufгr
(
evbufгr
 *
outbuf
, evbufгЄ*
Ъbuf
)

629 
size_t
 
Ъ_tўЃ_Ћn
, 
out_tўЃ_Ћn
;

630 
їsu…
 = 0;

632 
	`EVBUFFER_LOCK2
(
Ъbuf
, 
outbuf
);

633 
Ъ_tўЃ_Ћn
 = 
Ъbuf
->
tўЃ_Ћn
;

634 
out_tўЃ_Ћn
 = 
outbuf
->
tўЃ_Ћn
;

636 iа(
Ъ_tўЃ_Ћn
 =р0 || 
outbuf
 =р
Ъbuf
)

637 
dЏe
;

639 iа(
outbuf
->
дУze_Тd
 || 
Ъbuf
->
дУze_°ђt
) {

640 
їsu…
 = -1;

641 
dЏe
;

644 iа(
out_tўЃ_Ћn
 == 0) {

645 
	`COPY_CHAIN
(
outbuf
, 
Ъbuf
);

647 
	`APPEND_CHAIN
(
outbuf
, 
Ъbuf
);

651 
	`ZERO_CHAIN
(
Ъbuf
);

652 
Ъbuf
->
n_dЦ_f№_cb
 +р
Ъ_tўЃ_Ћn
;

653 
outbuf
->
n_add_f№_cb
 +р
Ъ_tўЃ_Ћn
;

655 
	`evbufгr_Ъvoke_€ќbacks
(
Ъbuf
);

656 
	`evbufгr_Ъvoke_€ќbacks
(
outbuf
);

658 
dЏe
:

659 
	`EVBUFFER_UNLOCK2
(
Ъbuf
, 
outbuf
);

660  
їsu…
;

661 
	}
}

664 
	$evbufгr_іХТd_bufгr
(
evbufгr
 *
outbuf
, evbufгЄ*
Ъbuf
)

666 
size_t
 
Ъ_tўЃ_Ћn
, 
out_tўЃ_Ћn
;

667 
їsu…
 = 0;

669 
	`EVBUFFER_LOCK2
(
Ъbuf
, 
outbuf
);

671 
Ъ_tўЃ_Ћn
 = 
Ъbuf
->
tўЃ_Ћn
;

672 
out_tўЃ_Ћn
 = 
outbuf
->
tўЃ_Ћn
;

674 iа(!
Ъ_tўЃ_Ћn
 || 
Ъbuf
 =р
outbuf
)

675 
dЏe
;

677 iа(
outbuf
->
дУze_°ђt
 || 
Ъbuf
->freeze_start) {

678 
їsu…
 = -1;

679 
dЏe
;

682 iа(
out_tўЃ_Ћn
 == 0) {

683 
	`COPY_CHAIN
(
outbuf
, 
Ъbuf
);

685 
	`PREPEND_CHAIN
(
outbuf
, 
Ъbuf
);

689 
	`ZERO_CHAIN
(
Ъbuf
);

690 
Ъbuf
->
n_dЦ_f№_cb
 +р
Ъ_tўЃ_Ћn
;

691 
outbuf
->
n_add_f№_cb
 +р
Ъ_tўЃ_Ћn
;

693 
	`evbufгr_Ъvoke_€ќbacks
(
Ъbuf
);

694 
	`evbufгr_Ъvoke_€ќbacks
(
outbuf
);

695 
dЏe
:

696 
	`EVBUFFER_UNLOCK2
(
Ъbuf
, 
outbuf
);

697  
їsu…
;

698 
	}
}

701 
	$evbufгr_dњЪ
(
evbufгr
 *
buf
, 
size_t
 
Ћn
)

703 
evbufгr_chaЪ
 *
chaЪ
, *
√xt
;

704 
size_t
 
ёd_Ћn
;

705 
їsu…
 = 0;

707 
	`EVBUFFER_LOCK
(
buf
);

708 
ёd_Ћn
 = 
buf
->
tўЃ_Ћn
;

710 iа(
ёd_Ћn
 == 0)

711 
dЏe
;

713 iа(
buf
->
дУze_°ђt
) {

714 
їsu…
 = -1;

715 
dЏe
;

719 iа(
Ћn
 >р
ёd_Ћn
 && !(
buf
->
ѕ°
 && 
	`CHAIN_PINNED_R
(buf->last))) {

720 
Ћn
 = 
ёd_Ћn
;

721 
chaЪ
 = 
buf
->
fЬ°
; chaЪ !р
NULL
; chaЪ = 
√xt
) {

722 
√xt
 = 
chaЪ
->next;

724 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

727 
	`ZERO_CHAIN
(
buf
);

729 iа(
Ћn
 >р
ёd_Ћn
)

730 
Ћn
 = 
ёd_Ћn
;

732 
buf
->
tўЃ_Ћn
 -р
Ћn
;

734 
chaЪ
 = 
buf
->
fЬ°
; 
Ћn
 >рchaЪ->
off
; chaЪ = 
√xt
) {

735 
√xt
 = 
chaЪ
->next;

736 
Ћn
 -р
chaЪ
->
off
;

738 iа(
Ћn
 =р0 && 
	`CHAIN_PINNED_R
(
chaЪ
))

740 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

743 
buf
->
fЬ°
 = 
chaЪ
;

744 iа(
buf
->
fЬ°
 =рbuf->
ѕ°
)

745 
buf
->
іevious_to_ѕ°
 = 
NULL
;

746 
chaЪ
->
miІlign
 +р
Ћn
;

747 
chaЪ
->
off
 -р
Ћn
;

750 
buf
->
n_dЦ_f№_cb
 +р
Ћn
;

752 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

754 
dЏe
:

755 
	`EVBUFFER_UNLOCK
(
buf
);

756  
їsu…
;

757 
	}
}

762 
	$evbufгr_їmove
(
evbufгr
 *
buf
, *
d©a_out
, 
size_t
 
d©Ћn
)

765 
evbufгr_chaЪ
 *
chaЪ
, *
tmp
;

766 *
d©a
 = 
d©a_out
;

767 
size_t
 
ƒЧd
;

768 
їsu…
 = 0;

770 
	`EVBUFFER_LOCK
(
buf
);

772 
chaЪ
 = 
buf
->
fЬ°
;

774 iа(
d©Ћn
 >р
buf
->
tўЃ_Ћn
)

775 
d©Ћn
 = 
buf
->
tўЃ_Ћn
;

777 iа(
d©Ћn
 == 0)

778 
dЏe
;

780 iа(
buf
->
дУze_°ђt
) {

781 
їsu…
 = -1;

782 
dЏe
;

785 
ƒЧd
 = 
d©Ћn
;

787 
d©Ћn
 && d©Ћј>р
chaЪ
->
off
) {

788 
	`memэy
(
d©a
, 
chaЪ
->
bufгr
 + chaЪ->
miІlign
, chaЪ->
off
);

789 
d©a
 +р
chaЪ
->
off
;

790 
d©Ћn
 -р
chaЪ
->
off
;

792 
tmp
 = 
chaЪ
;

793 
chaЪ
 = chaЪ->
√xt
;

794 
	`evbufгr_chaЪ_дУ
(
tmp
);

797 
buf
->
fЬ°
 = 
chaЪ
;

798 iа(
chaЪ
 =р
NULL
)

799 
buf
->
ѕ°
 = 
NULL
;

800 iа(
buf
->
fЬ°
 =рbuf->
ѕ°
)

801 
buf
->
іevious_to_ѕ°
 = 
NULL
;

803 iа(
d©Ћn
) {

804 
	`memэy
(
d©a
, 
chaЪ
->
bufгr
 + chaЪ->
miІlign
, 
d©Ћn
);

805 
chaЪ
->
miІlign
 +р
d©Ћn
;

806 
chaЪ
->
off
 -р
d©Ћn
;

809 
buf
->
tўЃ_Ћn
 -р
ƒЧd
;

811 
buf
->
n_dЦ_f№_cb
 +р
ƒЧd
;

812 iа(
ƒЧd
)

813 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

815 
їsu…
 = 
ƒЧd
;

816 
dЏe
:

817 
	`EVBUFFER_UNLOCK
(
buf
);

818  
їsu…
;

819 
	}
}

824 
	$evbufгr_їmove_bufгr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

825 
size_t
 
d©Ћn
)

830 
evbufгr_chaЪ
 *
chaЪ
, *
іevious
, *
іevious_to_іevious
 = 
NULL
;

831 
size_t
 
ƒЧd
 = 0;

832 
їsu…
;

834 
	`EVBUFFER_LOCK2
(
§c
, 
d°
);

836 
chaЪ
 = 
іevious
 = 
§c
->
fЬ°
;

838 iа(
d©Ћn
 =р0 || 
d°
 =р
§c
) {

839 
їsu…
 = 0;

840 
dЏe
;

843 iа(
d°
->
дУze_Тd
 || 
§c
->
дУze_°ђt
) {

844 
їsu…
 = -1;

845 
dЏe
;

849 iа(
d©Ћn
 >р
§c
->
tўЃ_Ћn
) {

850 
d©Ћn
 = 
§c
->
tўЃ_Ћn
;

851 
	`evbufгr_add_bufгr
(
d°
, 
§c
);

852 
їsu…
 = 
d©Ћn
;

853 
dЏe
;

857 
chaЪ
->
off
 <р
d©Ћn
) {

858 
ƒЧd
 +р
chaЪ
->
off
;

859 
d©Ћn
 -р
chaЪ
->
off
;

860 
іevious_to_іevious
 = 
іevious
;

861 
іevious
 = 
chaЪ
;

862 
chaЪ
 = chaЪ->
√xt
;

865 iа(
ƒЧd
) {

867 iа(
d°
->
fЬ°
 =р
NULL
) {

868 
d°
->
fЬ°
 = 
§c
->first;

870 
d°
->
ѕ°
->
√xt
 = 
§c
->
fЬ°
;

872 
d°
->
іevious_to_ѕ°
 = 
іevious_to_іevious
;

873 
d°
->
ѕ°
 = 
іevious
;

874 
іevious
->
√xt
 = 
NULL
;

875 
§c
->
fЬ°
 = 
chaЪ
;

876 iа(
§c
->
fЬ°
 =р§c->
ѕ°
)

877 
§c
->
іevious_to_ѕ°
 = 
NULL
;

879 
d°
->
tўЃ_Ћn
 +р
ƒЧd
;

880 
d°
->
n_add_f№_cb
 +р
ƒЧd
;

885 
	`evbufгr_add
(
d°
, 
chaЪ
->
bufгr
 + chaЪ->
miІlign
, 
d©Ћn
);

886 
chaЪ
->
miІlign
 +р
d©Ћn
;

887 
chaЪ
->
off
 -р
d©Ћn
;

888 
ƒЧd
 +р
d©Ћn
;

890 
§c
->
tўЃ_Ћn
 -р
ƒЧd
;

891 
§c
->
n_dЦ_f№_cb
 +р
ƒЧd
;

893 iа(
ƒЧd
) {

894 
	`evbufгr_Ъvoke_€ќbacks
(
d°
);

895 
	`evbufгr_Ъvoke_€ќbacks
(
§c
);

897 
їsu…
 = 
ƒЧd
;

899 
dЏe
:

900 
	`EVBUFFER_UNLOCK2
(
§c
, 
d°
);

901  
їsu…
;

902 
	}
}

905 
	$evbufгr_puќup
(
evbufгr
 *
buf
, 
ev_ssize_t
 
size
)

907 
evbufгr_chaЪ
 *
chaЪ
, *
√xt
, *
tmp
;

908 *
bufгr
, *
їsu…
 = 
NULL
;

909 
ev_ssize_t
 
їmaЪЪg
;

911 
	`EVBUFFER_LOCK
(
buf
);

913 
chaЪ
 = 
buf
->
fЬ°
;

915 iа(
size
 < 0)

916 
size
 = 
buf
->
tўЃ_Ћn
;

920 iа(
size
 =р0 || (
size_t
)sizР> 
buf
->
tўЃ_Ћn
)

921 
dЏe
;

925 iа(
chaЪ
->
off
 >р(
size_t
)
size
) {

926 
їsu…
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign
;

927 
dЏe
;

931 
їmaЪЪg
 = 
size
 - 
chaЪ
->
off
;

932 
	`EVUTIL_ASSERT
(
їmaЪЪg
 >= 0);

933 
tmp
=
chaЪ
->
√xt
;Бmp;Бmp=tmp->next) {

934 iа(
	`CHAIN_PINNED
(
tmp
))

935 
dЏe
;

936 iа(
tmp
->
off
 >р(
size_t
)
їmaЪЪg
)

938 
їmaЪЪg
 -р
tmp
->
off
;

941 iа(
	`CHAIN_PINNED
(
chaЪ
)) {

942 
size_t
 
ёd_off
 = 
chaЪ
->
off
;

943 iа(
	`CHAIN_SPACE_LEN
(
chaЪ
и< 
size
 - chaЪ->
off
) {

945 
dЏe
;

947 
bufгr
 = 
	`CHAIN_SPACE_PTR
(
chaЪ
);

948 
tmp
 = 
chaЪ
;

949 
tmp
->
off
 = 
size
;

950 
size
 -р
ёd_off
;

951 
chaЪ
 = chaЪ->
√xt
;

952 } iа(
chaЪ
->
bufгr_Ћn
 - chaЪ->
miІlign
 >р(
size_t
)
size
) {

954 
size_t
 
ёd_off
 = 
chaЪ
->
off
;

955 
bufгr
 = 
chaЪ
->bufгЄ+ chaЪ->
miІlign
 + chaЪ->
off
;

956 
tmp
 = 
chaЪ
;

957 
tmp
->
off
 = 
size
;

958 
size
 -р
ёd_off
;

959 
chaЪ
 = chaЪ->
√xt
;

961 iа((
tmp
 = 
	`evbufгr_chaЪ_√w
(
size
)и=р
NULL
) {

962 
	`evТt_wђn
("%s: ouИoаmem№y", 
__func__
);

963 
dЏe
;

965 
bufгr
 = 
tmp
->buffer;

966 
tmp
->
off
 = 
size
;

967 
buf
->
fЬ°
 = 
tmp
;

973 ; 
chaЪ
 !р
NULL
 && (
size_t
)
size
 >рchaЪ->
off
; chaЪ = 
√xt
) {

974 
√xt
 = 
chaЪ
->next;

976 
	`memэy
(
bufгr
, 
chaЪ
->bufгЄ+ chaЪ->
miІlign
, chaЪ->
off
);

977 
size
 -р
chaЪ
->
off
;

978 
bufгr
 +р
chaЪ
->
off
;

980 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

983 iа(
chaЪ
 !р
NULL
) {

984 
	`memэy
(
bufгr
, 
chaЪ
->bufгЄ+ chaЪ->
miІlign
, 
size
);

985 
chaЪ
->
miІlign
 +р
size
;

986 
chaЪ
->
off
 -р
size
;

987 iа(
chaЪ
 =р
buf
->
ѕ°
)

988 
buf
->
іevious_to_ѕ°
 = 
tmp
;

990 
buf
->
ѕ°
 = 
tmp
;

992 
buf
->
іevious_to_ѕ°
 = 
NULL
;

995 
tmp
->
√xt
 = 
chaЪ
;

997 
їsu…
 = (
tmp
->
bufгr
 +Бmp->
miІlign
);

999 
dЏe
:

1000 
	`EVBUFFER_UNLOCK
(
buf
);

1001  
їsu…
;

1002 
	}
}

1009 
	$evbufгr_їadlЪe
(
evbufгr
 *
bufгr
)

1011  
	`evbufгr_їad 
(
bufгr
, 
NULL
, 
EVBUFFER_EOL_ANY
);

1012 
	}
}

1014 
ЪlЪe
 

1015 
	$evbufгr_°rchr
(
evbufгr_±r
 *
Щ
, cЏ° 
chr
)

1017 
evbufгr_chaЪ
 *
chaЪ
 = 
Щ
->
_ЪЛЇЃ
.chain;

1018 
i
 = 
Щ
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1019 
couЅ
 = 0;

1020 
chaЪ
 !р
NULL
) {

1021 *
bufгr
 = (*)
chaЪ
->bufгЄ+ chaЪ->
miІlign
;

1022 ; 
i
 < 
chaЪ
->
off
; ++i, ++
couЅ
) {

1023 iа(
bufгr
[
i
] =р
chr
) {

1024 
Щ
->
_ЪЛЇЃ
.
chaЪ
 = chain;

1025 
Щ
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 
i
;

1026 
Щ
->
pos
 +р
couЅ
;

1027  (
couЅ
);

1030 
i
 = 0;

1031 
chaЪ
 = chaЪ->
√xt
;

1035 
	}
}

1037 
ЪlЪe
 

1038 
	$evbufгr_°љbrk
(
evbufгr_±r
 *
Щ
, cЏ° *
chr£t
)

1040 
evbufгr_chaЪ
 *
chaЪ
 = 
Щ
->
_ЪЛЇЃ
.chain;

1041 
i
 = 
Щ
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1042 
couЅ
 = 0;

1043 
chaЪ
 !р
NULL
) {

1044 *
bufгr
 = (*)
chaЪ
->bufгЄ+ chaЪ->
miІlign
;

1045 ; 
i
 < 
chaЪ
->
off
; ++i, ++
couЅ
) {

1046 cЏ° *
p
 = 
chr£t
;

1047 *
p
) {

1048 iа(
bufгr
[
i
] =р*
p
++) {

1049 
Щ
->
_ЪЛЇЃ
.
chaЪ
 = chain;

1050 
Щ
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 
i
;

1051 
Щ
->
pos
 +р
couЅ
;

1052  (
couЅ
);

1056 
i
 = 0;

1057 
chaЪ
 = chaЪ->
√xt
;

1061 
	}
}

1063 
ЪlЪe
 

1064 
	$evbufгr_°r•n
(

1065 
evbufгr_±r
 *
±r
, cЏ° *
chr£t
)

1067 
couЅ
 = 0;

1068 
evbufгr_chaЪ
 *
chaЪ
 = 
±r
->
_ЪЛЇЃ
.chain;

1069 
i
 = 
±r
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1071 iа(!
chaЪ
)

1075 *
bufгr
 = (*)
chaЪ
->bufгЄ+ chaЪ->
miІlign
;

1076 ; 
i
 < 
chaЪ
->
off
; ++i) {

1077 cЏ° *
p
 = 
chr£t
;

1078 *
p
) {

1079 iа(
bufгr
[
i
] =р*
p
++)

1080 
√xt
;

1082 
±r
->
_ЪЛЇЃ
.
chaЪ
 = chain;

1083 
±r
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 
i
;

1084 
±r
->
pos
 +р
couЅ
;

1085  
couЅ
;

1086 
√xt
:

1087 ++
couЅ
;

1089 
i
 = 0;

1091 iа(! 
chaЪ
->
√xt
) {

1092 
±r
->
_ЪЛЇЃ
.
chaЪ
 = chain;

1093 
±r
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 
i
;

1094 
±r
->
pos
 +р
couЅ
;

1095  
couЅ
;

1098 
chaЪ
 = chaЪ->
√xt
;

1100 
	}
}

1103 
ЪlЪe
 

1104 
	$evbufгr_gСchr
(
evbufгr_±r
 *
Щ
)

1106 
evbufгr_chaЪ
 *
chaЪ
 = 
Щ
->
_ЪЛЇЃ
.chain;

1107 
off
 = 
Щ
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1109  
chaЪ
->
bufгr
[chaЪ->
miІlign
 + 
off
];

1110 
	}
}

1112 
evbufгr_±r


1113 
	$evbufгr_£ђch_eё
(
evbufгr
 *
bufгr
,

1114 
evbufгr_±r
 *
°ђt
, 
size_t
 *
eё_Ћn_out
,

1115 
evbufгr_eё_°yЋ
 
eё_°yЋ
)

1117 
evbufгr_±r
 
Щ
, 
Щ2
;

1118 
size_t
 
exМa_dњЪ
 = 0;

1119 
ok
 = 0;

1121 
	`EVBUFFER_LOCK
(
bufгr
);

1123 iа(
°ђt
) {

1124 
	`memэy
(&
Щ
, 
°ђt
, (it));

1126 
Щ
.
pos
 = 0;

1127 
Щ
.
_ЪЛЇЃ
.
chaЪ
 = 
bufгr
->
fЬ°
;

1128 
Щ
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 0;

1133 
eё_°yЋ
) {

1134 
EVBUFFER_EOL_ANY
:

1135 iа(
	`evbufгr_°љbrk
(&
Щ
, "\r\n") < 0)

1136 
dЏe
;

1137 
	`memэy
(&
Щ2
, &
Щ
, (it));

1138 
exМa_dњЪ
 = 
	`evbufгr_°r•n
(&
Щ2
, "\r\n");

1140 
EVBUFFER_EOL_CRLF_STRICT
: {

1141 
Щ
 = 
	`evbufгr_£ђch
(
bufгr
, "\r\n", 2, &it);

1142 iа(
Щ
.
pos
 < 0)

1143 
dЏe
;

1144 
exМa_dњЪ
 = 2;

1147 
EVBUFFER_EOL_CRLF
:

1149 iа(
	`evbufгr_°љbrk
(&
Щ
, "\r\n") < 0)

1150 
dЏe
;

1151 iа(
	`evbufгr_gСchr
(&
Щ
) == '\n') {

1152 
exМa_dњЪ
 = 1;

1154 } iа(!
	`evbufгr_±r_memcmp
(

1155 
bufгr
, &
Щ
, "\r\n", 2)) {

1156 
exМa_dњЪ
 = 2;

1159 iа(
	`evbufгr_±r_£t
(
bufгr
, &
Щ
, 1,

1160 
EVBUFFER_PTR_ADD
)<0)

1161 
dЏe
;

1165 
EVBUFFER_EOL_LF
:

1166 iа(
	`evbufгr_°rchr
(&
Щ
, '\n') < 0)

1167 
dЏe
;

1168 
exМa_dњЪ
 = 1;

1171 
dЏe
;

1174 
ok
 = 1;

1175 
dЏe
:

1176 
	`EVBUFFER_UNLOCK
(
bufгr
);

1178 iа(!
ok
) {

1179 
Щ
.
pos
 = -1;

1181 iа(
eё_Ћn_out
)

1182 *
eё_Ћn_out
 = 
exМa_dњЪ
;

1184  
Щ
;

1185 
	}
}

1188 
	$evbufгr_їad 
(
evbufгr
 *
bufгr
, 
size_t
 *
n_їad_out
,

1189 
evbufгr_eё_°yЋ
 
eё_°yЋ
)

1191 
evbufгr_±r
 
Щ
;

1192 *
lЪe
;

1193 
size_t
 
n_to_cЁy
=0, 
exМa_dњЪ
=0;

1194 *
їsu…
 = 
NULL
;

1196 
	`EVBUFFER_LOCK
(
bufгr
);

1198 iа(
bufгr
->
дУze_°ђt
) {

1199 
dЏe
;

1202 
Щ
 = 
	`evbufгr_£ђch_eё
(
bufгr
, 
NULL
, &
exМa_dњЪ
, 
eё_°yЋ
);

1203 iа(
Щ
.
pos
 < 0)

1204 
dЏe
;

1205 
n_to_cЁy
 = 
Щ
.
pos
;

1207 iа((
lЪe
 = 
	`mm_mЃloc
(
n_to_cЁy
+1)и=р
NULL
) {

1208 
	`evТt_wђn
("%s: ouИoаmem№y", 
__func__
);

1209 
dЏe
;

1212 
	`evbufгr_їmove
(
bufгr
, 
lЪe
, 
n_to_cЁy
);

1213 
lЪe
[
n_to_cЁy
] = '\0';

1215 
	`evbufгr_dњЪ
(
bufгr
, 
exМa_dњЪ
);

1216 
їsu…
 = 
lЪe
;

1217 
dЏe
:

1218 
	`EVBUFFER_UNLOCK
(
bufгr
);

1220 iа(
n_їad_out
)

1221 *
n_їad_out
 = 
їsu…
 ? 
n_to_cЁy
 : 0;

1223  
їsu…
;

1224 
	}
}

1226 
	#EVBUFFER_CHAIN_MAX_AUTO_SIZE
 4096

	)

1231 
	$evbufгr_add
(
evbufгr
 *
buf
, cЏ° *
d©a_Ъ
, 
size_t
 
d©Ћn
)

1233 
evbufгr_chaЪ
 *
chaЪ
, *
tmp
;

1234 cЏ° *
d©a
 = 
d©a_Ъ
;

1235 
size_t
 
їmaЪ
, 
to_Ѓloc
;

1236 
їsu…
 = -1;

1238 
	`EVBUFFER_LOCK
(
buf
);

1240 iа(
buf
->
дУze_Тd
) {

1241 
dЏe
;

1244 
chaЪ
 = 
buf
->
ѕ°
;

1248 iа(
chaЪ
 =р
NULL
) {

1249 iа(
	`evbufгr_exЈnd
(
buf
, 
d©Ћn
) == -1)

1250 
dЏe
;

1251 
chaЪ
 = 
buf
->
ѕ°
;

1254 iа((
chaЪ
->
жags
 & 
EVBUFFER_IMMUTABLE
) == 0) {

1255 
їmaЪ
 = 
chaЪ
->
bufгr_Ћn
 - chaЪ->
miІlign
 - chaЪ->
off
;

1256 iа(
їmaЪ
 >р
d©Ћn
) {

1259 
	`memэy
(
chaЪ
->
bufгr
 + chaЪ->
miІlign
 + chaЪ->
off
,

1260 
d©a
, 
d©Ћn
);

1261 
chaЪ
->
off
 +р
d©Ћn
;

1262 
buf
->
tўЃ_Ћn
 +р
d©Ћn
;

1263 
buf
->
n_add_f№_cb
 +р
d©Ћn
;

1264 
out
;

1265 } iа((
size_t
)
chaЪ
->
miІlign
 >р
d©Ћn
 && !
	`CHAIN_PINNED
(chain)) {

1267 
	`evbufгr_chaЪ_Ѓign
(
chaЪ
);

1269 
	`memэy
(
chaЪ
->
bufгr
 + chaЪ->
off
, 
d©a
, 
d©Ћn
);

1270 
chaЪ
->
off
 +р
d©Ћn
;

1271 
buf
->
tўЃ_Ћn
 +р
d©Ћn
;

1272 
buf
->
n_add_f№_cb
 +р
d©Ћn
;

1273 
out
;

1277 
їmaЪ
 = 0;

1281 
to_Ѓloc
 = 
chaЪ
->
bufгr_Ћn
;

1282 iа(
to_Ѓloc
 <р
EVBUFFER_CHAIN_MAX_AUTO_SIZE
/2)

1283 
to_Ѓloc
 <<= 1;

1284 iа(
d©Ћn
 > 
to_Ѓloc
)

1285 
to_Ѓloc
 = 
d©Ћn
;

1286 
tmp
 = 
	`evbufгr_chaЪ_√w
(
to_Ѓloc
);

1287 iа(
tmp
 =р
NULL
)

1288 
dЏe
;

1290 iа(
їmaЪ
) {

1291 
	`memэy
(
chaЪ
->
bufгr
 + chaЪ->
miІlign
 + chaЪ->
off
,

1292 
d©a
, 
їmaЪ
);

1293 
chaЪ
->
off
 +р
їmaЪ
;

1294 
buf
->
tўЃ_Ћn
 +р
їmaЪ
;

1295 
buf
->
n_add_f№_cb
 +р
їmaЪ
;

1298 
d©a
 +р
їmaЪ
;

1299 
d©Ћn
 -р
їmaЪ
;

1301 
	`memэy
(
tmp
->
bufгr
, 
d©a
, 
d©Ћn
);

1302 
tmp
->
off
 = 
d©Ћn
;

1303 
	`evbufгr_chaЪ_Ъ£є
(
buf
, 
tmp
);

1305 
out
:

1306 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

1307 
їsu…
 = 0;

1308 
dЏe
:

1309 
	`EVBUFFER_UNLOCK
(
buf
);

1310  
їsu…
;

1311 
	}
}

1314 
	$evbufгr_іХТd
(
evbufгr
 *
buf
, cЏ° *
d©a
, 
size_t
 
d©Ћn
)

1316 
evbufгr_chaЪ
 *
chaЪ
, *
tmp
;

1317 
їsu…
 = -1;

1319 
	`EVBUFFER_LOCK
(
buf
);

1321 iа(
buf
->
дУze_°ђt
) {

1322 
dЏe
;

1325 
chaЪ
 = 
buf
->
fЬ°
;

1327 iа(
chaЪ
 =р
NULL
) {

1328 iа(
	`evbufгr_exЈnd
(
buf
, 
d©Ћn
) == -1)

1329 
dЏe
;

1330 
chaЪ
 = 
buf
->
fЬ°
;

1331 
chaЪ
->
miІlign
 = chaЪ->
bufгr_Ћn
;

1335 iа((
chaЪ
->
жags
 & 
EVBUFFER_IMMUTABLE
) == 0) {

1336 iа((
size_t
)
chaЪ
->
miІlign
 >р
d©Ћn
) {

1338 
	`memэy
(
chaЪ
->
bufгr
 + chaЪ->
miІlign
 - 
d©Ћn
,

1339 
d©a
, 
d©Ћn
);

1340 
chaЪ
->
off
 +р
d©Ћn
;

1341 
chaЪ
->
miІlign
 -р
d©Ћn
;

1342 
buf
->
tўЃ_Ћn
 +р
d©Ћn
;

1343 
buf
->
n_add_f№_cb
 +р
d©Ћn
;

1344 
out
;

1345 } iа(
chaЪ
->
miІlign
) {

1346 
	`memэy
(
chaЪ
->
bufгr
,

1347 (*)
d©a
 + 
d©Ћn
 - 
chaЪ
->
miІlign
,

1348 
chaЪ
->
miІlign
);

1349 
chaЪ
->
off
 +рchaЪ->
miІlign
;

1350 
buf
->
tўЃ_Ћn
 +р
chaЪ
->
miІlign
;

1351 
buf
->
n_add_f№_cb
 +р
chaЪ
->
miІlign
;

1352 
d©Ћn
 -р
chaЪ
->
miІlign
;

1353 
chaЪ
->
miІlign
 = 0;

1358 iа((
tmp
 = 
	`evbufгr_chaЪ_√w
(
d©Ћn
)и=р
NULL
)

1359 
dЏe
;

1360 
buf
->
fЬ°
 = 
tmp
;

1361 iа(
buf
->
іevious_to_ѕ°
 =р
NULL
)

1362 
buf
->
іevious_to_ѕ°
 = 
tmp
;

1363 
tmp
->
√xt
 = 
chaЪ
;

1365 
tmp
->
off
 = 
d©Ћn
;

1366 
tmp
->
miІlign
 =Бmp->
bufгr_Ћn
 - 
d©Ћn
;

1368 
	`memэy
(
tmp
->
bufгr
 +Бmp->
miІlign
, 
d©a
, 
d©Ћn
);

1369 
buf
->
tўЃ_Ћn
 +р
d©Ћn
;

1370 
buf
->
n_add_f№_cb
 +р
chaЪ
->
miІlign
;

1372 
out
:

1373 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

1374 
їsu…
 = 0;

1375 
dЏe
:

1376 
	`EVBUFFER_UNLOCK
(
buf
);

1377  
їsu…
;

1378 
	}
}

1382 
	$evbufгr_chaЪ_Ѓign
(
evbufгr_chaЪ
 *
chaЪ
)

1384 
	`EVUTIL_ASSERT
(!(
chaЪ
->
жags
 & 
EVBUFFER_IMMUTABLE
));

1385 
	`EVUTIL_ASSERT
(!(
chaЪ
->
жags
 & 
EVBUFFER_MEM_PINNED_ANY
));

1386 
	`memmove
(
chaЪ
->
bufгr
, chaЪ->bufгЄ+ chaЪ->
miІlign
, chaЪ->
off
);

1387 
chaЪ
->
miІlign
 = 0;

1388 
	}
}

1393 
	$evbufгr_exЈnd
(
evbufгr
 *
buf
, 
size_t
 
d©Ћn
)

1397 
evbufгr_chaЪ
 *
chaЪ
, *
tmp
;

1398 
size_t
 
√ed
, 
Ћngth
;

1399 
їsu…
 = -1;

1401 
	`EVBUFFER_LOCK
(
buf
);

1403 
chaЪ
 = 
buf
->
ѕ°
;

1405 iа(
chaЪ
 =р
NULL
 ||

1406 (
chaЪ
->
жags
 & (
EVBUFFER_IMMUTABLE
|
EVBUFFER_MEM_PINNED_ANY
))) {

1407 
chaЪ
 = 
	`evbufгr_chaЪ_√w
(
d©Ћn
);

1408 iа(
chaЪ
 =р
NULL
)

1409 
Фr
;

1411 
	`evbufгr_chaЪ_Ъ£є
(
buf
, 
chaЪ
);

1412 
ok
;

1415 
√ed
 = 
chaЪ
->
miІlign
 + chaЪ->
off
 + 
d©Ћn
;

1418 iа(
chaЪ
->
bufгr_Ћn
 >р
√ed
)

1419 
ok
;

1425 iа(
chaЪ
->
bufгr_Ћn
 - chaЪ->
off
 >р
d©Ћn
) {

1426 
	`evbufгr_chaЪ_Ѓign
(
chaЪ
);

1427 
ok
;

1431 
Ћngth
 = 
chaЪ
->
bufгr_Ћn
 - chaЪ->
miІlign
 + 
d©Ћn
;

1432 
tmp
 = 
	`evbufгr_chaЪ_√w
(
Ћngth
);

1433 iа(
tmp
 =р
NULL
)

1434 
Фr
;

1436 
tmp
->
off
 = 
chaЪ
->off;

1437 
tmp
->
miІlign
 = 0;

1438 
	`memэy
(
tmp
->
bufгr
, 
chaЪ
->bufгЄ+ chaЪ->
miІlign
, chaЪ->
off
);

1441 iа(
buf
->
fЬ°
 =р
chaЪ
)

1442 
buf
->
fЬ°
 = 
tmp
;

1443 iа(
buf
->
іevious_to_ѕ°
)

1444 
buf
->
іevious_to_ѕ°
->
√xt
 = 
tmp
;

1445 
buf
->
ѕ°
 = 
tmp
;

1447 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

1449 
ok
:

1450 
їsu…
 = 0;

1451 
Фr
:

1452 
	`EVBUFFER_UNLOCK
(
buf
);

1453  
їsu…
;

1454 
	}
}

1459 
	$_evbufгr_exЈnd_з°
(
evbufгr
 *
buf
, 
size_t
 
d©Ћn
)

1461 
evbufгr_chaЪ
 *
chaЪ
 = 
buf
->
ѕ°
, *
tmp
;

1462 
size_t
 
avaЮ
, 
avaЮ_Ъ_іev
 = 0;

1464 
	`ASSERT_EVBUFFER_LOCKED
(
buf
);

1466 iа(
chaЪ
 =р
NULL
 || (chaЪ->
жags
 & 
EVBUFFER_IMMUTABLE
)) {

1467 
chaЪ
 = 
	`evbufгr_chaЪ_√w
(
d©Ћn
);

1468 iа(
chaЪ
 =р
NULL
)

1471 
	`evbufгr_chaЪ_Ъ£є
(
buf
, 
chaЪ
);

1477 iа(
chaЪ
->
off
) {

1478 
avaЮ
 = 
chaЪ
->
bufгr_Ћn
 - (chaЪ->
off
 + chaЪ->
miІlign
);

1479 
avaЮ_Ъ_іev
 = 0;

1482 
chaЪ
->
miІlign
 = 0;

1483 
avaЮ
 = 
chaЪ
->
bufгr_Ћn
;

1485 iа(
buf
->
іevious_to_ѕ°
) {

1486 
evbufгr_chaЪ
 *
іev
 = 
buf
->
іevious_to_ѕ°
;

1487 
avaЮ_Ъ_іev
 = 
	`CHAIN_SPACE_LEN
(
іev
);

1492 iа(
avaЮ
+
avaЮ_Ъ_іev
 >р
d©Ћn
)

1496 iа(
chaЪ
->
off
 == 0) {

1500 
tmp
 = 
	`evbufгr_chaЪ_√w
(
d©Ћn
-
avaЮ_Ъ_іev
);

1501 iа(
tmp
 =р
NULL
)

1504 iа(
buf
->
fЬ°
 =р
chaЪ
)

1505 
buf
->
fЬ°
 = 
tmp
;

1506 iа(
buf
->
іevious_to_ѕ°
)

1507 
buf
->
іevious_to_ѕ°
->
√xt
 = 
tmp
;

1508 
buf
->
ѕ°
 = 
tmp
;

1509 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

1515 
tmp
 = 
	`evbufгr_chaЪ_√w
(
d©Ћn
-
avaЮ
);

1516 iа(
tmp
 =р
NULL
)

1519 
buf
->
іevious_to_ѕ°
 = 
chaЪ
;

1520 
chaЪ
->
√xt
 = 
tmp
;

1521 
buf
->
ѕ°
 = 
tmp
;

1525 
	}
}

1531 #iа
defЪed
(
_EVENT_HAVE_SYS_UIO_H
и|| defЪed(
WIN32
)

1532 
	#USE_IOVEC_IMPL


	)

1535 #ifdeа
USE_IOVEC_IMPL


1537 #ifdeа
_EVENT_HAVE_SYS_UIO_H


1540 
	#NUM_IOVEC
 128

	)

1541 
	#IOV_TYPE
 
iovec


	)

1542 
	#IOV_PTR_FIELD
 
iov_ba£


	)

1543 
	#IOV_LEN_FIELD
 
iov_Ћn


	)

1545 
	#NUM_IOVEC
 16

	)

1546 
	#IOV_TYPE
 
WSABUF


	)

1547 
	#IOV_PTR_FIELD
 
buf


	)

1548 
	#IOV_LEN_FIELD
 
Ћn


	)

1552 
	#EVBUFFER_MAX_READ
 4096

	)

1567 
	$_evbufгr_їad_£tup_vecs
(
evbufгr
 *
buf
, 
ev_ssize_t
 
howmuch
,

1568 
evbufгr_iovec
 *
vecs
, 
evbufгr_chaЪ
 **
chaЪp
, 
exaщ
)

1570 
evbufгr_chaЪ
 *
chaЪ
;

1571 
nvecs
;

1573 iа(
howmuch
 < 0)

1576 
chaЪ
 = 
buf
->
ѕ°
;

1578 iа(
chaЪ
->
off
 =р0 && 
buf
->
іevious_to_ѕ°
 &&

1579 
	`CHAIN_SPACE_LEN
(
buf
->
іevious_to_ѕ°
)) {

1583 
evbufгr_chaЪ
 *
іev
 = 
buf
->
іevious_to_ѕ°
;

1584 
vecs
[0].
iov_ba£
 = 
	`CHAIN_SPACE_PTR
(
іev
);

1585 
vecs
[0].
iov_Ћn
 = 
	`CHAIN_SPACE_LEN
(
іev
);

1586 
vecs
[1].
iov_ba£
 = 
	`CHAIN_SPACE_PTR
(
chaЪ
);

1587 
vecs
[1].
iov_Ћn
 = 
	`CHAIN_SPACE_LEN
(
chaЪ
);

1588 iа(
vecs
[0].
iov_Ћn
 >р(
size_t
)
howmuch
) {

1591 
chaЪ
 = 
іev
;

1592 
nvecs
 = 1;

1595 
chaЪ
 = 
іev
;

1596 
nvecs
 = 2;

1597 iа(
exaщ
 &&

1598 (
vecs
[0].
iov_Ћn
 + vecs[1].iov_Ћј> (
size_t
)
howmuch
)) {

1599 
vecs
[1].
iov_Ћn
 = 
howmuch
 - vecs[0].iov_len;

1605 
nvecs
 = 1;

1606 
vecs
[0].
iov_ba£
 = 
	`CHAIN_SPACE_PTR
(
chaЪ
);

1607 
vecs
[0].
iov_Ћn
 = 
	`CHAIN_SPACE_LEN
(
chaЪ
);

1608 iа(
exaщ
 && (
vecs
[0].
iov_Ћn
 > (
size_t
)
howmuch
))

1609 
vecs
[0].
iov_Ћn
 = 
howmuch
;

1612 *
chaЪp
 = 
chaЪ
;

1613  
nvecs
;

1614 
	}
}

1619 
	$evbufгr_їad
(
evbufгr
 *
buf
, 
evutЮ_sockС_t
 
fd
, 
howmuch
)

1621 
evbufгr_chaЪ
 *
chaЪ
;

1622 
n
 = 
EVBUFFER_MAX_READ
;

1623 
їsu…
;

1625 #ifdeа
USE_IOVEC_IMPL


1626 
nvecs
;

1628 *
p
;

1630 #iа
	`defЪed
(
FIONREAD
и&& defЪed(
WIN32
)

1631 
 g
 = 
n
;

1634 
	`EVBUFFER_LOCK
(
buf
);

1636 
chaЪ
 = 
buf
->
ѕ°
;

1638 iа(
buf
->
дУze_Тd
) {

1639 
їsu…
 = -1;

1640 
dЏe
;

1643 #iа
	`defЪed
(
FIONREAD
)

1644 #ifdeа
WIN32


1645 iа(
	`ioщlsockС
(
fd
, 
FIONREAD
, &
 g
и=р-1 || (
n
=lng) <= 0) {

1647 iа(
	`ioщl
(
fd
, 
FIONREAD
, &
n
) == -1 ||В <= 0) {

1649 
n
 = 
EVBUFFER_MAX_READ
;

1650 } iа(
n
 > 
EVBUFFER_MAX_READ
 &&В > 
howmuch
) {

1658 iа(
chaЪ
 =р
NULL
 || 
n
 < 
EVBUFFER_MAX_READ
)

1659 
n
 = 
EVBUFFER_MAX_READ
;

1660 iа((
size_t
)
n
 > 
chaЪ
->
bufгr_Ћn
 << 2)

1661 
n
 = 
chaЪ
->
bufгr_Ћn
 << 2;

1664 iа(
howmuch
 < 0 || howmuch > 
n
)

1665 
howmuch
 = 
n
;

1667 #ifdeа
USE_IOVEC_IMPL


1670 iа(
	`_evbufгr_exЈnd_з°
(
buf
, 
howmuch
) == -1) {

1671 
їsu…
 = -1;

1672 
dЏe
;

1674 
IOV_TYPE
 
vecs
[2];

1675 #ifdeа
_EVBUFFER_IOVEC_IS_NATIVE


1676 
nvecs
 = 
	`_evbufгr_їad_£tup_vecs
(
buf
, 
howmuch
, 
vecs
,

1677 &
chaЪ
, 1);

1681 
evbufгr_iovec
 
ev_vecs
[2];

1682 
nvecs
 = 
	`_evbufгr_їad_£tup_vecs
(
buf
, 
howmuch
, 
ev_vecs
,

1683 &
chaЪ
, 1);

1685 iа(
nvecs
 == 2) {

1686 
	`WSABUF_FROM_EVBUFFER_IOV
(&
vecs
[1], &
ev_vecs
[1]);

1687 
	`WSABUF_FROM_EVBUFFER_IOV
(&
vecs
[0], &
ev_vecs
[0]);

1688 } iа(
nvecs
 == 1) {

1689 
	`WSABUF_FROM_EVBUFFER_IOV
(&
vecs
[0], &
ev_vecs
[0]);

1693 #ifdeа
WIN32


1695 
DWORD
 
byЛsRЧd
;

1696 
DWORD
 
жags
=0;

1697 iа(
	`WSARecv
(
fd
, 
vecs
, 
nvecs
, &
byЛsRЧd
, &
жags
, 
NULL
, NULL)) {

1700 iа(
	`WSAGСLa°EЉ№
(и=р
WSAECONNABORTED
)

1701 
n
 = 0;

1703 
n
 = -1;

1705 
n
 = 
byЛsRЧd
;

1708 
n
 = 
	`їadv
(
fd
, 
vecs
, 
nvecs
);

1716 iа(
	`evbufгr_exЈnd
(
buf
, 
howmuch
) == -1) {

1717 
їsu…
 = -1;

1718 
dЏe
;

1721 
chaЪ
 = 
buf
->
ѕ°
;

1724 
p
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign
 + chaЪ->
off
;

1726 #iвdeа
WIN32


1727 
n
 = 
	`їad
(
fd
, 
p
, 
howmuch
);

1729 
n
 = 
	`їcv
(
fd
, 
p
, 
howmuch
, 0);

1733 iа(
n
 == -1) {

1734 
їsu…
 = -1;

1735 
dЏe
;

1737 iа(
n
 == 0) {

1738 
їsu…
 = 0;

1739 
dЏe
;

1742 #ifdeа
USE_IOVEC_IMPL


1743 iа(
nvecs
 == 2) {

1744 
ev_ssize_t
 
•aы
 = 
	`CHAIN_SPACE_LEN
(
chaЪ
);

1745 iа(
•aы
 < 
n
) {

1746 
chaЪ
->
off
 +р
•aы
;

1747 
chaЪ
->
√xt
->
off
 +р
n
-
•aы
;

1749 
chaЪ
->
off
 +р
n
;

1752 
chaЪ
->
off
 +р
n
;

1755 
chaЪ
->
off
 +р
n
;

1757 
buf
->
tўЃ_Ћn
 +р
n
;

1758 
buf
->
n_add_f№_cb
 +р
n
;

1761 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

1762 
їsu…
 = 
n
;

1763 
dЏe
:

1764 
	`EVBUFFER_UNLOCK
(
buf
);

1765  
їsu…
;

1766 
	}
}

1768 #ifdeа
USE_IOVEC_IMPL


1769 
ЪlЪe
 

1770 
	$evbufгr_wrЩe_iovec
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
,

1771 
ev_ssize_t
 
howmuch
)

1773 
IOV_TYPE
 
iov
[
NUM_IOVEC
];

1774 
evbufгr_chaЪ
 *
chaЪ
 = 
bufгr
->
fЬ°
;

1775 
n
, 
i
 = 0;

1777 iа(
howmuch
 < 0)

1780 
	`ASSERT_EVBUFFER_LOCKED
(
bufгr
);

1784 
chaЪ
 !р
NULL
 && 
i
 < 
NUM_IOVEC
 && 
howmuch
) {

1785 #ifdeа
USE_SENDFILE


1787 iа(
chaЪ
->
жags
 & 
EVBUFFER_SENDFILE
)

1790 
iov
[
i
].
IOV_PTR_FIELD
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign
;

1791 iа((
size_t
)
howmuch
 >р
chaЪ
->
off
) {

1792 
iov
[
i
++].
IOV_LEN_FIELD
 = 
chaЪ
->
off
;

1793 
howmuch
 -р
chaЪ
->
off
;

1795 
iov
[
i
++].
IOV_LEN_FIELD
 = 
howmuch
;

1798 
chaЪ
 = chaЪ->
√xt
;

1800 #ifdeа
WIN32


1802 
DWORD
 
byЛsSТt
;

1803 iа(
	`WSASТd
(
fd
, 
iov
, 
i
, &
byЛsSТt
, 0, 
NULL
, NULL))

1804 
n
 = -1;

1806 
n
 = 
byЛsSТt
;

1809 
n
 = 
	`wrЩev
(
fd
, 
iov
, 
i
);

1811  (
n
);

1812 
	}
}

1815 #ifdeа
USE_SENDFILE


1816 
ЪlЪe
 

1817 
	$evbufгr_wrЩe_£ndfЮe
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
,

1818 
ev_ssize_t
 
howmuch
)

1820 
evbufгr_chaЪ
 *
chaЪ
 = 
bufгr
->
fЬ°
;

1821 
evbufгr_chaЪ_fd
 *
Ъfo
 =

1822 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_fd
, 
chaЪ
);

1823 #iа
	`defЪed
(
SENDFILE_IS_MACOSX
и|| defЪed(
SENDFILE_IS_FREEBSD
)

1824 
їs
;

1825 
off_t
 
Ћn
 = 
chaЪ
->
off
;

1826 #Цiа
	`defЪed
(
SENDFILE_IS_LINUX
и|| defЪed(
SENDFILE_IS_SOLARIS
)

1827 
ev_ssize_t
 
їs
;

1828 
off_t
 
off£t
 = 
chaЪ
->
miІlign
;

1831 
	`ASSERT_EVBUFFER_LOCKED
(
bufгr
);

1833 #iа
	`defЪed
(
SENDFILE_IS_MACOSX
)

1834 
їs
 = 
	`£ndfЮe
(
Ъfo
->
fd
, fd, 
chaЪ
->
miІlign
, &
Ћn
, 
NULL
, 0);

1835 iа(
їs
 =р-1 && !
	`EVUTIL_ERR_RW_RETRIABLE
(
ФЇo
))

1838  (
Ћn
);

1839 #Цiа
	`defЪed
(
SENDFILE_IS_FREEBSD
)

1840 
їs
 = 
	`£ndfЮe
(
Ъfo
->
fd
, fd, 
chaЪ
->
miІlign
, chaЪ->
off
, 
NULL
, &
Ћn
, 0);

1841 iа(
їs
 =р-1 && !
	`EVUTIL_ERR_RW_RETRIABLE
(
ФЇo
))

1844  (
Ћn
);

1845 #Цiа
	`defЪed
(
SENDFILE_IS_LINUX
)

1847 
їs
 = 
	`£ndfЮe
(
fd
, 
Ъfo
->fd, &
off£t
, 
chaЪ
->
off
);

1848 iа(
їs
 =р-1 && 
	`EVUTIL_ERR_RW_RETRIABLE
(
ФЇo
)) {

1852  (
їs
);

1853 #Цiа
	`defЪed
(
SENDFILE_IS_SOLARIS
)

1854 
їs
 = 
	`£ndfЮe
(
fd
, 
Ъfo
->fd, &
off£t
, 
chaЪ
->
off
);

1855 iа(
їs
 =р-1 && 
	`EVUTIL_ERR_RW_RETRIABLE
(
ФЇo
)) {

1859  (
їs
);

1861 
	}
}

1865 
	$evbufгr_wrЩe_©mo°
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
,

1866 
ev_ssize_t
 
howmuch
)

1868 
n
 = -1;

1870 
	`EVBUFFER_LOCK
(
bufгr
);

1872 iа(
bufгr
->
дУze_°ђt
) {

1873 
dЏe
;

1876 iа(
howmuch
 < 0)

1877 
howmuch
 = 
bufгr
->
tўЃ_Ћn
;

1880 #ifdeа
USE_SENDFILE


1881 
evbufгr_chaЪ
 *
chaЪ
 = 
bufгr
->
fЬ°
;

1882 iа(
chaЪ
 !р
NULL
 && (chaЪ->
жags
 & 
EVBUFFER_SENDFILE
))

1883 
n
 = 
	`evbufгr_wrЩe_£ndfЮe
(
bufгr
, 
fd
, 
howmuch
);

1886 #ifdeа
USE_IOVEC_IMPL


1887 
n
 = 
	`evbufгr_wrЩe_iovec
(
bufгr
, 
fd
, 
howmuch
);

1888 #Цiа
	`defЪed
(
WIN32
)

1891 *
p
 = 
	`evbufгr_puќup
(
bufгr
, 
howmuch
);

1892 
n
 = 
	`£nd
(
fd
, 
p
, 
howmuch
, 0);

1894 *
p
 = 
	`evbufгr_puќup
(
bufгr
, 
howmuch
);

1895 
n
 = 
	`wrЩe
(
fd
, 
p
, 
howmuch
);

1899 iа(
n
 > 0)

1900 
	`evbufгr_dњЪ
(
bufгr
, 
n
);

1902 
dЏe
:

1903 
	`EVBUFFER_UNLOCK
(
bufгr
);

1904  (
n
);

1905 
	}
}

1908 
	$evbufгr_wrЩe
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
)

1910  
	`evbufгr_wrЩe_©mo°
(
bufгr
, 
fd
, -1);

1911 
	}
}

1914 
	$evbufгr_fЪd
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
)

1916 *
£ђch
;

1917 
evbufгr_±r
 
±r
;

1919 
	`EVBUFFER_LOCK
(
bufгr
);

1921 
±r
 = 
	`evbufгr_£ђch
(
bufгr
, (cЏ° *)
wh©
, 
Ћn
, 
NULL
);

1922 iа(
±r
.
pos
 < 0) {

1923 
£ђch
 = 
NULL
;

1925 
£ђch
 = 
	`evbufгr_puќup
(
bufгr
, 
±r
.
pos
 + 
Ћn
);

1926 iа(
£ђch
)

1927 
£ђch
 +р
±r
.
pos
;

1929 
	`EVBUFFER_UNLOCK
(
bufгr
);

1930  
£ђch
;

1931 
	}
}

1934 
	$evbufгr_±r_£t
(
evbufгr
 *
buf
, 
evbufгr_±r
 *
pos
,

1935 
size_t
 
posЩiЏ
, 
evbufгr_±r_how
 
how
)

1937 
size_t
 
Ћб
 = 
posЩiЏ
;

1938 
evbufгr_chaЪ
 *
chaЪ
 = 
NULL
;

1940 
	`EVBUFFER_LOCK
(
buf
);

1942 
how
) {

1943 
EVBUFFER_PTR_SET
:

1944 
chaЪ
 = 
buf
->
fЬ°
;

1945 
pos
->po†р
posЩiЏ
;

1946 
posЩiЏ
 = 0;

1948 
EVBUFFER_PTR_ADD
:

1951 
chaЪ
 = 
pos
->
_ЪЛЇЃ
.chain;

1952 
pos
->po†+р
posЩiЏ
;

1953 
posЩiЏ
 = 
pos
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1957 
chaЪ
 && 
posЩiЏ
 + 
Ћб
 >рchaЪ->
off
) {

1958 
Ћб
 -р
chaЪ
->
off
 - 
posЩiЏ
;

1959 
chaЪ
 = chaЪ->
√xt
;

1960 
posЩiЏ
 = 0;

1962 iа(
chaЪ
) {

1963 
pos
->
_ЪЛЇЃ
.
chaЪ
 = chain;

1964 
pos
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 
posЩiЏ
 + 
Ћб
;

1966 
pos
->
_ЪЛЇЃ
.
chaЪ
 = 
NULL
;

1967 
pos
->pos = -1;

1970 
	`EVBUFFER_UNLOCK
(
buf
);

1972  
chaЪ
 !р
NULL
 ? 0 : -1;

1973 
	}
}

1980 
	$evbufгr_±r_memcmp
(cЏ° 
evbufгr
 *
buf
, cЏ° 
evbufгr_±r
 *
pos
,

1981 cЏ° *
mem
, 
size_t
 
Ћn
)

1983 
evbufгr_chaЪ
 *
chaЪ
;

1984 
size_t
 
posЩiЏ
;

1985 
r
;

1987 
	`ASSERT_EVBUFFER_LOCKED
(
buf
);

1989 iа(
pos
->po†+ 
Ћn
 > 
buf
->
tўЃ_Ћn
)

1992 
chaЪ
 = 
pos
->
_ЪЛЇЃ
.chain;

1993 
posЩiЏ
 = 
pos
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

1994 
Ћn
 && 
chaЪ
) {

1995 
size_t
 
n_comЈњbЋ
;

1996 iа(
Ћn
 + 
posЩiЏ
 > 
chaЪ
->
off
)

1997 
n_comЈњbЋ
 = 
chaЪ
->
off
 - 
posЩiЏ
;

1999 
n_comЈњbЋ
 = 
Ћn
;

2000 
r
 = 
	`memcmp
(
chaЪ
->
bufгr
 + chaЪ->
miІlign
 + 
posЩiЏ
, 
mem
,

2001 
n_comЈњbЋ
);

2002 iа(
r
)

2003  
r
;

2004 
mem
 +р
n_comЈњbЋ
;

2005 
Ћn
 -р
n_comЈњbЋ
;

2006 
posЩiЏ
 = 0;

2007 
chaЪ
 = chaЪ->
√xt
;

2011 
	}
}

2013 
evbufгr_±r


2014 
	$evbufгr_£ђch
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
, cЏ° 
evbufгr_±r
 *
°ђt
)

2016  
	`evbufгr_£ђch_њnge
(
bufгr
, 
wh©
, 
Ћn
, 
°ђt
, 
NULL
);

2017 
	}
}

2019 
evbufгr_±r


2020 
	$evbufгr_£ђch_њnge
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
, cЏ° 
evbufгr_±r
 *
°ђt
, cЏ° evbufгr_±Є*
Тd
)

2022 
evbufгr_±r
 
pos
;

2023 
evbufгr_chaЪ
 *
chaЪ
, *
ѕ°_chaЪ
 = 
NULL
;

2024 cЏ° *
p
;

2025 
fЬ°
;

2027 
	`EVBUFFER_LOCK
(
bufгr
);

2029 iа(
°ђt
) {

2030 
	`memэy
(&
pos
, 
°ђt
, (pos));

2031 
chaЪ
 = 
pos
.
_ЪЛЇЃ
.chain;

2033 
pos
.pos = 0;

2034 
chaЪ
 = 
pos
.
_ЪЛЇЃ
.chaЪ = 
bufгr
->
fЬ°
;

2035 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 0;

2038 iа(
Тd
)

2039 
ѕ°_chaЪ
 = 
Тd
->
_ЪЛЇЃ
.
chaЪ
;

2041 iа(!
Ћn
)

2042 
dЏe
;

2044 
fЬ°
 = 
wh©
[0];

2046 
chaЪ
) {

2047 cЏ° *
°ђt_©
 =

2048 
chaЪ
->
bufгr
 + chaЪ->
miІlign
 +

2049 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

2050 
p
 = 
	`memchr
(
°ђt_©
, 
fЬ°
,

2051 
chaЪ
->
off
 - 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
);

2052 iа(
p
) {

2053 
pos
.po†+р
p
 - 
°ђt_©
;

2054 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 +р
p
 - 
°ђt_©
;

2055 iа(!
	`evbufгr_±r_memcmp
(
bufгr
, &
pos
, 
wh©
, 
Ћn
)) {

2056 iа(
Тd
 && 
pos
.po†+ 
Ћn
 >Гnd->pos)

2057 
nў_found
;

2059 
dЏe
;

2061 ++
pos
.pos;

2062 ++
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

2063 iа(
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 =р
chaЪ
->
off
) {

2064 
chaЪ
 = 
pos
.
_ЪЛЇЃ
.chaЪ = chaЪ->
√xt
;

2065 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 0;

2068 iа(
chaЪ
 =р
ѕ°_chaЪ
)

2069 
nў_found
;

2070 
pos
.po†+р
chaЪ
->
off
 -Еos.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

2071 
chaЪ
 = 
pos
.
_ЪЛЇЃ
.chaЪ = chaЪ->
√xt
;

2072 
pos
.
_ЪЛЇЃ
.
pos_Ъ_chaЪ
 = 0;

2076 
nў_found
:

2077 
pos
.pos = -1;

2078 
pos
.
_ЪЛЇЃ
.
chaЪ
 = 
NULL
;

2079 
dЏe
:

2080 
	`EVBUFFER_UNLOCK
(
bufгr
);

2081  
pos
;

2082 
	}
}

2085 
	$evbufгr_≥ek
(
evbufгr
 *
bufгr
, 
ev_ssize_t
 
Ћn
,

2086 
evbufгr_±r
 *
°ђt_©
,

2087 
evbufгr_iovec
 *
vec
, 
n_vec
)

2089 
evbufгr_chaЪ
 *
chaЪ
;

2090 
idx
 = 0;

2091 
ev_ssize_t
 
Ћn_so_зr
 = 0;

2093 
	`EVBUFFER_LOCK
(
bufгr
);

2095 iа(
°ђt_©
) {

2096 
chaЪ
 = 
°ђt_©
->
_ЪЛЇЃ
.chain;

2097 
Ћn_so_зr
 = 
chaЪ
->
off


2098 - 
°ђt_©
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

2099 
idx
 = 1;

2100 iа(
n_vec
 > 0) {

2101 
vec
[0].
iov_ba£
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign


2102 + 
°ђt_©
->
_ЪЛЇЃ
.
pos_Ъ_chaЪ
;

2103 
vec
[0].
iov_Ћn
 = 
Ћn_so_зr
;

2105 
chaЪ
 = chaЪ->
√xt
;

2107 
chaЪ
 = 
bufгr
->
fЬ°
;

2110 
chaЪ
) {

2111 iа(
Ћn
 >р0 && 
Ћn_so_зr
 >=Жen)

2113 iа(
idx
<
n_vec
) {

2114 
vec
[
idx
].
iov_ba£
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign
;

2115 
vec
[
idx
].
iov_Ћn
 = 
chaЪ
->
off
;

2116 } iа(
Ћn
<0)

2118 ++
idx
;

2119 
Ћn_so_зr
 +р
chaЪ
->
off
;

2120 
chaЪ
 = chaЪ->
√xt
;

2123 
	`EVBUFFER_UNLOCK
(
bufгr
);

2125  
idx
;

2126 
	}
}

2130 
	$evbufгr_add_vіЪtf
(
evbufгr
 *
buf
, cЏ° *
fmt
, 
va_li°
 
≠
)

2132 *
bufгr
;

2133 
size_t
 
•aы
;

2134 
sz
, 
їsu…
 = -1;

2135 
va_li°
 
aq
;

2137 
	`EVBUFFER_LOCK
(
buf
);

2139 iа(
buf
->
дУze_Тd
) {

2140 
dЏe
;

2144 iа(
	`evbufгr_exЈnd
(
buf
, 64) == -1)

2145 
dЏe
;

2148 
evbufгr_chaЪ
 *
chaЪ
 = 
buf
->
ѕ°
;

2149 
size_t
 
u£d
 = 
chaЪ
->
miІlign
 + chaЪ->
off
;

2150 
bufгr
 = (*)
chaЪ
->bufгЄ+ chaЪ->
miІlign
 + chaЪ->
off
;

2151 
	`EVUTIL_ASSERT
(
chaЪ
->
bufгr_Ћn
 >р
u£d
);

2152 
•aы
 = 
chaЪ
->
bufгr_Ћn
 - 
u£d
;

2154 #iвdeа
va_cЁy


2155 
	#va_cЁy
(
d°
, 
§c
и
	`memэy
(&(d°), &(§c), (
va_li°
))

	)

2157 
	`va_cЁy
(
aq
, 
≠
);

2159 
sz
 = 
	`evutЮ_vҐіЪtf
(
bufгr
, 
•aы
, 
fmt
, 
aq
);

2161 
	`va_Тd
(
aq
);

2163 iа(
sz
 < 0)

2164 
dЏe
;

2165 iа((
size_t
)
sz
 < 
•aы
) {

2166 
chaЪ
->
off
 +р
sz
;

2167 
buf
->
tўЃ_Ћn
 +р
sz
;

2168 
buf
->
n_add_f№_cb
 +р
sz
;

2170 
	`evbufгr_Ъvoke_€ќbacks
(
buf
);

2171 
їsu…
 = 
sz
;

2172 
dЏe
;

2174 iа(
	`evbufгr_exЈnd
(
buf
, 
sz
 + 1) == -1)

2175 
dЏe
;

2179 
dЏe
:

2180 
	`EVBUFFER_UNLOCK
(
buf
);

2181  
їsu…
;

2182 
	}
}

2185 
	$evbufгr_add_іЪtf
(
evbufгr
 *
buf
, cЏ° *
fmt
, ...)

2187 
їs
 = -1;

2188 
va_li°
 
≠
;

2190 
	`va_°ђt
(
≠
, 
fmt
);

2191 
їs
 = 
	`evbufгr_add_vіЪtf
(
buf
, 
fmt
, 
≠
);

2192 
	`va_Тd
(
≠
);

2194  (
їs
);

2195 
	}
}

2198 
	$evbufгr_add_їгїnы
(
evbufгr
 *
outbuf
,

2199 cЏ° *
d©a
, 
size_t
 
d©Ћn
,

2200 
evbufгr_їf_юЧnup_cb
 
юЧnupв
, *
exМa
)

2202 
evbufгr_chaЪ
 *
chaЪ
;

2203 
evbufгr_chaЪ_їгїnы
 *
Ъfo
;

2204 
їsu…
 = -1;

2206 
chaЪ
 = 
	`evbufгr_chaЪ_√w
((
evbufгr_chaЪ_їгїnы
));

2207 iа(!
chaЪ
)

2209 
chaЪ
->
жags
 |р
EVBUFFER_REFERENCE
 | 
EVBUFFER_IMMUTABLE
;

2210 
chaЪ
->
bufгr
 = (
u_chђ
 *)
d©a
;

2211 
chaЪ
->
bufгr_Ћn
 = 
d©Ћn
;

2212 
chaЪ
->
off
 = 
d©Ћn
;

2214 
Ъfo
 = 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_їгїnы
, 
chaЪ
);

2215 
Ъfo
->
юЧnupв
 = cleanupfn;

2216 
Ъfo
->
exМa
 =Гxtra;

2218 
	`EVBUFFER_LOCK
(
outbuf
);

2219 iа(
outbuf
->
дУze_Тd
) {

2222 
	`mm_дУ
(
chaЪ
);

2223 
dЏe
;

2225 
	`evbufгr_chaЪ_Ъ£є
(
outbuf
, 
chaЪ
);

2226 
outbuf
->
n_add_f№_cb
 +р
d©Ћn
;

2228 
	`evbufгr_Ъvoke_€ќbacks
(
outbuf
);

2230 
їsu…
 = 0;

2231 
dЏe
:

2232 
	`EVBUFFER_UNLOCK
(
outbuf
);

2234  
їsu…
;

2235 
	}
}

2245 
	$evbufгr_add_fЮe
(
evbufгr
 *
outbuf
, 
fd
,

2246 
off_t
 
off£t
, off_И
Ћngth
)

2248 #iа
	`defЪed
(
USE_SENDFILE
и|| defЪed(
_EVENT_HAVE_MMAP
)

2249 
evbufгr_chaЪ
 *
chaЪ
;

2250 
evbufгr_chaЪ_fd
 *
Ъfo
;

2252 
ok
 = 1;

2254 #iа
	`defЪed
(
USE_SENDFILE
)

2255 iа(
u£_£ndfЮe
) {

2256 
chaЪ
 = 
	`evbufгr_chaЪ_√w
((
evbufгr_chaЪ_fd
));

2257 iа(
chaЪ
 =р
NULL
) {

2258 
	`evТt_wђn
("%s: ouИoаmem№y", 
__func__
);

2262 
chaЪ
->
жags
 |р
EVBUFFER_SENDFILE
 | 
EVBUFFER_IMMUTABLE
;

2263 
chaЪ
->
bufгr
 = 
NULL
;

2264 
chaЪ
->
bufгr_Ћn
 = 
Ћngth
 + 
off£t
;

2265 
chaЪ
->
off
 = 
Ћngth
;

2266 
chaЪ
->
miІlign
 = 
off£t
;

2268 
Ъfo
 = 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_fd
, 
chaЪ
);

2269 
Ъfo
->
fd
 = fd;

2271 
	`EVBUFFER_LOCK
(
outbuf
);

2272 iа(
outbuf
->
дУze_Тd
) {

2273 
	`mm_дУ
(
chaЪ
);

2274 
ok
 = 0;

2276 
outbuf
->
n_add_f№_cb
 +р
Ћngth
;

2277 
	`evbufгr_chaЪ_Ъ£є
(
outbuf
, 
chaЪ
);

2281 #iа
	`defЪed
(
_EVENT_HAVE_MMAP
)

2282 iа(
u£_mm≠
) {

2283 *
m≠≥d
 = 
	`mm≠
(
NULL
, 
Ћngth
 + 
off£t
, 
PROT_READ
,

2284 #ifdeа
MAP_NOCACHE


2285 
MAP_NOCACHE
 |

2287 #ifdeа
MAP_FILE


2288 
MAP_FILE
 |

2290 
MAP_PRIVATE
,

2291 
fd
, 0);

2298 iа(
m≠≥d
 =р
MAP_FAILED
) {

2299 
	`evТt_wђn
("%s: mmap(%d, %d, %zu) failed",

2300 
__func__
, 
fd
, 0, (
size_t
)(
off£t
 + 
Ћngth
));

2303 
chaЪ
 = 
	`evbufгr_chaЪ_√w
((
evbufгr_chaЪ_fd
));

2304 iа(
chaЪ
 =р
NULL
) {

2305 
	`evТt_wђn
("%s: ouИoаmem№y", 
__func__
);

2306 
	`munm≠
(
m≠≥d
, 
Ћngth
);

2310 
chaЪ
->
жags
 |р
EVBUFFER_MMAP
 | 
EVBUFFER_IMMUTABLE
;

2311 
chaЪ
->
bufгr
 = 
m≠≥d
;

2312 
chaЪ
->
bufгr_Ћn
 = 
Ћngth
 + 
off£t
;

2313 
chaЪ
->
off
 = 
Ћngth
 + 
off£t
;

2315 
Ъfo
 = 
	`EVBUFFER_CHAIN_EXTRA
(
evbufгr_chaЪ_fd
, 
chaЪ
);

2316 
Ъfo
->
fd
 = fd;

2318 
	`EVBUFFER_LOCK
(
outbuf
);

2319 iа(
outbuf
->
дУze_Тd
) {

2320 
Ъfo
->
fd
 = -1;

2321 
	`evbufгr_chaЪ_дУ
(
chaЪ
);

2322 
ok
 = 0;

2324 
outbuf
->
n_add_f№_cb
 +р
Ћngth
;

2326 
	`evbufгr_chaЪ_Ъ£є
(
outbuf
, 
chaЪ
);

2329 
	`evbufгr_dњЪ
(
outbuf
, 
off£t
);

2335 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

2336 
ev_ssize_t
 
їad
;

2338 iа(
tmp
 =р
NULL
)

2341 #ifdeа
WIN32


2342 
	#l£ek
 
_l£ek


	)

2344 iа(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) == -1) {

2345 
	`evbufгr_дУ
(
tmp
);

2352 
Ћngth
) {

2353 
їad
 = 
	`evbufгr_їad
(
tmp
, 
fd
, 
Ћngth
);

2354 iа(
їad
 == -1) {

2355 
	`evbufгr_дУ
(
tmp
);

2359 
Ћngth
 -р
їad
;

2362 
	`EVBUFFER_LOCK
(
outbuf
);

2363 iа(
outbuf
->
дУze_Тd
) {

2364 
	`evbufгr_дУ
(
tmp
);

2365 
ok
 = 0;

2367 
	`evbufгr_add_bufгr
(
outbuf
, 
tmp
);

2368 
	`evbufгr_дУ
(
tmp
);

2370 #ifdeа
WIN32


2371 
	#юo£
 
_юo£


	)

2373 
	`юo£
(
fd
);

2377 iа(
ok
)

2378 
	`evbufгr_Ъvoke_€ќbacks
(
outbuf
);

2379 
	`EVBUFFER_UNLOCK
(
outbuf
);

2381  
ok
 ? 0 : -1;

2382 
	}
}

2386 
	$evbufгr_£tcb
(
evbufгr
 *
bufгr
, 
evbufгr_cb
 
cb
, *
cbђg
)

2388 
	`EVBUFFER_LOCK
(
bufгr
);

2390 iа(!
	`TAILQ_EMPTY
(&
bufгr
->
€ќbacks
))

2391 
	`evbufгr_їmove_Ѓl_€ќbacks
(
bufгr
);

2393 iа(
cb
) {

2394 
evbufгr_cb_ТМy
 *
Тt
 =

2395 
	`evbufгr_add_cb
(
bufгr
, 
NULL
, 
cbђg
);

2396 
Тt
->
cb
.
cb_obsёСe
 = cb;

2397 
Тt
->
жags
 |р
EVBUFFER_CB_OBSOLETE
;

2399 
	`EVBUFFER_UNLOCK
(
bufгr
);

2400 
	}
}

2402 
evbufгr_cb_ТМy
 *

2403 
	$evbufгr_add_cb
(
evbufгr
 *
bufгr
, 
evbufгr_cb_func
 
cb
, *
cbђg
)

2405 
evbufгr_cb_ТМy
 *
e
;

2406 iа(! (
e
 = 
	`mm_€ќoc
(1, (
evbufгr_cb_ТМy
))))

2407  
NULL
;

2408 
	`EVBUFFER_LOCK
(
bufгr
);

2409 
e
->
cb
.
cb_func
 = cb;

2410 
e
->
cbђg
 = cbarg;

2411 
e
->
жags
 = 
EVBUFFER_CB_ENABLED
;

2412 
	`TAILQ_INSERT_HEAD
(&
bufгr
->
€ќbacks
, 
e
, 
√xt
);

2413 
	`EVBUFFER_UNLOCK
(
bufгr
);

2414  
e
;

2415 
	}
}

2418 
	$evbufгr_їmove_cb_ТМy
(
evbufгr
 *
bufгr
,

2419 
evbufгr_cb_ТМy
 *
Тt
)

2421 
	`EVBUFFER_LOCK
(
bufгr
);

2422 
	`TAILQ_REMOVE
(&
bufгr
->
€ќbacks
, 
Тt
, 
√xt
);

2423 
	`EVBUFFER_UNLOCK
(
bufгr
);

2424 
	`mm_дУ
(
Тt
);

2426 
	}
}

2429 
	$evbufгr_їmove_cb
(
evbufгr
 *
bufгr
, 
evbufгr_cb_func
 
cb
, *
cbђg
)

2431 
evbufгr_cb_ТМy
 *
cbТt
;

2432 
їsu…
 = -1;

2433 
	`EVBUFFER_LOCK
(
bufгr
);

2434 
	`TAILQ_FOREACH
(
cbТt
, &
bufгr
->
€ќbacks
, 
√xt
) {

2435 iа(
cb
 =р
cbТt
->cb.
cb_func
 && 
cbђg
 == cbent->cbarg) {

2436 
їsu…
 = 
	`evbufгr_їmove_cb_ТМy
(
bufгr
, 
cbТt
);

2437 
dЏe
;

2440 
dЏe
:

2441 
	`EVBUFFER_UNLOCK
(
bufгr
);

2442  
їsu…
;

2443 
	}
}

2446 
	$evbufгr_cb_£t_жags
(
evbufгr
 *
bufгr
,

2447 
evbufгr_cb_ТМy
 *
cb
, 
ev_uЪt32_t
 
жags
)

2450 
жags
 &р~
EVBUFFER_CB_INTERNAL_FLAGS
;

2451 
	`EVBUFFER_LOCK
(
bufгr
);

2452 
cb
->
жags
 |= flags;

2453 
	`EVBUFFER_UNLOCK
(
bufгr
);

2455 
	}
}

2458 
	$evbufгr_cb_юЧr_жags
(
evbufгr
 *
bufгr
,

2459 
evbufгr_cb_ТМy
 *
cb
, 
ev_uЪt32_t
 
жags
)

2462 
жags
 &р~
EVBUFFER_CB_INTERNAL_FLAGS
;

2463 
	`EVBUFFER_LOCK
(
bufгr
);

2464 
cb
->
жags
 &= ~flags;

2465 
	`EVBUFFER_UNLOCK
(
bufгr
);

2467 
	}
}

2470 
	$evbufгr_дУze
(
evbufгr
 *
bufгr
, 
°ђt
)

2472 
	`EVBUFFER_LOCK
(
bufгr
);

2473 iа(
°ђt
)

2474 
bufгr
->
дУze_°ђt
 = 1;

2476 
bufгr
->
дУze_Тd
 = 1;

2477 
	`EVBUFFER_UNLOCK
(
bufгr
);

2479 
	}
}

2482 
	$evbufгr_unдУze
(
evbufгr
 *
bufгr
, 
°ђt
)

2484 
	`EVBUFFER_LOCK
(
bufгr
);

2485 iа(
°ђt
)

2486 
bufгr
->
дУze_°ђt
 = 0;

2488 
bufгr
->
дУze_Тd
 = 0;

2489 
	`EVBUFFER_UNLOCK
(
bufгr
);

2491 
	}
}

2495 
	$evbufгr_cb_su•Тd
(
evbufгr
 *
bufгr
, 
evbufгr_cb_ТМy
 *
cb
)

2497 iа(!(
cb
->
жags
 & 
EVBUFFER_CB_SUSPENDED
)) {

2498 
cb
->
size_bef№e_su•Тd
 = 
	`evbufгr_gС_Ћngth
(
bufгr
);

2499 
cb
->
жags
 |р
EVBUFFER_CB_SUSPENDED
;

2501 
	}
}

2504 
	$evbufгr_cb_unsu•Тd
(
evbufгr
 *
bufгr
, 
evbufгr_cb_ТМy
 *
cb
)

2506 iа((
cb
->
жags
 & 
EVBUFFER_CB_SUSPENDED
)) {

2507 
€ќ
 = (
cb
->
жags
 & 
EVBUFFER_CB_CALL_ON_UNSUSPEND
);

2508 
size_t
 
sz
 = 
cb
->
size_bef№e_su•Тd
;

2509 
cb
->
жags
 &р~(
EVBUFFER_CB_SUSPENDED
|

2510 
EVBUFFER_CB_CALL_ON_UNSUSPEND
);

2511 
cb
->
size_bef№e_su•Тd
 = 0;

2512 iа(
€ќ
 && (
cb
->
жags
 & 
EVBUFFER_CB_ENABLED
)) {

2513 
cb
->
	`cb
(
bufгr
, 
sz
, 
	`evbufгr_gС_Ћngth
(bufгr), cb->
cbђg
);

2516 
	}
}

	@buffer_iocp.c

34 
	~"evТt2/bufгr.h
"

35 
	~"evТt2/bufгr_comЈt.h
"

36 
	~"evТt2/utЮ.h
"

37 
	~"evТt2/thїad.h
"

38 
	~"evТt-cЏfig.h
"

39 
	~"utЮ-ЪЛЇЃ.h
"

40 
	~"evthїad-ЪЛЇЃ.h
"

41 
	~"evbufгr-ЪЛЇЃ.h
"

42 
	~"ioэ-ЪЛЇЃ.h
"

43 
	~"mm-ЪЛЇЃ.h
"

45 
	~<wЪsock2.h
>

46 
	~<wЪdows.h
>

47 
	~<°dio.h
>

49 
	#MAX_WSABUFS
 16

	)

52 
	sevbufгr_ovФѕµed
 {

53 
evbufгr
 
	mbufгr
;

55 
evutЮ_sockС_t
 
	mfd
;

58 
	mїad_Ъ_іogїss
 : 1;

59 
	mwrЩe_Ъ_іogїss
 : 1;

62 
evbufгr_chaЪ
 *
	mfЬ°_pЪ√d
;

66 
	mn_bufгrs
;

67 
WSABUF
 
	mbufгrs
[
MAX_WSABUFS
];

72 
ЪlЪe
 
evbufгr_ovФѕµed
 *

73 
	$up€°_evbufгr
(
evbufгr
 *
buf
)

75 iа(!
buf
 || !buf->
is_ovФѕµed
)

76  
NULL
;

77  
	`EVUTIL_UPCAST
(
buf
, 
evbufгr_ovФѕµed
, 
bufгr
);

78 
	}
}

82 
	$pЪ_їЋa£
(
evbufгr_ovФѕµed
 *
eo
, 
жag
)

84 
i
;

85 
evbufгr_chaЪ
 *
chaЪ
 = 
eo
->
fЬ°_pЪ√d
;

87 
i
 = 0; i < 
eo
->
n_bufгrs
; ++i) {

88 
	`EVUTIL_ASSERT
(
chaЪ
);

89 
	`_evbufгr_chaЪ_u≈Ъ
(
chaЪ
, 
жag
);

90 
chaЪ
 = chaЪ->
√xt
;

92 
	}
}

95 
	$evbufгr_commЩ_їad
(
evbufгr
 *
evbuf
, 
ev_ssize_t
 
nByЛs
)

97 
evbufгr_ovФѕµed
 *
buf
 = 
	`up€°_evbufгr
(
evbuf
);

98 
evbufгr_iovec
 
iov
[2];

99 
n_vec
;

101 
	`EVBUFFER_LOCK
(
evbuf
);

102 
	`EVUTIL_ASSERT
(
buf
->
їad_Ъ_іogїss
 && !buf->
wrЩe_Ъ_іogїss
);

103 
	`EVUTIL_ASSERT
(
nByЛs
 >= 0);

105 
	`evbufгr_unдУze
(
evbuf
, 0);

107 
iov
[0].
iov_ba£
 = 
buf
->
bufгrs
[0].buf;

108 iа((
size_t
)
nByЛs
 <р
buf
->
bufгrs
[0].
Ћn
) {

109 
iov
[0].
iov_Ћn
 = 
nByЛs
;

110 
n_vec
 = 1;

112 
iov
[0].
iov_Ћn
 = 
buf
->
bufгrs
[0].
Ћn
;

113 
iov
[1].
iov_ba£
 = 
buf
->
bufгrs
[1].buf;

114 
iov
[1].
iov_Ћn
 = 
nByЛs
 - iov[0].iov_len;

115 
n_vec
 = 2;

118 iа(
	`evbufгr_commЩ_•aы
(
evbuf
, 
iov
, 
n_vec
) < 0)

119 
	`EVUTIL_ASSERT
(0);

121 
	`pЪ_їЋa£
(
buf
, 
EVBUFFER_MEM_PINNED_R
);

123 
buf
->
їad_Ъ_іogїss
 = 0;

125 
	`_evbufгr_deьef_™d_u∆ock
(
evbuf
);

126 
	}
}

129 
	$evbufгr_commЩ_wrЩe
(
evbufгr
 *
evbuf
, 
ev_ssize_t
 
nByЛs
)

131 
evbufгr_ovФѕµed
 *
buf
 = 
	`up€°_evbufгr
(
evbuf
);

133 
	`EVBUFFER_LOCK
(
evbuf
);

134 
	`EVUTIL_ASSERT
(
buf
->
wrЩe_Ъ_іogїss
 && !buf->
їad_Ъ_іogїss
);

135 
	`evbufгr_unдУze
(
evbuf
, 1);

136 
	`evbufгr_dњЪ
(
evbuf
, 
nByЛs
);

137 
	`pЪ_їЋa£
(
buf
,
EVBUFFER_MEM_PINNED_W
);

138 
buf
->
wrЩe_Ъ_іogїss
 = 0;

139 
	`_evbufгr_deьef_™d_u∆ock
(
evbuf
);

140 
	}
}

142 
evbufгr
 *

143 
	$evbufгr_ovФѕµed_√w
(
evutЮ_sockС_t
 
fd
)

145 
evbufгr_ovФѕµed
 *
evo
;

147 
evo
 = 
	`mm_€ќoc
(1, (
evbufгr_ovФѕµed
));

149 
	`TAILQ_INIT
(&
evo
->
bufгr
.
€ќbacks
);

150 
evo
->
bufгr
.
їfъt
 = 1;

152 
evo
->
bufгr
.
is_ovФѕµed
 = 1;

153 
evo
->
fd
 = fd;

155  &
evo
->
bufгr
;

156 
	}
}

159 
	$evbufгr_ѕunch_wrЩe
(
evbufгr
 *
buf
, 
ev_ssize_t
 
©_mo°
,

160 
evТt_ovФѕµed
 *
ё
)

162 
evbufгr_ovФѕµed
 *
buf_o
 = 
	`up€°_evbufгr
(
buf
);

163 
r
 = -1;

164 
i
;

165 
evbufгr_chaЪ
 *
chaЪ
;

166 
DWORD
 
byЛsSТt
;

168 iа(!
buf
) {

173 
	`EVBUFFER_LOCK
(
buf
);

174 
	`EVUTIL_ASSERT
(!
buf_o
->
їad_Ъ_іogїss
);

175 iа(
buf
->
дУze_°ђt
 || 
buf_o
->
wrЩe_Ъ_іogїss
)

176 
dЏe
;

177 iа(!
buf
->
tўЃ_Ћn
) {

179 
r
 = 0;

180 
dЏe
;

181 } iа(
©_mo°
 < 0 || (
size_t
пt_mo° > 
buf
->
tўЃ_Ћn
) {

182 
©_mo°
 = 
buf
->
tўЃ_Ћn
;

184 
	`evbufгr_дУze
(
buf
, 1);

186 
buf_o
->
fЬ°_pЪ√d
 = 0;

187 
buf_o
->
n_bufгrs
 = 0;

188 
	`mem£t
(
buf_o
->
bufгrs
, 0, (buf_o->buffers));

190 
chaЪ
 = 
buf_o
->
fЬ°_pЪ√d
 = 
buf
->
fЬ°
;

192 
i
=0; i < 
MAX_WSABUFS
 && 
chaЪ
; ++i, chaЪ=chaЪ->
√xt
) {

193 
WSABUF
 *
b
 = &
buf_o
->
bufгrs
[
i
];

194 
b
->
buf
 = 
chaЪ
->
bufгr
 + chaЪ->
miІlign
;

195 
	`_evbufгr_chaЪ_pЪ
(
chaЪ
, 
EVBUFFER_MEM_PINNED_W
);

197 iа((
size_t
)
©_mo°
 > 
chaЪ
->
off
) {

198 
b
->
Ћn
 = 
chaЪ
->
off
;

199 
©_mo°
 -р
chaЪ
->
off
;

201 
b
->
Ћn
 = 
©_mo°
;

202 ++
i
;

207 
buf_o
->
n_bufгrs
 = 
i
;

208 
	`_evbufгr_Ъьef
(
buf
);

209 iа(
	`WSASТd
(
buf_o
->
fd
, buf_o->
bufгrs
, 
i
, &
byЛsSТt
, 0,

210 &
ё
->
ovФѕµed
, 
NULL
)) {

211 
Фr№
 = 
	`WSAGСLa°EЉ№
();

212 iа(
Фr№
 !р
WSA_IO_PENDING
) {

214 
	`pЪ_їЋa£
(
buf_o
, 
EVBUFFER_MEM_PINNED_W
);

215 
	`evbufгr_unдУze
(
buf
, 1);

216 
	`evbufгr_дУ
(
buf
);

217 
dЏe
;

221 
buf_o
->
wrЩe_Ъ_іogїss
 = 1;

222 
r
 = 0;

223 
dЏe
:

224 
	`EVBUFFER_UNLOCK
(
buf
);

225  
r
;

226 
	}
}

229 
	$evbufгr_ѕunch_їad
(
evbufгr
 *
buf
, 
size_t
 
©_mo°
,

230 
evТt_ovФѕµed
 *
ё
)

232 
evbufгr_ovФѕµed
 *
buf_o
 = 
	`up€°_evbufгr
(
buf
);

233 
r
 = -1, 
i
;

234 
nvecs
;

235 
≈Ъ
=0;

236 
evbufгr_chaЪ
 *
chaЪ
=
NULL
;

237 
DWORD
 
byЛsRЧd
;

238 
DWORD
 
жags
 = 0;

239 
evbufгr_iovec
 
vecs
[
MAX_WSABUFS
];

241 iа(!
buf_o
)

243 
	`EVBUFFER_LOCK
(
buf
);

244 
	`EVUTIL_ASSERT
(!
buf_o
->
wrЩe_Ъ_іogїss
);

245 iа(
buf
->
дУze_Тd
 || 
buf_o
->
їad_Ъ_іogїss
)

246 
dЏe
;

248 
buf_o
->
fЬ°_pЪ√d
 = 0;

249 
buf_o
->
n_bufгrs
 = 0;

250 
	`mem£t
(
buf_o
->
bufгrs
, 0, (buf_o->buffers));

252 iа(
	`_evbufгr_exЈnd_з°
(
buf
, 
©_mo°
) == -1)

253 
dЏe
;

254 
	`evbufгr_дУze
(
buf
, 0);

256 
nvecs
 = 
	`_evbufгr_їad_£tup_vecs
(
buf
, 
©_mo°
,

257 
vecs
, &
chaЪ
, 1);

258 
i
=0;i<
nvecs
;++i) {

259 
	`WSABUF_FROM_EVBUFFER_IOV
(

260 &
buf_o
->
bufгrs
[
i
],

261 &
vecs
[
i
]);

264 
buf_o
->
n_bufгrs
 = 
nvecs
;

265 
buf_o
->
fЬ°_pЪ√d
 = 
chaЪ
;

266 
≈Ъ
=0;

267  ; 
chaЪ
; chaЪ = chaЪ->
√xt
) {

268 
	`_evbufгr_chaЪ_pЪ
(
chaЪ
, 
EVBUFFER_MEM_PINNED_R
);

269 ++
≈Ъ
;

271 
	`EVUTIL_ASSERT
(
≈Ъ
 =р
nvecs
);

273 
	`_evbufгr_Ъьef
(
buf
);

274 iа(
	`WSARecv
(
buf_o
->
fd
, buf_o->
bufгrs
, 
nvecs
, &
byЛsRЧd
, &
жags
,

275 &
ё
->
ovФѕµed
, 
NULL
)) {

276 
Фr№
 = 
	`WSAGСLa°EЉ№
();

277 iа(
Фr№
 !р
WSA_IO_PENDING
) {

279 
	`pЪ_їЋa£
(
buf_o
, 
EVBUFFER_MEM_PINNED_R
);

280 
	`evbufгr_unдУze
(
buf
, 0);

281 
	`evbufгr_дУ
(
buf
);

282 
dЏe
;

286 
buf_o
->
їad_Ъ_іogїss
 = 1;

287 
r
 = 0;

288 
dЏe
:

289 
	`EVBUFFER_UNLOCK
(
buf
);

290  
r
;

291 
	}
}

293 
evutЮ_sockС_t


294 
	$_evbufгr_ovФѕµed_gС_fd
(
evbufгr
 *
buf
)

296 
evbufгr_ovФѕµed
 *
buf_o
 = 
	`up€°_evbufгr
(
buf
);

297  
buf_o
 ? buf_o->
fd
 : -1;

298 
	}
}

301 
	$_evbufгr_ovФѕµed_£t_fd
(
evbufгr
 *
buf
, 
evutЮ_sockС_t
 
fd
)

303 
evbufгr_ovФѕµed
 *
buf_o
 = 
	`up€°_evbufгr
(
buf
);

304 
	`EVBUFFER_LOCK
(
buf
);

306 iа(
buf_o
)

307 
buf_o
->
fd
 = fd;

308 
	`EVBUFFER_UNLOCK
(
buf
);

309 
	}
}

	@bufferevent-internal.h

26 #iвdeа
_BUFFEREVENT_INTERNAL_H_


27 
	#_BUFFEREVENT_INTERNAL_H_


	)

29 #ifdeа
__эlu•lus


33 
	~"evТt-cЏfig.h
"

34 
	~"evutЮ.h
"

35 
	~"deгr-ЪЛЇЃ.h
"

36 
	~"evthїad-ЪЛЇЃ.h
"

37 
	~"evТt2/thїad.h
"

38 
	~"њЛlim-ЪЛЇЃ.h
"

51 
	#BEV_SUSPEND_WM
 0x01

	)

53 
	#BEV_SUSPEND_BW
 0x02

	)

55 
	#BEV_SUSPEND_BW_GROUP
 0x04

	)

58 
	#BEV_SUSPEND_LOOKUP
 0x08

	)

60 
	sbufгїvТt_њЛ_limЩ_group
 {

62 
TAILQ_HEAD
(
Њim_group_membФ_li°
, 
bufгїvТt_іiv©e
и
membФs
;

64 
ev_tokТ_buckС
 
њЛ_limЩ
;

65 
ev_tokТ_buckС_cfg
 
њЛ_limЩ_cfg
;

69 
їad_su•Тded
 : 1;

72 
wrЩe_su•Тded
 : 1;

76 
≥ndЪg_unsu•Тd_їad
 : 1;

80 
≥ndЪg_unsu•Тd_wrЩe
 : 1;

83 
n_membФs
;

87 
ev_uЪt32_t
 
mЪ_shђe
;

90 
evТt
 
ma°Ф_їfЮl_evТt
;

94 *
lock
;

98 
	sbufгїvТt_њЛ_limЩ
 {

104 
TAILQ_ENTRY
(
bufгїvТt_іiv©e
и
√xt_Ъ_group
;

107 
bufгїvТt_њЛ_limЩ_group
 *
group
;

110 
ev_tokТ_buckС
 
limЩ
;

113 
ev_tokТ_buckС_cfg
 *
cfg
;

117 
evТt
 
їfЮl_buckС_evТt
;

122 
	sbufгїvТt_іiv©e
 {

124 
bufгїvТt
 
bev
;

127 
evbufгr_cb_ТМy
 *
їad_w©Фmђks_cb
;

130 
own_lock
 : 1;

134 
їadcb_≥ndЪg
 : 1;

137 
wrЩecb_≥ndЪg
 : 1;

139 
cЏ√щЪg
 : 1;

142 
cЏ√щiЏ_їfu£d
 : 1;

145 
evТtcb_≥ndЪg
;

150 
їad_su•Тded
;

155 
wrЩe_su•Тded
;

159 
ФЇo_≥ndЪg
;

162 
deгЉed_cb
 
deгЉed
;

165 
bufгїvТt_ЁtiЏs
 
ЁtiЏs
;

168 
їfъt
;

172 *
lock
;

175 
bufгїvТt_њЛ_limЩ
 *
њЛ_limЩЪg
;

179 
	ebufгїvТt_щЊ_Ё
 {

180 
BEV_CTRL_SET_FD
,

181 
BEV_CTRL_GET_FD
,

182 
BEV_CTRL_GET_UNDERLYING


186 
	ubufгїvТt_щЊ_d©a
 {

187 *
±r
;

188 
evutЮ_sockС_t
 
fd
;

195 
	sbufгїvТt_Ёs
 {

197 cЏ° *
ty≥
;

208 
off_t
 
mem_off£t
;

214 (*
ТabЋ
)(
bufгїvТt
 *, );

220 (*
diІbЋ
)(
bufгїvТt
 *, );

225 (*
de°ruщ
)(
bufгїvТt
 *);

228 (*
adj_timeouts
)(
bufгїvТt
 *);

231 (*
жush
)(
bufгїvТt
 *, , 
bufгїvТt_жush_mode
);

234 (*
щЊ
)(
bufгїvТt
 *, 
bufгїvТt_щЊ_Ё
, 
bufгїvТt_щЊ_d©a
 *);

238 cЏ° 
bufгїvТt_Ёs
 
bufгїvТt_Ёs_sockС
;

239 cЏ° 
bufгїvТt_Ёs
 
bufгїvТt_Ёs_fЮЛr
;

240 cЏ° 
bufгїvТt_Ёs
 
bufгїvТt_Ёs_ЈЬ
;

242 
	#BEV_IS_SOCKET
(
bevp
и((bevp)->
be_Ёs
 =р&
bufгїvТt_Ёs_sockС
)

	)

243 
	#BEV_IS_FILTER
(
bevp
и((bevp)->
be_Ёs
 =р&
bufгїvТt_Ёs_fЮЛr
)

	)

244 
	#BEV_IS_PAIR
(
bevp
и((bevp)->
be_Ёs
 =р&
bufгїvТt_Ёs_ЈЬ
)

	)

246 #ifdeа
WIN32


247 cЏ° 
bufгїvТt_Ёs
 
bufгїvТt_Ёs_async
;

248 
	#BEV_IS_ASYNC
(
bevp
и((bevp)->
be_Ёs
 =р&
bufгїvТt_Ёs_async
)

	)

250 
	#BEV_IS_ASYNC
(
bevp
и0

	)

254 
bufгїvТt_ЪЩ_commЏ
(
bufгїvТt_іiv©e
 *, 
evТt_ba£
 *, cЏ° 
bufгїvТt_Ёs
 *, 
bufгїvТt_ЁtiЏs
 
ЁtiЏs
);

258 
bufгїvТt_su•Тd_їad
(
bufгїvТt
 *
buгv
, 
wh©
);

261 
bufгїvТt_unsu•Тd_їad
(
bufгїvТt
 *
buгv
, 
wh©
);

265 
bufгїvТt_su•Тd_wrЩe
(
bufгїvТt
 *
buгv
, 
wh©
);

268 
bufгїvТt_unsu•Тd_wrЩe
(
bufгїvТt
 *
buгv
, 
wh©
);

270 
	#bufгїvТt_wm_su•Тd_їad
(
b
) \

271 
	`bufгїvТt_su•Тd_їad
((
b
), 
BEV_SUSPEND_WM
)

	)

272 
	#bufгїvТt_wm_unsu•Тd_їad
(
b
) \

273 
	`bufгїvТt_unsu•Тd_їad
((
b
), 
BEV_SUSPEND_WM
)

	)

277 
bufгїvТt_ТabЋ_lockЪg
(
bufгїvТt
 *
buгv
, *
lock
);

279 
bufгїvТt_Ъьef
(
bufгїvТt
 *
buгv
);

282 
_bufгїvТt_Ъьef_™d_lock
(
bufгїvТt
 *
buгv
);

284 
bufгїvТt_deьef
(
bufгїvТt
 *
buгv
);

287 
_bufгїvТt_deьef_™d_u∆ock
(
bufгїvТt
 *
buгv
);

291 
_bufгїvТt_run_їadcb
(
bufгїvТt
 *
buгv
);

294 
_bufгїvТt_run_wrЩecb
(
bufгїvТt
 *
buгv
);

297 
_bufгїvТt_run_evТtcb
(
bufгїvТt
 *
buгv
, 
wh©
);

301 
_bufгїvТt_add_evТt
(
evТt
 *
ev
, cЏ° 
timevЃ
 *
tv
);

310 
_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(
bufгїvТt
 *
bev
);

313 
_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bufгїvТt
 *
bev
);

318 
_bufгїvТt_gТФic_adj_timeouts
(
bufгїvТt
 *
bev
);

322 
	#BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
) \

324 iа(
	`evutЮ_timФis£t
(&(
bev
)->
timeout_їad
)) \

325 
	`evТt_add
(&(
bev
)->
ev_їad
, &(bev)->
timeout_їad
); \

326 } 0)

	)

329 
	#BEV_RESET_GENERIC_WRITE_TIMEOUT
(
bev
) \

331 iа(
	`evutЮ_timФis£t
(&(
bev
)->
timeout_wrЩe
)) \

332 
	`evТt_add
(&(
bev
)->
ev_wrЩe
, &(bev)->
timeout_wrЩe
); \

333 } 0)

	)

334 
	#BEV_DEL_GENERIC_READ_TIMEOUT
(
bev
) \

335 
	`evТt_dЦ
(&(
bev
)->
ev_їad
)

	)

336 
	#BEV_DEL_GENERIC_WRITE_TIMEOUT
(
bev
) \

337 
	`evТt_dЦ
(&(
bev
)->
ev_wrЩe
)

	)

342 
	#BEV_UPCAST
(
b
и
	`EVUTIL_UPCAST
((b), 
bufгїvТt_іiv©e
, 
bev
)

	)

345 
	#BEV_LOCK
(
b
) do { \

346 
bufгїvТt_іiv©e
 *
lockЪg
 = 
	`BEV_UPCAST
(
b
); \

347 iа(
lockЪg
->
lock
) \

348 
	`EVLOCK_LOCK
(
lockЪg
->
lock
, 0); \

349 } 0)

	)

352 
	#BEV_UNLOCK
(
b
) do { \

353 
bufгїvТt_іiv©e
 *
lockЪg
 = 
	`BEV_UPCAST
(
b
); \

354 iа(
lockЪg
->
lock
) \

355 
	`EVLOCK_UNLOCK
(
lockЪg
->
lock
, 0); \

356 } 0)

	)

360 
_bufгїvТt_deьemТt_wrЩe_buckСs
(
bufгїvТt_іiv©e
 *
bev
,

361 
byЛs
);

362 
_bufгїvТt_deьemТt_їad_buckСs
(
bufгїvТt_іiv©e
 *
bev
,

363 
byЛs
);

364 
_bufгїvТt_gС_їad_max
(
bufгїvТt_іiv©e
 *
bev
);

365 
_bufгїvТt_gС_wrЩe_max
(
bufгїvТt_іiv©e
 *
bev
);

367 #ifdeа
__эlu•lus


	@bufferevent.c

28 
	~<sys/ty≥s.h
>

30 
	~"evТt-cЏfig.h
"

32 #ifdeа
_EVENT_HAVE_SYS_TIME_H


33 
	~<sys/time.h
>

36 
	~<ФЇo.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rЪg.h
>

40 #ifdeа
_EVENT_HAVE_STDARG_H


41 
	~<°dђg.h
>

44 #ifdeа
WIN32


45 
	~<wЪsock2.h
>

47 
	~<ФЇo.h
>

49 
	~"evТt2/utЮ.h
"

50 
	~"evТt2/bufгr.h
"

51 
	~"evТt2/bufгr_comЈt.h
"

52 
	~"evТt2/bufгїvТt.h
"

53 
	~"evТt2/bufгїvТt_°ruщ.h
"

54 
	~"evТt2/bufгїvТt_comЈt.h
"

55 
	~"evТt2/evТt.h
"

56 
	~"log-ЪЛЇЃ.h
"

57 
	~"mm-ЪЛЇЃ.h
"

58 
	~"bufгїvТt-ЪЛЇЃ.h
"

59 
	~"evbufгr-ЪЛЇЃ.h
"

60 
	~"utЮ-ЪЛЇЃ.h
"

63 
	$bufгїvТt_su•Тd_їad
(
bufгїvТt
 *
buгv
, 
wh©
)

65 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

66 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

67 
	`BEV_LOCK
(
buгv
);

68 iа(!
buгv_іiv©e
->
їad_su•Тded
)

69 
buгv
->
be_Ёs
->
	`diІbЋ
(buгv, 
EV_READ
);

70 
buгv_іiv©e
->
їad_su•Тded
 |р
wh©
;

71 
	`BEV_UNLOCK
(
buгv
);

72 
	}
}

75 
	$bufгїvТt_unsu•Тd_їad
(
bufгїvТt
 *
buгv
, 
wh©
)

77 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

78 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

79 
	`BEV_LOCK
(
buгv
);

80 
buгv_іiv©e
->
їad_su•Тded
 &р~
wh©
;

81 iа(!
buгv_іiv©e
->
їad_su•Тded
)

82 
buгv
->
be_Ёs
->
	`ТabЋ
(buгv, 
EV_READ
);

83 
	`BEV_UNLOCK
(
buгv
);

84 
	}
}

87 
	$bufгїvТt_su•Тd_wrЩe
(
bufгїvТt
 *
buгv
, 
wh©
)

89 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

90 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

91 
	`BEV_LOCK
(
buгv
);

92 iа(!
buгv_іiv©e
->
wrЩe_su•Тded
)

93 
buгv
->
be_Ёs
->
	`diІbЋ
(buгv, 
EV_WRITE
);

94 
buгv_іiv©e
->
wrЩe_su•Тded
 |р
wh©
;

95 
	`BEV_UNLOCK
(
buгv
);

96 
	}
}

99 
	$bufгїvТt_unsu•Тd_wrЩe
(
bufгїvТt
 *
buгv
, 
wh©
)

101 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

102 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

103 
	`BEV_LOCK
(
buгv
);

104 
buгv_іiv©e
->
wrЩe_su•Тded
 &р~
wh©
;

105 iа(!
buгv_іiv©e
->
wrЩe_su•Тded
)

106 
buгv
->
be_Ёs
->
	`ТabЋ
(buгv, 
EV_WRITE
);

107 
	`BEV_UNLOCK
(
buгv
);

108 
	}
}

114 
	$bufгїvТt_Ъbuf_wm_cb
(
evbufгr
 *
buf
,

115 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
,

116 *
ђg
)

118 
bufгїvТt
 *
buгv
 = 
ђg
;

119 
size_t
 
size
;

121 
size
 = 
	`evbufгr_gС_Ћngth
(
buf
);

123 iа(
size
 >р
buгv
->
wm_їad
.
high
)

124 
	`bufгїvТt_wm_su•Тd_їad
(
buгv
);

126 
	`bufгїvТt_wm_unsu•Тd_їad
(
buгv
);

127 
	}
}

130 
	$bufгїvТt_run_deгЉed_€ќbacks
(
deгЉed_cb
 *
_
, *
ђg
)

132 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 = 
ђg
;

133 
bufгїvТt
 *
buгv
 = &
buгv_іiv©e
->
bev
;

137 
	`BEV_LOCK
(
buгv
);

138 iа((
buгv_іiv©e
->
evТtcb_≥ndЪg
 & 
BEV_EVENT_CONNECTED
) &&

139 
buгv
->
Фr№cb
) {

142 
buгv_іiv©e
->
evТtcb_≥ndЪg
 &р~
BEV_EVENT_CONNECTED
;

143 
buгv
->
	`Фr№cb
(buгv, 
BEV_EVENT_CONNECTED
, buгv->
cbђg
);

145 iа(
buгv_іiv©e
->
їadcb_≥ndЪg
 && 
buгv
->
їadcb
) {

146 
buгv_іiv©e
->
їadcb_≥ndЪg
 = 0;

147 
buгv
->
	`їadcb
(buгv, buгv->
cbђg
);

149 iа(
buгv_іiv©e
->
wrЩecb_≥ndЪg
 && 
buгv
->
wrЩecb
) {

150 
buгv_іiv©e
->
wrЩecb_≥ndЪg
 = 0;

151 
buгv
->
	`wrЩecb
(buгv, buгv->
cbђg
);

153 iа(
buгv_іiv©e
->
evТtcb_≥ndЪg
 && 
buгv
->
Фr№cb
) {

154 
wh©
 = 
buгv_іiv©e
->
evТtcb_≥ndЪg
;

155 
Фr
 = 
buгv_іiv©e
->
ФЇo_≥ndЪg
;

156 
buгv_іiv©e
->
evТtcb_≥ndЪg
 = 0;

157 
buгv_іiv©e
->
ФЇo_≥ndЪg
 = 0;

158 
	`EVUTIL_SET_SOCKET_ERROR
(
Фr
);

159 
buгv
->
	`Фr№cb
(buгv, 
wh©
, buгv->
cbђg
);

161 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

162 
	}
}

164 
	#SCHEDULE_DEFERRED
(
bevp
) \

166 
	`evТt_deгЉed_cb_scheduЋ
( \

167 
	`evТt_ba£_gС_deгЉed_cb_queue
((
bevp
)->
bev
.
ev_ba£
), \

168 &(
bevp
)->
deгЉed
); \

169 } 0);

	)

173 
	$_bufгїvТt_run_їadcb
(
bufгїvТt
 *
buгv
)

176 
bufгїvТt_іiv©e
 *
p
 =

177 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

178 iа(
buгv
->
їadcb
 =р
NULL
)

180 iа(
p
->
ЁtiЏs
 & 
BEV_OPT_DEFER_CALLBACKS
) {

181 
p
->
їadcb_≥ndЪg
 = 1;

182 iа(!
p
->
deгЉed
.
queued
) {

183 
	`bufгїvТt_Ъьef
(
buгv
);

184 
	`SCHEDULE_DEFERRED
(
p
);

187 
buгv
->
	`їadcb
(buгv, buгv->
cbђg
);

189 
	}
}

192 
	$_bufгїvТt_run_wrЩecb
(
bufгїvТt
 *
buгv
)

195 
bufгїvТt_іiv©e
 *
p
 =

196 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

197 iа(
buгv
->
wrЩecb
 =р
NULL
)

199 iа(
p
->
ЁtiЏs
 & 
BEV_OPT_DEFER_CALLBACKS
) {

200 
p
->
wrЩecb_≥ndЪg
 = 1;

201 iа(!
p
->
deгЉed
.
queued
) {

202 
	`bufгїvТt_Ъьef
(
buгv
);

203 
	`SCHEDULE_DEFERRED
(
p
);

206 
buгv
->
	`wrЩecb
(buгv, buгv->
cbђg
);

208 
	}
}

211 
	$_bufгїvТt_run_evТtcb
(
bufгїvТt
 *
buгv
, 
wh©
)

214 
bufгїvТt_іiv©e
 *
p
 =

215 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

216 iа(
buгv
->
Фr№cb
 =р
NULL
)

218 iа(
p
->
ЁtiЏs
 & 
BEV_OPT_DEFER_CALLBACKS
) {

219 
p
->
evТtcb_≥ndЪg
 |р
wh©
;

220 
p
->
ФЇo_≥ndЪg
 = 
	`EVUTIL_SOCKET_ERROR
();

221 iа(!
p
->
deгЉed
.
queued
) {

222 
	`bufгїvТt_Ъьef
(
buгv
);

223 
	`SCHEDULE_DEFERRED
(
p
);

226 
buгv
->
	`Фr№cb
(buгv, 
wh©
, buгv->
cbђg
);

228 
	}
}

231 
	$bufгїvТt_ЪЩ_commЏ
(
bufгїvТt_іiv©e
 *
buгv_іiv©e
,

232 
evТt_ba£
 *
ba£
,

233 cЏ° 
bufгїvТt_Ёs
 *
Ёs
,

234 
bufгїvТt_ЁtiЏs
 
ЁtiЏs
)

236 
bufгїvТt
 *
buгv
 = &
buгv_іiv©e
->
bev
;

238 iа(!
buгv
->
Ъput
) {

239 iа((
buгv
->
Ъput
 = 
	`evbufгr_√w
()и=р
NULL
)

243 iа(!
buгv
->
ouНut
) {

244 iа((
buгv
->
ouНut
 = 
	`evbufгr_√w
()и=р
NULL
) {

245 
	`evbufгr_дУ
(
buгv
->
Ъput
);

250 
buгv_іiv©e
->
їfъt
 = 1;

251 
buгv
->
ev_ba£
 = 
ba£
;

254 
	`evutЮ_timФюЧr
(&
buгv
->
timeout_їad
);

255 
	`evutЮ_timФюЧr
(&
buгv
->
timeout_wrЩe
);

257 
buгv
->
be_Ёs
 = 
Ёs
;

264 
buгv
->
ТabЋd
 = 
EV_WRITE
;

266 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


267 iа(
ЁtiЏs
 & 
BEV_OPT_THREADSAFE
) {

268 iа(
	`bufгїvТt_ТabЋ_lockЪg
(
buгv
, 
NULL
) < 0) {

274 iа(
ЁtiЏs
 & 
BEV_OPT_DEFER_CALLBACKS
) {

275 
	`evТt_deгЉed_cb_ЪЩ
(&
buгv_іiv©e
->
deгЉed
,

276 
bufгїvТt_run_deгЉed_€ќbacks
,

277 
buгv_іiv©e
);

280 
buгv_іiv©e
->
ЁtiЏs
 = options;

282 
	`evbufгr_£t_ЈїЅ
(
buгv
->
Ъput
, bufev);

283 
	`evbufгr_£t_ЈїЅ
(
buгv
->
ouНut
, bufev);

286 
	}
}

289 
	$bufгїvТt_£tcb
(
bufгїvТt
 *
buгv
,

290 
bufгїvТt_d©a_cb
 
їadcb
, bufгїvТt_d©a_cb 
wrЩecb
,

291 
bufгїvТt_evТt_cb
 
evТtcb
, *
cbђg
)

293 
	`BEV_LOCK
(
buгv
);

295 
buгv
->
їadcb
 =Дeadcb;

296 
buгv
->
wrЩecb
 = writecb;

297 
buгv
->
Фr№cb
 = 
evТtcb
;

299 
buгv
->
cbђg
 = cbarg;

300 
	`BEV_UNLOCK
(
buгv
);

301 
	}
}

303 
evbufгr
 *

304 
	$bufгїvТt_gС_Ъput
(
bufгїvТt
 *
buгv
)

306  
buгv
->
Ъput
;

307 
	}
}

309 
evbufгr
 *

310 
	$bufгїvТt_gС_ouНut
(
bufгїvТt
 *
buгv
)

312  
buгv
->
ouНut
;

313 
	}
}

316 
	$bufгїvТt_wrЩe
(
bufгїvТt
 *
buгv
, cЏ° *
d©a
, 
size_t
 
size
)

318 iа(
	`evbufгr_add
(
buгv
->
ouНut
, 
d©a
, 
size
) == -1)

322 
	}
}

325 
	$bufгїvТt_wrЩe_bufгr
(
bufгїvТt
 *
buгv
, 
evbufгr
 *
buf
)

327 iа(
	`evbufгr_add_bufгr
(
buгv
->
ouНut
, 
buf
) == -1)

331 
	}
}

333 
size_t


334 
	$bufгїvТt_їad
(
bufгїvТt
 *
buгv
, *
d©a
, 
size_t
 
size
)

336  (
	`evbufгr_їmove
(
buгv
->
Ъput
, 
d©a
, 
size
));

337 
	}
}

340 
	$bufгїvТt_їad_bufгr
(
bufгїvТt
 *
buгv
, 
evbufгr
 *
buf
)

342  (
	`evbufгr_add_bufгr
(
buf
, 
buгv
->
Ъput
));

343 
	}
}

346 
	$bufгїvТt_ТabЋ
(
bufгїvТt
 *
buгv
, 
evТt
)

348 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

349 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

350 
imґ_evТts
 = 
evТt
;

351 
r
 = 0;

353 
	`_bufгїvТt_Ъьef_™d_lock
(
buгv
);

354 iа(
buгv_іiv©e
->
їad_su•Тded
)

355 
imґ_evТts
 &р~
EV_READ
;

356 iа(
buгv_іiv©e
->
wrЩe_su•Тded
)

357 
imґ_evТts
 &р~
EV_WRITE
;

359 
buгv
->
ТabЋd
 |р
evТt
;

361 iа(
imґ_evТts
 && 
buгv
->
be_Ёs
->
	`ТabЋ
(bufev, impl_events) < 0)

362 
r
 = -1;

364 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

365  
r
;

366 
	}
}

369 
	$bufгїvТt_£t_timeouts
(
bufгїvТt
 *
buгv
,

370 cЏ° 
timevЃ
 *
tv_їad
,

371 cЏ° 
timevЃ
 *
tv_wrЩe
)

373 
r
 = 0;

374 
	`BEV_LOCK
(
buгv
);

375 iа(
tv_їad
) {

376 
buгv
->
timeout_їad
 = *
tv_їad
;

378 
	`evutЮ_timФюЧr
(&
buгv
->
timeout_їad
);

380 iа(
tv_wrЩe
) {

381 
buгv
->
timeout_wrЩe
 = *
tv_wrЩe
;

383 
	`evutЮ_timФюЧr
(&
buгv
->
timeout_wrЩe
);

386 iа(
buгv
->
be_Ёs
->
adj_timeouts
)

387 
r
 = 
buгv
->
be_Ёs
->
	`adj_timeouts
(bufev);

388 
	`BEV_UNLOCK
(
buгv
);

390  
r
;

391 
	}
}

396 
	$bufгїvТt_£Йimeout
(
bufгїvТt
 *
buгv
,

397 
timeout_їad
, 
timeout_wrЩe
)

399 
timevЃ
 
tv_їad
, 
tv_wrЩe
;

400 
timevЃ
 *
±v_їad
 = 
NULL
, *
±v_wrЩe
 = NULL;

402 
	`mem£t
(&
tv_їad
, 0, (tv_read));

403 
	`mem£t
(&
tv_wrЩe
, 0, (tv_write));

405 iа(
timeout_їad
) {

406 
tv_їad
.
tv_£c
 = 
timeout_їad
;

407 
±v_їad
 = &
tv_їad
;

409 iа(
timeout_wrЩe
) {

410 
tv_wrЩe
.
tv_£c
 = 
timeout_wrЩe
;

411 
±v_wrЩe
 = &
tv_wrЩe
;

414 
	`bufгїvТt_£t_timeouts
(
buгv
, 
±v_їad
, 
±v_wrЩe
);

415 
	}
}

419 
	$bufгїvТt_diІbЋ
(
bufгїvТt
 *
buгv
, 
evТt
)

421 
r
 = 0;

423 
	`BEV_LOCK
(
buгv
);

424 
buгv
->
ТabЋd
 &р~
evТt
;

426 iа(
buгv
->
be_Ёs
->
	`diІbЋ
(buгv, 
evТt
) < 0)

427 
r
 = -1;

429 
	`BEV_UNLOCK
(
buгv
);

430  
r
;

431 
	}
}

438 
	$bufгїvТt_£tw©Фmђk
(
bufгїvТt
 *
buгv
, 
evТts
,

439 
size_t
 
lowmђk
, size_И
highmђk
)

441 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

442 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

444 
	`BEV_LOCK
(
buгv
);

445 iа(
evТts
 & 
EV_WRITE
) {

446 
buгv
->
wm_wrЩe
.
low
 = 
lowmђk
;

447 
buгv
->
wm_wrЩe
.
high
 = 
highmђk
;

450 iа(
evТts
 & 
EV_READ
) {

451 
buгv
->
wm_їad
.
low
 = 
lowmђk
;

452 
buгv
->
wm_їad
.
high
 = 
highmђk
;

454 iа(
highmђk
) {

459 iа(
buгv_іiv©e
->
їad_w©Фmђks_cb
 =р
NULL
) {

460 
buгv_іiv©e
->
їad_w©Фmђks_cb
 =

461 
	`evbufгr_add_cb
(
buгv
->
Ъput
,

462 
bufгїvТt_Ъbuf_wm_cb
,

463 
buгv
);

465 
	`evbufгr_cb_£t_жags
(
buгv
->
Ъput
,

466 
buгv_іiv©e
->
їad_w©Фmђks_cb
,

467 
EVBUFFER_CB_ENABLED
|
EVBUFFER_CB_NODEFER
);

469 iа(
	`evbufгr_gС_Ћngth
(
buгv
->
Ъput
и> 
highmђk
)

470 
	`bufгїvТt_wm_su•Тd_їad
(
buгv
);

471 iа(
	`evbufгr_gС_Ћngth
(
buгv
->
Ъput
и< 
highmђk
)

472 
	`bufгїvТt_wm_unsu•Тd_їad
(
buгv
);

475 iа(
buгv_іiv©e
->
їad_w©Фmђks_cb
)

476 
	`evbufгr_cb_юЧr_жags
(
buгv
->
Ъput
,

477 
buгv_іiv©e
->
їad_w©Фmђks_cb
,

478 
EVBUFFER_CB_ENABLED
);

479 
	`bufгїvТt_wm_unsu•Тd_їad
(
buгv
);

482 
	`BEV_UNLOCK
(
buгv
);

483 
	}
}

486 
	$bufгїvТt_жush
(
bufгїvТt
 *
buгv
,

487 
iўy≥
,

488 
bufгїvТt_жush_mode
 
mode
)

490 
r
 = -1;

491 
	`BEV_LOCK
(
buгv
);

492 iа(
buгv
->
be_Ёs
->
жush
)

493 
r
 = 
buгv
->
be_Ёs
->
	`жush
(buгv, 
iўy≥
, 
mode
);

494 
	`BEV_UNLOCK
(
buгv
);

495  
r
;

496 
	}
}

499 
	$_bufгїvТt_Ъьef_™d_lock
(
bufгїvТt
 *
buгv
)

501 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

502 
	`BEV_UPCAST
(
buгv
);

503 
	`BEV_LOCK
(
buгv
);

504 ++
buгv_іiv©e
->
їfъt
;

505 
	}
}

508 
	$_bufгїvТt_deьef_™d_u∆ock
(
bufгїvТt
 *
buгv
)

510 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

511 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

512 
bufгїvТt
 *
undФlyЪg
;

514 iа(--
buгv_іiv©e
->
їfъt
) {

515 
	`BEV_UNLOCK
(
buгv
);

519 
undФlyЪg
 = 
	`bufгїvТt_gС_undФlyЪg
(
buгv
);

522 iа(
buгv
->
be_Ёs
->
de°ruщ
)

523 
buгv
->
be_Ёs
->
	`de°ruщ
(bufev);

529 
	`evbufгr_дУ
(
buгv
->
Ъput
);

530 
	`evbufгr_дУ
(
buгv
->
ouНut
);

532 iа(
buгv_іiv©e
->
њЛ_limЩЪg
) {

533 iа(
buгv_іiv©e
->
њЛ_limЩЪg
->
group
)

534 
	`bufгїvТt_їmove_дom_њЛ_limЩ_group
(
buгv
);

535 iа(
	`evТt_ЪЩЯlized
(&
buгv_іiv©e
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
))

536 
	`evТt_dЦ
(&
buгv_іiv©e
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
);

537 
	`evТt_debug_u«ssign
(&
buгv_іiv©e
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
);

538 
	`mm_дУ
(
buгv_іiv©e
->
њЛ_limЩЪg
);

539 
buгv_іiv©e
->
њЛ_limЩЪg
 = 
NULL
;

542 
	`evТt_debug_u«ssign
(&
buгv
->
ev_їad
);

543 
	`evТt_debug_u«ssign
(&
buгv
->
ev_wrЩe
);

545 
	`BEV_UNLOCK
(
buгv
);

546 iа(
buгv_іiv©e
->
own_lock
)

547 
	`EVTHREAD_FREE_LOCK
(
buгv_іiv©e
->
lock
,

548 
EVTHREAD_LOCKTYPE_RECURSIVE
);

551 
	`mm_дУ
(
buгv
 - buгv->
be_Ёs
->
mem_off£t
);

559 iа(
undФlyЪg
)

560 
	`bufгїvТt_deьef
(
undФlyЪg
);

561 
	}
}

564 
	$bufгїvТt_deьef
(
bufгїvТt
 *
buгv
)

566 
	`BEV_LOCK
(
buгv
);

567 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

568 
	}
}

571 
	$bufгїvТt_дУ
(
bufгїvТt
 *
buгv
)

573 
	`BEV_LOCK
(
buгv
);

574 
	`bufгїvТt_£tcb
(
buгv
, 
NULL
, NULL, NULL, NULL);

575 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

576 
	}
}

579 
	$bufгїvТt_Ъьef
(
bufгїvТt
 *
buгv
)

581 
bufгїvТt_іiv©e
 *
buгv_іiv©e
 =

582 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

584 
	`BEV_LOCK
(
buгv
);

585 ++
buгv_іiv©e
->
їfъt
;

586 
	`BEV_UNLOCK
(
buгv
);

587 
	}
}

590 
	$bufгїvТt_ТabЋ_lockЪg
(
bufгїvТt
 *
buгv
, *
lock
)

592 #ifdeа
_EVENT_DISABLE_THREAD_SUPPORT


595 
bufгїvТt
 *
undФlyЪg
;

597 iа(
	`BEV_UPCAST
(
buгv
)->
lock
)

599 
undФlyЪg
 = 
	`bufгїvТt_gС_undФlyЪg
(
buгv
);

601 iа(!
lock
 && 
undФlyЪg
 && 
	`BEV_UPCAST
(underlying)->lock) {

602 
lock
 = 
	`BEV_UPCAST
(
undФlyЪg
)->lock;

603 
	`BEV_UPCAST
(
buгv
)->
lock
 =Жock;

604 
	`BEV_UPCAST
(
buгv
)->
own_lock
 = 0;

605 } iа(!
lock
) {

606 
	`EVTHREAD_ALLOC_LOCK
(
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

607 iа(!
lock
)

609 
	`BEV_UPCAST
(
buгv
)->
lock
 =Жock;

610 
	`BEV_UPCAST
(
buгv
)->
own_lock
 = 1;

612 
	`BEV_UPCAST
(
buгv
)->
lock
 =Жock;

613 
	`BEV_UPCAST
(
buгv
)->
own_lock
 = 0;

615 
	`evbufгr_ТabЋ_lockЪg
(
buгv
->
Ъput
, 
lock
);

616 
	`evbufгr_ТabЋ_lockЪg
(
buгv
->
ouНut
, 
lock
);

618 iа(
undФlyЪg
 && !
	`BEV_UPCAST
(undФlyЪg)->
lock
)

619 
	`bufгїvТt_ТabЋ_lockЪg
(
undФlyЪg
, 
lock
);

623 
	}
}

626 
	$bufгїvТt_£tfd
(
bufгїvТt
 *
bev
, 
evutЮ_sockС_t
 
fd
)

628 
bufгїvТt_щЊ_d©a
 
d
;

629 
їs
 = -1;

630 
d
.
fd
 = fd;

631 
	`BEV_LOCK
(
bev
);

632 iа(
bev
->
be_Ёs
->
щЊ
)

633 
їs
 = 
bev
->
be_Ёs
->
	`щЊ
(bev, 
BEV_CTRL_SET_FD
, &
d
);

634 
	`BEV_UNLOCK
(
bev
);

635  
їs
;

636 
	}
}

638 
evutЮ_sockС_t


639 
	$bufгїvТt_gСfd
(
bufгїvТt
 *
bev
)

641 
bufгїvТt_щЊ_d©a
 
d
;

642 
їs
 = -1;

643 
d
.
fd
 = -1;

644 
	`BEV_LOCK
(
bev
);

645 iа(
bev
->
be_Ёs
->
щЊ
)

646 
їs
 = 
bev
->
be_Ёs
->
	`щЊ
(bev, 
BEV_CTRL_GET_FD
, &
d
);

647 
	`BEV_UNLOCK
(
bev
);

648  (
їs
<0и? -1 : 
d
.
fd
;

649 
	}
}

652 
	$bufгїvТt_gС_ТabЋd
(
bufгїvТt
 *
buгv
)

654 
r
;

655 
	`BEV_LOCK
(
buгv
);

656 
r
 = 
buгv
->
ТabЋd
;

657 
	`BEV_UNLOCK
(
buгv
);

658  
r
;

659 
	}
}

661 
bufгїvТt
 *

662 
	$bufгїvТt_gС_undФlyЪg
(
bufгїvТt
 *
bev
)

664 
bufгїvТt_щЊ_d©a
 
d
;

665 
їs
 = -1;

666 
d
.
±r
 = 
NULL
;

667 
	`BEV_LOCK
(
bev
);

668 iа(
bev
->
be_Ёs
->
щЊ
)

669 
їs
 = 
bev
->
be_Ёs
->
	`щЊ
(bev, 
BEV_CTRL_GET_UNDERLYING
, &
d
);

670 
	`BEV_UNLOCK
(
bev
);

671  (
їs
<0и? 
NULL
 : 
d
.
±r
;

672 
	}
}

675 
	$bufгїvТt_gТФic_їad_timeout_cb
(
evutЮ_sockС_t
 
fd
, 
evТt
, *
щx
)

677 
bufгїvТt
 *
bev
 = 
щx
;

678 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

679 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

680 
	`_bufгїvТt_run_evТtcb
(
bev
, 
BEV_EVENT_TIMEOUT
|
BEV_EVENT_READING
);

681 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

682 
	}
}

684 
	$bufгїvТt_gТФic_wrЩe_timeout_cb
(
evutЮ_sockС_t
 
fd
, 
evТt
, *
щx
)

686 
bufгїvТt
 *
bev
 = 
щx
;

687 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

688 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_WRITE
);

689 
	`_bufгїvТt_run_evТtcb
(
bev
, 
BEV_EVENT_TIMEOUT
|
BEV_EVENT_WRITING
);

690 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

691 
	}
}

694 
	$_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(
bufгїvТt
 *
bev
)

696 
	`evtimФ_assign
(&
bev
->
ev_їad
, bev->
ev_ba£
,

697 
bufгїvТt_gТФic_їad_timeout_cb
, 
bev
);

698 
	`evtimФ_assign
(&
bev
->
ev_wrЩe
, bev->
ev_ba£
,

699 
bufгїvТt_gТФic_wrЩe_timeout_cb
, 
bev
);

700 
	}
}

703 
	$_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bufгїvТt
 *
bev
)

705 
r1
,
r2
;

706 
r1
 = 
	`evТt_dЦ
(&
bev
->
ev_їad
);

707 
r2
 = 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

708 iа(
r2
<0 ||Д2<0)

711 
	}
}

714 
	$_bufгїvТt_gТФic_adj_timeouts
(
bufгїvТt
 *
bev
)

716 cЏ° 
ТabЋd
 = 
bev
->enabled;

717 
bufгїvТt_іiv©e
 *
bev_p
 =

718 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_іiv©e
, bev);

719 
r1
=0, 
r2
=0;

720 iа((
ТabЋd
 & 
EV_READ
и&& !
bev_p
->
їad_su•Тded
 &&

721 
	`evutЮ_timФis£t
(&
bev
->
timeout_їad
))

722 
r1
 = 
	`evТt_add
(&
bev
->
ev_їad
, &bev->
timeout_їad
);

724 
r1
 = 
	`evТt_dЦ
(&
bev
->
ev_їad
);

726 iа((
ТabЋd
 & 
EV_WRITE
и&& !
bev_p
->
wrЩe_su•Тded
 &&

727 
	`evutЮ_timФis£t
(&
bev
->
timeout_wrЩe
) &&

728 
	`evbufгr_gС_Ћngth
(
bev
->
ouНut
))

729 
r2
 = 
	`evТt_add
(&
bev
->
ev_wrЩe
, &bev->
timeout_wrЩe
);

731 
r2
 = 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

732 iа(
r1
 < 0 || 
r2
 < 0)

735 
	}
}

738 
	$_bufгїvТt_add_evТt
(
evТt
 *
ev
, cЏ° 
timevЃ
 *
tv
)

740 iа(
tv
->
tv_£c
 =р0 &&Бv->
tv_u£c
 == 0)

741  
	`evТt_add
(
ev
, 
NULL
);

743  
	`evТt_add
(
ev
, 
tv
);

744 
	}
}

	@bufferevent_async.c

29 
	~"evТt-cЏfig.h
"

31 #ifdeа
_EVENT_HAVE_SYS_TIME_H


32 
	~<sys/time.h
>

35 
	~<ФЇo.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rЪg.h
>

39 #ifdeа
_EVENT_HAVE_STDARG_H


40 
	~<°dђg.h
>

42 #ifdeа
_EVENT_HAVE_UNISTD_H


43 
	~<uni°d.h
>

46 #ifdeа
WIN32


47 
	~<wЪsock2.h
>

48 
	~<ws2tэЭ.h
>

51 
	~"evТt2/utЮ.h
"

52 
	~"evТt2/bufгїvТt.h
"

53 
	~"evТt2/bufгr.h
"

54 
	~"evТt2/bufгїvТt_°ruщ.h
"

55 
	~"evТt2/evТt.h
"

56 
	~"log-ЪЛЇЃ.h
"

57 
	~"mm-ЪЛЇЃ.h
"

58 
	~"bufгїvТt-ЪЛЇЃ.h
"

59 
	~"utЮ-ЪЛЇЃ.h
"

60 
	~"ioэ-ЪЛЇЃ.h
"

63 
be_async_ТabЋ
(
bufгїvТt
 *, );

64 
be_async_diІbЋ
(
bufгїvТt
 *, );

65 
be_async_de°ruщ
(
bufгїvТt
 *);

66 
be_async_жush
(
bufгїvТt
 *, , 
bufгїvТt_жush_mode
);

67 
be_async_щЊ
(
bufгїvТt
 *, 
bufгїvТt_щЊ_Ё
, 
bufгїvТt_щЊ_d©a
 *);

69 cЏ° 
bufгїvТt_Ёs
 
	gbufгїvТt_Ёs_async
 = {

72 
be_async_ТabЋ
,

73 
be_async_diІbЋ
,

74 
be_async_de°ruщ
,

75 
_bufгїvТt_gТФic_adj_timeouts
,

76 
be_async_жush
,

77 
be_async_щЊ
,

80 
	sbufгїvТt_async
 {

81 
bufгїvТt_іiv©e
 
	mbev
;

82 
evТt_ovФѕµed
 
	mcЏ√щ_ovФѕµed
;

83 
evТt_ovФѕµed
 
	mїad_ovФѕµed
;

84 
evТt_ovФѕµed
 
	mwrЩe_ovФѕµed
;

85 
	mїad_Ъ_іogїss
 : 1;

86 
	mwrЩe_Ъ_іogїss
 : 1;

87 
	mok
 : 1;

90 
ЪlЪe
 
bufгїvТt_async
 *

91 
	$up€°
(
bufгїvТt
 *
bev
)

93 
bufгїvТt_async
 *
bev_a
;

94 iа(
bev
->
be_Ёs
 !р&
bufгїvТt_Ёs_async
)

95  
NULL
;

96 
bev_a
 = 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_async
, bev.bev);

97  
bev_a
;

98 
	}
}

100 
ЪlЪe
 
bufгїvТt_async
 *

101 
	$up€°_cЏ√щ
(
evТt_ovФѕµed
 *
eo
)

103 
bufгїvТt_async
 *
bev_a
;

104 
bev_a
 = 
	`EVUTIL_UPCAST
(
eo
, 
bufгїvТt_async
, 
cЏ√щ_ovФѕµed
);

105 
	`EVUTIL_ASSERT
(
	`BEV_IS_ASYNC
(&
bev_a
->
bev
.bev));

106  
bev_a
;

107 
	}
}

109 
ЪlЪe
 
bufгїvТt_async
 *

110 
	$up€°_їad
(
evТt_ovФѕµed
 *
eo
)

112 
bufгїvТt_async
 *
bev_a
;

113 
bev_a
 = 
	`EVUTIL_UPCAST
(
eo
, 
bufгїvТt_async
, 
їad_ovФѕµed
);

114 
	`EVUTIL_ASSERT
(
	`BEV_IS_ASYNC
(&
bev_a
->
bev
.bev));

115  
bev_a
;

116 
	}
}

118 
ЪlЪe
 
bufгїvТt_async
 *

119 
	$up€°_wrЩe
(
evТt_ovФѕµed
 *
eo
)

121 
bufгїvТt_async
 *
bev_a
;

122 
bev_a
 = 
	`EVUTIL_UPCAST
(
eo
, 
bufгїvТt_async
, 
wrЩe_ovФѕµed
);

123 
	`EVUTIL_ASSERT
(
	`BEV_IS_ASYNC
(&
bev_a
->
bev
.bev));

124  
bev_a
;

125 
	}
}

128 
	$bev_async_cЏsidФ_wrЩЪg
(
bufгїvТt_async
 *
b
)

130 
size_t
 
©_mo°
;

131 
limЩ
;

134 iа(!
b
->
ok
 || b->
wrЩe_Ъ_іogїss
 || !(b->
bev
.bev.
ТabЋd
&
EV_WRITE
))

137 iа(!
	`evbufгr_gС_Ћngth
(
b
->
bev
.bev.
ouНut
))

140 
©_mo°
 = 
	`evbufгr_gС_Ћngth
(
b
->
bev
.bev.
ouНut
);

143 
limЩ
 = 
	`_bufгїvТt_gС_wrЩe_max
(&
b
->
bev
);

144 iа(
©_mo°
 >р
limЩ
)

145 
©_mo°
 = 
limЩ
;

147 iа(
b
->
bev
.
wrЩe_su•Тded
)

151 iа(
	`evbufгr_ѕunch_wrЩe
(
b
->
bev
.bev.
ouНut
, 
©_mo°
,

152 &
b
->
wrЩe_ovФѕµed
)) {

153 
	`EVUTIL_ASSERT
(0);

155 
b
->
wrЩe_Ъ_іogїss
 = 1;

157 
	}
}

160 
	$bev_async_cЏsidФ_їadЪg
(
bufгїvТt_async
 *
b
)

162 
size_t
 
cur_size
;

163 
size_t
 
їad_high
;

164 
size_t
 
©_mo°
;

165 
limЩ
;

168 iа(!
b
->
ok
 || b->
їad_Ъ_іogїss
 || !(b->
bev
.bev.
ТabЋd
&
EV_READ
))

172 
cur_size
 = 
	`evbufгr_gС_Ћngth
(
b
->
bev
.bev.
Ъput
);

173 
їad_high
 = 
b
->
bev
.bev.
wm_їad
.
high
;

174 iа(
їad_high
) {

175 iа(
cur_size
 >р
їad_high
)

177 
©_mo°
 = 
їad_high
 - 
cur_size
;

179 
©_mo°
 = 16384;

183 
limЩ
 = 
	`_bufгїvТt_gС_їad_max
(&
b
->
bev
);

184 iа(
©_mo°
 >р
limЩ
)

185 
©_mo°
 = 
limЩ
;

187 iа(
b
->
bev
.
їad_su•Тded
)

190 iа(
	`evbufгr_ѕunch_їad
(
b
->
bev
.bev.
Ъput
, 
©_mo°
,

191 &
b
->
їad_ovФѕµed
)) {

192 
	`EVUTIL_ASSERT
(0);

194 
b
->
їad_Ъ_іogїss
 = 1;

196 
	}
}

199 
	$be_async_outbuf_€ќback
(
evbufгr
 *
buf
,

200 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
,

201 *
ђg
)

203 
bufгїvТt
 *
bev
 = 
ђg
;

204 
bufгїvТt_async
 *
bev_async
 = 
	`up€°
(
bev
);

209 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

211 iа(
cbЪfo
->
n_added
)

212 
	`bev_async_cЏsidФ_wrЩЪg
(
bev_async
);

214 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

215 
	}
}

218 
	$be_async_Ъbuf_€ќback
(
evbufгr
 *
buf
,

219 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
,

220 *
ђg
)

222 
bufгїvТt
 *
bev
 = 
ђg
;

223 
bufгїvТt_async
 *
bev_async
 = 
	`up€°
(
bev
);

228 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

230 iа(
cbЪfo
->
n_dЦСed
)

231 
	`bev_async_cЏsidФ_їadЪg
(
bev_async
);

233 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

234 
	}
}

237 
	$be_async_ТabЋ
(
bufгїvТt
 *
buf
, 
wh©
)

239 
bufгїvТt_async
 *
bev_async
 = 
	`up€°
(
buf
);

241 iа(!
bev_async
->
ok
)

245 iа(
wh©
 & 
EV_READ
)

246 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
buf
);

247 iа(
wh©
 & 
EV_WRITE
)

248 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
buf
);

253 iа(
wh©
 & 
EV_READ
)

254 
	`bev_async_cЏsidФ_їadЪg
(
bev_async
);

255 iа(
wh©
 & 
EV_WRITE
)

256 
	`bev_async_cЏsidФ_wrЩЪg
(
bev_async
);

258 
	}
}

261 
	$be_async_diІbЋ
(
bufгїvТt
 *
bev
, 
wh©
)

267 iа(
wh©
 & 
EV_READ
)

268 
	`BEV_DEL_GENERIC_READ_TIMEOUT
(
bev
);

269 iа(
wh©
 & 
EV_WRITE
)

270 
	`BEV_DEL_GENERIC_WRITE_TIMEOUT
(
bev
);

273 
	}
}

276 
	$be_async_de°ruщ
(
bufгїvТt
 *
bev
)

278 
bufгїvТt_іiv©e
 *
bev_p
 = 
	`BEV_UPCAST
(
bev
);

279 
evutЮ_sockС_t
 
fd
;

281 
	`EVUTIL_ASSERT
(!
	`up€°
(
bev
)->
wrЩe_Ъ_іogїss
 && !up€°(bev)->
їad_Ъ_іogїss
);

284 
fd
 = 
	`_evbufгr_ovФѕµed_gС_fd
(
bev
->
Ъput
);

286 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

287 iа(
bev_p
->
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
)

288 
	`EVUTIL_CLOSESOCKET
(
fd
);

289 
	`_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bev
);

290 
	}
}

293 
	$be_async_жush
(
bufгїvТt
 *
bev
, 
wh©
,

294 
bufгїvТt_жush_mode
 
mode
)

297 
	}
}

300 
	$cЏ√щ_comґСe
(
evТt_ovФѕµed
 *
eo
, 
ev_uЪНМ_t
 
key
,

301 
ev_ssize_t
 
nbyЛs
, 
ok
)

303 
bufгїvТt_async
 *
bev_a
 = 
	`up€°_cЏ√щ
(
eo
);

304 
bufгїvТt
 *
bev
 = &
bev_a
->bev.bev;

306 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

308 
	`EVUTIL_ASSERT
(
bev_a
->
bev
.
cЏ√щЪg
);

309 
bev_a
->
bev
.
cЏ√щЪg
 = 0;

311 
	`bufгїvТt_async_£t_cЏ√щed
(
bev
);

312 
	`_bufгїvТt_run_evТtcb
(
bev
,

313 
ok
? 
BEV_EVENT_CONNECTED
 : 
BEV_EVENT_ERROR
);

315 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

316 
	}
}

319 
	$їad_comґСe
(
evТt_ovФѕµed
 *
eo
, 
ev_uЪНМ_t
 
key
,

320 
ev_ssize_t
 
nbyЛs
, 
ok
)

322 
bufгїvТt_async
 *
bev_a
 = 
	`up€°_їad
(
eo
);

323 
bufгїvТt
 *
bev
 = &
bev_a
->bev.bev;

324 
wh©
 = 
BEV_EVENT_READING
;

326 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

327 
	`EVUTIL_ASSERT
(
bev_a
->
ok
 && bev_a->
їad_Ъ_іogїss
);

329 
	`evbufгr_commЩ_їad
(
bev
->
Ъput
, 
nbyЛs
);

330 
bev_a
->
їad_Ъ_іogїss
 = 0;

332 iа(
ok
 && 
nbyЛs
) {

333 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
);

334 
	`_bufгїvТt_deьemТt_їad_buckСs
(&
bev_a
->
bev
, 
nbyЛs
);

335 iа(
	`evbufгr_gС_Ћngth
(
bev
->
Ъput
и>рbev->
wm_їad
.
low
)

336 
	`_bufгїvТt_run_їadcb
(
bev
);

337 
	`bev_async_cЏsidФ_їadЪg
(
bev_a
);

338 } iа(!
ok
) {

339 
wh©
 |р
BEV_EVENT_ERROR
;

340 
bev_a
->
ok
 = 0;

341 
	`_bufгїvТt_run_evТtcb
(
bev
, 
wh©
);

342 } iа(!
nbyЛs
) {

343 
wh©
 |р
BEV_EVENT_EOF
;

344 
bev_a
->
ok
 = 0;

345 
	`_bufгїvТt_run_evТtcb
(
bev
, 
wh©
);

348 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

349 
	}
}

352 
	$wrЩe_comґСe
(
evТt_ovФѕµed
 *
eo
, 
ev_uЪНМ_t
 
key
,

353 
ev_ssize_t
 
nbyЛs
, 
ok
)

355 
bufгїvТt_async
 *
bev_a
 = 
	`up€°_wrЩe
(
eo
);

356 
bufгїvТt
 *
bev
 = &
bev_a
->bev.bev;

357 
wh©
 = 
BEV_EVENT_WRITING
;

359 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

360 
	`EVUTIL_ASSERT
(
bev_a
->
ok
 && bev_a->
wrЩe_Ъ_іogїss
);

362 
	`evbufгr_commЩ_wrЩe
(
bev
->
ouНut
, 
nbyЛs
);

363 
bev_a
->
wrЩe_Ъ_іogїss
 = 0;

365 iа(
ok
 && 
nbyЛs
) {

366 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
bev
);

367 
	`_bufгїvТt_deьemТt_wrЩe_buckСs
(&
bev_a
->
bev
, 
nbyЛs
);

368 iа(
	`evbufгr_gС_Ћngth
(
bev
->
ouНut
и<рbev->
wm_wrЩe
.
low
)

369 
	`_bufгїvТt_run_wrЩecb
(
bev
);

370 
	`bev_async_cЏsidФ_wrЩЪg
(
bev_a
);

371 } iа(!
ok
) {

372 
wh©
 |р
BEV_EVENT_ERROR
;

373 
bev_a
->
ok
 = 0;

374 
	`_bufгїvТt_run_evТtcb
(
bev
, 
wh©
);

375 } iа(!
nbyЛs
) {

376 
wh©
 |р
BEV_EVENT_EOF
;

377 
bev_a
->
ok
 = 0;

378 
	`_bufгїvТt_run_evТtcb
(
bev
, 
wh©
);

381 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

382 
	}
}

384 
bufгїvТt
 *

385 
	$bufгїvТt_async_√w
(
evТt_ba£
 *
ba£
,

386 
evutЮ_sockС_t
 
fd
, 
ЁtiЏs
)

388 
bufгїvТt_async
 *
bev_a
;

389 
bufгїvТt
 *
bev
;

390 
evТt_ioэ_p№t
 *
ioэ
;

392 
ЁtiЏs
 |р
BEV_OPT_THREADSAFE
;

394 iа(!(
ioэ
 = 
	`evТt_ba£_gС_ioэ
(
ba£
)))

395  
NULL
;

397 iа(
fd
 >р0 && 
	`evТt_ioэ_p№t_assocЯЛ
(
ioэ
, fd, 1)<0) {

398 
Фr
 = 
	`GСLa°EЉ№
();

402 iа(
Фr
 !р
ERROR_INVALID_PARAMETER
)

403  
NULL
;

406 iа(!(
bev_a
 = 
	`mm_€ќoc
(1, (
bufгїvТt_async
))))

407  
NULL
;

409 
bev
 = &
bev_a
->bev.bev;

410 iа(!(
bev
->
Ъput
 = 
	`evbufгr_ovФѕµed_√w
(
fd
))) {

411 
	`mm_дУ
(
bev_a
);

412  
NULL
;

414 iа(!(
bev
->
ouНut
 = 
	`evbufгr_ovФѕµed_√w
(
fd
))) {

415 
	`evbufгr_дУ
(
bev
->
Ъput
);

416 
	`mm_дУ
(
bev_a
);

417  
NULL
;

420 iа(
	`bufгїvТt_ЪЩ_commЏ
(&
bev_a
->
bev
, 
ba£
, &
bufгїvТt_Ёs_async
,

421 
ЁtiЏs
)<0)

422 
Фr
;

424 
	`evbufгr_add_cb
(
bev
->
Ъput
, 
be_async_Ъbuf_€ќback
, bev);

425 
	`evbufгr_add_cb
(
bev
->
ouНut
, 
be_async_outbuf_€ќback
, bev);

426 
	`evbufгr_deгr_€ќbacks
(
bev
->
Ъput
, 
ba£
);

427 
	`evbufгr_deгr_€ќbacks
(
bev
->
ouНut
, 
ba£
);

429 
	`evТt_ovФѕµed_ЪЩ
(&
bev_a
->
cЏ√щ_ovФѕµed
, 
cЏ√щ_comґСe
);

430 
	`evТt_ovФѕµed_ЪЩ
(&
bev_a
->
їad_ovФѕµed
, 
їad_comґСe
);

431 
	`evТt_ovФѕµed_ЪЩ
(&
bev_a
->
wrЩe_ovФѕµed
, 
wrЩe_comґСe
);

433 
bev_a
->
ok
 = 
fd
 >= 0;

435  
bev
;

436 
Фr
:

437 
	`bufгїvТt_дУ
(&
bev_a
->
bev
.bev);

438  
NULL
;

439 
	}
}

442 
	$bufгїvТt_async_£t_cЏ√щed
(
bufгїvТt
 *
bev
)

444 
bufгїvТt_async
 *
bev_async
 = 
	`up€°
(
bev
);

445 
bev_async
->
ok
 = 1;

446 
	`_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(
bev
);

448 
	`be_async_ТabЋ
(
bev
, bev->
ТabЋd
);

449 
	}
}

452 
	$bufгїvТt_async_€n_cЏ√щ
(
bufгїvТt
 *
bev
)

454 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
ext
 =

455 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

457 iа(
	`BEV_IS_ASYNC
(
bev
) &&

458 
	`evТt_ba£_gС_ioэ
(
bev
->
ev_ba£
) &&

459 
ext
 &&Гxt->
CЏ√щEx
)

463 
	}
}

466 
	$bufгїvТt_async_cЏ√щ
(
bufгїvТt
 *
bev
, 
evutЮ_sockС_t
 
fd
,

467 cЏ° 
sockaddr
 *
І
, 
sockЋn
)

469 
BOOL
 
rc
;

470 
bufгїvТt_async
 *
bev_async
 = 
	`up€°
(
bev
);

471 
sockaddr_°№age
 
ss
;

472 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
ext
 =

473 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

475 
	`EVUTIL_ASSERT
(
ext
 &&Гxt->
CЏ√щEx
 && 
fd
 >р0 && 
І
 !р
NULL
);

481 
	`mem£t
(&
ss
, 0, (ss));

482 iа(
І
->
І_зmЮy
 =р
AF_INET
) {

483 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ *)&
ss
;

484 
sЪ
->
sЪ_зmЮy
 = 
AF_INET
;

485 
sЪ
->
sЪ_addr
.
s_addr
 = 
INADDR_ANY
;

486 } iа(
І
->
І_зmЮy
 =р
AF_INET6
) {

487 
sockaddr_Ъ6
 *
sЪ6
 = (sockaddr_Ъ6 *)&
ss
;

488 
sЪ6
->
sЪ6_зmЮy
 = 
AF_INET6
;

489 
sЪ6
->
sЪ6_addr
 = 
Ъ6addr_™y
;

494 iа(
	`bЪd
(
fd
, (
sockaddr
 *)&
ss
, (ss)) < 0 &&

495 
	`WSAGСLa°EЉ№
(и!р
WSAEINVAL
)

498 
rc
 = 
ext
->
	`CЏ√щEx
(
fd
, 
І
, 
sockЋn
, 
NULL
, 0, NULL,

499 &
bev_async
->
cЏ√щ_ovФѕµed
.
ovФѕµed
);

500 iа(
rc
 || 
	`WSAGСLa°EЉ№
(и=р
ERROR_IO_PENDING
)

504 
	}
}

507 
	$be_async_щЊ
(
bufгїvТt
 *
bev
, 
bufгїvТt_щЊ_Ё
 
Ё
,

508 
bufгїvТt_щЊ_d©a
 *
d©a
)

510 
Ё
) {

511 
BEV_CTRL_GET_FD
:

512 
d©a
->
fd
 = 
	`_evbufгr_ovФѕµed_gС_fd
(
bev
->
Ъput
);

514 
BEV_CTRL_SET_FD
: {

515 
evТt_ioэ_p№t
 *
ioэ
;

517 iа(
d©a
->
fd
 =р
	`_evbufгr_ovФѕµed_gС_fd
(
bev
->
Ъput
))

519 iа(!(
ioэ
 = 
	`evТt_ba£_gС_ioэ
(
bev
->
ev_ba£
)))

521 iа(
	`evТt_ioэ_p№t_assocЯЛ
(
ioэ
, 
d©a
->
fd
, 1) < 0)

523 
	`_evbufгr_ovФѕµed_£t_fd
(
bev
->
Ъput
, 
d©a
->
fd
);

524 
	`_evbufгr_ovФѕµed_£t_fd
(
bev
->
ouНut
, 
d©a
->
fd
);

527 
BEV_CTRL_GET_UNDERLYING
:

531 
	}
}

	@bufferevent_filter.c

29 
	~<sys/ty≥s.h
>

31 
	~"evТt-cЏfig.h
"

33 #ifdeа
_EVENT_HAVE_SYS_TIME_H


34 
	~<sys/time.h
>

37 
	~<ФЇo.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rЪg.h
>

41 #ifdeа
_EVENT_HAVE_STDARG_H


42 
	~<°dђg.h
>

45 #ifdeа
WIN32


46 
	~<wЪsock2.h
>

49 
	~"evТt2/utЮ.h
"

50 
	~"evТt2/bufгїvТt.h
"

51 
	~"evТt2/bufгr.h
"

52 
	~"evТt2/bufгїvТt_°ruщ.h
"

53 
	~"evТt2/evТt.h
"

54 
	~"log-ЪЛЇЃ.h
"

55 
	~"mm-ЪЛЇЃ.h
"

56 
	~"bufгїvТt-ЪЛЇЃ.h
"

57 
	~"utЮ-ЪЛЇЃ.h
"

60 
be_fЮЛr_ТabЋ
(
bufгїvТt
 *, );

61 
be_fЮЛr_diІbЋ
(
bufгїvТt
 *, );

62 
be_fЮЛr_de°ruщ
(
bufгїvТt
 *);

64 
be_fЮЛr_їadcb
(
bufгїvТt
 *, *);

65 
be_fЮЛr_wrЩecb
(
bufгїvТt
 *, *);

66 
be_fЮЛr_evТtcb
(
bufгїvТt
 *, , *);

67 
be_fЮЛr_жush
(
bufгїvТt
 *
buгv
,

68 
iўy≥
, 
bufгїvТt_жush_mode
 
mode
);

69 
be_fЮЛr_щЊ
(
bufгїvТt
 *, 
bufгїvТt_щЊ_Ё
, 
bufгїvТt_щЊ_d©a
 *);

71 
bufгїvТt_fЮЛїd_outbuf_cb
(
evbufгr
 *
buf
,

72 cЏ° 
evbufгr_cb_Ъfo
 *
Ъfo
, *
ђg
);

74 
	sbufгїvТt_fЮЛїd
 {

75 
bufгїvТt_іiv©e
 
	mbev
;

78 
bufгїvТt
 *
	mundФlyЪg
;

80 
evbufгr_cb_ТМy
 *
	moutbuf_cb
;

83 
	mgў_eof
;

86 (*
	mдУ_cЏЛxt
)(*);

88 
bufгїvТt_fЮЛr_cb
 
	mіoыss_Ъ
;

90 
bufгїvТt_fЮЛr_cb
 
	mіoыss_out
;

92 *
	mcЏЛxt
;

95 cЏ° 
bufгїvТt_Ёs
 
	gbufгїvТt_Ёs_fЮЛr
 = {

97 
evutЮ_off£tof
(
bufгїvТt_fЮЛїd
, 
bev
),

98 
be_fЮЛr_ТabЋ
,

99 
be_fЮЛr_diІbЋ
,

100 
be_fЮЛr_de°ruщ
,

101 
_bufгїvТt_gТФic_adj_timeouts
,

102 
be_fЮЛr_жush
,

103 
be_fЮЛr_щЊ
,

108 
ЪlЪe
 
bufгїvТt_fЮЛїd
 *

109 
	$up€°
(
bufгїvТt
 *
bev
)

111 
bufгїvТt_fЮЛїd
 *
bev_f
;

112 iа(
bev
->
be_Ёs
 !р&
bufгїvТt_Ёs_fЮЛr
)

113  
NULL
;

114 
bev_f
 = (*)–((*)
bev
) -

115 
	`evutЮ_off£tof
(
bufгїvТt_fЮЛїd
, 
bev
.bev));

116 
	`EVUTIL_ASSERT
(
bev_f
->
bev
.bev.
be_Ёs
 =р&
bufгїvТt_Ёs_fЮЛr
);

117  
bev_f
;

118 
	}
}

120 
	#down€°
(
bev_f
и(&(bev_f)->
bev
.bev)

	)

126 
	$be_undФlyЪg_wrЩebuf_fuќ
(
bufгїvТt_fЮЛїd
 *
bevf
,

127 
bufгїvТt_жush_mode
 
°©e
)

129 
bufгїvТt
 *
u
 = 
bevf
->
undФlyЪg
;

130  
°©e
 =р
BEV_NORMAL
 &&

131 
u
->
wm_wrЩe
.
high
 &&

132 
	`evbufгr_gС_Ћngth
(
u
->
ouНut
и>рu->
wm_wrЩe
.
high
;

133 
	}
}

138 
	$be_їadbuf_fuќ
(
bufгїvТt_fЮЛїd
 *
bevf
,

139 
bufгїvТt_жush_mode
 
°©e
)

141 
bufгїvТt
 *
buгv
 = 
	`down€°
(
bevf
);

142  
°©e
 =р
BEV_NORMAL
 &&

143 
buгv
->
wm_їad
.
high
 &&

144 
	`evbufгr_gС_Ћngth
(
buгv
->
Ъput
и>рbuгv->
wm_їad
.
high
;

145 
	}
}

149 
bufгїvТt_fЮЛr_їsu…


150 
	$be_nuќ_fЮЛr
(
evbufгr
 *
§c
, evbufгЄ*
d°
, 
ev_ssize_t
 
lim
,

151 
bufгїvТt_жush_mode
 
°©e
, *
щx
)

153 ()
°©e
;

154 iа(
	`evbufгr_їmove_bufгr
(
§c
, 
d°
, 
lim
) == 0)

155  
BEV_OK
;

157  
BEV_ERROR
;

158 
	}
}

160 
bufгїvТt
 *

161 
bufгїvТt_fЮЛr_√w
(
bufгїvТt
 *
undФlyЪg
,

162 
bufгїvТt_fЮЛr_cb
 
Ъput_fЮЛr
,

163 
bufгїvТt_fЮЛr_cb
 
ouНut_fЮЛr
,

164 
ЁtiЏs
,

165 (*
дУ_cЏЛxt
)(*),

166 *
щx
)

168 
bufгїvТt_fЮЛїd
 *
buгv_f
;

169 
tmp_ЁtiЏs
 = 
ЁtiЏs
 & ~
BEV_OPT_THREADSAFE
;

171 iа(!
Ъput_fЮЛr
)

172 
Ъput_fЮЛr
 = 
be_nuќ_fЮЛr
;

173 iа(!
ouНut_fЮЛr
)

174 
ouНut_fЮЛr
 = 
be_nuќ_fЮЛr
;

176 
buгv_f
 = 
	`mm_€ќoc
(1, (
bufгїvТt_fЮЛїd
));

177 iа(!
buгv_f
)

178  
NULL
;

180 iа(
	`bufгїvТt_ЪЩ_commЏ
(&
buгv_f
->
bev
, 
undФlyЪg
->
ev_ba£
,

181 &
bufгїvТt_Ёs_fЮЛr
, 
tmp_ЁtiЏs
) < 0) {

182 
	`mm_дУ
(
buгv_f
);

183  
NULL
;

185 iа(
ЁtiЏs
 & 
BEV_OPT_THREADSAFE
) {

186 
	`bufгїvТt_ТabЋ_lockЪg
(
	`down€°
(
buгv_f
), 
NULL
);

189 
buгv_f
->
undФlyЪg
 = underlying;

190 
buгv_f
->
іoыss_Ъ
 = 
Ъput_fЮЛr
;

191 
buгv_f
->
іoыss_out
 = 
ouНut_fЮЛr
;

192 
buгv_f
->
дУ_cЏЛxt
 = free_context;

193 
buгv_f
->
cЏЛxt
 = 
щx
;

195 
	`bufгїvТt_£tcb
(
buгv_f
->
undФlyЪg
,

196 
be_fЮЛr_їadcb
, 
be_fЮЛr_wrЩecb
, 
be_fЮЛr_evТtcb
, 
buгv_f
);

198 
buгv_f
->
outbuf_cb
 = 
	`evbufгr_add_cb
(
	`down€°
(buгv_f)->
ouНut
,

199 
bufгїvТt_fЮЛїd_outbuf_cb
, 
buгv_f
);

201 
	`_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(
	`down€°
(
buгv_f
));

202 
	`bufгїvТt_Ъьef
(
undФlyЪg
);

204  
	`down€°
(
buгv_f
);

205 
	}
}

208 
	$be_fЮЛr_de°ruщ
(
bufгїvТt
 *
bev
)

210 
bufгїvТt_fЮЛїd
 *
bevf
 = 
	`up€°
(
bev
);

211 
	`EVUTIL_ASSERT
(
bevf
);

212 iа(
bevf
->
дУ_cЏЛxt
)

213 
bevf
->
	`дУ_cЏЛxt
(bevf->
cЏЛxt
);

215 iа(
bevf
->
bev
.
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
)

216 
	`bufгїvТt_дУ
(
bevf
->
undФlyЪg
);

218 
	`_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bev
);

219 
	}
}

222 
	$be_fЮЛr_ТabЋ
(
bufгїvТt
 *
bev
, 
evТt
)

224 
bufгїvТt_fЮЛїd
 *
bevf
 = 
	`up€°
(
bev
);

225 iа(
evТt
 & 
EV_READ
)

226 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
);

227 iа(
evТt
 & 
EV_WRITE
)

228 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
bev
);

229  
	`bufгїvТt_ТabЋ
(
bevf
->
undФlyЪg
, 
evТt
);

230 
	}
}

233 
	$be_fЮЛr_diІbЋ
(
bufгїvТt
 *
bev
, 
evТt
)

235 
bufгїvТt_fЮЛїd
 *
bevf
 = 
	`up€°
(
bev
);

236 iа(
evТt
 & 
EV_READ
)

237 
	`BEV_DEL_GENERIC_READ_TIMEOUT
(
bev
);

238 iа(
evТt
 & 
EV_WRITE
)

239 
	`BEV_DEL_GENERIC_WRITE_TIMEOUT
(
bev
);

240  
	`bufгїvТt_diІbЋ
(
bevf
->
undФlyЪg
, 
evТt
);

241 
	}
}

243 
bufгїvТt_fЮЛr_їsu…


244 
	$be_fЮЛr_іoыss_Ъput
(
bufгїvТt_fЮЛїd
 *
bevf
,

245 
bufгїvТt_жush_mode
 
°©e
,

246 *
іoыs£d_out
)

248 
bufгїvТt_fЮЛr_їsu…
 
їs
;

249 
bufгїvТt
 *
bev
 = 
	`down€°
(
bevf
);

251 iа(
°©e
 =р
BEV_NORMAL
) {

254 iа(!(
bev
->
ТabЋd
 & 
EV_READ
) ||

255 
	`be_їadbuf_fuќ
(
bevf
, 
°©e
))

256  
BEV_OK
;

260 
ev_ssize_t
 
limЩ
 = -1;

261 iа(
°©e
 =р
BEV_NORMAL
 && 
bev
->
wm_їad
.
high
)

262 
limЩ
 = 
bev
->
wm_їad
.
high
 -

263 
	`evbufгr_gС_Ћngth
(
bev
->
Ъput
);

265 
їs
 = 
bevf
->
	`іoыss_Ъ
(bevf->
undФlyЪg
->
Ъput
,

266 
bev
->
Ъput
, 
limЩ
, 
°©e
, 
bevf
->
cЏЛxt
);

268 iа(
їs
 =р
BEV_OK
)

269 *
іoыs£d_out
 = 1;

270 } 
їs
 =р
BEV_OK
 &&

271 (
bev
->
ТabЋd
 & 
EV_READ
) &&

272 
	`evbufгr_gС_Ћngth
(
bevf
->
undФlyЪg
->
Ъput
) &&

273 !
	`be_їadbuf_fuќ
(
bevf
, 
°©e
));

275 iа(*
іoыs£d_out
)

276 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
);

278  
їs
;

279 
	}
}

282 
bufгїvТt_fЮЛr_їsu…


283 
	$be_fЮЛr_іoыss_ouНut
(
bufгїvТt_fЮЛїd
 *
bevf
,

284 
bufгїvТt_жush_mode
 
°©e
,

285 *
іoыs£d_out
)

288 
bufгїvТt_fЮЛr_їsu…
 
їs
 = 
BEV_OK
;

289 
bufгїvТt
 *
buгv
 = 
	`down€°
(
bevf
);

290 
agaЪ
 = 0;

292 iа(
°©e
 =р
BEV_NORMAL
) {

298 iа(!(
buгv
->
ТabЋd
 & 
EV_WRITE
) ||

299 
	`be_undФlyЪg_wrЩebuf_fuќ
(
bevf
, 
°©e
) ||

300 !
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
))

301  
BEV_OK
;

306 
	`evbufгr_cb_£t_жags
(
buгv
->
ouНut
, 
bevf
->
outbuf_cb
, 0);

309 
іoыs£d
 = 0;

310 
agaЪ
 = 0;

313 
ev_ssize_t
 
limЩ
 = -1;

314 iа(
°©e
 =р
BEV_NORMAL
 &&

315 
bevf
->
undФlyЪg
->
wm_wrЩe
.
high
)

316 
limЩ
 = 
bevf
->
undФlyЪg
->
wm_wrЩe
.
high
 -

317 
	`evbufгr_gС_Ћngth
(
bevf
->
undФlyЪg
->
ouНut
);

319 
їs
 = 
bevf
->
	`іoыss_out
(
	`down€°
(bevf)->
ouНut
,

320 
bevf
->
undФlyЪg
->
ouНut
,

321 
limЩ
,

322 
°©e
,

323 
bevf
->
cЏЛxt
);

325 iа(
їs
 =р
BEV_OK
)

326 
іoыs£d
 = *
іoыs£d_out
 = 1;

328 
їs
 =р
BEV_OK
 &&

330 (
buгv
->
ТabЋd
 & 
EV_WRITE
) &&

333 
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
) &&

335 !
	`be_undФlyЪg_wrЩebuf_fuќ
(
bevf
,
°©e
));

337 iа(
іoыs£d
 &&

338 
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
и<рbuгv->
wm_wrЩe
.
low
) {

340 
	`_bufгїvТt_run_wrЩecb
(
buгv
);

342 iа(
їs
 =р
BEV_OK
 &&

343 (
buгv
->
ТabЋd
 & 
EV_WRITE
) &&

344 
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
) &&

345 !
	`be_undФlyЪg_wrЩebuf_fuќ
(
bevf
, 
°©e
)) {

346 
agaЪ
 = 1;

349 } 
agaЪ
);

352 
	`evbufгr_cb_£t_жags
(
buгv
->
ouНut
,
bevf
->
outbuf_cb
,

353 
EVBUFFER_CB_ENABLED
);

355 iа(*
іoыs£d_out
)

356 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
buгv
);

358  
їs
;

359 
	}
}

363 
	$bufгїvТt_fЮЛїd_outbuf_cb
(
evbufгr
 *
buf
,

364 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
, *
ђg
)

366 
bufгїvТt_fЮЛїd
 *
bevf
 = 
ђg
;

367 
bufгїvТt
 *
bev
 = 
	`down€°
(
bevf
);

369 iа(
cbЪfo
->
n_added
) {

370 
іoыs£d_™y
 = 0;

373 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

374 
	`be_fЮЛr_іoыss_ouНut
(
bevf
, 
BEV_NORMAL
, &
іoыs£d_™y
);

375 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

377 
	}
}

381 
	$be_fЮЛr_їadcb
(
bufгїvТt
 *
undФlyЪg
, *
_me
)

383 
bufгїvТt_fЮЛїd
 *
bevf
 = 
_me
;

384 
bufгїvТt_fЮЛr_їsu…
 
їs
;

385 
bufгїvТt_жush_mode
 
°©e
;

386 
bufгїvТt
 *
buгv
 = 
	`down€°
(
bevf
);

387 
іoыs£d_™y
 = 0;

389 
	`_bufгїvТt_Ъьef_™d_lock
(
buгv
);

391 iа(
bevf
->
gў_eof
)

392 
°©e
 = 
BEV_FINISHED
;

394 
°©e
 = 
BEV_NORMAL
;

396 
їs
 = 
	`be_fЮЛr_іoыss_Ъput
(
bevf
, 
°©e
, &
іoыs£d_™y
);

401 iа(
іoыs£d_™y
 &&

402 
	`evbufгr_gС_Ћngth
(
buгv
->
Ъput
и>рbuгv->
wm_їad
.
low
)

403 
	`_bufгїvТt_run_їadcb
(
buгv
);

405 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

406 
	}
}

411 
	$be_fЮЛr_wrЩecb
(
bufгїvТt
 *
undФlyЪg
, *
_me
)

413 
bufгїvТt_fЮЛїd
 *
bevf
 = 
_me
;

414 
bufгїvТt
 *
bev
 = 
	`down€°
(
bevf
);

415 
іoыs£d_™y
 = 0;

417 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

418 
	`be_fЮЛr_іoыss_ouНut
(
bevf
, 
BEV_NORMAL
, &
іoыs£d_™y
);

419 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

420 
	}
}

424 
	$be_fЮЛr_evТtcb
(
bufгїvТt
 *
undФlyЪg
, 
wh©
, *
_me
)

426 
bufгїvТt_fЮЛїd
 *
bevf
 = 
_me
;

427 
bufгїvТt
 *
bev
 = 
	`down€°
(
bevf
);

429 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

431 
	`_bufгїvТt_run_evТtcb
(
bev
, 
wh©
);

432 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

433 
	}
}

436 
	$be_fЮЛr_жush
(
bufгїvТt
 *
buгv
,

437 
iўy≥
, 
bufгїvТt_жush_mode
 
mode
)

439 
bufгїvТt_fЮЛїd
 *
bevf
 = 
	`up€°
(
buгv
);

440 
іoыs£d_™y
 = 0;

441 
	`EVUTIL_ASSERT
(
bevf
);

443 
	`_bufгїvТt_Ъьef_™d_lock
(
buгv
);

445 iа(
iўy≥
 & 
EV_READ
) {

446 
	`be_fЮЛr_іoыss_Ъput
(
bevf
, 
mode
, &
іoыs£d_™y
);

448 iа(
iўy≥
 & 
EV_WRITE
) {

449 
	`be_fЮЛr_іoыss_ouНut
(
bevf
, 
mode
, &
іoыs£d_™y
);

453 
	`bufгїvТt_жush
(
bevf
->
undФlyЪg
, 
iўy≥
, 
mode
);

455 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

457  
іoыs£d_™y
;

458 
	}
}

461 
	$be_fЮЛr_щЊ
(
bufгїvТt
 *
bev
, 
bufгїvТt_щЊ_Ё
 
Ё
,

462 
bufгїvТt_щЊ_d©a
 *
d©a
)

464 
bufгїvТt_fЮЛїd
 *
bevf
;

465 
Ё
) {

466 
BEV_CTRL_GET_UNDERLYING
:

467 
bevf
 = 
	`up€°
(
bev
);

468 
d©a
->
±r
 = 
bevf
->
undФlyЪg
;

470 
BEV_CTRL_GET_FD
:

471 
BEV_CTRL_SET_FD
:

475 
	}
}

	@bufferevent_openssl.c

27 
	~<sys/ty≥s.h
>

29 
	~"evТt-cЏfig.h
"

31 #ifdeа
_EVENT_HAVE_SYS_TIME_H


32 
	~<sys/time.h
>

35 
	~<ФЇo.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rЪg.h
>

39 #ifdeа
_EVENT_HAVE_STDARG_H


40 
	~<°dђg.h
>

42 #ifdeа
_EVENT_HAVE_UNISTD_H


43 
	~<uni°d.h
>

46 #ifdeа
WIN32


47 
	~<wЪsock2.h
>

50 
	~"evТt2/bufгїvТt.h
"

51 
	~"evТt2/bufгїvТt_°ruщ.h
"

52 
	~"evТt2/bufгїvТt_s¶.h
"

53 
	~"evТt2/bufгr.h
"

54 
	~"evТt2/evТt.h
"

56 
	~"mm-ЪЛЇЃ.h
"

57 
	~"bufгїvТt-ЪЛЇЃ.h
"

58 
	~"log-ЪЛЇЃ.h
"

60 
	~<ЁТs¶/bio.h
>

61 
	~<ЁТs¶/s¶.h
>

62 
	~<ЁТs¶/Фr.h
>

79 
	#BIO_TYPE_LIBEVENT
 57

	)

85 
	$іЪt_Фr
(
vЃ
)

87 
Фr
;

88 
	`іЪtf
("EЉ№ wa†%d\n", 
vЃ
);

90 (
Фr
 = 
	`ERR_gС_Фr№
()))
x
 {

91 cЏ° *
msg
 = (cЏ° *)
	`ERR_їasЏ_Фr№_°rЪg
(
Фr
);

92 cЏ° *
lib
 = (cЏ° *)
	`ERR_lib_Фr№_°rЪg
(
Фr
);

93 cЏ° *
func
 = (cЏ° *)
	`ERR_func_Фr№_°rЪg
(
Фr
);

95 
	`іЪtf
("%†Ъ %†%s\n", 
msg
, 
lib
, 
func
);

97 
	}
}

99 
	#іЪt_Фr
(
v
и(()0)

	)

104 
	$bio_bufгїvТt_√w
(
BIO
 *
b
)

106 
b
->
ЪЩ
 = 0;

107 
b
->
num
 = -1;

108 
b
->
±r
 = 
NULL
;

109 
b
->
жags
 = 0;

111 
	}
}

115 
	$bio_bufгїvТt_дУ
(
BIO
 *
b
)

117 iа(!
b
)

119 iа(
b
->
shutdown
) {

120 iа(
b
->
ЪЩ
 && b->
±r
)

121 
	`bufгїvТt_дУ
(
b
->
±r
);

122 
b
->
ЪЩ
 = 0;

123 
b
->
жags
 = 0;

124 
b
->
±r
 = 
NULL
;

127 
	}
}

131 
	$bio_bufгїvТt_їad
(
BIO
 *
b
, *
out
, 
ouОТ
)

133 
r
 = 0;

134 
evbufгr
 *
Ъput
;

136 
	`BIO_юЧr_їМy_жags
(
b
);

138 iа(!
out
)

140 iа(!
b
->
±r
)

143 
Ъput
 = 
	`bufгїvТt_gС_Ъput
(
b
->
±r
);

144 iа(
	`evbufгr_gС_Ћngth
(
Ъput
) == 0) {

146 
	`BIO_£t_їМy_їad
(
b
);

149 
r
 = 
	`evbufгr_їmove
(
Ъput
, 
out
, 
ouОТ
);

152  
r
;

153 
	}
}

157 
	$bio_bufгїvТt_wrЩe
(
BIO
 *
b
, cЏ° *
Ъ
, 
ЪЋn
)

159 
bufгїvТt
 *
buгv
 = 
b
->
±r
;

160 
evbufгr
 *
ouНut
;

161 
size_t
 
ouОТ
;

163 
	`BIO_юЧr_їМy_жags
(
b
);

165 iа(!
b
->
±r
)

168 
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
buгv
);

169 
ouОТ
 = 
	`evbufгr_gС_Ћngth
(
ouНut
);

173 iа(
buгv
->
wm_wrЩe
.
high
 && buгv->wm_wrЩe.high >р(
ouОТ
+
ЪЋn
)) {

174 iа(
buгv
->
wm_wrЩe
.
high
 >р
ouОТ
) {

176 
	`BIO_£t_їМy_wrЩe
(
b
);

179 
ЪЋn
 = 
buгv
->
wm_wrЩe
.
high
 - 
ouОТ
;

182 
	`EVUTIL_ASSERT
(
ЪЋn
 > 0);

183 
	`evbufгr_add
(
ouНut
, 
Ъ
, 
ЪЋn
);

184  
ЪЋn
;

185 
	}
}

189 
	$bio_bufгїvТt_щЊ
(
BIO
 *
b
, 
cmd
, 
num
, *
±r
)

191 
bufгїvТt
 *
buгv
 = 
b
->
±r
;

192 
їt
 = 1;

194 
cmd
) {

195 
BIO_CTRL_GET_CLOSE
:

196 
їt
 = 
b
->
shutdown
;

198 
BIO_CTRL_SET_CLOSE
:

199 
b
->
shutdown
 = ()
num
;

201 
BIO_CTRL_PENDING
:

202 
їt
 = 
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_Ъput
(
buгv
)) != 0;

204 
BIO_CTRL_WPENDING
:

205 
їt
 = 
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_ouНut
(
buгv
)) != 0;

209 
BIO_CTRL_DUP
:

210 
BIO_CTRL_FLUSH
:

211 
їt
 = 1;

214 
їt
 = 0;

217  
їt
;

218 
	}
}

222 
	$bio_bufгїvТt_puts
(
BIO
 *
b
, cЏ° *
s
)

224  
	`bio_bufгїvТt_wrЩe
(
b
, 
s
, 
	`°ЊТ
(s));

225 
	}
}

228 
BIO_METHOD
 
	gmСhods_bufгїvТt
 = {

229 
BIO_TYPE_LIBEVENT
, "bufferevent",

230 
bio_bufгїvТt_wrЩe
,

231 
bio_bufгїvТt_їad
,

232 
bio_bufгїvТt_puts
,

233 
NULL
 ,

234 
bio_bufгїvТt_щЊ
,

235 
bio_bufгїvТt_√w
,

236 
bio_bufгїvТt_дУ
,

237 
NULL
 ,

241 
BIO_METHOD
 *

242 
	$BIO_s_bufгїvТt
()

244  &
mСhods_bufгїvТt
;

245 
	}
}

249 
BIO
 *

250 
	$BIO_√w_bufгїvТt
(
bufгїvТt
 *bufгїvТt, 
юo£_жag
)

252 
BIO
 *
їsu…
;

253 iа(!
bufгїvТt
)

254  
NULL
;

255 iа(!(
їsu…
 = 
	`BIO_√w
(
	`BIO_s_bufгїvТt
())))

256  
NULL
;

257 
їsu…
->
ЪЩ
 = 1;

258 
їsu…
->
±r
 = 
bufгїvТt
;

259 
їsu…
->
shutdown
 = 
юo£_жag
 ? 1 : 0;

260  
їsu…
;

261 
	}
}

276 
	sbufгїvТt_ЁТs¶
 {

282 
bufгїvТt_іiv©e
 
	mbev
;

285 
bufгїvТt
 *
	mundФlyЪg
;

287 
SSL
 *
	ms¶
;

291 
evbufгr_cb_ТМy
 *
	moutbuf_cb
;

295 
ev_ssize_t
 
	mѕ°_wrЩe
;

297 
	#NUM_ERRORS
 3

	)

298 
ev_uЪt32_t
 
	mФr№s
[
NUM_ERRORS
];

303 
	mїad_blocked_Џ_wrЩe
 : 1;

305 
	mwrЩe_blocked_Џ_їad
 : 1;

307 
	mЃlow_dЬty_shutdown
 : 1;

309 
	mfd_is_£t
 : 1;

311 
	mn_Фr№s
 : 2;

314 
	m°©e
 : 2;

317 
be_ЁТs¶_ТabЋ
(
bufгїvТt
 *, );

318 
be_ЁТs¶_diІbЋ
(
bufгїvТt
 *, );

319 
be_ЁТs¶_de°ruщ
(
bufгїvТt
 *);

320 
be_ЁТs¶_adj_timeouts
(
bufгїvТt
 *);

321 
be_ЁТs¶_жush
(
bufгїvТt
 *
buгv
,

322 
iўy≥
, 
bufгїvТt_жush_mode
 
mode
);

323 
be_ЁТs¶_щЊ
(
bufгїvТt
 *, 
bufгїvТt_щЊ_Ё
, 
bufгїvТt_щЊ_d©a
 *);

325 cЏ° 
bufгїvТt_Ёs
 
	gbufгїvТt_Ёs_ЁТs¶
 = {

327 
evutЮ_off£tof
(
bufгїvТt_ЁТs¶
, 
bev
),

328 
be_ЁТs¶_ТabЋ
,

329 
be_ЁТs¶_diІbЋ
,

330 
be_ЁТs¶_de°ruщ
,

331 
be_ЁТs¶_adj_timeouts
,

332 
be_ЁТs¶_жush
,

333 
be_ЁТs¶_щЊ
,

338 
ЪlЪe
 
bufгїvТt_ЁТs¶
 *

339 
	$up€°
(
bufгїvТt
 *
bev
)

341 
bufгїvТt_ЁТs¶
 *
bev_o
;

342 iа(
bev
->
be_Ёs
 !р&
bufгїvТt_Ёs_ЁТs¶
)

343  
NULL
;

344 
bev_o
 = (*)–((*)
bev
) -

345 
	`evutЮ_off£tof
(
bufгїvТt_ЁТs¶
, 
bev
.bev));

346 
	`EVUTIL_ASSERT
(
bev_o
->
bev
.bev.
be_Ёs
 =р&
bufгїvТt_Ёs_ЁТs¶
);

347  
bev_o
;

348 
	}
}

350 
ЪlЪe
 

351 
	$put_Фr№
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
Фr
)

353 iа(
bev_s¶
->
n_Фr№s
 =р
NUM_ERRORS
)

360 
bev_s¶
->
Фr№s
[bev_s¶->
n_Фr№s
++] = (
ev_uЪt32_t
и
Фr
;

361 
	}
}

367 
	$°ђt_їadЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

369 iа(
bev_s¶
->
undФlyЪg
) {

370 
e
 = 
EV_READ
;

371 iа(
bev_s¶
->
їad_blocked_Џ_wrЩe
)

372 
e
 |р
EV_WRITE
;

373  
	`bufгїvТt_ТabЋ
(
bev_s¶
->
undФlyЪg
, 
e
);

375 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

376 
r
;

377 
r
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_їad
, &bev->
timeout_їad
);

378 iа(
r
 =р0 && 
bev_s¶
->
їad_blocked_Џ_wrЩe
)

379 
r
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_wrЩe
,

380 &
bev
->
timeout_wrЩe
);

381  
r
;

383 
	}
}

389 
	$°ђt_wrЩЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

391 
r
;

392 iа(
bev_s¶
->
undФlyЪg
) {

393 
e
 = 
EV_WRITE
;

394 iа(
bev_s¶
->
wrЩe_blocked_Џ_їad
)

395 
e
 |р
EV_READ
;

396 
r
 = 
	`bufгїvТt_ТabЋ
(
bev_s¶
->
undФlyЪg
, 
e
);

398 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

399 
r
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_wrЩe
, &bev->
timeout_wrЩe
);

400 iа(!
r
 && 
bev_s¶
->
wrЩe_blocked_Џ_їad
)

401 
r
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_їad
,

402 &
bev
->
timeout_їad
);

404  
r
;

405 
	}
}

408 
	$°Ё_їadЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

410 iа(
bev_s¶
->
wrЩe_blocked_Џ_їad
)

412 iа(
bev_s¶
->
undФlyЪg
)

413 
	`bufгїvТt_diІbЋ
(
bev_s¶
->
undФlyЪg
, 
EV_READ
);

415 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

416 
	`evТt_dЦ
(&
bev
->
ev_їad
);

418 
	}
}

421 
	$°Ё_wrЩЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

423 iа(
bev_s¶
->
їad_blocked_Џ_wrЩe
)

425 iа(
bev_s¶
->
undФlyЪg
)

426 
	`bufгїvТt_diІbЋ
(
bev_s¶
->
undФlyЪg
, 
EV_WRITE
);

428 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

429 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

431 
	}
}

434 
	$£t_rbow
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

436 iа(!
bev_s¶
->
undФlyЪg
)

437 
	`°Ё_їadЪg
(
bev_s¶
);

438 
bev_s¶
->
їad_blocked_Џ_wrЩe
 = 1;

439  
	`°ђt_wrЩЪg
(
bev_s¶
);

440 
	}
}

443 
	$£t_wb№
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

445 iа(!
bev_s¶
->
undФlyЪg
)

446 
	`°Ё_wrЩЪg
(
bev_s¶
);

447 
bev_s¶
->
wrЩe_blocked_Џ_їad
 = 1;

448  
	`°ђt_їadЪg
(
bev_s¶
);

449 
	}
}

452 
	$юЧr_rbow
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

454 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

455 
r
 = 0;

456 
bev_s¶
->
їad_blocked_Џ_wrЩe
 = 0;

457 iа(!(
bev
->
ТabЋd
 & 
EV_WRITE
))

458 
	`°Ё_wrЩЪg
(
bev_s¶
);

459 iа(
bev
->
ТabЋd
 & 
EV_READ
)

460 
r
 = 
	`°ђt_їadЪg
(
bev_s¶
);

461  
r
;

462 
	}
}

466 
	$юЧr_wb№
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

468 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

469 
r
 = 0;

470 
bev_s¶
->
wrЩe_blocked_Џ_їad
 = 0;

471 iа(!(
bev
->
ТabЋd
 & 
EV_READ
))

472 
	`°Ё_їadЪg
(
bev_s¶
);

473 iа(
bev
->
ТabЋd
 & 
EV_WRITE
)

474 
r
 = 
	`°ђt_wrЩЪg
(
bev_s¶
);

475  
r
;

476 
	}
}

479 
	$cЏn_юo£d
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
Фrcode
, 
їt
)

481 
evТt
 = 
BEV_EVENT_ERROR
;

482 
dЬty_shutdown
 = 0;

483 
Фr
;

485 
Фrcode
) {

486 
SSL_ERROR_ZERO_RETURN
:

488 iа(
	`SSL_gС_shutdown
(
bev_s¶
->
s¶
и& 
SSL_RECEIVED_SHUTDOWN
)

489 
evТt
 = 
BEV_EVENT_EOF
;

491 
dЬty_shutdown
 = 1;

493 
SSL_ERROR_SYSCALL
:

495 iа(
їt
 =р0 && 
	`ERR_≥ek_Фr№
() == 0)

496 
dЬty_shutdown
 = 1;

498 
SSL_ERROR_SSL
:

501 
SSL_ERROR_WANT_X509_LOOKUP
:

504 
SSL_ERROR_NONE
:

505 
SSL_ERROR_WANT_READ
:

506 
SSL_ERROR_WANT_WRITE
:

507 
SSL_ERROR_WANT_CONNECT
:

508 
SSL_ERROR_WANT_ACCEPT
:

511 
	`evТt_wђnx
("BUG: U√x≥щed O≥nSSLГЉ№ codР%d", 
Фrcode
);

515 (
Фr
 = 
	`ERR_gС_Фr№
())) {

516 
	`put_Фr№
(
bev_s¶
, 
Фr
);

519 iа(
dЬty_shutdown
 && 
bev_s¶
->
Ѓlow_dЬty_shutdown
)

520 
evТt
 = 
BEV_EVENT_EOF
;

522 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev, 
evТt
);

524 
	`°Ё_їadЪg
(
bev_s¶
);

525 
	`°Ё_wrЩЪg
(
bev_s¶
);

526 
	}
}

530 
	$do_їad
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
n_to_їad
)

533 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

534 
evbufгr
 *
Ъput
 = 
bev
->input;

535 
r
, 
n
, 
i
, 
n_u£d
 = 0, 
blocked
 = 0, 
©mo°
;

536 
evbufгr_iovec
 
•aы
[2];

538 
©mo°
 = 
	`_bufгїvТt_gС_їad_max
(&
bev_s¶
->
bev
);

539 iа(
n_to_їad
 > 
©mo°
)

540 
n_to_їad
 = 
©mo°
;

542 
n
 = 
	`evbufгr_ї£rve_•aы
(
Ъput
, 
n_to_їad
, 
•aы
, 2);

543 iа(
n
 < 0)

546 
i
=0; i<
n
; ++i) {

547 iа(
bev_s¶
->
bev
.
їad_su•Тded
)

549 
r
 = 
	`SSL_їad
(
bev_s¶
->
s¶
, 
•aы
[
i
].
iov_ba£
, sЈы[i].
iov_Ћn
);

550 iа(
r
>0) {

551 iа(
bev_s¶
->
їad_blocked_Џ_wrЩe
)

552 iа(
	`юЧr_rbow
(
bev_s¶
) < 0)

554 ++
n_u£d
;

555 
•aы
[
i
].
iov_Ћn
 = 
r
;

558 
	`_bufгїvТt_deьemТt_їad_buckСs
(&
bev_s¶
->
bev
, 
r
);

560 
Фr
 = 
	`SSL_gС_Фr№
(
bev_s¶
->
s¶
, 
r
);

561 
	`іЪt_Фr
(
Фr
);

562 
Фr
) {

563 
SSL_ERROR_WANT_READ
:

565 iа(
bev_s¶
->
їad_blocked_Џ_wrЩe
)

566 iа(
	`юЧr_rbow
(
bev_s¶
) < 0)

569 
SSL_ERROR_WANT_WRITE
:

572 iа(!
bev_s¶
->
їad_blocked_Џ_wrЩe
)

573 iа(
	`£t_rbow
(
bev_s¶
) < 0)

577 
	`cЏn_юo£d
(
bev_s¶
, 
Фr
, 
r
);

580 
blocked
 = 1;

585 iа(
n_u£d
) {

586 
	`evbufгr_commЩ_•aы
(
Ъput
, 
•aы
, 
n_u£d
);

587 iа(
bev_s¶
->
undФlyЪg
)

588 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
);

590 iа(
	`evbufгr_gС_Ћngth
(
Ъput
и>р
bev
->
wm_їad
.
low
)

591 
	`_bufгїvТt_run_їadcb
(
bev
);

594  
blocked
 ? 0 : 1;

595 
	}
}

598 
	$do_wrЩe
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
©mo°
)

600 
i
, 
r
, 
n
, 
n_wrЩЛn
 = 0, 
blocked
=0;

601 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

602 
evbufгr
 *
ouНut
 = 
bev
->output;

603 
evbufгr_iovec
 
•aы
[8];

605 iа(
bev_s¶
->
ѕ°_wrЩe
 > 0)

606 
©mo°
 = 
bev_s¶
->
ѕ°_wrЩe
;

608 
©mo°
 = 
	`_bufгїvТt_gС_wrЩe_max
(&
bev_s¶
->
bev
);

610 
n
 = 
	`evbufгr_≥ek
(
ouНut
, 
©mo°
, 
NULL
, 
•aы
, 8);

611 iа(
n
 < 0)

614 iа(
n
 > 8)

615 
n
 = 8;

616 
i
=0; i < 
n
; ++i) {

617 iа(
bev_s¶
->
bev
.
wrЩe_su•Тded
)

620 
r
 = 
	`SSL_wrЩe
(
bev_s¶
->
s¶
, 
•aы
[
i
].
iov_ba£
,

621 
•aы
[
i
].
iov_Ћn
);

622 iа(
r
 > 0) {

623 iа(
bev_s¶
->
wrЩe_blocked_Џ_їad
)

624 iа(
	`юЧr_wb№
(
bev_s¶
) < 0)

626 
n_wrЩЛn
 +р
r
;

627 
bev_s¶
->
ѕ°_wrЩe
 = -1;

630 
	`_bufгїvТt_deьemТt_wrЩe_buckСs
(&
bev_s¶
->
bev
, 
r
);

632 
Фr
 = 
	`SSL_gС_Фr№
(
bev_s¶
->
s¶
, 
r
);

633 
	`іЪt_Фr
(
Фr
);

634 
Фr
) {

635 
SSL_ERROR_WANT_WRITE
:

637 iа(
bev_s¶
->
wrЩe_blocked_Џ_їad
)

638 iа(
	`юЧr_wb№
(
bev_s¶
) < 0)

640 
bev_s¶
->
ѕ°_wrЩe
 = 
•aы
[
i
].
iov_Ћn
;

642 
SSL_ERROR_WANT_READ
:

645 iа(!
bev_s¶
->
wrЩe_blocked_Џ_їad
)

646 iа(
	`£t_wb№
(
bev_s¶
) < 0)

648 
bev_s¶
->
ѕ°_wrЩe
 = 
•aы
[
i
].
iov_Ћn
;

651 
	`cЏn_юo£d
(
bev_s¶
, 
Фr
, 
r
);

652 
bev_s¶
->
ѕ°_wrЩe
 = -1;

655 
blocked
 = 1;

659 iа(
n_wrЩЛn
) {

660 
	`evbufгr_dњЪ
(
ouНut
, 
n_wrЩЛn
);

661 iа(
bev_s¶
->
undФlyЪg
)

662 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
bev
);

664 iа(
	`evbufгr_gС_Ћngth
(
ouНut
и<р
bev
->
wm_wrЩe
.
low
)

665 
	`_bufгїvТt_run_wrЩecb
(
bev
);

667  
blocked
 ? 0 : 1;

668 
	}
}

670 
	#WRITE_FRAME
 15000

	)

672 
	#READ_DEFAULT
 4096

	)

679 
	$cЏsidФ_їadЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

681 
r
;

682 
evbufгr
 *
Ъput
 = 
bev_s¶
->
bev
.bev.input;

683 
evТt_w©Фmђk
 *
wm
 = &
bev_s¶
->
bev
.bev.
wm_їad
;

685 
bev_s¶
->
wrЩe_blocked_Џ_їad
) {

686 
r
 = 
	`do_wrЩe
(
bev_s¶
, 
WRITE_FRAME
);

687 iа(
r
 <= 0)

690 iа(
bev_s¶
->
wrЩe_blocked_Џ_їad
)

692 (
bev_s¶
->
bev
.bev.
ТabЋd
 & 
EV_READ
) &&

693 (! 
bev_s¶
->
bev
.
їad_su•Тded
) &&

694 (! 
wm
->
high
 || 
	`evbufгr_gС_Ћngth
(
Ъput
) < wm->high)) {

695 
n_to_їad
 =

696 
wm
->
high
 ? wm->high - 
	`evbufгr_gС_Ћngth
(
Ъput
)

697 : 
READ_DEFAULT
;

698 
r
 = 
	`do_їad
(
bev_s¶
, 
n_to_їad
);

699 iа(
r
 <= 0)

702 
	}
}

705 
	$cЏsidФ_wrЩЪg
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

707 
r
;

708 
evbufгr
 *
ouНut
 = 
bev_s¶
->
bev
.bev.output;

709 
evbufгr
 *
ПrgС
 = 
NULL
;

710 
evТt_w©Фmђk
 *
wm
 = 
NULL
;

712 
bev_s¶
->
їad_blocked_Џ_wrЩe
) {

713 
r
 = 
	`do_їad
(
bev_s¶
, 1024);

714 iа(
r
 <= 0)

717 iа(
bev_s¶
->
їad_blocked_Џ_wrЩe
)

719 iа(
bev_s¶
->
undФlyЪg
) {

720 
ПrgС
 = 
bev_s¶
->
undФlyЪg
->
ouНut
;

721 
wm
 = &
bev_s¶
->
undФlyЪg
->
wm_wrЩe
;

723 (
bev_s¶
->
bev
.bev.
ТabЋd
 & 
EV_WRITE
) &&

724 (! 
bev_s¶
->
bev
.
wrЩe_su•Тded
) &&

725 
	`evbufгr_gС_Ћngth
(
ouНut
) &&

726 (!
ПrgС
 || (! 
wm
->
high
 || 
	`evbufгr_gС_Ћngth
(target) < wm->high))) {

727 
n_to_wrЩe
;

728 iа(
wm
 && wm->
high
)

729 
n_to_wrЩe
 = 
wm
->
high
 - 
	`evbufгr_gС_Ћngth
(
ПrgС
);

731 
n_to_wrЩe
 = 
WRITE_FRAME
;

732 
r
 = 
	`do_wrЩe
(
bev_s¶
, 
n_to_wrЩe
);

733 iа(
r
 <= 0)

737 iа(!
bev_s¶
->
undФlyЪg
 && !
	`evbufгr_gС_Ћngth
(
ouНut
))

738 
	`evТt_dЦ
(&
bev_s¶
->
bev
.bev.
ev_wrЩe
);

739 
	}
}

742 
	$be_ЁТs¶_їadcb
(
bufгїvТt
 *
bev_ba£
, *
щx
)

744 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
щx
;

745 
	`cЏsidФ_їadЪg
(
bev_s¶
);

746 
	}
}

749 
	$be_ЁТs¶_wrЩecb
(
bufгїvТt
 *
bev_ba£
, *
щx
)

751 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
щx
;

752 
	`cЏsidФ_wrЩЪg
(
bev_s¶
);

753 
	}
}

756 
	$be_ЁТs¶_evТtcb
(
bufгїvТt
 *
bev_ba£
, 
wh©
, *
щx
)

758 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
щx
;

759 
evТt
 = 0;

761 iа(
wh©
 & 
BEV_EVENT_EOF
) {

762 iа(
bev_s¶
->
Ѓlow_dЬty_shutdown
)

763 
evТt
 = 
BEV_EVENT_EOF
;

765 
evТt
 = 
BEV_EVENT_ERROR
;

766 } iа(
wh©
 & 
BEV_EVENT_TIMEOUT
) {

768 
evТt
 = 
wh©
;

769 } iа(
wh©
 & 
BEV_EVENT_CONNECTED
) {

773 iа(
evТt
)

774 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev, 
evТt
);

775 
	}
}

778 
	$be_ЁТs¶_їadevТtcb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
±r
)

780 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
±r
;

781 
	`_bufгїvТt_Ъьef_™d_lock
(&
bev_s¶
->
bev
.bev);

782 iа(
wh©
 & 
EV_TIMEOUT
) {

783 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev,

784 
BEV_EVENT_TIMEOUT
|
BEV_EVENT_READING
);

786 
	`cЏsidФ_їadЪg
(
bev_s¶
);

787 
	`_bufгїvТt_deьef_™d_u∆ock
(&
bev_s¶
->
bev
.bev);

788 
	}
}

791 
	$be_ЁТs¶_wrЩУvТtcb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
±r
)

793 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
±r
;

794 
	`_bufгїvТt_Ъьef_™d_lock
(&
bev_s¶
->
bev
.bev);

795 iа(
wh©
 & 
EV_TIMEOUT
) {

796 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev,

797 
BEV_EVENT_TIMEOUT
|
BEV_EVENT_WRITING
);

799 
	`cЏsidФ_wrЩЪg
(
bev_s¶
);

800 
	`_bufгїvТt_deьef_™d_u∆ock
(&
bev_s¶
->
bev
.bev);

801 
	}
}

804 
	$£t_ЁТ_€ќbacks
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
evutЮ_sockС_t
 
fd
)

806 iа(
bev_s¶
->
undФlyЪg
) {

807 
	`bufгїvТt_£tcb
(
bev_s¶
->
undФlyЪg
,

808 
be_ЁТs¶_їadcb
, 
be_ЁТs¶_wrЩecb
, 
be_ЁТs¶_evТtcb
,

809 
bev_s¶
);

812 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

813 
љТdЪg
=0, 
w≥ndЪg
=0, 
r1
=0, 
r2
=0;

814 iа(
fd
 < 0 && 
bev_s¶
->
fd_is_£t
)

815 
fd
 = 
	`evТt_gС_fd
(&
bev
->
ev_їad
);

816 iа(
bev_s¶
->
fd_is_£t
) {

817 
љТdЪg
 = 
	`evТt_≥ndЪg
(&
bev
->
ev_їad
, 
EV_READ
, 
NULL
);

818 
w≥ndЪg
 = 
	`evТt_≥ndЪg
(&
bev
->
ev_wrЩe
, 
EV_WRITE
, 
NULL
);

819 
	`evТt_dЦ
(&
bev
->
ev_їad
);

820 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

822 
	`evТt_assign
(&
bev
->
ev_їad
, bev->
ev_ba£
, 
fd
,

823 
EV_READ
|
EV_PERSIST
, 
be_ЁТs¶_їadevТtcb
, 
bev_s¶
);

824 
	`evТt_assign
(&
bev
->
ev_wrЩe
, bev->
ev_ba£
, 
fd
,

825 
EV_WRITE
|
EV_PERSIST
, 
be_ЁТs¶_wrЩУvТtcb
, 
bev_s¶
);

826 iа(
љТdЪg
)

827 
r1
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_їad
, &bev->
timeout_їad
);

828 iа(
w≥ndЪg
)

829 
r2
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_wrЩe
, &bev->
timeout_wrЩe
);

830 iа(
fd
 >= 0) {

831 
bev_s¶
->
fd_is_£t
 = 1;

833  (
r1
<0 || 
r2
<0) ? -1 : 0;

835 
	}
}

838 
	$do_h™dshake
(
bufгїvТt_ЁТs¶
 *
bev_s¶
)

840 
r
;

842 
bev_s¶
->
°©e
) {

844 
BUFFEREVENT_SSL_OPEN
:

845 
	`EVUTIL_ASSERT
(0);

847 
BUFFEREVENT_SSL_CONNECTING
:

848 
BUFFEREVENT_SSL_ACCEPTING
:

849 
r
 = 
	`SSL_do_h™dshake
(
bev_s¶
->
s¶
);

853 iа(
r
==1) {

855 
bev_s¶
->
°©e
 = 
BUFFEREVENT_SSL_OPEN
;

856 
	`£t_ЁТ_€ќbacks
(
bev_s¶
, -1);

858 
	`bufгїvТt_ТabЋ
(&
bev_s¶
->
bev
.bev, bev_s¶->bev.bev.
ТabЋd
);

859 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev,

860 
BEV_EVENT_CONNECTED
);

863 
Фr
 = 
	`SSL_gС_Фr№
(
bev_s¶
->
s¶
, 
r
);

864 
	`іЪt_Фr
(
Фr
);

865 
Фr
) {

866 
SSL_ERROR_WANT_WRITE
:

867 iа(!
bev_s¶
->
undФlyЪg
) {

868 
	`°Ё_їadЪg
(
bev_s¶
);

869  
	`°ђt_wrЩЪg
(
bev_s¶
);

872 
SSL_ERROR_WANT_READ
:

873 iа(!
bev_s¶
->
undФlyЪg
) {

874 
	`°Ё_wrЩЪg
(
bev_s¶
);

875  
	`°ђt_їadЪg
(
bev_s¶
);

879 
	`cЏn_юo£d
(
bev_s¶
, 
Фr
, 
r
);

883 
	}
}

886 
	$be_ЁТs¶_h™dshakecb
(
bufгїvТt
 *
bev_ba£
, *
щx
)

888 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
щx
;

889 
	`do_h™dshake
(
bev_s¶
);

890 
	}
}

893 
	$be_ЁТs¶_h™dshakУvТtcb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
±r
)

895 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
±r
;

897 
	`_bufгїvТt_Ъьef_™d_lock
(&
bev_s¶
->
bev
.bev);

898 iа(
wh©
 & 
EV_TIMEOUT
) {

899 
	`_bufгїvТt_run_evТtcb
(&
bev_s¶
->
bev
.bev, 
BEV_EVENT_TIMEOUT
);

901 
	`do_h™dshake
(
bev_s¶
);

902 
	`_bufгїvТt_deьef_™d_u∆ock
(&
bev_s¶
->
bev
.bev);

903 
	}
}

906 
	$£t_h™dshake_€ќbacks
(
bufгїvТt_ЁТs¶
 *
bev_s¶
, 
evutЮ_sockС_t
 
fd
)

908 iа(
bev_s¶
->
undФlyЪg
) {

909 
	`bufгїvТt_£tcb
(
bev_s¶
->
undФlyЪg
,

910 
be_ЁТs¶_h™dshakecb
, be_openssl_handshakecb,

911 
be_ЁТs¶_evТtcb
,

912 
bev_s¶
);

913  
	`do_h™dshake
(
bev_s¶
);

915 
bufгїvТt
 *
bev
 = &
bev_s¶
->bev.bev;

916 
r1
=0, 
r2
=0;

917 iа(
fd
 < 0 && 
bev_s¶
->
fd_is_£t
)

918 
fd
 = 
	`evТt_gС_fd
(&
bev
->
ev_їad
);

919 iа(
bev_s¶
->
fd_is_£t
) {

920 
	`evТt_dЦ
(&
bev
->
ev_їad
);

921 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

923 
	`evТt_assign
(&
bev
->
ev_їad
, bev->
ev_ba£
, 
fd
,

924 
EV_READ
|
EV_PERSIST
, 
be_ЁТs¶_h™dshakУvТtcb
, 
bev_s¶
);

925 
	`evТt_assign
(&
bev
->
ev_wrЩe
, bev->
ev_ba£
, 
fd
,

926 
EV_WRITE
|
EV_PERSIST
, 
be_ЁТs¶_h™dshakУvТtcb
, 
bev_s¶
);

927 iа(
fd
 >= 0) {

928 
r1
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_їad
, &bev->
timeout_їad
);

929 
r2
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_wrЩe
, &bev->
timeout_wrЩe
);

930 
bev_s¶
->
fd_is_£t
 = 1;

932  (
r1
<0 || 
r2
<0) ? -1 : 0;

934 
	}
}

937 
	$bufгїvТt_s¶_ї√gўЯЛ
(
bufгїvТt
 *
bev
)

939 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

940 iа(!
bev_s¶
)

942 iа(
	`SSL_ї√gўЯЛ
(
bev_s¶
->
s¶
) < 0)

944 
bev_s¶
->
°©e
 = 
BUFFEREVENT_SSL_CONNECTING
;

945 iа(
	`£t_h™dshake_€ќbacks
(
bev_s¶
, -1) < 0)

947 iа(!
bev_s¶
->
undФlyЪg
)

948  
	`do_h™dshake
(
bev_s¶
);

950 
	}
}

953 
	$be_ЁТs¶_outbuf_cb
(
evbufгr
 *
buf
,

954 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
, *
ђg
)

956 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
ђg
;

957 
r
 = 0;

960 iа(
cbЪfo
->
n_added
 && 
bev_s¶
->
°©e
 =р
BUFFEREVENT_SSL_OPEN
) {

961 iа(
cbЪfo
->
№ig_size
 == 0)

962 
r
 = 
	`_bufгїvТt_add_evТt
(&
bev_s¶
->
bev
.bev.
ev_wrЩe
,

963 &
bev_s¶
->
bev
.bev.
timeout_wrЩe
);

964 
	`cЏsidФ_wrЩЪg
(
bev_s¶
);

967 
	}
}

971 
	$be_ЁТs¶_ТabЋ
(
bufгїvТt
 *
bev
, 
evТts
)

973 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

974 
r1
 = 0, 
r2
 = 0;

976 iа(
bev_s¶
->
°©e
 !р
BUFFEREVENT_SSL_OPEN
)

979 iа(
evТts
 & 
EV_READ
)

980 
r1
 = 
	`°ђt_їadЪg
(
bev_s¶
);

981 iа(
evТts
 & 
EV_WRITE
)

982 
r2
 = 
	`°ђt_wrЩЪg
(
bev_s¶
);

984 iа(
bev_s¶
->
undФlyЪg
) {

985 iа(
evТts
 & 
EV_READ
)

986 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
bev
);

987 iа(
evТts
 & 
EV_WRITE
)

988 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
bev
);

990 iа(
evТts
 & 
EV_READ
)

991 
	`cЏsidФ_їadЪg
(
bev_s¶
);

992 iа(
evТts
 & 
EV_WRITE
)

993 
	`cЏsidФ_wrЩЪg
(
bev_s¶
);

995  (
r1
 < 0 || 
r2
 < 0) ? -1 : 0;

996 
	}
}

999 
	$be_ЁТs¶_diІbЋ
(
bufгїvТt
 *
bev
, 
evТts
)

1001 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

1002 iа(
bev_s¶
->
°©e
 !р
BUFFEREVENT_SSL_OPEN
)

1005 iа(
evТts
 & 
EV_READ
)

1006 
	`°Ё_їadЪg
(
bev_s¶
);

1007 iа(
evТts
 & 
EV_WRITE
)

1008 
	`°Ё_wrЩЪg
(
bev_s¶
);

1010 iа(
bev_s¶
->
undФlyЪg
) {

1011 iа(
evТts
 & 
EV_READ
)

1012 
	`BEV_DEL_GENERIC_READ_TIMEOUT
(
bev
);

1013 iа(
evТts
 & 
EV_WRITE
)

1014 
	`BEV_DEL_GENERIC_WRITE_TIMEOUT
(
bev
);

1017 
	}
}

1020 
	$be_ЁТs¶_de°ruщ
(
bufгїvТt
 *
bev
)

1022 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

1024 iа(
bev_s¶
->
undФlyЪg
) {

1025 
	`_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bev
);

1027 
	`evТt_dЦ
(&
bev
->
ev_їad
);

1028 
	`evТt_dЦ
(&
bev
->
ev_wrЩe
);

1031 iа(
bev_s¶
->
bev
.
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
) {

1032 iа(
bev_s¶
->
undФlyЪg
) {

1033 
	`bufгїvТt_дУ
(
bev_s¶
->
undФlyЪg
);

1034 
bev_s¶
->
undФlyЪg
 = 
NULL
;

1036 
	`SSL_дУ
(
bev_s¶
->
s¶
);

1038 
	}
}

1041 
	$be_ЁТs¶_adj_timeouts
(
bufгїvТt
 *
bev
)

1043 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

1045 iа(
bev_s¶
->
undФlyЪg
)

1046  
	`_bufгїvТt_gТФic_adj_timeouts
(
bev
);

1048 
r1
=0, 
r2
=0;

1049 iа(
	`evТt_≥ndЪg
(&
bev
->
ev_їad
, 
EV_READ
, 
NULL
))

1050 
r1
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_їad
, &bev->
timeout_їad
);

1051 iа(
	`evТt_≥ndЪg
(&
bev
->
ev_wrЩe
, 
EV_WRITE
, 
NULL
))

1052 
r2
 = 
	`_bufгїvТt_add_evТt
(&
bev
->
ev_wrЩe
, &bev->
timeout_wrЩe
);

1053  (
r1
<0 || 
r2
<0) ? -1 : 0;

1055 
	}
}

1058 
	$be_ЁТs¶_жush
(
bufгїvТt
 *
buгv
,

1059 
iўy≥
, 
bufгїvТt_жush_mode
 
mode
)

1063 
	}
}

1066 
	$be_ЁТs¶_щЊ
(
bufгїvТt
 *
bev
,

1067 
bufгїvТt_щЊ_Ё
 
Ё
, 
bufгїvТt_щЊ_d©a
 *
d©a
)

1069 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
bev
);

1070 
Ё
) {

1071 
BEV_CTRL_SET_FD
:

1072 iа(
bev_s¶
->
undФlyЪg
)

1075 
жag
 = 0;

1076 
BIO
 *
bio
;

1077 iа(
bev_s¶
->
bev
.
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
)

1078 
жag
 = 1;

1079 
bio
 = 
	`BIO_√w_sockС
(
d©a
->
fd
, 
жag
);

1080 
	`SSL_£t_bio
(
bev_s¶
->
s¶
, 
bio
, bio);

1081 
bev_s¶
->
fd_is_£t
 = 1;

1083 iа(
bev_s¶
->
°©e
 =р
BUFFEREVENT_SSL_OPEN
)

1084  
	`£t_ЁТ_€ќbacks
(
bev_s¶
, 
d©a
->
fd
);

1086  
	`£t_h™dshake_€ќbacks
(
bev_s¶
, 
d©a
->
fd
);

1088 
BEV_CTRL_GET_FD
:

1089 iа(
bev_s¶
->
undФlyЪg
)

1091 iа(!
bev_s¶
->
fd_is_£t
)

1093 
d©a
->
fd
 = 
	`evТt_gС_fd
(&
bev
->
ev_їad
);

1095 
BEV_CTRL_GET_UNDERLYING
:

1096 iа(!
bev_s¶
->
undФlyЪg
)

1098 
d©a
->
±r
 = 
bev_s¶
->
undФlyЪg
;

1103 
	}
}

1105 
SSL
 *

1106 
	$bufгїvТt_ЁТs¶_gС_s¶
(
bufгїvТt
 *
buгv
)

1108 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
	`up€°
(
buгv
);

1109 iа(!
bev_s¶
)

1110  
NULL
;

1111  
bev_s¶
->
s¶
;

1112 
	}
}

1114 
bufгїvТt
 *

1115 
	$bufгїvТt_ЁТs¶_√w_imґ
(
evТt_ba£
 *
ba£
,

1116 
bufгїvТt
 *
undФlyЪg
,

1117 
evutЮ_sockС_t
 
fd
,

1118 
SSL
 *
s¶
,

1119 
bufгїvТt_s¶_°©e
 
°©e
,

1120 
ЁtiЏs
)

1122 
bufгїvТt_ЁТs¶
 *
bev_s¶
 = 
NULL
;

1123 
bufгїvТt_іiv©e
 *
bev_p
 = 
NULL
;

1124 
tmp_ЁtiЏs
 = 
ЁtiЏs
 & ~
BEV_OPT_THREADSAFE
;

1126 iа(
undФlyЪg
 !р
NULL
 && 
fd
 >= 0)

1127  
NULL
;

1129 iа(!(
bev_s¶
 = 
	`mm_€ќoc
(1, (
bufгїvТt_ЁТs¶
))))

1130 
Фr
;

1132 
bev_p
 = &
bev_s¶
->
bev
;

1134 iа(
	`bufгїvТt_ЪЩ_commЏ
(
bev_p
, 
ba£
,

1135 &
bufгїvТt_Ёs_ЁТs¶
, 
tmp_ЁtiЏs
) < 0)

1136 
Фr
;

1140 
	`SSL_£t_mode
(
s¶
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

1142 
bev_s¶
->
undФlyЪg
 = underlying;

1143 
bev_s¶
->
s¶
 = ssl;

1145 
bev_s¶
->
outbuf_cb
 = 
	`evbufгr_add_cb
(
bev_p
->
bev
.
ouНut
,

1146 
be_ЁТs¶_outbuf_cb
, 
bev_s¶
);

1148 iа(
ЁtiЏs
 & 
BEV_OPT_THREADSAFE
)

1149 
	`bufгїvТt_ТabЋ_lockЪg
(&
bev_s¶
->
bev
.bev, 
NULL
);

1151 iа(
undФlyЪg
) {

1152 
	`_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(&
bev_s¶
->
bev
.bev);

1153 
	`bufгїvТt_Ъьef
(
undФlyЪg
);

1156 
bev_s¶
->
°©e
 = state;

1157 
bev_s¶
->
ѕ°_wrЩe
 = -1;

1159 
°©e
) {

1160 
BUFFEREVENT_SSL_ACCEPTING
:

1161 
	`SSL_£t_acы±_°©e
(
bev_s¶
->
s¶
);

1162 iа(
	`£t_h™dshake_€ќbacks
(
bev_s¶
, 
fd
) < 0)

1163 
Фr
;

1165 
BUFFEREVENT_SSL_CONNECTING
:

1166 
	`SSL_£t_cЏ√щ_°©e
(
bev_s¶
->
s¶
);

1167 iа(
	`£t_h™dshake_€ќbacks
(
bev_s¶
, 
fd
) < 0)

1168 
Фr
;

1170 
BUFFEREVENT_SSL_OPEN
:

1171 iа(
	`£t_ЁТ_€ќbacks
(
bev_s¶
, 
fd
) < 0)

1172 
Фr
;

1175 
Фr
;

1178 iа(
undФlyЪg
)

1179 
	`bufгїvТt_ТabЋ
(
undФlyЪg
, 
EV_READ
|
EV_WRITE
);

1181 
bev_s¶
->
bev
.bev.
ТabЋd
 = 
EV_READ
|
EV_WRITE
;

1182 iа(
bev_s¶
->
fd_is_£t
) {

1184 iа(
	`evТt_add
(&
bev_s¶
->
bev
.bev.
ev_їad
, 
NULL
) < 0)

1185 
Фr
;

1186 iа(
	`evТt_add
(&
bev_s¶
->
bev
.bev.
ev_wrЩe
, 
NULL
) < 0)

1187 
Фr
;

1191  &
bev_s¶
->
bev
.bev;

1192 
Фr
:

1193 iа(
bev_s¶
)

1194 
	`bufгїvТt_дУ
(&
bev_s¶
->
bev
.bev);

1195  
NULL
;

1196 
	}
}

1198 
bufгїvТt
 *

1199 
	$bufгїvТt_ЁТs¶_fЮЛr_√w
(
evТt_ba£
 *
ba£
,

1200 
bufгїvТt
 *
undФlyЪg
,

1201 
SSL
 *
s¶
,

1202 
bufгїvТt_s¶_°©e
 
°©e
,

1203 
ЁtiЏs
)

1205 
юo£_жag
 = 
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
;

1206 
BIO
 *
bio
;

1207 iа(!
undФlyЪg
)

1208  
NULL
;

1209 iа(!(
bio
 = 
	`BIO_√w_bufгїvТt
(
undФlyЪg
, 
юo£_жag
)))

1210  
NULL
;

1212 
	`SSL_£t_bio
(
s¶
, 
bio
, bio);

1214  
	`bufгїvТt_ЁТs¶_√w_imґ
(

1215 
ba£
, 
undФlyЪg
, -1, 
s¶
, 
°©e
, 
ЁtiЏs
);

1216 
	}
}

1218 
bufгїvТt
 *

1219 
	$bufгїvТt_ЁТs¶_sockС_√w
(
evТt_ba£
 *
ba£
,

1220 
evutЮ_sockС_t
 
fd
,

1221 
SSL
 *
s¶
,

1222 
bufгїvТt_s¶_°©e
 
°©e
,

1223 
ЁtiЏs
)

1226 
BIO
 *
bio
 = 
	`SSL_gС_wbio
(
s¶
);

1227 
have_fd
 = -1;

1228 iа(
bio
)

1229 
have_fd
 = 
	`BIO_gС_fd
(
bio
, 
NULL
);

1231 iа(
have_fd
 >= 0) {

1233 iа(
fd
 < 0) {

1235 
fd
 = (
evutЮ_sockС_t
и
have_fd
;

1236 } iа(
have_fd
 =р()
fd
) {

1241  
NULL
;

1245 iа(
fd
 >= 0) {

1247 
shutdown_жag
 = 0;

1248 iа(
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
)

1249 
shutdown_жag
 = 1;

1250 
bio
 = 
	`BIO_√w_sockС
(
fd
, 
shutdown_жag
);

1251 
	`SSL_£t_bio
(
s¶
, 
bio
, bio);

1257  
	`bufгїvТt_ЁТs¶_√w_imґ
(

1258 
ba£
, 
NULL
, 
fd
, 
s¶
, 
°©e
, 
ЁtiЏs
);

1259 
	}
}

1262 
	$bufгїvТt_gС_ЁТs¶_Фr№
(
bufгїvТt
 *
bev
)

1264 
Фr
 = 0;

1265 
bufгїvТt_ЁТs¶
 *
bev_s¶
;

1266 
	`BEV_LOCK
(
bev
);

1267 
bev_s¶
 = 
	`up€°
(
bev
);

1268 iа(
bev_s¶
 && bev_s¶->
n_Фr№s
) {

1269 
Фr
 = 
bev_s¶
->
Фr№s
[--bev_s¶->
n_Фr№s
];

1271 
	`BEV_UNLOCK
(
bev
);

1272  
Фr
;

1273 
	}
}

	@bufferevent_pair.c

27 
	~<sys/ty≥s.h
>

29 #ifdeа
WIN32


30 
	~<wЪsock2.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~"evТt2/utЮ.h
"

36 
	~"evТt2/bufгr.h
"

37 
	~"evТt2/bufгїvТt.h
"

38 
	~"evТt2/bufгїvТt_°ruщ.h
"

39 
	~"evТt2/evТt.h
"

40 
	~"deгr-ЪЛЇЃ.h
"

41 
	~"bufгїvТt-ЪЛЇЃ.h
"

42 
	~"mm-ЪЛЇЃ.h
"

43 
	~"utЮ-ЪЛЇЃ.h
"

45 
	sbufгїvТt_ЈЬ
 {

46 
bufгїvТt_іiv©e
 
	mbev
;

47 
bufгїvТt_ЈЬ
 *
	mЈє√r
;

53 
ЪlЪe
 
bufгїvТt_ЈЬ
 *

54 
	$up€°
(
bufгїvТt
 *
bev
)

56 
bufгїvТt_ЈЬ
 *
bev_p
;

57 iа(
bev
->
be_Ёs
 !р&
bufгїvТt_Ёs_ЈЬ
)

58  
NULL
;

59 
bev_p
 = 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_ЈЬ
, bev.bev);

60 
	`EVUTIL_ASSERT
(
bev_p
->
bev
.bev.
be_Ёs
 =р&
bufгїvТt_Ёs_ЈЬ
);

61  
bev_p
;

62 
	}
}

64 
	#down€°
(
bev_ЈЬ
и(&(bev_ЈЬ)->
bev
.bev)

	)

66 
ЪlЪe
 

67 
	$Ъьef_™d_lock
(
bufгїvТt
 *
b
)

69 
bufгїvТt_ЈЬ
 *
bevp
;

70 
	`_bufгїvТt_Ъьef_™d_lock
(
b
);

71 
bevp
 = 
	`up€°
(
b
);

72 iа(
bevp
->
Јє√r
)

73 
	`_bufгїvТt_Ъьef_™d_lock
(
	`down€°
(
bevp
->
Јє√r
));

74 
	}
}

76 
ЪlЪe
 

77 
	$deьef_™d_u∆ock
(
bufгїvТt
 *
b
)

79 
bufгїvТt_ЈЬ
 *
bevp
 = 
	`up€°
(
b
);

80 iа(
bevp
->
Јє√r
)

81 
	`_bufгїvТt_deьef_™d_u∆ock
(
	`down€°
(
bevp
->
Јє√r
));

82 
	`_bufгїvТt_deьef_™d_u∆ock
(
b
);

83 
	}
}

87 
be_ЈЬ_outbuf_cb
(
evbufгr
 *,

88 cЏ° 
evbufгr_cb_Ъfo
 *, *);

90 
bufгїvТt_ЈЬ
 *

91 
	$bufгїvТt_ЈЬ_Цt_√w
(
evТt_ba£
 *
ba£
,

92 
ЁtiЏs
)

94 
bufгїvТt_ЈЬ
 *
buгv
;

95 iа(! (
buгv
 = 
	`mm_€ќoc
(1, (
bufгїvТt_ЈЬ
))))

96  
NULL
;

97 iа(
	`bufгїvТt_ЪЩ_commЏ
(&
buгv
->
bev
, 
ba£
, &
bufгїvТt_Ёs_ЈЬ
,

98 
ЁtiЏs
)) {

99 
	`mm_дУ
(
buгv
);

100  
NULL
;

102 iа(!
	`evbufгr_add_cb
(
buгv
->
bev
.bev.
ouНut
, 
be_ЈЬ_outbuf_cb
, bufev)) {

103 
	`bufгїvТt_дУ
(
	`down€°
(
buгv
));

104  
NULL
;

107 
	`_bufгїvТt_ЪЩ_gТФic_timeout_cbs
(&
buгv
->
bev
.bev);

109  
buгv
;

110 
	}
}

113 
	$bufгїvТt_ЈЬ_√w
(
evТt_ba£
 *
ba£
, 
ЁtiЏs
,

114 
bufгїvТt
 *
ЈЬ
[2])

116 
bufгїvТt_ЈЬ
 *
buгv1
 = 
NULL
, *
buгv2
 = NULL;

117 
tmp_ЁtiЏs
;

119 
ЁtiЏs
 |р
BEV_OPT_DEFER_CALLBACKS
;

120 
tmp_ЁtiЏs
 = 
ЁtiЏs
 & ~
BEV_OPT_THREADSAFE
;

122 
buгv1
 = 
	`bufгїvТt_ЈЬ_Цt_√w
(
ba£
, 
ЁtiЏs
);

123 iа(!
buгv1
)

125 
buгv2
 = 
	`bufгїvТt_ЈЬ_Цt_√w
(
ba£
, 
tmp_ЁtiЏs
);

126 iа(!
buгv2
) {

127 
	`bufгїvТt_дУ
(
	`down€°
(
buгv1
));

131 iа(
ЁtiЏs
 & 
BEV_OPT_THREADSAFE
) {

133 
	`bufгїvТt_ТabЋ_lockЪg
(
	`down€°
(
buгv2
), 
buгv1
->
bev
.
lock
);

136 
buгv1
->
Јє√r
 = 
buгv2
;

137 
buгv2
->
Јє√r
 = 
buгv1
;

139 
	`evbufгr_дУze
(
	`down€°
(
buгv1
)->
Ъput
, 0);

140 
	`evbufгr_дУze
(
	`down€°
(
buгv1
)->
ouНut
, 1);

141 
	`evbufгr_дУze
(
	`down€°
(
buгv2
)->
Ъput
, 0);

142 
	`evbufгr_дУze
(
	`down€°
(
buгv2
)->
ouНut
, 1);

144 
ЈЬ
[0] = 
	`down€°
(
buгv1
);

145 
ЈЬ
[1] = 
	`down€°
(
buгv2
);

148 
	}
}

151 
	$be_ЈЬ_М™sгr
(
bufгїvТt
 *
§c
, bufгїvТИ*
d°
,

152 
ign№e_wm
)

154 
size_t
 
§c_size
, 
d°_size
;

155 
size_t
 
n
;

157 
	`evbufгr_unдУze
(
§c
->
ouНut
, 1);

158 
	`evbufгr_unдУze
(
d°
->
Ъput
, 0);

160 iа(
d°
->
wm_їad
.
high
) {

161 
size_t
 
d°_size
 = 
	`evbufгr_gС_Ћngth
(
d°
->
Ъput
);

162 iа(
d°_size
 < 
d°
->
wm_їad
.
high
) {

163 
n
 = 
d°
->
wm_їad
.
high
 - 
d°_size
;

164 
	`evbufгr_їmove_bufгr
(
§c
->
ouНut
, 
d°
->
Ъput
, 
n
);

166 iа(!
ign№e_wm
)

167 
dЏe
;

168 
n
 = 
	`evbufгr_gС_Ћngth
(
§c
->
ouНut
);

169 
	`evbufгr_add_bufгr
(
d°
->
Ъput
, 
§c
->
ouНut
);

172 
n
 = 
	`evbufгr_gС_Ћngth
(
§c
->
ouНut
);

173 
	`evbufгr_add_bufгr
(
d°
->
Ъput
, 
§c
->
ouНut
);

176 iа(
n
) {

177 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
d°
);

179 iа(
	`evbufгr_gС_Ћngth
(
d°
->
ouНut
))

180 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
d°
);

182 
	`BEV_DEL_GENERIC_WRITE_TIMEOUT
(
d°
);

185 
§c_size
 = 
	`evbufгr_gС_Ћngth
(
§c
->
ouНut
);

186 
d°_size
 = 
	`evbufгr_gС_Ћngth
(
d°
->
Ъput
);

188 iа(
d°_size
 >р
d°
->
wm_їad
.
low
) {

189 
	`_bufгїvТt_run_їadcb
(
d°
);

191 iа(
§c_size
 <р
§c
->
wm_wrЩe
.
low
) {

192 
	`_bufгїvТt_run_wrЩecb
(
§c
);

194 
dЏe
:

195 
	`evbufгr_дУze
(
§c
->
ouНut
, 1);

196 
	`evbufгr_дУze
(
d°
->
Ъput
, 0);

197 
	}
}

199 
ЪlЪe
 

200 
	$be_ЈЬ_w™ts_to_Пlk
(
bufгїvТt_ЈЬ
 *
§c
,

201 
bufгїvТt_ЈЬ
 *
d°
)

203  (
	`down€°
(
§c
)->
ТabЋd
 & 
EV_WRITE
) &&

204 (
	`down€°
(
d°
)->
ТabЋd
 & 
EV_READ
) &&

205 !
d°
->
bev
.
їad_su•Тded
 &&

206 
	`evbufгr_gС_Ћngth
(
	`down€°
(
§c
)->
ouНut
);

207 
	}
}

210 
	$be_ЈЬ_outbuf_cb
(
evbufгr
 *
outbuf
,

211 cЏ° 
evbufгr_cb_Ъfo
 *
Ъfo
, *
ђg
)

213 
bufгїvТt_ЈЬ
 *
bev_ЈЬ
 = 
ђg
;

214 
bufгїvТt_ЈЬ
 *
Јє√r
 = 
bev_ЈЬ
->partner;

216 
	`Ъьef_™d_lock
(
	`down€°
(
bev_ЈЬ
));

218 iа(
Ъfo
->
n_added
 > info->
n_dЦСed
 && 
Јє√r
) {

221 iа(
	`be_ЈЬ_w™ts_to_Пlk
(
bev_ЈЬ
, 
Јє√r
)) {

222 
	`be_ЈЬ_М™sгr
(
	`down€°
(
bev_ЈЬ
), down€°(
Јє√r
), 0);

226 
	`deьef_™d_u∆ock
(
	`down€°
(
bev_ЈЬ
));

227 
	}
}

230 
	$be_ЈЬ_ТabЋ
(
bufгїvТt
 *
buгv
, 
evТts
)

232 
bufгїvТt_ЈЬ
 *
bev_p
 = 
	`up€°
(
buгv
);

233 
bufгїvТt_ЈЬ
 *
Јє√r
 = 
bev_p
->partner;

235 
	`Ъьef_™d_lock
(
buгv
);

237 iа(
evТts
 & 
EV_READ
) {

238 
	`BEV_RESET_GENERIC_READ_TIMEOUT
(
buгv
);

240 iа((
evТts
 & 
EV_WRITE
и&& 
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
))

241 
	`BEV_RESET_GENERIC_WRITE_TIMEOUT
(
buгv
);

244 iа((
evТts
 & 
EV_READ
и&& 
Јє√r
 &&

245 
	`be_ЈЬ_w™ts_to_Пlk
(
Јє√r
, 
bev_p
)) {

246 
	`be_ЈЬ_М™sгr
(
	`down€°
(
Јє√r
), 
buгv
, 0);

249 iа((
evТts
 & 
EV_WRITE
и&& 
Јє√r
 &&

250 
	`be_ЈЬ_w™ts_to_Пlk
(
bev_p
, 
Јє√r
)) {

251 
	`be_ЈЬ_М™sгr
(
buгv
, 
	`down€°
(
Јє√r
), 0);

253 
	`deьef_™d_u∆ock
(
buгv
);

255 
	}
}

258 
	$be_ЈЬ_diІbЋ
(
bufгїvТt
 *
bev
, 
evТts
)

260 iа(
evТts
 & 
EV_READ
) {

261 
	`BEV_DEL_GENERIC_READ_TIMEOUT
(
bev
);

263 iа(
evТts
 & 
EV_WRITE
)

264 
	`BEV_DEL_GENERIC_WRITE_TIMEOUT
(
bev
);

266 
	}
}

269 
	$be_ЈЬ_de°ruщ
(
bufгїvТt
 *
bev
)

271 
bufгїvТt_ЈЬ
 *
bev_p
 = 
	`up€°
(
bev
);

273 iа(
bev_p
->
Јє√r
) {

274 
bev_p
->
Јє√r
->Јє√Єр
NULL
;

275 
bev_p
->
Јє√r
 = 
NULL
;

278 
	`_bufгїvТt_dЦ_gТФic_timeout_cbs
(
bev
);

279 
	}
}

282 
	$be_ЈЬ_жush
(
bufгїvТt
 *
bev
, 
iўy≥
,

283 
bufгїvТt_жush_mode
 
mode
)

285 
bufгїvТt_ЈЬ
 *
bev_p
 = 
	`up€°
(
bev
);

286 
bufгїvТt
 *
Јє√r
;

287 
	`Ъьef_™d_lock
(
bev
);

288 iа(!
bev_p
->
Јє√r
)

291 
Јє√r
 = 
	`down€°
(
bev_p
->partner);

293 iа(
mode
 =р
BEV_NORMAL
)

296 iа((
iўy≥
 & 
EV_READ
) != 0)

297 
	`be_ЈЬ_М™sгr
(
Јє√r
, 
bev
, 1);

299 iа((
iўy≥
 & 
EV_WRITE
) != 0)

300 
	`be_ЈЬ_М™sгr
(
bev
, 
Јє√r
, 1);

302 iа(
mode
 =р
BEV_FINISHED
) {

303 
	`_bufгїvТt_run_evТtcb
(
Јє√r
, 
iўy≥
|
BEV_EVENT_EOF
);

305 
	`deьef_™d_u∆ock
(
bev
);

307 
	}
}

309 cЏ° 
bufгїvТt_Ёs
 
	gbufгїvТt_Ёs_ЈЬ
 = {

311 
evutЮ_off£tof
(
bufгїvТt_ЈЬ
, 
bev
),

312 
be_ЈЬ_ТabЋ
,

313 
be_ЈЬ_diІbЋ
,

314 
be_ЈЬ_de°ruщ
,

315 
_bufгїvТt_gТФic_adj_timeouts
,

316 
be_ЈЬ_жush
,

317 
NULL
,

	@bufferevent_ratelim.c

29 
	~<sys/ty≥s.h
>

30 
	~<limЩs.h
>

31 
	~<°rЪg.h
>

32 
	~<°dlib.h
>

34 
	~"evТt2/evТt.h
"

35 
	~"evТt2/evТt_°ruщ.h
"

36 
	~"evТt2/utЮ.h
"

37 
	~"evТt2/bufгїvТt.h
"

38 
	~"evТt2/bufгїvТt_°ruщ.h
"

39 
	~"evТt2/bufгr.h
"

41 
	~"њЛlim-ЪЛЇЃ.h
"

43 
	~"bufгїvТt-ЪЛЇЃ.h
"

44 
	~"mm-ЪЛЇЃ.h
"

45 
	~"utЮ-ЪЛЇЃ.h
"

48 
	$ev_tokТ_buckС_ЪЩ
(
ev_tokТ_buckС
 *
buckС
,

49 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
,

50 
ev_uЪt32_t
 
cuЉТt_tick
,

51 
їЪЩЯlize
)

53 iа(
їЪЩЯlize
) {

59 iа(
buckС
->
їad_limЩ
 > 
cfg
->
їad_maximum
)

60 
buckС
->
їad_limЩ
 = 
cfg
->
їad_maximum
;

61 iа(
buckС
->
wrЩe_limЩ
 > 
cfg
->
wrЩe_maximum
)

62 
buckС
->
wrЩe_limЩ
 = 
cfg
->
wrЩe_maximum
;

64 
buckС
->
їad_limЩ
 = 
cfg
->
їad_њЛ
;

65 
buckС
->
wrЩe_limЩ
 = 
cfg
->
wrЩe_њЛ
;

66 
buckС
->
ѕ°_upd©ed
 = 
cuЉТt_tick
;

69 
	}
}

72 
	$ev_tokТ_buckС_upd©e
(
ev_tokТ_buckС
 *
buckС
,

73 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
,

74 
ev_uЪt32_t
 
cuЉТt_tick
)

78 
n_ticks
 = 
cuЉТt_tick
 - 
buckС
->
ѕ°_upd©ed
;

82 iа(
n_ticks
 =р0 ||В_tick†> 
INT_MAX
)

94 iа((
cfg
->
їad_maximum
 - 
buckС
->
їad_limЩ
и/ 
n_ticks
 < cfg->
їad_њЛ
)

95 
buckС
->
їad_limЩ
 = 
cfg
->
їad_maximum
;

97 
buckС
->
їad_limЩ
 +р
n_ticks
 * 
cfg
->
їad_њЛ
;

100 iа((
cfg
->
wrЩe_maximum
 - 
buckС
->
wrЩe_limЩ
и/ 
n_ticks
 < cfg->
wrЩe_њЛ
)

101 
buckС
->
wrЩe_limЩ
 = 
cfg
->
wrЩe_maximum
;

103 
buckС
->
wrЩe_limЩ
 +р
n_ticks
 * 
cfg
->
wrЩe_њЛ
;

106 
buckС
->
ѕ°_upd©ed
 = 
cuЉТt_tick
;

109 
	}
}

111 
ЪlЪe
 

112 
	$bufгїvТt_upd©e_buckСs
(
bufгїvТt_іiv©e
 *
bev
)

115 
timevЃ
 
now
;

116 
tick
;

117 
	`evТt_ba£_gСtimeofday_€ched
(
bev
->bev.
ev_ba£
, &
now
);

118 
tick
 = 
	`ev_tokТ_buckС_gС_tick
(&
now
, 
bev
->
њЛ_limЩЪg
->
cfg
);

119 iа(
tick
 !р
bev
->
њЛ_limЩЪg
->
limЩ
.
ѕ°_upd©ed
)

120 
	`ev_tokТ_buckС_upd©e
(&
bev
->
њЛ_limЩЪg
->
limЩ
,

121 
bev
->
њЛ_limЩЪg
->
cfg
, 
tick
);

122 
	}
}

124 
ev_uЪt32_t


125 
	$ev_tokТ_buckС_gС_tick
(cЏ° 
timevЃ
 *
tv
,

126 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
)

136 
ev_uЪt64_t
 
m£c
 = (ev_uЪt64_t)
tv
->
tv_£c
 * 1000 +Бv->
tv_u£c
 / 1000;

137  ()(
m£c
 / 
cfg
->
m£c_≥r_tick
);

138 
	}
}

140 
ev_tokТ_buckС_cfg
 *

141 
	$ev_tokТ_buckС_cfg_√w
(
ev_uЪt32_t
 
їad_њЛ
,Гv_uЪt32_И
їad_bur°
,

142 
ev_uЪt32_t
 
wrЩe_њЛ
,Гv_uЪt32_И
wrЩe_bur°
,

143 cЏ° 
timevЃ
 *
tick_Ћn
)

145 
ev_tokТ_buckС_cfg
 *
r
;

146 
timevЃ
 
g
;

147 iа(! 
tick_Ћn
) {

148 
g
.
tv_£c
 = 1;

149 
g
.
tv_u£c
 = 0;

150 
tick_Ћn
 = &
g
;

152 iа(
їad_њЛ
 > 
їad_bur°
 || 
wrЩe_њЛ
 > 
wrЩe_bur°
 ||

153 
їad_њЛ
 < 1 || 
wrЩe_њЛ
 < 1)

154  
NULL
;

155 
r
 = 
	`mm_€ќoc
(1, (
ev_tokТ_buckС_cfg
));

156 iа(!
r
)

157  
NULL
;

158 
r
->
їad_њЛ
 =Дead_rate;

159 
r
->
wrЩe_њЛ
 = write_rate;

160 
r
->
їad_maximum
 = 
їad_bur°
;

161 
r
->
wrЩe_maximum
 = 
wrЩe_bur°
;

162 
	`memэy
(&
r
->
tick_timeout
, 
tick_Ћn
, (
timevЃ
));

163 
r
->
m£c_≥r_tick
 = (
tick_Ћn
->
tv_£c
 * 1000и+Бick_Ћn->
tv_u£c
/1000;

164  
r
;

165 
	}
}

168 
	$ev_tokТ_buckС_cfg_дУ
(
ev_tokТ_buckС_cfg
 *
cfg
)

170 
	`mm_дУ
(
cfg
);

171 
	}
}

175 
	#MAX_TO_READ_EVER
 16384

	)

178 
	#MAX_TO_WRITE_EVER
 16384

	)

180 
	#LOCK_GROUP
(
g
и
	`EVLOCK_LOCK
((g)->
lock
, 0)

	)

181 
	#UNLOCK_GROUP
(
g
и
	`EVLOCK_UNLOCK
((g)->
lock
, 0)

	)

183 
_bev_group_su•Тd_їadЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
);

184 
_bev_group_su•Тd_wrЩЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
);

190 
ЪlЪe
 

191 
	$_bufгїvТt_gС_Њim_max
(
bufгїvТt_іiv©e
 *
bev
, 
is_wrЩe
)

194 
max_so_зr
 = 
is_wrЩe
?
MAX_TO_WRITE_EVER
:
MAX_TO_READ_EVER
;

196 
	#LIM
(
x
) \

197 (
is_wrЩe
 ? (
x
).
wrЩe_limЩ
 : (x).
їad_limЩ
)

	)

199 
	#GROUP_SUSPENDED
(
g
) \

200 (
is_wrЩe
 ? (
g
)->
wrЩe_su•Тded
 : (g)->
їad_su•Тded
)

	)

203 
	#CLAMPTO
(
x
) \

205 iа(
max_so_зr
 > (
x
)) \

206 
max_so_зr
 = (
x
); \

207 } 0);

	)

209 iа(!
bev
->
њЛ_limЩЪg
)

210  
max_so_зr
;

217 iа(
bev
->
њЛ_limЩЪg
->
cfg
) {

218 
	`bufгїvТt_upd©e_buckСs
(
bev
);

219 
max_so_зr
 = 
	`LIM
(
bev
->
њЛ_limЩЪg
->
limЩ
);

221 iа(
bev
->
њЛ_limЩЪg
->
group
) {

222 
bufгїvТt_њЛ_limЩ_group
 *
g
 =

223 
bev
->
њЛ_limЩЪg
->
group
;

224 
ev_uЪt32_t
 
shђe
;

225 
	`LOCK_GROUP
(
g
);

226 iа(
	`GROUP_SUSPENDED
(
g
)) {

230 iа(
is_wrЩe
)

231 
	`bufгїvТt_su•Тd_wrЩe
(&
bev
->bev,

232 
BEV_SUSPEND_BW_GROUP
);

234 
	`bufгїvТt_su•Тd_їad
(&
bev
->bev,

235 
BEV_SUSPEND_BW_GROUP
);

236 
shђe
 = 0;

240 
shђe
 = 
	`LIM
(
g
->
њЛ_limЩ
и/ g->
n_membФs
;

241 iа(
shђe
 < 
g
->
mЪ_shђe
)

242 
shђe
 = 
g
->
mЪ_shђe
;

244 
	`UNLOCK_GROUP
(
g
);

245 
	`CLAMPTO
(
shђe
);

248  
max_so_зr
;

249 
	}
}

252 
	$_bufгїvТt_gС_їad_max
(
bufгїvТt_іiv©e
 *
bev
)

254  
	`_bufгїvТt_gС_Њim_max
(
bev
, 0);

255 
	}
}

258 
	$_bufгїvТt_gС_wrЩe_max
(
bufгїvТt_іiv©e
 *
bev
)

260  
	`_bufгїvТt_gС_Њim_max
(
bev
, 1);

261 
	}
}

264 
	$_bufгїvТt_deьemТt_їad_buckСs
(
bufгїvТt_іiv©e
 *
bev
, 
byЛs
)

267 
r
 = 0;

269 iа(!
bev
->
њЛ_limЩЪg
)

272 iа(
bev
->
њЛ_limЩЪg
->
cfg
) {

273 
bev
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
 -р
byЛs
;

274 iа(
bev
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
 <= 0) {

275 
	`bufгїvТt_su•Тd_їad
(&
bev
->bev, 
BEV_SUSPEND_BW
);

276 iа(
	`evТt_add
(&
bev
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
,

277 &
bev
->
њЛ_limЩЪg
->
cfg
->
tick_timeout
) < 0)

278 
r
 = -1;

282 iа(
bev
->
њЛ_limЩЪg
->
group
) {

283 
	`LOCK_GROUP
(
bev
->
њЛ_limЩЪg
->
group
);

284 
bev
->
њЛ_limЩЪg
->
group
->
њЛ_limЩ
.
їad_limЩ
 -р
byЛs
;

285 iа(
bev
->
њЛ_limЩЪg
->
group
->
њЛ_limЩ
.
їad_limЩ
 <= 0) {

286 
	`_bev_group_su•Тd_їadЪg
(
bev
->
њЛ_limЩЪg
->
group
);

288 
	`UNLOCK_GROUP
(
bev
->
њЛ_limЩЪg
->
group
);

291  
r
;

292 
	}
}

295 
	$_bufгїvТt_deьemТt_wrЩe_buckСs
(
bufгїvТt_іiv©e
 *
bev
, 
byЛs
)

298 
r
 = 0;

300 iа(!
bev
->
њЛ_limЩЪg
)

303 iа(
bev
->
њЛ_limЩЪg
->
cfg
) {

304 
bev
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
 -р
byЛs
;

305 iа(
bev
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
 <= 0) {

306 
	`bufгїvТt_su•Тd_wrЩe
(&
bev
->bev, 
BEV_SUSPEND_BW
);

307 iа(
	`evТt_add
(&
bev
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
,

308 &
bev
->
њЛ_limЩЪg
->
cfg
->
tick_timeout
) < 0)

309 
r
 = -1;

313 iа(
bev
->
њЛ_limЩЪg
->
group
) {

314 
	`LOCK_GROUP
(
bev
->
њЛ_limЩЪg
->
group
);

315 
bev
->
њЛ_limЩЪg
->
group
->
њЛ_limЩ
.
wrЩe_limЩ
 -р
byЛs
;

316 iа(
bev
->
њЛ_limЩЪg
->
group
->
њЛ_limЩ
.
wrЩe_limЩ
 <= 0) {

317 
	`_bev_group_su•Тd_wrЩЪg
(
bev
->
њЛ_limЩЪg
->
group
);

319 
	`UNLOCK_GROUP
(
bev
->
њЛ_limЩЪg
->
group
);

322  
r
;

323 
	}
}

327 
	$_bev_group_su•Тd_їadЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
)

330 
bufгїvТt_іiv©e
 *
bev
;

331 
g
->
їad_su•Тded
 = 1;

332 
g
->
≥ndЪg_unsu•Тd_їad
 = 0;

340 
	`TAILQ_FOREACH
(
bev
, &
g
->
membФs
, 
њЛ_limЩЪg
->
√xt_Ъ_group
) {

341 iа(
	`EVLOCK_TRY_LOCK
(
bev
->
lock
)) {

342 
	`bufгїvТt_su•Тd_їad
(&
bev
->bev,

343 
BEV_SUSPEND_BW_GROUP
);

344 
	`EVLOCK_UNLOCK
(
bev
->
lock
, 0);

348 
	}
}

352 
	$_bev_group_su•Тd_wrЩЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
)

355 
bufгїvТt_іiv©e
 *
bev
;

356 
g
->
wrЩe_su•Тded
 = 1;

357 
g
->
≥ndЪg_unsu•Тd_wrЩe
 = 0;

358 
	`TAILQ_FOREACH
(
bev
, &
g
->
membФs
, 
њЛ_limЩЪg
->
√xt_Ъ_group
) {

359 iа(
	`EVLOCK_TRY_LOCK
(
bev
->
lock
)) {

360 
	`bufгїvТt_su•Тd_wrЩe
(&
bev
->bev,

361 
BEV_SUSPEND_BW_GROUP
);

362 
	`EVLOCK_UNLOCK
(
bev
->
lock
, 0);

366 
	}
}

371 
	$_bev_їfЮl_€ќback
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

373 
tick
;

374 
timevЃ
 
now
;

375 
bufгїvТt_іiv©e
 *
bev
 = 
ђg
;

376 
agaЪ
 = 0;

377 
	`BEV_LOCK
(&
bev
->bev);

378 iа(!
bev
->
њЛ_limЩЪg
 || !bev->њЛ_limЩЪg->
cfg
) {

379 
	`BEV_UNLOCK
(&
bev
->bev);

384 
	`evТt_ba£_gСtimeofday_€ched
(
bev
->bev.
ev_ba£
, &
now
);

385 
tick
 = 
	`ev_tokТ_buckС_gС_tick
(&
now
,

386 
bev
->
њЛ_limЩЪg
->
cfg
);

387 
	`ev_tokТ_buckС_upd©e
(&
bev
->
њЛ_limЩЪg
->
limЩ
,

388 
bev
->
њЛ_limЩЪg
->
cfg
,

389 
tick
);

392 iа((
bev
->
їad_su•Тded
 & 
BEV_SUSPEND_BW
)) {

393 iа(
bev
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
 > 0)

394 
	`bufгїvТt_unsu•Тd_їad
(&
bev
->bev, 
BEV_SUSPEND_BW
);

396 
agaЪ
 = 1;

398 iа((
bev
->
wrЩe_su•Тded
 & 
BEV_SUSPEND_BW
)) {

399 iа(
bev
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
 > 0)

400 
	`bufгїvТt_unsu•Тd_wrЩe
(&
bev
->bev, 
BEV_SUSPEND_BW
);

402 
agaЪ
 = 1;

404 iа(
agaЪ
) {

412 
	`evТt_add
(&
bev
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
,

413 &
bev
->
њЛ_limЩЪg
->
cfg
->
tick_timeout
);

415 
	`BEV_UNLOCK
(&
bev
->bev);

416 
	}
}

419 
bufгїvТt_іiv©e
 *

420 
	$_bev_group_њndom_ЦemТt
(
bufгїvТt_њЛ_limЩ_group
 *
group
)

422 
which
;

423 
bufгїvТt_іiv©e
 *
bev
;

427 iа(!
group
->
n_membФs
)

428  
NULL
;

430 
	`EVUTIL_ASSERT
(! 
	`TAILQ_EMPTY
(&
group
->
membФs
));

432 
which
 = 
	`_evutЮ_wЧkњnd
(и% 
group
->
n_membФs
;

434 
bev
 = 
	`TAILQ_FIRST
(&
group
->
membФs
);

435 
which
--)

436 
bev
 = 
	`TAILQ_NEXT
(bev, 
њЛ_limЩЪg
->
√xt_Ъ_group
);

438  
bev
;

439 
	}
}

448 
	#FOREACH_RANDOM_ORDER
(
block
) \

450 
fЬ°
 = 
	`_bev_group_њndom_ЦemТt
(
g
); \

451 
bev
 = 
fЬ°
; bev !р
	`TAILQ_END
(&
g
->
membФs
); \

452 
bev
 = 
	`TAILQ_NEXT
(bev, 
њЛ_limЩЪg
->
√xt_Ъ_group
)) { \

453 
block
 ; \

455 
bev
 = 
	`TAILQ_FIRST
(&
g
->
membФs
); bev && bev !р
fЬ°
; \

456 
bev
 = 
	`TAILQ_NEXT
(bev, 
њЛ_limЩЪg
->
√xt_Ъ_group
)) { \

457 
block
 ; \

459 } 0)

	)

462 
	$_bev_group_unsu•Тd_їadЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
)

464 
agaЪ
 = 0;

465 
bufгїvТt_іiv©e
 *
bev
, *
fЬ°
;

467 
g
->
їad_su•Тded
 = 0;

468 
	`FOREACH_RANDOM_ORDER
({

469 iа(
	`EVLOCK_TRY_LOCK
(
bev
->
lock
)) {

470 
	`bufгїvТt_unsu•Тd_їad
(&
bev
->bev,

471 
BEV_SUSPEND_BW_GROUP
);

472 
	`EVLOCK_UNLOCK
(
bev
->
lock
, 0);

474 
agaЪ
 = 1;

477 
g
->
≥ndЪg_unsu•Тd_їad
 = 
agaЪ
;

478 
	}
}

481 
	$_bev_group_unsu•Тd_wrЩЪg
(
bufгїvТt_њЛ_limЩ_group
 *
g
)

483 
agaЪ
 = 0;

484 
bufгїvТt_іiv©e
 *
bev
, *
fЬ°
;

485 
g
->
wrЩe_su•Тded
 = 0;

487 
	`FOREACH_RANDOM_ORDER
({

488 iа(
	`EVLOCK_TRY_LOCK
(
bev
->
lock
)) {

489 
	`bufгїvТt_unsu•Тd_wrЩe
(&
bev
->bev,

490 
BEV_SUSPEND_BW_GROUP
);

491 
	`EVLOCK_UNLOCK
(
bev
->
lock
, 0);

493 
agaЪ
 = 1;

496 
g
->
≥ndЪg_unsu•Тd_wrЩe
 = 
agaЪ
;

497 
	}
}

503 
	$_bev_group_їfЮl_€ќback
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

505 
bufгїvТt_њЛ_limЩ_group
 *
g
 = 
ђg
;

506 
tick
;

507 
timevЃ
 
now
;

509 
	`evТt_ba£_gСtimeofday_€ched
(
	`evТt_gС_ba£
(&
g
->
ma°Ф_їfЮl_evТt
), &
now
);

511 
	`LOCK_GROUP
(
g
);

512 
tick
 = 
	`ev_tokТ_buckС_gС_tick
(&
now
, &
g
->
њЛ_limЩ_cfg
);

513 
	`ev_tokТ_buckС_upd©e
(&
g
->
њЛ_limЩ
, &g->
њЛ_limЩ_cfg
, 
tick
);

515 iа(
g
->
≥ndЪg_unsu•Тd_їad
 ||

516 (
g
->
їad_su•Тded
 && (g->
њЛ_limЩ
.
їad_limЩ
 >рg->
mЪ_shђe
))) {

517 
	`_bev_group_unsu•Тd_їadЪg
(
g
);

519 iа(
g
->
≥ndЪg_unsu•Тd_wrЩe
 ||

520 (
g
->
wrЩe_su•Тded
 && (g->
њЛ_limЩ
.
wrЩe_limЩ
 >рg->
mЪ_shђe
))){

521 
	`_bev_group_unsu•Тd_wrЩЪg
(
g
);

529 
	`UNLOCK_GROUP
(
g
);

530 
	}
}

533 
	$bufгїvТt_£t_њЛ_limЩ
(
bufгїvТt
 *
bev
,

534 
ev_tokТ_buckС_cfg
 *
cfg
)

536 
bufгїvТt_іiv©e
 *
bevp
 =

537 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_іiv©e
, bev);

538 
r
 = -1;

539 
bufгїvТt_њЛ_limЩ
 *
Њim
;

540 
timevЃ
 
now
;

541 
ev_uЪt32_t
 
tick
;

544 
	`BEV_LOCK
(
bev
);

546 iа(
cfg
 =р
NULL
) {

547 iа(
bevp
->
њЛ_limЩЪg
) {

548 
bevp
->
њЛ_limЩЪg
->
cfg
 = 
NULL
;

549 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_BW
);

550 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW
);

552 
r
 = 0;

553 
dЏe
;

556 
	`evТt_ba£_gСtimeofday_€ched
(
bev
->
ev_ba£
, &
now
);

557 
tick
 = 
	`ev_tokТ_buckС_gС_tick
(&
now
, 
cfg
);

559 iа(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
cfg
 == cfg) {

561 } iа(
bevp
->
њЛ_limЩЪg
) {

562 
bevp
->
њЛ_limЩЪg
->
cfg
 = cfg;

563 
	`ev_tokТ_buckС_ЪЩ
(&
bevp
->
њЛ_limЩЪg
->
limЩ
, 
cfg
, 
tick
, 1);

564 iа(
bevp
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
 > 0)

565 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_BW
);

567 
	`bufгїvТt_su•Тd_їad
(
bev
, 
BEV_SUSPEND_BW
);

568 iа(
bevp
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
 > 0)

569 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW
);

571 
	`bufгїvТt_su•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW
);

573 
Њim
 = 
	`mm_€ќoc
(1, (
bufгїvТt_њЛ_limЩ
));

574 iа(!
Њim
)

575 
dЏe
;

576 
Њim
->
cfg
 = cfg;

577 
	`ev_tokТ_buckС_ЪЩ
(&
Њim
->
limЩ
, 
cfg
, 
tick
, 0);

578 
	`evtimФ_assign
(&
Њim
->
їfЮl_buckС_evТt
, 
bev
->
ev_ba£
,

579 
_bev_їfЮl_€ќback
, 
bevp
);

580 
bevp
->
њЛ_limЩЪg
 = 
Њim
;

582 
r
 = 0;

583 
dЏe
:

584 
	`BEV_UNLOCK
(
bev
);

585  
r
;

586 
	}
}

588 
bufгїvТt_њЛ_limЩ_group
 *

589 
	$bufгїvТt_њЛ_limЩ_group_√w
(
evТt_ba£
 *
ba£
,

590 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
)

592 
bufгїvТt_њЛ_limЩ_group
 *
g
;

593 
timevЃ
 
now
;

594 
ev_uЪt32_t
 
tick
;

596 
	`evТt_ba£_gСtimeofday_€ched
(
ba£
, &
now
);

597 
tick
 = 
	`ev_tokТ_buckС_gС_tick
(&
now
, 
cfg
);

599 
g
 = 
	`mm_€ќoc
(1, (
bufгїvТt_њЛ_limЩ_group
));

600 iа(!
g
)

601  
NULL
;

602 
	`memэy
(&
g
->
њЛ_limЩ_cfg
, 
cfg
, (g->rate_limit_cfg));

603 
	`TAILQ_INIT
(&
g
->
membФs
);

605 
	`ev_tokТ_buckС_ЪЩ
(&
g
->
њЛ_limЩ
, 
cfg
, 
tick
, 0);

607 
g
->
mЪ_shђe
 = 64;

608 
	`evТt_assign
(&
g
->
ma°Ф_їfЮl_evТt
, 
ba£
, -1, 
EV_PERSIST
,

609 
_bev_group_їfЮl_€ќback
, 
g
);

611 
	`evТt_add
(&
g
->
ma°Ф_їfЮl_evТt
, &
cfg
->
tick_timeout
);

613 
	`EVTHREAD_ALLOC_LOCK
(
g
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

614  
g
;

615 
	}
}

618 
	$bufгїvТt_add_to_њЛ_limЩ_group
(
bufгїvТt
 *
bev
,

619 
bufгїvТt_њЛ_limЩ_group
 *
g
)

621 
wsu•Тd
, 
rsu•Тd
;

622 
bufгїvТt_іiv©e
 *
bevp
 =

623 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_іiv©e
, bev);

624 
	`BEV_LOCK
(
bev
);

626 iа(!
bevp
->
њЛ_limЩЪg
) {

627 
bufгїvТt_њЛ_limЩ
 *
Њim
;

628 
Њim
 = 
	`mm_€ќoc
(1, (
bufгїvТt_њЛ_limЩ
));

629 iа(!
Њim
) {

630 
	`BEV_UNLOCK
(
bev
);

633 
	`evtimФ_assign
(&
Њim
->
їfЮl_buckС_evТt
, 
bev
->
ev_ba£
,

634 
_bev_їfЮl_€ќback
, 
bevp
);

635 
bevp
->
њЛ_limЩЪg
 = 
Њim
;

638 iа(
bevp
->
њЛ_limЩЪg
->
group
 =р
g
) {

639 
	`BEV_UNLOCK
(
bev
);

642 iа(
bevp
->
њЛ_limЩЪg
->
group
)

643 
	`bufгїvТt_їmove_дom_њЛ_limЩ_group
(
bev
);

645 
	`LOCK_GROUP
(
g
);

646 
bevp
->
њЛ_limЩЪg
->
group
 = 
g
;

647 ++
g
->
n_membФs
;

648 
	`TAILQ_INSERT_TAIL
(&
g
->
membФs
, 
bevp
, 
њЛ_limЩЪg
->
√xt_Ъ_group
);

650 
rsu•Тd
 = 
g
->
їad_su•Тded
;

651 
wsu•Тd
 = 
g
->
wrЩe_su•Тded
;

653 
	`UNLOCK_GROUP
(
g
);

655 iа(
rsu•Тd
)

656 
	`bufгїvТt_su•Тd_їad
(
bev
, 
BEV_SUSPEND_BW_GROUP
);

657 iа(
wsu•Тd
)

658 
	`bufгїvТt_su•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW_GROUP
);

660 
	`BEV_UNLOCK
(
bev
);

662 
	}
}

665 
	$bufгїvТt_їmove_дom_њЛ_limЩ_group
(
bufгїvТt
 *
bev
)

667 
bufгїvТt_іiv©e
 *
bevp
 =

668 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_іiv©e
, bev);

669 
	`BEV_LOCK
(
bev
);

670 iа(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
group
) {

671 
bufгїvТt_њЛ_limЩ_group
 *
g
 =

672 
bevp
->
њЛ_limЩЪg
->
group
;

673 
	`LOCK_GROUP
(
g
);

674 
bevp
->
њЛ_limЩЪg
->
group
 = 
NULL
;

675 --
g
->
n_membФs
;

676 
	`TAILQ_REMOVE
(&
g
->
membФs
, 
bevp
, 
њЛ_limЩЪg
->
√xt_Ъ_group
);

677 
	`UNLOCK_GROUP
(
g
);

679 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_BW_GROUP
);

680 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW_GROUP
);

681 
	`BEV_UNLOCK
(
bev
);

683 
	}
}

694 
ev_ssize_t


695 
	$bufгїvТt_gС_їad_limЩ
(
bufгїvТt
 *
bev
)

697 
ev_ssize_t
 
r
;

698 
bufгїvТt_іiv©e
 *
bevp
;

699 
	`BEV_LOCK
(
bev
);

700 
bevp
 = 
	`BEV_UPCAST
(
bev
);

701 iа(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
cfg
) {

702 
	`bufгїvТt_upd©e_buckСs
(
bevp
);

703 
r
 = 
bevp
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
;

705 
r
 = 
EV_SSIZE_MAX
;

707 
	`BEV_UNLOCK
(
bev
);

708  
r
;

709 
	}
}

713 
ev_ssize_t


714 
	$bufгїvТt_gС_wrЩe_limЩ
(
bufгїvТt
 *
bev
)

716 
ev_ssize_t
 
r
;

717 
bufгїvТt_іiv©e
 *
bevp
;

718 
	`BEV_LOCK
(
bev
);

719 
bevp
 = 
	`BEV_UPCAST
(
bev
);

720 iа(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
cfg
) {

721 
	`bufгїvТt_upd©e_buckСs
(
bevp
);

722 
r
 = 
bevp
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
;

724 
r
 = 
EV_SSIZE_MAX
;

726 
	`BEV_UNLOCK
(
bev
);

727  
r
;

728 
	}
}

730 
ev_ssize_t


731 
	$bufгїvТt_gС_max_to_їad
(
bufгїvТt
 *
bev
)

733 
ev_ssize_t
 
r
;

734 
	`BEV_LOCK
(
bev
);

735 
r
 = 
	`_bufгїvТt_gС_їad_max
(
	`BEV_UPCAST
(
bev
));

736 
	`BEV_UNLOCK
(
bev
);

737  
r
;

738 
	}
}

740 
ev_ssize_t


741 
	$bufгїvТt_gС_max_to_wrЩe
(
bufгїvТt
 *
bev
)

743 
ev_ssize_t
 
r
;

744 
	`BEV_LOCK
(
bev
);

745 
r
 = 
	`_bufгїvТt_gС_wrЩe_max
(
	`BEV_UPCAST
(
bev
));

746 
	`BEV_UNLOCK
(
bev
);

747  
r
;

748 
	}
}

753 
ev_ssize_t


754 
	$bufгїvТt_њЛ_limЩ_group_gС_їad_limЩ
(

755 
bufгїvТt_њЛ_limЩ_group
 *
gљ
)

757 
ev_ssize_t
 
r
;

758 
	`LOCK_GROUP
(
gљ
);

759 
r
 = 
gљ
->
њЛ_limЩ
.
їad_limЩ
;

760 
	`UNLOCK_GROUP
(
gљ
);

761  
r
;

762 
	}
}

766 
ev_ssize_t


767 
	$bufгїvТt_њЛ_limЩ_group_gС_wrЩe_limЩ
(

768 
bufгїvТt_њЛ_limЩ_group
 *
gљ
)

770 
ev_ssize_t
 
r
;

771 
	`LOCK_GROUP
(
gљ
);

772 
r
 = 
gљ
->
њЛ_limЩ
.
wrЩe_limЩ
;

773 
	`UNLOCK_GROUP
(
gљ
);

774  
r
;

775 
	}
}

778 
	$bufгїvТt_deьemТt_їad_limЩ
(
bufгїvТt
 *
bev
, 
ev_ssize_t
 
deь
)

780 
r
 = 0;

781 
ev_Ъt32_t
 
ёd_limЩ
, 
√w_limЩ
;

782 
bufгїvТt_іiv©e
 *
bevp
;

783 
	`BEV_LOCK
(
bev
);

784 
bevp
 = 
	`BEV_UPCAST
(
bev
);

785 
	`EVUTIL_ASSERT
(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
cfg
);

786 
ёd_limЩ
 = 
bevp
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
;

788 
√w_limЩ
 = (
bevp
->
њЛ_limЩЪg
->
limЩ
.
їad_limЩ
 -р
deь
);

789 iа(
ёd_limЩ
 > 0 && 
√w_limЩ
 <= 0) {

790 
	`bufгїvТt_su•Тd_їad
(
bev
, 
BEV_SUSPEND_BW
);

791 iа(
	`evТt_add
(&
bevp
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
,

792 &
bevp
->
њЛ_limЩЪg
->
cfg
->
tick_timeout
) < 0)

793 
r
 = -1;

794 } iа(
ёd_limЩ
 <р0 && 
√w_limЩ
 > 0) {

795 
	`evТt_dЦ
(&
bevp
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
);

796 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_BW
);

799 
	`BEV_UNLOCK
(
bev
);

800  
r
;

801 
	}
}

804 
	$bufгїvТt_deьemТt_wrЩe_limЩ
(
bufгїvТt
 *
bev
, 
ev_ssize_t
 
deь
)

808 
r
 = 0;

809 
ev_Ъt32_t
 
ёd_limЩ
, 
√w_limЩ
;

810 
bufгїvТt_іiv©e
 *
bevp
;

811 
	`BEV_LOCK
(
bev
);

812 
bevp
 = 
	`BEV_UPCAST
(
bev
);

813 
	`EVUTIL_ASSERT
(
bevp
->
њЛ_limЩЪg
 && bevp->њЛ_limЩЪg->
cfg
);

814 
ёd_limЩ
 = 
bevp
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
;

816 
√w_limЩ
 = (
bevp
->
њЛ_limЩЪg
->
limЩ
.
wrЩe_limЩ
 -р
deь
);

817 iа(
ёd_limЩ
 > 0 && 
√w_limЩ
 <= 0) {

818 
	`bufгїvТt_su•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW
);

819 iа(
	`evТt_add
(&
bevp
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
,

820 &
bevp
->
њЛ_limЩЪg
->
cfg
->
tick_timeout
) < 0)

821 
r
 = -1;

822 } iа(
ёd_limЩ
 <р0 && 
√w_limЩ
 > 0) {

823 
	`evТt_dЦ
(&
bevp
->
њЛ_limЩЪg
->
їfЮl_buckС_evТt
);

824 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_BW
);

827 
	`BEV_UNLOCK
(
bev
);

828  
r
;

829 
	}
}

832 
	$bufгїvТt_њЛ_limЩ_group_deьemТt_їad
(

833 
bufгїvТt_њЛ_limЩ_group
 *
gљ
, 
ev_ssize_t
 
deь
)

835 
r
 = 0;

836 
ev_Ъt32_t
 
ёd_limЩ
, 
√w_limЩ
;

837 
	`LOCK_GROUP
(
gљ
);

838 
ёd_limЩ
 = 
gљ
->
њЛ_limЩ
.
їad_limЩ
;

839 
√w_limЩ
 = (
gљ
->
њЛ_limЩ
.
їad_limЩ
 -р
deь
);

841 iа(
ёd_limЩ
 > 0 && 
√w_limЩ
 <= 0) {

842 
	`_bev_group_su•Тd_їadЪg
(
gљ
);

843 } iа(
ёd_limЩ
 <р0 && 
√w_limЩ
 > 0) {

844 
	`_bev_group_unsu•Тd_їadЪg
(
gљ
);

847 
	`UNLOCK_GROUP
(
gљ
);

848  
r
;

849 
	}
}

852 
	$bufгїvТt_њЛ_limЩ_group_deьemТt_wrЩe
(

853 
bufгїvТt_њЛ_limЩ_group
 *
gљ
, 
ev_ssize_t
 
deь
)

855 
r
 = 0;

856 
ev_Ъt32_t
 
ёd_limЩ
, 
√w_limЩ
;

857 
	`LOCK_GROUP
(
gљ
);

858 
ёd_limЩ
 = 
gљ
->
њЛ_limЩ
.
wrЩe_limЩ
;

859 
√w_limЩ
 = (
gљ
->
њЛ_limЩ
.
wrЩe_limЩ
 -р
deь
);

861 iа(
ёd_limЩ
 > 0 && 
√w_limЩ
 <= 0) {

862 
	`_bev_group_su•Тd_wrЩЪg
(
gљ
);

863 } iа(
ёd_limЩ
 <р0 && 
√w_limЩ
 > 0) {

864 
	`_bev_group_unsu•Тd_wrЩЪg
(
gљ
);

867 
	`UNLOCK_GROUP
(
gљ
);

868  
r
;

869 
	}
}

	@bufferevent_sock.c

29 
	~<sys/ty≥s.h
>

31 
	~"evТt-cЏfig.h
"

33 #ifdeа
_EVENT_HAVE_SYS_TIME_H


34 
	~<sys/time.h
>

37 
	~<ФЇo.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rЪg.h
>

41 #ifdeа
_EVENT_HAVE_STDARG_H


42 
	~<°dђg.h
>

44 #ifdeа
_EVENT_HAVE_UNISTD_H


45 
	~<uni°d.h
>

48 #ifdeа
WIN32


49 
	~<wЪsock2.h
>

50 
	~<ws2tэЭ.h
>

53 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


54 
	~<sys/sockС.h
>

56 #ifdeа
_EVENT_HAVE_NETINET_IN_H


57 
	~<√tЪС/Ъ.h
>

59 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


60 
	~<√tЪС/Ъ6.h
>

63 
	~"evТt2/utЮ.h
"

64 
	~"evТt2/bufгїvТt.h
"

65 
	~"evТt2/bufгr.h
"

66 
	~"evТt2/bufгїvТt_°ruщ.h
"

67 
	~"evТt2/bufгїvТt_comЈt.h
"

68 
	~"evТt2/evТt.h
"

69 
	~"log-ЪЛЇЃ.h
"

70 
	~"mm-ЪЛЇЃ.h
"

71 
	~"bufгїvТt-ЪЛЇЃ.h
"

72 
	~"utЮ-ЪЛЇЃ.h
"

73 #ifdeа
WIN32


74 
	~"ioэ-ЪЛЇЃ.h
"

78 
be_sockС_ТabЋ
(
bufгїvТt
 *, );

79 
be_sockС_diІbЋ
(
bufгїvТt
 *, );

80 
be_sockС_de°ruщ
(
bufгїvТt
 *);

81 
be_sockС_adj_timeouts
(
bufгїvТt
 *);

82 
be_sockС_жush
(
bufгїvТt
 *, , 
bufгїvТt_жush_mode
);

83 
be_sockС_щЊ
(
bufгїvТt
 *, 
bufгїvТt_щЊ_Ё
, 
bufгїvТt_щЊ_d©a
 *);

85 
be_sockС_£tfd
(
bufгїvТt
 *, 
evutЮ_sockС_t
);

87 cЏ° 
bufгїvТt_Ёs
 
	gbufгїvТt_Ёs_sockС
 = {

90 
be_sockС_ТabЋ
,

91 
be_sockС_diІbЋ
,

92 
be_sockС_de°ruщ
,

93 
be_sockС_adj_timeouts
,

94 
be_sockС_жush
,

95 
be_sockС_щЊ
,

98 
	#be_sockС_add
(
ev
, 
t
) \

99 
	`_bufгїvТt_add_evТt
((
ev
), (
t
))

	)

102 
	$bufгїvТt_sockС_outbuf_cb
(
evbufгr
 *
buf
,

103 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
,

104 *
ђg
)

106 
bufгїvТt
 *
buгv
 = 
ђg
;

107 
bufгїvТt_іiv©e
 *
buгv_p
 =

108 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

110 iа(
cbЪfo
->
n_added
 &&

111 (
buгv
->
ТabЋd
 & 
EV_WRITE
) &&

112 !
	`evТt_≥ndЪg
(&
buгv
->
ev_wrЩe
, 
EV_WRITE
, 
NULL
) &&

113 !
buгv_p
->
wrЩe_su•Тded
) {

116 
	`be_sockС_add
(&
buгv
->
ev_wrЩe
, &buгv->
timeout_wrЩe
);

119 
	}
}

122 
	$bufгїvТt_їadcb
(
evutЮ_sockС_t
 
fd
, 
evТt
, *
ђg
)

124 
bufгїvТt
 *
buгv
 = 
ђg
;

125 
bufгїvТt_іiv©e
 *
buгv_p
 =

126 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

127 
evbufгr
 *
Ъput
;

128 
їs
 = 0;

129 
wh©
 = 
BEV_EVENT_READING
;

130 
howmuch
 = -1, 
їadmax
=-1;

132 
	`_bufгїvТt_Ъьef_™d_lock
(
buгv
);

134 iа(
evТt
 =р
EV_TIMEOUT
) {

135 
wh©
 |р
BEV_EVENT_TIMEOUT
;

136 
Фr№
;

139 
Ъput
 = 
buгv
->input;

145 iа(
buгv
->
wm_їad
.
high
 != 0) {

146 
howmuch
 = 
buгv
->
wm_їad
.
high
 - 
	`evbufгr_gС_Ћngth
(
Ъput
);

148 iа(
howmuch
 <= 0) {

149 
	`bufгїvТt_wm_su•Тd_їad
(
buгv
);

150 
dЏe
;

153 
їadmax
 = 
	`_bufгїvТt_gС_їad_max
(
buгv_p
);

154 iа(
howmuch
 < 0 || howmuch > 
їadmax
)

156 
howmuch
 = 
їadmax
;

157 iа(
buгv_p
->
їad_su•Тded
)

158 
dЏe
;

160 
	`evbufгr_unдУze
(
Ъput
, 0);

161 
їs
 = 
	`evbufгr_їad
(
Ъput
, 
fd
, 
howmuch
);

162 
	`evbufгr_дУze
(
Ъput
, 0);

164 iа(
їs
 == -1) {

165 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
fd
);

166 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

167 
їscheduЋ
;

169 
wh©
 |р
BEV_EVENT_ERROR
;

170 } iа(
їs
 == 0) {

172 
wh©
 |р
BEV_EVENT_EOF
;

175 iа(
їs
 <= 0)

176 
Фr№
;

178 
	`_bufгїvТt_deьemТt_їad_buckСs
(
buгv_p
, 
їs
);

181 iа(
	`evbufгr_gС_Ћngth
(
Ъput
и>р
buгv
->
wm_їad
.
low
)

182 
	`_bufгїvТt_run_їadcb
(
buгv
);

184 
dЏe
;

186 
їscheduЋ
:

187 
dЏe
;

189 
Фr№
:

190 
	`bufгїvТt_diІbЋ
(
buгv
, 
EV_READ
);

191 
	`_bufгїvТt_run_evТtcb
(
buгv
, 
wh©
);

193 
dЏe
:

194 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

195 
	}
}

198 
	$bufгїvТt_wrЩecb
(
evutЮ_sockС_t
 
fd
, 
evТt
, *
ђg
)

200 
bufгїvТt
 *
buгv
 = 
ђg
;

201 
bufгїvТt_іiv©e
 *
buгv_p
 =

202 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

203 
їs
 = 0;

204 
wh©
 = 
BEV_EVENT_WRITING
;

205 
cЏ√щed
 = 0;

206 
©mo°
 = -1;

208 
	`_bufгїvТt_Ъьef_™d_lock
(
buгv
);

210 iа(
evТt
 =р
EV_TIMEOUT
) {

211 
wh©
 |р
BEV_EVENT_TIMEOUT
;

212 
Фr№
;

214 iа(
buгv_p
->
cЏ√щЪg
) {

215 
c
 = 
	`evutЮ_sockС_fЪished_cЏ√щЪg
(
fd
);

218 iа(
buгv_p
->
cЏ√щiЏ_їfu£d
) {

219 
buгv_p
->
cЏ√щiЏ_їfu£d
 = 0;

220 
c
 = -1;

223 iа(
c
 == 0)

224 
dЏe
;

226 
buгv_p
->
cЏ√щЪg
 = 0;

227 iа(
c
 < 0) {

228 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

229 
	`evТt_dЦ
(&
buгv
->
ev_їad
);

230 
	`_bufгїvТt_run_evТtcb
(
buгv
, 
BEV_EVENT_ERROR
);

231 
dЏe
;

233 
cЏ√щed
 = 1;

234 #ifdeа
WIN32


235 iа(
	`BEV_IS_ASYNC
(
buгv
)) {

236 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

237 
	`bufгїvТt_async_£t_cЏ√щed
(
buгv
);

238 
	`_bufгїvТt_run_evТtcb
(
buгv
,

239 
BEV_EVENT_CONNECTED
);

240 
dЏe
;

243 
	`_bufгїvТt_run_evТtcb
(
buгv
,

244 
BEV_EVENT_CONNECTED
);

245 iа(!(
buгv
->
ТabЋd
 & 
EV_WRITE
) ||

246 
buгv_p
->
wrЩe_su•Тded
) {

247 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

248 
dЏe
;

253 
©mo°
 = 
	`_bufгїvТt_gС_wrЩe_max
(
buгv_p
);

255 iа(
buгv_p
->
wrЩe_su•Тded
)

256 
dЏe
;

258 iа(
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
)) {

259 
	`evbufгr_unдУze
(
buгv
->
ouНut
, 1);

260 
їs
 = 
	`evbufгr_wrЩe_©mo°
(
buгv
->
ouНut
, 
fd
, 
©mo°
);

261 
	`evbufгr_дУze
(
buгv
->
ouНut
, 1);

262 iа(
їs
 == -1) {

263 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
fd
);

264 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

265 
їscheduЋ
;

266 
wh©
 |р
BEV_EVENT_ERROR
;

267 } iа(
їs
 == 0) {

272 
wh©
 |р
BEV_EVENT_EOF
;

274 iа(
їs
 <= 0)

275 
Фr№
;

277 
	`_bufгїvТt_deьemТt_wrЩe_buckСs
(
buгv_p
, 
їs
);

280 iа(
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
) == 0) {

281 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

288 iа((
їs
 || !
cЏ√щed
) &&

289 
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
и<рbuгv->
wm_wrЩe
.
low
) {

290 
	`_bufгїvТt_run_wrЩecb
(
buгv
);

293 
dЏe
;

295 
їscheduЋ
:

296 iа(
	`evbufгr_gС_Ћngth
(
buгv
->
ouНut
) == 0) {

297 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

299 
dЏe
;

301 
Фr№
:

302 
	`bufгїvТt_diІbЋ
(
buгv
, 
EV_WRITE
);

303 
	`_bufгїvТt_run_evТtcb
(
buгv
, 
wh©
);

305 
dЏe
:

306 
	`_bufгїvТt_deьef_™d_u∆ock
(
buгv
);

307 
	}
}

309 
bufгїvТt
 *

310 
	$bufгїvТt_sockС_√w
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
,

311 
ЁtiЏs
)

313 
bufгїvТt_іiv©e
 *
buгv_p
;

314 
bufгїvТt
 *
buгv
;

316 #ifdeа
WIN32


317 iа(
ba£
 && 
	`evТt_ba£_gС_ioэ
(base))

318  
	`bufгїvТt_async_√w
(
ba£
, 
fd
, 
ЁtiЏs
);

321 iа((
buгv_p
 = 
	`mm_€ќoc
(1, (
bufгїvТt_іiv©e
)))=р
NULL
)

322  
NULL
;

324 iа(
	`bufгїvТt_ЪЩ_commЏ
(
buгv_p
, 
ba£
, &
bufгїvТt_Ёs_sockС
,

325 
ЁtiЏs
) < 0) {

326 
	`mm_дУ
(
buгv_p
);

327  
NULL
;

329 
buгv
 = &
buгv_p
->
bev
;

331 
	`evТt_assign
(&
buгv
->
ev_їad
, buгv->
ev_ba£
, 
fd
,

332 
EV_READ
|
EV_PERSIST
, 
bufгїvТt_їadcb
, 
buгv
);

333 
	`evТt_assign
(&
buгv
->
ev_wrЩe
, buгv->
ev_ba£
, 
fd
,

334 
EV_WRITE
|
EV_PERSIST
, 
bufгїvТt_wrЩecb
, 
buгv
);

336 
	`evbufгr_add_cb
(
buгv
->
ouНut
, 
bufгїvТt_sockС_outbuf_cb
, bufev);

338 
	`evbufгr_дУze
(
buгv
->
Ъput
, 0);

339 
	`evbufгr_дУze
(
buгv
->
ouНut
, 1);

341  
buгv
;

342 
	}
}

345 
	$bufгїvТt_sockС_cЏ√щ
(
bufгїvТt
 *
bev
,

346 
sockaddr
 *
І
, 
sockЋn
)

348 
bufгїvТt_іiv©e
 *
buгv_p
 =

349 
	`EVUTIL_UPCAST
(
bev
, 
bufгїvТt_іiv©e
, bev);

351 
evutЮ_sockС_t
 
fd
;

352 
r
 = 0;

353 
їsu…
=-1;

354 
ownfd
 = 0;

356 
	`_bufгїvТt_Ъьef_™d_lock
(
bev
);

358 iа(!
buгv_p
)

359 
dЏe
;

361 
fd
 = 
	`bufгїvТt_gСfd
(
bev
);

362 iа(
fd
 < 0) {

363 iа(!
І
)

364 
dЏe
;

365 
fd
 = 
	`sockС
(
І
->
І_зmЮy
, 
SOCK_STREAM
, 0);

366 iа(
fd
 < 0)

367 
dЏe
;

368 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
fd
)<0)

369 
dЏe
;

370 
ownfd
 = 1;

372 iа(
І
) {

373 #ifdeа
WIN32


374 iа(
	`bufгїvТt_async_€n_cЏ√щ
(
bev
)) {

375 
	`bufгїvТt_£tfd
(
bev
, 
fd
);

376 
r
 = 
	`bufгїvТt_async_cЏ√щ
(
bev
, 
fd
, 
І
, 
sockЋn
);

377 iа(
r
 < 0)

378 
дУsock
;

379 
buгv_p
->
cЏ√щЪg
 = 1;

380 
їsu…
 = 0;

381 
dЏe
;

384 
r
 = 
	`evutЮ_sockС_cЏ√щ
(&
fd
, 
І
, 
sockЋn
);

385 iа(
r
 < 0)

386 
дУsock
;

388 #ifdeа
WIN32


392 iа(
	`BEV_IS_ASYNC
(
bev
)) {

393 
	`evТt_assign
(&
bev
->
ev_wrЩe
, bev->
ev_ba£
, 
fd
,

394 
EV_WRITE
|
EV_PERSIST
, 
bufгїvТt_wrЩecb
, 
bev
);

397 
	`bufгїvТt_£tfd
(
bev
, 
fd
);

398 iа(
r
 == 0) {

399 iа(! 
	`be_sockС_ТabЋ
(
bev
, 
EV_WRITE
)) {

400 
buгv_p
->
cЏ√щЪg
 = 1;

401 
їsu…
 = 0;

402 
dЏe
;

404 } iа(
r
 == 1) {

406 
їsu…
 = 0;

407 
buгv_p
->
cЏ√щЪg
 = 1;

408 
	`evТt_aщive
(&
bev
->
ev_wrЩe
, 
EV_WRITE
, 1);

411 
buгv_p
->
cЏ√щiЏ_їfu£d
 = 1;

412 
buгv_p
->
cЏ√щЪg
 = 1;

413 
їsu…
 = 0;

414 
	`evТt_aщive
(&
bev
->
ev_wrЩe
, 
EV_WRITE
, 1);

417 
dЏe
;

419 
дУsock
:

420 
	`_bufгїvТt_run_evТtcb
(
bev
, 
BEV_EVENT_ERROR
);

421 iа(
ownfd
)

422 
	`EVUTIL_CLOSESOCKET
(
fd
);

424 
dЏe
:

425 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

426  
їsu…
;

427 
	}
}

430 
	$bufгїvТt_cЏ√щ_gСaddrЪfo_cb
(
їsu…
, 
evutЮ_addrЪfo
 *
ai
,

431 *
ђg
)

433 
bufгїvТt
 *
bev
 = 
ђg
;

434 
r
;

435 
	`BEV_LOCK
(
bev
);

437 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_LOOKUP
);

438 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_LOOKUP
);

440 iа(
їsu…
 != 0) {

442 
	`_bufгїvТt_run_evТtcb
(
bev
, 
BEV_EVENT_ERROR
);

443 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

444 iа(
ai
)

445 
	`evutЮ_дУaddrЪfo
(
ai
);

450 
r
 = 
	`bufгїvТt_sockС_cЏ√щ
(
bev
, 
ai
->
ai_addr
,Зi->
ai_addЊТ
);

451 
	`_bufгїvТt_deьef_™d_u∆ock
(
bev
);

452 
	`evutЮ_дУaddrЪfo
(
ai
);

453 
	}
}

456 
	$bufгїvТt_sockС_cЏ√щ_ho°«me
(
bufгїvТt
 *
bev
,

457 
evdns_ba£
 *evdns_ba£, 
зmЮy
, cЏ° *
ho°«me
, 
p№t
)

459 
p№tbuf
[10];

460 
evutЮ_addrЪfo
 
hЪt
;

461 
Фr
;

463 iа(
зmЮy
 !р
AF_INET
 && famЮy !р
AF_INET6
 && famЮy !р
AF_UNSPEC
)

465 iа(
p№t
 < 1 ||Еort > 65535)

468 
	`evutЮ_ҐіЪtf
(
p№tbuf
, ’№tbuf), "%d", 
p№t
);

470 
	`mem£t
(&
hЪt
, 0, (hint));

471 
hЪt
.
ai_зmЮy
 = 
зmЮy
;

472 
hЪt
.
ai_іўocё
 = 
IPPROTO_TCP
;

473 
hЪt
.
ai_sockty≥
 = 
SOCK_STREAM
;

475 
	`bufгїvТt_su•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_LOOKUP
);

476 
	`bufгїvТt_su•Тd_їad
(
bev
, 
BEV_SUSPEND_LOOKUP
);

478 
	`bufгїvТt_Ъьef
(
bev
);

479 
Фr
 = 
	`evutЮ_gСaddrЪfo_async
(
evdns_ba£
, 
ho°«me
, 
p№tbuf
,

480 &
hЪt
, 
bufгїvТt_cЏ√щ_gСaddrЪfo_cb
, 
bev
);

482 iа(
Фr
 == 0) {

485 
	`bufгїvТt_unsu•Тd_wrЩe
(
bev
, 
BEV_SUSPEND_LOOKUP
);

486 
	`bufгїvТt_unsu•Тd_їad
(
bev
, 
BEV_SUSPEND_LOOKUP
);

489 
	}
}

502 
bufгїvТt
 *

503 
	$bufгїvТt_√w
(
evutЮ_sockС_t
 
fd
,

504 
bufгїvТt_d©a_cb
 
їadcb
, bufгїvТt_d©a_cb 
wrЩecb
,

505 
bufгїvТt_evТt_cb
 
evТtcb
, *
cbђg
)

507 
bufгїvТt
 *
buгv
;

509 iа(!(
buгv
 = 
	`bufгїvТt_sockС_√w
(
NULL
, 
fd
, 0)))

510  
NULL
;

512 
	`bufгїvТt_£tcb
(
buгv
, 
їadcb
, 
wrЩecb
, 
evТtcb
, 
cbђg
);

514  
buгv
;

515 
	}
}

519 
	$be_sockС_ТabЋ
(
bufгїvТt
 *
buгv
, 
evТt
)

521 iа(
evТt
 & 
EV_READ
) {

522 iа(
	`be_sockС_add
(&
buгv
->
ev_їad
,&buгv->
timeout_їad
) == -1)

525 iа(
evТt
 & 
EV_WRITE
) {

526 iа(
	`be_sockС_add
(&
buгv
->
ev_wrЩe
,&buгv->
timeout_wrЩe
) == -1)

530 
	}
}

533 
	$be_sockС_diІbЋ
(
bufгїvТt
 *
buгv
, 
evТt
)

535 
bufгїvТt_іiv©e
 *
buгv_p
 =

536 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

537 iа(
evТt
 & 
EV_READ
) {

538 iа(
	`evТt_dЦ
(&
buгv
->
ev_їad
) == -1)

542 iа((
evТt
 & 
EV_WRITE
и&& ! 
buгv_p
->
cЏ√щЪg
) {

543 iа(
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
) == -1)

547 
	}
}

550 
	$be_sockС_de°ruщ
(
bufгїvТt
 *
buгv
)

552 
bufгїvТt_іiv©e
 *
buгv_p
 =

553 
	`EVUTIL_UPCAST
(
buгv
, 
bufгїvТt_іiv©e
, 
bev
);

554 
evutЮ_sockС_t
 
fd
;

555 
	`EVUTIL_ASSERT
(
buгv
->
be_Ёs
 =р&
bufгїvТt_Ёs_sockС
);

557 
fd
 = 
	`evТt_gС_fd
(&
buгv
->
ev_їad
);

559 
	`evТt_dЦ
(&
buгv
->
ev_їad
);

560 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

562 iа(
buгv_p
->
ЁtiЏs
 & 
BEV_OPT_CLOSE_ON_FREE
)

563 
	`EVUTIL_CLOSESOCKET
(
fd
);

564 
	}
}

567 
	$be_sockС_adj_timeouts
(
bufгїvТt
 *
buгv
)

569 
r
 = 0;

570 iа(
	`evТt_≥ndЪg
(&
buгv
->
ev_їad
, 
EV_READ
, 
NULL
))

571 iа(
	`be_sockС_add
(&
buгv
->
ev_їad
, &buгv->
timeout_їad
) < 0)

572 
r
 = -1;

573 iа(
	`evТt_≥ndЪg
(&
buгv
->
ev_wrЩe
, 
EV_WRITE
, 
NULL
)) {

574 iа(
	`be_sockС_add
(&
buгv
->
ev_wrЩe
, &buгv->
timeout_wrЩe
) < 0)

575 
r
 = -1;

577  
r
;

578 
	}
}

581 
	$be_sockС_жush
(
bufгїvТt
 *
bev
, 
iўy≥
,

582 
bufгїvТt_жush_mode
 
mode
)

585 
	}
}

589 
	$be_sockС_£tfd
(
bufгїvТt
 *
buгv
, 
evutЮ_sockС_t
 
fd
)

591 
	`BEV_LOCK
(
buгv
);

592 
	`EVUTIL_ASSERT
(
buгv
->
be_Ёs
 =р&
bufгїvТt_Ёs_sockС
);

594 
	`evТt_dЦ
(&
buгv
->
ev_їad
);

595 
	`evТt_dЦ
(&
buгv
->
ev_wrЩe
);

597 
	`evТt_assign
(&
buгv
->
ev_їad
, buгv->
ev_ba£
, 
fd
,

598 
EV_READ
|
EV_PERSIST
, 
bufгїvТt_їadcb
, 
buгv
);

599 
	`evТt_assign
(&
buгv
->
ev_wrЩe
, buгv->
ev_ba£
, 
fd
,

600 
EV_WRITE
|
EV_PERSIST
, 
bufгїvТt_wrЩecb
, 
buгv
);

602 iа(
fd
 >= 0)

603 
	`bufгїvТt_ТabЋ
(
buгv
, buгv->
ТabЋd
);

605 
	`BEV_UNLOCK
(
buгv
);

606 
	}
}

610 
	$bufгїvТt_іi№Щy_£t
(
bufгїvТt
 *
buгv
, 
іi№Щy
)

612 
r
 = -1;

614 
	`BEV_LOCK
(
buгv
);

615 iа(
buгv
->
be_Ёs
 !р&
bufгїvТt_Ёs_sockС
)

616 
dЏe
;

618 iа(
	`evТt_іi№Щy_£t
(&
buгv
->
ev_їad
, 
іi№Щy
) == -1)

619 
dЏe
;

620 iа(
	`evТt_іi№Щy_£t
(&
buгv
->
ev_wrЩe
, 
іi№Щy
) == -1)

621 
dЏe
;

623 
r
 = 0;

624 
dЏe
:

625 
	`BEV_UNLOCK
(
buгv
);

626  
r
;

627 
	}
}

631 
	$bufгїvТt_ba£_£t
(
evТt_ba£
 *
ba£
, 
bufгїvТt
 *
buгv
)

633 
їs
 = -1;

635 
	`BEV_LOCK
(
buгv
);

636 iа(
buгv
->
be_Ёs
 !р&
bufгїvТt_Ёs_sockС
)

637 
dЏe
;

639 
buгv
->
ev_ba£
 = 
ba£
;

641 
їs
 = 
	`evТt_ba£_£t
(
ba£
, &
buгv
->
ev_їad
);

642 iа(
їs
 == -1)

643 
dЏe
;

645 
їs
 = 
	`evТt_ba£_£t
(
ba£
, &
buгv
->
ev_wrЩe
);

646 
dЏe
:

647 
	`BEV_UNLOCK
(
buгv
);

648  
їs
;

649 
	}
}

652 
	$be_sockС_щЊ
(
bufгїvТt
 *
bev
, 
bufгїvТt_щЊ_Ё
 
Ё
,

653 
bufгїvТt_щЊ_d©a
 *
d©a
)

655 
Ё
) {

656 
BEV_CTRL_SET_FD
:

657 
	`be_sockС_£tfd
(
bev
, 
d©a
->
fd
);

659 
BEV_CTRL_GET_FD
:

660 
d©a
->
fd
 = 
	`evТt_gС_fd
(&
bev
->
ev_їad
);

662 
BEV_CTRL_GET_UNDERLYING
:

666 
	}
}

	@changelist-internal.h

26 #iвdeа
_CHANGELIST_H_


27 
	#_CHANGELIST_H_


	)

50 
	~<evТt2/utЮ.h
>

53 
	sevТt_ch™ge
 {

55 
evutЮ_sockС_t
 
	mfd
;

58 
	mёd_evТts
;

63 
ev_uЪt8_t
 
	mїad_ch™ge
;

64 
ev_uЪt8_t
 
	mwrЩe_ch™ge
;

70 
	#EV_CHANGE_ADD
 0x01

	)

72 
	#EV_CHANGE_DEL
 0x02

	)

74 
	#EV_CHANGE_SIGNAL
 
EV_SIGNAL


	)

76 
	#EV_CHANGE_PERSIST
 
EV_PERSIST


	)

78 
	#EV_CHANGE_ET
 
EV_ET


	)

82 
	#EVENT_CHANGELIST_FDINFO_SIZE
 ()

	)

85 
evТt_ch™gЦi°_ЪЩ
(
evТt_ch™gЦi°
 *
ch™gЦi°
);

89 
evТt_ch™gЦi°_їmove_Ѓl
(
evТt_ch™gЦi°
 *
ch™gЦi°
,

90 
evТt_ba£
 *
ba£
);

92 
evТt_ch™gЦi°_дУmem
(
evТt_ch™gЦi°
 *
ch™gЦi°
);

95 
evТt_ch™gЦi°_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
,

96 *
p
);

98 
evТt_ch™gЦi°_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
,

99 *
p
);

	@compat/sys/queue.h

35 #iвdef 
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

88 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

89 
	s«me
 { \

90 
ty≥
 *
¶h_fЬ°
; \

91 }

	)

93 
	#SLIST_HEAD_INITIALIZER
(
hЧd
) \

94 { 
NULL
 }

	)

96 #iвdeа
WIN32


97 
	#SLIST_ENTRY
(
ty≥
) \

99 
ty≥
 *
¶e_√xt
; \

100 }

	)

106 
	#SLIST_FIRST
(
hЧd
и((hЧd)->
¶h_fЬ°
)

	)

107 
	#SLIST_END
(
hЧd
и
NULL


	)

108 
	#SLIST_EMPTY
(
hЧd
и(
	`SLIST_FIRST
(hЧdи=р
	`SLIST_END
(hЧd))

	)

109 
	#SLIST_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
¶e_√xt
)

	)

111 
	#SLIST_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

112 (
vђ
ир
	`SLIST_FIRST
(
hЧd
); \

113 (
vђ
и!р
	`SLIST_END
(
hЧd
); \

114 (
vђ
ир
	`SLIST_NEXT
(vђ, 
fЫld
))

	)

119 
	#SLIST_INIT
(
hЧd
) { \

120 
	`SLIST_FIRST
(
hЧd
ир
	`SLIST_END
(head); \

121 }

	)

123 
	#SLIST_INSERT_AFTER
(
¶i°Цm
, 
Цm
, 
fЫld
) do { \

124 (
Цm
)->
fЫld
.
¶e_√xt
 = (
¶i°Цm
)->field.sle_next; \

125 (
¶i°Цm
)->
fЫld
.
¶e_√xt
 = (
Цm
); \

126 } 0)

	)

128 
	#SLIST_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

129 (
Цm
)->
fЫld
.
¶e_√xt
 = (
hЧd
)->
¶h_fЬ°
; \

130 (
hЧd
)->
¶h_fЬ°
 = (
Цm
); \

131 } 0)

	)

133 
	#SLIST_REMOVE_HEAD
(
hЧd
, 
fЫld
) do { \

134 (
hЧd
)->
¶h_fЬ°
 = (hЧd)->¶h_fЬ°->
fЫld
.
¶e_√xt
; \

135 } 0)

	)

140 
	#LIST_HEAD
(
«me
, 
ty≥
) \

141 
	s«me
 { \

142 
ty≥
 *
lh_fЬ°
; \

143 }

	)

145 
	#LIST_HEAD_INITIALIZER
(
hЧd
) \

146 { 
NULL
 }

	)

148 
	#LIST_ENTRY
(
ty≥
) \

150 
ty≥
 *
Ћ_√xt
; \

151 
ty≥
 **
Ћ_іev
; \

152 }

	)

157 
	#LIST_FIRST
(
hЧd
и((hЧd)->
lh_fЬ°
)

	)

158 
	#LIST_END
(
hЧd
и
NULL


	)

159 
	#LIST_EMPTY
(
hЧd
и(
	`LIST_FIRST
(hЧdи=р
	`LIST_END
(hЧd))

	)

160 
	#LIST_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
Ћ_√xt
)

	)

162 
	#LIST_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

163 (
vђ
ир
	`LIST_FIRST
(
hЧd
); \

164 (
vђ
)!р
	`LIST_END
(
hЧd
); \

165 (
vђ
ир
	`LIST_NEXT
(vђ, 
fЫld
))

	)

170 
	#LIST_INIT
(
hЧd
) do { \

171 
	`LIST_FIRST
(
hЧd
ир
	`LIST_END
(head); \

172 } 0)

	)

174 
	#LIST_INSERT_AFTER
(
li°Цm
, 
Цm
, 
fЫld
) do { \

175 iа(((
Цm
)->
fЫld
.
Ћ_√xt
 = (
li°Цm
)->fЫld.Ћ_√xtи!р
NULL
) \

176 (
li°Цm
)->
fЫld
.
Ћ_√xt
->fЫld.
Ћ_іev
 = \

177 &(
Цm
)->
fЫld
.
Ћ_√xt
; \

178 (
li°Цm
)->
fЫld
.
Ћ_√xt
 = (
Цm
); \

179 (
Цm
)->
fЫld
.
Ћ_іev
 = &(
li°Цm
)->fЫld.
Ћ_√xt
; \

180 } 0)

	)

182 
	#LIST_INSERT_BEFORE
(
li°Цm
, 
Цm
, 
fЫld
) do { \

183 (
Цm
)->
fЫld
.
Ћ_іev
 = (
li°Цm
)->field.le_prev; \

184 (
Цm
)->
fЫld
.
Ћ_√xt
 = (
li°Цm
); \

185 *(
li°Цm
)->
fЫld
.
Ћ_іev
 = (
Цm
); \

186 (
li°Цm
)->
fЫld
.
Ћ_іev
 = &(
Цm
)->fЫld.
Ћ_√xt
; \

187 } 0)

	)

189 
	#LIST_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

190 iа(((
Цm
)->
fЫld
.
Ћ_√xt
 = (
hЧd
)->
lh_fЬ°
и!р
NULL
) \

191 (
hЧd
)->
lh_fЬ°
->
fЫld
.
Ћ_іev
 = &(
Цm
)->fЫld.
Ћ_√xt
;\

192 (
hЧd
)->
lh_fЬ°
 = (
Цm
); \

193 (
Цm
)->
fЫld
.
Ћ_іev
 = &(
hЧd
)->
lh_fЬ°
; \

194 } 0)

	)

196 
	#LIST_REMOVE
(
Цm
, 
fЫld
) do { \

197 iа((
Цm
)->
fЫld
.
Ћ_√xt
 !р
NULL
) \

198 (
Цm
)->
fЫld
.
Ћ_√xt
->fЫld.
Ћ_іev
 = \

199 (
Цm
)->
fЫld
.
Ћ_іev
; \

200 *(
Цm
)->
fЫld
.
Ћ_іev
 = (Цm)->fЫld.
Ћ_√xt
; \

201 } 0)

	)

203 
	#LIST_REPLACE
(
Цm
, 
Цm2
, 
fЫld
) do { \

204 iа(((
Цm2
)->
fЫld
.
Ћ_√xt
 = (
Цm
)->fЫld.Ћ_√xtи!р
NULL
) \

205 (
Цm2
)->
fЫld
.
Ћ_√xt
->fЫld.
Ћ_іev
 = \

206 &(
Цm2
)->
fЫld
.
Ћ_√xt
; \

207 (
Цm2
)->
fЫld
.
Ћ_іev
 = (
Цm
)->field.le_prev; \

208 *(
Цm2
)->
fЫld
.
Ћ_іev
 = (elm2); \

209 } 0)

	)

214 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

215 
	s«me
 { \

216 
ty≥
 *
sqh_fЬ°
; \

217 
ty≥
 **
sqh_ѕ°
; \

218 }

	)

220 
	#SIMPLEQ_HEAD_INITIALIZER
(
hЧd
) \

221 { 
NULL
, &(
hЧd
).
sqh_fЬ°
 }

	)

223 
	#SIMPLEQ_ENTRY
(
ty≥
) \

225 
ty≥
 *
sqe_√xt
; \

226 }

	)

231 
	#SIMPLEQ_FIRST
(
hЧd
и((hЧd)->
sqh_fЬ°
)

	)

232 
	#SIMPLEQ_END
(
hЧd
и
NULL


	)

233 
	#SIMPLEQ_EMPTY
(
hЧd
и(
	`SIMPLEQ_FIRST
(hЧdи=р
	`SIMPLEQ_END
(hЧd))

	)

234 
	#SIMPLEQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
sqe_√xt
)

	)

236 
	#SIMPLEQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

237 (
vђ
ир
	`SIMPLEQ_FIRST
(
hЧd
); \

238 (
vђ
и!р
	`SIMPLEQ_END
(
hЧd
); \

239 (
vђ
ир
	`SIMPLEQ_NEXT
(vђ, 
fЫld
))

	)

244 
	#SIMPLEQ_INIT
(
hЧd
) do { \

245 (
hЧd
)->
sqh_fЬ°
 = 
NULL
; \

246 (
hЧd
)->
sqh_ѕ°
 = &(hЧd)->
sqh_fЬ°
; \

247 } 0)

	)

249 
	#SIMPLEQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

250 iа(((
Цm
)->
fЫld
.
sqe_√xt
 = (
hЧd
)->
sqh_fЬ°
и=р
NULL
) \

251 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

252 (
hЧd
)->
sqh_fЬ°
 = (
Цm
); \

253 } 0)

	)

255 
	#SIMPLEQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

256 (
Цm
)->
fЫld
.
sqe_√xt
 = 
NULL
; \

257 *(
hЧd
)->
sqh_ѕ°
 = (
Цm
); \

258 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

259 } 0)

	)

261 
	#SIMPLEQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

262 iа(((
Цm
)->
fЫld
.
sqe_√xt
 = (
li°Цm
)->fЫld.sqe_√xtи=р
NULL
)\

263 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

264 (
li°Цm
)->
fЫld
.
sqe_√xt
 = (
Цm
); \

265 } 0)

	)

267 
	#SIMPLEQ_REMOVE_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

268 iа(((
hЧd
)->
sqh_fЬ°
 = (
Цm
)->
fЫld
.
sqe_√xt
и=р
NULL
) \

269 (
hЧd
)->
sqh_ѕ°
 = &(hЧd)->
sqh_fЬ°
; \

270 } 0)

	)

275 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

276 
	s«me
 { \

277 
ty≥
 *
tqh_fЬ°
; \

278 
ty≥
 **
tqh_ѕ°
; \

279 }

	)

281 
	#TAILQ_HEAD_INITIALIZER
(
hЧd
) \

282 { 
NULL
, &(
hЧd
).
tqh_fЬ°
 }

	)

284 
	#TAILQ_ENTRY
(
ty≥
) \

286 
ty≥
 *
tqe_√xt
; \

287 
ty≥
 **
tqe_іev
; \

288 }

	)

293 
	#TAILQ_FIRST
(
hЧd
и((hЧd)->
tqh_fЬ°
)

	)

294 
	#TAILQ_END
(
hЧd
и
NULL


	)

295 
	#TAILQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
tqe_√xt
)

	)

296 
	#TAILQ_LAST
(
hЧd
, 
hЧd«me
) \

297 (*(((
hЧd«me
 *)((
hЧd
)->
tqh_ѕ°
))->tqh_ѕ°))

	)

299 
	#TAILQ_PREV
(
Цm
, 
hЧd«me
, 
fЫld
) \

300 (*(((
hЧd«me
 *)((
Цm
)->
fЫld
.
tqe_іev
))->
tqh_ѕ°
))

	)

301 
	#TAILQ_EMPTY
(
hЧd
) \

302 (
	`TAILQ_FIRST
(
hЧd
и=р
	`TAILQ_END
(hЧd))

	)

304 
	#TAILQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

305 (
vђ
ир
	`TAILQ_FIRST
(
hЧd
); \

306 (
vђ
и!р
	`TAILQ_END
(
hЧd
); \

307 (
vђ
ир
	`TAILQ_NEXT
(vђ, 
fЫld
))

	)

309 
	#TAILQ_FOREACH_REVERSE
(
vђ
, 
hЧd
, 
fЫld
, 
hЧd«me
) \

310 (
vђ
ир
	`TAILQ_LAST
(
hЧd
, 
hЧd«me
); \

311 (
vђ
и!р
	`TAILQ_END
(
hЧd
); \

312 (
vђ
ир
	`TAILQ_PREV
(vђ, 
hЧd«me
, 
fЫld
))

	)

317 
	#TAILQ_INIT
(
hЧd
) do { \

318 (
hЧd
)->
tqh_fЬ°
 = 
NULL
; \

319 (
hЧd
)->
tqh_ѕ°
 = &(hЧd)->
tqh_fЬ°
; \

320 } 0)

	)

322 
	#TAILQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

323 iа(((
Цm
)->
fЫld
.
tqe_√xt
 = (
hЧd
)->
tqh_fЬ°
и!р
NULL
) \

324 (
hЧd
)->
tqh_fЬ°
->
fЫld
.
tqe_іev
 = \

325 &(
Цm
)->
fЫld
.
tqe_√xt
; \

327 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

328 (
hЧd
)->
tqh_fЬ°
 = (
Цm
); \

329 (
Цm
)->
fЫld
.
tqe_іev
 = &(
hЧd
)->
tqh_fЬ°
; \

330 } 0)

	)

332 
	#TAILQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

333 (
Цm
)->
fЫld
.
tqe_√xt
 = 
NULL
; \

334 (
Цm
)->
fЫld
.
tqe_іev
 = (
hЧd
)->
tqh_ѕ°
; \

335 *(
hЧd
)->
tqh_ѕ°
 = (
Цm
); \

336 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

337 } 0)

	)

339 
	#TAILQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

340 iа(((
Цm
)->
fЫld
.
tqe_√xt
 = (
li°Цm
)->fЫld.tqe_√xtи!р
NULL
)\

341 (
Цm
)->
fЫld
.
tqe_√xt
->fЫld.
tqe_іev
 = \

342 &(
Цm
)->
fЫld
.
tqe_√xt
; \

344 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

345 (
li°Цm
)->
fЫld
.
tqe_√xt
 = (
Цm
); \

346 (
Цm
)->
fЫld
.
tqe_іev
 = &(
li°Цm
)->fЫld.
tqe_√xt
; \

347 } 0)

	)

349 
	#TAILQ_INSERT_BEFORE
(
li°Цm
, 
Цm
, 
fЫld
) do { \

350 (
Цm
)->
fЫld
.
tqe_іev
 = (
li°Цm
)->field.tqe_prev; \

351 (
Цm
)->
fЫld
.
tqe_√xt
 = (
li°Цm
); \

352 *(
li°Цm
)->
fЫld
.
tqe_іev
 = (
Цm
); \

353 (
li°Цm
)->
fЫld
.
tqe_іev
 = &(
Цm
)->fЫld.
tqe_√xt
; \

354 } 0)

	)

356 
	#TAILQ_REMOVE
(
hЧd
, 
Цm
, 
fЫld
) do { \

357 iа(((
Цm
)->
fЫld
.
tqe_√xt
и!р
NULL
) \

358 (
Цm
)->
fЫld
.
tqe_√xt
->fЫld.
tqe_іev
 = \

359 (
Цm
)->
fЫld
.
tqe_іev
; \

361 (
hЧd
)->
tqh_ѕ°
 = (
Цm
)->
fЫld
.
tqe_іev
; \

362 *(
Цm
)->
fЫld
.
tqe_іev
 = (Цm)->fЫld.
tqe_√xt
; \

363 } 0)

	)

365 
	#TAILQ_REPLACE
(
hЧd
, 
Цm
, 
Цm2
, 
fЫld
) do { \

366 iа(((
Цm2
)->
fЫld
.
tqe_√xt
 = (
Цm
)->fЫld.tqe_√xtи!р
NULL
) \

367 (
Цm2
)->
fЫld
.
tqe_√xt
->fЫld.
tqe_іev
 = \

368 &(
Цm2
)->
fЫld
.
tqe_√xt
; \

370 (
hЧd
)->
tqh_ѕ°
 = &(
Цm2
)->
fЫld
.
tqe_√xt
; \

371 (
Цm2
)->
fЫld
.
tqe_іev
 = (
Цm
)->field.tqe_prev; \

372 *(
Цm2
)->
fЫld
.
tqe_іev
 = (elm2); \

373 } 0)

	)

378 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

379 
	s«me
 { \

380 
ty≥
 *
cqh_fЬ°
; \

381 
ty≥
 *
cqh_ѕ°
; \

382 }

	)

384 
	#CIRCLEQ_HEAD_INITIALIZER
(
hЧd
) \

385 { 
	`CIRCLEQ_END
(&
hЧd
), CIRCLEQ_END(&hЧdи}

	)

387 
	#CIRCLEQ_ENTRY
(
ty≥
) \

389 
ty≥
 *
cqe_√xt
; \

390 
ty≥
 *
cqe_іev
; \

391 }

	)

396 
	#CIRCLEQ_FIRST
(
hЧd
и((hЧd)->
cqh_fЬ°
)

	)

397 
	#CIRCLEQ_LAST
(
hЧd
и((hЧd)->
cqh_ѕ°
)

	)

398 
	#CIRCLEQ_END
(
hЧd
и((*)(hЧd))

	)

399 
	#CIRCLEQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
cqe_√xt
)

	)

400 
	#CIRCLEQ_PREV
(
Цm
, 
fЫld
и(”lm)->fЫld.
cqe_іev
)

	)

401 
	#CIRCLEQ_EMPTY
(
hЧd
) \

402 (
	`CIRCLEQ_FIRST
(
hЧd
и=р
	`CIRCLEQ_END
(hЧd))

	)

404 
	#CIRCLEQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

405 (
vђ
ир
	`CIRCLEQ_FIRST
(
hЧd
); \

406 (
vђ
и!р
	`CIRCLEQ_END
(
hЧd
); \

407 (
vђ
ир
	`CIRCLEQ_NEXT
(vђ, 
fЫld
))

	)

409 
	#CIRCLEQ_FOREACH_REVERSE
(
vђ
, 
hЧd
, 
fЫld
) \

410 (
vђ
ир
	`CIRCLEQ_LAST
(
hЧd
); \

411 (
vђ
и!р
	`CIRCLEQ_END
(
hЧd
); \

412 (
vђ
ир
	`CIRCLEQ_PREV
(vђ, 
fЫld
))

	)

417 
	#CIRCLEQ_INIT
(
hЧd
) do { \

418 (
hЧd
)->
cqh_fЬ°
 = 
	`CIRCLEQ_END
(head); \

419 (
hЧd
)->
cqh_ѕ°
 = 
	`CIRCLEQ_END
(head); \

420 } 0)

	)

422 
	#CIRCLEQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

423 (
Цm
)->
fЫld
.
cqe_√xt
 = (
li°Цm
)->field.cqe_next; \

424 (
Цm
)->
fЫld
.
cqe_іev
 = (
li°Цm
); \

425 iа((
li°Цm
)->
fЫld
.
cqe_√xt
 =р
	`CIRCLEQ_END
(
hЧd
)) \

426 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

428 (
li°Цm
)->
fЫld
.
cqe_√xt
->fЫld.
cqe_іev
 = (
Цm
); \

429 (
li°Цm
)->
fЫld
.
cqe_√xt
 = (
Цm
); \

430 } 0)

	)

432 
	#CIRCLEQ_INSERT_BEFORE
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

433 (
Цm
)->
fЫld
.
cqe_√xt
 = (
li°Цm
); \

434 (
Цm
)->
fЫld
.
cqe_іev
 = (
li°Цm
)->field.cqe_prev; \

435 iа((
li°Цm
)->
fЫld
.
cqe_іev
 =р
	`CIRCLEQ_END
(
hЧd
)) \

436 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

438 (
li°Цm
)->
fЫld
.
cqe_іev
->fЫld.
cqe_√xt
 = (
Цm
); \

439 (
li°Цm
)->
fЫld
.
cqe_іev
 = (
Цm
); \

440 } 0)

	)

442 
	#CIRCLEQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

443 (
Цm
)->
fЫld
.
cqe_√xt
 = (
hЧd
)->
cqh_fЬ°
; \

444 (
Цm
)->
fЫld
.
cqe_іev
 = 
	`CIRCLEQ_END
(
hЧd
); \

445 iа((
hЧd
)->
cqh_ѕ°
 =р
	`CIRCLEQ_END
(head)) \

446 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

448 (
hЧd
)->
cqh_fЬ°
->
fЫld
.
cqe_іev
 = (
Цm
); \

449 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

450 } 0)

	)

452 
	#CIRCLEQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

453 (
Цm
)->
fЫld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hЧd
); \

454 (
Цm
)->
fЫld
.
cqe_іev
 = (
hЧd
)->
cqh_ѕ°
; \

455 iа((
hЧd
)->
cqh_fЬ°
 =р
	`CIRCLEQ_END
(head)) \

456 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

458 (
hЧd
)->
cqh_ѕ°
->
fЫld
.
cqe_√xt
 = (
Цm
); \

459 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

460 } 0)

	)

462 
	#CIRCLEQ_REMOVE
(
hЧd
, 
Цm
, 
fЫld
) do { \

463 iа((
Цm
)->
fЫld
.
cqe_√xt
 =р
	`CIRCLEQ_END
(
hЧd
)) \

464 (
hЧd
)->
cqh_ѕ°
 = (
Цm
)->
fЫld
.
cqe_іev
; \

466 (
Цm
)->
fЫld
.
cqe_√xt
->fЫld.
cqe_іev
 = \

467 (
Цm
)->
fЫld
.
cqe_іev
; \

468 iа((
Цm
)->
fЫld
.
cqe_іev
 =р
	`CIRCLEQ_END
(
hЧd
)) \

469 (
hЧd
)->
cqh_fЬ°
 = (
Цm
)->
fЫld
.
cqe_√xt
; \

471 (
Цm
)->
fЫld
.
cqe_іev
->fЫld.
cqe_√xt
 = \

472 (
Цm
)->
fЫld
.
cqe_√xt
; \

473 } 0)

	)

475 
	#CIRCLEQ_REPLACE
(
hЧd
, 
Цm
, 
Цm2
, 
fЫld
) do { \

476 iа(((
Цm2
)->
fЫld
.
cqe_√xt
 = (
Цm
)->field.cqe_next) == \

477 
	`CIRCLEQ_END
(
hЧd
)) \

478 (
hЧd
).
cqh_ѕ°
 = (
Цm2
); \

480 (
Цm2
)->
fЫld
.
cqe_√xt
->fЫld.
cqe_іev
 = (elm2); \

481 iа(((
Цm2
)->
fЫld
.
cqe_іev
 = (
Цm
)->field.cqe_prev) == \

482 
	`CIRCLEQ_END
(
hЧd
)) \

483 (
hЧd
).
cqh_fЬ°
 = (
Цm2
); \

485 (
Цm2
)->
fЫld
.
cqe_іev
->fЫld.
cqe_√xt
 = (elm2); \

486 } 0)

	)

	@config.h

20 
	#HAVE_ARPA_INET_H
 1

	)

23 
	#HAVE_CLOCK_GETTIME
 1

	)

29 
	#HAVE_DLFCN_H
 1

	)

32 
	#HAVE_EPOLL
 1

	)

35 
	#HAVE_EPOLL_CTL
 1

	)

38 
	#HAVE_EVENTFD
 1

	)

44 
	#HAVE_FCNTL
 1

	)

47 
	#HAVE_FCNTL_H
 1

	)

50 
	#HAVE_FD_MASK
 1

	)

53 
	#HAVE_GETADDRINFO
 1

	)

56 
	#HAVE_GETEGID
 1

	)

59 
	#HAVE_GETEUID
 1

	)

62 
	#HAVE_GETHOSTBYNAME_R
 1

	)

71 
	#HAVE_GETHOSTBYNAME_R_6_ARG
 1

	)

74 
	#HAVE_GETNAMEINFO
 1

	)

77 
	#HAVE_GETPROTOBYNUMBER
 1

	)

80 
	#HAVE_GETSERVBYNAME
 1

	)

83 
	#HAVE_GETTIMEOFDAY
 1

	)

86 
	#HAVE_INET_ATON
 1

	)

89 
	#HAVE_INET_NTOP
 1

	)

92 
	#HAVE_INET_PTON
 1

	)

95 
	#HAVE_INTTYPES_H
 1

	)

104 
	#HAVE_LIBZ
 1

	)

107 
	#HAVE_MEMORY_H
 1

	)

110 
	#HAVE_MMAP
 1

	)

113 
	#HAVE_NETDB_H
 1

	)

119 
	#HAVE_NETINET_IN_H
 1

	)

122 
	#HAVE_OPENSSL
 1

	)

125 
	#HAVE_PIPE
 1

	)

128 
	#HAVE_POLL
 1

	)

131 
	#HAVE_POLL_H
 1

	)

143 
	#HAVE_PTHREADS
 1

	)

146 
	#HAVE_PUTENV
 1

	)

149 
	#HAVE_SA_FAMILY_T
 1

	)

152 
	#HAVE_SELECT
 1

	)

155 
	#HAVE_SENDFILE
 1

	)

158 
	#HAVE_SETENV
 1

	)

161 
	#HAVE_SETFD
 1

	)

164 
	#HAVE_SIGACTION
 1

	)

167 
	#HAVE_SIGNAL
 1

	)

170 
	#HAVE_SPLICE
 1

	)

173 
	#HAVE_STDARG_H
 1

	)

176 
	#HAVE_STDDEF_H
 1

	)

179 
	#HAVE_STDINT_H
 1

	)

182 
	#HAVE_STDLIB_H
 1

	)

185 
	#HAVE_STRINGS_H
 1

	)

188 
	#HAVE_STRING_H
 1

	)

194 
	#HAVE_STRSEP
 1

	)

197 
	#HAVE_STRTOK_R
 1

	)

200 
	#HAVE_STRTOLL
 1

	)

203 
	#HAVE_STRUCT_ADDRINFO
 1

	)

206 
	#HAVE_STRUCT_IN6_ADDR
 1

	)

209 
	#HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

212 
	#HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

215 
	#HAVE_STRUCT_SOCKADDR_IN6
 1

	)

227 
	#HAVE_SYS_EPOLL_H
 1

	)

230 
	#HAVE_SYS_EVENTFD_H
 1

	)

236 
	#HAVE_SYS_IOCTL_H
 1

	)

239 
	#HAVE_SYS_MMAN_H
 1

	)

242 
	#HAVE_SYS_PARAM_H
 1

	)

245 
	#HAVE_SYS_QUEUE_H
 1

	)

248 
	#HAVE_SYS_SELECT_H
 1

	)

251 
	#HAVE_SYS_SENDFILE_H
 1

	)

254 
	#HAVE_SYS_SOCKET_H
 1

	)

257 
	#HAVE_SYS_STAT_H
 1

	)

260 
	#HAVE_SYS_TIME_H
 1

	)

263 
	#HAVE_SYS_TYPES_H
 1

	)

266 
	#HAVE_SYS_UIO_H
 1

	)

269 
	#HAVE_TAILQFOREACH
 1

	)

272 
	#HAVE_TIMERADD
 1

	)

275 
	#HAVE_TIMERCLEAR
 1

	)

278 
	#HAVE_TIMERCMP
 1

	)

281 
	#HAVE_TIMERISSET
 1

	)

284 
	#HAVE_UINT16_T
 1

	)

287 
	#HAVE_UINT32_T
 1

	)

290 
	#HAVE_UINT64_T
 1

	)

293 
	#HAVE_UINT8_T
 1

	)

296 
	#HAVE_UINTPTR_T
 1

	)

299 
	#HAVE_UNISTD_H
 1

	)

302 
	#HAVE_UNSETENV
 1

	)

305 
	#HAVE_VASPRINTF
 1

	)

312 
	#LT_OBJDIR
 ".libs/"

	)

315 
	#NUMERIC_VERSION
 0x02000400

	)

318 
	#PACKAGE
 "libevТt"

	)

321 
	#PACKAGE_BUGREPORT
 ""

	)

324 
	#PACKAGE_NAME
 ""

	)

327 
	#PACKAGE_STRING
 ""

	)

330 
	#PACKAGE_TARNAME
 ""

	)

333 
	#PACKAGE_URL
 ""

	)

336 
	#PACKAGE_VERSION
 ""

	)

343 
	#SIZEOF_INT
 4

	)

346 
	#SIZEOF_LONG
 4

	)

349 
	#SIZEOF_LONG_LONG
 8

	)

352 
	#SIZEOF_SHORT
 2

	)

355 
	#SIZEOF_SIZE_T
 4

	)

358 
	#SIZEOF_VOID_P
 4

	)

361 
	#STDC_HEADERS
 1

	)

364 
	#TIME_WITH_SYS_TIME
 1

	)

367 
	#VERSION
 "2.0.4-Ѓpha"

	)

377 #iвdeа
__эlu•lus


	@defer-internal.h

26 #iвdeа
_DEFER_INTERNAL_H_


27 
	#_DEFER_INTERNAL_H_


	)

29 #ifdeа
__эlu•lus


33 
	~"evТt-cЏfig.h
"

34 
	~<sys/queue.h
>

36 
deгЉed_cb
;

38 (*
deгЉed_cb_в
)(
	tdeгЉed_cb
 *, *);

42 
	sdeгЉed_cb
 {

44 
TAILQ_ENTRY
 (
deгЉed_cb
и(
cb_√xt
);

46 
queued
 : 1;

48 
deгЉed_cb_в
 
cb
;

50 *
ђg
;

54 
	sdeгЉed_cb_queue
 {

55 *
lock
;

57 
aщive_couЅ
;

59 (*
nўify_в
)(
deгЉed_cb_queue
 *, *);

60 *
nўify_ђg
;

64 
TAILQ_HEAD
 (
deгЉed_cb_li°
, 
deгЉed_cb
) deferred_cb_list;

74 
evТt_deгЉed_cb_ЪЩ
(
deгЉed_cb
 *, 
deгЉed_cb_в
, *);

78 
evТt_deгЉed_cb_€nыl
(
deгЉed_cb_queue
 *, 
deгЉed_cb
 *);

82 
evТt_deгЉed_cb_scheduЋ
(
deгЉed_cb_queue
 *, 
deгЉed_cb
 *);

84 #ifdeа
_EVENT_DISABLE_THREAD_SUPPORT


85 
	#LOCK_DEFERRED_QUEUE
(
q
и()0

	)

86 
	#UNLOCK_DEFERRED_QUEUE
(
q
и()0

	)

88 
	#LOCK_DEFERRED_QUEUE
(
q
) \

90 iа((
q
)->
lock
) \

91 
_evthїad_lock_вs
.
	`lock
(0, (
q
)->
lock
); \

92 } 0)

	)

94 
	#UNLOCK_DEFERRED_QUEUE
(
q
) \

96 iа((
q
)->
lock
) \

97 
_evthїad_lock_вs
.
	`u∆ock
(0, (
q
)->
lock
); \

98 } 0)

	)

101 #ifdeа
__эlu•lus


105 
evТt_deгЉed_cb_queue_ЪЩ
(
deгЉed_cb_queue
 *);

106 
deгЉed_cb_queue
 *
evТt_ba£_gС_deгЉed_cb_queue
(
evТt_ba£
 *);

	@devpoll.c

26 
	~"evТt-cЏfig.h
"

28 
	~<sys/ty≥s.h
>

29 
	~<sys/їsourы.h
>

30 #ifdeа
_EVENT_HAVE_SYS_TIME_H


31 
	~<sys/time.h
>

33 
	~<sys/queue.h
>

34 
	~<sys/devpёl.h
>

35 
	~<sig«l.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rЪg.h
>

39 
	~<uni°d.h
>

40 
	~<fъО.h
>

41 
	~<ФЇo.h
>

43 
	~"evТt2/evТt.h
"

44 
	~"evТt2/evТt_°ruщ.h
"

45 
	~"evТt2/thїad.h
"

46 
	~"evТt-ЪЛЇЃ.h
"

47 
	~"evsig«l-ЪЛЇЃ.h
"

48 
	~"log-ЪЛЇЃ.h
"

49 
	~"evm≠-ЪЛЇЃ.h
"

50 
	~"evthїad-ЪЛЇЃ.h
"

52 
	sdevpёlЁ
 {

53 
pёlfd
 *
	mevТts
;

54 
	m√vТts
;

55 
	mdpfd
;

56 
pёlfd
 *
	mch™ges
;

57 
	mnch™ges
;

60 *
devpёl_ЪЩ
 (
evТt_ba£
 *);

61 
devpёl_add
(
evТt_ba£
 *, 
fd
, 
ёd
, 
evТts
, *);

62 
devpёl_dЦ
(
evТt_ba£
 *, 
fd
, 
ёd
, 
evТts
, *);

63 
devpёl_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

64 
devpёl_dЧќoc
 (
evТt_ba£
 *);

66 cЏ° 
evТtЁ
 
	gdevpёlЁs
 = {

68 
devpёl_ЪЩ
,

69 
devpёl_add
,

70 
devpёl_dЦ
,

71 
devpёl_di•©ch
,

72 
devpёl_dЧќoc
,

74 
EV_FEATURE_FDS
|
EV_FEATURE_O1
,

78 
	#NEVENT
 32000

	)

81 
	$devpёl_commЩ
(
devpёlЁ
 *devpollop)

87 iа(
	`pwrЩe
(
devpёlЁ
->
dpfd
, devpёlЁ->
ch™ges
,

88 (
pёlfd
и* 
devpёlЁ
->
nch™ges
, 0) == -1)

91 
devpёlЁ
->
nch™ges
 = 0;

93 
	}
}

96 
	$devpёl_queue
(
devpёlЁ
 *devpёlЁ, 
fd
, 
evТts
) {

97 
pёlfd
 *
pfd
;

99 iа(
devpёlЁ
->
nch™ges
 >рdevpёlЁ->
√vТts
) {

104 iа(
	`devpёl_commЩ
(
devpёlЁ
) != 0)

108 
pfd
 = &
devpёlЁ
->
ch™ges
[devpёlЁ->
nch™ges
++];

109 
pfd
->
fd
 = fd;

110 
pfd
->
evТts
 =Гvents;

111 
pfd
->
їvТts
 = 0;

114 
	}
}

117 
	$devpёl_ЪЩ
(
evТt_ba£
 *
ba£
)

119 
dpfd
, 
nfЮes
 = 
NEVENT
;

120 
ЊimЩ
 
Њ
;

121 
devpёlЁ
 *devpollop;

123 iа(!(
devpёlЁ
 = 
	`mm_€ќoc
(1, (devpollop))))

124  (
NULL
);

126 iа(
	`gСЊimЩ
(
RLIMIT_NOFILE
, &
Њ
) == 0 &&

127 
Њ
.
Њim_cur
 !р
RLIM_INFINITY
)

128 
nfЮes
 = 
Њ
.
Њim_cur
;

131 iа((
dpfd
 = 
	`ЁТ
("/dev/pёl", 
O_RDWR
)) == -1) {

132 
	`evТt_wђn
("open: /dev/poll");

133 
	`mm_дУ
(
devpёlЁ
);

134  (
NULL
);

137 
devpёlЁ
->
dpfd
 = dpfd;

142 
devpёlЁ
->
evТts
 = 
	`mm_€ќoc
(
nfЮes
, (
pёlfd
));

143 iа(
devpёlЁ
->
evТts
 =р
NULL
) {

144 
	`mm_дУ
(
devpёlЁ
);

145 
	`юo£
(
dpfd
);

146  (
NULL
);

148 
devpёlЁ
->
√vТts
 = 
nfЮes
;

150 
devpёlЁ
->
ch™ges
 = 
	`mm_€ќoc
(
nfЮes
, (
pёlfd
));

151 iа(
devpёlЁ
->
ch™ges
 =р
NULL
) {

152 
	`mm_дУ
(
devpёlЁ
->
evТts
);

153 
	`mm_дУ
(
devpёlЁ
);

154 
	`юo£
(
dpfd
);

155  (
NULL
);

158 
	`evsig_ЪЩ
(
ba£
);

160  (
devpёlЁ
);

161 
	}
}

164 
	$devpёl_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

166 
devpёlЁ
 *devpёlЁ = 
ba£
->
evba£
;

167 
pёlfd
 *
evТts
 = 
devpёlЁ
->events;

168 
dvpёl
 
dvp
;

169 
i
, 
їs
, 
timeout
 = -1;

171 iа(
devpёlЁ
->
nch™ges
)

172 
	`devpёl_commЩ
(
devpёlЁ
);

174 iа(
tv
 !р
NULL
)

175 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

177 
dvp
.
dp_fds
 = 
devpёlЁ
->
evТts
;

178 
dvp
.
dp_nfds
 = 
devpёlЁ
->
√vТts
;

179 
dvp
.
dp_timeout
 = 
timeout
;

181 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

183 
їs
 = 
	`ioщl
(
devpёlЁ
->
dpfd
, 
DP_POLL
, &
dvp
);

185 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

187 iа(
їs
 == -1) {

188 iа(
ФЇo
 !р
EINTR
) {

189 
	`evТt_wђn
("ioctl: DP_POLL");

193 
	`evsig_іoыss
(
ba£
);

195 } iа(
ba£
->
sig
.
evsig_€ught
) {

196 
	`evsig_іoыss
(
ba£
);

199 
	`evТt_debug
(("%s: devpёl_waЩДХ№t†%d", 
__func__
, 
їs
));

201 
i
 = 0; i < 
їs
; i++) {

202 
which
 = 0;

203 
wh©
 = 
evТts
[
i
].
їvТts
;

205 iа(
wh©
 & 
POLLHUP
)

206 
wh©
 |р
POLLIN
 | 
POLLOUT
;

207 iа(
wh©
 & 
POLLERR
)

208 
wh©
 |р
POLLIN
 | 
POLLOUT
;

210 iа(
wh©
 & 
POLLIN
)

211 
which
 |р
EV_READ
;

212 iа(
wh©
 & 
POLLOUT
)

213 
which
 |р
EV_WRITE
;

215 iа(!
which
)

219 
	`evm≠_io_aщive
(
ba£
, 
evТts
[
i
].
fd
, 
which
);

223 
	}
}

227 
	$devpёl_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

229 
devpёlЁ
 *devpёlЁ = 
ba£
->
evba£
;

230 
їs
;

231 ()
p
;

240 
їs
 = 0;

241 iа(
evТts
 & 
EV_READ
)

242 
їs
 |р
POLLIN
;

243 iа(
evТts
 & 
EV_WRITE
)

244 
їs
 |р
POLLOUT
;

246 iа(
	`devpёl_queue
(
devpёlЁ
, 
fd
, 
їs
) != 0)

250 
	}
}

253 
	$devpёl_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

255 
devpёlЁ
 *devpёlЁ = 
ba£
->
evba£
;

256 
їs
;

257 ()
p
;

259 
їs
 = 0;

260 iа(
evТts
 & 
EV_READ
)

261 
їs
 |р
POLLIN
;

262 iа(
evТts
 & 
EV_WRITE
)

263 
їs
 |р
POLLOUT
;

272 iа(
	`devpёl_queue
(
devpёlЁ
, 
fd
, 
POLLREMOVE
) != 0)

275 iа((
їs
 & (
POLLIN
|
POLLOUT
)) != (POLLIN|POLLOUT)) {

281 iа((
їs
 & 
POLLIN
и&& (
ёd
 & 
EV_WRITE
)) {

283 
	`devpёl_queue
(
devpёlЁ
, 
fd
, 
POLLOUT
);

284 } iа((
їs
 & 
POLLOUT
и&& (
ёd
 & 
EV_READ
)) {

286 
	`devpёl_queue
(
devpёlЁ
, 
fd
, 
POLLIN
);

291 
	}
}

294 
	$devpёl_dЧќoc
(
evТt_ba£
 *
ba£
)

296 
devpёlЁ
 *devpёlЁ = 
ba£
->
evba£
;

298 
	`evsig_dЧќoc
(
ba£
);

299 iа(
devpёlЁ
->
evТts
)

300 
	`mm_дУ
(
devpёlЁ
->
evТts
);

301 iа(
devpёlЁ
->
ch™ges
)

302 
	`mm_дУ
(
devpёlЁ
->
ch™ges
);

303 iа(
devpёlЁ
->
dpfd
 >= 0)

304 
	`юo£
(
devpёlЁ
->
dpfd
);

306 
	`mem£t
(
devpёlЁ
, 0, (devpollop));

307 
	`mm_дУ
(
devpёlЁ
);

308 
	}
}

	@epoll.c

27 
	~"evТt-cЏfig.h
"

29 
	~<°dЪt.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/їsourы.h
>

32 #ifdeа
_EVENT_HAVE_SYS_TIME_H


33 
	~<sys/time.h
>

35 
	~<sys/queue.h
>

36 
	~<sys/Хёl.h
>

37 
	~<sig«l.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rЪg.h
>

41 
	~<uni°d.h
>

42 
	~<ФЇo.h
>

43 #ifdeа
_EVENT_HAVE_FCNTL_H


44 
	~<fъО.h
>

47 
	~"evТt-ЪЛЇЃ.h
"

48 
	~"evsig«l-ЪЛЇЃ.h
"

49 
	~"evТt2/thїad.h
"

50 
	~"evthїad-ЪЛЇЃ.h
"

51 
	~"log-ЪЛЇЃ.h
"

52 
	~"evm≠-ЪЛЇЃ.h
"

53 
	~"ch™gЦi°-ЪЛЇЃ.h
"

55 
	sХёlЁ
 {

56 
Хёl_evТt
 *
	mevТts
;

57 
	m√vТts
;

58 
	mХfd
;

61 *
Хёl_ЪЩ
 (
evТt_ba£
 *);

62 
Хёl_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

63 
Хёl_dЧќoc
 (
evТt_ba£
 *);

65 cЏ° 
evТtЁ
 
	gХёlЁs
 = {

67 
Хёl_ЪЩ
,

68 
evТt_ch™gЦi°_add
,

69 
evТt_ch™gЦi°_dЦ
,

70 
Хёl_di•©ch
,

71 
Хёl_dЧќoc
,

73 
EV_FEATURE_ET
|
EV_FEATURE_O1
,

74 
EVENT_CHANGELIST_FDINFO_SIZE


77 
	#INITIAL_NEVENT
 32

	)

78 
	#MAX_NEVENT
 4096

	)

86 
	#MAX_EPOLL_TIMEOUT_MSEC
 (35*60*1000)

	)

89 
	$Хёl_ЪЩ
(
evТt_ba£
 *
ba£
)

91 
Хfd
;

92 
ХёlЁ
 *epollop;

96 iа((
Хfd
 = 
	`Хёl_ьЧЛ
(32000)) == -1) {

97 iа(
ФЇo
 !р
ENOSYS
)

98 
	`evТt_wђn
("epoll_create");

99  (
NULL
);

102 
	`evutЮ_make_sockС_юo£Џexec
(
Хfd
);

104 iа(!(
ХёlЁ
 = 
	`mm_€ќoc
(1, (epollop))))

105  (
NULL
);

107 
ХёlЁ
->
Хfd
 =Гpfd;

110 
ХёlЁ
->
evТts
 = 
	`mm_€ќoc
(
INITIAL_NEVENT
, (
Хёl_evТt
));

111 iа(
ХёlЁ
->
evТts
 =р
NULL
) {

112 
	`mm_дУ
(
ХёlЁ
);

113  (
NULL
);

115 
ХёlЁ
->
√vТts
 = 
INITIAL_NEVENT
;

117 
	`evsig_ЪЩ
(
ba£
);

119  (
ХёlЁ
);

120 
	}
}

123 
	$Хёl_≠ґy_ch™ges
(
evТt_ba£
 *
ba£
)

125 
evТt_ch™gЦi°
 *
ch™gЦi°
 = &
ba£
->changelist;

126 
ХёlЁ
 *ХёlЁ = 
ba£
->
evba£
;

127 
evТt_ch™ge
 *
ch
;

128 
Хёl_evТt
 
Хev
;

129 
i
;

130 
Ё
, 
evТts
;

132 
i
 = 0; i < 
ch™gЦi°
->
n_ch™ges
; ++i) {

133 
іe€utiЏђy_add
 = 0;

134 
ch
 = &
ch™gЦi°
->
ch™ges
[
i
];

135 
evТts
 = 0;

148 iа((
ch
->
їad_ch™ge
 & 
EV_CHANGE_ADD
) ||

149 (
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_ADD
)) {

152 
√w_evТts
 = 
ch
->
ёd_evТts
;

153 
evТts
 = 0;

154 
Ё
 = 
EPOLL_CTL_ADD
;

155 iа(
ch
->
їad_ch™ge
 & 
EV_CHANGE_ADD
) {

156 
evТts
 |р
EPOLLIN
;

157 
√w_evТts
 |р
EV_READ
;

158 } iа(
ch
->
їad_ch™ge
 & 
EV_CHANGE_DEL
) {

159 
√w_evТts
 &р~
EV_READ
;

160 } iа(
ch
->
ёd_evТts
 & 
EV_READ
) {

161 
evТts
 |р
EPOLLIN
;

163 iа(
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_ADD
) {

164 
evТts
 |р
EPOLLOUT
;

165 
√w_evТts
 |р
EV_WRITE
;

166 } iа(
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_DEL
) {

167 
√w_evТts
 &р~
EV_WRITE
;

168 } iа(
ch
->
ёd_evТts
 & 
EV_WRITE
) {

169 
evТts
 |р
EPOLLOUT
;

171 iа((
ch
->
їad_ch™ge
|ch->
wrЩe_ch™ge
и& 
EV_ET
)

172 
evТts
 |р
EPOLLET
;

174 iа(
√w_evТts
 =р
ch
->
ёd_evТts
) {

183 
іe€utiЏђy_add
 = 1;

184 } iа(
ch
->
ёd_evТts
) {

185 
Ё
 = 
EPOLL_CTL_MOD
;

188 } iа((
ch
->
їad_ch™ge
 & 
EV_CHANGE_DEL
) ||

189 (
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_DEL
)) {

192 
Ё
 = 
EPOLL_CTL_DEL
;

194 iа(
ch
->
їad_ch™ge
 & 
EV_CHANGE_DEL
) {

195 iа(
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_DEL
) {

196 
evТts
 = 
EPOLLIN
|
EPOLLOUT
;

197 } iа(
ch
->
ёd_evТts
 & 
EV_WRITE
) {

198 
evТts
 = 
EPOLLOUT
;

199 
Ё
 = 
EPOLL_CTL_MOD
;

201 
evТts
 = 
EPOLLIN
;

203 } iа(
ch
->
wrЩe_ch™ge
 & 
EV_CHANGE_DEL
) {

204 iа(
ch
->
ёd_evТts
 & 
EV_READ
) {

205 
evТts
 = 
EPOLLIN
;

206 
Ё
 = 
EPOLL_CTL_MOD
;

208 
evТts
 = 
EPOLLOUT
;

213 iа(!
evТts
)

216 
	`mem£t
(&
Хev
, 0, (epev));

217 
Хev
.
d©a
.
fd
 = 
ch
->fd;

218 
Хev
.
evТts
 =Гvents;

219 iа(
	`Хёl_щl
(
ХёlЁ
->
Хfd
, 
Ё
, 
ch
->
fd
, &
Хev
) == -1) {

220 iа(
Ё
 =р
EPOLL_CTL_MOD
 && 
ФЇo
 =р
ENOENT
) {

225 iа(
	`Хёl_щl
(
ХёlЁ
->
Хfd
, 
EPOLL_CTL_ADD
, 
ch
->
fd
, &
Хev
) == -1) {

226 
	`evТt_wђn
("Epoll MODДetriedЗs ADD;Бhat failedБoo");

228 
	`evТt_debug
((" RetriedЗs ADD; succeeded."));

230 } iа(
Ё
 =р
EPOLL_CTL_ADD
 && 
ФЇo
 =р
EEXIST
 &&

231 
іe€utiЏђy_add
) {

235 
	`evТt_debug
((" ADD wasДedundant"));

236 } iа(
Ё
 =р
EPOLL_CTL_DEL
 &&

237 (
ФЇo
 =р
ENOENT
 ||ГЉnЎ=р
EBADF
)) {

241 
	`evТt_debug
((" DEL was unnecessary."));

243 
	`evТt_wђn
("Epoll %s on fd %d failed. OldГvents were %d;Дead change was %d; write change was %d.",

244 
Ё
 =р
EPOLL_CTL_ADD
?"ADD":

245 
Ё
 =р
EPOLL_CTL_DEL
?"DEL":

246 
Ё
 =р
EPOLL_CTL_MOD
?"MOD":"???",

247 
ch
->
fd
,

248 
ch
->
ёd_evТts
,

249 
ch
->
їad_ch™ge
, ch->
wrЩe_ch™ge


253 
	`evТt_debug
(("Epoll %s(%d) on fd %d okay. [oldГvents were %d;Дead change was %d; write change was %d]",

254 
Ё
 =р
EPOLL_CTL_ADD
?"ADD":

255 
Ё
 =р
EPOLL_CTL_DEL
?"DEL":

256 
Ё
 =р
EPOLL_CTL_MOD
?"MOD":"???",

257 ()
Хev
.
evТts
,

258 ()
ch
->
fd
,

259 
ch
->
ёd_evТts
,

260 
ch
->
їad_ch™ge
, ch->
wrЩe_ch™ge
));

265 
	}
}

268 
	$Хёl_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

270 
ХёlЁ
 *ХёlЁ = 
ba£
->
evba£
;

271 
Хёl_evТt
 *
evТts
 = 
ХёlЁ
->events;

272 
i
, 
їs
, 
timeout
 = -1;

274 iа(
tv
 !р
NULL
)

275 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

277 iа(
timeout
 > 
MAX_EPOLL_TIMEOUT_MSEC
) {

280 
timeout
 = 
MAX_EPOLL_TIMEOUT_MSEC
;

283 
	`Хёl_≠ґy_ch™ges
(
ba£
);

284 
	`evТt_ch™gЦi°_їmove_Ѓl
(&
ba£
->
ch™gЦi°
, base);

286 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

288 
їs
 = 
	`Хёl_waЩ
(
ХёlЁ
->
Хfd
, 
evТts
,ГpёlЁ->
√vТts
, 
timeout
);

290 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

292 iа(
їs
 == -1) {

293 iа(
ФЇo
 !р
EINTR
) {

294 
	`evТt_wђn
("epoll_wait");

298 
	`evsig_іoыss
(
ba£
);

300 } iа(
ba£
->
sig
.
evsig_€ught
) {

301 
	`evsig_іoыss
(
ba£
);

304 
	`evТt_debug
(("%s:Гpёl_waЩДХ№t†%d", 
__func__
, 
їs
));

305 
	`EVUTIL_ASSERT
(
їs
 <р
ХёlЁ
->
√vТts
);

307 
i
 = 0; i < 
їs
; i++) {

308 
wh©
 = 
evТts
[
i
].events;

309 
ev
 = 0;

311 iа(
wh©
 & (
EPOLLHUP
|
EPOLLERR
)) {

312 
ev
 = 
EV_READ
 | 
EV_WRITE
;

314 iа(
wh©
 & 
EPOLLIN
)

315 
ev
 |р
EV_READ
;

316 iа(
wh©
 & 
EPOLLOUT
)

317 
ev
 |р
EV_WRITE
;

320 iа(!
evТts
)

323 
	`evm≠_io_aщive
(
ba£
, 
evТts
[
i
].
d©a
.
fd
, 
ev
 | 
EV_ET
);

326 iа(
їs
 =р
ХёlЁ
->
√vТts
 &&ГpёlЁ->√vТt†< 
MAX_NEVENT
) {

329 
√w_√vТts
 = 
ХёlЁ
->
√vТts
 * 2;

330 
Хёl_evТt
 *
√w_evТts
;

332 
√w_evТts
 = 
	`mm_їЃloc
(
ХёlЁ
->
evТts
,

333 
√w_√vТts
 * (
Хёl_evТt
));

334 iа(
√w_evТts
) {

335 
ХёlЁ
->
evТts
 = 
√w_evТts
;

336 
ХёlЁ
->
√vТts
 = 
√w_√vТts
;

341 
	}
}

345 
	$Хёl_dЧќoc
(
evТt_ba£
 *
ba£
)

347 
ХёlЁ
 *ХёlЁ = 
ba£
->
evba£
;

349 
	`evsig_dЧќoc
(
ba£
);

350 iа(
ХёlЁ
->
evТts
)

351 
	`mm_дУ
(
ХёlЁ
->
evТts
);

352 iа(
ХёlЁ
->
Хfd
 >= 0)

353 
	`юo£
(
ХёlЁ
->
Хfd
);

355 
	`mem£t
(
ХёlЁ
, 0, (epollop));

356 
	`mm_дУ
(
ХёlЁ
);

357 
	}
}

	@epoll_sub.c

26 
	~<°dЪt.h
>

28 
	~<sys/Јњm.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/sys€ќ.h
>

31 
	~<sys/Хёl.h
>

32 
	~<uni°d.h
>

35 
	$Хёl_ьЧЛ
(
size
)

37  (
	`sys€ќ
(
__NR_Хёl_ьЧЛ
, 
size
));

38 
	}
}

41 
	$Хёl_щl
(
Хfd
, 
Ё
, 
fd
, 
Хёl_evТt
 *
evТt
)

44  (
	`sys€ќ
(
__NR_Хёl_щl
, 
Хfd
, 
Ё
, 
fd
, 
evТt
));

45 
	}
}

48 
	$Хёl_waЩ
(
Хfd
, 
Хёl_evТt
 *
evТts
, 
maxevТts
, 
timeout
)

50  (
	`sys€ќ
(
__NR_Хёl_waЩ
, 
Хfd
, 
evТts
, 
maxevТts
, 
timeout
));

51 
	}
}

	@evbuffer-internal.h

27 #iвdeа
_EVBUFFER_INTERNAL_H_


28 
	#_EVBUFFER_INTERNAL_H_


	)

30 #ifdeа
__эlu•lus


34 
	~"evТt-cЏfig.h
"

35 
	~"evТt2/utЮ.h
"

36 
	~"utЮ-ЪЛЇЃ.h
"

37 
	~"deгr-ЪЛЇЃ.h
"

42 
	#EVBUFFER_CB_NODEFER
 2

	)

44 #ifdeа
WIN32


45 
	~<wЪsock2.h
>

47 
	~<sys/queue.h
>

49 
	#MIN_BUFFER_SIZE
 256

	)

53 
	sevbufгr_cb_ТМy
 {

55 
TAILQ_ENTRY
(
evbufгr_cb_ТМy
и
√xt
;

60 
evbufгr_cb_func
 
cb_func
;

61 
evbufгr_cb
 
cb_obsёСe
;

62 } 
cb
;

64 *
cbђg
;

66 
ev_uЪt32_t
 
жags
;

69 
bufгїvТt
;

70 
evbufгr_chaЪ
;

71 
	sevbufгr
 {

73 
evbufгr_chaЪ
 *
fЬ°
;

75 
evbufгr_chaЪ
 *
ѕ°
;

85 
evbufгr_chaЪ
 *
іevious_to_ѕ°
;

88 
size_t
 
tўЃ_Ћn
;

92 
size_t
 
n_add_f№_cb
;

95 
size_t
 
n_dЦ_f№_cb
;

97 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


99 *
lock
;

103 
own_lock
 : 1;

106 
дУze_°ђt
 : 1;

109 
дУze_Тd
 : 1;

115 
deгЉed_cbs
 : 1;

116 #ifdeа
WIN32


118 
is_ovФѕµed
 : 1;

122 
deгЉed_cb_queue
 *
cb_queue
;

128 
їfъt
;

132 
deгЉed_cb
 
deгЉed
;

135 
TAILQ_HEAD
(
evbufгr_cb_queue
, 
evbufгr_cb_ТМy
и
€ќbacks
;

139 
bufгїvТt
 *
ЈїЅ
;

143 
	sevbufгr_chaЪ
 {

145 
evbufгr_chaЪ
 *
√xt
;

148 
size_t
 
bufгr_Ћn
;

152 
off_t
 
miІlign
;

157 
size_t
 
off
;

160 
жags
;

161 
	#EVBUFFER_MMAP
 0x0001

	)

162 
	#EVBUFFER_SENDFILE
 0x0002

	)

163 
	#EVBUFFER_REFERENCE
 0x0004

	)

164 
	#EVBUFFER_IMMUTABLE
 0x0008

	)

167 
	#EVBUFFER_MEM_PINNED_R
 0x0010

	)

168 
	#EVBUFFER_MEM_PINNED_W
 0x0020

	)

169 
	#EVBUFFER_MEM_PINNED_ANY
 (
EVBUFFER_MEM_PINNED_R
|
EVBUFFER_MEM_PINNED_W
)

	)

172 
	#EVBUFFER_DANGLING
 0x0040

	)

180 *
bufгr
;

187 
	sevbufгr_chaЪ_fd
 {

188 
fd
;

193 
	sevbufгr_chaЪ_їгїnы
 {

194 
evbufгr_їf_юЧnup_cb
 
юЧnupв
;

195 *
exМa
;

198 
	#EVBUFFER_CHAIN_SIZE
 (
evbufгr_chaЪ
)

	)

200 
	#EVBUFFER_CHAIN_EXTRA
(
t
, 
c
и— *)((
evbufгr_chaЪ
 *)(cи+ 1)

	)

203 
	#ASSERT_EVBUFFER_LOCKED
(
bufгr
) \

204 
	`EVLOCK_ASSERT_LOCKED
((
bufгr
)->
lock
)

	)

206 
	#EVBUFFER_LOCK
(
bufгr
) \

208 
	`EVLOCK_LOCK
((
bufгr
)->
lock
, 0); \

209 } 0)

	)

210 
	#EVBUFFER_UNLOCK
(
bufгr
) \

212 
	`EVLOCK_UNLOCK
((
bufгr
)->
lock
, 0); \

213 } 0)

	)

214 
	#EVBUFFER_LOCK2
(
bufгr1
, 
bufгr2
) \

216 
	`EVLOCK_LOCK2
((
bufгr1
)->
lock
, (
bufгr2
)->lock, 0, 0); \

217 } 0)

	)

218 
	#EVBUFFER_UNLOCK2
(
bufгr1
, 
bufгr2
) \

220 
	`EVLOCK_UNLOCK2
((
bufгr1
)->
lock
, (
bufгr2
)->lock, 0, 0); \

221 } 0)

	)

224 
_evbufгr_Ъьef
(
evbufгr
 *
buf
);

226 
_evbufгr_Ъьef_™d_lock
(
evbufгr
 *
buf
);

229 
_evbufгr_chaЪ_pЪ
(
evbufгr_chaЪ
 *
chaЪ
, 
жag
);

231 
_evbufгr_chaЪ_u≈Ъ
(
evbufгr_chaЪ
 *
chaЪ
, 
жag
);

234 
_evbufгr_deьef_™d_u∆ock
(
evbufгr
 *
bufгr
);

238 
_evbufгr_exЈnd_з°
(
evbufгr
 *, 
size_t
);

246 
_evbufгr_їad_£tup_vecs
(
evbufгr
 *
buf
, 
ev_ssize_t
 
howmuch
,

247 
evbufгr_iovec
 *
vecs
, 
evbufгr_chaЪ
 **
chaЪp
, 
exaщ
);

250 
	#WSABUF_FROM_EVBUFFER_IOV
(
i
,
ei
) do { \

251 (
i
)->
buf
 = (
ei
)->
iov_ba£
; \

252 (
i
)->
Ћn
 = (
ei
)->
iov_Ћn
; \

253 } 0)

	)

256 
evbufгr_£t_ЈїЅ
(
evbufгr
 *
buf
, 
bufгїvТt
 *
bev
);

258 #ifdeа
__эlu•lus


	@evdns.c

37 
	~<sys/ty≥s.h
>

38 
	~"evТt-cЏfig.h
"

40 #iвdeа
_FORTIFY_SOURCE


41 
	#_FORTIFY_SOURCE
 3

	)

44 
	~<°rЪg.h
>

45 
	~<fъО.h
>

46 #ifdeа
_EVENT_HAVE_SYS_TIME_H


47 
	~<sys/time.h
>

49 #ifdeа
_EVENT_HAVE_STDINT_H


50 
	~<°dЪt.h
>

52 
	~<°dlib.h
>

53 
	~<°rЪg.h
>

54 
	~<ФЇo.h
>

55 #ifdeа
_EVENT_HAVE_UNISTD_H


56 
	~<uni°d.h
>

58 
	~<limЩs.h
>

59 
	~<sys/°©.h
>

60 
	~<°dio.h
>

61 
	~<°dђg.h
>

62 #ifdeа
WIN32


63 
	~<wЪsock2.h
>

64 
	~<ws2tэЭ.h
>

65 #iвdeа
_WIN32_IE


66 
	#_WIN32_IE
 0x400

	)

68 
	~<shlobj.h
>

71 
	~<evТt2/dns.h
>

72 
	~<evТt2/dns_°ruщ.h
>

73 
	~<evТt2/dns_comЈt.h
>

74 
	~<evТt2/utЮ.h
>

75 
	~<evТt2/evТt.h
>

76 
	~<evТt2/evТt_°ruщ.h
>

77 
	~<evТt2/thїad.h
>

79 
	~<evТt2/bufгїvТt.h
>

80 
	~<evТt2/bufгїvТt_°ruщ.h
>

81 
	~"bufгїvТt-ЪЛЇЃ.h
"

83 
	~"deгr-ЪЛЇЃ.h
"

84 
	~"log-ЪЛЇЃ.h
"

85 
	~"mm-ЪЛЇЃ.h
"

86 
	~"°Њэy-ЪЛЇЃ.h
"

87 
	~"Эv6-ЪЛЇЃ.h
"

88 
	~"utЮ-ЪЛЇЃ.h
"

89 
	~"evthїad-ЪЛЇЃ.h
"

90 #ifdeа
WIN32


91 
	~<щy≥.h
>

92 
	~<wЪsock2.h
>

93 
	~<wЪdows.h
>

94 
	~<ЭhЌ≠i.h
>

95 
	~<io.h
>

97 
	~<sys/sockС.h
>

98 
	~<√tЪС/Ъ.h
>

99 
	~<ђЈ/ЪС.h
>

102 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


103 
	~<√tЪС/Ъ6.h
>

106 
	#EVDNS_LOG_DEBUG
 0

	)

107 
	#EVDNS_LOG_WARN
 1

	)

109 #iвdeа
HOST_NAME_MAX


110 
	#HOST_NAME_MAX
 255

	)

113 
	~<°dio.h
>

115 #undeа
MIN


116 
	#MIN
(
a
,
b
и(„)<(b)?„):(b))

	)

118 #ifdeа
__USE_ISOC99B


120 
	tuЪt
;

123 
	#u64
 
ev_uЪt64_t


	)

124 
	#u32
 
ev_uЪt32_t


	)

125 
	#u16
 
ev_uЪt16_t


	)

126 
	#u8
 
ev_uЪt8_t


	)

128 #ifdeа
WIN32


129 
	#ЁТ
 
_ЁТ


	)

130 
	#їad
 
_їad


	)

131 
	#юo£
 
_юo£


	)

136 
	#MAX_V4_ADDRS
 32

	)

137 
	#MAX_V6_ADDRS
 32

	)

140 
	#TYPE_A
 
EVDNS_TYPE_A


	)

141 
	#TYPE_CNAME
 5

	)

142 
	#TYPE_PTR
 
EVDNS_TYPE_PTR


	)

143 
	#TYPE_AAAA
 
EVDNS_TYPE_AAAA


	)

145 
	#CLASS_INET
 
EVDNS_CLASS_INET


	)

147 
	sevdns_їque°
 {

148 
u8
 *
	mїque°
;

149 
u8
 
	mїque°_ty≥
;

150 
	mїque°_Ћn
;

151 
	mїissue_couЅ
;

152 
	mtx_couЅ
;

153 *
	mu£r_poЪЛr
;

154 
evdns_€ќback_ty≥
 
	mu£r_€ќback
;

155 
«me£rvФ
 *
	mns
;

158 
	m£ђch_Ъdex
;

159 
£ђch_°©e
 *
	m£ђch_°©e
;

160 *
	m£ђch_№ig«me
;

161 
	m£ђch_жags
;

164 
evdns_їque°
 *
	m√xt
, *
	mіev
;

166 
evТt
 
	mtimeout_evТt
;

168 
u16
 
	mМ™s_id
;

169 
	mїque°_≠≥nded
 :1;

170 
	mМ™smЩ_me
 :1;

173 **
	mput_ъame_Ъ_±r
;

175 
evdns_ba£
 *
	mba£
;

178 
	sїґy
 {

179 
	mty≥
;

180 
	mhave_™swФ
 : 1;

183 
u32
 
	maddrcouЅ
;

184 
u32
 
	maddїs£s
[
MAX_V4_ADDRS
];

185 } 
	ma
;

187 
u32
 
	maddrcouЅ
;

188 
Ъ6_addr
 
	maddїs£s
[
MAX_V6_ADDRS
];

189 } 
	mѓѓ
;

191 
	m«me
[
HOST_NAME_MAX
];

192 } 
	m±r
;

193 } 
	md©a
;

196 
	s«me£rvФ
 {

197 
evutЮ_sockС_t
 
	msockС
;

198 
sockaddr_°№age
 
	maddїss
;

199 
ev_sockЋn_t
 
	maddЊТ
;

200 
	mзЮed_times
;

201 
	mtimedout
;

202 
evТt
 
	mevТt
;

204 
«me£rvФ
 *
	m√xt
, *
	mіev
;

205 
evТt
 
	mtimeout_evТt
;

209 
evdns_їque°
 *
	mіobe_їque°
;

210 
	m°©e
;

211 
	mchoked
;

212 
	mwrЩe_waЩЪg
;

213 
evdns_ba£
 *
	mba£
;

219 
	sevdns_£rvФ_p№t
 {

220 
evutЮ_sockС_t
 
	msockС
;

221 
	mїfъt
;

222 
	mchoked
;

223 
	mюosЪg
;

224 
evdns_їque°_€ќback_в_ty≥
 
	mu£r_€ќback
;

225 *
	mu£r_d©a
;

226 
evТt
 
	mevТt
;

228 
£rvФ_їque°
 *
	m≥ndЪg_їґЫs
;

229 
evТt_ba£
 *
	mevТt_ba£
;

231 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


232 *
	mlock
;

237 
	s£rvФ_їґy_Щem
 {

238 
£rvФ_їґy_Щem
 *
	m√xt
;

239 *
	m«me
;

240 
u16
 
	mty≥
;

241 
u16
 
	mюass
;

242 
u32
 
	mЙl
;

243 
	mis_«me
;

244 
u16
 
	md©ЃТ
;

245 *
	md©a
;

250 
	s£rvФ_їque°
 {

254 
£rvФ_їque°
 *
	m√xt_≥ndЪg
;

255 
£rvФ_їque°
 *
	mіev_≥ndЪg
;

257 
u16
 
	mМ™s_id
;

258 
evdns_£rvФ_p№t
 *
	mp№t
;

259 
sockaddr_°№age
 
	maddr
;

260 
ev_sockЋn_t
 
	maddЊТ
;

262 
	mn_™swФ
;

263 
	mn_auth№Щy
;

264 
	mn_addЩiЏЃ
;

266 
£rvФ_їґy_Щem
 *
	m™swФ
;

267 
£rvФ_їґy_Щem
 *
	mauth№Щy
;

268 
£rvФ_їґy_Щem
 *
	maddЩiЏЃ
;

272 *
	mї•Џ£
;

273 
size_t
 
	mї•Џ£_Ћn
;

276 
evdns_£rvФ_їque°
 
	mba£
;

279 
	sevdns_ba£
 {

283 
evdns_їque°
 **
	mїq_hЧds
;

286 
evdns_їque°
 *
	mїq_waЩЪg_hЧd
;

288 
«me£rvФ
 *
	m£rvФ_hЧd
;

289 
	mn_їq_hЧds
;

291 
evТt_ba£
 *
	mevТt_ba£
;

294 
	mglobЃ_good_«me£rvФs
;

298 
	mglobЃ_їque°s_Ъжight
;

301 
	mglobЃ_їque°s_waЩЪg
;

303 
	mglobЃ_max_їque°s_Ъжight
;

305 
timevЃ
 
	mglobЃ_timeout
;

306 
	mglobЃ_max_їissues
;

307 
	mglobЃ_max_їМ™smЩs
;

309 
	mglobЃ_max_«me£rvФ_timeout
;

311 
	mglobЃ_њndomize_€£
;

315 
timevЃ
 
	mglobЃ_«me£rvФ_іobe_ЪЩЯl_timeout
;

318 
sockaddr_°№age
 
	mglobЃ_outgoЪg_addїss
;

320 
ev_sockЋn_t
 
	mglobЃ_outgoЪg_addЊТ
;

322 
timevЃ
 
	mglobЃ_gСaddrЪfo_Ѓlow_skew
;

324 
	mgСaddrЪfo_Эv4_timeouts
;

325 
	mgСaddrЪfo_Эv6_timeouts
;

326 
	mgСaddrЪfo_Эv4_™swФed
;

327 
	mgСaddrЪfo_Эv6_™swФed
;

329 
£ђch_°©e
 *
	mglobЃ_£ђch_°©e
;

331 
TAILQ_HEAD
(
ho°s_li°
, 
ho°s_ТМy
и
	mho°sdb
;

333 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


334 *
	mlock
;

338 
	sho°s_ТМy
 {

339 
TAILQ_ENTRY
(
ho°s_ТМy
и
	m√xt
;

341 
sockaddr
 
	mІ
;

342 
sockaddr_Ъ
 
	msЪ
;

343 
sockaddr_Ъ6
 
	msЪ6
;

344 } 
	maddr
;

345 
	maddЊТ
;

346 
	mho°«me
[1];

349 
evdns_ba£
 *
	gcuЉТt_ba£
 = 
NULL
;

351 
evdns_ba£
 *

352 
	$evdns_gС_globЃ_ba£
()

354  
cuЉТt_ba£
;

355 
	}
}

359 
	#TO_SERVER_REQUEST
(
ba£_±r
) \

360 ((
£rvФ_їque°
*) \

361 (((*)(
ba£_±r
и- 
	`evutЮ_off£tof
(
£rvФ_їque°
, 
ba£
))))

	)

363 
	#REQ_HEAD
(
ba£
, 
id
и((ba£)->
їq_hЧds
[id % (ba£)->
n_їq_hЧds
])

	)

365 
«me£rvФ
 *
«me£rvФ_pick
(
evdns_ba£
 *
ba£
);

366 
evdns_їque°_Ъ£є
(
evdns_їque°
 *
їq
, evdns_їque° **
hЧd
);

367 
evdns_їque°_їmove
(
evdns_їque°
 *
їq
, evdns_їque° **
hЧd
);

368 
«me£rvФ_їady_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
);

369 
evdns_М™smЩ
(
evdns_ba£
 *
ba£
);

370 
evdns_їque°_М™smЩ
(
evdns_їque°
 *
їq
);

371 
«me£rvФ_£nd_іobe
(
«me£rvФ
 *cЏ° 
ns
);

372 
£ђch_їque°_fЪished
(
evdns_їque°
 *const);

373 
£ђch_Мy_√xt
(
evdns_їque°
 *cЏ° 
їq
);

374 
evdns_їque°
 *
£ђch_їque°_√w
(
evdns_ba£
 *
ba£
, 
ty≥
, cЏ° *cЏ° 
«me
, 
жags
, 
evdns_€ќback_ty≥
 
u£r_€ќback
, *
u£r_ђg
);

375 
evdns_їque°s_pump_waЩЪg_queue
(
evdns_ba£
 *
ba£
);

376 
u16
 
М™ІщiЏ_id_pick
(
evdns_ba£
 *
ba£
);

377 
evdns_їque°
 *
їque°_√w
(
evdns_ba£
 *
ba£
, 
ty≥
, cЏ° *
«me
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

378 
їque°_submЩ
(
evdns_їque°
 *cЏ° 
їq
);

380 
£rvФ_їque°_дУ
(
£rvФ_їque°
 *
їq
);

381 
£rvФ_їque°_дУ_™swФs
(
£rvФ_їque°
 *
їq
);

382 
£rvФ_p№t_дУ
(
evdns_£rvФ_p№t
 *
p№t
);

383 
£rvФ_p№t_їady_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
);

384 
evdns_ba£_їsёv_cЏf_Јr£_imґ
(
evdns_ba£
 *
ba£
, 
жags
, cЏ° *cЏ° 
fЮТame
);

385 
evdns_ba£_£t_ЁtiЏ_imґ
(
evdns_ba£
 *
ba£
,

386 cЏ° *
ЁtiЏ
, cЏ° *
vЃ
, 
жags
);

387 
evdns_ba£_дУ_™d_u∆ock
(
evdns_ba£
 *
ba£
, 
зЮ_їque°s
);

389 
°єoЪt
(cЏ° *cЏ° 
°r
);

391 #ifdeа
_EVENT_DISABLE_THREAD_SUPPORT


392 
	#EVDNS_LOCK
(
ba£
и
_EVUTIL_NIL_STMT


	)

393 
	#EVDNS_UNLOCK
(
ba£
и
_EVUTIL_NIL_STMT


	)

394 
	#ASSERT_LOCKED
(
ba£
и
_EVUTIL_NIL_STMT


	)

396 
	#EVDNS_LOCK
(
ba£
) \

397 
	`EVLOCK_LOCK
((
ba£
)->
lock
, 0)

	)

398 
	#EVDNS_UNLOCK
(
ba£
) \

399 
	`EVLOCK_UNLOCK
((
ba£
)->
lock
, 0)

	)

400 
	#ASSERT_LOCKED
(
ba£
) \

401 
	`EVLOCK_ASSERT_LOCKED
((
ba£
)->
lock
)

	)

404 
	#CLOSE_SOCKET
(
s
и
	`EVUTIL_CLOSESOCKET
(s)

	)

407 
	$debug_Ѕя
(
u32
 
addїss
)

409 
buf
[32];

410 
u32
 
a
 = 
	`Ѕohl
(
addїss
);

411 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "%d.%d.%d.%d",

412 ()(
u8
)((
a
>>24)&0xff),

413 ()(
u8
)((
a
>>16)&0xff),

414 ()(
u8
)((
a
>>8 )&0xff),

415 ()(
u8
)((
a
 )&0xff));

416  
buf
;

417 
	}
}

420 
	$debug_ЅЁ
(cЏ° 
sockaddr
 *
І
)

422 iа(
І
->
І_зmЮy
 =р
AF_INET
) {

423 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ *и
І
;

424  
	`debug_Ѕя
(
sЪ
->
sЪ_addr
.
s_addr
);

426 #ifdeа
AF_INET6


427 iа(
І
->
І_зmЮy
 =р
AF_INET6
) {

428 
buf
[128];

429 
sockaddr_Ъ6
 *
sЪ6
 = (sockaddr_Ъ6 *и
І
;

430 cЏ° *
їsu…
;

431 
їsu…
 = 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
sЪ6
->
sЪ6_addr
, 
buf
, (buf));

432  
їsu…
 ?Дesult : "unknown";

436 
	}
}

438 
evdns_debug_log_в_ty≥
 
	gevdns_log_в
 = 
NULL
;

441 
	$evdns_£t_log_в
(
evdns_debug_log_в_ty≥
 
в
)

443 
evdns_log_в
 = 
в
;

444 
	}
}

446 #ifdeа
__GNUC__


447 
	#EVDNS_LOG_CHECK
 
	`__©МibuЛ__
 ((
	`f№m©
(
іЪtf
, 2, 3)))

	)

449 
	#EVDNS_LOG_CHECK


	)

452 
	$_evdns_log
(
wђn
, cЏ° *
fmt
, ...и
EVDNS_LOG_CHECK
;

454 
	$_evdns_log
(
wђn
, cЏ° *
fmt
, ...)

456 
va_li°
 
ђgs
;

457 
buf
[512];

458 iа(!
evdns_log_в
)

460 
	`va_°ђt
(
ђgs
,
fmt
);

461 
	`evutЮ_vҐіЪtf
(
buf
, (buf), 
fmt
, 
ђgs
);

462 
	`evdns_log_в
(
wђn
, 
buf
);

463 
	`va_Тd
(
ђgs
);

464 
	}
}

466 
	#log
 
_evdns_log


	)

471 
evdns_їque°
 *

472 
	$їque°_fЪd_дom_М™s_id
(
evdns_ba£
 *
ba£
, 
u16
 
М™s_id
) {

473 
evdns_їque°
 *
їq
 = 
	`REQ_HEAD
(
ba£
, 
М™s_id
);

474 
evdns_їque°
 *cЏ° 
°ђЛd_©
 = 
їq
;

476 
	`ASSERT_LOCKED
(
ba£
);

478 iа(
їq
) {

480 iа(
їq
->
М™s_id
 ==Бrans_id) Дeq;

481 
їq
 =Дeq->
√xt
;

482 } 
їq
 !р
°ђЛd_©
);

485  
NULL
;

486 
	}
}

491 
	$«me£rvФ_іod_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
) {

492 
«me£rvФ
 *cЏ° 
ns
 = («me£rvФ *и
ђg
;

493 ()
fd
;

494 ()
evТts
;

496 
	`EVDNS_LOCK
(
ns
->
ba£
);

497 
	`«me£rvФ_£nd_іobe
(
ns
);

498 
	`EVDNS_UNLOCK
(
ns
->
ba£
);

499 
	}
}

505 
	$«me£rvФ_іobe_зЮed
(
«me£rvФ
 *cЏ° 
ns
) {

506 
timevЃ
 
timeout
;

507 
i
;

509 
	`ASSERT_LOCKED
(
ns
->
ba£
);

510 (и
	`evtimФ_dЦ
(&
ns
->
timeout_evТt
);

511 iа(
ns
->
°©e
 == 1) {

517 
	#MAX_PROBE_TIMEOUT
 3600

	)

518 
	#TIMEOUT_BACKOFF_FACTOR
 3

	)

520 
	`memэy
(&
timeout
, &
ns
->
ba£
->
globЃ_«me£rvФ_іobe_ЪЩЯl_timeout
,

521 (
timevЃ
));

522 
i
=
ns
->
зЮed_times
; i > 0 && 
timeout
.
tv_£c
 < 
MAX_PROBE_TIMEOUT
; --i) {

523 
timeout
.
tv_£c
 *р
TIMEOUT_BACKOFF_FACTOR
;

524 
timeout
.
tv_u£c
 *р
TIMEOUT_BACKOFF_FACTOR
;

525 iа(
timeout
.
tv_u£c
 > 1000000) {

526 
timeout
.
tv_£c
 +рtimeout.
tv_u£c
 / 1000000;

527 
timeout
.
tv_u£c
 %= 1000000;

530 iа(
timeout
.
tv_£c
 > 
MAX_PROBE_TIMEOUT
) {

531 
timeout
.
tv_£c
 = 
MAX_PROBE_TIMEOUT
;

532 
timeout
.
tv_u£c
 = 0;

535 
ns
->
зЮed_times
++;

537 iа(
	`evtimФ_add
(&
ns
->
timeout_evТt
, &
timeout
) < 0) {

538 
	`log
(
EVDNS_LOG_WARN
,

540 
	`debug_ЅЁ
((
sockaddr
 *)&
ns
->
addїss
));

543 
	}
}

548 
	$«me£rvФ_зЮed
(
«me£rvФ
 *cЏ° 
ns
, cЏ° *
msg
) {

549 
evdns_їque°
 *
їq
, *
°ђЛd_©
;

550 
evdns_ba£
 *
ba£
 = 
ns
->base;

551 
i
;

553 
	`ASSERT_LOCKED
(
ba£
);

556 iа(!
ns
->
°©e
) ;

558 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s has failed: %s",

559 
	`debug_ЅЁ
((
sockaddr
*)&
ns
->
addїss
), 
msg
);

560 
ba£
->
globЃ_good_«me£rvФs
--;

561 
	`EVUTIL_ASSERT
(
ba£
->
globЃ_good_«me£rvФs
 >= 0);

562 iа(
ba£
->
globЃ_good_«me£rvФs
 == 0) {

563 
	`log
(
EVDNS_LOG_WARN
, "AllВameservers have failed");

566 
ns
->
°©e
 = 0;

567 
ns
->
зЮed_times
 = 1;

569 iа(
	`evtimФ_add
(&
ns
->
timeout_evТt
,

570 &
ba£
->
globЃ_«me£rvФ_іobe_ЪЩЯl_timeout
) < 0) {

571 
	`log
(
EVDNS_LOG_WARN
,

573 
	`debug_ЅЁ
((
sockaddr
*)&
ns
->
addїss
));

583 iа(!
ba£
->
globЃ_good_«me£rvФs
) ;

585 
i
 = 0; i < 
ba£
->
n_їq_hЧds
; ++i) {

586 
їq
 = 
°ђЛd_©
 = 
ba£
->
їq_hЧds
[
i
];

587 iа(
їq
) {

589 iа(
їq
->
tx_couЅ
 =р0 &&Дeq->
ns
 ==Вs) {

592 
їq
->
ns
 = 
	`«me£rvФ_pick
(
ba£
);

594 
їq
 =Дeq->
√xt
;

595 } 
їq
 !р
°ђЛd_©
);

598 
	}
}

601 
	$«me£rvФ_up
(
«me£rvФ
 *cЏ° 
ns
)

603 
	`ASSERT_LOCKED
(
ns
->
ba£
);

604 iа(
ns
->
°©e
) ;

605 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s is back up",

606 
	`debug_ЅЁ
((
sockaddr
 *)&
ns
->
addїss
));

607 
	`evtimФ_dЦ
(&
ns
->
timeout_evТt
);

608 iа(
ns
->
іobe_їque°
) {

609 
	`evdns_€nыl_їque°
(
ns
->
ba£
,Вs->
іobe_їque°
);

610 
ns
->
іobe_їque°
 = 
NULL
;

612 
ns
->
°©e
 = 1;

613 
ns
->
зЮed_times
 = 0;

614 
ns
->
timedout
 = 0;

615 
ns
->
ba£
->
globЃ_good_«me£rvФs
++;

616 
	}
}

619 
	$їque°_М™s_id_£t
(
evdns_їque°
 *cЏ° 
їq
, cЏ° 
u16
 
М™s_id
) {

620 
їq
->
М™s_id
 =Бrans_id;

621 *((
u16
 *и
їq
->
їque°
ир
	`htЏs
(
М™s_id
);

622 
	}
}

628 
	$їque°_fЪished
(
evdns_їque°
 *cЏ° 
їq
, evdns_їque° **
hЧd
) {

629 
evdns_ba£
 *
ba£
 = 
їq
->base;

630 
was_Ъжight
 = (
hЧd
 !р&
ba£
->
їq_waЩЪg_hЧd
);

631 
	`EVDNS_LOCK
(
ba£
);

632 iа(
hЧd
)

633 
	`evdns_їque°_їmove
(
їq
, 
hЧd
);

635 
	`log
(
EVDNS_LOG_DEBUG
, "RemovingБimeout forДequest %lx",

636 (и
їq
);

637 
	`£ђch_їque°_fЪished
(
їq
);

638 iа(
was_Ъжight
) {

639 
	`evtimФ_dЦ
(&
їq
->
timeout_evТt
);

640 
ba£
->
globЃ_їque°s_Ъжight
--;

642 
ba£
->
globЃ_їque°s_waЩЪg
--;

645 iа(!
їq
->
їque°_≠≥nded
) {

647 
	`mm_дУ
(
їq
->
їque°
);

653 
	`mm_дУ
(
їq
);

655 
	`evdns_їque°s_pump_waЩЪg_queue
(
ba£
);

656 
	`EVDNS_UNLOCK
(
ba£
);

657 
	}
}

666 
	$їque°_їissue
(
evdns_їque°
 *
їq
) {

667 cЏ° 
«me£rvФ
 *cЏ° 
ѕ°_ns
 = 
їq
->
ns
;

668 
	`ASSERT_LOCKED
(
їq
->
ba£
);

672 
їq
->
ns
 = 
	`«me£rvФ_pick
‘eq->
ba£
);

673 iа(
їq
->
ns
 =р
ѕ°_ns
) {

680 
їq
->
їissue_couЅ
++;

681 
їq
->
tx_couЅ
 = 0;

682 
їq
->
М™smЩ_me
 = 1;

685 
	}
}

690 
	$evdns_їque°s_pump_waЩЪg_queue
(
evdns_ba£
 *
ba£
) {

691 
	`ASSERT_LOCKED
(
ba£
);

692 
ba£
->
globЃ_їque°s_Ъжight
 < ba£->
globЃ_max_їque°s_Ъжight
 &&

693 
ba£
->
globЃ_їque°s_waЩЪg
) {

694 
evdns_їque°
 *
їq
;

696 
	`EVUTIL_ASSERT
(
ba£
->
їq_waЩЪg_hЧd
);

697 
їq
 = 
ba£
->
їq_waЩЪg_hЧd
;

698 
	`evdns_їque°_їmove
(
їq
, &
ba£
->
їq_waЩЪg_hЧd
);

700 
ba£
->
globЃ_їque°s_waЩЪg
--;

701 
ba£
->
globЃ_їque°s_Ъжight
++;

703 
їq
->
ns
 = 
	`«me£rvФ_pick
(
ba£
);

704 
	`їque°_М™s_id_£t
(
їq
, 
	`М™ІщiЏ_id_pick
(
ba£
));

706 
	`evdns_їque°_Ъ£є
(
їq
, &
	`REQ_HEAD
(
ba£
,Дeq->
М™s_id
));

707 
	`evdns_їque°_М™smЩ
(
їq
);

708 
	`evdns_М™smЩ
(
ba£
);

710 
	}
}

713 
	sdeгЉed_їґy_€ќback
 {

714 
deгЉed_cb
 
	mdeгЉed
;

715 
u8
 
	mїque°_ty≥
;

716 
u8
 
	mhave_їґy
;

717 
u32
 
	mЙl
;

718 
u32
 
	mФr
;

719 
evdns_€ќback_ty≥
 
	mu£r_€ќback
;

720 
їґy
 
	mїґy
;

724 
	$їґy_run_€ќback
(
deгЉed_cb
 *
d
, *
u£r_poЪЛr
)

726 
deгЉed_їґy_€ќback
 *
cb
 =

727 
	`EVUTIL_UPCAST
(
d
, 
deгЉed_їґy_€ќback
, 
deгЉed
);

729 
cb
->
їque°_ty≥
) {

730 
TYPE_A
:

731 iа(
cb
->
have_їґy
)

732 
cb
->
	`u£r_€ќback
(
DNS_ERR_NONE
, 
DNS_IPv4_A
,

733 
cb
->
їґy
.
d©a
.
a
.
addrcouЅ
, cb->
Йl
,

734 
cb
->
їґy
.
d©a
.
a
.
addїs£s
,

735 
u£r_poЪЛr
);

737 
cb
->
	`u£r_€ќback
(cb->
Фr
, 0, 0, 0, 
NULL
, 
u£r_poЪЛr
);

739 
TYPE_PTR
:

740 iа(
cb
->
have_їґy
) {

741 *
«me
 = 
cb
->
їґy
.
d©a
.
±r
.name;

742 
cb
->
	`u£r_€ќback
(
DNS_ERR_NONE
, 
DNS_PTR
, 1, cb->
Йl
,

743 &
«me
, 
u£r_poЪЛr
);

745 
cb
->
	`u£r_€ќback
(cb->
Фr
, 0, 0, 0, 
NULL
, 
u£r_poЪЛr
);

748 
TYPE_AAAA
:

749 iа(
cb
->
have_їґy
)

750 
cb
->
	`u£r_€ќback
(
DNS_ERR_NONE
, 
DNS_IPv6_AAAA
,

751 
cb
->
їґy
.
d©a
.
ѓѓ
.
addrcouЅ
, cb->
Йl
,

752 
cb
->
їґy
.
d©a
.
ѓѓ
.
addїs£s
,

753 
u£r_poЪЛr
);

755 
cb
->
	`u£r_€ќback
(cb->
Фr
, 0, 0, 0, 
NULL
, 
u£r_poЪЛr
);

758 
	`EVUTIL_ASSERT
(0);

761 
	`mm_дУ
(
cb
);

762 
	}
}

765 
	$їґy_scheduЋ_€ќback
(
evdns_їque°
 *cЏ° 
їq
, 
u32
 
Йl
, u32 
Фr
, 
їґy
 *reply)

767 
deгЉed_їґy_€ќback
 *
d
 = 
	`mm_€ќoc
(1, (*d));

769 
	`ASSERT_LOCKED
(
їq
->
ba£
);

771 
d
->
їque°_ty≥
 = 
їq
->request_type;

772 
d
->
u£r_€ќback
 = 
їq
->user_callback;

773 
d
->
Йl
 =Бtl;

774 
d
->
Фr
 =Гrr;

775 iа(
їґy
) {

776 
d
->
have_їґy
 = 1;

777 
	`memэy
(&
d
->
їґy
,Дeply, (reply));

780 
	`evТt_deгЉed_cb_ЪЩ
(&
d
->
deгЉed
, 
їґy_run_€ќback
,

781 
їq
->
u£r_poЪЛr
);

782 
	`evТt_deгЉed_cb_scheduЋ
(

783 
	`evТt_ba£_gС_deгЉed_cb_queue
(
їq
->
ba£
->
evТt_ba£
),

784 &
d
->
deгЉed
);

785 
	}
}

789 
	$їґy_h™dЋ
(
evdns_їque°
 *cЏ° 
їq
, 
u16
 
жags
, 
u32
 
Йl
, 
їґy
 *reply) {

790 
Фr№
;

791 cЏ° 
Фr№_codes
[] = {

792 
DNS_ERR_FORMAT
, 
DNS_ERR_SERVERFAILED
, 
DNS_ERR_NOTEXIST
,

793 
DNS_ERR_NOTIMPL
, 
DNS_ERR_REFUSED


796 
	`ASSERT_LOCKED
(
їq
->
ba£
);

798 iа(
жags
 & 0x020а|| !
їґy
 || !їґy->
have_™swФ
) {

800 iа(
жags
 & 0x0200) {

801 
Фr№
 = 
DNS_ERR_TRUNCATED
;

803 
u16
 
Фr№_code
 = (
жags
 & 0x000f) - 1;

804 iа(
Фr№_code
 > 4) {

805 
Фr№
 = 
DNS_ERR_UNKNOWN
;

807 
Фr№
 = 
Фr№_codes
[
Фr№_code
];

811 
Фr№
) {

812 
DNS_ERR_NOTIMPL
:

813 
DNS_ERR_REFUSED
:

815 iа(
їq
->
їissue_couЅ
 <Дeq->
ba£
->
globЃ_max_їissues
) {

816 
msg
[64];

817 
	`evutЮ_ҐіЪtf
(
msg
, (msg), "BadДesponse %d (%s)",

818 
Фr№
, 
	`evdns_Фr_to_°rЪg
(error));

819 
	`«me£rvФ_зЮed
(
їq
->
ns
, 
msg
);

820 iа(!
	`їque°_їissue
(
їq
)) ;

823 
DNS_ERR_SERVERFAILED
:

829 
	`log
(
EVDNS_LOG_DEBUG
, "GotЗ SERVERFAILED fromВameserver %s; "

831 
	`debug_ЅЁ
((
sockaddr
 *)&
їq
->
ns
->
addїss
));

835 
	`«me£rvФ_up
(
їq
->
ns
);

838 iа(
їq
->
£ђch_°©e
 &&Дeq->
їque°_ty≥
 !р
TYPE_PTR
) {

841 iа(!
	`£ђch_Мy_√xt
(
їq
)) {

847 
	`їque°_fЪished
(
їq
, &
	`REQ_HEAD
‘eq->
ba£
,Дeq->
М™s_id
));

853 
	`їґy_scheduЋ_€ќback
(
їq
, 0, 
Фr№
, 
NULL
);

854 
	`їque°_fЪished
(
їq
, &
	`REQ_HEAD
‘eq->
ba£
,Дeq->
М™s_id
));

857 
	`їґy_scheduЋ_€ќback
(
їq
, 
Йl
, 0, 
їґy
);

858 iа(
їq
 =рїq->
ns
->
іobe_їque°
)

859 
їq
->
ns
->
іobe_їque°
 = 
NULL
;

860 
	`«me£rvФ_up
(
їq
->
ns
);

861 
	`їque°_fЪished
(
їq
, &
	`REQ_HEAD
‘eq->
ba£
,Дeq->
М™s_id
));

863 
	}
}

866 
	$«me_Јr£
(
u8
 *
ЈckС
, 
Ћngth
, *
idx
, *
«me_out
, 
«me_out_Ћn
) {

867 
«me_Тd
 = -1;

868 
j
 = *
idx
;

869 
±r_couЅ
 = 0;

870 
	#GET32
(
x
иdЎ{ iа(
j
 + 4 > 
Ћngth
и
Фr
; 
	`memэy
(&
_t32
, 
ЈckС
 + j, 4); j +р4; x = 
	`Ѕohl
(_t32); } 0)

	)

871 
	#GET16
(
x
иdЎ{ iа(
j
 + 2 > 
Ћngth
и
Фr
; 
	`memэy
(&
_t
, 
ЈckС
 + j, 2); j +р2; x = 
	`Ѕohs
(_t); } 0)

	)

872 
	#GET8
(
x
иdЎ{ iа(
j
 >р
Ћngth
и
Фr
; x = 
ЈckС
[j++]; } 0)

	)

874 *
э
 = 
«me_out
;

875 cЏ° *cЏ° 
Тd
 = 
«me_out
 + 
«me_out_Ћn
;

884 
u8
 
ѕbЦ_Ћn
;

885 iа(
j
 >р
Ћngth
)  -1;

886 
	`GET8
(
ѕbЦ_Ћn
);

887 iа(!
ѕbЦ_Ћn
) ;

888 iа(
ѕbЦ_Ћn
 & 0xc0) {

889 
u8
 
±r_low
;

890 
	`GET8
(
±r_low
);

891 iа(
«me_Тd
 < 0и«me_Тd = 
j
;

892 
j
 = ((()
ѕbЦ_Ћn
 & 0x3fи<< 8и+ 
±r_low
;

894 iа(
j
 < 0 || j >р
Ћngth
)  -1;

897 iа(++
±r_couЅ
 > 
Ћngth
)  -1;

900 iа(
ѕbЦ_Ћn
 > 63)  -1;

901 iа(
э
 !р
«me_out
) {

902 iа(
э
 + 1 >р
Тd
)  -1;

903 *
э
++ = '.';

905 iа(
э
 + 
ѕbЦ_Ћn
 >р
Тd
)  -1;

906 
	`memэy
(
э
, 
ЈckС
 + 
j
, 
ѕbЦ_Ћn
);

907 
э
 +р
ѕbЦ_Ћn
;

908 
j
 +р
ѕbЦ_Ћn
;

910 iа(
э
 >р
Тd
)  -1;

911 *
э
 = '\0';

912 iа(
«me_Тd
 < 0)

913 *
idx
 = 
j
;

915 *
idx
 = 
«me_Тd
;

917 
Фr
:

919 
	}
}

923 
	$їґy_Јr£
(
evdns_ba£
 *
ba£
, 
u8
 *
ЈckС
, 
Ћngth
) {

924 
j
 = 0, 
k
 = 0;

925 
u16
 
_t
;

926 
u32
 
_t32
;

927 
tmp_«me
[256], 
cmp_«me
[256];

928 
«me_m©ches
 = 0;

930 
u16
 
М™s_id
, 
que°iЏs
, 
™swФs
, 
auth№Щy
, 
addЩiЏЃ
, 
d©ЃТgth
;

931 
u16
 
жags
 = 0;

932 
u32
 
Йl
, 
Йl_r
 = 0xffffffff;

933 
їґy
Дeply;

934 
evdns_їque°
 *
їq
 = 
NULL
;

935 
i
;

937 
	`ASSERT_LOCKED
(
ba£
);

939 
	`GET16
(
М™s_id
);

940 
	`GET16
(
жags
);

941 
	`GET16
(
que°iЏs
);

942 
	`GET16
(
™swФs
);

943 
	`GET16
(
auth№Щy
);

944 
	`GET16
(
addЩiЏЃ
);

945 (и
auth№Щy
;

946 (и
addЩiЏЃ
;

948 
їq
 = 
	`їque°_fЪd_дom_М™s_id
(
ba£
, 
М™s_id
);

949 iа(!
їq
)  -1;

950 
	`EVUTIL_ASSERT
(
їq
->
ba£
 == base);

952 
	`mem£t
(&
їґy
, 0, (reply));

955 iа(!(
жags
 & 0x8000))  -1;

956 iа(
жags
 & 0x020f) {

958 
Фr
;

963 
	#SKIP_NAME
 \

964 dЎ{ 
tmp_«me
[0] = '\0'; \

965 iа(
	`«me_Јr£
(
ЈckС
, 
Ћngth
, &
j
, 
tmp_«me
, \

966 (
tmp_«me
))<0) \

967 
Фr
; \

968 } 0)

	)

969 
	#TEST_NAME
 \

970 dЎ{ 
tmp_«me
[0] = '\0'; \

971 
cmp_«me
[0] = '\0'; \

972 
k
 = 
j
; \

973 iа(
	`«me_Јr£
(
ЈckС
, 
Ћngth
, &
j
, 
tmp_«me
, \

974 (
tmp_«me
))<0) \

975 
Фr
; \

976 iа(
	`«me_Јr£
(
їq
->
їque°
,Дeq->
їque°_Ћn
, &
k
, \

977 
cmp_«me
, (cmp_name))<0) \

978 
Фr
; \

979 iа(
ba£
->
globЃ_њndomize_€£
) { \

980 iа(
	`°rcmp
(
tmp_«me
, 
cmp_«me
) == 0) \

981 
«me_m©ches
 = 1; \

983 iа(
	`evutЮ_ascii_°r€£cmp
(
tmp_«me
, 
cmp_«me
) == 0) \

984 
«me_m©ches
 = 1; \

986 } 0)

	)

988 
їґy
.
ty≥
 = 
їq
->
їque°_ty≥
;

991 
i
 = 0; i < 
que°iЏs
; ++i) {

995 
TEST_NAME
;

996 
j
 += 4;

997 iа(
j
 >р
Ћngth
и
Фr
;

1000 iа(!
«me_m©ches
)

1001 
Фr
;

1007 
i
 = 0; i < 
™swФs
; ++i) {

1008 
u16
 
ty≥
, 
юass
;

1010 
SKIP_NAME
;

1011 
	`GET16
(
ty≥
);

1012 
	`GET16
(
юass
);

1013 
	`GET32
(
Йl
);

1014 
	`GET16
(
d©ЃТgth
);

1016 iа(
ty≥
 =р
TYPE_A
 && 
юass
 =р
CLASS_INET
) {

1017 
addrcouЅ
, 
addєocЁy
;

1018 iа(
їq
->
їque°_ty≥
 !р
TYPE_A
) {

1019 
j
 +р
d©ЃТgth
; ;

1021 iа((
d©ЃТgth
 & 3) != 0)

1022 
Фr
;

1023 
addrcouЅ
 = 
d©ЃТgth
 >> 2;

1024 
addєocЁy
 = 
	`MIN
(
MAX_V4_ADDRS
 - 
їґy
.
d©a
.
a
.
addrcouЅ
, ()addrcount);

1026 
Йl_r
 = 
	`MIN
—О_r, 
Йl
);

1028 iа(
j
 + 4*
addєocЁy
 > 
Ћngth
и
Фr
;

1029 
	`memэy
(&
їґy
.
d©a
.
a
.
addїs£s
[їґy.d©a.a.
addrcouЅ
],

1030 
ЈckС
 + 
j
, 4*
addєocЁy
);

1031 
j
 +р4*
addєocЁy
;

1032 
їґy
.
d©a
.
a
.
addrcouЅ
 +р
addєocЁy
;

1033 
їґy
.
have_™swФ
 = 1;

1034 iа(
їґy
.
d©a
.
a
.
addrcouЅ
 =р
MAX_V4_ADDRS
) ;

1035 } iа(
ty≥
 =р
TYPE_PTR
 && 
юass
 =р
CLASS_INET
) {

1036 iа(
їq
->
їque°_ty≥
 !р
TYPE_PTR
) {

1037 
j
 +р
d©ЃТgth
; ;

1039 iа(
	`«me_Јr£
(
ЈckС
, 
Ћngth
, &
j
, 
їґy
.
d©a
.
±r
.
«me
,

1040 (
їґy
.
d©a
.
±r
.
«me
))<0)

1041 
Фr
;

1042 
Йl_r
 = 
	`MIN
—О_r, 
Йl
);

1043 
їґy
.
have_™swФ
 = 1;

1045 } iа(
ty≥
 =р
TYPE_CNAME
) {

1046 
ъame
[
HOST_NAME_MAX
];

1047 iа(!
їq
->
put_ъame_Ъ_±r
 || *req->put_cname_in_ptr) {

1048 
j
 +р
d©ЃТgth
; ;

1050 iа(
	`«me_Јr£
(
ЈckС
, 
Ћngth
, &
j
, 
ъame
,

1051 (
ъame
))<0)

1052 
Фr
;

1053 *
їq
->
put_ъame_Ъ_±r
 = 
	`mm_°rdup
(
ъame
);

1054 } iа(
ty≥
 =р
TYPE_AAAA
 && 
юass
 =р
CLASS_INET
) {

1055 
addrcouЅ
, 
addєocЁy
;

1056 iа(
їq
->
їque°_ty≥
 !р
TYPE_AAAA
) {

1057 
j
 +р
d©ЃТgth
; ;

1059 iа((
d©ЃТgth
 & 15) != 0)

1060 
Фr
;

1061 
addrcouЅ
 = 
d©ЃТgth
 >> 4;

1062 
addєocЁy
 = 
	`MIN
(
MAX_V6_ADDRS
 - 
їґy
.
d©a
.
ѓѓ
.
addrcouЅ
, ()addrcount);

1063 
Йl_r
 = 
	`MIN
—О_r, 
Йl
);

1066 iа(
j
 + 16*
addєocЁy
 > 
Ћngth
и
Фr
;

1067 
	`memэy
(&
їґy
.
d©a
.
ѓѓ
.
addїs£s
[їґy.d©a.ѓѓ.
addrcouЅ
],

1068 
ЈckС
 + 
j
, 16*
addєocЁy
);

1069 
їґy
.
d©a
.
ѓѓ
.
addrcouЅ
 +р
addєocЁy
;

1070 
j
 +р16*
addєocЁy
;

1071 
їґy
.
have_™swФ
 = 1;

1072 iа(
їґy
.
d©a
.
ѓѓ
.
addrcouЅ
 =р
MAX_V6_ADDRS
) ;

1075 
j
 +р
d©ЃТgth
;

1079 
	`їґy_h™dЋ
(
їq
, 
жags
, 
Йl_r
, &
їґy
);

1081 
Фr
:

1082 iа(
їq
)

1083 
	`їґy_h™dЋ
(
їq
, 
жags
, 0, 
NULL
);

1085 
	}
}

1091 
	$їque°_Јr£
(
u8
 *
ЈckС
, 
Ћngth
, 
evdns_£rvФ_p№t
 *
p№t
, 
sockaddr
 *
addr
, 
ev_sockЋn_t
 
addЊТ
)

1093 
j
 = 0;

1094 
u16
 
_t
;

1095 
tmp_«me
[256];

1097 
i
;

1098 
u16
 
М™s_id
, 
жags
, 
que°iЏs
, 
™swФs
, 
auth№Щy
, 
addЩiЏЃ
;

1099 
£rvФ_їque°
 *
£rvФ_їq
 = 
NULL
;

1101 
	`ASSERT_LOCKED
(
p№t
);

1104 
	`GET16
(
М™s_id
);

1105 
	`GET16
(
жags
);

1106 
	`GET16
(
que°iЏs
);

1107 
	`GET16
(
™swФs
);

1108 
	`GET16
(
auth№Щy
);

1109 
	`GET16
(
addЩiЏЃ
);

1111 iа(
жags
 & 0x8000)  -1;

1112 
жags
 &= 0x0110;

1114 
£rvФ_їq
 = 
	`mm_mЃloc
((
£rvФ_їque°
));

1115 iа(
£rvФ_їq
 =р
NULL
)  -1;

1116 
	`mem£t
(
£rvФ_їq
, 0, (
£rvФ_їque°
));

1118 
£rvФ_їq
->
М™s_id
 =Бrans_id;

1119 
	`memэy
(&
£rvФ_їq
->
addr
,Зddr, 
addЊТ
);

1120 
£rvФ_їq
->
addЊТ
 =Зddrlen;

1122 
£rvФ_їq
->
ba£
.
жags
 = flags;

1123 
£rvФ_їq
->
ba£
.
nque°iЏs
 = 0;

1124 
£rvФ_їq
->
ba£
.
que°iЏs
 = 
	`mm_€ќoc
((
evdns_£rvФ_que°iЏ
 *), questions);

1125 iа(
£rvФ_їq
->
ba£
.
que°iЏs
 =р
NULL
)

1126 
Фr
;

1128 
i
 = 0; i < 
que°iЏs
; ++i) {

1129 
u16
 
ty≥
, 
юass
;

1130 
evdns_£rvФ_que°iЏ
 *
q
;

1131 
«mЦТ
;

1132 iа(
	`«me_Јr£
(
ЈckС
, 
Ћngth
, &
j
, 
tmp_«me
, (tmp_name))<0)

1133 
Фr
;

1134 
	`GET16
(
ty≥
);

1135 
	`GET16
(
юass
);

1136 
«mЦТ
 = 
	`°ЊТ
(
tmp_«me
);

1137 
q
 = 
	`mm_mЃloc
((
evdns_£rvФ_que°iЏ
и+ 
«mЦТ
);

1138 iа(!
q
)

1139 
Фr
;

1140 
q
->
ty≥
 =Бype;

1141 
q
->
dns_que°iЏ_юass
 = 
юass
;

1142 
	`memэy
(
q
->
«me
, 
tmp_«me
, 
«mЦТ
+1);

1143 
£rvФ_їq
->
ba£
.
que°iЏs
[£rvФ_їq->ba£.
nque°iЏs
++] = 
q
;

1148 
£rvФ_їq
->
p№t
 =Еort;

1149 
p№t
->
їfъt
++;

1152 iа(
жags
 & 0x7800) {

1153 
	`evdns_£rvФ_їque°_ї•Џd
(&(
£rvФ_їq
->
ba£
), 
DNS_ERR_NOTIMPL
);

1157 
p№t
->
	`u£r_€ќback
(&(
£rvФ_їq
->
ba£
),Е№t->
u£r_d©a
);

1160 
Фr
:

1161 iа(
£rvФ_їq
) {

1162 iа(
£rvФ_їq
->
ba£
.
que°iЏs
) {

1163 
i
 = 0; i < 
£rvФ_їq
->
ba£
.
nque°iЏs
; ++i)

1164 
	`mm_дУ
(
£rvФ_їq
->
ba£
.
que°iЏs
[
i
]);

1165 
	`mm_дУ
(
£rvФ_їq
->
ba£
.
que°iЏs
);

1167 
	`mm_дУ
(
£rvФ_їq
);

1171 #undeа
SKIP_NAME


1172 #undeа
GET32


1173 #undeа
GET16


1174 #undeа
GET8


1175 
	}
}

1179 
evdns_£t_М™ІщiЏ_id_в
(
	$ev_uЪt16_t
 (*
в
)())

1181 
	}
}

1184 
evdns_£t_њndom_byЛs_в
((*
в
)(*, 
size_t
))

1186 
	}
}

1189 
u16


1190 
	$М™ІщiЏ_id_pick
(
evdns_ba£
 *
ba£
) {

1191 
	`ASSERT_LOCKED
(
ba£
);

1193 
u16
 
М™s_id
;

1194 
	`evutЮ_£cuї_Їg_gС_byЛs
(&
М™s_id
, (trans_id));

1196 iа(
М™s_id
 == 0xffff) ;

1198 iа(
	`їque°_fЪd_дom_М™s_id
(
ba£
, 
М™s_id
и=р
NULL
)

1199  
М™s_id
;

1201 
	}
}

1206 
«me£rvФ
 *

1207 
	$«me£rvФ_pick
(
evdns_ba£
 *
ba£
) {

1208 
«me£rvФ
 *
°ђЛd_©
 = 
ba£
->
£rvФ_hЧd
, *
picked
;

1209 
	`ASSERT_LOCKED
(
ba£
);

1210 iа(!
ba£
->
£rvФ_hЧd
и 
NULL
;

1214 iа(!
ba£
->
globЃ_good_«me£rvФs
) {

1215 
ba£
->
£rvФ_hЧd
 = ba£->£rvФ_hЧd->
√xt
;

1216  
ba£
->
£rvФ_hЧd
;

1221 iа(
ba£
->
£rvФ_hЧd
->
°©e
) {

1223 
picked
 = 
ba£
->
£rvФ_hЧd
;

1224 
ba£
->
£rvФ_hЧd
 = ba£->£rvФ_hЧd->
√xt
;

1225  
picked
;

1228 
ba£
->
£rvФ_hЧd
 = ba£->£rvФ_hЧd->
√xt
;

1229 iа(
ba£
->
£rvФ_hЧd
 =р
°ђЛd_©
) {

1233 
	`EVUTIL_ASSERT
(
ba£
->
globЃ_good_«me£rvФs
 == 0);

1234 
picked
 = 
ba£
->
£rvФ_hЧd
;

1235 
ba£
->
£rvФ_hЧd
 = ba£->£rvФ_hЧd->
√xt
;

1236  
picked
;

1239 
	}
}

1243 
	$«me£rvФ_їad
(
«me£rvФ
 *
ns
) {

1244 
sockaddr_°№age
 
ss
;

1245 
ev_sockЋn_t
 
addЊТ
 = (
ss
);

1246 
u8
 
ЈckС
[1500];

1247 
	`ASSERT_LOCKED
(
ns
->
ba£
);

1250 cЏ° 
r
 = 
	`їcvдom
(
ns
->
sockС
, 
ЈckС
, (packet), 0,

1251 (
sockaddr
*)&
ss
, &
addЊТ
);

1252 iа(
r
 < 0) {

1253 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
ns
->
sockС
);

1254 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

1256 
	`«me£rvФ_зЮed
(
ns
,

1257 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
));

1260 iа(
	`evutЮ_sockaddr_cmp
((
sockaddr
*)&
ss
,

1261 (
sockaddr
*)&
ns
->
addїss
, 0)) {

1262 
	`log
(
EVDNS_LOG_WARN
, "Address mismatch onДeceived "

1264 
	`debug_ЅЁ
((
sockaddr
*)&
ss
));

1268 
ns
->
timedout
 = 0;

1269 
	`їґy_Јr£
(
ns
->
ba£
, 
ЈckС
, 
r
);

1271 
	}
}

1276 
	$£rvФ_p№t_їad
(
evdns_£rvФ_p№t
 *
s
) {

1277 
u8
 
ЈckС
[1500];

1278 
sockaddr_°№age
 
addr
;

1279 
ev_sockЋn_t
 
addЊТ
;

1280 
r
;

1281 
	`ASSERT_LOCKED
(
s
);

1284 
addЊТ
 = (
sockaddr_°№age
);

1285 
r
 = 
	`їcvдom
(
s
->
sockС
, 
ЈckС
, (packet), 0,

1286 (
sockaddr
*и&
addr
, &
addЊТ
);

1287 iа(
r
 < 0) {

1288 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
s
->
sockС
);

1289 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

1291 
	`log
(
EVDNS_LOG_WARN
, "Error %s (%d) whileДeadingДequest.",

1292 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
),Гrr);

1295 
	`їque°_Јr£
(
ЈckС
, 
r
, 
s
, (
sockaddr
*и&
addr
, 
addЊТ
);

1297 
	}
}

1301 
	$£rvФ_p№t_жush
(
evdns_£rvФ_p№t
 *
p№t
)

1303 
£rvФ_їque°
 *
їq
 = 
p№t
->
≥ndЪg_їґЫs
;

1304 
	`ASSERT_LOCKED
(
p№t
);

1305 
їq
) {

1306 
r
 = 
	`£ndto
(
p№t
->
sockС
, 
їq
->
ї•Џ£
,Дeq->
ї•Џ£_Ћn
, 0,

1307 (
sockaddr
*и&
їq
->
addr
,Дeq->
addЊТ
);

1308 iа(
r
 < 0) {

1309 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
p№t
->
sockС
);

1310 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

1312 
	`log
(
EVDNS_LOG_WARN
, "EЉ№ %†(%dиwhЮРwrЩЪgДe•Џ£БЎp№t; drЁpЪg", 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
),Гrr);

1314 iа(
	`£rvФ_їque°_дУ
(
їq
)) {

1318 
	`EVUTIL_ASSERT
(
їq
 !р
p№t
->
≥ndЪg_їґЫs
);

1319 
їq
 = 
p№t
->
≥ndЪg_їґЫs
;

1324 (и
	`evТt_dЦ
(&
p№t
->
evТt
);

1325 
	`evТt_assign
(&
p№t
->
evТt
,Е№t->
evТt_ba£
,

1326 
p№t
->
sockС
, 
EV_READ
 | 
EV_PERSIST
,

1327 
£rvФ_p№t_їady_€ќback
, 
p№t
);

1329 iа(
	`evТt_add
(&
p№t
->
evТt
, 
NULL
) < 0) {

1330 
	`log
(
EVDNS_LOG_WARN
, "Error fromЖibevent whenЗddingГvent for DNS server.");

1333 
	}
}

1339 
	$«me£rvФ_wrЩe_waЩЪg
(
«me£rvФ
 *
ns
, 
waЩЪg
) {

1340 
	`ASSERT_LOCKED
(
ns
->
ba£
);

1341 iа(
ns
->
wrЩe_waЩЪg
 =р
waЩЪg
) ;

1343 
ns
->
wrЩe_waЩЪg
 = 
waЩЪg
;

1344 (и
	`evТt_dЦ
(&
ns
->
evТt
);

1345 
	`evТt_assign
(&
ns
->
evТt
,Вs->
ba£
->
evТt_ba£
,

1346 
ns
->
sockС
, 
EV_READ
 | (
waЩЪg
 ? 
EV_WRITE
 : 0и| 
EV_PERSIST
,

1347 
«me£rvФ_їady_€ќback
, 
ns
);

1348 iа(
	`evТt_add
(&
ns
->
evТt
, 
NULL
) < 0) {

1349 
	`log
(
EVDNS_LOG_WARN
, "Error fromЖibevent whenЗddingГvent for %s",

1350 
	`debug_ЅЁ
((
sockaddr
 *)&
ns
->
addїss
));

1353 
	}
}

1358 
	$«me£rvФ_їady_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
) {

1359 
«me£rvФ
 *
ns
 = («me£rvФ *и
ђg
;

1360 ()
fd
;

1362 
	`EVDNS_LOCK
(
ns
->
ba£
);

1363 iа(
evТts
 & 
EV_WRITE
) {

1364 
ns
->
choked
 = 0;

1365 iа(!
	`evdns_М™smЩ
(
ns
->
ba£
)) {

1366 
	`«me£rvФ_wrЩe_waЩЪg
(
ns
, 0);

1369 iа(
evТts
 & 
EV_READ
) {

1370 
	`«me£rvФ_їad
(
ns
);

1372 
	`EVDNS_UNLOCK
(
ns
->
ba£
);

1373 
	}
}

1378 
	$£rvФ_p№t_їady_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
) {

1379 
evdns_£rvФ_p№t
 *
p№t
 = (evdns_£rvФ_p№И*и
ђg
;

1380 (и
fd
;

1382 
	`EVDNS_LOCK
(
p№t
);

1383 iа(
evТts
 & 
EV_WRITE
) {

1384 
p№t
->
choked
 = 0;

1385 
	`£rvФ_p№t_жush
(
p№t
);

1387 iа(
evТts
 & 
EV_READ
) {

1388 
	`£rvФ_p№t_їad
(
p№t
);

1390 
	`EVDNS_UNLOCK
(
p№t
);

1391 
	}
}

1395 
	#MAX_LABELS
 128

	)

1397 
	sdn¶abЦ_ТМy
 { *
	mv
; 
off_t
 
	mpos
; };

1398 
	sdn¶abЦ_ПbЋ
 {

1399 
	mn_ѕbЦs
;

1401 
dn¶abЦ_ТМy
 
	mѕbЦs
[
MAX_LABELS
];

1406 
	$dn¶abЦ_ПbЋ_ЪЩ
(
dn¶abЦ_ПbЋ
 *
ПbЋ
)

1408 
ПbЋ
->
n_ѕbЦs
 = 0;

1409 
	}
}

1413 
	$dn¶abЦ_юЧr
(
dn¶abЦ_ПbЋ
 *
ПbЋ
)

1415 
i
;

1416 
i
 = 0; i < 
ПbЋ
->
n_ѕbЦs
; ++i)

1417 
	`mm_дУ
(
ПbЋ
->
ѕbЦs
[
i
].
v
);

1418 
ПbЋ
->
n_ѕbЦs
 = 0;

1419 
	}
}

1424 
	$dn¶abЦ_ПbЋ_gС_pos
(cЏ° 
dn¶abЦ_ПbЋ
 *
ПbЋ
, cЏ° *
ѕbЦ
)

1426 
i
;

1427 
i
 = 0; i < 
ПbЋ
->
n_ѕbЦs
; ++i) {

1428 iа(!
	`°rcmp
(
ѕbЦ
, 
ПbЋ
->
ѕbЦs
[
i
].
v
))

1429  
ПbЋ
->
ѕbЦs
[
i
].
pos
;

1432 
	}
}

1436 
	$dn¶abЦ_ПbЋ_add
(
dn¶abЦ_ПbЋ
 *
ПbЋ
, cЏ° *
ѕbЦ
, 
off_t
 
pos
)

1438 *
v
;

1439 
p
;

1440 iа(
ПbЋ
->
n_ѕbЦs
 =р
MAX_LABELS
)

1442 
v
 = 
	`mm_°rdup
(
ѕbЦ
);

1443 iа(
v
 =р
NULL
)

1445 
p
 = 
ПbЋ
->
n_ѕbЦs
++;

1446 
ПbЋ
->
ѕbЦs
[
p
].
v
 = v;

1447 
ПbЋ
->
ѕbЦs
[
p
].
pos
 =Еos;

1450 
	}
}

1463 
off_t


1464 
	$dnҐame_to_ѕbЦs
(
u8
 *cЏ° 
buf
, 
size_t
 
buf_Ћn
, 
off_t
 
j
,

1465 cЏ° *
«me
, cЏ° 
«me_Ћn
,

1466 
dn¶abЦ_ПbЋ
 *
ПbЋ
) {

1467 cЏ° *
Тd
 = 
«me
 + 
«me_Ћn
;

1468 
їf
 = 0;

1469 
u16
 
_t
;

1471 
	#APPEND16
(
x
) do { \

1472 iа(
j
 + 2 > (
off_t
)
buf_Ћn
) \

1473 
ovФжow
; \

1474 
_t
 = 
	`htЏs
(
x
); \

1475 
	`memэy
(
buf
 + 
j
, &
_t
, 2); \

1476 
j
 += 2; \

1477 } 0)

	)

1478 
	#APPEND32
(
x
) do { \

1479 iа(
j
 + 4 > (
off_t
)
buf_Ћn
) \

1480 
ovФжow
; \

1481 
_t32
 = 
	`htЏl
(
x
); \

1482 
	`memэy
(
buf
 + 
j
, &
_t32
, 4); \

1483 
j
 += 4; \

1484 } 0)

	)

1486 iа(
«me_Ћn
 > 255)  -2;

1489 cЏ° *cЏ° 
°ђt
 = 
«me
;

1490 iа(
ПbЋ
 && (
їf
 = 
	`dn¶abЦ_ПbЋ_gС_pos
—abЋ, 
«me
)) >= 0) {

1491 
	`APPEND16
(
їf
 | 0xc000);

1492  
j
;

1494 
«me
 = 
	`°rchr
(name, '.');

1495 iа(!
«me
) {

1496 cЏ° 
ѕbЦ_Ћn
 = 
Тd
 - 
°ђt
;

1497 iа(
ѕbЦ_Ћn
 > 63)  -1;

1498 iа((
size_t
)(
j
+
ѕbЦ_Ћn
+1и> 
buf_Ћn
)  -2;

1499 iа(
ПbЋ
и
	`dn¶abЦ_ПbЋ_add
—abЋ, 
°ђt
, 
j
);

1500 
buf
[
j
++] = 
ѕbЦ_Ћn
;

1502 
	`memэy
(
buf
 + 
j
, 
°ђt
, 
Тd
 - start);

1503 
j
 +р
Тd
 - 
°ђt
;

1507 cЏ° 
ѕbЦ_Ћn
 = 
«me
 - 
°ђt
;

1508 iа(
ѕbЦ_Ћn
 > 63)  -1;

1509 iа((
size_t
)(
j
+
ѕbЦ_Ћn
+1и> 
buf_Ћn
)  -2;

1510 iа(
ПbЋ
и
	`dn¶abЦ_ПbЋ_add
—abЋ, 
°ђt
, 
j
);

1511 
buf
[
j
++] = 
ѕbЦ_Ћn
;

1513 
	`memэy
(
buf
 + 
j
, 
°ђt
, 
«me
 - start);

1514 
j
 +р
«me
 - 
°ђt
;

1516 
«me
++;

1523 iа(!
j
 || 
buf
[j-1]) buf[j++] = 0;

1524  
j
;

1525 
ovФжow
:

1527 
	}
}

1532 
size_t


1533 
	$evdns_їque°_Ћn
(cЏ° 
size_t
 
«me_Ћn
) {

1535 
«me_Ћn
 + 2 +

1537 
	}
}

1544 
	$evdns_їque°_d©a_buЮd
(cЏ° *cЏ° 
«me
, cЏ° 
«me_Ћn
,

1545 cЏ° 
u16
 
М™s_id
, cЏ° u16 
ty≥
, cЏ° u16 
юass
,

1546 
u8
 *cЏ° 
buf
, 
size_t
 
buf_Ћn
) {

1547 
off_t
 
j
 = 0;

1548 
u16
 
_t
;

1550 
	`APPEND16
(
М™s_id
);

1551 
	`APPEND16
(0x0100);

1552 
	`APPEND16
(1);

1553 
	`APPEND16
(0);

1554 
	`APPEND16
(0);

1555 
	`APPEND16
(0);

1557 
j
 = 
	`dnҐame_to_ѕbЦs
(
buf
, 
buf_Ћn
, j, 
«me
, 
«me_Ћn
, 
NULL
);

1558 iа(
j
 < 0) {

1559  ()
j
;

1562 
	`APPEND16
(
ty≥
);

1563 
	`APPEND16
(
юass
);

1565  ()
j
;

1566 
ovФжow
:

1568 
	}
}

1571 
evdns_£rvФ_p№t
 *

1572 
	$evdns_add_£rvФ_p№t_wЩh_ba£
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
sockС
, 
is_tэ
, 
evdns_їque°_€ќback_в_ty≥
 
cb
, *
u£r_d©a
)

1574 
evdns_£rvФ_p№t
 *
p№t
;

1575 iа(!(
p№t
 = 
	`mm_mЃloc
((
evdns_£rvФ_p№t
))))

1576  
NULL
;

1577 
	`mem£t
(
p№t
, 0, (
evdns_£rvФ_p№t
));

1579 
	`EVUTIL_ASSERT
(!
is_tэ
);

1580 
p№t
->
sockС
 = socket;

1581 
p№t
->
їfъt
 = 1;

1582 
p№t
->
choked
 = 0;

1583 
p№t
->
юosЪg
 = 0;

1584 
p№t
->
u£r_€ќback
 = 
cb
;

1585 
p№t
->
u£r_d©a
 = user_data;

1586 
p№t
->
≥ndЪg_їґЫs
 = 
NULL
;

1587 
p№t
->
evТt_ba£
 = 
ba£
;

1589 
	`evТt_assign
(&
p№t
->
evТt
,Е№t->
evТt_ba£
,

1590 
p№t
->
sockС
, 
EV_READ
 | 
EV_PERSIST
,

1591 
£rvФ_p№t_їady_€ќback
, 
p№t
);

1592 iа(
	`evТt_add
(&
p№t
->
evТt
, 
NULL
) < 0) {

1593 
	`mm_дУ
(
p№t
);

1594  
NULL
;

1596 
	`EVTHREAD_ALLOC_LOCK
(
p№t
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

1597  
p№t
;

1598 
	}
}

1600 
evdns_£rvФ_p№t
 *

1601 
	$evdns_add_£rvФ_p№t
(
evutЮ_sockС_t
 
sockС
, 
is_tэ
, 
evdns_їque°_€ќback_в_ty≥
 
cb
, *
u£r_d©a
)

1603  
	`evdns_add_£rvФ_p№t_wЩh_ba£
(
NULL
, 
sockС
, 
is_tэ
, 
cb
, 
u£r_d©a
);

1604 
	}
}

1608 
	$evdns_юo£_£rvФ_p№t
(
evdns_£rvФ_p№t
 *
p№t
)

1610 
	`EVDNS_LOCK
(
p№t
);

1611 iа(--
p№t
->
їfъt
 == 0) {

1612 
	`EVDNS_UNLOCK
(
p№t
);

1613 
	`£rvФ_p№t_дУ
(
p№t
);

1615 
p№t
->
юosЪg
 = 1;

1617 
	}
}

1621 
	$evdns_£rvФ_їque°_add_їґy
(
evdns_£rvФ_їque°
 *
_їq
, 
£щiЏ
, cЏ° *
«me
, 
ty≥
, 
юass
, 
Йl
, 
d©ЃТ
, 
is_«me
, cЏ° *
d©a
)

1623 
£rvФ_їque°
 *
їq
 = 
	`TO_SERVER_REQUEST
(
_їq
);

1624 
£rvФ_їґy_Щem
 **
Щemp
, *
Щem
;

1625 *
couЅp
;

1626 
їsu…
 = -1;

1628 
	`EVDNS_LOCK
(
їq
->
p№t
);

1629 iа(
їq
->
ї•Џ£
)

1630 
dЏe
;

1632 
£щiЏ
) {

1633 
EVDNS_ANSWER_SECTION
:

1634 
Щemp
 = &
їq
->
™swФ
;

1635 
couЅp
 = &
їq
->
n_™swФ
;

1637 
EVDNS_AUTHORITY_SECTION
:

1638 
Щemp
 = &
їq
->
auth№Щy
;

1639 
couЅp
 = &
їq
->
n_auth№Щy
;

1641 
EVDNS_ADDITIONAL_SECTION
:

1642 
Щemp
 = &
їq
->
addЩiЏЃ
;

1643 
couЅp
 = &
їq
->
n_addЩiЏЃ
;

1646 
dЏe
;

1648 *
Щemp
) {

1649 
Щemp
 = &((*Щemp)->
√xt
);

1651 
Щem
 = 
	`mm_mЃloc
((
£rvФ_їґy_Щem
));

1652 iа(!
Щem
)

1653 
dЏe
;

1654 
Щem
->
√xt
 = 
NULL
;

1655 iа(!(
Щem
->
«me
 = 
	`mm_°rdup
(name))) {

1656 
	`mm_дУ
(
Щem
);

1657 
dЏe
;

1659 
Щem
->
ty≥
 =Бype;

1660 
Щem
->
dns_que°iЏ_юass
 = 
юass
;

1661 
Щem
->
Йl
 =Бtl;

1662 
Щem
->
is_«me
 = is_name != 0;

1663 
Щem
->
d©ЃТ
 = 0;

1664 
Щem
->
d©a
 = 
NULL
;

1665 iа(
d©a
) {

1666 iа(
Щem
->
is_«me
) {

1667 iа(!(
Щem
->
d©a
 = 
	`mm_°rdup
(data))) {

1668 
	`mm_дУ
(
Щem
->
«me
);

1669 
	`mm_дУ
(
Щem
);

1670 
dЏe
;

1672 
Щem
->
d©ЃТ
 = (
u16
)-1;

1674 iа(!(
Щem
->
d©a
 = 
	`mm_mЃloc
(
d©ЃТ
))) {

1675 
	`mm_дУ
(
Щem
->
«me
);

1676 
	`mm_дУ
(
Щem
);

1677 
dЏe
;

1679 
Щem
->
d©ЃТ
 = datalen;

1680 
	`memэy
(
Щem
->
d©a
, d©a, 
d©ЃТ
);

1684 *
Щemp
 = 
Щem
;

1685 ++(*
couЅp
);

1686 
їsu…
 = 0;

1687 
dЏe
:

1688 
	`EVDNS_UNLOCK
(
їq
->
p№t
);

1689  
їsu…
;

1690 
	}
}

1694 
	$evdns_£rvФ_їque°_add_a_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, 
n
, *
addrs
, 
Йl
)

1696  
	`evdns_£rvФ_їque°_add_їґy
(

1697 
їq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_A
, 
CLASS_INET
,

1698 
Йl
, 
n
*4, 0, 
addrs
);

1699 
	}
}

1703 
	$evdns_£rvФ_їque°_add_ѓѓ_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, 
n
, *
addrs
, 
Йl
)

1705  
	`evdns_£rvФ_їque°_add_їґy
(

1706 
їq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_AAAA
, 
CLASS_INET
,

1707 
Йl
, 
n
*16, 0, 
addrs
);

1708 
	}
}

1712 
	$evdns_£rvФ_їque°_add_±r_їґy
(
evdns_£rvФ_їque°
 *
їq
, 
Ъ_addr
 *
Ъ
, cЏ° *
Ъaddr_«me
, cЏ° *
ho°«me
, 
Йl
)

1714 
u32
 
a
;

1715 
buf
[32];

1716 
	`EVUTIL_ASSERT
(
Ъ
 || 
Ъaddr_«me
);

1717 
	`EVUTIL_ASSERT
(!(
Ъ
 && 
Ъaddr_«me
));

1718 iа(
Ъ
) {

1719 
a
 = 
	`Ѕohl
(
Ъ
->
s_addr
);

1720 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

1721 ()(
u8
)((
a
 )&0xff),

1722 ()(
u8
)((
a
>>8 )&0xff),

1723 ()(
u8
)((
a
>>16)&0xff),

1724 ()(
u8
)((
a
>>24)&0xff));

1725 
Ъaddr_«me
 = 
buf
;

1727  
	`evdns_£rvФ_їque°_add_їґy
(

1728 
їq
, 
EVDNS_ANSWER_SECTION
, 
Ъaddr_«me
, 
TYPE_PTR
, 
CLASS_INET
,

1729 
Йl
, -1, 1, 
ho°«me
);

1730 
	}
}

1734 
	$evdns_£rvФ_їque°_add_ъame_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, cЏ° *
ъame
, 
Йl
)

1736  
	`evdns_£rvФ_їque°_add_їґy
(

1737 
їq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_CNAME
, 
CLASS_INET
,

1738 
Йl
, -1, 1, 
ъame
);

1739 
	}
}

1743 
	$evdns_£rvФ_їque°_£t_жags
(
evdns_£rvФ_їque°
 *
exїq
, 
жags
)

1745 
£rvФ_їque°
 *
їq
 = 
	`TO_SERVER_REQUEST
(
exїq
);

1746 
їq
->
ba£
.
жags
 &р~(
EVDNS_FLAGS_AA
|
EVDNS_FLAGS_RD
);

1747 
їq
->
ba£
.
жags
 |= flags;

1748 
	}
}

1751 
	$evdns_£rvФ_їque°_f№m©_ї•Џ£
(
£rvФ_їque°
 *
їq
, 
Фr
)

1753 
buf
[1500];

1754 
size_t
 
buf_Ћn
 = (
buf
);

1755 
off_t
 
j
 = 0, 
r
;

1756 
u16
 
_t
;

1757 
u32
 
_t32
;

1758 
i
;

1759 
u16
 
жags
;

1760 
dn¶abЦ_ПbЋ
 
ПbЋ
;

1762 iа(
Фr
 < 0 ||Гrr > 15)  -1;

1766 
жags
 = 
їq
->
ba£
.flags;

1767 
жags
 |р(0x8000 | 
Фr
);

1769 
	`dn¶abЦ_ПbЋ_ЪЩ
(&
ПbЋ
);

1770 
	`APPEND16
(
їq
->
М™s_id
);

1771 
	`APPEND16
(
жags
);

1772 
	`APPEND16
(
їq
->
ba£
.
nque°iЏs
);

1773 
	`APPEND16
(
їq
->
n_™swФ
);

1774 
	`APPEND16
(
їq
->
n_auth№Щy
);

1775 
	`APPEND16
(
їq
->
n_addЩiЏЃ
);

1778 
i
=0; i < 
їq
->
ba£
.
nque°iЏs
; ++i) {

1779 cЏ° *
s
 = 
їq
->
ba£
.
que°iЏs
[
i
]->
«me
;

1780 
j
 = 
	`dnҐame_to_ѕbЦs
(
buf
, 
buf_Ћn
, j, 
s
, 
	`°ЊТ
(s), &
ПbЋ
);

1781 iа(
j
 < 0) {

1782 
	`dn¶abЦ_юЧr
(&
ПbЋ
);

1783  (и
j
;

1785 
	`APPEND16
(
їq
->
ba£
.
que°iЏs
[
i
]->
ty≥
);

1786 
	`APPEND16
(
їq
->
ba£
.
que°iЏs
[
i
]->
dns_que°iЏ_юass
);

1790 
i
=0; i<3; ++i) {

1791 
£rvФ_їґy_Щem
 *
Щem
;

1792 iа(
i
==0)

1793 
Щem
 = 
їq
->
™swФ
;

1794 iа(
i
==1)

1795 
Щem
 = 
їq
->
auth№Щy
;

1797 
Щem
 = 
їq
->
addЩiЏЃ
;

1798 
Щem
) {

1799 
r
 = 
	`dnҐame_to_ѕbЦs
(
buf
, 
buf_Ћn
, 
j
, 
Щem
->
«me
, 
	`°ЊТ
(Щem->«me), &
ПbЋ
);

1800 iа(
r
 < 0)

1801 
ovФжow
;

1802 
j
 = 
r
;

1804 
	`APPEND16
(
Щem
->
ty≥
);

1805 
	`APPEND16
(
Щem
->
dns_que°iЏ_юass
);

1806 
	`APPEND32
(
Щem
->
Йl
);

1807 iа(
Щem
->
is_«me
) {

1808 
off_t
 
Ћn_idx
 = 
j
, 
«me_°ђt
;

1809 
j
 += 2;

1810 
«me_°ђt
 = 
j
;

1811 
r
 = 
	`dnҐame_to_ѕbЦs
(
buf
, 
buf_Ћn
, 
j
, 
Щem
->
d©a
, 
	`°ЊТ
(Щem->d©a), &
ПbЋ
);

1812 iа(
r
 < 0)

1813 
ovФжow
;

1814 
j
 = 
r
;

1815 
_t
 = 
	`htЏs
–(и(
j
-
«me_°ђt
) );

1816 
	`memэy
(
buf
+
Ћn_idx
, &
_t
, 2);

1818 
	`APPEND16
(
Щem
->
d©ЃТ
);

1819 iа(
j
+
Щem
->
d©ЃТ
 > (
off_t
)
buf_Ћn
)

1820 
ovФжow
;

1821 
	`memэy
(
buf
+
j
, 
Щem
->
d©a
, iЛm->
d©ЃТ
);

1822 
j
 +р
Щem
->
d©ЃТ
;

1824 
Щem
 = iЛm->
√xt
;

1828 iа(
j
 > 512) {

1829 
ovФжow
:

1830 
j
 = 512;

1831 
buf
[2] |= 0x02;

1834 
їq
->
ї•Џ£_Ћn
 = 
j
;

1836 iа(!(
їq
->
ї•Џ£
 = 
	`mm_mЃloc
‘eq->
ї•Џ£_Ћn
))) {

1837 
	`£rvФ_їque°_дУ_™swФs
(
їq
);

1838 
	`dn¶abЦ_юЧr
(&
ПbЋ
);

1841 
	`memэy
(
їq
->
ї•Џ£
, 
buf
,Дeq->
ї•Џ£_Ћn
);

1842 
	`£rvФ_їque°_дУ_™swФs
(
їq
);

1843 
	`dn¶abЦ_юЧr
(&
ПbЋ
);

1845 
	}
}

1849 
	$evdns_£rvФ_їque°_ї•Џd
(
evdns_£rvФ_їque°
 *
_їq
, 
Фr
)

1851 
£rvФ_їque°
 *
їq
 = 
	`TO_SERVER_REQUEST
(
_їq
);

1852 
evdns_£rvФ_p№t
 *
p№t
 = 
їq
->port;

1853 
r
 = -1;

1855 
	`EVDNS_LOCK
(
p№t
);

1856 iа(!
їq
->
ї•Џ£
) {

1857 iа((
r
 = 
	`evdns_£rvФ_їque°_f№m©_ї•Џ£
(
їq
, 
Фr
))<0)

1858 
dЏe
;

1861 
r
 = 
	`£ndto
(
p№t
->
sockС
, 
їq
->
ї•Џ£
,Дeq->
ї•Џ£_Ћn
, 0,

1862 (
sockaddr
*и&
їq
->
addr
,Дeq->
addЊТ
);

1863 iа(
r
<0) {

1864 
sock_Фr
 = 
	`evutЮ_sockС_gСФr№
(
p№t
->
sockС
);

1865 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
sock_Фr
))

1866 
dЏe
;

1868 iа(
p№t
->
≥ndЪg_їґЫs
) {

1869 
їq
->
іev_≥ndЪg
 = 
p№t
->
≥ndЪg_їґЫs
->prev_pending;

1870 
їq
->
√xt_≥ndЪg
 = 
p№t
->
≥ndЪg_їґЫs
;

1871 
їq
->
іev_≥ndЪg
->
√xt_≥ndЪg
 =

1872 
їq
->
√xt_≥ndЪg
->
іev_≥ndЪg
 =Дeq;

1874 
їq
->
іev_≥ndЪg
 =Дeq->
√xt_≥ndЪg
 =Дeq;

1875 
p№t
->
≥ndЪg_їґЫs
 = 
їq
;

1876 
p№t
->
choked
 = 1;

1878 (и
	`evТt_dЦ
(&
p№t
->
evТt
);

1879 
	`evТt_assign
(&
p№t
->
evТt
,Е№t->
evТt_ba£
,Е№t->
sockС
, (p№t->
юosЪg
?0:
EV_READ
и| 
EV_WRITE
 | 
EV_PERSIST
, 
£rvФ_p№t_їady_€ќback
,Еort);

1881 iа(
	`evТt_add
(&
p№t
->
evТt
, 
NULL
) < 0) {

1882 
	`log
(
EVDNS_LOG_WARN
, "Error fromЖibevent whenЗddingГvent for DNS server");

1887 
r
 = 1;

1888 
dЏe
;

1890 iа(
	`£rvФ_їque°_дУ
(
їq
)) {

1891 
r
 = 0;

1892 
dЏe
;

1895 iа(
p№t
->
≥ndЪg_їґЫs
)

1896 
	`£rvФ_p№t_жush
(
p№t
);

1898 
r
 = 0;

1899 
dЏe
:

1900 
	`EVDNS_UNLOCK
(
p№t
);

1901  
r
;

1902 
	}
}

1906 
	$£rvФ_їque°_дУ_™swФs
(
£rvФ_їque°
 *
їq
)

1908 
£rvФ_їґy_Щem
 *
viщim
, *
√xt
, **
li°
;

1909 
i
;

1910 
i
 = 0; i < 3; ++i) {

1911 iа(
i
==0)

1912 
li°
 = &
їq
->
™swФ
;

1913 iа(
i
==1)

1914 
li°
 = &
їq
->
auth№Щy
;

1916 
li°
 = &
їq
->
addЩiЏЃ
;

1918 
viщim
 = *
li°
;

1919 
viщim
) {

1920 
√xt
 = 
viщim
->next;

1921 
	`mm_дУ
(
viщim
->
«me
);

1922 iа(
viщim
->
d©a
)

1923 
	`mm_дУ
(
viщim
->
d©a
);

1924 
	`mm_дУ
(
viщim
);

1925 
viщim
 = 
√xt
;

1927 *
li°
 = 
NULL
;

1929 
	}
}

1934 
	$£rvФ_їque°_дУ
(
£rvФ_їque°
 *
їq
)

1936 
i
, 
rc
=1, 
lock
=0;

1937 iа(
їq
->
ba£
.
que°iЏs
) {

1938 
i
 = 0; i < 
їq
->
ba£
.
nque°iЏs
; ++i)

1939 
	`mm_дУ
(
їq
->
ba£
.
que°iЏs
[
i
]);

1940 
	`mm_дУ
(
їq
->
ba£
.
que°iЏs
);

1943 iа(
їq
->
p№t
) {

1944 
	`EVDNS_LOCK
(
їq
->
p№t
);

1945 
lock
=1;

1946 iа(
їq
->
p№t
->
≥ndЪg_їґЫs
 ==Дeq) {

1947 iа(
їq
->
√xt_≥ndЪg
)

1948 
їq
->
p№t
->
≥ndЪg_їґЫs
 =Дeq->
√xt_≥ndЪg
;

1950 
їq
->
p№t
->
≥ndЪg_їґЫs
 = 
NULL
;

1952 
rc
 = --
їq
->
p№t
->
їfъt
;

1955 iа(
їq
->
ї•Џ£
) {

1956 
	`mm_дУ
(
їq
->
ї•Џ£
);

1959 
	`£rvФ_їque°_дУ_™swФs
(
їq
);

1961 iа(
їq
->
√xt_≥ndЪg
 &&Дeq->next_pending !=Дeq) {

1962 
їq
->
√xt_≥ndЪg
->
іev_≥ndЪg
 =Дeq->prev_pending;

1963 
їq
->
іev_≥ndЪg
->
√xt_≥ndЪg
 =Дeq->next_pending;

1966 iа(
rc
 == 0) {

1967 
	`EVDNS_UNLOCK
(
їq
->
p№t
);

1968 
	`£rvФ_p№t_дУ
(
їq
->
p№t
);

1969 
	`mm_дУ
(
їq
);

1972 iа(
lock
)

1973 
	`EVDNS_UNLOCK
(
їq
->
p№t
);

1974 
	`mm_дУ
(
їq
);

1976 
	}
}

1980 
	$£rvФ_p№t_дУ
(
evdns_£rvФ_p№t
 *
p№t
)

1982 
	`EVUTIL_ASSERT
(
p№t
);

1983 
	`EVUTIL_ASSERT
(!
p№t
->
їfъt
);

1984 
	`EVUTIL_ASSERT
(!
p№t
->
≥ndЪg_їґЫs
);

1985 iа(
p№t
->
sockС
 > 0) {

1986 
	`CLOSE_SOCKET
(
p№t
->
sockС
);

1987 
p№t
->
sockС
 = -1;

1989 (и
	`evТt_dЦ
(&
p№t
->
evТt
);

1990 
	`evТt_debug_u«ssign
(&
p№t
->
evТt
);

1991 
	`EVTHREAD_FREE_LOCK
(
p№t
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

1992 
	`mm_дУ
(
p№t
);

1993 
	}
}

1997 
	$evdns_£rvФ_їque°_drЁ
(
evdns_£rvФ_їque°
 *
_їq
)

1999 
£rvФ_їque°
 *
їq
 = 
	`TO_SERVER_REQUEST
(
_їq
);

2000 
	`£rvФ_їque°_дУ
(
їq
);

2002 
	}
}

2006 
	$evdns_£rvФ_їque°_gС_їque°Ъg_addr
(
evdns_£rvФ_їque°
 *
_їq
, 
sockaddr
 *
І
, 
addr_Ћn
)

2008 
£rvФ_їque°
 *
їq
 = 
	`TO_SERVER_REQUEST
(
_їq
);

2009 iа(
addr_Ћn
 < ()
їq
->
addЊТ
)

2011 
	`memэy
(
І
, &(
їq
->
addr
),Дeq->
addЊТ
);

2012  
їq
->
addЊТ
;

2013 
	}
}

2015 #undeа
APPEND16


2016 #undeа
APPEND32


2021 
	$evdns_їque°_timeout_€ќback
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
) {

2022 
evdns_їque°
 *cЏ° 
їq
 = (evdns_їque° *и
ђg
;

2023 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


2024 
evdns_ba£
 *
ba£
 = 
їq
->base;

2026 (и
fd
;

2027 (и
evТts
;

2029 
	`log
(
EVDNS_LOG_DEBUG
, "Reque° %lxБimed out", (и
ђg
);

2030 
	`EVDNS_LOCK
(
ba£
);

2032 
їq
->
ns
->
timedout
++;

2033 iа(
їq
->
ns
->
timedout
 >Дeq->
ba£
->
globЃ_max_«me£rvФ_timeout
) {

2034 
їq
->
ns
->
timedout
 = 0;

2035 
	`«me£rvФ_зЮed
(
їq
->
ns
, "requestБimed out.");

2038 iа(
їq
->
tx_couЅ
 >рїq->
ba£
->
globЃ_max_їМ™smЩs
) {

2040 
	`їґy_scheduЋ_€ќback
(
їq
, 0, 
DNS_ERR_TIMEOUT
, 
NULL
);

2041 
	`їque°_fЪished
(
їq
, &
	`REQ_HEAD
‘eq->
ba£
,Дeq->
М™s_id
));

2044 (и
	`evtimФ_dЦ
(&
їq
->
timeout_evТt
);

2045 
	`evdns_їque°_М™smЩ
(
їq
);

2047 
	`EVDNS_UNLOCK
(
ba£
);

2048 
	}
}

2057 
	$evdns_їque°_М™smЩ_to
(
evdns_їque°
 *
їq
, 
«me£rvФ
 *
£rvФ
) {

2058 
r
;

2059 
	`ASSERT_LOCKED
(
їq
->
ba£
);

2060 
r
 = 
	`£ndto
(
£rvФ
->
sockС
, 
їq
->
їque°
,Дeq->
їque°_Ћn
, 0,

2061 (
sockaddr
 *)&
£rvФ
->
addїss
, sФvФ->
addЊТ
);

2062 iа(
r
 < 0) {

2063 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
£rvФ
->
sockС
);

2064 iа(
	`EVUTIL_ERR_RW_RETRIABLE
(
Фr
))

2066 
	`«me£rvФ_зЮed
(
їq
->
ns
, 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
));

2068 } iа(
r
 !р()
їq
->
їque°_Ћn
) {

2073 
	}
}

2082 
	$evdns_їque°_М™smЩ
(
evdns_їque°
 *
їq
) {

2083 
їtcode
 = 0, 
r
;

2085 
	`ASSERT_LOCKED
(
їq
->
ba£
);

2088 
їq
->
М™smЩ_me
 = 1;

2089 
	`EVUTIL_ASSERT
(
їq
->
М™s_id
 != 0xffff);

2091 iа(
їq
->
ns
->
choked
) {

2097 
r
 = 
	`evdns_їque°_М™smЩ_to
(
їq
,Дeq->
ns
);

2098 
r
) {

2101 
їq
->
ns
->
choked
 = 1;

2102 
	`«me£rvФ_wrЩe_waЩЪg
(
їq
->
ns
, 1);

2106 
їtcode
 = 1;

2111 
	`log
(
EVDNS_LOG_DEBUG
,

2112 "SСtЪgБimeouИf№Дeque° %lx", (и
їq
);

2113 iа(
	`evtimФ_add
(&
їq
->
timeout_evТt
, &їq->
ba£
->
globЃ_timeout
) < 0) {

2114 
	`log
(
EVDNS_LOG_WARN
,

2116 (и
їq
);

2119 
їq
->
tx_couЅ
++;

2120 
їq
->
М™smЩ_me
 = 0;

2121  
їtcode
;

2123 
	}
}

2126 
	$«me£rvФ_іobe_€ќback
(
їsu…
, 
ty≥
, 
couЅ
, 
Йl
, *
addїs£s
, *
ђg
) {

2127 
«me£rvФ
 *cЏ° 
ns
 = («me£rvФ *и
ђg
;

2128 (и
ty≥
;

2129 (и
couЅ
;

2130 (и
Йl
;

2131 (и
addїs£s
;

2133 
	`EVDNS_LOCK
(
ns
->
ba£
);

2134 
ns
->
іobe_їque°
 = 
NULL
;

2135 iа(
їsu…
 =р
DNS_ERR_CANCEL
) {

2139 } iа(
їsu…
 =р
DNS_ERR_NONE
 ||Дesu… =р
DNS_ERR_NOTEXIST
) {

2141 
	`«me£rvФ_up
(
ns
);

2143 
	`«me£rvФ_іobe_зЮed
(
ns
);

2145 
	`EVDNS_UNLOCK
(
ns
->
ba£
);

2146 
	}
}

2149 
	$«me£rvФ_£nd_іobe
(
«me£rvФ
 *cЏ° 
ns
) {

2150 
evdns_їque°
 *
їq
;

2154 
	`ASSERT_LOCKED
(
ns
->
ba£
);

2155 
	`log
(
EVDNS_LOG_DEBUG
, "SendingЕrobeБo %s",

2156 
	`debug_ЅЁ
((
sockaddr
 *)&
ns
->
addїss
));

2158 
їq
 = 
	`їque°_√w
(
ns
->
ba£
, 
TYPE_A
, "googЋ.com", 
DNS_QUERY_NO_SEARCH
, 
«me£rvФ_іobe_€ќback
,Вs);

2159 iа(!
їq
) ;

2160 
ns
->
іobe_їque°
 = 
їq
;

2162 
	`їque°_М™s_id_£t
(
їq
, 
	`М™ІщiЏ_id_pick
(
ns
->
ba£
));

2163 
їq
->
ns
 =Вs;

2164 
	`їque°_submЩ
(
їq
);

2165 
	}
}

2171 
	$evdns_М™smЩ
(
evdns_ba£
 *
ba£
) {

2172 
did_Мy_to_М™smЩ
 = 0;

2173 
i
;

2175 
	`ASSERT_LOCKED
(
ba£
);

2176 
i
 = 0; i < 
ba£
->
n_їq_hЧds
; ++i) {

2177 iа(
ba£
->
їq_hЧds
[
i
]) {

2178 
evdns_їque°
 *cЏ° 
°ђЛd_©
 = 
ba£
->
їq_hЧds
[
i
], *
їq
 = started_at;

2181 iа(
їq
->
М™smЩ_me
) {

2182 
did_Мy_to_М™smЩ
 = 1;

2183 
	`evdns_їque°_М™smЩ
(
їq
);

2186 
їq
 =Дeq->
√xt
;

2187 } 
їq
 !р
°ђЛd_©
);

2191  
did_Мy_to_М™smЩ
;

2192 
	}
}

2196 
	$evdns_ba£_couЅ_«me£rvФs
(
evdns_ba£
 *
ba£
)

2198 cЏ° 
«me£rvФ
 *
£rvФ
;

2199 
n
 = 0;

2201 
	`EVDNS_LOCK
(
ba£
);

2202 
£rvФ
 = 
ba£
->
£rvФ_hЧd
;

2203 iа(!
£rvФ
)

2204 
dЏe
;

2206 ++
n
;

2207 
£rvФ
 = sФvФ->
√xt
;

2208 } 
£rvФ
 !р
ba£
->
£rvФ_hЧd
);

2209 
dЏe
:

2210 
	`EVDNS_UNLOCK
(
ba£
);

2211  
n
;

2212 
	}
}

2215 
	$evdns_couЅ_«me£rvФs
()

2217  
	`evdns_ba£_couЅ_«me£rvФs
(
cuЉТt_ba£
);

2218 
	}
}

2222 
	$evdns_ba£_юЧr_«me£rvФs_™d_su•Тd
(
evdns_ba£
 *
ba£
)

2224 
«me£rvФ
 *
£rvФ
, *
°ђЛd_©
;

2225 
i
;

2227 
	`EVDNS_LOCK
(
ba£
);

2228 
£rvФ
 = 
ba£
->
£rvФ_hЧd
;

2229 
°ђЛd_©
 = 
ba£
->
£rvФ_hЧd
;

2230 iа(!
£rvФ
) {

2231 
	`EVDNS_UNLOCK
(
ba£
);

2235 
«me£rvФ
 *
√xt
 = 
£rvФ
->next;

2236 (и
	`evТt_dЦ
(&
£rvФ
->
evТt
);

2237 iа(
	`evtimФ_ЪЩЯlized
(&
£rvФ
->
timeout_evТt
))

2238 (и
	`evtimФ_dЦ
(&
£rvФ
->
timeout_evТt
);

2239 iа(
£rvФ
->
sockС
 >= 0)

2240 
	`CLOSE_SOCKET
(
£rvФ
->
sockС
);

2241 
	`mm_дУ
(
£rvФ
);

2242 iа(
√xt
 =р
°ђЛd_©
)

2244 
£rvФ
 = 
√xt
;

2246 
ba£
->
£rvФ_hЧd
 = 
NULL
;

2247 
ba£
->
globЃ_good_«me£rvФs
 = 0;

2249 
i
 = 0; i < 
ba£
->
n_їq_hЧds
; ++i) {

2250 
evdns_їque°
 *
їq
, *
їq_°ђЛd_©
;

2251 
їq
 = 
їq_°ђЛd_©
 = 
ba£
->
їq_hЧds
[
i
];

2252 
їq
) {

2253 
evdns_їque°
 *
√xt
 = 
їq
->next;

2254 
їq
->
tx_couЅ
 =Дeq->
їissue_couЅ
 = 0;

2255 
їq
->
ns
 = 
NULL
;

2257 (и
	`evtimФ_dЦ
(&
їq
->
timeout_evТt
);

2258 
їq
->
М™s_id
 = 0;

2259 
їq
->
М™smЩ_me
 = 0;

2261 
ba£
->
globЃ_їque°s_waЩЪg
++;

2262 
	`evdns_їque°_Ъ£є
(
їq
, &
ba£
->
їq_waЩЪg_hЧd
);

2267 
ba£
->
їq_waЩЪg_hЧd
 = ba£->їq_waЩЪg_hЧd->
іev
;

2269 iа(
√xt
 =р
їq_°ђЛd_©
)

2271 
їq
 = 
√xt
;

2273 
ba£
->
їq_hЧds
[
i
] = 
NULL
;

2276 
ba£
->
globЃ_їque°s_Ъжight
 = 0;

2278 
	`EVDNS_UNLOCK
(
ba£
);

2280 
	}
}

2283 
	$evdns_юЧr_«me£rvФs_™d_su•Тd
()

2285  
	`evdns_ba£_юЧr_«me£rvФs_™d_su•Тd
(
cuЉТt_ba£
);

2286 
	}
}

2291 
	$evdns_ba£_їsume
(
evdns_ba£
 *
ba£
)

2293 
	`EVDNS_LOCK
(
ba£
);

2294 
	`evdns_їque°s_pump_waЩЪg_queue
(
ba£
);

2295 
	`EVDNS_UNLOCK
(
ba£
);

2297 
	}
}

2300 
	$evdns_їsume
()

2302  
	`evdns_ba£_їsume
(
cuЉТt_ba£
);

2303 
	}
}

2306 
	$_evdns_«me£rvФ_add_imґ
(
evdns_ba£
 *
ba£
, cЏ° 
sockaddr
 *
addїss
, 
addЊТ
) {

2309 cЏ° 
«me£rvФ
 *
£rvФ
 = 
ba£
->
£rvФ_hЧd
, *cЏ° 
°ђЛd_©
 = base->server_head;

2310 
«me£rvФ
 *
ns
;

2311 
Фr
 = 0;

2313 
	`ASSERT_LOCKED
(
ba£
);

2314 iа(
£rvФ
) {

2316 iа(!
	`evutЮ_sockaddr_cmp
((
sockaddr
*)&
£rvФ
->
addїss
,Зddress, 1))  3;

2317 
£rvФ
 = sФvФ->
√xt
;

2318 } 
£rvФ
 !р
°ђЛd_©
);

2320 iа(
addЊТ
 > ()(
ns
->
addїss
)) {

2321 
	`log
(
EVDNS_LOG_DEBUG
, "AddЊТ %dБoЎlЏg.", ()
addЊТ
);

2325 
ns
 = (
«me£rvФ
 *и
	`mm_mЃloc
((nameserver));

2326 iа(!
ns
)  -1;

2328 
	`mem£t
(
ns
, 0, (
«me£rvФ
));

2329 
ns
->
ba£
 = base;

2331 
	`evtimФ_assign
(&
ns
->
timeout_evТt
,Вs->
ba£
->
evТt_ba£
, 
«me£rvФ_іod_€ќback
,Вs);

2333 
ns
->
sockС
 = 
	`sockС
(
PF_INET
, 
SOCK_DGRAM
, 0);

2334 iа(
ns
->
sockС
 < 0и{ 
Фr
 = 1; 
out1
; }

2335 
	`evutЮ_make_sockС_nЏblockЪg
(
ns
->
sockС
);

2337 iа(
ba£
->
globЃ_outgoЪg_addЊТ
 &&

2338 !
	`evutЮ_sockaddr_is_loЁback
(
addїss
)) {

2339 iа(
	`bЪd
(
ns
->
sockС
,

2340 (
sockaddr
*)&
ba£
->
globЃ_outgoЪg_addїss
,

2341 
ba£
->
globЃ_outgoЪg_addЊТ
) < 0) {

2342 
	`log
(
EVDNS_LOG_WARN
,"Couldn't bindБo outgoingЗddress");

2343 
Фr
 = 2;

2344 
out2
;

2348 
	`memэy
(&
ns
->
addїss
,Зddїss, 
addЊТ
);

2349 
ns
->
addЊТ
 =Зddrlen;

2350 
ns
->
°©e
 = 1;

2351 
	`evТt_assign
(&
ns
->
evТt
,Вs->
ba£
->
evТt_ba£
,Вs->
sockС
, 
EV_READ
 | 
EV_PERSIST
, 
«me£rvФ_їady_€ќback
,Вs);

2352 iа(
	`evТt_add
(&
ns
->
evТt
, 
NULL
) < 0) {

2353 
Фr
 = 2;

2354 
out2
;

2357 
	`log
(
EVDNS_LOG_DEBUG
, "AddedВame£rvФ %s", 
	`debug_ЅЁ
(
addїss
));

2360 iа(!
ba£
->
£rvФ_hЧd
) {

2361 
ns
->
√xt
 =Вs->
іev
 =Вs;

2362 
ba£
->
£rvФ_hЧd
 = 
ns
;

2364 
ns
->
√xt
 = 
ba£
->
£rvФ_hЧd
->next;

2365 
ns
->
іev
 = 
ba£
->
£rvФ_hЧd
;

2366 
ba£
->
£rvФ_hЧd
->
√xt
 = 
ns
;

2367 iа(
ba£
->
£rvФ_hЧd
->
іev
 == base->server_head) {

2368 
ba£
->
£rvФ_hЧd
->
іev
 = 
ns
;

2372 
ba£
->
globЃ_good_«me£rvФs
++;

2376 
out2
:

2377 
	`CLOSE_SOCKET
(
ns
->
sockС
);

2378 
out1
:

2379 
	`evТt_debug_u«ssign
(&
ns
->
evТt
);

2380 
	`mm_дУ
(
ns
);

2381 
	`log
(
EVDNS_LOG_WARN
, "U«bЋБЎaddВame£rvФ %s:ГЉ№ %d", 
	`debug_ЅЁ
(
addїss
), 
Фr
);

2382  
Фr
;

2383 
	}
}

2387 
	$evdns_ba£_«me£rvФ_add
(
evdns_ba£
 *
ba£
,

2388 
addїss
)

2390 
sockaddr_Ъ
 
sЪ
;

2391 
їs
;

2392 
sЪ
.
sЪ_addr
.
s_addr
 = 
addїss
;

2393 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(53);

2394 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

2395 
	`EVDNS_LOCK
(
ba£
);

2396 
їs
 = 
	`_evdns_«me£rvФ_add_imґ
(
ba£
, (
sockaddr
*)&
sЪ
, (sin));

2397 
	`EVDNS_UNLOCK
(
ba£
);

2398  
їs
;

2399 
	}
}

2402 
	$evdns_«me£rvФ_add
(
addїss
) {

2403 iа(!
cuЉТt_ba£
)

2404 
cuЉТt_ba£
 = 
	`evdns_ba£_√w
(
NULL
, 0);

2405  
	`evdns_ba£_«me£rvФ_add
(
cuЉТt_ba£
, 
addїss
);

2406 
	}
}

2409 
	$sockaddr_£Н№t
(
sockaddr
 *
І
, 
ev_uЪt16_t
 
p№t
)

2411 iа(
І
->
І_зmЮy
 =р
AF_INET
) {

2412 ((
sockaddr_Ъ
 *)
І
)->
sЪ_p№t
 = 
	`htЏs
(
p№t
);

2413 } iа(
І
->
І_зmЮy
 =р
AF_INET6
) {

2414 ((
sockaddr_Ъ6
 *)
І
)->
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

2416 
	}
}

2418 
ev_uЪt16_t


2419 
	$sockaddr_gСp№t
(
sockaddr
 *
І
)

2421 iа(
І
->
І_зmЮy
 =р
AF_INET
) {

2422  
	`Ѕohs
(((
sockaddr_Ъ
 *)
І
)->
sЪ_p№t
);

2423 } iа(
І
->
І_зmЮy
 =р
AF_INET6
) {

2424  
	`Ѕohs
(((
sockaddr_Ъ6
 *)
І
)->
sЪ6_p№t
);

2428 
	}
}

2432 
	$evdns_ba£_«me£rvФ_Э_add
(
evdns_ba£
 *
ba£
, cЏ° *
Э_as_°rЪg
) {

2433 
sockaddr_°№age
 
ss
;

2434 
sockaddr
 *
І
;

2435 
Ћn
 = (
ss
);

2436 
їs
;

2437 iа(
	`evutЮ_Јr£_sockaddr_p№t
(
Э_as_°rЪg
, (
sockaddr
 *)&
ss
,

2438 &
Ћn
)) {

2439 
	`log
(
EVDNS_LOG_WARN
, "UnableБoЕarseВameserverЗddress %s",

2440 
Э_as_°rЪg
);

2443 
І
 = (
sockaddr
 *и&
ss
;

2444 iа(
	`sockaddr_gСp№t
(
І
) == 0)

2445 
	`sockaddr_£Н№t
(
І
, 53);

2447 
	`EVDNS_LOCK
(
ba£
);

2448 
їs
 = 
	`_evdns_«me£rvФ_add_imґ
(
ba£
, 
І
, 
Ћn
);

2449 
	`EVDNS_UNLOCK
(
ba£
);

2450  
їs
;

2451 
	}
}

2454 
	$evdns_«me£rvФ_Э_add
(cЏ° *
Э_as_°rЪg
) {

2455 iа(!
cuЉТt_ba£
)

2456 
cuЉТt_ba£
 = 
	`evdns_ba£_√w
(
NULL
, 0);

2457  
	`evdns_ba£_«me£rvФ_Э_add
(
cuЉТt_ba£
, 
Э_as_°rЪg
);

2458 
	}
}

2462 
	$evdns_їque°_їmove
(
evdns_їque°
 *
їq
, evdns_їque° **
hЧd
)

2464 
	`ASSERT_LOCKED
(
їq
->
ba£
);

2468 
evdns_їque°
 *
±r
;

2469 
found
 = 0;

2470 
	`EVUTIL_ASSERT
(*
hЧd
 !р
NULL
);

2472 
±r
 = *
hЧd
;

2474 iа(
±r
 =р
їq
) {

2475 
found
 = 1;

2478 
±r
 =ЕМ->
√xt
;

2479 } 
±r
 !р*
hЧd
);

2480 
	`EVUTIL_ASSERT
(
found
);

2482 
	`EVUTIL_ASSERT
(
їq
->
√xt
);

2486 iа(
їq
->
√xt
 ==Дeq) {

2488 *
hЧd
 = 
NULL
;

2490 
їq
->
√xt
->
іev
 =Дeq->prev;

2491 
їq
->
іev
->
√xt
 =Дeq->next;

2492 iа(*
hЧd
 =р
їq
и*hЧd =Дeq->
√xt
;

2494 
їq
->
√xt
 =Дeq->
іev
 = 
NULL
;

2495 
	}
}

2499 
	$evdns_їque°_Ъ£є
(
evdns_їque°
 *
їq
, evdns_їque° **
hЧd
) {

2500 
	`ASSERT_LOCKED
(
їq
->
ba£
);

2501 iа(!*
hЧd
) {

2502 *
hЧd
 = 
їq
;

2503 
їq
->
√xt
 =Дeq->
іev
 =Дeq;

2507 
їq
->
іev
 = (*
hЧd
)->prev;

2508 
їq
->
іev
->
√xt
 =Дeq;

2509 
їq
->
√xt
 = *
hЧd
;

2510 (*
hЧd
)->
іev
 = 
їq
;

2511 
	}
}

2514 
	$°rЪg_num_dўs
(cЏ° *
s
) {

2515 
couЅ
 = 0;

2516 (
s
 = 
	`°rchr
(s, '.'))) {

2517 
s
++;

2518 
couЅ
++;

2520  
couЅ
;

2521 
	}
}

2523 
evdns_їque°
 *

2524 
	$їque°_√w
(
evdns_ba£
 *
ba£
, 
ty≥
, cЏ° *
«me
, 
жags
,

2525 
evdns_€ќback_ty≥
 
€ќback
, *
u£r_±r
) {

2527 cЏ° 
issuЪg_now
 =

2528 (
ba£
->
globЃ_їque°s_Ъжight
 < ba£->
globЃ_max_їque°s_Ъжight
) ? 1 : 0;

2530 cЏ° 
size_t
 
«me_Ћn
 = 
	`°ЊТ
(
«me
);

2531 cЏ° 
size_t
 
їque°_max_Ћn
 = 
	`evdns_їque°_Ћn
(
«me_Ћn
);

2532 cЏ° 
u16
 
М™s_id
 = 
issuЪg_now
 ? 
	`М™ІщiЏ_id_pick
(
ba£
) : 0xffff;

2534 
evdns_їque°
 *cЏ° 
їq
 =

2535 
	`mm_mЃloc
((
evdns_їque°
и+ 
їque°_max_Ћn
);

2536 
ЊТ
;

2537 
«mebuf
[256];

2538 (и
жags
;

2540 
	`ASSERT_LOCKED
(
ba£
);

2542 iа(!
їq
и 
NULL
;

2544 iа(
«me_Ћn
 >р(
«mebuf
)) {

2545 
	`mm_дУ
(
їq
);

2546  
NULL
;

2549 
	`mem£t
(
їq
, 0, (
evdns_їque°
));

2550 
їq
->
ba£
 = base;

2552 
	`evtimФ_assign
(&
їq
->
timeout_evТt
,Дeq->
ba£
->
evТt_ba£
, 
evdns_їque°_timeout_€ќback
,Дeq);

2554 iа(
ba£
->
globЃ_њndomize_€£
) {

2555 
i
;

2556 
њndbЩs
[((
«mebuf
)+7)/8];

2557 
	`°Њэy
(
«mebuf
, 
«me
, (namebuf));

2558 
	`evutЮ_£cuї_Їg_gС_byЛs
(
њndbЩs
, (
«me_Ћn
+7)/8);

2559 
i
 = 0; i < 
«me_Ћn
; ++i) {

2560 iа(
	`EVUTIL_ISALPHA
(
«mebuf
[
i
])) {

2561 iа((
њndbЩs
[
i
 >> 3] & (1<<(i & 7))))

2562 
«mebuf
[
i
] |= 0x20;

2564 
«mebuf
[
i
] &= ~0x20;

2567 
«me
 = 
«mebuf
;

2571 
їq
->
їque°
 = ((
u8
 *иїqи+ (
evdns_їque°
);

2573 
їq
->
їque°_≠≥nded
 = 1;

2574 
ЊТ
 = 
	`evdns_їque°_d©a_buЮd
(
«me
, 
«me_Ћn
, 
М™s_id
,

2575 
ty≥
, 
CLASS_INET
, 
їq
->
їque°
, 
їque°_max_Ћn
);

2576 iа(
ЊТ
 < 0)

2577 
Фr1
;

2579 
їq
->
їque°_Ћn
 = 
ЊТ
;

2580 
їq
->
М™s_id
 =Бrans_id;

2581 
їq
->
tx_couЅ
 = 0;

2582 
їq
->
їque°_ty≥
 = 
ty≥
;

2583 
їq
->
u£r_poЪЛr
 = 
u£r_±r
;

2584 
їq
->
u£r_€ќback
 = 
€ќback
;

2585 
їq
->
ns
 = 
issuЪg_now
 ? 
	`«me£rvФ_pick
(
ba£
и: 
NULL
;

2586 
їq
->
√xt
 =Дeq->
іev
 = 
NULL
;

2588  
їq
;

2589 
Фr1
:

2590 
	`mm_дУ
(
їq
);

2591  
NULL
;

2592 
	}
}

2595 
	$їque°_submЩ
(
evdns_їque°
 *cЏ° 
їq
) {

2596 
evdns_ba£
 *
ba£
 = 
їq
->base;

2597 
	`ASSERT_LOCKED
(
ba£
);

2598 iа(
їq
->
ns
) {

2601 
	`evdns_їque°_Ъ£є
(
їq
, &
	`REQ_HEAD
(
ba£
,Дeq->
М™s_id
));

2602 
ba£
->
globЃ_їque°s_Ъжight
++;

2603 
	`evdns_їque°_М™smЩ
(
їq
);

2605 
	`evdns_їque°_Ъ£є
(
їq
, &
ba£
->
їq_waЩЪg_hЧd
);

2606 
ba£
->
globЃ_їque°s_waЩЪg
++;

2608 
	}
}

2612 
	$evdns_€nыl_їque°
(
evdns_ba£
 *
ba£
, 
evdns_їque°
 *
їq
)

2614 iа(!
ba£
)

2615 
ba£
 = 
їq
->base;

2617 
	`EVDNS_LOCK
(
ba£
);

2618 
	`їґy_scheduЋ_€ќback
(
їq
, 0, 
DNS_ERR_CANCEL
, 
NULL
);

2619 iа(
їq
->
ns
) {

2621 
	`їque°_fЪished
(
їq
, &
	`REQ_HEAD
(
ba£
,Дeq->
М™s_id
));

2624 
	`їque°_fЪished
(
їq
, &
ba£
->
їq_waЩЪg_hЧd
);

2626 
	`EVDNS_UNLOCK
(
ba£
);

2627 
	}
}

2630 
evdns_їque°
 *

2631 
	$evdns_ba£_їsёve_Эv4
(
evdns_ba£
 *
ba£
, cЏ° *
«me
, 
жags
,

2632 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2633 
evdns_їque°
 *
їq
;

2634 
	`log
(
EVDNS_LOG_DEBUG
, "ResёvРїque°ed f№ %s", 
«me
);

2635 
	`EVDNS_LOCK
(
ba£
);

2636 iа(
жags
 & 
DNS_QUERY_NO_SEARCH
) {

2637 
їq
 =

2638 
	`їque°_√w
(
ba£
, 
TYPE_A
, 
«me
, 
жags
, 
€ќback
, 
±r
);

2639 iа(
їq
)

2640 
	`їque°_submЩ
(
їq
);

2642 
їq
 = 
	`£ђch_їque°_√w
(
ba£
, 
TYPE_A
, 
«me
, 
жags
, 
€ќback
, 
±r
);

2644 
	`EVDNS_UNLOCK
(
ba£
);

2645  
їq
;

2646 
	}
}

2648 
	$evdns_їsёve_Эv4
(cЏ° *
«me
, 
жags
,

2649 
evdns_€ќback_ty≥
 
€ќback
, *
±r
)

2651  
	`evdns_ba£_їsёve_Эv4
(
cuЉТt_ba£
, 
«me
, 
жags
, 
€ќback
, 
±r
)

2653 
	}
}

2657 
evdns_їque°
 *

2658 
	$evdns_ba£_їsёve_Эv6
(
evdns_ba£
 *
ba£
,

2659 cЏ° *
«me
, 
жags
,

2660 
evdns_€ќback_ty≥
 
€ќback
, *
±r
)

2662 
evdns_їque°
 *
їq
;

2663 
	`log
(
EVDNS_LOG_DEBUG
, "ResёvРїque°ed f№ %s", 
«me
);

2664 
	`EVDNS_LOCK
(
ba£
);

2665 iа(
жags
 & 
DNS_QUERY_NO_SEARCH
) {

2666 
їq
 = 
	`їque°_√w
(
ba£
, 
TYPE_AAAA
, 
«me
, 
жags
, 
€ќback
, 
±r
);

2667 iа(
їq
)

2668 
	`їque°_submЩ
(
їq
);

2670 
їq
 = 
	`£ђch_їque°_√w
(
ba£
,
TYPE_AAAA
, 
«me
, 
жags
, 
€ќback
, 
±r
);

2672 
	`EVDNS_UNLOCK
(
ba£
);

2673  
їq
;

2674 
	}
}

2676 
	$evdns_їsёve_Эv6
(cЏ° *
«me
, 
жags
,

2677 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2678  
	`evdns_ba£_їsёve_Эv6
(
cuЉТt_ba£
, 
«me
, 
жags
, 
€ќback
, 
±r
)

2680 
	}
}

2682 
evdns_їque°
 *

2683 
	$evdns_ba£_їsёve_їvФ£
(
evdns_ba£
 *
ba£
, cЏ° 
Ъ_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2684 
buf
[32];

2685 
evdns_їque°
 *
їq
;

2686 
u32
 
a
;

2687 
	`EVUTIL_ASSERT
(
Ъ
);

2688 
a
 = 
	`Ѕohl
(
Ъ
->
s_addr
);

2689 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

2690 ()(
u8
)((
a
 )&0xff),

2691 ()(
u8
)((
a
>>8 )&0xff),

2692 ()(
u8
)((
a
>>16)&0xff),

2693 ()(
u8
)((
a
>>24)&0xff));

2694 
	`log
(
EVDNS_LOG_DEBUG
, "ResёvРїque°ed f№ %†‘evФ£)", 
buf
);

2695 
	`EVDNS_LOCK
(
ba£
);

2696 
їq
 = 
	`їque°_√w
(
ba£
, 
TYPE_PTR
, 
buf
, 
жags
, 
€ќback
, 
±r
);

2697 iа(
їq
)

2698 
	`їque°_submЩ
(
їq
);

2699 
	`EVDNS_UNLOCK
(
ba£
);

2700  (
їq
);

2701 
	}
}

2703 
	$evdns_їsёve_їvФ£
(cЏ° 
Ъ_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2704  
	`evdns_ba£_їsёve_їvФ£
(
cuЉТt_ba£
, 
Ъ
, 
жags
, 
€ќback
, 
±r
)

2706 
	}
}

2708 
evdns_їque°
 *

2709 
	$evdns_ba£_їsёve_їvФ£_Эv6
(
evdns_ba£
 *
ba£
, cЏ° 
Ъ6_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2711 
buf
[73];

2712 *
э
;

2713 
evdns_їque°
 *
їq
;

2714 
i
;

2715 
	`EVUTIL_ASSERT
(
Ъ
);

2716 
э
 = 
buf
;

2717 
i
=15; i >= 0; --i) {

2718 
u8
 
byЛ
 = 
Ъ
->
s6_addr
[
i
];

2719 *
э
++ = "0123456789abcdef"[
byЛ
 & 0x0f];

2720 *
э
++ = '.';

2721 *
э
++ = "0123456789abcdef"[
byЛ
 >> 4];

2722 *
э
++ = '.';

2724 
	`EVUTIL_ASSERT
(
э
 + 
	`°ЊТ
("Э6.ђЈ"и< 
buf
+(buf));

2725 
	`memэy
(
э
, "Э6.ђЈ", 
	`°ЊТ
("ip6.arpa")+1);

2726 
	`log
(
EVDNS_LOG_DEBUG
, "ResёvРїque°ed f№ %†‘evФ£)", 
buf
);

2727 
	`EVDNS_LOCK
(
ba£
);

2728 
їq
 = 
	`їque°_√w
(
ba£
, 
TYPE_PTR
, 
buf
, 
жags
, 
€ќback
, 
±r
);

2729 iа(
їq
)

2730 
	`їque°_submЩ
(
їq
);

2731 
	`EVDNS_UNLOCK
(
ba£
);

2732  (
їq
);

2733 
	}
}

2735 
	$evdns_їsёve_їvФ£_Эv6
(cЏ° 
Ъ6_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
) {

2736  
	`evdns_ba£_їsёve_їvФ£_Эv6
(
cuЉТt_ba£
, 
Ъ
, 
жags
, 
€ќback
, 
±r
)

2738 
	}
}

2753 
	s£ђch_domaЪ
 {

2754 
	mЋn
;

2755 
£ђch_domaЪ
 *
	m√xt
;

2759 
	s£ђch_°©e
 {

2760 
	mїfcouЅ
;

2761 
	mndўs
;

2762 
	mnum_domaЪs
;

2763 
£ђch_domaЪ
 *
	mhЧd
;

2767 
	$£ђch_°©e_deьef
(
£ђch_°©e
 *cЏ° 
°©e
) {

2768 iа(!
°©e
) ;

2769 
°©e
->
їfcouЅ
--;

2770 iа(!
°©e
->
їfcouЅ
) {

2771 
£ђch_domaЪ
 *
√xt
, *
dom
;

2772 
dom
 = 
°©e
->
hЧd
; dom; dom = 
√xt
) {

2773 
√xt
 = 
dom
->next;

2774 
	`mm_дУ
(
dom
);

2776 
	`mm_дУ
(
°©e
);

2778 
	}
}

2780 
£ђch_°©e
 *

2781 
	$£ђch_°©e_√w
() {

2782 
£ђch_°©e
 *
°©e
 = (£ђch_°©Р*и
	`mm_mЃloc
((search_state));

2783 iа(!
°©e
и 
NULL
;

2784 
	`mem£t
(
°©e
, 0, (
£ђch_°©e
));

2785 
°©e
->
їfcouЅ
 = 1;

2786 
°©e
->
ndўs
 = 1;

2788  
°©e
;

2789 
	}
}

2792 
	$£ђch_po°fix_юЧr
(
evdns_ba£
 *
ba£
) {

2793 
	`£ђch_°©e_deьef
(
ba£
->
globЃ_£ђch_°©e
);

2795 
ba£
->
globЃ_£ђch_°©e
 = 
	`£ђch_°©e_√w
();

2796 
	}
}

2800 
	$evdns_ba£_£ђch_юЧr
(
evdns_ba£
 *
ba£
)

2802 
	`EVDNS_LOCK
(
ba£
);

2803 
	`£ђch_po°fix_юЧr
(
ba£
);

2804 
	`EVDNS_UNLOCK
(
ba£
);

2805 
	}
}

2808 
	$evdns_£ђch_юЧr
() {

2809 
	`evdns_ba£_£ђch_юЧr
(
cuЉТt_ba£
);

2810 
	}
}

2813 
	$£ђch_po°fix_add
(
evdns_ba£
 *
ba£
, cЏ° *
domaЪ
) {

2814 
domaЪ_Ћn
;

2815 
£ђch_domaЪ
 *
sdomaЪ
;

2816 
domaЪ
[0] == '.') domain++;

2817 
domaЪ_Ћn
 = 
	`°ЊТ
(
domaЪ
);

2819 
	`ASSERT_LOCKED
(
ba£
);

2820 iа(!
ba£
->
globЃ_£ђch_°©e
иba£->globЃ_£ђch_°©Рр
	`£ђch_°©e_√w
();

2821 iа(!
ba£
->
globЃ_£ђch_°©e
) ;

2822 
ba£
->
globЃ_£ђch_°©e
->
num_domaЪs
++;

2824 
sdomaЪ
 = (
£ђch_domaЪ
 *и
	`mm_mЃloc
((£ђch_domaЪи+ 
domaЪ_Ћn
);

2825 iа(!
sdomaЪ
) ;

2826 
	`memэy
–((
u8
 *и
sdomaЪ
и+ (
£ђch_domaЪ
), 
domaЪ
, 
domaЪ_Ћn
);

2827 
sdomaЪ
->
√xt
 = 
ba£
->
globЃ_£ђch_°©e
->
hЧd
;

2828 
sdomaЪ
->
Ћn
 = 
domaЪ_Ћn
;

2830 
ba£
->
globЃ_£ђch_°©e
->
hЧd
 = 
sdomaЪ
;

2831 
	}
}

2836 
	$£ђch_їvФ£
(
evdns_ba£
 *
ba£
) {

2837 
£ђch_domaЪ
 *
cur
, *
іev
 = 
NULL
, *
√xt
;

2838 
	`ASSERT_LOCKED
(
ba£
);

2839 
cur
 = 
ba£
->
globЃ_£ђch_°©e
->
hЧd
;

2840 
cur
) {

2841 
√xt
 = 
cur
->next;

2842 
cur
->
√xt
 = 
іev
;

2843 
іev
 = 
cur
;

2844 
cur
 = 
√xt
;

2847 
ba£
->
globЃ_£ђch_°©e
->
hЧd
 = 
іev
;

2848 
	}
}

2852 
	$evdns_ba£_£ђch_add
(
evdns_ba£
 *
ba£
, cЏ° *
domaЪ
) {

2853 
	`EVDNS_LOCK
(
ba£
);

2854 
	`£ђch_po°fix_add
(
ba£
, 
domaЪ
);

2855 
	`EVDNS_UNLOCK
(
ba£
);

2856 
	}
}

2858 
	$evdns_£ђch_add
(cЏ° *
domaЪ
) {

2859 
	`evdns_ba£_£ђch_add
(
cuЉТt_ba£
, 
domaЪ
);

2860 
	}
}

2864 
	$evdns_ba£_£ђch_ndўs_£t
(
evdns_ba£
 *
ba£
, cЏ° 
ndўs
) {

2865 
	`EVDNS_LOCK
(
ba£
);

2866 iа(!
ba£
->
globЃ_£ђch_°©e
иba£->globЃ_£ђch_°©Рр
	`£ђch_°©e_√w
();

2867 iа(
ba£
->
globЃ_£ђch_°©e
)

2868 
ba£
->
globЃ_£ђch_°©e
->
ndўs
 =Вdots;

2869 
	`EVDNS_UNLOCK
(
ba£
);

2870 
	}
}

2872 
	$evdns_£ђch_ndўs_£t
(cЏ° 
ndўs
) {

2873 
	`evdns_ba£_£ђch_ndўs_£t
(
cuЉТt_ba£
, 
ndўs
);

2874 
	}
}

2877 
	$£ђch_£t_дom_ho°«me
(
evdns_ba£
 *
ba£
) {

2878 
ho°«me
[
HOST_NAME_MAX
 + 1], *
domaЪ«me
;

2880 
	`ASSERT_LOCKED
(
ba£
);

2881 
	`£ђch_po°fix_юЧr
(
ba£
);

2882 iа(
	`gСho°«me
(
ho°«me
, (hostname))) ;

2883 
domaЪ«me
 = 
	`°rchr
(
ho°«me
, '.');

2884 iа(!
domaЪ«me
) ;

2885 
	`£ђch_po°fix_add
(
ba£
, 
domaЪ«me
);

2886 
	}
}

2890 
	$£ђch_make_√w
(cЏ° 
£ђch_°©e
 *cЏ° 
°©e
, 
n
, cЏ° *cЏ° 
ba£_«me
) {

2891 cЏ° 
ba£_Ћn
 = 
	`°ЊТ
(
ba£_«me
);

2892 cЏ° 
√ed_to_≠≥nd_dў
 = 
ba£_«me
[
ba£_Ћn
 - 1] == '.' ? 0 : 1;

2893 
£ђch_domaЪ
 *
dom
;

2895 
dom
 = 
°©e
->
hЧd
; dom; dom = dom->
√xt
) {

2896 iа(!
n
--) {

2899 cЏ° 
u8
 *cЏ° 
po°fix
 = ((u8 *и
dom
и+ (
£ђch_domaЪ
);

2900 cЏ° 
po°fix_Ћn
 = 
dom
->
Ћn
;

2901 *cЏ° 
√w«me
 = (*и
	`mm_mЃloc
(
ba£_Ћn
 + 
√ed_to_≠≥nd_dў
 + 
po°fix_Ћn
 + 1);

2902 iа(!
√w«me
и 
NULL
;

2903 
	`memэy
(
√w«me
, 
ba£_«me
, 
ba£_Ћn
);

2904 iа(
√ed_to_≠≥nd_dў
и
√w«me
[
ba£_Ћn
] = '.';

2905 
	`memэy
(
√w«me
 + 
ba£_Ћn
 + 
√ed_to_≠≥nd_dў
, 
po°fix
, 
po°fix_Ћn
);

2906 
√w«me
[
ba£_Ћn
 + 
√ed_to_≠≥nd_dў
 + 
po°fix_Ћn
] = 0;

2907  
√w«me
;

2912 
	`EVUTIL_ASSERT
(0);

2913  
NULL
;

2914 
	}
}

2916 
evdns_їque°
 *

2917 
	$£ђch_їque°_√w
(
evdns_ba£
 *
ba£
, 
ty≥
, cЏ° *cЏ° 
«me
, 
жags
, 
evdns_€ќback_ty≥
 
u£r_€ќback
, *
u£r_ђg
) {

2918 
	`ASSERT_LOCKED
(
ba£
);

2919 
	`EVUTIL_ASSERT
(
ty≥
 =р
TYPE_A
 ||Бy≥ =р
TYPE_AAAA
);

2920 iа–((
жags
 & 
DNS_QUERY_NO_SEARCH
) == 0) &&

2921 
ba£
->
globЃ_£ђch_°©e
 &&

2922 
ba£
->
globЃ_£ђch_°©e
->
num_domaЪs
) {

2924 
evdns_їque°
 *
їq
;

2925 iа(
	`°rЪg_num_dўs
(
«me
и>р
ba£
->
globЃ_£ђch_°©e
->
ndўs
) {

2926 
їq
 = 
	`їque°_√w
(
ba£
, 
ty≥
, 
«me
, 
жags
, 
u£r_€ќback
, 
u£r_ђg
);

2927 iа(!
їq
и 
NULL
;

2928 
їq
->
£ђch_Ъdex
 = -1;

2930 *cЏ° 
√w_«me
 = 
	`£ђch_make_√w
(
ba£
->
globЃ_£ђch_°©e
, 0, 
«me
);

2931 iа(!
√w_«me
и 
NULL
;

2932 
їq
 = 
	`їque°_√w
(
ba£
, 
ty≥
, 
√w_«me
, 
жags
, 
u£r_€ќback
, 
u£r_ђg
);

2933 
	`mm_дУ
(
√w_«me
);

2934 iа(!
їq
и 
NULL
;

2935 
їq
->
£ђch_Ъdex
 = 0;

2937 
їq
->
£ђch_№ig«me
 = 
	`mm_°rdup
(
«me
);

2938 
їq
->
£ђch_°©e
 = 
ba£
->
globЃ_£ђch_°©e
;

2939 
їq
->
£ђch_жags
 = 
жags
;

2940 
ba£
->
globЃ_£ђch_°©e
->
їfcouЅ
++;

2941 
	`їque°_submЩ
(
їq
);

2942  
їq
;

2944 
evdns_їque°
 *cЏ° 
їq
 = 
	`їque°_√w
(
ba£
, 
ty≥
, 
«me
, 
жags
, 
u£r_€ќback
, 
u£r_ђg
);

2945 iа(!
їq
и 
NULL
;

2946 
	`їque°_submЩ
(
їq
);

2947  
їq
;

2949 
	}
}

2957 
	$£ђch_Мy_√xt
(
evdns_їque°
 *cЏ° 
їq
) {

2958 
evdns_ba£
 *
ba£
 = 
їq
->base;

2959 
	`ASSERT_LOCKED
(
ba£
);

2960 iа(
їq
->
£ђch_°©e
) {

2962 *
√w_«me
;

2963 
evdns_їque°
 *
√wїq
;

2964 
їq
->
£ђch_Ъdex
++;

2965 iа(
їq
->
£ђch_Ъdex
 >рїq->
£ђch_°©e
->
num_domaЪs
) {

2968 iа(
	`°rЪg_num_dўs
(
їq
->
£ђch_№ig«me
и<Дeq->
£ђch_°©e
->
ndўs
) {

2970 
√wїq
 = 
	`їque°_√w
(
ba£
, 
їq
->
їque°_ty≥
,Дeq->
£ђch_№ig«me
,Дeq->
£ђch_жags
,Дeq->
u£r_€ќback
,Дeq->
u£r_poЪЛr
);

2971 
	`log
(
EVDNS_LOG_DEBUG
, "SЧrch:БryЪgДaw quФy %s", 
їq
->
£ђch_№ig«me
);

2972 iа(
√wїq
) {

2973 
	`їque°_submЩ
(
√wїq
);

2980 
√w_«me
 = 
	`£ђch_make_√w
(
їq
->
£ђch_°©e
,Дeq->
£ђch_Ъdex
,Дeq->
£ђch_№ig«me
);

2981 iа(!
√w_«me
)  1;

2982 
	`log
(
EVDNS_LOG_DEBUG
, "SЧrch:ВowБryЪg %†(%d)", 
√w_«me
, 
їq
->
£ђch_Ъdex
);

2983 
√wїq
 = 
	`їque°_√w
(
ba£
, 
їq
->
їque°_ty≥
, 
√w_«me
,Дeq->
£ђch_жags
,Дeq->
u£r_€ќback
,Дeq->
u£r_poЪЛr
);

2984 
	`mm_дУ
(
√w_«me
);

2985 iа(!
√wїq
)  1;

2986 
√wїq
->
£ђch_№ig«me
 = 
їq
->search_origname;

2987 
їq
->
£ђch_№ig«me
 = 
NULL
;

2988 
√wїq
->
£ђch_°©e
 = 
їq
->search_state;

2989 
√wїq
->
£ђch_жags
 = 
їq
->search_flags;

2990 
√wїq
->
£ђch_Ъdex
 = 
їq
->search_index;

2991 
√wїq
->
£ђch_°©e
->
їfcouЅ
++;

2992 
	`їque°_submЩ
(
√wїq
);

2996 
	}
}

2999 
	$£ђch_їque°_fЪished
(
evdns_їque°
 *cЏ° 
їq
) {

3000 
	`ASSERT_LOCKED
(
їq
->
ba£
);

3001 iа(
їq
->
£ђch_°©e
) {

3002 
	`£ђch_°©e_deьef
(
їq
->
£ђch_°©e
);

3003 
їq
->
£ђch_°©e
 = 
NULL
;

3005 iа(
їq
->
£ђch_№ig«me
) {

3006 
	`mm_дУ
(
їq
->
£ђch_№ig«me
);

3007 
їq
->
£ђch_№ig«me
 = 
NULL
;

3009 
	}
}

3015 
	$evdns_їsёv_£t_deзu…s
(
evdns_ba£
 *
ba£
, 
жags
) {

3017 
	`ASSERT_LOCKED
(
ba£
);

3018 iа(
жags
 & 
DNS_OPTION_SEARCH
и
	`£ђch_£t_дom_ho°«me
(
ba£
);

3019 iа(
жags
 & 
DNS_OPTION_NAMESERVERS
и
	`evdns_ba£_«me£rvФ_Э_add
(
ba£
,"127.0.0.1");

3020 
	}
}

3022 #iвdeа
_EVENT_HAVE_STRTOK_R


3024 
	$°єok_r
(*
s
, cЏ° *
dЦim
, **
°©e
) {

3025 *
э
, *
°ђt
;

3026 
°ђt
 = 
э
 = 
s
 ? s : *
°©e
;

3027 iа(!
э
)

3028  
NULL
;

3029 *
э
 && !
	`°rchr
(
dЦim
, *cp))

3030 ++
э
;

3031 iа(!*
э
) {

3032 iа(
э
 =р
°ђt
)

3033  
NULL
;

3034 *
°©e
 = 
NULL
;

3035  
°ђt
;

3037 *
э
++ = '\0';

3038 *
°©e
 = 
э
;

3039  
°ђt
;

3041 
	}
}

3046 
	$°єoЪt
(cЏ° *cЏ° 
°r
)

3048 *
Тd±r
;

3049 cЏ° 
r
 = 
	`°єё
(
°r
, &
Тd±r
, 10);

3050 iа(*
Тd±r
)  -1;

3051  
r
;

3052 
	}
}

3056 
	$°єўimevЃ
(cЏ° *cЏ° 
°r
, 
timevЃ
 *
out
)

3058 
d
;

3059 *
Тd±r
;

3060 
d
 = 
	`°єod
(
°r
, &
Тd±r
);

3061 iа(*
Тd±r
)  -1;

3062 iа(
d
 < 0)  -1;

3063 
out
->
tv_£c
 = (и
d
;

3064 
out
->
tv_u£c
 = (и((
d
 - () d)*1000000);

3065 iа(
out
->
tv_£c
 =р0 && out->
tv_u£c
 < 1000)

3068 
	}
}

3072 
	$°єoЪt_юЭ≥d
(cЏ° *cЏ° 
°r
, 
mЪ
, 
max
)

3074 
r
 = 
	`°єoЪt
(
°r
);

3075 iа(
r
 == -1)

3076  
r
;

3077 iа(
r
<
mЪ
)

3078  
mЪ
;

3079 iа(
r
>
max
)

3080  
max
;

3082  
r
;

3083 
	}
}

3086 
	$evdns_ba£_£t_max_їque°s_Ъжight
(
evdns_ba£
 *
ba£
, 
maxЪжight
)

3088 
ёd_n_hЧds
 = 
ba£
->
n_їq_hЧds
, 
n_hЧds
;

3089 
evdns_їque°
 **
ёd_hЧds
 = 
ba£
->
їq_hЧds
, **
√w_hЧds
, *
їq
;

3090 
i
;

3092 
	`ASSERT_LOCKED
(
ba£
);

3093 iа(
maxЪжight
 < 1)

3094 
maxЪжight
 = 1;

3095 
n_hЧds
 = (
maxЪжight
+4) / 5;

3096 
	`EVUTIL_ASSERT
(
n_hЧds
 > 0);

3097 
√w_hЧds
 = 
	`mm_€ќoc
(
n_hЧds
, (
evdns_їque°
*));

3098 iа(!
√w_hЧds
)

3100 iа(
ёd_hЧds
) {

3101 
i
 = 0; i < 
ёd_n_hЧds
; ++i) {

3102 
ёd_hЧds
[
i
]) {

3103 
їq
 = 
ёd_hЧds
[
i
];

3104 
	`evdns_їque°_їmove
(
їq
, &
ёd_hЧds
[
i
]);

3105 
	`evdns_їque°_Ъ£є
(
їq
, &
√w_hЧds
[їq->
М™s_id
 % 
n_hЧds
]);

3108 
	`mm_дУ
(
ёd_hЧds
);

3110 
ba£
->
їq_hЧds
 = 
√w_hЧds
;

3111 
ba£
->
n_їq_hЧds
 = 
n_hЧds
;

3112 
ba£
->
globЃ_max_їque°s_Ъжight
 = 
maxЪжight
;

3114 
	}
}

3118 
	$evdns_ba£_£t_ЁtiЏ
(
evdns_ba£
 *
ba£
,

3119 cЏ° *
ЁtiЏ
, cЏ° *
vЃ
)

3121 
їs
;

3122 
	`EVDNS_LOCK
(
ba£
);

3123 
їs
 = 
	`evdns_ba£_£t_ЁtiЏ_imґ
(
ba£
, 
ЁtiЏ
, 
vЃ
, 
DNS_OPTIONS_ALL
);

3124 
	`EVDNS_UNLOCK
(
ba£
);

3125  
їs
;

3126 
	}
}

3128 
ЪlЪe
 

3129 
	$°r_m©ches_ЁtiЏ
(cЏ° *
s1
, cЏ° *
ЁtiЏ«me
)

3134 
size_t
 
ЁОТ
 = 
	`°ЊТ
(
ЁtiЏ«me
);

3135 
size_t
 
¶Т
 = 
	`°ЊТ
(
s1
);

3136 iа(
¶Т
 =р
ЁОТ
 || slen == optlen - 1)

3137  !
	`°Їcmp
(
s1
, 
ЁtiЏ«me
, 
¶Т
);

3138 iа(
¶Т
 > 
ЁОТ
)

3139  !
	`°Їcmp
(
s1
, 
ЁtiЏ«me
, 
ЁОТ
);

3142 
	}
}

3145 
	$evdns_ba£_£t_ЁtiЏ_imґ
(
evdns_ba£
 *
ba£
,

3146 cЏ° *
ЁtiЏ
, cЏ° *
vЃ
, 
жags
)

3148 
	`ASSERT_LOCKED
(
ba£
);

3149 iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "ndots:")) {

3150 cЏ° 
ndўs
 = 
	`°єoЪt
(
vЃ
);

3151 iа(
ndўs
 == -1)  -1;

3152 iа(!(
жags
 & 
DNS_OPTION_SEARCH
))  0;

3153 
	`log
(
EVDNS_LOG_DEBUG
, "SСtЪgВdў†tЎ%d", 
ndўs
);

3154 iа(!
ba£
->
globЃ_£ђch_°©e
иba£->globЃ_£ђch_°©Рр
	`£ђch_°©e_√w
();

3155 iа(!
ba£
->
globЃ_£ђch_°©e
)  -1;

3156 
ba£
->
globЃ_£ђch_°©e
->
ndўs
 =Вdots;

3157 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "timeout:")) {

3158 
timevЃ
 
tv
;

3159 iа(
	`°єўimevЃ
(
vЃ
, &
tv
) == -1)  -1;

3160 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3161 
	`log
(
EVDNS_LOG_DEBUG
, "SСtЪgБimeouИtЎ%s", 
vЃ
);

3162 
	`memэy
(&
ba£
->
globЃ_timeout
, &
tv
, (
timevЃ
));

3163 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "getaddrinfo-allow-skew:")) {

3164 
timevЃ
 
tv
;

3165 iа(
	`°єўimevЃ
(
vЃ
, &
tv
) == -1)  -1;

3166 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3167 
	`log
(
EVDNS_LOG_DEBUG
, "Setting getaddrinfo-allow-skewБo %s",

3168 
vЃ
);

3169 
	`memэy
(&
ba£
->
globЃ_gСaddrЪfo_Ѓlow_skew
, &
tv
,

3170 (
timevЃ
));

3171 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "max-timeouts:")) {

3172 cЏ° 
maxtimeout
 = 
	`°єoЪt_юЭ≥d
(
vЃ
, 1, 255);

3173 iа(
maxtimeout
 == -1)  -1;

3174 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3175 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximumЗllowedБimeoutsБo %d",

3176 
maxtimeout
);

3177 
ba£
->
globЃ_max_«me£rvФ_timeout
 = 
maxtimeout
;

3178 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "max-inflight:")) {

3179 cЏ° 
maxЪжight
 = 
	`°єoЪt_юЭ≥d
(
vЃ
, 1, 65000);

3180 iа(
maxЪжight
 == -1)  -1;

3181 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3182 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximum inflightДequestsБo %d",

3183 
maxЪжight
);

3184 
	`evdns_ba£_£t_max_їque°s_Ъжight
(
ba£
, 
maxЪжight
);

3185 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "attempts:")) {

3186 
їМЫs
 = 
	`°єoЪt
(
vЃ
);

3187 iа(
їМЫs
 == -1)  -1;

3188 iа(
їМЫs
 > 255)Дetries = 255;

3189 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3190 
	`log
(
EVDNS_LOG_DEBUG
, "SСtЪgДСrЫ†tЎ%d", 
їМЫs
);

3191 
ba£
->
globЃ_max_їМ™smЩs
 = 
їМЫs
;

3192 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "randomize-case:")) {

3193 
њnd€£
 = 
	`°єoЪt
(
vЃ
);

3194 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3195 
ba£
->
globЃ_њndomize_€£
 = 
њnd€£
;

3196 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "bind-to:")) {

3199 
Ћn
 = (
ba£
->
globЃ_outgoЪg_addїss
);

3200 iа(!(
жags
 & 
DNS_OPTION_NAMESERVERS
))  0;

3201 iа(
	`evutЮ_Јr£_sockaddr_p№t
(
vЃ
,

3202 (
sockaddr
*)&
ba£
->
globЃ_outgoЪg_addїss
, &
Ћn
))

3204 
ba£
->
globЃ_outgoЪg_addЊТ
 = 
Ћn
;

3205 } iа(
	`°r_m©ches_ЁtiЏ
(
ЁtiЏ
, "initial-probe-timeout:")) {

3206 
timevЃ
 
tv
;

3207 iа(
	`°єўimevЃ
(
vЃ
, &
tv
) == -1)  -1;

3208 iа(
tv
.
tv_£c
 > 3600)

3209 
tv
.
tv_£c
 = 3600;

3210 iа(!(
жags
 & 
DNS_OPTION_MISC
))  0;

3211 
	`log
(
EVDNS_LOG_DEBUG
, "Setting initialЕrobeБimeoutБo %s",

3212 
vЃ
);

3213 
	`memэy
(&
ba£
->
globЃ_«me£rvФ_іobe_ЪЩЯl_timeout
, &
tv
,

3214 (
tv
));

3217 
	}
}

3220 
	$evdns_£t_ЁtiЏ
(cЏ° *
ЁtiЏ
, cЏ° *
vЃ
, 
жags
)

3222 iа(!
cuЉТt_ba£
)

3223 
cuЉТt_ba£
 = 
	`evdns_ba£_√w
(
NULL
, 0);

3224  
	`evdns_ba£_£t_ЁtiЏ
(
cuЉТt_ba£
, 
ЁtiЏ
, 
vЃ
);

3225 
	}
}

3228 
	$їsёv_cЏf_Јr£_lЪe
(
evdns_ba£
 *
ba£
, *cЏ° 
°ђt
, 
жags
) {

3229 *
°єok_°©e
;

3230 cЏ° *cЏ° 
dЦims
 = " \t";

3231 
	#NEXT_TOKEN
 
	`°єok_r
(
NULL
, 
dЦims
, &
°єok_°©e
)

	)

3234 *cЏ° 
fЬ°_tokТ
 = 
	`°єok_r
(
°ђt
, 
dЦims
, &
°єok_°©e
);

3235 
	`ASSERT_LOCKED
(
ba£
);

3236 iа(!
fЬ°_tokТ
) ;

3238 iа(!
	`°rcmp
(
fЬ°_tokТ
, "«me£rvФ"и&& (
жags
 & 
DNS_OPTION_NAMESERVERS
)) {

3239 cЏ° *cЏ° 
«me£rvФ
 = 
NEXT_TOKEN
;

3241 iа(
«me£rvФ
)

3242 
	`evdns_ba£_«me£rvФ_Э_add
(
ba£
, 
«me£rvФ
);

3243 } iа(!
	`°rcmp
(
fЬ°_tokТ
, "domaЪ"и&& (
жags
 & 
DNS_OPTION_SEARCH
)) {

3244 cЏ° *cЏ° 
domaЪ
 = 
NEXT_TOKEN
;

3245 iа(
domaЪ
) {

3246 
	`£ђch_po°fix_юЧr
(
ba£
);

3247 
	`£ђch_po°fix_add
(
ba£
, 
domaЪ
);

3249 } iа(!
	`°rcmp
(
fЬ°_tokТ
, "£ђch"и&& (
жags
 & 
DNS_OPTION_SEARCH
)) {

3250 cЏ° *
domaЪ
;

3251 
	`£ђch_po°fix_юЧr
(
ba£
);

3253 (
domaЪ
 = 
NEXT_TOKEN
)) {

3254 
	`£ђch_po°fix_add
(
ba£
, 
domaЪ
);

3256 
	`£ђch_їvФ£
(
ba£
);

3257 } iа(!
	`°rcmp
(
fЬ°_tokТ
, "options")) {

3258 cЏ° *
ЁtiЏ
;

3259 (
ЁtiЏ
 = 
NEXT_TOKEN
)) {

3260 cЏ° *
vЃ
 = 
	`°rchr
(
ЁtiЏ
, ':');

3261 
	`evdns_ba£_£t_ЁtiЏ_imґ
(
ba£
, 
ЁtiЏ
, 
vЃ
 ? vЃ+1 : "", 
жags
);

3264 #undeа
NEXT_TOKEN


3265 
	}
}

3276 
	$evdns_ba£_їsёv_cЏf_Јr£
(
evdns_ba£
 *
ba£
, 
жags
, cЏ° *cЏ° 
fЮТame
) {

3277 
їs
;

3278 
	`EVDNS_LOCK
(
ba£
);

3279 
їs
 = 
	`evdns_ba£_їsёv_cЏf_Јr£_imґ
(
ba£
, 
жags
, 
fЮТame
);

3280 
	`EVDNS_UNLOCK
(
ba£
);

3281  
їs
;

3282 
	}
}

3285 
	$evdns_gС_deзu…_ho°s_fЮТame
()

3287 #ifdeа
WIN32


3293 
Јth
[
MAX_PATH
+1];

3294 cЏ° 
ho°fЮe
[] = "\\drivers\\etc\\hosts";

3295 *
Јth_out
;

3296 
Ћn_out
;

3298 iа(! 
	`SHGСS≥cЯlFёdФP©hA
(
NULL
, 
Јth
, 
CSIDL_SYSTEM
, 0))

3299  
NULL
;

3300 
Ћn_out
 = 
	`°ЊТ
(
Јth
)+°ЊТ(
ho°fЮe
);

3301 
Јth_out
 = 
	`mm_mЃloc
(
Ћn_out
+1);

3302 
	`evutЮ_ҐіЪtf
(
Јth_out
, 
Ћn_out
, "%s%s", 
Јth
, 
ho°fЮe
);

3303  
Јth_out
;

3305  
	`mm_°rdup
("/etc/hosts");

3307 
	}
}

3310 
	$evdns_ba£_їsёv_cЏf_Јr£_imґ
(
evdns_ba£
 *
ba£
, 
жags
, cЏ° *cЏ° 
fЮТame
) {

3311 
size_t
 
n
;

3312 *
їsёv
;

3313 *
°ђt
;

3314 
Фr
 = 0;

3316 
	`log
(
EVDNS_LOG_DEBUG
, "PђsЪgДesёv.cЏаfЮР%s", 
fЮТame
);

3318 iа(
жags
 & 
DNS_OPTION_HOSTSFILE
) {

3319 *
вame
 = 
	`evdns_gС_deзu…_ho°s_fЮТame
();

3320 
	`evdns_ba£_lяd_ho°s
(
ba£
, 
вame
);

3321 iа(
вame
)

3322 
	`mm_дУ
(
вame
);

3325 iа((
Фr
 = 
	`evutЮ_їad_fЮe
(
fЮТame
, &
їsёv
, &
n
, 0)) < 0) {

3326 iа(
Фr
 == -1) {

3328 
	`evdns_їsёv_£t_deзu…s
(
ba£
, 
жags
);

3335 
°ђt
 = 
їsёv
;

3337 *cЏ° 
√wlЪe
 = 
	`°rchr
(
°ђt
, '\n');

3338 iа(!
√wlЪe
) {

3339 
	`їsёv_cЏf_Јr£_lЪe
(
ba£
, 
°ђt
, 
жags
);

3342 *
√wlЪe
 = 0;

3343 
	`їsёv_cЏf_Јr£_lЪe
(
ba£
, 
°ђt
, 
жags
);

3344 
°ђt
 = 
√wlЪe
 + 1;

3348 iа(!
ba£
->
£rvФ_hЧd
 && (
жags
 & 
DNS_OPTION_NAMESERVERS
)) {

3350 
	`evdns_ba£_«me£rvФ_Э_add
(
ba£
, "127.0.0.1");

3351 
Фr
 = 6;

3353 iа(
жags
 & 
DNS_OPTION_SEARCH
 && (!
ba£
->
globЃ_£ђch_°©e
 || ba£->globЃ_£ђch_°©e->
num_domaЪs
 == 0)) {

3354 
	`£ђch_£t_дom_ho°«me
(
ba£
);

3357 
	`mm_дУ
(
їsёv
);

3358  
Фr
;

3359 
	}
}

3362 
	$evdns_їsёv_cЏf_Јr£
(
жags
, cЏ° *cЏ° 
fЮТame
) {

3363 iа(!
cuЉТt_ba£
)

3364 
cuЉТt_ba£
 = 
	`evdns_ba£_√w
(
NULL
, 0);

3365  
	`evdns_ba£_їsёv_cЏf_Јr£
(
cuЉТt_ba£
, 
жags
, 
fЮТame
);

3366 
	}
}

3369 #ifdeа
WIN32


3372 
	$evdns_«me£rvФ_Э_add_lЪe
(
evdns_ba£
 *
ba£
, cЏ° *
Эs
) {

3373 cЏ° *
addr
;

3374 *
buf
;

3375 
r
;

3376 
	`ASSERT_LOCKED
(
ba£
);

3377 *
Эs
) {

3378 
	`is•aы
(*
Эs
) || *ips == ',' || *ips == '\t')

3379 ++
Эs
;

3380 
addr
 = 
Эs
;

3381 
	`isdigЩ
(*
Эs
) || *ips == '.' || *ips == ':' ||

3382 *
Эs
=='[' || *ips==']')

3383 ++
Эs
;

3384 
buf
 = 
	`mm_mЃloc
(
Эs
-
addr
+1);

3385 iа(!
buf
)  4;

3386 
	`memэy
(
buf
, 
addr
, 
Эs
-addr);

3387 
buf
[
Эs
-
addr
] = '\0';

3388 
r
 = 
	`evdns_ba£_«me£rvФ_Э_add
(
ba£
, 
buf
);

3389 
	`mm_дУ
(
buf
);

3390 iа(
r
) Д;

3393 
	}
}

3395 
	$DWORD
(
	tWINAPI
 *
	tGСNСw№kPђams_в_t
)(
	tFIXED_INFO
 *, 
	tDWORD
*);

3400 
	$lяd_«me£rvФs_wЩh_gС√tw№kЈњms
(
evdns_ba£
 *
ba£
)

3403 
FIXED_INFO
 *
fixed
;

3404 
HMODULE
 
h™dЋ
 = 0;

3405 
ULONG
 
size
 = (
FIXED_INFO
);

3406 *
buf
 = 
NULL
;

3407 
°©us
 = 0, 
r
, 
added_™y
;

3408 
IP_ADDR_STRING
 *
ns
;

3409 
GСNСw№kPђams_в_t
 
в
;

3411 
	`ASSERT_LOCKED
(
ba£
);

3412 iа(!(
h™dЋ
 = 
	`LяdLibњryA
("iphlpapi.dll"))) {

3413 
	`log
(
EVDNS_LOG_WARN
, "CouldВot open iphlpapi.dll");

3414 
°©us
 = -1;

3415 
dЏe
;

3417 iа(!(
в
 = (
GСNСw№kPђams_в_t
и
	`GСProcAddїss
(
h™dЋ
, "GetNetworkParams"))) {

3418 
	`log
(
EVDNS_LOG_WARN
, "CouldВot getЗddress of function.");

3419 
°©us
 = -1;

3420 
dЏe
;

3423 
buf
 = 
	`mm_mЃloc
(
size
);

3424 iа(!
buf
и{ 
°©us
 = 4; 
dЏe
; }

3425 
fixed
 = 
buf
;

3426 
r
 = 
	`в
(
fixed
, &
size
);

3427 iа(
r
 !р
ERROR_SUCCESS
 &&Д !р
ERROR_BUFFER_OVERFLOW
) {

3428 
°©us
 = -1;

3429 
dЏe
;

3431 iа(
r
 !р
ERROR_SUCCESS
) {

3432 
	`mm_дУ
(
buf
);

3433 
buf
 = 
	`mm_mЃloc
(
size
);

3434 iа(!
buf
и{ 
°©us
 = 4; 
dЏe
; }

3435 
fixed
 = 
buf
;

3436 
r
 = 
	`в
(
fixed
, &
size
);

3437 iа(
r
 !р
ERROR_SUCCESS
) {

3438 
	`log
(
EVDNS_LOG_DEBUG
, "fn() failed.");

3439 
°©us
 = -1;

3440 
dЏe
;

3444 
	`EVUTIL_ASSERT
(
fixed
);

3445 
added_™y
 = 0;

3446 
ns
 = &(
fixed
->
DnsSФvФLi°
);

3447 
ns
) {

3448 
r
 = 
	`evdns_«me£rvФ_Э_add_lЪe
(
ba£
, 
ns
->
IpAddїss
.
SМЪg
);

3449 iа(
r
) {

3450 
	`log
(
EVDNS_LOG_DEBUG
,"CouldВotЗddВameserver %sБoЖist,error: %d",

3451 (
ns
->
IpAddїss
.
SМЪg
),()
	`GСLa°EЉ№
());

3452 
°©us
 = 
r
;

3454 ++
added_™y
;

3455 
	`log
(
EVDNS_LOG_DEBUG
,"SucыssfuќyЗdded %†a†«me£rvФ",
ns
->
IpAddїss
.
SМЪg
);

3458 
ns
 =Вs->
Next
;

3461 iа(!
added_™y
) {

3462 
	`log
(
EVDNS_LOG_DEBUG
, "NoВameserversЗdded.");

3463 iа(
°©us
 == 0)

3464 
°©us
 = -1;

3466 
°©us
 = 0;

3469 
dЏe
:

3470 iа(
buf
)

3471 
	`mm_дУ
(
buf
);

3472 iа(
h™dЋ
)

3473 
	`FїeLibњry
(
h™dЋ
);

3474  
°©us
;

3475 
	}
}

3478 
	$cЏfig_«me£rvФ_дom_їg_key
(
evdns_ba£
 *
ba£
, 
HKEY
 
key
, cЏ° *
subkey
)

3480 *
buf
;

3481 
DWORD
 
bufsz
 = 0, 
ty≥
 = 0;

3482 
°©us
 = 0;

3484 
	`ASSERT_LOCKED
(
ba£
);

3485 iа(
	`RegQuФyVЃueExA
(
key
, 
subkey
, 0, &
ty≥
, 
NULL
, &
bufsz
)

3486 !р
ERROR_MORE_DATA
)

3488 iа(!(
buf
 = 
	`mm_mЃloc
(
bufsz
)))

3491 iа(
	`RegQuФyVЃueExA
(
key
, 
subkey
, 0, &
ty≥
, (
LPBYTE
)
buf
, &
bufsz
)

3492 =р
ERROR_SUCCESS
 && 
bufsz
 > 1) {

3493 
°©us
 = 
	`evdns_«me£rvФ_Э_add_lЪe
(
ba£
,
buf
);

3496 
	`mm_дУ
(
buf
);

3497  
°©us
;

3498 
	}
}

3500 
	#SERVICES_KEY
 "Sy°em\\CuЉТtCЏМёSС\\SФviыs\\"

	)

3501 
	#WIN_NS_9X_KEY
 
SERVICES_KEY
 "VxD\\MSTCP"

	)

3502 
	#WIN_NS_NT_KEY
 
SERVICES_KEY
 "TэЭ\\PђamСФs"

	)

3505 
	$lяd_«me£rvФs_дom_їgi°ry
(
evdns_ba£
 *
ba£
)

3507 
found
 = 0;

3508 
r
;

3509 
	#TRY
(
k
, 
«me
) \

3510 iа(!
found
 && 
	`cЏfig_«me£rvФ_дom_їg_key
(
ba£
,
k
,
«me
) == 0) { \

3511 
	`log
(
EVDNS_LOG_DEBUG
,"FoundВame£rvФ†Ъ %s/%s",#k,
«me
); \

3512 
found
 = 1; \

3513 } iа(!
found
) { \

3514 
	`log
(
EVDNS_LOG_DEBUG
,"Didn't findВameservers in %s/%s", \

3516 }

	)

3518 
	`ASSERT_LOCKED
(
ba£
);

3520 iа((()
	`GСVФsiЏ
()) > 0) {

3521 
HKEY
 
Ѕ_key
 = 0, 
ЪЛrзыs_key
 = 0;

3523 iа(
	`RegO≥nKeyExA
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_NT_KEY
, 0,

3524 
KEY_READ
, &
Ѕ_key
и!р
ERROR_SUCCESS
) {

3525 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'ИЁТВИkey, %d",()
	`GСLa°EЉ№
());

3528 
r
 = 
	`RegO≥nKeyExA
(
Ѕ_key
, "Interfaces", 0,

3529 
KEY_QUERY_VALUE
|
KEY_ENUMERATE_SUB_KEYS
,

3530 &
ЪЛrзыs_key
);

3531 iа(
r
 !р
ERROR_SUCCESS
) {

3532 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'ИЁТ iЅФзы†key, %d",()
	`GСLa°EЉ№
());

3535 
	`TRY
(
Ѕ_key
, "NameServer");

3536 
	`TRY
(
Ѕ_key
, "DhcpNameServer");

3537 
	`TRY
(
ЪЛrзыs_key
, "NameServer");

3538 
	`TRY
(
ЪЛrзыs_key
, "DhcpNameServer");

3539 
	`RegClo£Key
(
ЪЛrзыs_key
);

3540 
	`RegClo£Key
(
Ѕ_key
);

3542 
HKEY
 
wЪ_key
 = 0;

3543 iа(
	`RegO≥nKeyExA
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_9X_KEY
, 0,

3544 
KEY_READ
, &
wЪ_key
и!р
ERROR_SUCCESS
) {

3545 
	`log
(
EVDNS_LOG_DEBUG
, "Couldn'ИЁТДegi°ry key, %d", ()
	`GСLa°EЉ№
());

3548 
	`TRY
(
wЪ_key
, "NameServer");

3549 
	`RegClo£Key
(
wЪ_key
);

3552 iа(
found
 == 0) {

3553 
	`log
(
EVDNS_LOG_WARN
,"Didn't findЗnyВameservers.");

3556  
found
 ? 0 : -1;

3557 #undeа
TRY


3558 
	}
}

3561 
	$evdns_ba£_cЏfig_wЪdows_«me£rvФs
(
evdns_ba£
 *
ba£
)

3563 
r
;

3564 *
вame
;

3565 iа(
ba£
 =р
NULL
)

3566 
ba£
 = 
cuЉТt_ba£
;

3567 iа(
ba£
 =р
NULL
)

3569 
	`EVDNS_LOCK
(
ba£
);

3570 iа(
	`lяd_«me£rvФs_wЩh_gС√tw№kЈњms
(
ba£
) == 0) {

3571 
	`EVDNS_UNLOCK
(
ba£
);

3574 
r
 = 
	`lяd_«me£rvФs_дom_їgi°ry
(
ba£
);

3576 
вame
 = 
	`evdns_gС_deзu…_ho°s_fЮТame
();

3577 
	`evdns_ba£_lяd_ho°s
(
ba£
, 
вame
);

3578 iа(
вame
)

3579 
	`mm_дУ
(
вame
);

3581 
	`EVDNS_UNLOCK
(
ba£
);

3582  
r
;

3583 
	}
}

3586 
	$evdns_cЏfig_wЪdows_«me£rvФs
()

3588 iа(!
cuЉТt_ba£
) {

3589 
cuЉТt_ba£
 = 
	`evdns_ba£_√w
(
NULL
, 1);

3590  
cuЉТt_ba£
 =р
NULL
 ? -1 : 0;

3592  
	`evdns_ba£_cЏfig_wЪdows_«me£rvФs
(
cuЉТt_ba£
);

3594 
	}
}

3597 
evdns_ba£
 *

3598 
	$evdns_ba£_√w
(
evТt_ba£
 *evТt_ba£, 
ЪЩЯlize_«me£rvФs
)

3600 
evdns_ba£
 *
ba£
;

3602 iа(
	`evutЮ_£cuї_Їg_ЪЩ
() < 0) {

3603 
	`log
(
EVDNS_LOG_WARN
, "UnableБo seedДandomВumber generator; "

3605  
NULL
;

3611 
	`evutЮ_£t_evdns_gСaddrЪfo_в
(
evdns_gСaddrЪfo
);

3613 
ba£
 = 
	`mm_mЃloc
((
evdns_ba£
));

3614 iа(
ba£
 =р
NULL
)

3615  (
NULL
);

3616 
	`mem£t
(
ba£
, 0, (
evdns_ba£
));

3617 
ba£
->
їq_waЩЪg_hЧd
 = 
NULL
;

3619 
	`EVTHREAD_ALLOC_LOCK
(
ba£
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

3620 
	`EVDNS_LOCK
(
ba£
);

3623 
ba£
->
їq_hЧds
 = 
NULL
;

3625 
	`evdns_ba£_£t_max_їque°s_Ъжight
(
ba£
, 64);

3627 
ba£
->
£rvФ_hЧd
 = 
NULL
;

3628 
ba£
->
evТt_ba£
 =Гvent_base;

3629 
ba£
->
globЃ_good_«me£rvФs
 = ba£->
globЃ_їque°s_Ъжight
 =

3630 
ba£
->
globЃ_їque°s_waЩЪg
 = 0;

3632 
ba£
->
globЃ_timeout
.
tv_£c
 = 5;

3633 
ba£
->
globЃ_timeout
.
tv_u£c
 = 0;

3634 
ba£
->
globЃ_max_їissues
 = 1;

3635 
ba£
->
globЃ_max_їМ™smЩs
 = 3;

3636 
ba£
->
globЃ_max_«me£rvФ_timeout
 = 3;

3637 
ba£
->
globЃ_£ђch_°©e
 = 
NULL
;

3638 
ba£
->
globЃ_њndomize_€£
 = 1;

3639 
ba£
->
globЃ_gСaddrЪfo_Ѓlow_skew
.
tv_£c
 = 3;

3640 
ba£
->
globЃ_gСaddrЪfo_Ѓlow_skew
.
tv_u£c
 = 0;

3641 
ba£
->
globЃ_«me£rvФ_іobe_ЪЩЯl_timeout
.
tv_£c
 = 10;

3642 
ba£
->
globЃ_«me£rvФ_іobe_ЪЩЯl_timeout
.
tv_u£c
 = 0;

3644 
	`TAILQ_INIT
(&
ba£
->
ho°sdb
);

3646 iа(
ЪЩЯlize_«me£rvФs
) {

3647 
r
;

3648 #ifdeа
WIN32


3649 
r
 = 
	`evdns_ba£_cЏfig_wЪdows_«me£rvФs
(
ba£
);

3651 
r
 = 
	`evdns_ba£_їsёv_cЏf_Јr£
(
ba£
, 
DNS_OPTIONS_ALL
, "/etc/resolv.conf");

3653 iа(
r
 == -1) {

3654 
	`evdns_ba£_дУ_™d_u∆ock
(
ba£
, 0);

3655  
NULL
;

3658 
	`EVDNS_UNLOCK
(
ba£
);

3659  
ba£
;

3660 
	}
}

3663 
	$evdns_ЪЩ
()

3665 
evdns_ba£
 *
ba£
 = 
	`evdns_ba£_√w
(
NULL
, 1);

3666 iа(
ba£
) {

3667 
cuЉТt_ba£
 = 
ba£
;

3672 
	}
}

3675 
	$evdns_Фr_to_°rЪg
(
Фr
)

3677 
Фr
) {

3678 
DNS_ERR_NONE
:  "noГrror";

3679 
DNS_ERR_FORMAT
:  "misformatted query";

3680 
DNS_ERR_SERVERFAILED
:  "server failed";

3681 
DNS_ERR_NOTEXIST
:  "name doesВotГxist";

3682 
DNS_ERR_NOTIMPL
:  "queryВot implemented";

3683 
DNS_ERR_REFUSED
:  "refused";

3685 
DNS_ERR_TRUNCATED
:  "replyБruncated or ill-formed";

3686 
DNS_ERR_UNKNOWN
:  "unknown";

3687 
DNS_ERR_TIMEOUT
:  "requestБimed out";

3688 
DNS_ERR_SHUTDOWN
:  "dns subsystem shut down";

3689 
DNS_ERR_CANCEL
:  "dnsДequest canceled";

3692 
	}
}

3695 
	$evdns_«me£rvФ_дУ
(
«me£rvФ
 *
£rvФ
)

3697 iа(
£rvФ
->
sockС
 >= 0)

3698 
	`CLOSE_SOCKET
(
£rvФ
->
sockС
);

3699 (и
	`evТt_dЦ
(&
£rvФ
->
evТt
);

3700 
	`evТt_debug_u«ssign
(&
£rvФ
->
evТt
);

3701 iа(
£rvФ
->
°©e
 == 0)

3702 (и
	`evТt_dЦ
(&
£rvФ
->
timeout_evТt
);

3703 
	`evТt_debug_u«ssign
(&
£rvФ
->
timeout_evТt
);

3704 
	`mm_дУ
(
£rvФ
);

3705 
	}
}

3708 
	$evdns_ba£_дУ_™d_u∆ock
(
evdns_ba£
 *
ba£
, 
зЮ_їque°s
)

3710 
«me£rvФ
 *
£rvФ
, *
£rvФ_√xt
;

3711 
£ђch_domaЪ
 *
dom
, *
dom_√xt
;

3712 
i
;

3718 
i
 = 0; i < 
ba£
->
n_їq_hЧds
; ++i) {

3719 
ba£
->
їq_hЧds
[
i
]) {

3720 iа(
зЮ_їque°s
)

3721 
	`їґy_scheduЋ_€ќback
(
ba£
->
їq_hЧds
[
i
], 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3722 
	`їque°_fЪished
(
ba£
->
їq_hЧds
[
i
], &
	`REQ_HEAD
(ba£, ba£->їq_hЧds[i]->
М™s_id
));

3725 
ba£
->
їq_waЩЪg_hЧd
) {

3726 iа(
зЮ_їque°s
)

3727 
	`їґy_scheduЋ_€ќback
(
ba£
->
їq_waЩЪg_hЧd
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3728 
	`їque°_fЪished
(
ba£
->
їq_waЩЪg_hЧd
, &base->req_waiting_head);

3730 
ba£
->
globЃ_їque°s_Ъжight
 = ba£->
globЃ_їque°s_waЩЪg
 = 0;

3732 
£rvФ
 = 
ba£
->
£rvФ_hЧd
; sФvФ; sФvФ = 
£rvФ_√xt
) {

3733 
£rvФ_√xt
 = 
£rvФ
->
√xt
;

3734 
	`evdns_«me£rvФ_дУ
(
£rvФ
);

3735 iа(
£rvФ_√xt
 =р
ba£
->
£rvФ_hЧd
)

3738 
ba£
->
£rvФ_hЧd
 = 
NULL
;

3739 
ba£
->
globЃ_good_«me£rvФs
 = 0;

3741 iа(
ba£
->
globЃ_£ђch_°©e
) {

3742 
dom
 = 
ba£
->
globЃ_£ђch_°©e
->
hЧd
; dom; dom = 
dom_√xt
) {

3743 
dom_√xt
 = 
dom
->
√xt
;

3744 
	`mm_дУ
(
dom
);

3746 
	`mm_дУ
(
ba£
->
globЃ_£ђch_°©e
);

3747 
ba£
->
globЃ_£ђch_°©e
 = 
NULL
;

3751 
ho°s_ТМy
 *
viщim
;

3752 (
viщim
 = 
	`TAILQ_FIRST
(&
ba£
->
ho°sdb
))) {

3753 
	`TAILQ_REMOVE
(&
ba£
->
ho°sdb
, 
viщim
, 
√xt
);

3754 
	`mm_дУ
(
viщim
);

3758 
	`EVDNS_UNLOCK
(
ba£
);

3759 
	`EVTHREAD_FREE_LOCK
(
ba£
->
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

3761 
	`mm_дУ
(
ba£
);

3762 
	}
}

3765 
	$evdns_ba£_дУ
(
evdns_ba£
 *
ba£
, 
зЮ_їque°s
)

3767 
	`EVDNS_LOCK
(
ba£
);

3768 
	`evdns_ba£_дУ_™d_u∆ock
(
ba£
, 
зЮ_їque°s
);

3769 
	}
}

3772 
	$evdns_shutdown
(
зЮ_їque°s
)

3774 iа(
cuЉТt_ba£
) {

3775 
evdns_ba£
 *
b
 = 
cuЉТt_ba£
;

3776 
cuЉТt_ba£
 = 
NULL
;

3777 
	`evdns_ba£_дУ
(
b
, 
зЮ_їque°s
);

3779 
evdns_log_в
 = 
NULL
;

3780 
	}
}

3783 
	$evdns_ba£_Јr£_ho°s_lЪe
(
evdns_ba£
 *
ba£
, *
lЪe
)

3785 *
°єok_°©e
;

3786 cЏ° *cЏ° 
dЦims
 = " \t";

3787 *cЏ° 
addr
 = 
	`°єok_r
(
lЪe
, 
dЦims
, &
°єok_°©e
);

3788 *
ho°«me
, *
hash
;

3789 
sockaddr_°№age
 
ss
;

3790 
sockЋn
 = (
ss
);

3791 
	`ASSERT_LOCKED
(
ba£
);

3793 
	#NEXT_TOKEN
 
	`°єok_r
(
NULL
, 
dЦims
, &
°єok_°©e
)

	)

3795 iа(!
addr
 || *addr == '#')

3798 
	`mem£t
(&
ss
, 0, (ss));

3799 iа(
	`evutЮ_Јr£_sockaddr_p№t
(
addr
, (
sockaddr
*)&
ss
, &
sockЋn
)<0)

3801 iа(
sockЋn
 > (
sockaddr_Ъ6
))

3804 iа(
	`sockaddr_gСp№t
((
sockaddr
*)&
ss
))

3807 (
ho°«me
 = 
NEXT_TOKEN
)) {

3808 
ho°s_ТМy
 *
he
;

3809 
size_t
 
«mЦТ
;

3810 iа((
hash
 = 
	`°rchr
(
ho°«me
, '#'))) {

3811 iа(
hash
 =р
ho°«me
)

3813 *
hash
 = '\0';

3816 
«mЦТ
 = 
	`°ЊТ
(
ho°«me
);

3818 
he
 = 
	`mm_€ќoc
(1, (
ho°s_ТМy
)+
«mЦТ
);

3819 iа(!
he
)

3821 
	`EVUTIL_ASSERT
(
sockЋn
 <р(
he
->
addr
));

3822 
	`memэy
(&
he
->
addr
, &
ss
, 
sockЋn
);

3823 
	`memэy
(
he
->
ho°«me
, ho°«me, 
«mЦТ
+1);

3824 
he
->
addЊТ
 = 
sockЋn
;

3826 
	`TAILQ_INSERT_TAIL
(&
ba£
->
ho°sdb
, 
he
, 
√xt
);

3828 iа(
hash
)

3833 #undeа
NEXT_TOKEN


3834 
	}
}

3837 
	$evdns_ba£_lяd_ho°s_imґ
(
evdns_ba£
 *
ba£
, cЏ° *
ho°s_вame
)

3839 *
°r
=
NULL
, *
э
, *
eё
;

3840 
size_t
 
Ћn
;

3841 
Фr
=0;

3843 
	`ASSERT_LOCKED
(
ba£
);

3845 iа(
ho°s_вame
 =р
NULL
 ||

3846 (
Фr
 = 
	`evutЮ_їad_fЮe
(
ho°s_вame
, &
°r
, &
Ћn
, 0)) < 0) {

3847 
tmp
[64];

3848 
	`°Њэy
(
tmp
, "127.0.0.1Жocalhost", (tmp));

3849 
	`evdns_ba£_Јr£_ho°s_lЪe
(
ba£
, 
tmp
);

3850 
	`°Њэy
(
tmp
, "::1Жocalhost", (tmp));

3851 
	`evdns_ba£_Јr£_ho°s_lЪe
(
ba£
, 
tmp
);

3852  
Фr
 ? -1 : 0;

3857 
э
 = 
°r
;

3859 
eё
 = 
	`°rchr
(
э
, '\n');

3861 iа(
eё
) {

3862 *
eё
 = '\0';

3863 
	`evdns_ba£_Јr£_ho°s_lЪe
(
ba£
, 
э
);

3864 
э
 = 
eё
+1;

3866 
	`evdns_ba£_Јr£_ho°s_lЪe
(
ba£
, 
э
);

3871 
	`mm_дУ
(
°r
);

3873 
	}
}

3876 
	$evdns_ba£_lяd_ho°s
(
evdns_ba£
 *
ba£
, cЏ° *
ho°s_вame
)

3878 
їs
;

3879 iа(!
ba£
)

3880 
ba£
 = 
cuЉТt_ba£
;

3881 
	`EVDNS_LOCK
(
ba£
);

3882 
їs
 = 
	`evdns_ba£_lяd_ho°s_imґ
(
ba£
, 
ho°s_вame
);

3883 
	`EVDNS_UNLOCK
(
ba£
);

3884  
їs
;

3885 
	}
}

3888 
	sgСaddrЪfo_subїque°
 {

3889 
evdns_їque°
 *
	mr
;

3890 
ev_uЪt32_t
 
	mty≥
;

3894 
	sevdns_gСaddrЪfo_їque°
 {

3895 
evdns_ba£
 *
	mevdns_ba£
;

3898 
evutЮ_addrЪfo
 
	mhЪts
;

3900 
evdns_gСaddrЪfo_cb
 
	mu£r_cb
;

3902 *
	mu£r_d©a
;

3904 
ev_uЪt16_t
 
	mp№t
;

3906 
gСaddrЪfo_subїque°
 
	mЭv4_їque°
;

3908 
gСaddrЪfo_subїque°
 
	mЭv6_їque°
;

3911 *
	mъame_їsu…
;

3915 
evutЮ_addrЪfo
 *
	m≥ndЪg_їsu…
;

3917 
	m≥ndЪg_Фr№
;

3920 
evТt
 
	mtimeout
;

3925 
	$evdns_Фr_to_gСaddrЪfo_Фr
(
e1
)

3928 iа(
e1
 =р
DNS_ERR_NONE
)

3930 iа(
e1
 =р
DNS_ERR_NOTEXIST
)

3931  
EVUTIL_EAI_NONAME
;

3933  
EVUTIL_EAI_FAIL
;

3934 
	}
}

3938 
	$gСaddrЪfo_mФge_Фr
(
e1
, 
e2
)

3941 iа(
e1
 == 0)

3942  
e2
;

3944  
e1
;

3945 
	}
}

3948 
	$дУ_gСaddrЪfo_їque°
(
evdns_gСaddrЪfo_їque°
 *
d©a
)

3950 iа(
d©a
->
≥ndЪg_їsu…
)

3951 
	`evutЮ_дУaddrЪfo
(
d©a
->
≥ndЪg_їsu…
);

3952 iа(
d©a
->
ъame_їsu…
)

3953 
	`mm_дУ
(
d©a
->
ъame_їsu…
);

3954 
	`evТt_dЦ
(&
d©a
->
timeout
);

3955 
	`mm_дУ
(
d©a
);

3957 
	}
}

3960 
	$add_ъame_to_їґy
(
evdns_gСaddrЪfo_їque°
 *
d©a
,

3961 
evutЮ_addrЪfo
 *
ai
)

3963 iа(
d©a
->
ъame_їsu…
 && 
ai
) {

3964 
ai
->
ai_€nЏ«me
 = 
d©a
->
ъame_їsu…
;

3965 
d©a
->
ъame_їsu…
 = 
NULL
;

3967 
	}
}

3974 
	$evdns_gСaddrЪfo_timeout_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
±r
)

3976 
v4_timedout
 = 0, 
v6_timedout
 = 0;

3977 
evdns_gСaddrЪfo_їque°
 *
d©a
 = 
±r
;

3980 iа(
d©a
->
Эv4_їque°
.
r
) {

3981 
	`evdns_€nыl_їque°
(
NULL
, 
d©a
->
Эv4_їque°
.
r
);

3982 
d©a
->
Эv4_їque°
.
r
 = 
NULL
;

3983 
v4_timedout
 = 1;

3984 
	`EVDNS_LOCK
(
d©a
->
evdns_ba£
);

3985 ++
d©a
->
evdns_ba£
->
gСaddrЪfo_Эv4_timeouts
;

3986 
	`EVDNS_UNLOCK
(
d©a
->
evdns_ba£
);

3988 iа(
d©a
->
Эv6_їque°
.
r
) {

3989 
	`evdns_€nыl_їque°
(
NULL
, 
d©a
->
Эv6_їque°
.
r
);

3990 
d©a
->
Эv6_їque°
.
r
 = 
NULL
;

3991 
v6_timedout
 = 1;

3992 
	`EVDNS_LOCK
(
d©a
->
evdns_ba£
);

3993 ++
d©a
->
evdns_ba£
->
gСaddrЪfo_Эv6_timeouts
;

3994 
	`EVDNS_UNLOCK
(
d©a
->
evdns_ba£
);

3999 
	`EVUTIL_ASSERT
(!
v4_timedout
 || !
v6_timedout
);

4002 iа(
d©a
->
≥ndЪg_їsu…
) {

4003 
	`add_ъame_to_їґy
(
d©a
, d©a->
≥ndЪg_їsu…
);

4004 
d©a
->
	`u£r_cb
(0, d©a->
≥ndЪg_їsu…
, d©a->
u£r_d©a
);

4005 
d©a
->
≥ndЪg_їsu…
 = 
NULL
;

4007 
e
 = 
d©a
->
≥ndЪg_Фr№
;

4008 iа(!
e
)

4009 
e
 = 
EVUTIL_EAI_AGAIN
;

4010 
d©a
->
	`u£r_cb
(
e
, 
NULL
, d©a->
u£r_d©a
);

4013 
	`дУ_gСaddrЪfo_їque°
(
d©a
);

4014 
	}
}

4017 
	$evdns_gСaddrЪfo_£t_timeout
(
evdns_ba£
 *evdns_base,

4018 
evdns_gСaddrЪfo_їque°
 *
d©a
)

4020  
	`evТt_add
(&
d©a
->
timeout
, &
evdns_ba£
->
globЃ_gСaddrЪfo_Ѓlow_skew
);

4021 
	}
}

4024 
	$evdns_gСaddrЪfo_gўїsёve
(
їsu…
, 
ty≥
, 
couЅ
,

4025 
Йl
, *
addїs£s
, *
ђg
)

4027 
i
;

4028 
gСaddrЪfo_subїque°
 *
їq
 = 
ђg
;

4029 
gСaddrЪfo_subїque°
 *
ўhФ_їq
;

4030 
evdns_gСaddrЪfo_їque°
 *
d©a
;

4032 
evutЮ_addrЪfo
 *
їs
;

4034 
sockaddr_Ъ
 
sЪ
;

4035 
sockaddr_Ъ6
 
sЪ6
;

4036 
sockaddr
 *
І
;

4037 
sockЋn
, 
addЊТ
;

4038 *
addљ
;

4039 
Фr
;

4041 iа(
їsu…
 =р
DNS_ERR_CANCEL
)

4044 
	`EVUTIL_ASSERT
(
їq
->
ty≥
 =р
DNS_IPv4_A
 ||Дeq->ty≥ =р
DNS_IPv6_AAAA
);

4045 iа(
їq
->
ty≥
 =р
DNS_IPv4_A
) {

4046 
d©a
 = 
	`EVUTIL_UPCAST
(
їq
, 
evdns_gСaddrЪfo_їque°
, 
Эv4_їque°
);

4047 
ўhФ_їq
 = &
d©a
->
Эv6_їque°
;

4048 iа(
їsu…
 !р
DNS_ERR_NOTIMPL
 &&Дesu… !р
DNS_ERR_REFUSED
 &&

4049 
їsu…
 !р
DNS_ERR_SERVERFAILED
) {

4050 
	`EVDNS_LOCK
(
d©a
->
evdns_ba£
);

4051 ++
d©a
->
evdns_ba£
->
gСaddrЪfo_Эv4_™swФed
;

4052 
	`EVDNS_UNLOCK
(
d©a
->
evdns_ba£
);

4055 
d©a
 = 
	`EVUTIL_UPCAST
(
їq
, 
evdns_gСaddrЪfo_їque°
, 
Эv6_їque°
);

4056 
ўhФ_їq
 = &
d©a
->
Эv4_їque°
;

4057 iа(
їsu…
 !р
DNS_ERR_NOTIMPL
 &&Дesu… !р
DNS_ERR_REFUSED
 &&

4058 
їsu…
 !р
DNS_ERR_SERVERFAILED
) {

4059 
	`EVDNS_LOCK
(
d©a
->
evdns_ba£
);

4060 ++
d©a
->
evdns_ba£
->
gСaddrЪfo_Эv6_™swФed
;

4061 
	`EVDNS_UNLOCK
(
d©a
->
evdns_ba£
);

4065 
їq
->
r
 = 
NULL
;

4067 iа(
їsu…
 =р
DNS_ERR_NONE
) {

4068 iа(
couЅ
 == 0)

4069 
Фr
 = 
EVUTIL_EAI_NODATA
;

4071 
Фr
 = 0;

4073 
Фr
 = 
	`evdns_Фr_to_gСaddrЪfo_Фr
(
їsu…
);

4076 iа(
Фr
) {

4078 iа(
ўhФ_їq
->
r
) {

4082 
	`evdns_gСaddrЪfo_£t_timeout
(
d©a
->
evdns_ba£
, data);

4083 
d©a
->
≥ndЪg_Фr№
 = 
Фr
;

4087 iа(
d©a
->
≥ndЪg_їsu…
) {

4089 
	`add_ъame_to_їґy
(
d©a
, d©a->
≥ndЪg_їsu…
);

4090 
d©a
->
	`u£r_cb
(0, d©a->
≥ndЪg_їsu…
, d©a->
u£r_d©a
);

4091 
d©a
->
≥ndЪg_їsu…
 = 
NULL
;

4093 iа(
d©a
->
≥ndЪg_Фr№
)

4094 
Фr
 = 
	`gСaddrЪfo_mФge_Фr
(err,

4095 
d©a
->
≥ndЪg_Фr№
);

4096 
d©a
->
	`u£r_cb
(
Фr
, 
NULL
, d©a->
u£r_d©a
);

4098 
	`дУ_gСaddrЪfo_їque°
(
d©a
);

4104 
	`EVUTIL_ASSERT
(
ty≥
 =р
DNS_IPv4_A
 ||Бy≥ =р
DNS_IPv6_AAAA
);

4106 iа(
ty≥
 =р
DNS_IPv4_A
) {

4107 
	`mem£t
(&
sЪ
, 0, (sin));

4108 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

4109 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
d©a
->
p№t
);

4111 
І
 = (
sockaddr
 *)&
sЪ
;

4112 
sockЋn
 = (
sЪ
);

4113 
addЊТ
 = 4;

4114 
addљ
 = &
sЪ
.
sЪ_addr
.
s_addr
;

4116 
	`mem£t
(&
sЪ6
, 0, (sin6));

4117 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

4118 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
d©a
->
p№t
);

4120 
І
 = (
sockaddr
 *)&
sЪ6
;

4121 
sockЋn
 = (
sЪ6
);

4122 
addЊТ
 = 16;

4123 
addљ
 = &
sЪ6
.
sЪ6_addr
.
s6_addr
;

4126 
їs
 = 
NULL
;

4127 
i
=0; i < 
couЅ
; ++i) {

4128 
evutЮ_addrЪfo
 *
ai
;

4129 
	`memэy
(
addљ
, ((*)
addїs£s
)+
i
*
addЊТ
,Зddrlen);

4130 
ai
 = 
	`evutЮ_√w_addrЪfo
(
І
, 
sockЋn
, &
d©a
->
hЪts
);

4131 iа(!
ai
) {

4132 iа(
ўhФ_їq
->
r
) {

4133 
	`evdns_€nыl_їque°
(
NULL
, 
ўhФ_їq
->
r
);

4134 
ўhФ_їq
->
r
 = 
NULL
;

4136 
d©a
->
	`u£r_cb
(
EVUTIL_EAI_MEMORY
, 
NULL
, d©a->
u£r_d©a
);

4137 
	`evutЮ_дУaddrЪfo
(
їs
);

4139 
	`дУ_gСaddrЪfo_їque°
(
d©a
);

4142 
їs
 = 
	`evutЮ_addrЪfo_≠≥nd
‘es, 
ai
);

4145 iа(
ўhФ_їq
->
r
) {

4148 
	`evdns_gСaddrЪfo_£t_timeout
(
d©a
->
evdns_ba£
, data);

4149 
d©a
->
≥ndЪg_їsu…
 = 
їs
;

4154 iа(
d©a
->
≥ndЪg_їsu…
) {

4155 iа(
їq
->
ty≥
 =р
DNS_IPv4_A
)

4156 
їs
 = 
	`evutЮ_addrЪfo_≠≥nd
(res,

4157 
d©a
->
≥ndЪg_їsu…
);

4159 
їs
 = 
	`evutЮ_addrЪfo_≠≥nd
(

4160 
d©a
->
≥ndЪg_їsu…
, 
їs
);

4161 
d©a
->
≥ndЪg_їsu…
 = 
NULL
;

4165 
	`add_ъame_to_їґy
(
d©a
, 
їs
);

4166 
d©a
->
	`u£r_cb
(0, 
їs
, d©a->
u£r_d©a
);

4169 
	`дУ_gСaddrЪfo_їque°
(
d©a
);

4171 
	}
}

4173 
ho°s_ТМy
 *

4174 
	$fЪd_ho°s_ТМy
(
evdns_ba£
 *
ba£
, cЏ° *
ho°«me
,

4175 
ho°s_ТМy
 *
fЪd_aбФ
)

4177 
ho°s_ТМy
 *
e
;

4179 iа(
fЪd_aбФ
)

4180 
e
 = 
	`TAILQ_NEXT
(
fЪd_aбФ
, 
√xt
);

4182 
e
 = 
	`TAILQ_FIRST
(&
ba£
->
ho°sdb
);

4184 ; 
e
;Г = 
	`TAILQ_NEXT
”, 
√xt
)) {

4185 iа(!
	`evutЮ_ascii_°r€£cmp
(
e
->
ho°«me
, hostname))

4186  
e
;

4188  
NULL
;

4189 
	}
}

4192 
	$evdns_gСaddrЪfo_дomho°s
(
evdns_ba£
 *
ba£
,

4193 cЏ° *
nodТame
, 
evutЮ_addrЪfo
 *
hЪts
, 
ev_uЪt16_t
 
p№t
,

4194 
evutЮ_addrЪfo
 **
їs
)

4196 
n_found
 = 0;

4197 
ho°s_ТМy
 *
e
;

4198 
evutЮ_addrЪfo
 *
ai
=
NULL
;

4199 
f
 = 
hЪts
->
ai_зmЮy
;

4201 
	`EVDNS_LOCK
(
ba£
);

4202 
e
 = 
	`fЪd_ho°s_ТМy
(
ba£
, 
nodТame
, 
NULL
);Г;

4203 
e
 = 
	`fЪd_ho°s_ТМy
(
ba£
, 
nodТame
,Г)) {

4204 
evutЮ_addrЪfo
 *
ai_√w
;

4205 ++
n_found
;

4206 iа((
e
->
addr
.
І
.
І_зmЮy
 =р
AF_INET
 && 
f
 =р
PF_INET6
) ||

4207 (
e
->
addr
.
І
.
І_зmЮy
 =р
AF_INET6
 && 
f
 =р
PF_INET
))

4209 
ai_√w
 = 
	`evutЮ_√w_addrЪfo
(&
e
->
addr
.
І
,Г->
addЊТ
, 
hЪts
);

4210 iа(!
ai_√w
) {

4211 
n_found
 = 0;

4212 
out
;

4214 
	`sockaddr_£Н№t
(
ai_√w
->
ai_addr
, 
p№t
);

4215 
ai
 = 
	`evutЮ_addrЪfo_≠≥nd
„i, 
ai_√w
);

4217 
	`EVDNS_UNLOCK
(
ba£
);

4218 
out
:

4219 iа(
n_found
) {

4222 *
їs
 = 
ai
;

4225 iа(
ai
)

4226 
	`evutЮ_дУaddrЪfo
(
ai
);

4229 
	}
}

4231 
evdns_gСaddrЪfo_їque°
 *

4232 
	$evdns_gСaddrЪfo
(
evdns_ba£
 *
dns_ba£
,

4233 cЏ° *
nodТame
, cЏ° *
£rv«me
,

4234 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
,

4235 
evdns_gСaddrЪfo_cb
 
cb
, *
ђg
)

4237 
evdns_gСaddrЪfo_їque°
 *
d©a
;

4238 
evutЮ_addrЪfo
 
hЪts
;

4239 
evutЮ_addrЪfo
 *
їs
 = 
NULL
;

4240 
Фr
;

4241 
p№t
 = 0;

4242 
w™t_ъame
 = 0;

4244 iа(!
dns_ba£
) {

4245 
dns_ba£
 = 
cuЉТt_ba£
;

4246 iа(!
dns_ba£
) {

4247 
	`log
(
EVDNS_LOG_WARN
,

4250 
	`cb
(
EVUTIL_EAI_FAIL
, 
NULL
, 
ђg
);

4251  
NULL
;

4256 iа((
hЪts_Ъ
 && (hЪts_Ъ->
ai_жags
 & 
EVUTIL_AI_NUMERICHOST
))) {

4257 
їs
 = 
NULL
;

4258 
Фr
 = 
	`evutЮ_gСaddrЪfo
(
nodТame
, 
£rv«me
, 
hЪts_Ъ
, &
їs
);

4259 
	`cb
(
Фr
, 
їs
, 
ђg
);

4260  
NULL
;

4263 iа(
hЪts_Ъ
) {

4264 
	`memэy
(&
hЪts
, 
hЪts_Ъ
, (hints));

4266 
	`mem£t
(&
hЪts
, 0, (hints));

4267 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

4270 
	`evutЮ_adju°_hЪts_f№_addrcЏfig
(&
hЪts
);

4277 
Фr
 = 
	`evutЮ_gСaddrЪfo_commЏ
(
nodТame
, 
£rv«me
, &
hЪts
, &
їs
, &
p№t
);

4278 iа(
Фr
 !р
EVUTIL_EAI_NEED_RESOLVE
) {

4279 
	`cb
(
Фr
, 
їs
, 
ђg
);

4280  
NULL
;

4284 iа(!
	`evdns_gСaddrЪfo_дomho°s
(
dns_ba£
, 
nodТame
, &
hЪts
, 
p№t
, &
їs
)) {

4285 
	`cb
(0, 
їs
, 
ђg
);

4286  
NULL
;

4292 
d©a
 = 
	`mm_€ќoc
(1,(
evdns_gСaddrЪfo_їque°
));

4293 iа(!
d©a
) {

4294 
	`cb
(
EVUTIL_EAI_MEMORY
, 
NULL
, 
ђg
);

4295  
NULL
;

4298 
	`memэy
(&
d©a
->
hЪts
, &hints, (data->hints));

4299 
d©a
->
p№t
 = (
ev_uЪt16_t
)port;

4300 
d©a
->
Эv4_їque°
.
ty≥
 = 
DNS_IPv4_A
;

4301 
d©a
->
Эv6_їque°
.
ty≥
 = 
DNS_IPv6_AAAA
;

4302 
d©a
->
u£r_cb
 = 
cb
;

4303 
d©a
->
u£r_d©a
 = 
ђg
;

4304 
d©a
->
evdns_ba£
 = 
dns_ba£
;

4306 
w™t_ъame
 = (
hЪts
.
ai_жags
 & 
EVUTIL_AI_CANONNAME
);

4321 iа(
hЪts
.
ai_зmЮy
 !р
PF_INET6
) {

4322 
	`log
(
EVDNS_LOG_DEBUG
, "SendingДequest for %s on ipv4Зs %p",

4323 
nodТame
, &
d©a
->
Эv4_їque°
);

4325 
d©a
->
Эv4_їque°
.
r
 = 
	`evdns_ba£_їsёve_Эv4
(
dns_ba£
,

4326 
nodТame
, 0, 
evdns_gСaddrЪfo_gўїsёve
,

4327 &
d©a
->
Эv4_їque°
);

4328 iа(
w™t_ъame
)

4329 
d©a
->
Эv4_їque°
.
r
->
put_ъame_Ъ_±r
 =

4330 &
d©a
->
ъame_їsu…
;

4332 iа(
hЪts
.
ai_зmЮy
 !р
PF_INET
) {

4333 
	`log
(
EVDNS_LOG_DEBUG
, "SendingДequest for %s on ipv6Зs %p",

4334 
nodТame
, &
d©a
->
Эv6_їque°
);

4336 
d©a
->
Эv6_їque°
.
r
 = 
	`evdns_ba£_їsёve_Эv6
(
dns_ba£
,

4337 
nodТame
, 0, 
evdns_gСaddrЪfo_gўїsёve
,

4338 &
d©a
->
Эv6_їque°
);

4339 iа(
w™t_ъame
)

4340 
d©a
->
Эv6_їque°
.
r
->
put_ъame_Ъ_±r
 =

4341 &
d©a
->
ъame_їsu…
;

4344 
	`evtimФ_assign
(&
d©a
->
timeout
, 
dns_ba£
->
evТt_ba£
,

4345 
evdns_gСaddrЪfo_timeout_cb
, 
d©a
);

4347 iа(
d©a
->
Эv4_їque°
.
r
 || d©a->
Эv6_їque°
.r) {

4348  
d©a
;

4350 
	`mm_дУ
(
d©a
);

4351 
	`cb
(
EVUTIL_EAI_FAIL
, 
NULL
, 
ђg
);

4352  
NULL
;

4354 
	}
}

4357 
	$evdns_gСaddrЪfo_€nыl
(
evdns_gСaddrЪfo_їque°
 *
d©a
)

4359 
	`evТt_dЦ
(&
d©a
->
timeout
);

4360 iа(
d©a
->
Эv4_їque°
.
r
)

4361 
	`evdns_€nыl_їque°
(
d©a
->
evdns_ba£
, d©a->
Эv4_їque°
.
r
);

4362 iа(
d©a
->
Эv6_їque°
.
r
)

4363 
	`evdns_€nыl_їque°
(
d©a
->
evdns_ba£
, d©a->
Эv6_їque°
.
r
);

4364 
d©a
->
Эv4_їque°
.
r
 = d©a->
Эv6_їque°
.Єр
NULL
;

4366 
d©a
->
	`u£r_cb
(
EVUTIL_EAI_CANCEL
, 
NULL
, d©a->
u£r_d©a
);

4368 
	`дУ_gСaddrЪfo_їque°
(
d©a
);

4369 
	}
}

	@evdns.h

27 #iвdeа
_EVDNS_H_


28 
	#_EVDNS_H_


	)

30 
	~<evТt.h
>

31 
	~<evТt2/dns.h
>

32 
	~<evТt2/dns_comЈt.h
>

33 
	~<evТt2/dns_°ruщ.h
>

	@event-config.h

10 #iвdeа
_EVENT_CONFIG_H_


11 
	#_EVENT_CONFIG_H_


	)

31 
	#_EVENT_HAVE_ARPA_INET_H
 1

	)

34 
	#_EVENT_HAVE_CLOCK_GETTIME
 1

	)

40 
	#_EVENT_HAVE_DLFCN_H
 1

	)

43 
	#_EVENT_HAVE_EPOLL
 1

	)

46 
	#_EVENT_HAVE_EPOLL_CTL
 1

	)

49 
	#_EVENT_HAVE_EVENTFD
 1

	)

55 
	#_EVENT_HAVE_FCNTL
 1

	)

58 
	#_EVENT_HAVE_FCNTL_H
 1

	)

61 
	#_EVENT_HAVE_FD_MASK
 1

	)

64 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

67 
	#_EVENT_HAVE_GETEGID
 1

	)

70 
	#_EVENT_HAVE_GETEUID
 1

	)

73 
	#_EVENT_HAVE_GETHOSTBYNAME_R
 1

	)

82 
	#_EVENT_HAVE_GETHOSTBYNAME_R_6_ARG
 1

	)

85 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

88 
	#_EVENT_HAVE_GETPROTOBYNUMBER
 1

	)

91 
	#_EVENT_HAVE_GETSERVBYNAME
 1

	)

94 
	#_EVENT_HAVE_GETTIMEOFDAY
 1

	)

97 
	#_EVENT_HAVE_INET_ATON
 1

	)

100 
	#_EVENT_HAVE_INET_NTOP
 1

	)

103 
	#_EVENT_HAVE_INET_PTON
 1

	)

106 
	#_EVENT_HAVE_INTTYPES_H
 1

	)

115 
	#_EVENT_HAVE_LIBZ
 1

	)

118 
	#_EVENT_HAVE_MEMORY_H
 1

	)

121 
	#_EVENT_HAVE_MMAP
 1

	)

124 
	#_EVENT_HAVE_NETDB_H
 1

	)

130 
	#_EVENT_HAVE_NETINET_IN_H
 1

	)

133 
	#_EVENT_HAVE_OPENSSL
 1

	)

136 
	#_EVENT_HAVE_PIPE
 1

	)

139 
	#_EVENT_HAVE_POLL
 1

	)

142 
	#_EVENT_HAVE_POLL_H
 1

	)

154 
	#_EVENT_HAVE_PTHREADS
 1

	)

157 
	#_EVENT_HAVE_PUTENV
 1

	)

160 
	#_EVENT_HAVE_SA_FAMILY_T
 1

	)

163 
	#_EVENT_HAVE_SELECT
 1

	)

166 
	#_EVENT_HAVE_SENDFILE
 1

	)

169 
	#_EVENT_HAVE_SETENV
 1

	)

172 
	#_EVENT_HAVE_SETFD
 1

	)

175 
	#_EVENT_HAVE_SIGACTION
 1

	)

178 
	#_EVENT_HAVE_SIGNAL
 1

	)

181 
	#_EVENT_HAVE_SPLICE
 1

	)

184 
	#_EVENT_HAVE_STDARG_H
 1

	)

187 
	#_EVENT_HAVE_STDDEF_H
 1

	)

190 
	#_EVENT_HAVE_STDINT_H
 1

	)

193 
	#_EVENT_HAVE_STDLIB_H
 1

	)

196 
	#_EVENT_HAVE_STRINGS_H
 1

	)

199 
	#_EVENT_HAVE_STRING_H
 1

	)

205 
	#_EVENT_HAVE_STRSEP
 1

	)

208 
	#_EVENT_HAVE_STRTOK_R
 1

	)

211 
	#_EVENT_HAVE_STRTOLL
 1

	)

214 
	#_EVENT_HAVE_STRUCT_ADDRINFO
 1

	)

217 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

220 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

223 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

226 
	#_EVENT_HAVE_STRUCT_SOCKADDR_IN6
 1

	)

238 
	#_EVENT_HAVE_SYS_EPOLL_H
 1

	)

241 
	#_EVENT_HAVE_SYS_EVENTFD_H
 1

	)

247 
	#_EVENT_HAVE_SYS_IOCTL_H
 1

	)

250 
	#_EVENT_HAVE_SYS_MMAN_H
 1

	)

253 
	#_EVENT_HAVE_SYS_PARAM_H
 1

	)

256 
	#_EVENT_HAVE_SYS_QUEUE_H
 1

	)

259 
	#_EVENT_HAVE_SYS_SELECT_H
 1

	)

262 
	#_EVENT_HAVE_SYS_SENDFILE_H
 1

	)

265 
	#_EVENT_HAVE_SYS_SOCKET_H
 1

	)

268 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

271 
	#_EVENT_HAVE_SYS_TIME_H
 1

	)

274 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

277 
	#_EVENT_HAVE_SYS_UIO_H
 1

	)

280 
	#_EVENT_HAVE_TAILQFOREACH
 1

	)

283 
	#_EVENT_HAVE_TIMERADD
 1

	)

286 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

289 
	#_EVENT_HAVE_TIMERCMP
 1

	)

292 
	#_EVENT_HAVE_TIMERISSET
 1

	)

295 
	#_EVENT_HAVE_UINT16_T
 1

	)

298 
	#_EVENT_HAVE_UINT32_T
 1

	)

301 
	#_EVENT_HAVE_UINT64_T
 1

	)

304 
	#_EVENT_HAVE_UINT8_T
 1

	)

307 
	#_EVENT_HAVE_UINTPTR_T
 1

	)

310 
	#_EVENT_HAVE_UNISTD_H
 1

	)

313 
	#_EVENT_HAVE_UNSETENV
 1

	)

316 
	#_EVENT_HAVE_VASPRINTF
 1

	)

323 
	#_EVENT_LT_OBJDIR
 ".libs/"

	)

326 
	#_EVENT_NUMERIC_VERSION
 0x02000400

	)

329 
	#_EVENT_PACKAGE
 "libevТt"

	)

332 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

335 
	#_EVENT_PACKAGE_NAME
 ""

	)

338 
	#_EVENT_PACKAGE_STRING
 ""

	)

341 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

344 
	#_EVENT_PACKAGE_URL
 ""

	)

347 
	#_EVENT_PACKAGE_VERSION
 ""

	)

354 
	#_EVENT_SIZEOF_INT
 4

	)

357 
	#_EVENT_SIZEOF_LONG
 4

	)

360 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

363 
	#_EVENT_SIZEOF_SHORT
 2

	)

366 
	#_EVENT_SIZEOF_SIZE_T
 4

	)

369 
	#_EVENT_SIZEOF_VOID_P
 4

	)

372 
	#_EVENT_STDC_HEADERS
 1

	)

375 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

378 
	#_EVENT_VERSION
 "2.0.4-Ѓpha"

	)

388 #iвdeа
_EVENT___эlu•lus


	@event-internal.h

27 #iвdeа
_EVENT_INTERNAL_H_


28 
	#_EVENT_INTERNAL_H_


	)

30 #ifdeа
__эlu•lus


34 
	~"evТt-cЏfig.h
"

35 
	~<sys/queue.h
>

36 
	~"evТt2/evТt_°ruщ.h
"

37 
	~"mЪhЧp-ЪЛЇЃ.h
"

38 
	~"evsig«l-ЪЛЇЃ.h
"

39 
	~"mm-ЪЛЇЃ.h
"

40 
	~"deгr-ЪЛЇЃ.h
"

45 
	#ev_sig«l_√xt
 
_ev
.
ev_sig«l
.
ev_sig«l_√xt


	)

47 
	#ev_io_√xt
 
_ev
.
ev_io
.
ev_io_√xt


	)

48 
	#ev_io_timeout
 
_ev
.
ev_io
.
ev_timeout


	)

51 
	#ev_n€ќs
 
_ev
.
ev_sig«l
.
ev_n€ќs


	)

52 
	#ev_≤€ќs
 
_ev
.
ev_sig«l
.
ev_≤€ќs


	)

55 
	#EV_CLOSURE_NONE
 0

	)

56 
	#EV_CLOSURE_SIGNAL
 1

	)

57 
	#EV_CLOSURE_PERSIST
 2

	)

60 
	sevТtЁ
 {

62 cЏ° *
«me
;

64 *(*
ЪЩ
)(
evТt_ba£
 *);

66 (*
add
)(
evТt_ba£
 *, 
evutЮ_sockС_t
 
fd
, 
ёd
, 
evТts
, *
fdЪfo
);

68 (*
dЦ
)(
evТt_ba£
 *, 
evutЮ_sockС_t
 
fd
, 
ёd
, 
evТts
, *
fdЪfo
);

73 (*
di•©ch
)(
evТt_ba£
 *, 
timevЃ
 *);

75 (*
dЧќoc
)(
evТt_ba£
 *);

77 
√ed_їЪЩ
;

79 
evТt_mСhod_г©uї
 
г©uїs
;

83 
size_t
 
fdЪfo_Ћn
;

86 #ifdeа
WIN32


91 
	#EVMAP_USE_HT


	)

96 #ifdeа
EVMAP_USE_HT


97 
	~"ht-ЪЛЇЃ.h
"

98 
evТt_m≠_ТМy
;

99 
HT_HEAD
(
evТt_io_m≠
, 
evТt_m≠_ТМy
);

101 
	#evТt_io_m≠
 
evТt_sig«l_m≠


	)

107 
	sevТt_sig«l_m≠
 {

108 **
ТМЫs
;

109 
√ЅrЫs
;

112 
	scommЏ_timeout_li°
 {

113 
evТt_li°
 
evТts
;

114 
timevЃ
 
duњtiЏ
;

115 
evТt
 
timeout_evТt
;

116 
evТt_ba£
 *
ba£
;

119 
evТt_ch™ge
;

121 
	sevТt_ch™gЦi°
 {

122 
evТt_ch™ge
 *
ch™ges
;

123 
n_ch™ges
;

124 
ch™ges_size
;

127 #iвdeа
_EVENT_DISABLE_DEBUG_MODE


128 
_evТt_debug_mode_Џ
;

131 
	sevТt_ba£
 {

134 cЏ° 
evТtЁ
 *
	gev£l
;

136 *
	gevba£
;

140 
evТt_ch™gЦi°
 
	gch™gЦi°
;

143 cЏ° 
evТtЁ
 *
	gevsig£l
;

144 *
	gevsigba£
;

145 
evsig_Ъfo
 
	gsig
;

147 
	gevТt_couЅ
;

148 
	gevТt_couЅ_aщive
;

150 
	gevТt_gўЛrm
;

152 
	gevТt_bїak
;

159 
evТt_li°
 *
	gaщivequeues
;

160 
	g«щivequeues
;

162 
commЏ_timeout_li°
 **
	gcommЏ_timeout_queues
;

163 
	gn_commЏ_timeouts
;

164 
	gn_commЏ_timeouts_Ѓlo€Лd
;

167 
evТt
 *
	gcuЉТt_evТt
;

169 
deгЉed_cb_queue
 
	gdeгr_queue
;

172 
evТt_io_m≠
 
	gio
;

175 
evТt_sig«l_m≠
 
	gsigm≠
;

178 
evТt_li°
 
	gevТtqueue
;

180 
timevЃ
 
	gevТt_tv
;

183 
mЪ_hЧp
 
	gtimehЧp
;

185 
timevЃ
 
	gtv_€che
;

187 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


190 
	gth_ow√r_id
;

192 *
	gth_ba£_lock
;

195 *
	gcuЉТt_evТt_lock
;

198 #ifdeа
WIN32


199 
evТt_ioэ_p№t
 *
	gioэ
;

202 
evТt_ba£_cЏfig_жag
 
	gжags
;

205 
	gth_nўify_fd
[2];

206 
evТt
 
	gth_nўify
;

207 (*
	gth_nўify_в
)(
evТt_ba£
 *
	gba£
);

210 
	sevТt_cЏfig_ТМy
 {

211 
TAILQ_ENTRY
(
evТt_cЏfig_ТМy
и(
	g√xt
);

213 cЏ° *
	gavoid_mСhod
;

218 
	sevТt_cЏfig
 {

219 
TAILQ_HEAD
(
evТt_cЏfigq
, 
evТt_cЏfig_ТМy
и
	gТМЫs
;

221 
evТt_mСhod_г©uї
 
	gїquЬe_г©uїs
;

222 
evТt_ba£_cЏfig_жag
 
	gжags
;

226 #iа
defЪed
(
_EVENT_HAVE_SYS_QUEUE_H
и&& !defЪed(
_EVENT_HAVE_TAILQFOREACH
)

227 
	#TAILQ_FIRST
(
hЧd
и((hЧd)->
tqh_fЬ°
)

	)

228 
	#TAILQ_END
(
hЧd
и
NULL


	)

229 
	#TAILQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
tqe_√xt
)

	)

230 
	#TAILQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

231 (
vђ
ир
	`TAILQ_FIRST
(
hЧd
); \

232 (
vђ
и!р
	`TAILQ_END
(
hЧd
); \

233 (
vђ
ир
	`TAILQ_NEXT
(vђ, 
fЫld
))

	)

234 
	#TAILQ_INSERT_BEFORE
(
li°Цm
, 
Цm
, 
fЫld
) do { \

235 (
Цm
)->
fЫld
.
tqe_іev
 = (
li°Цm
)->field.tqe_prev; \

236 (
Цm
)->
fЫld
.
tqe_√xt
 = (
li°Цm
); \

237 *(
li°Цm
)->
fЫld
.
tqe_іev
 = (
Цm
); \

238 (
li°Цm
)->
fЫld
.
tqe_іev
 = &(
Цm
)->fЫld.
tqe_√xt
; \

239 } 0)

	)

242 
	#N_ACTIVE_CALLBACKS
(
ba£
) \

243 ((
ba£
)->
evТt_couЅ_aщive
 + (ba£)->
deгr_queue
.
aщive_couЅ
)

	)

245 
_evsig_£t_h™dЋr
(
evТt_ba£
 *
ba£
, 
evsig«l
,

246 (*
в
)());

247 
_evsig_ї°№e_h™dЋr
(
evТt_ba£
 *
ba£
, 
evsig«l
);

249 
evТt_aщive_nёock
(
evТt
 *
ev
, 
їs
, 
couЅ
);

251 #ifdeа
__эlu•lus


	@event.c

27 
	~"evТt-cЏfig.h
"

29 #ifdeа
WIN32


30 
	~<wЪsock2.h
>

31 
	#WIN32_LEAN_AND_MEAN


	)

32 
	~<wЪdows.h
>

33 #undeа
WIN32_LEAN_AND_MEAN


35 
	~<sys/ty≥s.h
>

36 #iа!
defЪed
(
WIN32
и&& defЪed(
_EVENT_HAVE_SYS_TIME_H
)

37 
	~<sys/time.h
>

39 
	~<sys/queue.h
>

40 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


41 
	~<sys/sockС.h
>

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 #ifdeа
_EVENT_HAVE_UNISTD_H


46 
	~<uni°d.h
>

48 #ifdeа
_EVENT_HAVE_SYS_EVENTFD_H


49 
	~<sys/evТtfd.h
>

51 
	~<щy≥.h
>

52 
	~<ФЇo.h
>

53 
	~<sig«l.h
>

54 
	~<°rЪg.h
>

55 
	~<time.h
>

57 
	~"evТt2/evТt.h
"

58 
	~"evТt2/evТt_°ruщ.h
"

59 
	~"evТt2/evТt_comЈt.h
"

60 
	~"evТt-ЪЛЇЃ.h
"

61 
	~"deгr-ЪЛЇЃ.h
"

62 
	~"evthїad-ЪЛЇЃ.h
"

63 
	~"evТt2/thїad.h
"

64 
	~"evТt2/utЮ.h
"

65 
	~"log-ЪЛЇЃ.h
"

66 
	~"evm≠-ЪЛЇЃ.h
"

67 
	~"ioэ-ЪЛЇЃ.h
"

68 
	~"ch™gЦi°-ЪЛЇЃ.h
"

69 
	~"ht-ЪЛЇЃ.h
"

71 #ifdeа
_EVENT_HAVE_EVENT_PORTS


72 cЏ° 
evТtЁ
 
evp№tЁs
;

74 #ifdeа
_EVENT_HAVE_SELECT


75 cЏ° 
evТtЁ
 
£ЋщЁs
;

77 #ifdeа
_EVENT_HAVE_POLL


78 cЏ° 
evТtЁ
 
pёlЁs
;

80 #ifdeа
_EVENT_HAVE_EPOLL


81 cЏ° 
evТtЁ
 
ХёlЁs
;

83 #ifdeа
_EVENT_HAVE_WORKING_KQUEUE


84 cЏ° 
evТtЁ
 
kqЁs
;

86 #ifdeа
_EVENT_HAVE_DEVPOLL


87 cЏ° 
evТtЁ
 
devpёlЁs
;

89 #ifdeа
WIN32


90 cЏ° 
evТtЁ
 
wЪ32Ёs
;

94 cЏ° 
evТtЁ
 *
	gevТtЁs
[] = {

95 #ifdeа
_EVENT_HAVE_EVENT_PORTS


96 &
evp№tЁs
,

98 #ifdeа
_EVENT_HAVE_WORKING_KQUEUE


99 &
kqЁs
,

101 #ifdeа
_EVENT_HAVE_EPOLL


102 &
ХёlЁs
,

104 #ifdeа
_EVENT_HAVE_DEVPOLL


105 &
devpёlЁs
,

107 #ifdeа
_EVENT_HAVE_POLL


108 &
pёlЁs
,

110 #ifdeа
_EVENT_HAVE_SELECT


111 &
£ЋщЁs
,

113 #ifdeа
WIN32


114 &
wЪ32Ёs
,

116 
NULL


120 
evТt_ba£
 *
	gcuЉТt_ba£
 = 
NULL
;

121 
evТt_ba£
 *
evsig_ba£
;

122 
	gu£_mЏўЏic
;

125 
ЪlЪe
 
evТt_add_ЪЛЇЃ
(
evТt
 *
ev
,

126 cЏ° 
timevЃ
 *
tv
, 
tv_is_absёuЛ
);

127 
ЪlЪe
 
evТt_dЦ_ЪЛЇЃ
(
evТt
 *
ev
);

129 
evТt_queue_Ъ£є
(
evТt_ba£
 *, 
evТt
 *, );

130 
evТt_queue_їmove
(
evТt_ba£
 *, 
evТt
 *, );

131 
evТt_havУvТts
(
evТt_ba£
 *);

133 
evТt_іoыss_aщive
(
evТt_ba£
 *);

135 
timeout_√xt
(
evТt_ba£
 *, 
timevЃ
 **);

136 
timeout_іoыss
(
evТt_ba£
 *);

137 
timeout_c№їщ
(
evТt_ba£
 *, 
timevЃ
 *);

139 
ЪlЪe
 
evТt_sig«l_юosuї
(
evТt_ba£
 *, 
evТt
 *
ev
);

140 
ЪlЪe
 
evТt_≥rsi°_юosuї
(
evТt_ba£
 *, 
evТt
 *
ev
);

142 
evthїad_nўify_ba£
(
evТt_ba£
 *
ba£
);

144 #iвdeа
_EVENT_DISABLE_DEBUG_MODE


151 
	sevТt_debug_ТМy
 {

152 
HT_ENTRY
(
evТt_debug_ТМy
и
	mnode
;

153 cЏ° 
evТt
 *
	m±r
;

154 
	madded
 : 1;

157 
ЪlЪe
 

158 
	$hash_debug_ТМy
(cЏ° 
evТt_debug_ТМy
 *
e
)

164 
u
 = (и((
ev_uЪНМ_t
и
e
->
±r
);

168  (
u
 >> 6);

169 
	}
}

171 
ЪlЪe
 

172 
	$eq_debug_ТМy
(cЏ° 
evТt_debug_ТМy
 *
a
,

173 cЏ° 
evТt_debug_ТМy
 *
b
)

175  
a
->
±r
 =р
b
->ptr;

176 
	}
}

178 
	g_evТt_debug_mode_Џ
 = 0;

179 *
	g_evТt_debug_m≠_lock
 = 
NULL
;

180 
	$HT_HEAD
(
evТt_debug_m≠
, 
evТt_debug_ТМy
и
globЃ_debug_m≠
 =

181 
	`HT_INITIALIZER
();

183 
	`HT_PROTOTYPE
(
evТt_debug_m≠
, 
evТt_debug_ТМy
, 
node
, 
hash_debug_ТМy
,

184 
eq_debug_ТМy
);

185 
	`HT_GENERATE
(
evТt_debug_m≠
, 
evТt_debug_ТМy
, 
node
, 
hash_debug_ТМy
,

186 
eq_debug_ТМy
, 0.5, 
mm_mЃloc
, 
mm_їЃloc
, 
mm_дУ
);

188 
	#_evТt_debug_nўe_£tup
(
ev
) do { \

189 iа(
_evТt_debug_mode_Џ
) { \

190 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

191 
fЪd
.
±r
 = (
ev
); \

192 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

193 
dТt
 = 
	`HT_FIND
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

194 iа(
dТt
) { \

195 
dТt
->
added
 = 0; \

197 
dТt
 = 
	`mm_mЃloc
((*dent)); \

198 iа(!
dТt
) \

199 
	`evТt_Фr
(1, \

201 
dТt
->
±r
 = (
ev
); \

202 
dТt
->
added
 = 0; \

203 
	`HT_INSERT
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, 
dТt
); \

205 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

207 
	}
} 0)

	)

208 
	#_evТt_debug_nўe_Лђdown
(
ev
) do { \

209 iа(
_evТt_debug_mode_Џ
) { \

210 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

211 
fЪd
.
±r
 = (
ev
); \

212 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

213 
dТt
 = 
	`HT_REMOVE
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

214 iа(
dТt
) \

215 
	`mm_дУ
(
dТt
); \

216 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

218 } 0)

	)

219 
	#_evТt_debug_nўe_add
(
ev
) do { \

220 iа(
_evТt_debug_mode_Џ
) { \

221 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

222 
fЪd
.
±r
 = (
ev
); \

223 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

224 
dТt
 = 
	`HT_FIND
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

225 iа(
dТt
) { \

226 
dТt
->
added
 = 1; \

228 
	`evТt_Фrx
(
_EVENT_ERR_ABORT
, \

230 
__func__
, (
ev
)); \

232 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

234 } 0)

	)

235 
	#_evТt_debug_nўe_dЦ
(
ev
) do { \

236 iа(
_evТt_debug_mode_Џ
) { \

237 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

238 
fЪd
.
±r
 = (
ev
); \

239 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

240 
dТt
 = 
	`HT_FIND
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

241 iа(
dТt
) { \

242 
dТt
->
added
 = 0; \

244 
	`evТt_Фrx
(
_EVENT_ERR_ABORT
, \

246 
__func__
, (
ev
)); \

248 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

250 } 0)

	)

251 
	#_evТt_debug_as£є_is_£tup
(
ev
) do { \

252 iа(
_evТt_debug_mode_Џ
) { \

253 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

254 
fЪd
.
±r
 = (
ev
); \

255 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

256 
dТt
 = 
	`HT_FIND
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

257 iа(!
dТt
) { \

258 
	`evТt_Фrx
(
_EVENT_ERR_ABORT
, \

260 
__func__
, (
ev
)); \

262 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

264 } 0)

	)

266 
	#_evТt_debug_as£є_nў_added
(
ev
) do { \

267 iа(
_evТt_debug_mode_Џ
) { \

268 
evТt_debug_ТМy
 *
dТt
,
fЪd
; \

269 
fЪd
.
±r
 = (
ev
); \

270 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0); \

271 
dТt
 = 
	`HT_FIND
(
evТt_debug_m≠
, &
globЃ_debug_m≠
, &
fЪd
); \

272 iа(
dТt
 && dТt->
added
) { \

273 
	`evТt_Фrx
(
_EVENT_ERR_ABORT
, \

275 
__func__
, (
ev
)); \

277 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
, 0); \

279 } 0)

	)

282 
	#_evТt_debug_nўe_£tup
(
ev
) \

283 (()0)

	)

284 
	#_evТt_debug_nўe_Лђdown
(
ev
) \

285 (()0)

	)

286 
	#_evТt_debug_nўe_add
(
ev
) \

287 (()0)

	)

288 
	#_evТt_debug_nўe_dЦ
(
ev
) \

289 (()0)

	)

290 
	#_evТt_debug_as£є_is_£tup
(
ev
) \

291 (()0)

	)

292 
	#_evТt_debug_as£є_nў_added
(
ev
) \

293 (()0)

	)

296 
	#EVENT_BASE_ASSERT_LOCKED
(
ba£
) \

297 
	`EVLOCK_ASSERT_LOCKED
((
ba£
)->
th_ba£_lock
)

	)

300 
	$dСeщ_mЏўЏic
()

302 #iа
	`defЪed
(
_EVENT_HAVE_CLOCK_GETTIME
и&& defЪed(
CLOCK_MONOTONIC
)

303 
time•ec
 
ts
;

304 
u£_mЏўЏic_ЪЩЯlized
 = 0;

306 iа(
u£_mЏўЏic_ЪЩЯlized
)

309 iа(
	`юock_gСtime
(
CLOCK_MONOTONIC
, &
ts
) == 0)

310 
u£_mЏўЏic
 = 1;

312 
u£_mЏўЏic_ЪЩЯlized
 = 1;

314 
	}
}

317 
	$gСtime
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
Н
)

319 
	`EVENT_BASE_ASSERT_LOCKED
(
ba£
);

321 iа(
ba£
->
tv_€che
.
tv_£c
) {

322 *
Н
 = 
ba£
->
tv_€che
;

326 #iа
	`defЪed
(
_EVENT_HAVE_CLOCK_GETTIME
и&& defЪed(
CLOCK_MONOTONIC
)

327 iа(
u£_mЏўЏic
) {

328 
time•ec
 
ts
;

330 iа(
	`юock_gСtime
(
CLOCK_MONOTONIC
, &
ts
) == -1)

333 
Н
->
tv_£c
 = 
ts
.tv_sec;

334 
Н
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

339  (
	`evutЮ_gСtimeofday
(
Н
, 
NULL
));

340 
	}
}

343 
	$evТt_ba£_gСtimeofday_€ched
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

345 
r
;

346 iа(!
ba£
) {

347 
ba£
 = 
cuЉТt_ba£
;

348 iа(!
cuЉТt_ba£
)

349  
	`evutЮ_gСtimeofday
(
tv
, 
NULL
);

352 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

353 
r
 = 
	`gСtime
(
ba£
, 
tv
);

354 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

355  
r
;

356 
	}
}

358 
ЪlЪe
 

359 
	$юЧr_time_€che
(
evТt_ba£
 *
ba£
)

361 
ba£
->
tv_€che
.
tv_£c
 = 0;

362 
	}
}

364 
ЪlЪe
 

365 
	$upd©e_time_€che
(
evТt_ba£
 *
ba£
)

367 
ba£
->
tv_€che
.
tv_£c
 = 0;

368 iа(!(
ba£
->
жags
 & 
EVENT_BASE_FLAG_NO_CACHE_TIME
))

369 
	`gСtime
(
ba£
, &ba£->
tv_€che
);

370 
	}
}

372 
evТt_ba£
 *

373 
	$evТt_ЪЩ
()

375 
evТt_ba£
 *
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
NULL
);

377 iа(
ba£
 =р
NULL
) {

378 
	`evТt_Фrx
(1, "%s: U«bЋБЎcЏ°ruщГvТt_ba£", 
__func__
);

379  
NULL
;

382 
cuЉТt_ba£
 = 
ba£
;

384  (
ba£
);

385 
	}
}

387 
evТt_ba£
 *

388 
	$evТt_ba£_√w
()

390 
evТt_ba£
 *
ba£
 = 
NULL
;

391 
evТt_cЏfig
 *
cfg
 = 
	`evТt_cЏfig_√w
();

392 iа(
cfg
) {

393 
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

394 
	`evТt_cЏfig_дУ
(
cfg
);

396  
ba£
;

397 
	}
}

400 
	$evТt_cЏfig_is_avoided_mСhod
(cЏ° 
evТt_cЏfig
 *
cfg
,

401 cЏ° *
mСhod
)

403 
evТt_cЏfig_ТМy
 *
ТМy
;

405 
	`TAILQ_FOREACH
(
ТМy
, &
cfg
->
ТМЫs
, 
√xt
) {

406 iа(
ТМy
->
avoid_mСhod
 !р
NULL
 &&

407 
	`°rcmp
(
ТМy
->
avoid_mСhod
, 
mСhod
) == 0)

412 
	}
}

415 
	$evТt_is_mСhod_diІbЋd
(cЏ° *
«me
)

417 
ТvЬЏmТt
[64];

418 
i
;

420 
	`evutЮ_ҐіЪtf
(
ТvЬЏmТt
, ”nvЬЏmТt), "EVENT_NO%s", 
«me
);

421 
i
 = 8; 
ТvЬЏmТt
[i] != '\0'; ++i)

422 
ТvЬЏmТt
[
i
] = 
	`touµФ
(environment[i]);

423  (
	`evutЮ_gСТv
(
ТvЬЏmТt
и!р
NULL
);

424 
	}
}

427 
	$evТt_ba£_gС_г©uїs
(cЏ° 
evТt_ba£
 *
ba£
)

429  
ba£
->
ev£l
->
г©uїs
;

430 
	}
}

433 
	$evТt_deгЉed_cb_queue_ЪЩ
(
deгЉed_cb_queue
 *
cb
)

435 
	`mem£t
(
cb
, 0, (
deгЉed_cb_queue
));

436 
	`TAILQ_INIT
(&
cb
->
deгЉed_cb_li°
);

437 
	}
}

440 
	$nўify_ba£_cbq_€ќback
(
deгЉed_cb_queue
 *
cb
, *
ba£±r
)

442 
evТt_ba£
 *
ba£
 = 
ba£±r
;

443 iа(!
	`EVBASE_IN_THREAD
(
ba£
))

444 
	`evthїad_nўify_ba£
(
ba£
);

445 
	}
}

447 
deгЉed_cb_queue
 *

448 
	$evТt_ba£_gС_deгЉed_cb_queue
(
evТt_ba£
 *
ba£
)

450  
ba£
 ? &ba£->
deгr_queue
 : 
NULL
;

451 
	}
}

454 
	$evТt_ТabЋ_debug_mode
()

456 #iвdeа
_EVENT_DISABLE_DEBUG_MODE


457 iа(
_evТt_debug_mode_Џ
)

458 
	`evТt_Фrx
(1, "%†wa†€ќedБwiы!", 
__func__
);

460 
_evТt_debug_mode_Џ
 = 1;

462 
	`HT_INIT
(
evТt_debug_m≠
, &
globЃ_debug_m≠
);

464 
	`EVTHREAD_ALLOC_LOCK
(
_evТt_debug_m≠_lock
, 0);

466 
	}
}

470 
	$evТt_diІbЋ_debug_mode
()

472 
evТt_debug_ТМy
 **
Тt
, *
viщim
;

474 
	`EVLOCK_LOCK
(
_evТt_debug_m≠_lock
, 0);

475 
Тt
 = 
	`HT_START
(
evТt_debug_m≠
, &
globЃ_debug_m≠
);Гnt; ) {

476 
viщim
 = *
Тt
;

477 
Тt
 = 
	`HT_NEXT_RMV
(
evТt_debug_m≠
,&
globЃ_debug_m≠
,Гnt);

478 
	`mm_дУ
(
viщim
);

480 
	`HT_CLEAR
(
evТt_debug_m≠
, &
globЃ_debug_m≠
);

481 
	`EVLOCK_UNLOCK
(
_evТt_debug_m≠_lock
 , 0);

482 
	}
}

485 
evТt_ba£
 *

486 
	$evТt_ba£_√w_wЩh_cЏfig
(cЏ° 
evТt_cЏfig
 *
cfg
)

488 
i
;

489 
evТt_ba£
 *
ba£
;

490 
should_check_ТvЬЏmТt
;

492 #iвdeа
_EVENT_DISABLE_DEBUG_MODE


493 iа(
_evТt_debug_mode_Џ
 && !
_evТt_debug_m≠_lock
) {

494 
	`EVTHREAD_ALLOC_LOCK
(
_evТt_debug_m≠_lock
, 0);

498 iа((
ba£
 = 
	`mm_€ќoc
(1, (
evТt_ba£
))и=р
NULL
) {

499 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

500  
NULL
;

503 
	`dСeщ_mЏўЏic
();

504 
	`gСtime
(
ba£
, &ba£->
evТt_tv
);

506 
	`mЪ_hЧp_щ№
(&
ba£
->
timehЧp
);

507 
	`TAILQ_INIT
(&
ba£
->
evТtqueue
);

508 
ba£
->
sig
.
ev_sig«l_ЈЬ
[0] = -1;

509 
ba£
->
sig
.
ev_sig«l_ЈЬ
[1] = -1;

511 
	`evТt_deгЉed_cb_queue_ЪЩ
(&
ba£
->
deгr_queue
);

512 
ba£
->
deгr_queue
.
nўify_в
 = 
nўify_ba£_cbq_€ќback
;

513 
ba£
->
deгr_queue
.
nўify_ђg
 = base;

514 iа(
cfg
)

515 
ba£
->
жags
 = 
cfg
->flags;

517 
	`evm≠_io_ЪЩm≠
(&
ba£
->
io
);

518 
	`evm≠_sig«l_ЪЩm≠
(&
ba£
->
sigm≠
);

519 
	`evТt_ch™gЦi°_ЪЩ
(&
ba£
->
ch™gЦi°
);

521 
ba£
->
evba£
 = 
NULL
;

523 
should_check_ТvЬЏmТt
 =

524 !(
cfg
 && (cfg->
жags
 & 
EVENT_BASE_FLAG_IGNORE_ENV
));

526 
i
 = 0; 
evТtЁs
[i] && !
ba£
->
evba£
; i++) {

527 iа(
cfg
 !р
NULL
) {

529 iа(
	`evТt_cЏfig_is_avoided_mСhod
(
cfg
,

530 
evТtЁs
[
i
]->
«me
))

532 iа((
evТtЁs
[
i
]->
г©uїs
 & 
cfg
->
їquЬe_г©uїs
)

533 !р
cfg
->
їquЬe_г©uїs
)

538 iа(
should_check_ТvЬЏmТt
 &&

539 
	`evТt_is_mСhod_diІbЋd
(
evТtЁs
[
i
]->
«me
))

542 
ba£
->
ev£l
 = 
evТtЁs
[
i
];

544 
ba£
->
evba£
 = ba£->
ev£l
->
	`ЪЩ
(base);

547 iа(
ba£
->
evba£
 =р
NULL
) {

548 
	`evТt_wђnx
("%s:ВoГvent mechanismЗvailable",

549 
__func__
);

550 
	`evТt_ba£_дУ
(
ba£
);

551  
NULL
;

554 iа(
	`evutЮ_gСТv
("EVENT_SHOW_METHOD"))

555 
	`evТt_msgx
("libevТИusЪg: %s", 
ba£
->
ev£l
->
«me
);

558 iа(
	`evТt_ba£_іi№Щy_ЪЩ
(
ba£
, 1) < 0) {

559 
	`evТt_ba£_дУ
(
ba£
);

560  
NULL
;

564 
ba£
->
th_nўify_fd
[0] = -1;

565 
ba£
->
th_nўify_fd
[1] = -1;

567 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


568 iа(!
cfg
 || !(cfg->
жags
 & 
EVENT_BASE_FLAG_NOLOCK
)) {

569 
r
;

570 
	`EVTHREAD_ALLOC_LOCK
(
ba£
->
th_ba£_lock
,

571 
EVTHREAD_LOCKTYPE_RECURSIVE
);

572 
ba£
->
deгr_queue
.
lock
 = ba£->
th_ba£_lock
;

573 
	`EVTHREAD_ALLOC_LOCK
(
ba£
->
cuЉТt_evТt_lock
,

574 
EVTHREAD_LOCKTYPE_RECURSIVE
);

575 
r
 = 
	`evthїad_make_ba£_nўifЯbЋ
(
ba£
);

576 iа(
r
<0) {

577 
	`evТt_ba£_дУ
(
ba£
);

578  
NULL
;

583 #ifdeа
WIN32


584 iа(
cfg
 && (cfg->
жags
 & 
EVENT_BASE_FLAG_STARTUP_IOCP
))

585 
	`evТt_ba£_°ђt_ioэ
(
ba£
);

588  (
ba£
);

589 
	}
}

592 
	$evТt_ba£_°ђt_ioэ
(
evТt_ba£
 *
ba£
)

594 #ifdeа
WIN32


595 iа(
ba£
->
ioэ
)

597 
ba£
->
ioэ
 = 
	`evТt_ioэ_p№t_ѕunch
();

598 iа(!
ba£
->
ioэ
) {

599 
	`evТt_wђnx
("%s: Couldn'Иѕunch IOCP", 
__func__
);

606 
	}
}

609 
	$evТt_ba£_дУ
(
evТt_ba£
 *
ba£
)

611 
i
, 
n_dЦСed
=0;

612 
evТt
 *
ev
;

616 iа(
ba£
 =р
NULL
 && 
cuЉТt_ba£
)

617 
ba£
 = 
cuЉТt_ba£
;

618 iа(
ba£
 =р
cuЉТt_ba£
)

619 
cuЉТt_ba£
 = 
NULL
;

622 
	`EVUTIL_ASSERT
(
ba£
);

625 iа(
ba£
->
th_nўify_fd
[0] != -1) {

626 
	`evТt_dЦ
(&
ba£
->
th_nўify
);

627 
	`EVUTIL_CLOSESOCKET
(
ba£
->
th_nўify_fd
[0]);

628 
	`EVUTIL_CLOSESOCKET
(
ba£
->
th_nўify_fd
[1]);

629 
ba£
->
th_nўify_fd
[0] = -1;

630 
ba£
->
th_nўify_fd
[1] = -1;

631 
	`evТt_debug_u«ssign
(&
ba£
->
th_nўify
);

635 
ev
 = 
	`TAILQ_FIRST
(&
ba£
->
evТtqueue
);Гv; ) {

636 
evТt
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_√xt
);

637 iа(!(
ev
->
ev_жags
 & 
EVLIST_INTERNAL
)) {

638 
	`evТt_dЦ
(
ev
);

639 ++
n_dЦСed
;

641 
ev
 = 
√xt
;

643 (
ev
 = 
	`mЪ_hЧp_tЁ
(&
ba£
->
timehЧp
)и!р
NULL
) {

644 
	`evТt_dЦ
(
ev
);

645 ++
n_dЦСed
;

647 
i
 = 0; i < 
ba£
->
n_commЏ_timeouts
; ++i) {

648 
commЏ_timeout_li°
 *
щl
 =

649 
ba£
->
commЏ_timeout_queues
[
i
];

650 
	`evТt_dЦ
(&
щl
->
timeout_evТt
);

651 
	`evТt_debug_u«ssign
(&
щl
->
timeout_evТt
);

652 
ev
 = 
	`TAILQ_FIRST
(&
щl
->
evТts
);Гv; ) {

653 
evТt
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
,

654 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
);

655 iа(!(
ev
->
ev_жags
 & 
EVLIST_INTERNAL
)) {

656 
	`evТt_dЦ
(
ev
);

657 ++
n_dЦСed
;

659 
ev
 = 
√xt
;

661 
	`mm_дУ
(
щl
);

663 iа(
ba£
->
commЏ_timeout_queues
)

664 
	`mm_дУ
(
ba£
->
commЏ_timeout_queues
);

666 
i
 = 0; i < 
ba£
->
«щivequeues
; ++i) {

667 
ev
 = 
	`TAILQ_FIRST
(&
ba£
->
aщivequeues
[
i
]);Гv; ) {

668 
evТt
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_aщive_√xt
);

669 iа(!(
ev
->
ev_жags
 & 
EVLIST_INTERNAL
)) {

670 
	`evТt_dЦ
(
ev
);

671 ++
n_dЦСed
;

673 
ev
 = 
√xt
;

677 iа(
n_dЦСed
)

678 
	`evТt_debug
(("%s: %dГvents were still set in base",

679 
__func__
, 
n_dЦСed
));

681 iа(
ba£
->
ev£l
 !р
NULL
 && ba£->ev£l->
dЧќoc
 != NULL)

682 
ba£
->
ev£l
->
	`dЧќoc
(base);

684 
i
 = 0; i < 
ba£
->
«щivequeues
; ++i)

685 
	`EVUTIL_ASSERT
(
	`TAILQ_EMPTY
(&
ba£
->
aщivequeues
[
i
]));

687 
	`EVUTIL_ASSERT
(
	`mЪ_hЧp_em±y
(&
ba£
->
timehЧp
));

688 
	`mЪ_hЧp_dt№
(&
ba£
->
timehЧp
);

690 
	`mm_дУ
(
ba£
->
aщivequeues
);

692 
	`EVUTIL_ASSERT
(
	`TAILQ_EMPTY
(&
ba£
->
evТtqueue
));

694 
	`evm≠_io_юЧr
(&
ba£
->
io
);

695 
	`evm≠_sig«l_юЧr
(&
ba£
->
sigm≠
);

696 
	`evТt_ch™gЦi°_дУmem
(&
ba£
->
ch™gЦi°
);

698 
	`EVTHREAD_FREE_LOCK
(
ba£
->
th_ba£_lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

699 
	`EVTHREAD_FREE_LOCK
(
ba£
->
cuЉТt_evТt_lock
,

700 
EVTHREAD_LOCKTYPE_RECURSIVE
);

702 
	`mm_дУ
(
ba£
);

703 
	}
}

707 
	$evТt_їЪЩ
(
evТt_ba£
 *
ba£
)

709 cЏ° 
evТtЁ
 *
ev£l
;

710 
їs
 = 0;

711 
evТt
 *
ev
;

713 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

715 
ev£l
 = 
ba£
->evsel;

718 iа(!
ev£l
->
√ed_їЪЩ
)

719 
dЏe
;

722 iа(
ba£
->
sig
.
ev_sig«l_added
) {

725 
	`evТt_queue_їmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

726 
EVLIST_INSERTED
);

727 iа(
ba£
->
sig
.
ev_sig«l
.
ev_жags
 & 
EVLIST_ACTIVE
)

728 
	`evТt_queue_їmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

729 
EVLIST_ACTIVE
);

730 
ba£
->
sig
.
ev_sig«l_added
 = 0;

733 iа(
ba£
->
ev£l
->
dЧќoc
 !р
NULL
)

734 
ba£
->
ev£l
->
	`dЧќoc
(base);

735 
ba£
->
evba£
 = 
ev£l
->
	`ЪЩ
(base);

736 iа(
ba£
->
evba£
 =р
NULL
) {

737 
	`evТt_Фrx
(1, "%s: couldВotДeinitializeГvent mechanism",

738 
__func__
);

739 
їs
 = -1;

740 
dЏe
;

743 
	`evТt_ch™gЦi°_дУmem
(&
ba£
->
ch™gЦi°
);

744 
	`evm≠_io_юЧr
(&
ba£
->
io
);

745 
	`evm≠_sig«l_юЧr
(&
ba£
->
sigm≠
);

747 
	`TAILQ_FOREACH
(
ev
, &
ba£
->
evТtqueue
, 
ev_√xt
) {

748 iа(
ev
->
ev_evТts
 & (
EV_READ
|
EV_WRITE
)) {

749 iа(
	`evm≠_io_add
(
ba£
, 
ev
->
ev_fd
,Гv) == -1)

750 
їs
 = -1;

751 } iа(
ev
->
ev_evТts
 & 
EV_SIGNAL
) {

752 iа(
	`evm≠_sig«l_add
(
ba£
, 
ev
->
ev_fd
,Гv) == -1)

753 
їs
 = -1;

757 
dЏe
:

758 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

759  (
їs
);

760 
	}
}

763 
	$evТt_gС_suµ№Лd_mСhods
()

765 cЏ° **
mСhods
 = 
NULL
;

766 cЏ° 
evТtЁ
 **
mСhod
;

767 cЏ° **
tmp
;

768 
i
 = 0, 
k
;

771 
mСhod
 = &
evТtЁs
[0]; *mСhod !р
NULL
; ++method) {

772 ++
i
;

776 
tmp
 = 
	`mm_€ќoc
((
i
 + 1), (*));

777 iа(
tmp
 =р
NULL
)

778  (
NULL
);

781 
k
 = 0, 
i
 = 0; 
evТtЁs
[k] !р
NULL
; ++k) {

782 
tmp
[
i
++] = 
evТtЁs
[
k
]->
«me
;

784 
tmp
[
i
] = 
NULL
;

786 iа(
mСhods
 !р
NULL
)

787 
	`mm_дУ
((**)
mСhods
);

789 
mСhods
 = 
tmp
;

791  (
mСhods
);

792 
	}
}

794 
evТt_cЏfig
 *

795 
	$evТt_cЏfig_√w
()

797 
evТt_cЏfig
 *
cfg
 = 
	`mm_€ќoc
(1, (*cfg));

799 iа(
cfg
 =р
NULL
)

800  (
NULL
);

802 
	`TAILQ_INIT
(&
cfg
->
ТМЫs
);

804  (
cfg
);

805 
	}
}

808 
	$evТt_cЏfig_ТМy_дУ
(
evТt_cЏfig_ТМy
 *
ТМy
)

810 iа(
ТМy
->
avoid_mСhod
 !р
NULL
)

811 
	`mm_дУ
((*)
ТМy
->
avoid_mСhod
);

812 
	`mm_дУ
(
ТМy
);

813 
	}
}

816 
	$evТt_cЏfig_дУ
(
evТt_cЏfig
 *
cfg
)

818 
evТt_cЏfig_ТМy
 *
ТМy
;

820 (
ТМy
 = 
	`TAILQ_FIRST
(&
cfg
->
ТМЫs
)и!р
NULL
) {

821 
	`TAILQ_REMOVE
(&
cfg
->
ТМЫs
, 
ТМy
, 
√xt
);

822 
	`evТt_cЏfig_ТМy_дУ
(
ТМy
);

824 
	`mm_дУ
(
cfg
);

825 
	}
}

828 
	$evТt_cЏfig_£t_жag
(
evТt_cЏfig
 *
cfg
, 
жag
)

830 iа(!
cfg
)

832 
cfg
->
жags
 |р
жag
;

834 
	}
}

837 
	$evТt_cЏfig_avoid_mСhod
(
evТt_cЏfig
 *
cfg
, cЏ° *
mСhod
)

839 
evТt_cЏfig_ТМy
 *
ТМy
 = 
	`mm_mЃloc
((*entry));

840 iа(
ТМy
 =р
NULL
)

843 iа((
ТМy
->
avoid_mСhod
 = 
	`mm_°rdup
(
mСhod
)и=р
NULL
) {

844 
	`mm_дУ
(
ТМy
);

848 
	`TAILQ_INSERT_TAIL
(&
cfg
->
ТМЫs
, 
ТМy
, 
√xt
);

851 
	}
}

854 
	$evТt_cЏfig_їquЬe_г©uїs
(
evТt_cЏfig
 *
cfg
,

855 
г©uїs
)

857 iа(!
cfg
)

859 
cfg
->
їquЬe_г©uїs
 = 
г©uїs
;

861 
	}
}

864 
	$evТt_іi№Щy_ЪЩ
(
≈ri№ЩЫs
)

866  
	`evТt_ba£_іi№Щy_ЪЩ
(
cuЉТt_ba£
, 
≈ri№ЩЫs
);

867 
	}
}

870 
	$evТt_ba£_іi№Щy_ЪЩ
(
evТt_ba£
 *
ba£
, 
≈ri№ЩЫs
)

872 
i
;

874 iа(
	`N_ACTIVE_CALLBACKS
(
ba£
и|| 
≈ri№ЩЫs
 < 1

875 || 
≈ri№ЩЫs
 >р
EVENT_MAX_PRIORITIES
)

878 iа(
≈ri№ЩЫs
 =р
ba£
->
«щivequeues
)

881 iа(
ba£
->
«щivequeues
) {

882 
	`mm_дУ
(
ba£
->
aщivequeues
);

883 
ba£
->
«щivequeues
 = 0;

887 
ba£
->
aщivequeues
 = (
evТt_li°
 *)

888 
	`mm_€ќoc
(
≈ri№ЩЫs
, (
evТt_li°
));

889 iа(
ba£
->
aщivequeues
 =р
NULL
) {

890 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

893 
ba£
->
«щivequeues
 = 
≈ri№ЩЫs
;

895 
i
 = 0; i < 
ba£
->
«щivequeues
; ++i) {

896 
	`TAILQ_INIT
(&
ba£
->
aщivequeues
[
i
]);

900 
	}
}

903 
	$evТt_havУvТts
(
evТt_ba£
 *
ba£
)

906  (
ba£
->
evТt_couЅ
 > 0);

907 
	}
}

909 
ЪlЪe
 

910 
	$evТt_sig«l_юosuї
(
evТt_ba£
 *
ba£
, 
evТt
 *
ev
)

912 
n€ќs
;

915 
n€ќs
 = 
ev
->
ev_n€ќs
;

916 
ev
->
ev_≤€ќs
 = &
n€ќs
;

917 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

918 
n€ќs
) {

919 
n€ќs
--;

920 
ev
->
ev_n€ќs
 = 
n€ќs
;

921 (*
ev
->
ev_€ќback
)((лv->
ev_fd
,Гv->
ev_їs
,Гv->
ev_ђg
);

924 iа(
ba£
->
evТt_bїak
)

928 
	}
}

930 
	#MICROSECONDS_MASK
 0x000fffff

	)

931 
	#COMMON_TIMEOUT_IDX_MASK
 0x0ff00000

	)

932 
	#COMMON_TIMEOUT_IDX_SHIFT
 20

	)

933 
	#COMMON_TIMEOUT_MASK
 0xf0000000

	)

934 
	#COMMON_TIMEOUT_MAGIC
 0x50000000

	)

936 
	#COMMON_TIMEOUT_IDX
(
tv
) \

937 (((
tv
)->
tv_u£c
 & 
COMMON_TIMEOUT_IDX_MASK
)>>
COMMON_TIMEOUT_IDX_SHIFT
)

	)

939 
ЪlЪe
 

940 
	$is_commЏ_timeout
(cЏ° 
timevЃ
 *
tv
,

941 cЏ° 
evТt_ba£
 *
ba£
)

943 
idx
;

944 iа((
tv
->
tv_u£c
 & 
COMMON_TIMEOUT_MASK
и!р
COMMON_TIMEOUT_MAGIC
)

946 
idx
 = 
	`COMMON_TIMEOUT_IDX
(
tv
);

947  
idx
 < 
ba£
->
n_commЏ_timeouts
;

948 
	}
}

952 
ЪlЪe
 

953 
	$is_Іme_commЏ_timeout
(cЏ° 
timevЃ
 *
tv1
, cЏ° timevЃ *
tv2
)

955  (
tv1
->
tv_u£c
 & ~
MICROSECONDS_MASK
) ==

956 (
tv2
->
tv_u£c
 & ~
MICROSECONDS_MASK
);

957 
	}
}

959 
ЪlЪe
 
commЏ_timeout_li°
 *

960 
	$gС_commЏ_timeout_li°
(
evТt_ba£
 *
ba£
, cЏ° 
timevЃ
 *
tv
)

962  
ba£
->
commЏ_timeout_queues
[
	`COMMON_TIMEOUT_IDX
(
tv
)];

963 
	}
}

965 
ЪlЪe
 

966 
	$commЏ_timeout_ok
(cЏ° 
timevЃ
 *
tv
,

967 
evТt_ba£
 *
ba£
)

969 cЏ° 
timevЃ
 *
ex≥щ
 =

970 &
	`gС_commЏ_timeout_li°
(
ba£
, 
tv
)->
duњtiЏ
;

971  
tv
->
tv_£c
 =р
ex≥щ
->tv_sec &&

972 
tv
->
tv_u£c
 =р
ex≥щ
->tv_usec;

973 
	}
}

976 
	$commЏ_timeout_scheduЋ
(
commЏ_timeout_li°
 *
щl
,

977 cЏ° 
timevЃ
 *
now
, 
evТt
 *
hЧd
)

979 
timevЃ
 
timeout
 = 
hЧd
->
ev_timeout
;

980 
timeout
.
tv_u£c
 &р
MICROSECONDS_MASK
;

981 
	`evТt_add_ЪЛЇЃ
(&
щl
->
timeout_evТt
, &
timeout
, 1);

982 
	}
}

985 
	$commЏ_timeout_€ќback
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

987 
timevЃ
 
now
;

988 
commЏ_timeout_li°
 *
щl
 = 
ђg
;

989 
evТt_ba£
 *
ba£
 = 
щl
->base;

990 
evТt
 *
ev
 = 
NULL
;

991 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

992 
	`gСtime
(
ba£
, &
now
);

994 
ev
 = 
	`TAILQ_FIRST
(&
щl
->
evТts
);

995 iа(!
ev
 ||Гv->
ev_timeout
.
tv_£c
 > 
now
.tv_sec ||

996 (
ev
->
ev_timeout
.
tv_£c
 =р
now
.tv_sec &&

997 (
ev
->
ev_timeout
.
tv_u£c
&
MICROSECONDS_MASK
и> 
now
.tv_usec))

999 
	`evТt_dЦ_ЪЛЇЃ
(
ev
);

1000 
	`evТt_aщive_nёock
(
ev
, 
EV_TIMEOUT
, 1);

1002 iа(
ev
)

1003 
	`commЏ_timeout_scheduЋ
(
щl
, &
now
, 
ev
);

1004 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

1005 
	}
}

1007 
	#MAX_COMMON_TIMEOUTS
 256

	)

1009 cЏ° 
timevЃ
 *

1010 
	$evТt_ba£_ЪЩ_commЏ_timeout
(
evТt_ba£
 *
ba£
,

1011 cЏ° 
timevЃ
 *
duњtiЏ
)

1013 
i
;

1014 
timevЃ
 
tv
;

1015 cЏ° 
timevЃ
 *
їsu…
=
NULL
;

1016 
commЏ_timeout_li°
 *
√w_щl
;

1018 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

1019 iа(
duњtiЏ
->
tv_u£c
 > 1000000) {

1020 
	`memэy
(&
tv
, 
duњtiЏ
, (
timevЃ
));

1021 iа(
	`is_commЏ_timeout
(
duњtiЏ
, 
ba£
))

1022 
tv
.
tv_u£c
 &р
MICROSECONDS_MASK
;

1023 
tv
.
tv_£c
 +рtv.
tv_u£c
 / 1000000;

1024 
tv
.
tv_u£c
 %= 1000000;

1025 
duњtiЏ
 = &
tv
;

1027 
i
 = 0; i < 
ba£
->
n_commЏ_timeouts
; ++i) {

1028 cЏ° 
commЏ_timeout_li°
 *
щl
 =

1029 
ba£
->
commЏ_timeout_queues
[
i
];

1030 iа(
duњtiЏ
->
tv_£c
 =р
щl
->duration.tv_sec &&

1031 
duњtiЏ
->
tv_u£c
 ==

1032 (
щl
->
duњtiЏ
.
tv_u£c
 & 
MICROSECONDS_MASK
)) {

1033 
	`EVUTIL_ASSERT
(
	`is_commЏ_timeout
(&
щl
->
duњtiЏ
, 
ba£
));

1034 
їsu…
 = &
щl
->
duњtiЏ
;

1035 
dЏe
;

1038 iа(
ba£
->
n_commЏ_timeouts
 =р
MAX_COMMON_TIMEOUTS
) {

1039 
	`evТt_wђn
("%s: Too many commonБimeoutsЗlready in use; "

1040 "wРЏly suµ№И%dЕФГvТt_ba£", 
__func__
,

1041 
MAX_COMMON_TIMEOUTS
);

1042 
dЏe
;

1044 iа(
ba£
->
n_commЏ_timeouts_Ѓlo€Лd
 =рba£->
n_commЏ_timeouts
) {

1045 
n
 = 
ba£
->
n_commЏ_timeouts
 < 16 ? 16 :

1046 
ba£
->
n_commЏ_timeouts
*2;

1047 
commЏ_timeout_li°
 **
√wqueues
 =

1048 
	`mm_їЃloc
(
ba£
->
commЏ_timeout_queues
,

1049 
n
*(
commЏ_timeout_queue
 *));

1050 iа(!
√wqueues
) {

1051 
	`evТt_wђn
("%s:ДЧќoc",
__func__
);

1052 
dЏe
;

1054 
ba£
->
n_commЏ_timeouts_Ѓlo€Лd
 = 
n
;

1055 
ba£
->
commЏ_timeout_queues
 = 
√wqueues
;

1057 
√w_щl
 = 
	`mm_€ќoc
(1, (
commЏ_timeout_li°
));

1058 iа(!
√w_щl
) {

1059 
	`evТt_wђn
("%s: cЃloc",
__func__
);

1060 
dЏe
;

1062 
	`TAILQ_INIT
(&
√w_щl
->
evТts
);

1063 
√w_щl
->
duњtiЏ
.
tv_£c
 = duration->tv_sec;

1064 
√w_щl
->
duњtiЏ
.
tv_u£c
 =

1065 
duњtiЏ
->
tv_u£c
 | 
COMMON_TIMEOUT_MAGIC
 |

1066 (
ba£
->
n_commЏ_timeouts
 << 
COMMON_TIMEOUT_IDX_SHIFT
);

1067 
	`evtimФ_assign
(&
√w_щl
->
timeout_evТt
, 
ba£
,

1068 
commЏ_timeout_€ќback
, 
√w_щl
);

1069 
√w_щl
->
timeout_evТt
.
ev_жags
 |р
EVLIST_INTERNAL
;

1070 
	`evТt_іi№Щy_£t
(&
√w_щl
->
timeout_evТt
, 0);

1071 
√w_щl
->
ba£
 = base;

1072 
ba£
->
commЏ_timeout_queues
[ba£->
n_commЏ_timeouts
++] = 
√w_щl
;

1073 
їsu…
 = &
√w_щl
->
duњtiЏ
;

1075 
dЏe
:

1076 iа(
їsu…
)

1077 
	`EVUTIL_ASSERT
(
	`is_commЏ_timeout
(
їsu…
, 
ba£
));

1079 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

1080  
їsu…
;

1081 
	}
}

1083 
ЪlЪe
 

1084 
	$evТt_≥rsi°_юosuї
(
evТt_ba£
 *
ba£
, 
evТt
 *
ev
)

1087 iа(
ev
->
ev_io_timeout
.
tv_£c
 ||Гv->ev_io_timeout.
tv_u£c
) {

1092 
timevЃ
 
run_©
;

1093 
	`EVUTIL_ASSERT
(
	`is_Іme_commЏ_timeout
(&
ev
->
ev_timeout
,

1094 &
ev
->
ev_io_timeout
));

1095 iа(
	`is_commЏ_timeout
(&
ev
->
ev_timeout
, 
ba£
)) {

1096 
ev_uЪt32_t
 
u£c_mask
;

1097 
timevЃ
 
dЦay
, 
їѕtive_to
;

1098 
dЦay
 = 
ev
->
ev_io_timeout
;

1099 
u£c_mask
 = 
dЦay
.
tv_u£c
 & ~
MICROSECONDS_MASK
;

1100 
dЦay
.
tv_u£c
 &р
MICROSECONDS_MASK
;

1101 iа(
ev
->
ev_їs
 & 
EV_TIMEOUT
) {

1102 
їѕtive_to
 = 
ev
->
ev_timeout
;

1103 
їѕtive_to
.
tv_u£c
 &р
MICROSECONDS_MASK
;

1105 
	`gСtime
(
ba£
, &
їѕtive_to
);

1107 
	`evutЮ_timФadd
(&
їѕtive_to
, &
dЦay
, &
run_©
);

1108 
run_©
.
tv_u£c
 |р
u£c_mask
;

1110 
timevЃ
 
їѕtive_to
;

1111 iа(
ev
->
ev_їs
 & 
EV_TIMEOUT
) {

1112 
їѕtive_to
 = 
ev
->
ev_timeout
;

1114 
	`gСtime
(
ba£
, &
їѕtive_to
);

1116 
	`evutЮ_timФadd
(&
ev
->
ev_io_timeout
, &
їѕtive_to
,

1117 &
run_©
);

1119 
	`evТt_add_ЪЛЇЃ
(
ev
, &
run_©
, 1);

1121 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

1122 (*
ev
->
ev_€ќback
)((лv->
ev_fd
,Гv->
ev_їs
,Гv->
ev_ђg
);

1123 
	}
}

1133 
	$evТt_іoыss_aщive_sЪgЋ_queue
(
evТt_ba£
 *
ba£
,

1134 
evТt_li°
 *
aщiveq
)

1136 
evТt
 *
ev
;

1137 
couЅ
 = 0;

1139 
	`EVUTIL_ASSERT
(
aщiveq
 !р
NULL
);

1141 
ev
 = 
	`TAILQ_FIRST
(
aщiveq
);Гv;Гv = TAILQ_FIRST(activeq)) {

1142 iа(
ev
->
ev_evТts
 & 
EV_PERSIST
)

1143 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

1145 
	`evТt_dЦ_ЪЛЇЃ
(
ev
);

1146 iа(!(
ev
->
ev_жags
 & 
EVLIST_INTERNAL
))

1147 ++
couЅ
;

1149 
	`evТt_debug
((

1151 
ev
,

1152 
ev
->
ev_їs
 & 
EV_READ
 ? "EV_READ " : " ",

1153 
ev
->
ev_їs
 & 
EV_WRITE
 ? "EV_WRITE " : " ",

1154 
ev
->
ev_€ќback
));

1156 
ba£
->
cuЉТt_evТt
 = 
ev
;

1158 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
cuЉТt_evТt_lock
);

1160 
ev
->
ev_юosuї
) {

1161 
EV_CLOSURE_SIGNAL
:

1162 
	`evТt_sig«l_юosuї
(
ba£
, 
ev
);

1164 
EV_CLOSURE_PERSIST
:

1165 
	`evТt_≥rsi°_юosuї
(
ba£
, 
ev
);

1168 
EV_CLOSURE_NONE
:

1169 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

1170 (*
ev
->
ev_€ќback
)(

1171 ()
ev
->
ev_fd
,Гv->
ev_їs
,Гv->
ev_ђg
);

1175 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
cuЉТt_evТt_lock
);

1176 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

1177 
ba£
->
cuЉТt_evТt
 = 
NULL
;

1179 iа(
ba£
->
evТt_bїak
)

1182  
couЅ
;

1183 
	}
}

1186 
	$evТt_іoыss_deгЉed_€ќbacks
(
deгЉed_cb_queue
 *
queue
, *
bїak±r
)

1188 
couЅ
 = 0;

1189 
deгЉed_cb
 *
cb
;

1191 (
cb
 = 
	`TAILQ_FIRST
(&
queue
->
deгЉed_cb_li°
))) {

1192 
cb
->
queued
 = 0;

1193 
	`TAILQ_REMOVE
(&
queue
->
deгЉed_cb_li°
, 
cb
, 
cb_√xt
);

1194 --
queue
->
aщive_couЅ
;

1195 
	`UNLOCK_DEFERRED_QUEUE
(
queue
);

1197 
cb
->
	`cb
(cb, cb->
ђg
);

1198 ++
couЅ
;

1199 iа(*
bїak±r
)

1202 
	`LOCK_DEFERRED_QUEUE
(
queue
);

1204  
couЅ
;

1205 
	}
}

1214 
	$evТt_іoыss_aщive
(
evТt_ba£
 *
ba£
)

1217 
evТt_li°
 *
aщiveq
 = 
NULL
;

1218 
i
, 
c
;

1220 
i
 = 0; i < 
ba£
->
«щivequeues
; ++i) {

1221 iа(
	`TAILQ_FIRST
(&
ba£
->
aщivequeues
[
i
]и!р
NULL
) {

1222 
aщiveq
 = &
ba£
->
aщivequeues
[
i
];

1223 
c
 = 
	`evТt_іoыss_aщive_sЪgЋ_queue
(
ba£
, 
aщiveq
);

1224 iа(
c
 < 0)

1226 iа(
c
 > 0)

1234 
	`evТt_іoыss_deгЉed_€ќbacks
(&
ba£
->
deгr_queue
,&ba£->
evТt_bїak
);

1235 
	}
}

1242 
	$evТt_di•©ch
()

1244  (
	`evТt_loЁ
(0));

1245 
	}
}

1248 
	$evТt_ba£_di•©ch
(
evТt_ba£
 *event_base)

1250  (
	`evТt_ba£_loЁ
(
evТt_ba£
, 0));

1251 
	}
}

1254 
	$evТt_ba£_gС_mСhod
(cЏ° 
evТt_ba£
 *
ba£
)

1256 
	`EVUTIL_ASSERT
(
ba£
);

1257  (
ba£
->
ev£l
->
«me
);

1258 
	}
}

1261 
	$evТt_loЁexЩ_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

1263 
evТt_ba£
 *
ba£
 = 
ђg
;

1264 
ba£
->
evТt_gўЛrm
 = 1;

1265 
	}
}

1269 
	$evТt_loЁexЩ
(cЏ° 
timevЃ
 *
tv
)

1271  (
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
evТt_loЁexЩ_cb
,

1272 
cuЉТt_ba£
, 
tv
));

1273 
	}
}

1276 
	$evТt_ba£_loЁexЩ
(
evТt_ba£
 *evТt_ba£, cЏ° 
timevЃ
 *
tv
)

1278  (
	`evТt_ba£_Џы
(
evТt_ba£
, -1, 
EV_TIMEOUT
, 
evТt_loЁexЩ_cb
,

1279 
evТt_ba£
, 
tv
));

1280 
	}
}

1283 
	$evТt_loЁbїak
()

1285  (
	`evТt_ba£_loЁbїak
(
cuЉТt_ba£
));

1286 
	}
}

1289 
	$evТt_ba£_loЁbїak
(
evТt_ba£
 *event_base)

1291 iа(
evТt_ba£
 =р
NULL
)

1294 
	`EVBASE_ACQUIRE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1295 
evТt_ba£
->
evТt_bїak
 = 1;

1296 
	`EVBASE_RELEASE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1298 iа(!
	`EVBASE_IN_THREAD
(
evТt_ba£
)) {

1299  
	`evthїad_nўify_ba£
(
evТt_ba£
);

1303 
	}
}

1306 
	$evТt_ba£_gў_bїak
(
evТt_ba£
 *event_base)

1308 
їs
;

1309 
	`EVBASE_ACQUIRE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1310 
їs
 = 
evТt_ba£
->
evТt_bїak
;

1311 
	`EVBASE_RELEASE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1312  
їs
;

1313 
	}
}

1316 
	$evТt_ba£_gў_exЩ
(
evТt_ba£
 *event_base)

1318 
їs
;

1319 
	`EVBASE_ACQUIRE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1320 
їs
 = 
evТt_ba£
->
evТt_gўЛrm
;

1321 
	`EVBASE_RELEASE_LOCK
(
evТt_ba£
, 
th_ba£_lock
);

1322  
їs
;

1323 
	}
}

1328 
	$evТt_loЁ
(
жags
)

1330  
	`evТt_ba£_loЁ
(
cuЉТt_ba£
, 
жags
);

1331 
	}
}

1334 
	$evТt_ba£_loЁ
(
evТt_ba£
 *
ba£
, 
жags
)

1336 cЏ° 
evТtЁ
 *
ev£l
 = 
ba£
->evsel;

1337 
timevЃ
 
tv
;

1338 
timevЃ
 *
tv_p
;

1339 
їs
, 
dЏe
, 
їtvЃ
 = 0;

1343 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

1345 
	`юЧr_time_€che
(
ba£
);

1347 iа(
ba£
->
sig
.
ev_sig«l_added
)

1348 
evsig_ba£
 = 
ba£
;

1349 
dЏe
 = 0;

1351 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


1352 
ba£
->
th_ow√r_id
 = 
	`EVTHREAD_GET_ID
();

1355 
ba£
->
evТt_gўЛrm
 = ba£->
evТt_bїak
 = 0;

1357 !
dЏe
) {

1359 iа(
ba£
->
evТt_gўЛrm
) {

1363 iа(
ba£
->
evТt_bїak
) {

1367 
	`timeout_c№їщ
(
ba£
, &
tv
);

1369 
tv_p
 = &
tv
;

1370 iа(!
	`N_ACTIVE_CALLBACKS
(
ba£
и&& !(
жags
 & 
EVLOOP_NONBLOCK
)) {

1371 
	`timeout_√xt
(
ba£
, &
tv_p
);

1377 
	`evutЮ_timФюЧr
(&
tv
);

1381 iа(!
	`evТt_havУvТts
(
ba£
и&& !
	`N_ACTIVE_CALLBACKS
(base)) {

1382 
	`evТt_debug
(("%s:ВЎevТt†їgi°Фed.", 
__func__
));

1383 
їtvЃ
 = 1;

1384 
dЏe
;

1388 
	`gСtime
(
ba£
, &ba£->
evТt_tv
);

1390 
	`юЧr_time_€che
(
ba£
);

1392 
їs
 = 
ev£l
->
	`di•©ch
(
ba£
, 
tv_p
);

1394 iа(
їs
 == -1) {

1395 
	`evТt_debug
(("%s: dispatchДeturned unsuccessfully.",

1396 
__func__
));

1397 
їtvЃ
 = -1;

1398 
dЏe
;

1401 
	`upd©e_time_€che
(
ba£
);

1403 
	`timeout_іoыss
(
ba£
);

1405 iа(
	`N_ACTIVE_CALLBACKS
(
ba£
)) {

1406 
	`evТt_іoыss_aщive
(
ba£
);

1407 iа(!
ba£
->
evТt_couЅ_aщive
 && (
жags
 & 
EVLOOP_ONCE
))

1408 
dЏe
 = 1;

1409 } iа(
жags
 & 
EVLOOP_NONBLOCK
)

1410 
dЏe
 = 1;

1412 
	`evТt_debug
(("%s:ЗskedБЎЛrmЪ©РloЁ.", 
__func__
));

1414 
dЏe
:

1415 
	`юЧr_time_€che
(
ba£
);

1417 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

1419  (
їtvЃ
);

1420 
	}
}

1424 
	sevТt_Џы
 {

1425 
evТt
 
	mev
;

1427 (*
	mcb
)(
	mevutЮ_sockС_t
, , *);

1428 *
	mђg
;

1434 
	$evТt_Џы_cb
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
)

1436 
evТt_Џы
 *
eЏы
 = 
ђg
;

1438 (*
eЏы
->
cb
)(
fd
, 
evТts
,ГЏы->
ђg
);

1439 
	`evТt_debug_u«ssign
(&
eЏы
->
ev
);

1440 
	`mm_дУ
(
eЏы
);

1441 
	}
}

1445 
evТt_Џы
(
evutЮ_sockС_t
 
fd
, 
evТts
,

1446 (*
€ќback
)(
evutЮ_sockС_t
, , *),

1447 *
ђg
, cЏ° 
timevЃ
 *
tv
)

1449  
	`evТt_ba£_Џы
(
cuЉТt_ba£
, 
fd
, 
evТts
, 
€ќback
, 
ђg
, 
tv
);

1450 
	}
}

1454 
evТt_ba£_Џы
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТts
,

1455 (*
€ќback
)(
evutЮ_sockС_t
, , *),

1456 *
ђg
, cЏ° 
timevЃ
 *
tv
)

1458 
evТt_Џы
 *
eЏы
;

1459 
timevЃ
 
Сv
;

1460 
їs
 = 0;

1464 iа(
evТts
 & (
EV_SIGNAL
|
EV_PERSIST
))

1467 iа((
eЏы
 = 
	`mm_€ќoc
(1, (
evТt_Џы
))и=р
NULL
)

1470 
eЏы
->
cb
 = 
€ќback
;

1471 
eЏы
->
ђg
 =Зrg;

1473 iа(
evТts
 =р
EV_TIMEOUT
) {

1474 iа(
tv
 =р
NULL
) {

1475 
	`evutЮ_timФюЧr
(&
Сv
);

1476 
tv
 = &
Сv
;

1479 
	`evtimФ_assign
(&
eЏы
->
ev
, 
ba£
, 
evТt_Џы_cb
,Гonce);

1480 } iа(
evТts
 & (
EV_READ
|
EV_WRITE
)) {

1481 
evТts
 &р
EV_READ
|
EV_WRITE
;

1483 
	`evТt_assign
(&
eЏы
->
ev
, 
ba£
, 
fd
, 
evТts
, 
evТt_Џы_cb
,Гonce);

1486 
	`mm_дУ
(
eЏы
);

1490 iа(
їs
 == 0)

1491 
їs
 = 
	`evТt_add
(&
eЏы
->
ev
, 
tv
);

1492 iа(
їs
 != 0) {

1493 
	`mm_дУ
(
eЏы
);

1494  (
їs
);

1498 
	}
}

1501 
evТt_assign
(
evТt
 *
ev
, 
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТts
, (*
€ќback
)”vutЮ_sockС_t, , *), *
ђg
)

1503 iа(!
ba£
)

1504 
ba£
 = 
cuЉТt_ba£
;

1506 
	`_evТt_debug_as£є_nў_added
(
ev
);

1508 
ev
->
ev_ba£
 = 
ba£
;

1510 
ev
->
ev_€ќback
 = 
€ќback
;

1511 
ev
->
ev_ђg
 = 
ђg
;

1512 
ev
->
ev_fd
 = 
fd
;

1513 
ev
->
ev_evТts
 = 
evТts
;

1514 
ev
->
ev_їs
 = 0;

1515 
ev
->
ev_жags
 = 
EVLIST_INIT
;

1516 
ev
->
ev_n€ќs
 = 0;

1517 
ev
->
ev_≤€ќs
 = 
NULL
;

1519 iа(
evТts
 & 
EV_SIGNAL
) {

1520 iа((
evТts
 & (
EV_READ
|
EV_WRITE
)) != 0) {

1521 
	`evТt_wђnx
("%s: EV_SIGNAL isВot compatible with "

1522 "EV_READ oЄEV_WRITE", 
__func__
);

1525 
ev
->
ev_юosuї
 = 
EV_CLOSURE_SIGNAL
;

1527 iа(
evТts
 & 
EV_PERSIST
) {

1528 
	`evutЮ_timФюЧr
(&
ev
->
ev_io_timeout
);

1529 
ev
->
ev_юosuї
 = 
EV_CLOSURE_PERSIST
;

1531 
ev
->
ev_юosuї
 = 
EV_CLOSURE_NONE
;

1535 
	`mЪ_hЧp_Цem_ЪЩ
(
ev
);

1537 iа(
ba£
 !р
NULL
) {

1539 
ev
->
ev_іi
 = 
ba£
->
«щivequeues
 / 2;

1542 
	`_evТt_debug_nўe_£tup
(
ev
);

1545 
	}
}

1548 
	$evТt_ba£_£t
(
evТt_ba£
 *
ba£
, 
evТt
 *
ev
)

1551 iа(
ev
->
ev_жags
 !р
EVLIST_INIT
)

1554 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1556 
ev
->
ev_ba£
 = 
ba£
;

1557 
ev
->
ev_іi
 = 
ba£
->
«щivequeues
/2;

1560 
	}
}

1563 
evТt_£t
(
evТt
 *
ev
, 
evutЮ_sockС_t
 
fd
, 
evТts
,

1564 (*
€ќback
)(
evutЮ_sockС_t
, , *), *
ђg
)

1566 
r
;

1567 
r
 = 
	`evТt_assign
(
ev
, 
cuЉТt_ba£
, 
fd
, 
evТts
, 
€ќback
, 
ђg
);

1568 
	`EVUTIL_ASSERT
(
r
 == 0);

1569 
	}
}

1571 
evТt
 *

1572 
evТt_√w
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТts
, (*
cb
)”vutЮ_sockС_t, , *), *
ђg
)

1574 
evТt
 *
ev
;

1575 
ev
 = 
	`mm_mЃloc
((
evТt
));

1576 iа(
ev
 =р
NULL
)

1577  (
NULL
);

1578 iа(
	`evТt_assign
(
ev
, 
ba£
, 
fd
, 
evТts
, 
cb
, 
ђg
) < 0) {

1579 
	`mm_дУ
(
ev
);

1580  (
NULL
);

1583  (
ev
);

1584 
	}
}

1587 
	$evТt_дУ
(
evТt
 *
ev
)

1589 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1592 
	`evТt_dЦ
(
ev
);

1593 
	`_evТt_debug_nўe_Лђdown
(
ev
);

1594 
	`mm_дУ
(
ev
);

1596 
	}
}

1599 
	$evТt_debug_u«ssign
(
evТt
 *
ev
)

1601 
	`_evТt_debug_as£є_nў_added
(
ev
);

1602 
	`_evТt_debug_nўe_Лђdown
(
ev
);

1604 
ev
->
ev_жags
 &р~
EVLIST_INIT
;

1605 
	}
}

1613 
	$evТt_іi№Щy_£t
(
evТt
 *
ev
, 
іi
)

1615 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1617 iа(
ev
->
ev_жags
 & 
EVLIST_ACTIVE
)

1619 iа(
іi
 < 0 ||ЕrШ>р
ev
->
ev_ba£
->
«щivequeues
)

1622 
ev
->
ev_іi
 = 
іi
;

1625 
	}
}

1632 
	$evТt_≥ndЪg
(cЏ° 
evТt
 *
ev
, evТt, 
timevЃ
 *
tv
)

1634 
timevЃ
 
now
, 
їs
;

1635 
жags
 = 0;

1637 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1639 iа(
ev
->
ev_жags
 & 
EVLIST_INSERTED
)

1640 
жags
 |р(
ev
->
ev_evТts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
));

1641 iа(
ev
->
ev_жags
 & 
EVLIST_ACTIVE
)

1642 
жags
 |р
ev
->
ev_їs
;

1643 iа(
ev
->
ev_жags
 & 
EVLIST_TIMEOUT
)

1644 
жags
 |р
EV_TIMEOUT
;

1646 
evТt
 &р(
EV_TIMEOUT
|
EV_READ
|
EV_WRITE
|
EV_SIGNAL
);

1649 iа(
tv
 !р
NULL
 && (
жags
 & 
evТt
 & 
EV_TIMEOUT
)) {

1650 
timevЃ
 
tmp
 = 
ev
->
ev_timeout
;

1651 
	`evТt_ba£_gСtimeofday_€ched
(
ev
->
ev_ba£
, &
now
);

1652 
tmp
.
tv_u£c
 &р
MICROSECONDS_MASK
;

1653 
	`evutЮ_timФsub
(&
tmp
, &
now
, &
їs
);

1655 
	`evutЮ_gСtimeofday
(&
now
, 
NULL
);

1656 
	`evutЮ_timФadd
(&
now
, &
їs
, 
tv
);

1659  (
жags
 & 
evТt
);

1660 
	}
}

1663 
	$_evТt_ЪЩЯlized
(cЏ° 
evТt
 *
ev
, 
√ed_fd
)

1665 iа(!(
ev
->
ev_жags
 & 
EVLIST_INIT
))

1667 #ifdeа
WIN32


1669 iа(
√ed_fd
 && (
ev
)->
ev_fd
 =р(
evutЮ_sockС_t
)
INVALID_HANDLE_VALUE
)

1673 
	}
}

1676 
	$evТt_gС_assignmТt
(cЏ° 
evТt
 *evТt, 
evТt_ba£
 **
ba£_out
, 
evutЮ_sockС_t
 *
fd_out
, *
evТts_out
, 
evТt_€ќback_в
 *
€ќback_out
, **
ђg_out
)

1678 
	`_evТt_debug_as£є_is_£tup
(
evТt
);

1680 iа(
ba£_out
)

1681 *
ba£_out
 = 
evТt
->
ev_ba£
;

1682 iа(
fd_out
)

1683 *
fd_out
 = 
evТt
->
ev_fd
;

1684 iа(
evТts_out
)

1685 *
evТts_out
 = 
evТt
->
ev_evТts
;

1686 iа(
€ќback_out
)

1687 *
€ќback_out
 = 
evТt
->
ev_€ќback
;

1688 iа(
ђg_out
)

1689 *
ђg_out
 = 
evТt
->
ev_ђg
;

1690 
	}
}

1692 
size_t


1693 
	$evТt_gС_°ruщ_evТt_size
()

1695  (
evТt
);

1696 
	}
}

1698 
evutЮ_sockС_t


1699 
	$evТt_gС_fd
(cЏ° 
evТt
 *
ev
)

1701 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1702  
ev
->
ev_fd
;

1703 
	}
}

1705 
evТt_ba£
 *

1706 
	$evТt_gС_ba£
(cЏ° 
evТt
 *
ev
)

1708 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1709  
ev
->
ev_ba£
;

1710 
	}
}

1713 
	$evТt_gС_evТts
(cЏ° 
evТt
 *
ev
)

1715 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1716  
ev
->
ev_evТts
;

1717 
	}
}

1719 
evТt_€ќback_в


1720 
	$evТt_gС_€ќback
(cЏ° 
evТt
 *
ev
)

1722 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1723  
ev
->
ev_€ќback
;

1724 
	}
}

1727 
	$evТt_gС_€ќback_ђg
(cЏ° 
evТt
 *
ev
)

1729 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1730  
ev
->
ev_ђg
;

1731 
	}
}

1734 
	$evТt_add
(
evТt
 *
ev
, cЏ° 
timevЃ
 *
tv
)

1736 
їs
;

1738 
	`EVBASE_ACQUIRE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

1740 
їs
 = 
	`evТt_add_ЪЛЇЃ
(
ev
, 
tv
, 0);

1742 
	`EVBASE_RELEASE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

1744  (
їs
);

1745 
	}
}

1748 
	$evthїad_nўify_ba£_deзu…
(
evТt_ba£
 *
ba£
)

1750 
buf
[1];

1751 
r
;

1752 
buf
[0] = () 0;

1753 #ifdeа
WIN32


1754 
r
 = 
	`£nd
(
ba£
->
th_nўify_fd
[1], 
buf
, 1, 0);

1756 
r
 = 
	`wrЩe
(
ba£
->
th_nўify_fd
[1], 
buf
, 1);

1758  (
r
 < 0) ? -1 : 0;

1759 
	}
}

1761 #iа
defЪed
(
_EVENT_HAVE_EVENTFD
и&& defЪed(
_EVENT_HAVE_SYS_EVENTFD_H
)

1763 
	$evthїad_nўify_ba£_evТtfd
(
evТt_ba£
 *
ba£
)

1765 
ev_uЪt64_t
 
msg
 = 1;

1766 
r
;

1768 
r
 = 
	`wrЩe
(
ba£
->
th_nўify_fd
[0], (*и&
msg
, (msg));

1769 } 
r
 < 0 && 
ФЇo
 =р
EAGAIN
);

1771  (
r
 < 0) ? -1 : 0;

1772 
	}
}

1776 
	$evthїad_nўify_ba£
(
evТt_ba£
 *
ba£
)

1778 iа(!
ba£
->
th_nўify_в
)

1780  
ba£
->
	`th_nўify_в
(base);

1781 
	}
}

1783 
ЪlЪe
 

1784 
	$evТt_add_ЪЛЇЃ
(
evТt
 *
ev
, cЏ° 
timevЃ
 *
tv
,

1785 
tv_is_absёuЛ
)

1787 
evТt_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

1788 
їs
 = 0;

1789 
nўify
 = 0;

1791 
	`EVENT_BASE_ASSERT_LOCKED
(
ba£
);

1792 
	`_evТt_debug_as£є_is_£tup
(
ev
);

1794 
	`evТt_debug
((

1796 
ev
,

1797 
ev
->
ev_evТts
 & 
EV_READ
 ? "EV_READ " : " ",

1798 
ev
->
ev_evТts
 & 
EV_WRITE
 ? "EV_WRITE " : " ",

1799 
tv
 ? "EV_TIMEOUT " : " ",

1800 
ev
->
ev_€ќback
));

1802 
	`EVUTIL_ASSERT
(!(
ev
->
ev_жags
 & ~
EVLIST_ALL
));

1808 iа(
tv
 !р
NULL
 && !(
ev
->
ev_жags
 & 
EVLIST_TIMEOUT
)) {

1809 iа(
	`mЪ_hЧp_ї£rve
(&
ba£
->
timehЧp
,

1810 1 + 
	`mЪ_hЧp_size
(&
ba£
->
timehЧp
)) == -1)

1814 iа((
ev
->
ev_evТts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
)) &&

1815 !(
ev
->
ev_жags
 & (
EVLIST_INSERTED
|
EVLIST_ACTIVE
))) {

1816 iа(
ev
->
ev_evТts
 & (
EV_READ
|
EV_WRITE
))

1817 
їs
 = 
	`evm≠_io_add
(
ba£
, 
ev
->
ev_fd
,Гv);

1818 iа(
ev
->
ev_evТts
 & 
EV_SIGNAL
)

1819 
їs
 = 
	`evm≠_sig«l_add
(
ba£
, 
ev
->
ev_fd
,Гv);

1820 iа(
їs
 != -1)

1821 
	`evТt_queue_Ъ£є
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

1822 iа(
їs
 == 1) {

1824 
nўify
 = 1;

1825 
їs
 = 0;

1833 iа(
їs
 !р-1 && 
tv
 !р
NULL
) {

1834 
timevЃ
 
now
;

1835 
commЏ_timeout
;

1843 iа(
ev
->
ev_юosuї
 =р
EV_CLOSURE_PERSIST
 && !
tv_is_absёuЛ
)

1844 
ev
->
ev_io_timeout
 = *
tv
;

1850 iа(
ev
->
ev_жags
 & 
EVLIST_TIMEOUT
) {

1852 iа(
	`mЪ_hЧp_Цt_is_tЁ
(
ev
))

1853 
nўify
 = 1;

1854 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

1860 iа((
ev
->
ev_жags
 & 
EVLIST_ACTIVE
) &&

1861 (
ev
->
ev_їs
 & 
EV_TIMEOUT
)) {

1862 iа(
ev
->
ev_evТts
 & 
EV_SIGNAL
) {

1866 iа(
ev
->
ev_n€ќs
 &&Гv->
ev_≤€ќs
) {

1868 *
ev
->
ev_≤€ќs
 = 0;

1872 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

1875 
	`gСtime
(
ba£
, &
now
);

1877 
commЏ_timeout
 = 
	`is_commЏ_timeout
(
tv
, 
ba£
);

1878 iа(
tv_is_absёuЛ
) {

1879 
ev
->
ev_timeout
 = *
tv
;

1880 } iа(
commЏ_timeout
) {

1881 
timevЃ
 
tmp
 = *
tv
;

1882 
tmp
.
tv_u£c
 &р
MICROSECONDS_MASK
;

1883 
	`evutЮ_timФadd
(&
now
, &
tmp
, &
ev
->
ev_timeout
);

1884 
ev
->
ev_timeout
.
tv_u£c
 |=

1885 (
tv
->
tv_u£c
 & ~
MICROSECONDS_MASK
);

1887 
	`evutЮ_timФadd
(&
now
, 
tv
, &
ev
->
ev_timeout
);

1890 
	`evТt_debug
((

1892 ()
tv
->
tv_£c
, 
ev
->
ev_€ќback
));

1894 
	`evТt_queue_Ъ£є
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

1895 iа(
commЏ_timeout
) {

1896 
commЏ_timeout_li°
 *
щl
 =

1897 
	`gС_commЏ_timeout_li°
(
ba£
, &
ev
->
ev_timeout
);

1898 iа(
ev
 =р
	`TAILQ_FIRST
(&
щl
->
evТts
)) {

1899 
	`commЏ_timeout_scheduЋ
(
щl
, &
now
, 
ev
);

1906 iа(
	`mЪ_hЧp_Цt_is_tЁ
(
ev
))

1907 
nўify
 = 1;

1912 iа(
їs
 !р-1 && 
nўify
 && !
	`EVBASE_IN_THREAD
(
ba£
))

1913 
	`evthїad_nўify_ba£
(
ba£
);

1915 
	`_evТt_debug_nўe_add
(
ev
);

1917  (
їs
);

1918 
	}
}

1921 
	$evТt_dЦ
(
evТt
 *
ev
)

1923 
їs
;

1925 
	`EVBASE_ACQUIRE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

1927 
їs
 = 
	`evТt_dЦ_ЪЛЇЃ
(
ev
);

1929 
	`EVBASE_RELEASE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

1931  (
їs
);

1932 
	}
}

1935 
ЪlЪe
 

1936 
	$evТt_dЦ_ЪЛЇЃ
(
evТt
 *
ev
)

1938 
evТt_ba£
 *
ba£
;

1939 
їs
 = 0, 
nўify
 = 0;

1940 
√ed_cur_lock
;

1942 
	`evТt_debug
(("event_del: %p, callback %p",

1943 
ev
,Гv->
ev_€ќback
));

1946 iа(
ev
->
ev_ba£
 =р
NULL
)

1949 
	`EVENT_BASE_ASSERT_LOCKED
(
ev
->
ev_ba£
);

1956 
ba£
 = 
ev
->
ev_ba£
;

1957 
√ed_cur_lock
 = (
ba£
->
cuЉТt_evТt
 =р
ev
);

1958 iа(
√ed_cur_lock
)

1959 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
cuЉТt_evТt_lock
);

1961 
	`EVUTIL_ASSERT
(!(
ev
->
ev_жags
 & ~
EVLIST_ALL
));

1964 iа(
ev
->
ev_evТts
 & 
EV_SIGNAL
) {

1965 iа(
ev
->
ev_n€ќs
 &&Гv->
ev_≤€ќs
) {

1967 *
ev
->
ev_≤€ќs
 = 0;

1971 iа(
ev
->
ev_жags
 & 
EVLIST_TIMEOUT
) {

1979 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

1982 iа(
ev
->
ev_жags
 & 
EVLIST_ACTIVE
)

1983 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

1985 iа(
ev
->
ev_жags
 & 
EVLIST_INSERTED
) {

1986 
	`evТt_queue_їmove
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

1987 iа(
ev
->
ev_evТts
 & (
EV_READ
|
EV_WRITE
))

1988 
їs
 = 
	`evm≠_io_dЦ
(
ba£
, 
ev
->
ev_fd
,Гv);

1990 
їs
 = 
	`evm≠_sig«l_dЦ
(
ba£
, 
ev
->
ev_fd
,Гv);

1991 iа(
їs
 == 1) {

1993 
nўify
 = 1;

1994 
їs
 = 0;

1999 iа(
їs
 !р-1 && 
nўify
 && !
	`EVBASE_IN_THREAD
(
ba£
))

2000 
	`evthїad_nўify_ba£
(
ba£
);

2002 iа(
√ed_cur_lock
)

2003 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
cuЉТt_evТt_lock
);

2005 
	`_evТt_debug_nўe_dЦ
(
ev
);

2007  (
їs
);

2008 
	}
}

2011 
	$evТt_aщive
(
evТt
 *
ev
, 
їs
, 
n€ќs
)

2013 
	`EVBASE_ACQUIRE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

2015 
	`_evТt_debug_as£є_is_£tup
(
ev
);

2017 
	`evТt_aщive_nёock
(
ev
, 
їs
, 
n€ќs
);

2019 
	`EVBASE_RELEASE_LOCK
(
ev
->
ev_ba£
, 
th_ba£_lock
);

2020 
	}
}

2024 
	$evТt_aщive_nёock
(
evТt
 *
ev
, 
їs
, 
n€ќs
)

2026 
evТt_ba£
 *
ba£
;

2029 iа(
ev
->
ev_жags
 & 
EVLIST_ACTIVE
) {

2030 
ev
->
ev_їs
 |р
їs
;

2034 
ba£
 = 
ev
->
ev_ba£
;

2036 
	`EVENT_BASE_ASSERT_LOCKED
(
ba£
);

2038 
ev
->
ev_їs
 = 
їs
;

2040 iа(
ev
->
ev_evТts
 & 
EV_SIGNAL
) {

2041 
ev
->
ev_n€ќs
 = 
n€ќs
;

2042 
ev
->
ev_≤€ќs
 = 
NULL
;

2045 
	`evТt_queue_Ъ£є
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

2046 
	}
}

2049 
	$evТt_deгЉed_cb_ЪЩ
(
deгЉed_cb
 *
cb
, 
deгЉed_cb_в
 
в
, *
ђg
)

2051 
	`mem£t
(
cb
, 0, (
deгЉed_cb
));

2052 
cb
->cb = 
в
;

2053 
cb
->
ђg
 =Зrg;

2054 
	}
}

2057 
	$evТt_deгЉed_cb_€nыl
(
deгЉed_cb_queue
 *
queue
,

2058 
deгЉed_cb
 *
cb
)

2060 iа(!
queue
) {

2061 iа(
cuЉТt_ba£
)

2062 
queue
 = &
cuЉТt_ba£
->
deгr_queue
;

2067 
	`LOCK_DEFERRED_QUEUE
(
queue
);

2068 iа(
cb
->
queued
) {

2069 
	`TAILQ_REMOVE
(&
queue
->
deгЉed_cb_li°
, 
cb
, 
cb_√xt
);

2070 --
queue
->
aщive_couЅ
;

2071 
cb
->
queued
 = 0;

2073 
	`UNLOCK_DEFERRED_QUEUE
(
queue
);

2074 
	}
}

2077 
	$evТt_deгЉed_cb_scheduЋ
(
deгЉed_cb_queue
 *
queue
,

2078 
deгЉed_cb
 *
cb
)

2080 iа(!
queue
) {

2081 iа(
cuЉТt_ba£
)

2082 
queue
 = &
cuЉТt_ba£
->
deгr_queue
;

2087 
	`LOCK_DEFERRED_QUEUE
(
queue
);

2088 iа(!
cb
->
queued
) {

2089 
cb
->
queued
 = 1;

2090 
	`TAILQ_INSERT_TAIL
(&
queue
->
deгЉed_cb_li°
, 
cb
, 
cb_√xt
);

2091 ++
queue
->
aщive_couЅ
;

2092 iа(
queue
->
nўify_в
)

2093 
queue
->
	`nўify_в
(queue, queue->
nўify_ђg
);

2095 
	`UNLOCK_DEFERRED_QUEUE
(
queue
);

2096 
	}
}

2099 
	$timeout_√xt
(
evТt_ba£
 *
ba£
, 
timevЃ
 **
tv_p
)

2102 
timevЃ
 
now
;

2103 
evТt
 *
ev
;

2104 
timevЃ
 *
tv
 = *
tv_p
;

2105 
їs
 = 0;

2107 
ev
 = 
	`mЪ_hЧp_tЁ
(&
ba£
->
timehЧp
);

2109 iа(
ev
 =р
NULL
) {

2111 *
tv_p
 = 
NULL
;

2112 
out
;

2115 iа(
	`gСtime
(
ba£
, &
now
) == -1) {

2116 
їs
 = -1;

2117 
out
;

2120 iа(
	`evutЮ_timФcmp
(&
ev
->
ev_timeout
, &
now
, <=)) {

2121 
	`evutЮ_timФюЧr
(
tv
);

2122 
out
;

2125 
	`evutЮ_timФsub
(&
ev
->
ev_timeout
, &
now
, 
tv
);

2127 
	`EVUTIL_ASSERT
(
tv
->
tv_£c
 >= 0);

2128 
	`EVUTIL_ASSERT
(
tv
->
tv_u£c
 >= 0);

2129 
	`evТt_debug
(("timeout_√xt: iј%d secЏds", ()
tv
->
tv_£c
));

2131 
out
:

2132  (
їs
);

2133 
	}
}

2142 
	$timeout_c№їщ
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

2145 
evТt
 **
≥v
;

2146 
size
;

2147 
timevЃ
 
off
;

2148 
i
;

2150 iа(
u£_mЏўЏic
)

2154 
	`gСtime
(
ba£
, 
tv
);

2156 iа(
	`evutЮ_timФcmp
(
tv
, &
ba£
->
evТt_tv
, >=)) {

2157 
ba£
->
evТt_tv
 = *
tv
;

2161 
	`evТt_debug
(("%s:Бime isДunning backwards, corrected",

2162 
__func__
));

2163 
	`evutЮ_timФsub
(&
ba£
->
evТt_tv
, 
tv
, &
off
);

2169 
≥v
 = 
ba£
->
timehЧp
.
p
;

2170 
size
 = 
ba£
->
timehЧp
.
n
;

2171 ; 
size
-- > 0; ++
≥v
) {

2172 
timevЃ
 *
ev_tv
 = &(**
≥v
).
ev_timeout
;

2173 
	`evutЮ_timФsub
(
ev_tv
, &
off
,Гv_tv);

2175 
i
=0; i<
ba£
->
n_commЏ_timeouts
; ++i) {

2176 
evТt
 *
ev
;

2177 
commЏ_timeout_li°
 *
щl
 =

2178 
ba£
->
commЏ_timeout_queues
[
i
];

2179 
	`TAILQ_FOREACH
(
ev
, &
щl
->
evТts
,

2180 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
) {

2181 
timevЃ
 *
ev_tv
 = &
ev
->
ev_timeout
;

2182 
ev_tv
->
tv_u£c
 &р
MICROSECONDS_MASK
;

2183 
	`evutЮ_timФsub
(
ev_tv
, &
off
,Гv_tv);

2184 
ev_tv
->
tv_u£c
 |р
COMMON_TIMEOUT_MAGIC
 |

2185 (
i
<<
COMMON_TIMEOUT_IDX_SHIFT
);

2190 
ba£
->
evТt_tv
 = *
tv
;

2191 
	}
}

2194 
	$timeout_іoыss
(
evТt_ba£
 *
ba£
)

2197 
timevЃ
 
now
;

2198 
evТt
 *
ev
;

2200 iа(
	`mЪ_hЧp_em±y
(&
ba£
->
timehЧp
)) {

2204 
	`gСtime
(
ba£
, &
now
);

2206 (
ev
 = 
	`mЪ_hЧp_tЁ
(&
ba£
->
timehЧp
))) {

2207 iа(
	`evutЮ_timФcmp
(&
ev
->
ev_timeout
, &
now
, >))

2211 
	`evТt_dЦ_ЪЛЇЃ
(
ev
);

2213 
	`evТt_debug
(("timeout_process: call %p",

2214 
ev
->
ev_€ќback
));

2215 
	`evТt_aщive_nёock
(
ev
, 
EV_TIMEOUT
, 1);

2217 
	}
}

2220 
	$evТt_queue_їmove
(
evТt_ba£
 *
ba£
, 
evТt
 *
ev
, 
queue
)

2222 
	`EVENT_BASE_ASSERT_LOCKED
(
ba£
);

2224 iа(!(
ev
->
ev_жags
 & 
queue
)) {

2225 
	`evТt_Фrx
(1, "%s: %p(fd %dиnў oјqueuР%x", 
__func__
,

2226 
ev
,Гv->
ev_fd
, 
queue
);

2230 iа(~
ev
->
ev_жags
 & 
EVLIST_INTERNAL
)

2231 
ba£
->
evТt_couЅ
--;

2233 
ev
->
ev_жags
 &р~
queue
;

2234 
queue
) {

2235 
EVLIST_INSERTED
:

2236 
	`TAILQ_REMOVE
(&
ba£
->
evТtqueue
, 
ev
, 
ev_√xt
);

2238 
EVLIST_ACTIVE
:

2239 
ba£
->
evТt_couЅ_aщive
--;

2240 
	`TAILQ_REMOVE
(&
ba£
->
aщivequeues
[
ev
->
ev_іi
],

2241 
ev
, 
ev_aщive_√xt
);

2243 
EVLIST_TIMEOUT
:

2244 iа(
	`is_commЏ_timeout
(&
ev
->
ev_timeout
, 
ba£
)) {

2245 
commЏ_timeout_li°
 *
щl
 =

2246 
	`gС_commЏ_timeout_li°
(
ba£
, &
ev
->
ev_timeout
);

2247 
	`TAILQ_REMOVE
(&
щl
->
evТts
, 
ev
,

2248 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
);

2250 
	`mЪ_hЧp_Фa£
(&
ba£
->
timehЧp
, 
ev
);

2254 
	`evТt_Фrx
(1, "%s: unknowјqueuР%x", 
__func__
, 
queue
);

2256 
	}
}

2259 
	$Ъ£є_commЏ_timeout_Ъ№dФ
(
commЏ_timeout_li°
 *
щl
,

2260 
evТt
 *
ev
)

2262 
evТt
 *
e
;

2263 
	`TAILQ_FOREACH_REVERSE
(
e
, &
щl
->
evТts
,

2264 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
, 
evТt_li°
) {

2269 
	`EVUTIL_ASSERT
(

2270 
	`is_Іme_commЏ_timeout
(&
e
->
ev_timeout
, &
ev
->ev_timeout));

2271 iа(
	`evutЮ_timФcmp
(&
ev
->
ev_timeout
, &
e
->ev_timeout, >=)) {

2272 
	`TAILQ_INSERT_AFTER
(&
щl
->
evТts
, 
e
, 
ev
,

2273 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
);

2277 
	`TAILQ_INSERT_HEAD
(&
щl
->
evТts
, 
ev
,

2278 
ev_timeout_pos
.
ev_√xt_wЩh_commЏ_timeout
);

2279 
	}
}

2282 
	$evТt_queue_Ъ£є
(
evТt_ba£
 *
ba£
, 
evТt
 *
ev
, 
queue
)

2284 
	`EVENT_BASE_ASSERT_LOCKED
(
ba£
);

2286 iа(
ev
->
ev_жags
 & 
queue
) {

2288 iа(
queue
 & 
EVLIST_ACTIVE
)

2291 
	`evТt_Фrx
(1, "%s: %p(fd %dиЃїady oјqueuР%x", 
__func__
,

2292 
ev
,Гv->
ev_fd
, 
queue
);

2296 iа(~
ev
->
ev_жags
 & 
EVLIST_INTERNAL
)

2297 
ba£
->
evТt_couЅ
++;

2299 
ev
->
ev_жags
 |р
queue
;

2300 
queue
) {

2301 
EVLIST_INSERTED
:

2302 
	`TAILQ_INSERT_TAIL
(&
ba£
->
evТtqueue
, 
ev
, 
ev_√xt
);

2304 
EVLIST_ACTIVE
:

2305 
ba£
->
evТt_couЅ_aщive
++;

2306 
	`TAILQ_INSERT_TAIL
(&
ba£
->
aщivequeues
[
ev
->
ev_іi
],

2307 
ev
,
ev_aщive_√xt
);

2309 
EVLIST_TIMEOUT
: {

2310 iа(
	`is_commЏ_timeout
(&
ev
->
ev_timeout
, 
ba£
)) {

2311 
commЏ_timeout_li°
 *
щl
 =

2312 
	`gС_commЏ_timeout_li°
(
ba£
, &
ev
->
ev_timeout
);

2313 
	`Ъ£є_commЏ_timeout_Ъ№dФ
(
щl
, 
ev
);

2315 
	`mЪ_hЧp_push
(&
ba£
->
timehЧp
, 
ev
);

2319 
	`evТt_Фrx
(1, "%s: unknowјqueuР%x", 
__func__
, 
queue
);

2321 
	}
}

2326 
	$evТt_gС_vФsiЏ
()

2328  (
_EVENT_VERSION
);

2329 
	}
}

2331 
ev_uЪt32_t


2332 
	$evТt_gС_vФsiЏ_numbФ
()

2334  (
_EVENT_NUMERIC_VERSION
);

2335 
	}
}

2343 
	$evТt_gС_mСhod
()

2345  (
cuЉТt_ba£
->
ev£l
->
«me
);

2346 
	}
}

2348 #iвdeа
_EVENT_DISABLE_MM_REPLACEMENT


2349 *(*
	g_mm_mЃloc_в
)(
size_t
 
	gsz
ир
NULL
;

2350 *(*
	g_mm_їЃloc_в
)(*
	gp
, 
size_t
 
	gsz
ир
NULL
;

2351 (*
_mm_дУ_в
)(*
p
ир
NULL
;

2354 
	$mm_mЃloc
(
size_t
 
sz
)

2356 iа(
_mm_mЃloc_в
)

2357  
	`_mm_mЃloc_в
(
sz
);

2359  
	`mЃloc
(
sz
);

2360 
	}
}

2363 
	$mm_€ќoc
(
size_t
 
couЅ
, size_И
size
)

2365 iа(
_mm_mЃloc_в
) {

2366 
size_t
 
sz
 = 
couЅ
 * 
size
;

2367 *
p
 = 
	`_mm_mЃloc_в
(
sz
);

2368 iа(
p
)

2369 
	`mem£t
(
p
, 0, 
sz
);

2370  
p
;

2372  
	`€ќoc
(
couЅ
, 
size
);

2373 
	}
}

2376 
	$mm_°rdup
(cЏ° *
°r
)

2378 iа(
_mm_mЃloc_в
) {

2379 
size_t
 
 
 = 
	`°ЊТ
(
°r
);

2380 *
p
 = 
	`_mm_mЃloc_в
(
 
+1);

2381 iа(
p
)

2382 
	`memэy
(
p
, 
°r
, 
 
+1);

2383  
p
;

2385 #ifdeа
WIN32


2386  
	`_°rdup
(
°r
);

2388  
	`°rdup
(
°r
);

2390 
	}
}

2393 
	$mm_їЃloc
(*
±r
, 
size_t
 
sz
)

2395 iа(
_mm_їЃloc_в
)

2396  
	`_mm_їЃloc_в
(
±r
, 
sz
);

2398  
	`їЃloc
(
±r
, 
sz
);

2399 
	}
}

2402 
	$mm_дУ
(*
±r
)

2404 iа(
_mm_дУ_в
)

2405 
	`_mm_дУ_в
(
±r
);

2407 
	`дУ
(
±r
);

2408 
	}
}

2411 
evТt_£t_mem_funщiЏs
(*(*
mЃloc_в
)(
size_t
 
sz
),

2412 *(*
їЃloc_в
)(*
±r
, 
size_t
 
sz
),

2413 (*
дУ_в
)(*
±r
))

2415 
_mm_mЃloc_в
 = 
mЃloc_в
;

2416 
_mm_їЃloc_в
 = 
їЃloc_в
;

2417 
_mm_дУ_в
 = 
дУ_в
;

2418 
	}
}

2421 #iа
defЪed
(
_EVENT_HAVE_EVENTFD
и&& defЪed(
_EVENT_HAVE_SYS_EVENTFD_H
)

2423 
	$evthїad_nўify_dњЪ_evТtfd
(
fd
, 
wh©
, *
ђg
)

2425 
ev_uЪt64_t
 
msg
;

2427 
	`їad
(
fd
, (*и&
msg
, (msg));

2428 
	}
}

2432 
	$evthїad_nўify_dњЪ_deзu…
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

2434 
buf
[128];

2435 #ifdeа
WIN32


2436 
	`їcv
(
fd
, (*)
buf
, (buf), 0) > 0)

2439 
	`їad
(
fd
, (*)
buf
, (buf)) > 0)

2442 
	}
}

2445 
	$evthїad_make_ba£_nўifЯbЋ
(
evТt_ba£
 *
ba£
)

2447 (*
cb
)(
evutЮ_sockС_t
, , *ир
evthїad_nўify_dњЪ_deзu…
;

2448 (*
nўify
)(
evТt_ba£
 *ир
evthїad_nўify_ba£_deзu…
;

2451 iа(!
ba£
)

2454 iа(
ba£
->
th_nўify_fd
[0] >= 0)

2457 #iа
	`defЪed
(
_EVENT_HAVE_EVENTFD
и&& defЪed(
_EVENT_HAVE_SYS_EVENTFD_H
)

2458 
ba£
->
th_nўify_fd
[0] = 
	`evТtfd
(0, 0);

2459 iа(
ba£
->
th_nўify_fd
[0] >= 0) {

2460 
nўify
 = 
evthїad_nўify_ba£_evТtfd
;

2461 
cb
 = 
evthїad_nўify_dњЪ_evТtfd
;

2464 #iа
	`defЪed
(
_EVENT_HAVE_PIPE
)

2466 iа((
ba£
->
ev£l
->
г©uїs
 & 
EV_FEATURE_FDS
)) {

2467 iа(
	`pЭe
(
ba£
->
th_nўify_fd
) < 0)

2468 
	`evТt_wђn
("%s:ЕЭe", 
__func__
);

2471 iа(
ba£
->
th_nўify_fd
[0] < 0)

2474 #ifdeа
WIN32


2475 
	#LOCAL_SOCKETPAIR_AF
 
AF_INET


	)

2477 
	#LOCAL_SOCKETPAIR_AF
 
AF_UNIX


	)

2480 iа(
	`evutЮ_sockСЈЬ
(
LOCAL_SOCKETPAIR_AF
, 
SOCK_STREAM
, 0,

2481 
ba£
->
th_nўify_fd
) == -1) {

2482 
	`evТt_sock_wђn
(-1, "%s: sockСЈЬ", 
__func__
);

2487 
	`evutЮ_make_sockС_nЏblockЪg
(
ba£
->
th_nўify_fd
[0]);

2489 
ba£
->
th_nўify_в
 = 
nўify
;

2498 
	`evТt_assign
(&
ba£
->
th_nўify
, ba£, ba£->
th_nўify_fd
[0],

2499 
EV_READ
|
EV_PERSIST
, 
cb
, 
ba£
);

2502 
ba£
->
th_nўify
.
ev_жags
 |р
EVLIST_INTERNAL
;

2504  
	`evТt_add
(&
ba£
->
th_nўify
, 
NULL
);

2505 
	}
}

2508 
	$evТt_ba£_dump_evТts
(
evТt_ba£
 *
ba£
, 
FILE
 *
ouНut
)

2510 
evТt
 *
e
;

2511 
i
;

2512 
	`еrЪtf
(
ouНut
, "InsertedГvents:\n");

2513 
	`TAILQ_FOREACH
(
e
, &
ba£
->
evТtqueue
, 
ev_√xt
) {

2514 
	`еrЪtf
(
ouНut
, " %p [fd %ld]%s%s%s%s%s\n",

2515 (*)
e
, (л->
ev_fd
,

2516 (
e
->
ev_evТts
&
EV_READ
)?" Read":"",

2517 (
e
->
ev_evТts
&
EV_WRITE
)?" Write":"",

2518 (
e
->
ev_evТts
&
EV_SIGNAL
)?" Signal":"",

2519 (
e
->
ev_evТts
&
EV_TIMEOUT
)?" Timeout":"",

2520 (
e
->
ev_evТts
&
EV_PERSIST
)?" Persist":"");

2523 
i
 = 0; i < 
ba£
->
«щivequeues
; ++i) {

2524 iа(
	`TAILQ_EMPTY
(&
ba£
->
aщivequeues
[
i
]))

2526 
	`еrЪtf
(
ouНut
, "AщivРevТt†[іi№Щy %d]:\n", 
i
);

2527 
	`TAILQ_FOREACH
(
e
, &
ba£
->
evТtqueue
, 
ev_√xt
) {

2528 
	`еrЪtf
(
ouНut
, " %p [fd %ld]%s%s%s%s\n",

2529 (*)
e
, (л->
ev_fd
,

2530 (
e
->
ev_їs
&
EV_READ
)?" ReadЗctive":"",

2531 (
e
->
ev_їs
&
EV_WRITE
)?" WriteЗctive":"",

2532 (
e
->
ev_їs
&
EV_SIGNAL
)?" SignalЗctive":"",

2533 (
e
->
ev_їs
&
EV_TIMEOUT
)?" TimeoutЗctive":"");

2536 
	}
}

	@event.h

27 #iвdeа
_EVENT_H_


28 
	#_EVENT_H_


	)

161 #ifdeа
__эlu•lus


165 
	~<evТt-cЏfig.h
>

166 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


167 
	~<sys/ty≥s.h
>

169 #ifdeа
_EVENT_HAVE_SYS_TIME_H


170 
	~<sys/time.h
>

172 #ifdeа
_EVENT_HAVE_STDINT_H


173 
	~<°dЪt.h
>

175 
	~<°dђg.h
>

178 
	~<evutЮ.h
>

180 #ifdeа
WIN32


181 
	#WIN32_LEAN_AND_MEAN


	)

182 
	~<wЪsock2.h
>

183 
	~<wЪdows.h
>

184 #undeа
WIN32_LEAN_AND_MEAN


185 
	tu_chђ
;

186 
	tu_sh№t
;

189 
	~<evТt2/evТt_°ruщ.h
>

190 
	~<evТt2/evТt.h
>

191 
	~<evТt2/evТt_comЈt.h
>

192 
	~<evТt2/bufгr.h
>

193 
	~<evТt2/bufгr_comЈt.h
>

194 
	~<evТt2/bufгїvТt.h
>

195 
	~<evТt2/bufгїvТt_°ruщ.h
>

196 
	~<evТt2/bufгїvТt_comЈt.h
>

197 
	~<evТt2/Пg.h
>

198 
	~<evТt2/Пg_comЈt.h
>

200 #ifdeа
__эlu•lus


	@event_iocp.c

27 
	~<wЪsock2.h
>

28 
	~<wЪdows.h
>

29 
	~<іoыss.h
>

30 
	~<°dio.h
>

31 
	~<mswsock.h
>

33 
	~"evТt2/utЮ.h
"

34 
	~"utЮ-ЪЛЇЃ.h
"

35 
	~"ioэ-ЪЛЇЃ.h
"

36 
	~"log-ЪЛЇЃ.h
"

37 
	~"mm-ЪЛЇЃ.h
"

38 
	~"evТt-ЪЛЇЃ.h
"

40 
	#NOTIFICATION_KEY
 ((
ULONG_PTR
)-1)

	)

43 
	$evТt_ovФѕµed_ЪЩ
(
evТt_ovФѕµed
 *
o
, 
ioэ_€ќback
 
cb
)

45 
	`mem£t
(
o
, 0, (
evТt_ovФѕµed
));

46 
o
->
cb
 = cb;

47 
	}
}

50 
	$h™dЋ_ТМy
(
OVERLAPPED
 *
o
, 
ULONG_PTR
 
comґСiЏ_key
, 
DWORD
 
nByЛs
, 
ok
)

52 
evТt_ovФѕµed
 *
eo
 =

53 
	`EVUTIL_UPCAST
(
o
, 
evТt_ovФѕµed
, 
ovФѕµed
);

54 
eo
->
	`cb
”o, 
comґСiЏ_key
, 
nByЛs
, 
ok
);

55 
	}
}

58 
	$loЁ
(*
_p№t
)

60 
evТt_ioэ_p№t
 *
p№t
 = 
_p№t
;

61 
ms
 = 
p№t
->ms;

62 
HANDLE
 
p
 = 
p№t
->port;

64 iа(
ms
 <= 0)

65 
ms
 = 
INFINITE
;

68 
OVERLAPPED
 *
ovФѕµed
=
NULL
;

69 
ULONG_PTR
 
key
=0;

70 
DWORD
 
byЛs
=0;

71 
ok
 = 
	`GСQueuedComґСiЏSПtus
(
p
, &
byЛs
, &
key
,

72 &
ovФѕµed
, 
ms
);

73 
	`EЅФCrЩi€lSeщiЏ
(&
p№t
->
lock
);

74 iа(
p№t
->
shutdown
) {

75 iа(--
p№t
->
n_live_thїads
 == 0)

76 
	`RЦЧ£Sem≠h№e
(
p№t
->
shutdownSem≠h№e
, 1, 
NULL
);

77 
	`LЧveCrЩi€lSeщiЏ
(&
p№t
->
lock
);

80 
	`LЧveCrЩi€lSeщiЏ
(&
p№t
->
lock
);

82 iа(
key
 !р
NOTIFICATION_KEY
 && 
ovФѕµed
)

83 
	`h™dЋ_ТМy
(
ovФѕµed
, 
key
, 
byЛs
, 
ok
);

84 iа(!
ovФѕµed
)

87 
	`evТt_wђnx
("GetQueuedCompletionStatusГxited withВoГvent.");

88 
	`EЅФCrЩi€lSeщiЏ
(&
p№t
->
lock
);

89 iа(--
p№t
->
n_live_thїads
 == 0)

90 
	`RЦЧ£Sem≠h№e
(
p№t
->
shutdownSem≠h№e
, 1, 
NULL
);

91 
	`LЧveCrЩi€lSeщiЏ
(&
p№t
->
lock
);

92 
	}
}

95 
	$evТt_ioэ_p№t_assocЯЛ
(
evТt_ioэ_p№t
 *
p№t
, 
evutЮ_sockС_t
 
fd
,

96 
ev_uЪНМ_t
 
key
)

98 
HANDLE
 
h
;

99 
h
 = 
	`Cї©eIoComґСiЏP№t
((
HANDLE
)
fd
, 
p№t
->p№t, 
key
,Е№t->
n_thїads
);

100 iа(!
h
)

103 
	}
}

106 
	$gС_exЛnsiЏ_funщiЏ
(
SOCKET
 
s
, cЏ° 
GUID
 *
which_в
)

108 *
±r
 = 
NULL
;

109 
DWORD
 
byЛs
=0;

110 
	`WSAIoщl
(
s
, 
SIO_GET_EXTENSION_FUNCTION_POINTER
,

111 (
GUID
*)
which_в
, (*which_fn),

112 &
±r
, (ptr),

113 &
byЛs
, 
NULL
, NULL);

119  
±r
;

120 
	}
}

125 #iвdeа
WSAID_ACCEPTEX


126 
	#WSAID_ACCEPTEX
 \

127 {0xb5367df1,0xcbac,0x11cf,{0x95,0x€,0x00,0x80,0x5f,0x48,0xa1,0x92}}

	)

129 #iвdeа
WSAID_CONNECTEX


130 
	#WSAID_CONNECTEX
 \

131 {0x25a207b9,0xddf3,0x4660,{0x8e,0xe9,0x76,0xe5,0x8c,0x74,0x06,0x3e}}

	)

133 #iвdeа
WSAID_GETACCEPTEXSOCKADDRS


134 
	#WSAID_GETACCEPTEXSOCKADDRS
 \

135 {0xb5367df2,0xcbac,0x11cf,{0x95,0x€,0x00,0x80,0x5f,0x48,0xa1,0x92}}

	)

139 
	$ЪЩ_exЛnsiЏ_funщiЏs
(
wЪ32_exЛnsiЏ_вs
 *
ext
)

141 cЏ° 
GUID
 
acы±ex
 = 
WSAID_ACCEPTEX
;

142 cЏ° 
GUID
 
cЏ√щex
 = 
WSAID_CONNECTEX
;

143 cЏ° 
GUID
 
gСacы±exsockaddrs
 = 
WSAID_GETACCEPTEXSOCKADDRS
;

144 
SOCKET
 
s
 = 
	`sockС
(
AF_INET
, 
SOCK_STREAM
, 0);

145 iа(
s
 =р
INVALID_SOCKET
)

147 
ext
->
Acы±Ex
 = 
	`gС_exЛnsiЏ_funщiЏ
(
s
, &
acы±ex
);

148 
ext
->
CЏ√щEx
 = 
	`gС_exЛnsiЏ_funщiЏ
(
s
, &
cЏ√щex
);

149 
ext
->
GСAcы±ExSockaddrs
 = 
	`gС_exЛnsiЏ_funщiЏ
(
s
,

150 &
gСacы±exsockaddrs
);

151 
	`юo£sockС
(
s
);

152 
	}
}

154 
wЪ32_exЛnsiЏ_вs
 
	gthe_exЛnsiЏ_вs
;

155 
	gexЛnsiЏ_вs_ЪЩЯlized
 = 0;

157 cЏ° 
wЪ32_exЛnsiЏ_вs
 *

158 
	$evТt_gС_wЪ32_exЛnsiЏ_вs
()

160  &
the_exЛnsiЏ_вs
;

161 
	}
}

163 
evТt_ioэ_p№t
 *

164 
	$evТt_ioэ_p№t_ѕunch
()

166 
evТt_ioэ_p№t
 *
p№t
;

167 
i
;

169 iа(!
exЛnsiЏ_вs_ЪЩЯlized
)

170 
	`ЪЩ_exЛnsiЏ_funщiЏs
(&
the_exЛnsiЏ_вs
);

172 iа(!(
p№t
 = 
	`mm_€ќoc
(1, (
evТt_ioэ_p№t
))))

173  
NULL
;

174 
p№t
->
n_thїads
 = 2;

175 
p№t
->
thїads
 = 
	`€ќoc
’№t->
n_thїads
, (
HANDLE
));

176 iа(!
p№t
->
thїads
)

177 
Фr
;

179 
p№t
->p№Ир
	`Cї©eIoComґСiЏP№t
(
INVALID_HANDLE_VALUE
, 
NULL
, 0,Е№t->
n_thїads
);

180 
p№t
->
ms
 = -1;

181 iа(!
p№t
->port)

182 
Фr
;

184 
p№t
->
shutdownSem≠h№e
 = 
	`Cї©eSem≠h№e
(
NULL
, 0, 1, NULL);

185 iа(!
p№t
->
shutdownSem≠h№e
)

186 
Фr
;

188 
i
=0; i<
p№t
->
n_thїads
; ++i) {

189 
ev_uЪНМ_t
 
th
 = 
	`_begЪthїad
(
loЁ
, 0, 
p№t
);

190 iа(
th
 =р(
ev_uЪНМ_t
)-1)

191 
Фr
;

192 
p№t
->
thїads
[
i
] = (
HANDLE
)
th
;

193 ++
p№t
->
n_live_thїads
;

196 
	`InЩЯlizeCrЩi€lSeщiЏAndSpЪCouЅ
(&
p№t
->
lock
, 1000);

198  
p№t
;

199 
Фr
:

200 iа(
p№t
->port)

201 
	`Clo£H™dЋ
(
p№t
->port);

202 iа(
p№t
->
thїads
)

203 
	`mm_дУ
(
p№t
->
thїads
);

204 iа(
p№t
->
shutdownSem≠h№e
)

205 
	`Clo£H™dЋ
(
p№t
->
shutdownSem≠h№e
);

206 
	`mm_дУ
(
p№t
);

207  
NULL
;

208 
	}
}

211 
	$_evТt_ioэ_p№t_u∆ock_™d_дУ
(
evТt_ioэ_p№t
 *
p№t
)

213 
	`DЦСeCrЩi€lSeщiЏ
(&
p№t
->
lock
);

214 
	`Clo£H™dЋ
(
p№t
->port);

215 
	`Clo£H™dЋ
(
p№t
->
shutdownSem≠h№e
);

216 
	`mm_дУ
(
p№t
->
thїads
);

217 
	`mm_дУ
(
p№t
);

218 
	}
}

221 
	$evТt_ioэ_nўify_Ѓl
(
evТt_ioэ_p№t
 *
p№t
)

223 
i
, 
r
, 
ok
=1;

224 
i
=0; i<
p№t
->
n_thїads
; ++i) {

225 
r
 = 
	`Po°QueuedComґСiЏSПtus
(
p№t
->p№t, 0, 
NOTIFICATION_KEY
,

226 
NULL
);

227 iа(!
r
)

228 
ok
 = 0;

230  
ok
 ? 0 : -1;

231 
	}
}

234 
	$evТt_ioэ_shutdown
(
evТt_ioэ_p№t
 *
p№t
, 
waЩM£c
)

236 
n
;

237 
	`EЅФCrЩi€lSeщiЏ
(&
p№t
->
lock
);

238 
p№t
->
shutdown
 = 1;

239 
	`LЧveCrЩi€lSeщiЏ
(&
p№t
->
lock
);

240 
	`evТt_ioэ_nўify_Ѓl
(
p№t
);

242 
	`WaЩF№SЪgЋObjeщ
(
p№t
->
shutdownSem≠h№e
, 
waЩM£c
);

243 
	`EЅФCrЩi€lSeщiЏ
(&
p№t
->
lock
);

244 
n
 = 
p№t
->
n_live_thїads
;

245 
	`LЧveCrЩi€lSeщiЏ
(&
p№t
->
lock
);

246 iа(
n
 == 0) {

247 
	`_evТt_ioэ_p№t_u∆ock_™d_дУ
(
p№t
);

252 
	}
}

255 
	$evТt_ioэ_aщiv©e_ovФѕµed
(

256 
evТt_ioэ_p№t
 *
p№t
, 
evТt_ovФѕµed
 *
o
,

257 
ev_uЪНМ_t
 
key
, 
ev_uЪt32_t
 
n
)

259 
BOOL
 
r
;

261 
r
 = 
	`Po°QueuedComґСiЏSПtus
(
p№t
->p№t, 
n
, 
key
, &
o
->
ovФѕµed
);

262  (
r
==0) ? -1 : 0;

263 
	}
}

265 
evТt_ioэ_p№t
 *

266 
	$evТt_ba£_gС_ioэ
(
evТt_ba£
 *
ba£
)

268 #ifdeа
WIN32


269  
ba£
->
ioэ
;

271  
NULL
;

273 
	}
}

	@event_tagging.c

27 
	~"evТt-cЏfig.h
"

29 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


30 
	~<sys/ty≥s.h
>

32 #ifdeа
_EVENT_HAVE_SYS_PARAM_H


33 
	~<sys/Јњm.h
>

36 #ifdeа
WIN32


37 
	#WIN32_LEAN_AND_MEAN


	)

38 
	~<wЪsock2.h
>

39 
	~<wЪdows.h
>

40 #undeа
WIN32_LEAN_AND_MEAN


42 
	~<sys/ioщl.h
>

45 
	~<sys/queue.h
>

46 #ifdeа
_EVENT_HAVE_SYS_TIME_H


47 
	~<sys/time.h
>

50 
	~<ФЇo.h
>

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rЪg.h
>

54 #iвdeа
WIN32


55 
	~<sy¶og.h
>

57 #ifdeа
_EVENT_HAVE_UNISTD_H


58 
	~<uni°d.h
>

61 
	~"evТt2/evТt.h
"

62 
	~"evТt2/Пg.h
"

63 
	~"evТt2/bufгr.h
"

64 
	~"log-ЪЛЇЃ.h
"

65 
	~"mm-ЪЛЇЃ.h
"

66 
	~"utЮ-ЪЛЇЃ.h
"

92 
evПg_decode_Ъt
(
ev_uЪt32_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
);

93 
evПg_decode_Ъt64
(
ev_uЪt64_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
);

94 
evПg_Тcode_Пg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
);

95 
evПg_decode_Пg
(
ev_uЪt32_t
 *
±ag
, 
evbufгr
 *
evbuf
);

98 
	$evПg_ЪЩ
()

100 
	}
}

113 
	#ENCODE_INT_INTERNAL
(
d©a
, 
numbФ
) do { \

114 
off
 = 1, 
nibbЋs
 = 0; \

116 
	`mem£t
(
d©a
, 0, (
numbФ
)+1); \

117 
numbФ
) { \

118 iа(
off
 & 0x1) \

119 
d©a
[
off
/2] = (d©a[off/2] & 0xf0и| (
numbФ
 & 0x0f); \

121 
d©a
[
off
/2] = (data[off/2] & 0x0f) | \

122 ((
numbФ
 & 0x0f) << 4); \

123 
numbФ
 >>= 4; \

124 
off
++; \

127 iа(
off
 > 2) \

128 
nibbЋs
 = 
off
 - 2; \

131 
d©a
[0] = (d©a[0] & 0x0fи| ((
nibbЋs
 & 0x0f) << 4); \

133  ((
off
 + 1) / 2); \

134 } 0)

	)

136 
ЪlЪe
 

137 
	$Тcode_Ъt_ЪЛЇЃ
(
ev_uЪt8_t
 *
d©a
, 
ev_uЪt32_t
 
numbФ
)

139 
	`ENCODE_INT_INTERNAL
(
d©a
, 
numbФ
);

140 
	}
}

142 
ЪlЪe
 

143 
	$Тcode_Ъt64_ЪЛЇЃ
(
ev_uЪt8_t
 *
d©a
, 
ev_uЪt64_t
 
numbФ
)

145 
	`ENCODE_INT_INTERNAL
(
d©a
, 
numbФ
);

146 
	}
}

149 
	$evПg_Тcode_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
numbФ
)

151 
ev_uЪt8_t
 
d©a
[5];

152 
Ћn
 = 
	`Тcode_Ъt_ЪЛЇЃ
(
d©a
, 
numbФ
);

153 
	`evbufгr_add
(
evbuf
, 
d©a
, 
Ћn
);

154 
	}
}

157 
	$evПg_Тcode_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt64_t
 
numbФ
)

159 
ev_uЪt8_t
 
d©a
[9];

160 
Ћn
 = 
	`Тcode_Ъt64_ЪЛЇЃ
(
d©a
, 
numbФ
);

161 
	`evbufгr_add
(
evbuf
, 
d©a
, 
Ћn
);

162 
	}
}

170 
	$evПg_Тcode_Пg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
)

172 
byЛs
 = 0;

173 
ev_uЪt8_t
 
d©a
[5];

175 
	`mem£t
(
d©a
, 0, (data));

177 
ev_uЪt8_t
 
lowФ
 = 
Пg
 & 0x7f;

178 
Пg
 >>= 7;

180 iа(
Пg
)

181 
lowФ
 |= 0x80;

183 
d©a
[
byЛs
++] = 
lowФ
;

184 } 
Пg
);

186 iа(
evbuf
 !р
NULL
)

187 
	`evbufгr_add
(
evbuf
, 
d©a
, 
byЛs
);

189  (
byЛs
);

190 
	}
}

193 
	$decode_Пg_ЪЛЇЃ
(
ev_uЪt32_t
 *
±ag
, 
evbufгr
 *
evbuf
, 
dodњЪ
)

195 
ev_uЪt32_t
 
numbФ
 = 0;

196 
Ћn
 = 
	`evbufгr_gС_Ћngth
(
evbuf
);

197 
ev_uЪt8_t
 *
d©a
;

198 
couЅ
 = 0, 
shiб
 = 0, 
dЏe
 = 0;

204 
d©a
 = 
	`evbufгr_puќup
(

205 
evbuf
, 
Ћn
 < (
numbФ
) + 1 ?Жen : (number) + 1);

207 
couЅ
++ < 
Ћn
) {

208 
ev_uЪt8_t
 
lowФ
 = *
d©a
++;

209 
numbФ
 |р(
lowФ
 & 0x7fи<< 
shiб
;

210 
shiб
 += 7;

212 iа(!(
lowФ
 & 0x80)) {

213 
dЏe
 = 1;

218 iа(!
dЏe
)

221 iа(
dodњЪ
)

222 
	`evbufгr_dњЪ
(
evbuf
, 
couЅ
);

224 iа(
±ag
 !р
NULL
)

225 *
±ag
 = 
numbФ
;

227  (
couЅ
);

228 
	}
}

231 
	$evПg_decode_Пg
(
ev_uЪt32_t
 *
±ag
, 
evbufгr
 *
evbuf
)

233  (
	`decode_Пg_ЪЛЇЃ
(
±ag
, 
evbuf
, 1 ));

234 
	}
}

243 
	$evПg_mђshЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

244 cЏ° *
d©a
, 
ev_uЪt32_t
 
Ћn
)

246 
	`evПg_Тcode_Пg
(
evbuf
, 
Пg
);

247 
	`evПg_Тcode_Ъt
(
evbuf
, 
Ћn
);

248 
	`evbufгr_add
(
evbuf
, (*)
d©a
, 
Ћn
);

249 
	}
}

252 
	$evПg_mђshЃ_bufгr
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

253 
evbufгr
 *
d©a
)

255 
	`evПg_Тcode_Пg
(
evbuf
, 
Пg
);

256 
	`evПg_Тcode_Ъt
(
evbuf
, 
	`evbufгr_gС_Ћngth
(
d©a
));

257 
	`evbufгr_add_bufгr
(
evbuf
, 
d©a
);

258 
	}
}

262 
	$evПg_mђshЃ_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,Гv_uЪt32_И
ЪЛgФ
)

264 
ev_uЪt8_t
 
d©a
[5];

265 
Ћn
 = 
	`Тcode_Ъt_ЪЛЇЃ
(
d©a
, 
ЪЛgФ
);

267 
	`evПg_Тcode_Пg
(
evbuf
, 
Пg
);

268 
	`evПg_Тcode_Ъt
(
evbuf
, 
Ћn
);

269 
	`evbufгr_add
(
evbuf
, 
d©a
, 
Ћn
);

270 
	}
}

273 
	$evПg_mђshЃ_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

274 
ev_uЪt64_t
 
ЪЛgФ
)

276 
ev_uЪt8_t
 
d©a
[9];

277 
Ћn
 = 
	`Тcode_Ъt64_ЪЛЇЃ
(
d©a
, 
ЪЛgФ
);

279 
	`evПg_Тcode_Пg
(
evbuf
, 
Пg
);

280 
	`evПg_Тcode_Ъt
(
evbuf
, 
Ћn
);

281 
	`evbufгr_add
(
evbuf
, 
d©a
, 
Ћn
);

282 
	}
}

285 
	$evПg_mђshЃ_°rЪg
(
evbufгr
 *
buf
, 
ev_uЪt32_t
 
Пg
, cЏ° *
°rЪg
)

287 
	`evПg_mђshЃ
(
buf
, 
Пg
, 
°rЪg
, 
	`°ЊТ
(string));

288 
	}
}

291 
	$evПg_mђshЃ_timevЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
, 
timevЃ
 *
tv
)

293 
ev_uЪt8_t
 
d©a
[10];

294 
Ћn
 = 
	`Тcode_Ъt_ЪЛЇЃ
(
d©a
, 
tv
->
tv_£c
);

295 
Ћn
 +р
	`Тcode_Ъt_ЪЛЇЃ
(
d©a
 +ЖТ, 
tv
->
tv_u£c
);

296 
	`evПg_mђshЃ
(
evbuf
, 
Пg
, 
d©a
, 
Ћn
);

297 
	}
}

299 
	#DECODE_INT_INTERNAL
(
numbФ
, 
maxnibbЋs
, 
≤umbФ
, 
evbuf
, 
off£t
) \

301 
ev_uЪt8_t
 *
d©a
; \

302 
Ћn
 = 
	`evbufгr_gС_Ћngth
(
evbuf
и- 
off£t
; \

303 
nibbЋs
 = 0; \

305 iа(
Ћn
 <= 0) \

309 
d©a
 = 
	`evbufгr_puќup
(
evbuf
, 
off£t
 + 1) + offset; \

311 
nibbЋs
 = ((
d©a
[0] & 0xf0) >> 4) + 1; \

312 iа(
nibbЋs
 > 
maxnibbЋs
 || (nibbЋ†>> 1и+ 1 > 
Ћn
) \

314 
Ћn
 = (
nibbЋs
 >> 1) + 1; \

316 
d©a
 = 
	`evbufгr_puќup
(
evbuf
, 
off£t
 + 
Ћn
) + offset; \

318 
nibbЋs
 > 0) { \

319 
numbФ
 <<= 4; \

320 iа(
nibbЋs
 & 0x1) \

321 
numbФ
 |р
d©a
[
nibbЋs
 >> 1] & 0x0f; \

323 
numbФ
 |р(
d©a
[
nibbЋs
 >> 1] & 0xf0) >> 4; \

324 
nibbЋs
--; \

327 *
≤umbФ
 = 
numbФ
; \

329  (
Ћn
); \

330 } 0)

	)

342 
	$decode_Ъt_ЪЛЇЃ
(
ev_uЪt32_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
, 
off£t
)

344 
ev_uЪt32_t
 
numbФ
 = 0;

345 
	`DECODE_INT_INTERNAL
(
numbФ
, 8, 
≤umbФ
, 
evbuf
, 
off£t
);

346 
	}
}

349 
	$decode_Ъt64_ЪЛЇЃ
(
ev_uЪt64_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
, 
off£t
)

351 
ev_uЪt64_t
 
numbФ
 = 0;

352 
	`DECODE_INT_INTERNAL
(
numbФ
, 16, 
≤umbФ
, 
evbuf
, 
off£t
);

353 
	}
}

356 
	$evПg_decode_Ъt
(
ev_uЪt32_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
)

358 
їs
 = 
	`decode_Ъt_ЪЛЇЃ
(
≤umbФ
, 
evbuf
, 0);

359 iа(
їs
 != -1)

360 
	`evbufгr_dњЪ
(
evbuf
, 
їs
);

362  (
їs
 == -1 ? -1 : 0);

363 
	}
}

366 
	$evПg_decode_Ъt64
(
ev_uЪt64_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
)

368 
їs
 = 
	`decode_Ъt64_ЪЛЇЃ
(
≤umbФ
, 
evbuf
, 0);

369 iа(
їs
 != -1)

370 
	`evbufгr_dњЪ
(
evbuf
, 
їs
);

372  (
їs
 == -1 ? -1 : 0);

373 
	}
}

376 
	$evПg_≥ek
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
±ag
)

378  (
	`decode_Пg_ЪЛЇЃ
(
±ag
, 
evbuf
, 0 ));

379 
	}
}

382 
	$evПg_≥ek_Ћngth
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
ґТgth
)

384 
їs
, 
Ћn
;

386 
Ћn
 = 
	`decode_Пg_ЪЛЇЃ
(
NULL
, 
evbuf
, 0 );

387 iа(
Ћn
 == -1)

390 
їs
 = 
	`decode_Ъt_ЪЛЇЃ
(
ґТgth
, 
evbuf
, 
Ћn
);

391 iа(
їs
 == -1)

394 *
ґТgth
 +р
їs
 + 
Ћn
;

397 
	}
}

400 
	$evПg_Јylяd_Ћngth
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
ґТgth
)

402 
їs
, 
Ћn
;

404 
Ћn
 = 
	`decode_Пg_ЪЛЇЃ
(
NULL
, 
evbuf
, 0 );

405 iа(
Ћn
 == -1)

408 
їs
 = 
	`decode_Ъt_ЪЛЇЃ
(
ґТgth
, 
evbuf
, 
Ћn
);

409 iа(
їs
 == -1)

413 
	}
}

418 
	$evПg_unmђshЃ_hЧdФ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
±ag
)

420 
ev_uЪt32_t
 
Ћn
;

422 iа(
	`decode_Пg_ЪЛЇЃ
(
±ag
, 
evbuf
, 1 ) == -1)

424 iа(
	`evПg_decode_Ъt
(&
Ћn
, 
evbuf
) == -1)

427 iа(
	`evbufгr_gС_Ћngth
(
evbuf
и< 
Ћn
)

430  (
Ћn
);

431 
	}
}

434 
	$evПg_cЏsume
(
evbufгr
 *
evbuf
)

436 
Ћn
;

437 iа((
Ћn
 = 
	`evПg_unmђshЃ_hЧdФ
(
evbuf
, 
NULL
)) == -1)

439 
	`evbufгr_dњЪ
(
evbuf
, 
Ћn
);

442 
	}
}

447 
	$evПg_unmђshЃ
(
evbufгr
 *
§c
, 
ev_uЪt32_t
 *
±ag
, evbufгЄ*
d°
)

449 
Ћn
;

451 iа((
Ћn
 = 
	`evПg_unmђshЃ_hЧdФ
(
§c
, 
±ag
)) == -1)

454 iа(
	`evbufгr_add
(
d°
, 
	`evbufгr_puќup
(
§c
, 
Ћn
),Жen) == -1)

457 
	`evbufгr_dњЪ
(
§c
, 
Ћn
);

459  (
Ћn
);

460 
	}
}

465 
	$evПg_unmђshЃ_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

466 
ev_uЪt32_t
 *
pЪЛgФ
)

468 
ev_uЪt32_t
 
Пg
;

469 
ev_uЪt32_t
 
Ћn
;

470 
їsu…
;

472 iа(
	`decode_Пg_ЪЛЇЃ
(&
Пg
, 
evbuf
, 1 ) == -1)

474 iа(
√ed_Пg
 !р
Пg
)

476 iа(
	`evПg_decode_Ъt
(&
Ћn
, 
evbuf
) == -1)

479 iа(
	`evbufгr_gС_Ћngth
(
evbuf
и< 
Ћn
)

482 
їsu…
 = 
	`decode_Ъt_ЪЛЇЃ
(
pЪЛgФ
, 
evbuf
, 0);

483 
	`evbufгr_dњЪ
(
evbuf
, 
Ћn
);

484 iа(
їsu…
 < 0 || (
size_t
мesu… > 
Ћn
)

487  
їsu…
;

488 
	}
}

491 
	$evПg_unmђshЃ_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

492 
ev_uЪt64_t
 *
pЪЛgФ
)

494 
ev_uЪt32_t
 
Пg
;

495 
ev_uЪt32_t
 
Ћn
;

496 
їsu…
;

498 iа(
	`decode_Пg_ЪЛЇЃ
(&
Пg
, 
evbuf
, 1 ) == -1)

500 iа(
√ed_Пg
 !р
Пg
)

502 iа(
	`evПg_decode_Ъt
(&
Ћn
, 
evbuf
) == -1)

505 iа(
	`evbufгr_gС_Ћngth
(
evbuf
и< 
Ћn
)

508 
їsu…
 = 
	`decode_Ъt64_ЪЛЇЃ
(
pЪЛgФ
, 
evbuf
, 0);

509 
	`evbufгr_dњЪ
(
evbuf
, 
Ћn
);

510 iа(
їsu…
 < 0 || (
size_t
мesu… > 
Ћn
)

513  
їsu…
;

514 
	}
}

519 
	$evПg_unmђshЃ_fixed
(
evbufгr
 *
§c
, 
ev_uЪt32_t
 
√ed_Пg
, *
d©a
,

520 
size_t
 
Ћn
)

522 
ev_uЪt32_t
 
Пg
;

523 
Пg_Ћn
;

526 iа((
Пg_Ћn
 = 
	`evПg_unmђshЃ_hЧdФ
(
§c
, &
Пg
)) == -1 ||

527 
Пg
 !р
√ed_Пg
)

530 iа(
Пg_Ћn
 !р
Ћn
)

533 
	`evbufгr_їmove
(
§c
, 
d©a
, 
Ћn
);

535 
	}
}

538 
	$evПg_unmђshЃ_°rЪg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

539 **
p°rЪg
)

541 
ev_uЪt32_t
 
Пg
;

542 
Пg_Ћn
;

544 iа((
Пg_Ћn
 = 
	`evПg_unmђshЃ_hЧdФ
(
evbuf
, &
Пg
)) == -1 ||

545 
Пg
 !р
√ed_Пg
)

548 *
p°rЪg
 = 
	`mm_mЃloc
(
Пg_Ћn
 + 1);

549 iа(*
p°rЪg
 =р
NULL
) {

550 
	`evТt_wђn
("%s: mЃloc", 
__func__
);

553 
	`evbufгr_їmove
(
evbuf
, *
p°rЪg
, 
Пg_Ћn
);

554 (*
p°rЪg
)[
Пg_Ћn
] = '\0';

557 
	}
}

560 
	$evПg_unmђshЃ_timevЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

561 
timevЃ
 *
±v
)

563 
ev_uЪt32_t
 
Пg
;

564 
ev_uЪt32_t
 
ЪЛgФ
;

565 
Ћn
, 
off£t
, 
off£t2
;

566 
їsu…
 = -1;

568 iа((
Ћn
 = 
	`evПg_unmђshЃ_hЧdФ
(
evbuf
, &
Пg
)) == -1)

570 iа(
Пg
 !р
√ed_Пg
)

571 
dЏe
;

572 iа((
off£t
 = 
	`decode_Ъt_ЪЛЇЃ
(&
ЪЛgФ
, 
evbuf
, 0)) == -1)

573 
dЏe
;

574 
±v
->
tv_£c
 = 
ЪЛgФ
;

575 iа((
off£t2
 = 
	`decode_Ъt_ЪЛЇЃ
(&
ЪЛgФ
, 
evbuf
, 
off£t
)) == -1)

576 
dЏe
;

577 
±v
->
tv_u£c
 = 
ЪЛgФ
;

578 iа(
off£t
 + 
off£t2
 > 
Ћn
)

579 
dЏe
;

581 
їsu…
 = 0;

582 
dЏe
:

583 
	`evbufгr_dњЪ
(
evbuf
, 
Ћn
);

584  
їsu…
;

585 
	}
}

	@evhttp.h

27 #iвdeа
_EVHTTP_H_


28 
	#_EVHTTP_H_


	)

30 
	~<evТt.h
>

31 
	~<evТt2/hЙp.h
>

32 
	~<evТt2/hЙp_°ruщ.h
>

33 
	~<evТt2/hЙp_comЈt.h
>

	@evmap-internal.h

26 #iвdeа
_EVMAP_H_


27 
	#_EVMAP_H_


	)

37 
	gevТt_ba£
;

38 
	gevТt
;

42 
evm≠_io_ЪЩm≠
(
evТt_io_m≠
* 
щx
);

43 
evm≠_sig«l_ЪЩm≠
(
evТt_sig«l_m≠
* 
щx
);

49 
evm≠_io_юЧr
(
evТt_io_m≠
* 
щx
);

50 
evm≠_sig«l_юЧr
(
evТt_sig«l_m≠
* 
щx
);

60 
evm≠_io_add
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТt
 *
ev
);

69 
evm≠_io_dЦ
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТt
 *
ev
);

76 
evm≠_io_aщive
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТts
);

78 
evm≠_sig«l_add
(
evТt_ba£
 *
ba£
, 
signum
, 
evТt
 *
ev
);

79 
evm≠_sig«l_dЦ
(
evТt_ba£
 *
ba£
, 
signum
, 
evТt
 *
ev
);

80 
evm≠_sig«l_aщive
(
evТt_ba£
 *
ba£
, 
fd
, 
n€ќs
);

82 *
evm≠_io_gС_fdЪfo
(
evТt_io_m≠
 *
щx
, 
evutЮ_sockС_t
 
fd
);

	@evmap.c

26 
	~"evТt-cЏfig.h
"

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	#WIN32_LEAN_AND_MEAN


	)

31 
	~<wЪdows.h
>

32 #undeа
WIN32_LEAN_AND_MEAN


34 
	~<sys/ty≥s.h
>

35 #iа!
defЪed
(
WIN32
и&& defЪed(
_EVENT_HAVE_SYS_TIME_H
)

36 
	~<sys/time.h
>

38 
	~<sys/queue.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 #iвdeа
WIN32


42 
	~<uni°d.h
>

44 
	~<ФЇo.h
>

45 
	~<sig«l.h
>

46 
	~<°rЪg.h
>

47 
	~<time.h
>

49 
	~"evТt-ЪЛЇЃ.h
"

50 
	~"evm≠-ЪЛЇЃ.h
"

51 
	~"mm-ЪЛЇЃ.h
"

52 
	~"ch™gЦi°-ЪЛЇЃ.h
"

57 
	sevm≠_io
 {

58 
evТt_li°
 
	mevТts
;

59 
	mƒЧd
;

60 
	mnwrЩe
;

65 
	sevm≠_sig«l
 {

66 
evТt_li°
 
	mevТts
;

76 #ifdeа
EVMAP_USE_HT


77 
	sevТt_m≠_ТМy
 {

78 
HT_ENTRY
(
evТt_m≠_ТМy
и
	mm≠_node
;

79 
evutЮ_sockС_t
 
	mfd
;

82 
evm≠_io
 
	mevm≠_io
;

83 } 
	mТt
;

86 
ЪlЪe
 

87 
	$hashsockС
(
evТt_m≠_ТМy
 *
e
)

92 
h
 = (и
e
->
fd
;

93 
h
 += (h >> 2) | (h << 30);

94  
h
;

95 
	}
}

97 
ЪlЪe
 

98 
	$eqsockС
(
evТt_m≠_ТМy
 *
e1
, evТt_m≠_ТМy *
e2
)

100  
e1
->
fd
 =р
e2
->fd;

101 
	}
}

103 
HT_PROTOTYPE
(
evТt_io_m≠
, 
evТt_m≠_ТМy
, 
m≠_node
, 
hashsockС
, 
eqsockС
);

104 
HT_GENERATE
(
evТt_io_m≠
, 
evТt_m≠_ТМy
, 
m≠_node
, 
hashsockС
, 
eqsockС
,

105 0.5, 
mm_mЃloc
, 
mm_їЃloc
, 
mm_дУ
);

107 
	#GET_IO_SLOT
(
x
, 
m≠
, 
¶ў
, 
ty≥
) \

109 
evТt_m≠_ТМy
 
_key
, *
_Тt
; \

110 
_key
.
fd
 = 
¶ў
; \

111 
_Тt
 = 
	`HT_FIND
(
evТt_io_m≠
, 
m≠
, &
_key
); \

112 (
x
ир
_Тt
 ? &_Тt->
Тt
.
ty≥
 : 
NULL
; \

113 } 0);

	)

115 
	#GET_IO_SLOT_AND_CTOR
(
x
, 
m≠
, 
¶ў
, 
ty≥
, 
щ№
, 
fdЪfo_Ћn
) \

117 
evТt_m≠_ТМy
 
_key
, *
_Тt
; \

118 
_key
.
fd
 = 
¶ў
; \

119 
	`_HT_FIND_OR_INSERT
(
evТt_io_m≠
, 
m≠_node
, 
hashsockС
, 
m≠
, \

120 
evТt_m≠_ТМy
, &
_key
, 
±r
, \

122 
_Тt
 = *
±r
; \

125 
_Тt
 = 
	`mm_€ќoc
(1,(
evТt_m≠_ТМy
)+
fdЪfo_Ћn
); \

126 
	`EVUTIL_ASSERT
(
_Тt
); \

127 
_Тt
->
fd
 = 
¶ў
; \

128 (
щ№
)(&
_Тt
->
Тt
.
ty≥
); \

129 
	`_HT_FOI_INSERT
(
m≠_node
, 
m≠
, &
_key
, 
_Тt
, 
±r
) \

131 (
x
ир&
_Тt
->
Тt
.
ty≥
; \

132 } 0)

	)

134 
	$evm≠_io_ЪЩm≠
(
evТt_io_m≠
 *
щx
)

136 
	`HT_INIT
(
evТt_io_m≠
, 
щx
);

137 
	}
}

139 
	$evm≠_io_юЧr
(
evТt_io_m≠
 *
щx
)

141 
evТt_m≠_ТМy
 **
Тt
, **
√xt
, *
this
;

142 
Тt
 = 
	`HT_START
(
evТt_io_m≠
, 
щx
);ГЅ;ГЅ = 
√xt
) {

143 
this
 = *
Тt
;

144 
√xt
 = 
	`HT_NEXT_RMV
(
evТt_io_m≠
, 
щx
, 
Тt
);

145 
	`mm_дУ
(
this
);

147 
	}
}

153 
	#GET_SIGNAL_SLOT
(
x
, 
m≠
, 
¶ў
, 
ty≥
) \

154 (
x
ир(
ty≥
 *)((
m≠
)->
ТМЫs
[
¶ў
])

	)

159 
	#GET_SIGNAL_SLOT_AND_CTOR
(
x
, 
m≠
, 
¶ў
, 
ty≥
, 
щ№
, 
fdЪfo_Ћn
) \

161 iа((
m≠
)->
ТМЫs
[
¶ў
] =р
NULL
) { \

162 
	`EVUTIL_ASSERT
(
щ№
 !р
NULL
); \

163 (
m≠
)->
ТМЫs
[
¶ў
] = \

164 
	`mm_€ќoc
(1,(
ty≥
)+
fdЪfo_Ћn
); \

165 
	`EVUTIL_ASSERT
((
m≠
)->
ТМЫs
[
¶ў
] !р
NULL
); \

166 (
щ№
)((
ty≥
 *)(
m≠
)->
ТМЫs
[
¶ў
]); \

168 (
x
ир(
ty≥
 *)((
m≠
)->
ТМЫs
[
¶ў
]); \

169 } 0)

	)

173 #iвdeа
EVMAP_USE_HT


174 
	#GET_IO_SLOT
(
x
,
m≠
,
¶ў
,
ty≥
и
	`GET_SIGNAL_SLOT
(x,m≠,¶ў,ty≥)

	)

175 
	#GET_IO_SLOT_AND_CTOR
(
x
,
m≠
,
¶ў
,
ty≥
,
щ№
,
fdЪfo_Ћn
) \

176 
	`GET_SIGNAL_SLOT_AND_CTOR
(
x
,
m≠
,
¶ў
,
ty≥
,
щ№
,
fdЪfo_Ћn
)

	)

177 
	#FDINFO_OFFSET
 (
evm≠_io
)

	)

179 
	$evm≠_io_ЪЩm≠
(
evТt_io_m≠
* 
щx
)

181 
	`evm≠_sig«l_ЪЩm≠
(
щx
);

182 
	}
}

184 
	$evm≠_io_юЧr
(
evТt_io_m≠
* 
щx
)

186 
	`evm≠_sig«l_юЧr
(
щx
);

187 
	}
}

195 
	$evm≠_make_•aы
(
evТt_sig«l_m≠
 *
m≠
, 
¶ў
, 
msize
)

197 iа(
m≠
->
√ЅrЫs
 <р
¶ў
) {

198 
√ЅrЫs
 = 
m≠
->nentries ? map->nentries : 32;

199 **
tmp
;

201 
√ЅrЫs
 <р
¶ў
)

202 
√ЅrЫs
 <<= 1;

204 
tmp
 = (**)
	`mm_їЃloc
(
m≠
->
ТМЫs
, 
√ЅrЫs
 * 
msize
);

205 iа(
tmp
 =р
NULL
)

208 
	`mem£t
(&
tmp
[
m≠
->
√ЅrЫs
], 0,

209 (
√ЅrЫs
 - 
m≠
->√ЅrЫsи* 
msize
);

211 
m≠
->
√ЅrЫs
 =Вentries;

212 
m≠
->
ТМЫs
 = 
tmp
;

216 
	}
}

219 
	$evm≠_sig«l_ЪЩm≠
(
evТt_sig«l_m≠
 *
щx
)

221 
щx
->
√ЅrЫs
 = 0;

222 
щx
->
ТМЫs
 = 
NULL
;

223 
	}
}

226 
	$evm≠_sig«l_юЧr
(
evТt_sig«l_m≠
 *
щx
)

228 iа(
щx
->
ТМЫs
 !р
NULL
) {

229 
i
;

230 
i
 = 0; i < 
щx
->
√ЅrЫs
; ++i) {

231 iа(
щx
->
ТМЫs
[
i
] !р
NULL
)

232 
	`mm_дУ
(
щx
->
ТМЫs
[
i
]);

234 
	`mm_дУ
(
щx
->
ТМЫs
);

235 
щx
->
ТМЫs
 = 
NULL
;

237 
щx
->
√ЅrЫs
 = 0;

238 
	}
}

245 
	$evm≠_io_ЪЩ
(
evm≠_io
 *
ТМy
)

247 
	`TAILQ_INIT
(&
ТМy
->
evТts
);

248 
ТМy
->
ƒЧd
 = 0;

249 
ТМy
->
nwrЩe
 = 0;

250 
	}
}

256 
	$evm≠_io_add
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТt
 *
ev
)

258 cЏ° 
evТtЁ
 *
ev£l
 = 
ba£
->evsel;

259 
evТt_io_m≠
 *
io
 = &
ba£
->io;

260 
evm≠_io
 *
щx
 = 
NULL
;

261 
ƒЧd
, 
nwrЩe
, 
їtvЃ
 = 0;

262 
їs
 = 0, 
ёd
 = 0;

264 
	`EVUTIL_ASSERT
(
fd
 =р
ev
->
ev_fd
);

268 iа(
fd
 < 0)

271 #iвdeа
EVMAP_USE_HT


272 iа(
fd
 >р
io
->
√ЅrЫs
) {

273 iа(
	`evm≠_make_•aы
(
io
, 
fd
, (
evm≠_io
 *)) == -1)

277 
	`GET_IO_SLOT_AND_CTOR
(
щx
, 
io
, 
fd
, 
evm≠_io
, 
evm≠_io_ЪЩ
,

278 
ev£l
->
fdЪfo_Ћn
);

280 
ƒЧd
 = 
щx
->nread;

281 
nwrЩe
 = 
щx
->nwrite;

283 iа(
ƒЧd
)

284 
ёd
 |р
EV_READ
;

285 iа(
nwrЩe
)

286 
ёd
 |р
EV_WRITE
;

288 iа(
ev
->
ev_evТts
 & 
EV_READ
) {

289 iа(++
ƒЧd
 == 1)

290 
їs
 |р
EV_READ
;

292 iа(
ev
->
ev_evТts
 & 
EV_WRITE
) {

293 iа(++
nwrЩe
 == 1)

294 
їs
 |р
EV_WRITE
;

297 iа(
їs
) {

298 *
exМa
 = ((*)
щx
и+ (
evm≠_io
);

302 iа(
ev£l
->
	`add
(
ba£
, 
ev
->
ev_fd
,

303 
ёd
, (
ev
->
ev_evТts
 & 
EV_ET
и| 
їs
, 
exМa
) == -1)

305 
їtvЃ
 = 1;

308 
щx
->
ƒЧd
 =Вread;

309 
щx
->
nwrЩe
 =Вwrite;

310 
	`TAILQ_INSERT_TAIL
(&
щx
->
evТts
, 
ev
, 
ev_io_√xt
);

312  (
їtvЃ
);

313 
	}
}

318 
	$evm≠_io_dЦ
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТt
 *
ev
)

320 cЏ° 
evТtЁ
 *
ev£l
 = 
ba£
->evsel;

321 
evТt_io_m≠
 *
io
 = &
ba£
->io;

322 
evm≠_io
 *
щx
;

323 
ƒЧd
, 
nwrЩe
, 
їtvЃ
 = 0;

324 
їs
 = 0, 
ёd
 = 0;

326 iа(
fd
 < 0)

329 
	`EVUTIL_ASSERT
(
fd
 =р
ev
->
ev_fd
);

333 #iвdeа
EVMAP_USE_HT


334 iа(
fd
 >р
io
->
√ЅrЫs
)

338 
	`GET_IO_SLOT
(
щx
, 
io
, 
fd
, 
evm≠_io
);

340 
ƒЧd
 = 
щx
->nread;

341 
nwrЩe
 = 
щx
->nwrite;

343 iа(
ƒЧd
)

344 
ёd
 |р
EV_READ
;

345 iа(
nwrЩe
)

346 
ёd
 |р
EV_WRITE
;

348 iа(
ev
->
ev_evТts
 & 
EV_READ
) {

349 iа(--
ƒЧd
 == 0)

350 
їs
 |р
EV_READ
;

351 
	`EVUTIL_ASSERT
(
ƒЧd
 >= 0);

353 iа(
ev
->
ev_evТts
 & 
EV_WRITE
) {

354 iа(--
nwrЩe
 == 0)

355 
їs
 |р
EV_WRITE
;

356 
	`EVUTIL_ASSERT
(
nwrЩe
 >= 0);

359 iа(
їs
) {

360 *
exМa
 = ((*)
щx
и+ (
evm≠_io
);

361 iа(
ev£l
->
	`dЦ
(
ba£
, 
ev
->
ev_fd
, 
ёd
, 
їs
, 
exМa
) == -1)

363 
їtvЃ
 = 1;

366 
щx
->
ƒЧd
 =Вread;

367 
щx
->
nwrЩe
 =Вwrite;

368 
	`TAILQ_REMOVE
(&
щx
->
evТts
, 
ev
, 
ev_io_√xt
);

370  (
їtvЃ
);

371 
	}
}

374 
	$evm≠_io_aщive
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
evТts
)

376 
evТt_io_m≠
 *
io
 = &
ba£
->io;

377 
evm≠_io
 *
щx
;

378 
evТt
 *
ev
;

380 #iвdeа
EVMAP_USE_HT


381 
	`EVUTIL_ASSERT
(
fd
 < 
io
->
√ЅrЫs
);

383 
	`GET_IO_SLOT
(
щx
, 
io
, 
fd
, 
evm≠_io
);

385 
	`EVUTIL_ASSERT
(
щx
);

386 
	`TAILQ_FOREACH
(
ev
, &
щx
->
evТts
, 
ev_io_√xt
) {

387 iа(
ev
->
ev_evТts
 & 
evТts
)

388 
	`evТt_aщive_nёock
(
ev
,Гv->
ev_evТts
 & 
evТts
, 1);

390 
	}
}

395 
	$evm≠_sig«l_ЪЩ
(
evm≠_sig«l
 *
ТМy
)

397 
	`TAILQ_INIT
(&
ТМy
->
evТts
);

398 
	}
}

402 
	$evm≠_sig«l_add
(
evТt_ba£
 *
ba£
, 
sig
, 
evТt
 *
ev
)

404 cЏ° 
evТtЁ
 *
ev£l
 = 
ba£
->
evsig£l
;

405 
evТt_sig«l_m≠
 *
m≠
 = &
ba£
->
sigm≠
;

406 
evm≠_sig«l
 *
щx
 = 
NULL
;

408 iа(
sig
 >р
m≠
->
√ЅrЫs
) {

409 iа(
	`evm≠_make_•aы
(

410 
m≠
, 
sig
, (
evm≠_sig«l
 *)) == -1)

413 
	`GET_SIGNAL_SLOT_AND_CTOR
(
щx
, 
m≠
, 
sig
, 
evm≠_sig«l
, 
evm≠_sig«l_ЪЩ
,

414 
ba£
->
evsig£l
->
fdЪfo_Ћn
);

416 iа(
	`TAILQ_EMPTY
(&
щx
->
evТts
)) {

417 iа(
ev£l
->
	`add
(
ba£
, 
ev
->
ev_fd
, 0, 
EV_SIGNAL
, 
NULL
)

422 
	`TAILQ_INSERT_TAIL
(&
щx
->
evТts
, 
ev
, 
ev_sig«l_√xt
);

425 
	}
}

428 
	$evm≠_sig«l_dЦ
(
evТt_ba£
 *
ba£
, 
sig
, 
evТt
 *
ev
)

430 cЏ° 
evТtЁ
 *
ev£l
 = 
ba£
->
evsig£l
;

431 
evТt_sig«l_m≠
 *
m≠
 = &
ba£
->
sigm≠
;

432 
evm≠_sig«l
 *
щx
;

434 iа(
sig
 >р
m≠
->
√ЅrЫs
)

437 
	`GET_SIGNAL_SLOT
(
щx
, 
m≠
, 
sig
, 
evm≠_sig«l
);

439 iа(
	`TAILQ_FIRST
(&
щx
->
evТts
и=р
	`TAILQ_LAST
(&щx->evТts, 
evТt_li°
)) {

440 iа(
ev£l
->
	`dЦ
(
ba£
, 
ev
->
ev_fd
, 0, 
EV_SIGNAL
, 
NULL
) == -1)

444 
	`TAILQ_REMOVE
(&
щx
->
evТts
, 
ev
, 
ev_sig«l_√xt
);

447 
	}
}

450 
	$evm≠_sig«l_aщive
(
evТt_ba£
 *
ba£
, 
sig
, 
n€ќs
)

452 
evТt_sig«l_m≠
 *
m≠
 = &
ba£
->
sigm≠
;

453 
evm≠_sig«l
 *
щx
;

454 
evТt
 *
ev
;

456 
	`EVUTIL_ASSERT
(
sig
 < 
m≠
->
√ЅrЫs
);

457 
	`GET_SIGNAL_SLOT
(
щx
, 
m≠
, 
sig
, 
evm≠_sig«l
);

459 
	`TAILQ_FOREACH
(
ev
, &
щx
->
evТts
, 
ev_sig«l_√xt
)

460 
	`evТt_aщive_nёock
(
ev
, 
EV_SIGNAL
, 
n€ќs
);

461 
	}
}

464 
	$evm≠_io_gС_fdЪfo
(
evТt_io_m≠
 *
m≠
, 
evutЮ_sockС_t
 
fd
)

466 
evm≠_io
 *
щx
;

467 
	`GET_IO_SLOT
(
щx
, 
m≠
, 
fd
, 
evm≠_io
);

468 iа(
щx
)

469  ((*)
щx
и+ (
evm≠_io
);

471  
NULL
;

472 
	}
}

477 
	sevТt_ch™gЦi°_fdЪfo
 {

478 
	midxґus1
;

483 
	$evТt_ch™gЦi°_ЪЩ
(
evТt_ch™gЦi°
 *
ch™gЦi°
)

485 
ch™gЦi°
->
ch™ges
 = 
NULL
;

486 
ch™gЦi°
->
ch™ges_size
 = 0;

487 
ch™gЦi°
->
n_ch™ges
 = 0;

488 
	}
}

491 
ЪlЪe
 
evТt_ch™gЦi°_fdЪfo
 *

492 
	$evТt_ch™ge_gС_fdЪfo
(
evТt_ba£
 *
ba£
,

493 cЏ° 
evТt_ch™ge
 *
ch™ge
)

495 *
±r
;

496 iа(
ch™ge
->
їad_ch™ge
 & 
EV_CHANGE_SIGNAL
) {

497 
evm≠_sig«l
 *
щx
;

498 
	`GET_SIGNAL_SLOT
(
щx
, &
ba£
->
sigm≠
, 
ch™ge
->
fd
, 
evm≠_sig«l
);

499 
±r
 = ((*)
щx
и+ (
evm≠_sig«l
);

501 
evm≠_io
 *
щx
;

502 
	`GET_IO_SLOT
(
щx
, &
ba£
->
io
, 
ch™ge
->
fd
, 
evm≠_io
);

503 
±r
 = ((*)
щx
и+ (
evm≠_io
);

505  (*)
±r
;

506 
	}
}

508 #ifdeа
DEBUG_CHANGELIST


511 
	$evТt_ch™gЦi°_check
(
evТt_ba£
 *
ba£
)

513 
i
;

514 
evТt_ch™gЦi°
 *
ch™gЦi°
 = &
ba£
->changelist;

516 
	`EVUTIL_ASSERT
(
ch™gЦi°
->
ch™ges_size
 >рch™gЦi°->
n_ch™ges
);

517 
i
 = 0; i < 
ch™gЦi°
->
n_ch™ges
; ++i) {

518 
evТt_ch™ge
 *
c
 = &
ch™gЦi°
->
ch™ges
[
i
];

519 
evТt_ch™gЦi°_fdЪfo
 *
f
;

520 
	`EVUTIL_ASSERT
(
c
->
fd
 >= 0);

521 
f
 = 
	`evТt_ch™ge_gС_fdЪfo
(
ba£
, 
c
);

522 
	`EVUTIL_ASSERT
(
f
);

523 
	`EVUTIL_ASSERT
(
f
->
idxґus1
 =р
i
 + 1);

526 
i
 = 0; i < 
ba£
->
io
.
√ЅrЫs
; ++i) {

527 
evm≠_io
 *
io
 = 
ba£
->io.
ТМЫs
[
i
];

528 
evТt_ch™gЦi°_fdЪfo
 *
f
;

529 iа(!
io
)

531 
f
 = (*)

532 –((*)
io
и+ (
evm≠_io
) );

533 iа(
f
->
idxґus1
) {

534 
evТt_ch™ge
 *
c
 = &
ch™gЦi°
->
ch™ges
[
f
->
idxґus1
 - 1];

535 
	`EVUTIL_ASSERT
(
c
->
fd
 =р
i
);

538 
	}
}

540 
	#evТt_ch™gЦi°_check
(
ba£
и(()0)

	)

544 
	$evТt_ch™gЦi°_їmove_Ѓl
(
evТt_ch™gЦi°
 *
ch™gЦi°
,

545 
evТt_ba£
 *
ba£
)

547 
i
;

549 
	`evТt_ch™gЦi°_check
(
ba£
);

551 
i
 = 0; i < 
ch™gЦi°
->
n_ch™ges
; ++i) {

552 
evТt_ch™ge
 *
ch
 = &
ch™gЦi°
->
ch™ges
[
i
];

553 
evТt_ch™gЦi°_fdЪfo
 *
fdЪfo
 =

554 
	`evТt_ch™ge_gС_fdЪfo
(
ba£
, 
ch
);

555 
	`EVUTIL_ASSERT
(
fdЪfo
->
idxґus1
 =р
i
 + 1);

556 
fdЪfo
->
idxґus1
 = 0;

559 
ch™gЦi°
->
n_ch™ges
 = 0;

561 
	`evТt_ch™gЦi°_check
(
ba£
);

562 
	}
}

565 
	$evТt_ch™gЦi°_дУmem
(
evТt_ch™gЦi°
 *
ch™gЦi°
)

567 iа(
ch™gЦi°
->
ch™ges
)

568 
	`mm_дУ
(
ch™gЦi°
->
ch™ges
);

569 
	`evТt_ch™gЦi°_ЪЩ
(
ch™gЦi°
);

570 
	}
}

574 
	$evТt_ch™gЦi°_grow
(
evТt_ch™gЦi°
 *
ch™gЦi°
)

576 
√w_size
;

577 
evТt_ch™ge
 *
√w_ch™ges
;

578 iа(
ch™gЦi°
->
ch™ges_size
 < 64)

579 
√w_size
 = 64;

581 
√w_size
 = 
ch™gЦi°
->
ch™ges_size
 * 2;

583 
√w_ch™ges
 = 
	`mm_їЃloc
(
ch™gЦi°
->
ch™ges
,

584 
√w_size
 * (
evТt_ch™ge
));

586 iа(
	`EVUTIL_UNLIKELY
(
√w_ch™ges
 =р
NULL
))

589 
ch™gЦi°
->
ch™ges
 = 
√w_ch™ges
;

590 
ch™gЦi°
->
ch™ges_size
 = 
√w_size
;

593 
	}
}

599 
evТt_ch™ge
 *

600 
	$evТt_ch™gЦi°_gС_№_cЏ°ruщ
(
evТt_ch™gЦi°
 *
ch™gЦi°
,

601 
evutЮ_sockС_t
 
fd
,

602 
ёd_evТts
,

603 
evТt_ch™gЦi°_fdЪfo
 *
fdЪfo
)

605 
evТt_ch™ge
 *
ch™ge
;

607 iа(
fdЪfo
->
idxґus1
 == 0) {

608 
idx
;

609 
	`EVUTIL_ASSERT
(
ch™gЦi°
->
n_ch™ges
 <рch™gЦi°->
ch™ges_size
);

611 iа(
ch™gЦi°
->
n_ch™ges
 =рch™gЦi°->
ch™ges_size
) {

612 iа(
	`evТt_ch™gЦi°_grow
(
ch™gЦi°
) < 0)

613  
NULL
;

616 
idx
 = 
ch™gЦi°
->
n_ch™ges
++;

617 
ch™ge
 = &
ch™gЦi°
->
ch™ges
[
idx
];

618 
fdЪfo
->
idxґus1
 = 
idx
 + 1;

620 
	`mem£t
(
ch™ge
, 0, (
evТt_ch™ge
));

621 
ch™ge
->
fd
 = fd;

622 
ch™ge
->
ёd_evТts
 = old_events;

624 
ch™ge
 = &
ch™gЦi°
->
ch™ges
[
fdЪfo
->
idxґus1
 - 1];

625 
	`EVUTIL_ASSERT
(
ch™ge
->
fd
 == fd);

627  
ch™ge
;

628 
	}
}

631 
	$evТt_ch™gЦi°_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
,

632 *
p
)

634 
evТt_ch™gЦi°
 *
ch™gЦi°
 = &
ba£
->changelist;

635 
evТt_ch™gЦi°_fdЪfo
 *
fdЪfo
 = 
p
;

636 
evТt_ch™ge
 *
ch™ge
;

638 
	`evТt_ch™gЦi°_check
(
ba£
);

640 
ch™ge
 = 
	`evТt_ch™gЦi°_gС_№_cЏ°ruщ
(
ch™gЦi°
, 
fd
, 
ёd
, 
fdЪfo
);

641 iа(!
ch™ge
)

648 iа(
evТts
 & (
EV_READ
|
EV_SIGNAL
)) {

649 
ch™ge
->
їad_ch™ge
 = 
EV_CHANGE_ADD
 |

650 (
evТts
 & (
EV_ET
|
EV_PERSIST
|
EV_SIGNAL
));

652 iа(
evТts
 & 
EV_WRITE
) {

653 
ch™ge
->
wrЩe_ch™ge
 = 
EV_CHANGE_ADD
 |

654 (
evТts
 & (
EV_ET
|
EV_PERSIST
|
EV_SIGNAL
));

657 
	`evТt_ch™gЦi°_check
(
ba£
);

659 
	}
}

662 
	$evТt_ch™gЦi°_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
,

663 *
p
)

665 
evТt_ch™gЦi°
 *
ch™gЦi°
 = &
ba£
->changelist;

666 
evТt_ch™gЦi°_fdЪfo
 *
fdЪfo
 = 
p
;

667 
evТt_ch™ge
 *
ch™ge
;

669 
	`evТt_ch™gЦi°_check
(
ba£
);

670 
ch™ge
 = 
	`evТt_ch™gЦi°_gС_№_cЏ°ruщ
(
ch™gЦi°
, 
fd
, 
ёd
, 
fdЪfo
);

671 
	`evТt_ch™gЦi°_check
(
ba£
);

672 iа(!
ch™ge
)

684 iа(
evТts
 & (
EV_READ
|
EV_SIGNAL
)) {

685 iа(
ch™ge
->
їad_ch™ge
 & 
EV_CHANGE_ADD
)

686 
ch™ge
->
їad_ch™ge
 = 0;

688 
ch™ge
->
їad_ch™ge
 = 
EV_CHANGE_DEL
;

690 iа(
evТts
 & 
EV_WRITE
) {

691 iа(
ch™ge
->
wrЩe_ch™ge
 & 
EV_CHANGE_ADD
)

692 
ch™ge
->
wrЩe_ch™ge
 = 0;

694 
ch™ge
->
wrЩe_ch™ge
 = 
EV_CHANGE_DEL
;

697 
	`evТt_ch™gЦi°_check
(
ba£
);

699 
	}
}

	@evport.c

53 
	~"evТt-cЏfig.h
"

55 
	~<sys/time.h
>

56 
	~<sys/queue.h
>

57 
	~<ФЇo.h
>

58 
	~<pёl.h
>

59 
	~<p№t.h
>

60 
	~<sig«l.h
>

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rЪg.h
>

64 
	~<time.h
>

65 
	~<uni°d.h
>

67 
	~"evТt-ЪЛЇЃ.h
"

68 
	~"log-ЪЛЇЃ.h
"

69 
	~"evsig«l-ЪЛЇЃ.h
"

70 
	~"evm≠-ЪЛЇЃ.h
"

77 
	#DEFAULT_NFDS
 16

	)

85 
	#EVENTS_PER_GETN
 8

	)

92 
	sfd_Ъfo
 {

93 
	mfdi_wh©
;

96 
	#FDI_HAS_READ
(
fdi
и((fdi)->
fdi_wh©
 & 
EV_READ
)

	)

97 
	#FDI_HAS_WRITE
(
fdi
и((fdi)->
fdi_wh©
 & 
EV_WRITE
)

	)

98 
	#FDI_HAS_EVENTS
(
fdi
и(
	`FDI_HAS_READ
(fdiи|| 
	`FDI_HAS_WRITE
(fdi))

	)

99 
	#FDI_TO_SYSEVENTS
(
fdi
и(
	`FDI_HAS_READ
(fdiи? 
POLLIN
 : 0) | \

100 (
	`FDI_HAS_WRITE
(
fdi
и? 
POLLOUT
 : 0)

	)

102 
	sevp№t_d©a
 {

103 
	med_p№t
;

104 
	med_√vТts
;

105 
fd_Ъfo
 *
	med_fds
;

107 
	med_≥ndЪg
[
EVENTS_PER_GETN
];

110 * 
evp№t_ЪЩ
 (
evТt_ba£
 *);

111 
evp№t_add
(
evТt_ba£
 *, 
fd
, 
ёd
, 
evТts
, *);

112 
evp№t_dЦ
(
evТt_ba£
 *, 
fd
, 
ёd
, 
evТts
, *);

113 
evp№t_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

114 
evp№t_dЧќoc
 (
evТt_ba£
 *);

116 cЏ° 
evТtЁ
 
	gevp№tЁs
 = {

118 
evp№t_ЪЩ
,

119 
evp№t_add
,

120 
evp№t_dЦ
,

121 
evp№t_di•©ch
,

122 
evp№t_dЧќoc
,

132 
	$evp№t_ЪЩ
(
evТt_ba£
 *
ba£
)

134 
evp№t_d©a
 *
evpd
;

135 
i
;

137 iа(!(
evpd
 = 
	`mm_€ќoc
(1, (
evp№t_d©a
))))

138  (
NULL
);

140 iа((
evpd
->
ed_p№t
 = 
	`p№t_ьЧЛ
()) == -1) {

141 
	`mm_дУ
(
evpd
);

142  (
NULL
);

148 
evpd
->
ed_fds
 = 
	`mm_€ќoc
(
DEFAULT_NFDS
, (
fd_Ъfo
));

149 iа(
evpd
->
ed_fds
 =р
NULL
) {

150 
	`юo£
(
evpd
->
ed_p№t
);

151 
	`mm_дУ
(
evpd
);

152  (
NULL
);

154 
evpd
->
ed_√vТts
 = 
DEFAULT_NFDS
;

155 
i
 = 0; i < 
EVENTS_PER_GETN
; i++)

156 
evpd
->
ed_≥ndЪg
[
i
] = -1;

158 
	`evsig_ЪЩ
(
ba£
);

160  (
evpd
);

161 
	}
}

163 #ifdeа
CHECK_INVARIANTS


171 
	$check_evp№tЁ
(
evp№t_d©a
 *
evpd
)

173 
	`EVUTIL_ASSERT
(
evpd
);

174 
	`EVUTIL_ASSERT
(
evpd
->
ed_√vТts
 > 0);

175 
	`EVUTIL_ASSERT
(
evpd
->
ed_p№t
 > 0);

176 
	`EVUTIL_ASSERT
(
evpd
->
ed_fds
 > 0);

177 
	}
}

183 
	$check_evТt
(
p№t_evТt_t
* 
≥vt
)

191 
	`EVUTIL_ASSERT
(
≥vt
->
p№Лv_sourы
 =р
PORT_SOURCE_FD
);

192 
	`EVUTIL_ASSERT
(
≥vt
->
p№Лv_u£r
 =р
NULL
);

193 
	}
}

196 
	#check_evp№tЁ
(
ХЁ
)

	)

197 
	#check_evТt
(
≥vt
)

	)

204 
	$grow
(
evp№t_d©a
 *
Хdp
, 
зщ№
)

206 
fd_Ъfo
 *
tmp
;

207 
ёdsize
 = 
Хdp
->
ed_√vТts
;

208 
√wsize
 = 
зщ№
 * 
ёdsize
;

209 
	`EVUTIL_ASSERT
(
зщ№
 > 1);

211 
	`check_evp№tЁ
(
Хdp
);

213 
tmp
 = 
	`mm_їЃloc
(
Хdp
->
ed_fds
, (
fd_Ъfo
и* 
√wsize
);

214 iа(
NULL
 =р
tmp
)

216 
Хdp
->
ed_fds
 = 
tmp
;

217 
	`mem£t
((*и(
Хdp
->
ed_fds
 + 
ёdsize
), 0,

218 (
√wsize
 - 
ёdsize
)*(
fd_Ъfo
));

219 
Хdp
->
ed_√vТts
 = 
√wsize
;

221 
	`check_evp№tЁ
(
Хdp
);

224 
	}
}

232 
	$їassocЯЛ
(
evp№t_d©a
 *
Хdp
, 
fd_Ъfo
 *
fdЭ
, 
fd
)

234 
sy£vТts
 = 
	`FDI_TO_SYSEVENTS
(
fdЭ
);

236 iа(
sy£vТts
 != 0) {

237 iа(
	`p№t_assocЯЛ
(
Хdp
->
ed_p№t
, 
PORT_SOURCE_FD
,

238 
fd
, 
sy£vТts
, 
NULL
) == -1) {

239 
	`evТt_wђn
("port_associate");

244 
	`check_evp№tЁ
(
Хdp
);

247 
	}
}

255 
	$evp№t_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

257 
i
, 
їs
;

258 
evp№t_d©a
 *
Хdp
 = 
ba£
->
evba£
;

259 
p№t_evТt_t
 
≥vОi°
[
EVENTS_PER_GETN
];

267 
√vТts
 = 1;

274 
time•ec
 
ts
;

275 
time•ec
 *
ts_p
 = 
NULL
;

276 iа(
tv
 !р
NULL
) {

277 
ts
.
tv_£c
 = 
tv
->tv_sec;

278 
ts
.
tv_n£c
 = 
tv
->
tv_u£c
 * 1000;

279 
ts_p
 = &
ts
;

287 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

288 
fd_Ъfo
 *
fdi
 = 
NULL
;

289 iа(
Хdp
->
ed_≥ndЪg
[
i
] != -1) {

290 
fdi
 = &(
Хdp
->
ed_fds
[Хdp->
ed_≥ndЪg
[
i
]]);

293 iа(
fdi
 !р
NULL
 && 
	`FDI_HAS_EVENTS
(fdi)) {

294 
fd
 = 
Хdp
->
ed_≥ndЪg
[
i
];

295 
	`їassocЯЛ
(
Хdp
, 
fdi
, 
fd
);

296 
Хdp
->
ed_≥ndЪg
[
i
] = -1;

300 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

302 
їs
 = 
	`p№t_gСn
(
Хdp
->
ed_p№t
, 
≥vОi°
, 
EVENTS_PER_GETN
,

303 (*и&
√vТts
, 
ts_p
);

305 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

307 iа(
їs
 == -1) {

308 iа(
ФЇo
 =р
EINTR
 ||ГЉnЎ=р
EAGAIN
) {

309 
	`evsig_іoыss
(
ba£
);

311 } iа(
ФЇo
 =р
ETIME
) {

312 iа(
√vТts
 == 0)

315 
	`evТt_wђn
("port_getn");

318 } iа(
ba£
->
sig
.
evsig_€ught
) {

319 
	`evsig_іoыss
(
ba£
);

322 
	`evТt_debug
(("%s:Е№t_gСјїp№t†%dГvТts", 
__func__
, 
√vТts
));

324 
i
 = 0; i < 
√vТts
; ++i) {

325 
fd_Ъfo
 *
fdi
;

326 
p№t_evТt_t
 *
≥vt
 = &
≥vОi°
[
i
];

327 
fd
 = (и
≥vt
->
p№Лv_objeщ
;

329 
	`check_evp№tЁ
(
Хdp
);

330 
	`check_evТt
(
≥vt
);

331 
Хdp
->
ed_≥ndЪg
[
i
] = 
fd
;

337 
їs
 = 0;

338 iа(
≥vt
->
p№Лv_evТts
 & 
POLLIN
)

339 
їs
 |р
EV_READ
;

340 iа(
≥vt
->
p№Лv_evТts
 & 
POLLOUT
)

341 
їs
 |р
EV_WRITE
;

343 
	`EVUTIL_ASSERT
(
Хdp
->
ed_√vТts
 > 
fd
);

344 
fdi
 = &(
Хdp
->
ed_fds
[
fd
]);

346 
	`evm≠_io_aщive
(
ba£
, 
fd
, 
їs
);

349 
	`check_evp№tЁ
(
Хdp
);

352 
	}
}

361 
	$evp№t_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

363 
evp№t_d©a
 *
evpd
 = 
ba£
->
evba£
;

364 
fd_Ъfo
 *
fdi
;

365 
зщ№
;

366 ()
p
;

368 
	`check_evp№tЁ
(
evpd
);

374 
зщ№
 = 1;

375 
fd
 >р
зщ№
 * 
evpd
->
ed_√vТts
)

376 
зщ№
 *= 2;

378 iа(
зщ№
 > 1) {

379 iа(-1 =р
	`grow
(
evpd
, 
зщ№
)) {

384 
fdi
 = &
evpd
->
ed_fds
[
fd
];

385 
fdi
->
fdi_wh©
 |р
evТts
;

387  
	`їassocЯЛ
(
evpd
, 
fdi
, 
fd
);

388 
	}
}

395 
	$evp№t_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

397 
evp№t_d©a
 *
evpd
 = 
ba£
->
evba£
;

398 
fd_Ъfo
 *
fdi
;

399 
i
;

400 
assocЯЛd
 = 1;

401 ()
p
;

403 
	`check_evp№tЁ
(
evpd
);

405 iа(
evpd
->
ed_√vТts
 < 
fd
) {

409 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

410 iа(
evpd
->
ed_≥ndЪg
[
i
] =р
fd
) {

411 
assocЯЛd
 = 0;

416 
fdi
 = &
evpd
->
ed_fds
[
fd
];

417 iа(
evТts
 & 
EV_READ
)

418 
fdi
->
fdi_wh©
 &р~
EV_READ
;

419 iа(
evТts
 & 
EV_WRITE
)

420 
fdi
->
fdi_wh©
 &р~
EV_WRITE
;

422 iа(
assocЯЛd
) {

423 iа(!
	`FDI_HAS_EVENTS
(
fdi
) &&

424 
	`p№t_dissocЯЛ
(
evpd
->
ed_p№t
, 
PORT_SOURCE_FD
, 
fd
) == -1) {

429 iа(
ФЇo
 !р
EBADFD
) {

430 
	`evТt_wђn
("port_dissociate");

434 iа(
	`FDI_HAS_EVENTS
(
fdi
)) {

435  (
	`їassocЯЛ
(
evpd
, 
fdi
, 
fd
));

439 iа((
fdi
->
fdi_wh©
 & (
EV_READ
|
EV_WRITE
)) == 0) {

440 
evpd
->
ed_≥ndЪg
[
i
] = -1;

444 
	}
}

448 
	$evp№t_dЧќoc
(
evТt_ba£
 *
ba£
)

450 
evp№t_d©a
 *
evpd
 = 
ba£
->
evba£
;

452 
	`evsig_dЧќoc
(
ba£
);

454 
	`юo£
(
evpd
->
ed_p№t
);

456 iа(
evpd
->
ed_fds
)

457 
	`mm_дУ
(
evpd
->
ed_fds
);

458 
	`mm_дУ
(
evpd
);

459 
	}
}

	@evrpc-internal.h

27 #iвdeа
_EVRPC_INTERNAL_H_


28 
	#_EVRPC_INTERNAL_H_


	)

30 
	~"hЙp-ЪЛЇЃ.h
"

32 
	gevљc
;

33 
	gevљc_їque°_wњµФ
;

35 
	#EVRPC_URI_PREFIX
 "/.љc."

	)

37 
	sevљc_hook
 {

38 
TAILQ_ENTRY
(
evљc_hook
и(
	m√xt
);

43 (*
	mіoыss
)(*, 
	mevhЙp_їque°
 *,

44 
	mevbufгr
 *, *);

45 *
	mіoыss_ђg
;

48 
TAILQ_HEAD
(
evљc_hook_li°
, 
evљc_hook
);

56 
	gevљc_hook_щx
;

57 
TAILQ_HEAD
(
evљc_Јu£_li°
, 
evљc_hook_щx
);

59 
	s_evљc_hooks
 {

61 
evљc_hook_li°
 
	mЪ_hooks
;

62 
evљc_hook_li°
 
	mout_hooks
;

64 
evљc_Јu£_li°
 
	mЈu£_їque°s
;

67 
	#Ъput_hooks
 
commЏ
.
Ъ_hooks


	)

68 
	#ouНut_hooks
 
commЏ
.
out_hooks


	)

69 
	#Јu£d_їque°s
 
commЏ
.
Јu£_їque°s


	)

71 
	sevљc_ba£
 {

72 
_evљc_hooks
 
	mcommЏ
;

75 
evhЙp
* 
	mhЙp_£rvФ
;

78 
TAILQ_HEAD
(
evљc_li°
, 
evљc
и
	mїgi°Фed_љcs
;

81 
	gevљc_їq_gТФic
;

82 
evљc_їq°©e_дУ
(
evљc_їq_gТФic
* 
љc_°©e
);

85 
	sevљc_poё
 {

86 
_evљc_hooks
 
	mcommЏ
;

88 
evТt_ba£
 *
	mba£
;

90 
evcЏq
 
	mcЏ√щiЏs
;

92 
	mtimeout
;

94 
TAILQ_HEAD
(
evљc_їque°q
, 
evљc_їque°_wњµФ
и(
	mїque°s
);

97 
	sevљc_hook_щx
 {

98 
TAILQ_ENTRY
(
evљc_hook_щx
и(
	m√xt
);

100 *
	mщx
;

101 (*
	mcb
)(*, 
	mEVRPC_HOOK_RESULT
);

104 
	sevљc_mСa
 {

105 
TAILQ_ENTRY
(
evљc_mСa
и(
	m√xt
);

106 *
	mkey
;

108 *
	md©a
;

109 
size_t
 
	md©a_size
;

112 
TAILQ_HEAD
(
evљc_mСa_li°
, 
evљc_mСa
);

114 
	sevљc_hook_mСa
 {

115 
evљc_mСa_li°
 
	mmСa_d©a
;

116 
evhЙp_cЏ√щiЏ
 *
	mevcЏ
;

120 
evљc_hook_assocЯЛ_mСa
(
evљc_hook_mСa
 **
pщx
,

121 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

124 
evљc_hook_mСa
 *
evљc_hook_mСa_√w
();

127 
evљc_hook_cЏЛxt_дУ
(
evљc_hook_mСa
 *
щx
);

132 
	sevљc_їq_gТФic
 {

137 
evљc_hook_mСa
 *
	mhook_mСa
;

140 *
	mїque°
;

143 *
	mїґy
;

149 
evљc
 *
	mљc
;

154 
evhЙp_їque°
* 
	mhЙp_їq
;

159 
evbufгr
* 
	mљc_d©a
;

163 
	sevљc_їque°_wњµФ
 {

168 
evљc_hook_mСa
 *
	mhook_mСa
;

170 
TAILQ_ENTRY
(
evљc_їque°_wњµФ
и
	m√xt
;

173 
evљc_poё
 *
	mpoё
;

176 
evhЙp_cЏ√щiЏ
 *
	mevcЏ
;

179 
evhЙp_їque°
 *
	mїq
;

182 
evТt
 
	mev_timeout
;

185 *
	m«me
;

188 (*
	mcb
)(
	mevљc_°©us
*, *
	mїque°
, *
	mїґy
, *
	mђg
);

189 *
	mcb_ђg
;

191 *
	mїque°
;

192 *
	mїґy
;

195 (*
	mїque°_mђshЃ
)(
	mevbufгr
 *, *);

198 (*
	mїґy_юЧr
)(*);

201 (*
	mїґy_unmђshЃ
)(*, 
	mevbufгr
*);

	@evrpc.c

27 
	~"evТt-cЏfig.h
"

29 #ifdeа
WIN32


30 
	#WIN32_LEAN_AND_MEAN


	)

31 
	~<wЪsock2.h
>

32 
	~<wЪdows.h
>

33 #undeа
WIN32_LEAN_AND_MEAN


36 
	~<sys/ty≥s.h
>

37 #iвdeа
WIN32


38 
	~<sys/sockС.h
>

40 #ifdeа
_EVENT_HAVE_SYS_TIME_H


41 
	~<sys/time.h
>

43 
	~<sys/queue.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 #iвdeа
WIN32


47 
	~<uni°d.h
>

49 
	~<ФЇo.h
>

50 
	~<sig«l.h
>

51 
	~<°rЪg.h
>

53 
	~<sys/queue.h
>

55 
	~"evТt2/evТt.h
"

56 
	~"evТt2/evТt_°ruщ.h
"

57 
	~"evТt2/љc.h
"

58 
	~"evТt2/љc_°ruщ.h
"

59 
	~"evљc-ЪЛЇЃ.h
"

60 
	~"evТt2/hЙp.h
"

61 
	~"evТt2/bufгr.h
"

62 
	~"evТt2/Пg.h
"

63 
	~"evТt2/hЙp_°ruщ.h
"

64 
	~"evТt2/hЙp_comЈt.h
"

65 
	~"evТt2/utЮ.h
"

66 
	~"utЮ-ЪЛЇЃ.h
"

67 
	~"log-ЪЛЇЃ.h
"

68 
	~"mm-ЪЛЇЃ.h
"

70 
evљc_ba£
 *

71 
	$evљc_ЪЩ
(
evhЙp
 *
hЙp_£rvФ
)

73 
evљc_ba£
* 
ba£
 = 
	`mm_€ќoc
(1, (evrpc_base));

74 iа(
ba£
 =р
NULL
)

75  (
NULL
);

78 
	`evПg_ЪЩ
();

80 
	`TAILQ_INIT
(&
ba£
->
їgi°Фed_љcs
);

81 
	`TAILQ_INIT
(&
ba£
->
Ъput_hooks
);

82 
	`TAILQ_INIT
(&
ba£
->
ouНut_hooks
);

84 
	`TAILQ_INIT
(&
ba£
->
Јu£d_їque°s
);

86 
ba£
->
hЙp_£rvФ
 = http_server;

88  (
ba£
);

89 
	}
}

92 
	$evљc_дУ
(
evљc_ba£
 *
ba£
)

94 
evљc
 *
љc
;

95 
evљc_hook
 *
hook
;

96 
evљc_hook_щx
 *
Јu£
;

98 (
љc
 = 
	`TAILQ_FIRST
(&
ba£
->
їgi°Фed_љcs
)и!р
NULL
) {

99 
	`EVUTIL_ASSERT
(
	`evљc_uƒegi°Ф_љc
(
ba£
, 
љc
->
uri
));

101 (
Јu£
 = 
	`TAILQ_FIRST
(&
ba£
->
Јu£d_їque°s
)и!р
NULL
) {

102 
	`TAILQ_REMOVE
(&
ba£
->
Јu£d_їque°s
, 
Јu£
, 
√xt
);

103 
	`mm_дУ
(
Јu£
);

105 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
Ъput_hooks
)и!р
NULL
) {

106 
	`EVUTIL_ASSERT
(
	`evљc_їmove_hook
(
ba£
, 
EVRPC_INPUT
, 
hook
));

108 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
ouНut_hooks
)и!р
NULL
) {

109 
	`EVUTIL_ASSERT
(
	`evљc_їmove_hook
(
ba£
, 
EVRPC_OUTPUT
, 
hook
));

111 
	`mm_дУ
(
ba£
);

112 
	}
}

115 
evљc_add_hook
(*
vba£
,

116 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

117 (*
cb
)(*, 
evhЙp_їque°
 *, 
evbufгr
 *, *),

118 *
cb_ђg
)

120 
_evљc_hooks
 *
ba£
 = 
vba£
;

121 
evљc_hook_li°
 *
hЧd
 = 
NULL
;

122 
evљc_hook
 *
hook
 = 
NULL
;

123 
hook_ty≥
) {

124 
EVRPC_INPUT
:

125 
hЧd
 = &
ba£
->
Ъ_hooks
;

127 
EVRPC_OUTPUT
:

128 
hЧd
 = &
ba£
->
out_hooks
;

131 
	`EVUTIL_ASSERT
(
hook_ty≥
 =р
EVRPC_INPUT
 || hook_ty≥ =р
EVRPC_OUTPUT
);

134 
hook
 = 
	`mm_€ќoc
(1, (
evљc_hook
));

135 
	`EVUTIL_ASSERT
(
hook
 !р
NULL
);

137 
hook
->
іoыss
 = 
cb
;

138 
hook
->
іoыss_ђg
 = 
cb_ђg
;

139 
	`TAILQ_INSERT_TAIL
(
hЧd
, 
hook
, 
√xt
);

141  (
hook
);

142 
	}
}

145 
	$evљc_їmove_hook_ЪЛЇЃ
(
evљc_hook_li°
 *
hЧd
, *
h™dЋ
)

147 
evљc_hook
 *
hook
 = 
NULL
;

148 
	`TAILQ_FOREACH
(
hook
, 
hЧd
, 
√xt
) {

149 iа(
hook
 =р
h™dЋ
) {

150 
	`TAILQ_REMOVE
(
hЧd
, 
hook
, 
√xt
);

151 
	`mm_дУ
(
hook
);

157 
	}
}

164 
	$evљc_їmove_hook
(*
vba£
, 
EVRPC_HOOK_TYPE
 
hook_ty≥
, *
h™dЋ
)

166 
_evљc_hooks
 *
ba£
 = 
vba£
;

167 
evљc_hook_li°
 *
hЧd
 = 
NULL
;

168 
hook_ty≥
) {

169 
EVRPC_INPUT
:

170 
hЧd
 = &
ba£
->
Ъ_hooks
;

172 
EVRPC_OUTPUT
:

173 
hЧd
 = &
ba£
->
out_hooks
;

176 
	`EVUTIL_ASSERT
(
hook_ty≥
 =р
EVRPC_INPUT
 || hook_ty≥ =р
EVRPC_OUTPUT
);

179  (
	`evљc_їmove_hook_ЪЛЇЃ
(
hЧd
, 
h™dЋ
));

180 
	}
}

183 
	$evљc_іoыss_hooks
(
evљc_hook_li°
 *
hЧd
, *
щx
,

184 
evhЙp_їque°
 *
їq
, 
evbufгr
 *
evbuf
)

186 
evљc_hook
 *
hook
;

187 
	`TAILQ_FOREACH
(
hook
, 
hЧd
, 
√xt
) {

188 
їs
 = 
hook
->
	`іoыss
(
щx
, 
їq
, 
evbuf
, hook->
іoыss_ђg
);

189 iа(
їs
 !р
EVRPC_CONTINUE
)

190  (
їs
);

193  (
EVRPC_CONTINUE
);

194 
	}
}

196 
evљc_poё_scheduЋ
(
evљc_poё
 *
poё
);

197 
evљc_їque°_cb
(
evhЙp_їque°
 *, *);

206 
	$evљc_cЏ°ruщ_uri
(cЏ° *
uri
)

208 *
cЏ°ruщed_uri
;

209 
cЏ°ruщed_uri_Ћn
;

211 
cЏ°ruщed_uri_Ћn
 = 
	`°ЊТ
(
EVRPC_URI_PREFIX
и+ sМЋn(
uri
) + 1;

212 iа((
cЏ°ruщed_uri
 = 
	`mm_mЃloc
(
cЏ°ruщed_uri_Ћn
)и=р
NULL
)

213 
	`evТt_Фr
(1, "%s: failedБoДegisterДpcЗt %s",

214 
__func__
, 
uri
);

215 
	`memэy
(
cЏ°ruщed_uri
, 
EVRPC_URI_PREFIX
, 
	`°ЊТ
(EVRPC_URI_PREFIX));

216 
	`memэy
(
cЏ°ruщed_uri
 + 
	`°ЊТ
(
EVRPC_URI_PREFIX
), 
uri
, strlen(uri));

217 
cЏ°ruщed_uri
[
cЏ°ruщed_uri_Ћn
 - 1] = '\0';

219  (
cЏ°ruщed_uri
);

220 
	}
}

223 
evљc_їgi°Ф_љc
(
evљc_ba£
 *
ba£
, 
evљc
 *
љc
,

224 (*
cb
)(
evљc_їq_gТФic
 *, *), *
cb_ђg
)

226 *
cЏ°ruщed_uri
 = 
	`evљc_cЏ°ruщ_uri
(
љc
->
uri
);

228 
љc
->
ba£
 = base;

229 
љc
->
cb
 = cb;

230 
љc
->
cb_ђg
 = cb_arg;

232 
	`TAILQ_INSERT_TAIL
(&
ba£
->
їgi°Фed_љcs
, 
љc
, 
√xt
);

234 
	`evhЙp_£t_cb
(
ba£
->
hЙp_£rvФ
,

235 
cЏ°ruщed_uri
,

236 
evљc_їque°_cb
,

237 
љc
);

239 
	`mm_дУ
(
cЏ°ruщed_uri
);

242 
	}
}

245 
	$evљc_uƒegi°Ф_љc
(
evљc_ba£
 *
ba£
, cЏ° *
«me
)

247 *
їgi°Фed_uri
 = 
NULL
;

248 
evљc
 *
љc
;

251 
	`TAILQ_FOREACH
(
љc
, &
ba£
->
їgi°Фed_љcs
, 
√xt
) {

252 iа(
	`°rcmp
(
љc
->
uri
, 
«me
) == 0)

255 iа(
љc
 =р
NULL
) {

259 
	`TAILQ_REMOVE
(&
ba£
->
їgi°Фed_љcs
, 
љc
, 
√xt
);

261 
	`mm_дУ
((*)
љc
->
uri
);

262 
	`mm_дУ
(
љc
);

264 
їgi°Фed_uri
 = 
	`evљc_cЏ°ruщ_uri
(
«me
);

267 
	`EVUTIL_ASSERT
(
	`evhЙp_dЦ_cb
(
ba£
->
hЙp_£rvФ
, 
їgi°Фed_uri
) == 0);

269 
	`mm_дУ
(
їgi°Фed_uri
);

271 
	}
}

273 
evљc_Јu£_їque°
(*
vba£
, *
щx
,

274 (*
cb
)(*, 
EVRPC_HOOK_RESULT
));

275 
	`evљc_їque°_cb_юosuї
(*, 
EVRPC_HOOK_RESULT
);

278 
	$evљc_їque°_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

280 
evљc
 *
љc
 = 
ђg
;

281 
evљc_їq_gТФic
 *
љc_°©e
 = 
NULL
;

284 iа(
їq
->
ty≥
 !р
EVHTTP_REQ_POST
 ||

285 
	`evbufгr_gС_Ћngth
(
їq
->
Ъput_bufгr
) <= 0)

286 
Фr№
;

288 
љc_°©e
 = 
	`mm_€ќoc
(1, (
evљc_їq_gТФic
));

289 iа(
љc_°©e
 =р
NULL
)

290 
Фr№
;

291 
љc_°©e
->
љc
 =Дpc;

292 
љc_°©e
->
hЙp_їq
 = 
їq
;

293 
љc_°©e
->
љc_d©a
 = 
NULL
;

295 iа(
	`TAILQ_FIRST
(&
љc
->
ba£
->
Ъput_hooks
и!р
NULL
) {

296 
hook_їs
;

298 
	`evљc_hook_assocЯЛ_mСa
(&
љc_°©e
->
hook_mСa
, 
їq
->
evcЏ
);

303 
hook_їs
 = 
	`evљc_іoыss_hooks
(&
љc
->
ba£
->
Ъput_hooks
,

304 
љc_°©e
, 
їq
,Дeq->
Ъput_bufгr
);

305 
hook_їs
) {

306 
EVRPC_TERMINATE
:

307 
Фr№
;

308 
EVRPC_PAUSE
:

309 
	`evљc_Јu£_їque°
(
љc
->
ba£
, 
љc_°©e
,

310 
evљc_їque°_cb_юosuї
);

312 
EVRPC_CONTINUE
:

315 
	`EVUTIL_ASSERT
(
hook_їs
 =р
EVRPC_TERMINATE
 ||

316 
hook_їs
 =р
EVRPC_CONTINUE
 ||

317 
hook_їs
 =р
EVRPC_PAUSE
);

321 
	`evљc_їque°_cb_юosuї
(
љc_°©e
, 
EVRPC_CONTINUE
);

324 
Фr№
:

325 iа(
љc_°©e
 !р
NULL
)

326 
	`evљc_їq°©e_дУ
(
љc_°©e
);

327 
	`evhЙp_£nd_Фr№
(
їq
, 
HTTP_SERVUNAVAIL
, "Service Error");

329 
	}
}

332 
	$evљc_їque°_cb_юosuї
(*
ђg
, 
EVRPC_HOOK_RESULT
 
hook_їs
)

334 
evљc_їq_gТФic
 *
љc_°©e
 = 
ђg
;

335 
evљc
 *
љc
 = 
љc_°©e
->rpc;

336 
evhЙp_їque°
 *
їq
 = 
љc_°©e
->
hЙp_їq
;

338 iа(
hook_їs
 =р
EVRPC_TERMINATE
)

339 
Фr№
;

342 
љc_°©e
->
їque°
 = 
љc
->
	`їque°_√w
();

343 iа(
љc_°©e
->
їque°
 =р
NULL
)

344 
Фr№
;

346 iа(
љc
->
	`їque°_unmђshЃ
(

347 
љc_°©e
->
їque°
, 
їq
->
Ъput_bufгr
) == -1) {

349 
Фr№
;

354 
љc_°©e
->
їґy
 = 
љc
->
	`їґy_√w
();

355 iа(
љc_°©e
->
їґy
 =р
NULL
)

356 
Фr№
;

359 
љc
->
	`cb
(
љc_°©e
,Дpc->
cb_ђg
);

363 
Фr№
:

364 iа(
љc_°©e
 !р
NULL
)

365 
	`evљc_їq°©e_дУ
(
љc_°©e
);

366 
	`evhЙp_£nd_Фr№
(
їq
, 
HTTP_SERVUNAVAIL
, "Service Error");

368 
	}
}

372 
	$evљc_їq°©e_дУ
(
evљc_їq_gТФic
* 
љc_°©e
)

374 
evљc
 *
љc
;

375 
	`EVUTIL_ASSERT
(
љc_°©e
 !р
NULL
);

376 
љc
 = 
љc_°©e
->rpc;

379 iа(
љc_°©e
->
hook_mСa
 !р
NULL
)

380 
	`evљc_hook_cЏЛxt_дУ
(
љc_°©e
->
hook_mСa
);

381 iа(
љc_°©e
->
їque°
 !р
NULL
)

382 
љc
->
	`їque°_дУ
(
љc_°©e
->
їque°
);

383 iа(
љc_°©e
->
їґy
 !р
NULL
)

384 
љc
->
	`їґy_дУ
(
љc_°©e
->
їґy
);

385 iа(
љc_°©e
->
љc_d©a
 !р
NULL
)

386 
	`evbufгr_дУ
(
љc_°©e
->
љc_d©a
);

387 
	`mm_дУ
(
љc_°©e
);

388 
	}
}

391 
evљc_їque°_dЏe_юosuї
(*, 
EVRPC_HOOK_RESULT
);

394 
	$evљc_їque°_dЏe
(
evљc_їq_gТФic
 *
љc_°©e
)

396 
evhЙp_їque°
 *
їq
 = 
љc_°©e
->
hЙp_їq
;

397 
evљc
 *
љc
 = 
љc_°©e
->rpc;

399 iа(
љc
->
	`їґy_comґСe
(
љc_°©e
->
їґy
) == -1) {

401 
Фr№
;

404 iа((
љc_°©e
->
љc_d©a
 = 
	`evbufгr_√w
()и=р
NULL
) {

406 
Фr№
;

410 
љc
->
	`їґy_mђshЃ
(
љc_°©e
->
љc_d©a
,Дpc_°©e->
їґy
);

412 iа(
	`TAILQ_FIRST
(&
љc
->
ba£
->
ouНut_hooks
и!р
NULL
) {

413 
hook_їs
;

415 
	`evљc_hook_assocЯЛ_mСa
(&
љc_°©e
->
hook_mСa
, 
їq
->
evcЏ
);

418 
hook_їs
 = 
	`evљc_іoыss_hooks
(&
љc
->
ba£
->
ouНut_hooks
,

419 
љc_°©e
, 
їq
,Дpc_°©e->
љc_d©a
);

420 
hook_їs
) {

421 
EVRPC_TERMINATE
:

422 
Фr№
;

423 
EVRPC_PAUSE
:

424 iа(
	`evљc_Јu£_їque°
(
љc
->
ba£
, 
љc_°©e
,

425 
evљc_їque°_dЏe_юosuї
) == -1)

426 
Фr№
;

428 
EVRPC_CONTINUE
:

431 
	`EVUTIL_ASSERT
(
hook_їs
 =р
EVRPC_TERMINATE
 ||

432 
hook_їs
 =р
EVRPC_CONTINUE
 ||

433 
hook_їs
 =р
EVRPC_PAUSE
);

437 
	`evљc_їque°_dЏe_юosuї
(
љc_°©e
, 
EVRPC_CONTINUE
);

440 
Фr№
:

441 iа(
љc_°©e
 !р
NULL
)

442 
	`evљc_їq°©e_дУ
(
љc_°©e
);

443 
	`evhЙp_£nd_Фr№
(
їq
, 
HTTP_SERVUNAVAIL
, "Service Error");

445 
	}
}

448 
	$evљc_їque°_dЏe_юosuї
(*
ђg
, 
EVRPC_HOOK_RESULT
 
hook_їs
)

450 
evљc_їq_gТФic
 *
љc_°©e
 = 
ђg
;

451 
evhЙp_їque°
 *
їq
 = 
љc_°©e
->
hЙp_їq
;

453 iа(
hook_їs
 =р
EVRPC_TERMINATE
)

454 
Фr№
;

457 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
ouНut_hЧdФs
, "CЏЛЅ-Ty≥"и=р
NULL
) {

458 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
,

461 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "OK", 
љc_°©e
->
љc_d©a
);

463 
	`evљc_їq°©e_дУ
(
љc_°©e
);

467 
Фr№
:

468 iа(
љc_°©e
 !р
NULL
)

469 
	`evљc_їq°©e_дУ
(
љc_°©e
);

470 
	`evhЙp_£nd_Фr№
(
їq
, 
HTTP_SERVUNAVAIL
, "Service Error");

472 
	}
}

477 
evљc_scheduЋ_їque°
(
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
,

478 
evљc_їque°_wњµФ
 *
щx
);

480 
evљc_poё
 *

481 
	$evљc_poё_√w
(
evТt_ba£
 *
ba£
)

483 
evљc_poё
 *
poё
 = 
	`mm_€ќoc
(1, (evrpc_pool));

484 iа(
poё
 =р
NULL
)

485  (
NULL
);

487 
	`TAILQ_INIT
(&
poё
->
cЏ√щiЏs
);

488 
	`TAILQ_INIT
(&
poё
->
їque°s
);

490 
	`TAILQ_INIT
(&
poё
->
Јu£d_їque°s
);

492 
	`TAILQ_INIT
(&
poё
->
Ъput_hooks
);

493 
	`TAILQ_INIT
(&
poё
->
ouНut_hooks
);

495 
poё
->
ba£
 = base;

496 
poё
->
timeout
 = -1;

498  (
poё
);

499 
	}
}

502 
	$evљc_їque°_wњµФ_дУ
(
evљc_їque°_wњµФ
 *
їque°
)

504 iа(
їque°
->
hook_mСa
 !р
NULL
)

505 
	`evљc_hook_cЏЛxt_дУ
(
їque°
->
hook_mСa
);

506 
	`mm_дУ
(
їque°
->
«me
);

507 
	`mm_дУ
(
їque°
);

508 
	}
}

511 
	$evљc_poё_дУ
(
evљc_poё
 *
poё
)

513 
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
;

514 
evљc_їque°_wњµФ
 *
їque°
;

515 
evљc_hook_щx
 *
Јu£
;

516 
evљc_hook
 *
hook
;

518 (
їque°
 = 
	`TAILQ_FIRST
(&
poё
->
їque°s
)и!р
NULL
) {

519 
	`TAILQ_REMOVE
(&
poё
->
їque°s
, 
їque°
, 
√xt
);

520 
	`evљc_їque°_wњµФ_дУ
(
їque°
);

523 (
Јu£
 = 
	`TAILQ_FIRST
(&
poё
->
Јu£d_їque°s
)и!р
NULL
) {

524 
	`TAILQ_REMOVE
(&
poё
->
Јu£d_їque°s
, 
Јu£
, 
√xt
);

525 
	`mm_дУ
(
Јu£
);

528 (
cЏ√щiЏ
 = 
	`TAILQ_FIRST
(&
poё
->
cЏ√щiЏs
)и!р
NULL
) {

529 
	`TAILQ_REMOVE
(&
poё
->
cЏ√щiЏs
, 
cЏ√щiЏ
, 
√xt
);

530 
	`evhЙp_cЏ√щiЏ_дУ
(
cЏ√щiЏ
);

533 (
hook
 = 
	`TAILQ_FIRST
(&
poё
->
Ъput_hooks
)и!р
NULL
) {

534 
	`EVUTIL_ASSERT
(
	`evљc_їmove_hook
(
poё
, 
EVRPC_INPUT
, 
hook
));

537 (
hook
 = 
	`TAILQ_FIRST
(&
poё
->
ouНut_hooks
)и!р
NULL
) {

538 
	`EVUTIL_ASSERT
(
	`evљc_їmove_hook
(
poё
, 
EVRPC_OUTPUT
, 
hook
));

541 
	`mm_дУ
(
poё
);

542 
	}
}

550 
	$evљc_poё_add_cЏ√щiЏ
(
evљc_poё
 *
poё
,

551 
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
)

553 
	`EVUTIL_ASSERT
(
cЏ√щiЏ
->
hЙp_£rvФ
 =р
NULL
);

554 
	`TAILQ_INSERT_TAIL
(&
poё
->
cЏ√щiЏs
, 
cЏ√щiЏ
, 
√xt
);

559 iа(
poё
->
ba£
 !р
NULL
)

560 
	`evhЙp_cЏ√щiЏ_£t_ba£
(
cЏ√щiЏ
, 
poё
->
ba£
);

566 iа(
cЏ√щiЏ
->
timeout
 == -1)

567 
cЏ√щiЏ
->
timeout
 = 
poё
->timeout;

574 iа(
	`TAILQ_FIRST
(&
poё
->
їque°s
и!р
NULL
) {

575 
evљc_їque°_wњµФ
 *
їque°
 =

576 
	`TAILQ_FIRST
(&
poё
->
їque°s
);

577 
	`TAILQ_REMOVE
(&
poё
->
їque°s
, 
їque°
, 
√xt
);

578 
	`evљc_scheduЋ_їque°
(
cЏ√щiЏ
, 
їque°
);

580 
	}
}

583 
	$evљc_poё_їmove_cЏ√щiЏ
(
evљc_poё
 *
poё
,

584 
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
)

586 
	`TAILQ_REMOVE
(&
poё
->
cЏ√щiЏs
, 
cЏ√щiЏ
, 
√xt
);

587 
	}
}

590 
	$evљc_poё_£t_timeout
(
evљc_poё
 *
poё
, 
timeout_Ъ_£cs
)

592 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

593 
	`TAILQ_FOREACH
(
evcЏ
, &
poё
->
cЏ√щiЏs
, 
√xt
) {

594 
evcЏ
->
timeout
 = 
timeout_Ъ_£cs
;

596 
poё
->
timeout
 = 
timeout_Ъ_£cs
;

597 
	}
}

600 
evљc_їґy_dЏe
(
evhЙp_їque°
 *, *);

601 
evљc_їque°_timeout
(
evutЮ_sockС_t
, , *);

607 
evhЙp_cЏ√щiЏ
 *

608 
	$evљc_poё_fЪd_cЏ√щiЏ
(
evљc_poё
 *
poё
)

610 
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
;

611 
	`TAILQ_FOREACH
(
cЏ√щiЏ
, &
poё
->
cЏ√щiЏs
, 
√xt
) {

612 iа(
	`TAILQ_FIRST
(&
cЏ√щiЏ
->
їque°s
и=р
NULL
)

613  (
cЏ√щiЏ
);

616  (
NULL
);

617 
	}
}

623 
evљc_scheduЋ_їque°_юosuї
(*
щx
, 
EVRPC_HOOK_RESULT
);

629 
	$evљc_scheduЋ_їque°
(
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
,

630 
evљc_їque°_wњµФ
 *
щx
)

632 
evhЙp_їque°
 *
їq
 = 
NULL
;

633 
evљc_poё
 *
poё
 = 
щx
->pool;

634 
evљc_°©us
 
°©us
;

636 iа((
їq
 = 
	`evhЙp_їque°_√w
(
evљc_їґy_dЏe
, 
щx
)и=р
NULL
)

637 
Фr№
;

640 
щx
->
	`їque°_mђshЃ
(
їq
->
ouНut_bufгr
, ctx->
їque°
);

643 
щx
->
evcЏ
 = 
cЏ√щiЏ
;

646 
щx
->
їq
 =Дeq;

648 iа(
	`TAILQ_FIRST
(&
poё
->
ouНut_hooks
и!р
NULL
) {

649 
hook_їs
;

651 
	`evљc_hook_assocЯЛ_mСa
(&
щx
->
hook_mСa
, 
cЏ√щiЏ
);

654 
hook_їs
 = 
	`evљc_іoыss_hooks
(&
poё
->
ouНut_hooks
,

655 
щx
, 
їq
,Дeq->
ouНut_bufгr
);

657 
hook_їs
) {

658 
EVRPC_TERMINATE
:

659 
Фr№
;

660 
EVRPC_PAUSE
:

662 iа(
	`evљc_Јu£_їque°
(
poё
, 
щx
,

663 
evљc_scheduЋ_їque°_юosuї
) == -1)

664 
Фr№
;

666 
EVRPC_CONTINUE
:

670 
	`EVUTIL_ASSERT
(
hook_їs
 =р
EVRPC_TERMINATE
 ||

671 
hook_їs
 =р
EVRPC_CONTINUE
 ||

672 
hook_їs
 =р
EVRPC_PAUSE
);

676 
	`evљc_scheduЋ_їque°_юosuї
(
щx
, 
EVRPC_CONTINUE
);

679 
Фr№
:

680 
	`mem£t
(&
°©us
, 0, (status));

681 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

682 (*
щx
->
cb
)(&
°©us
, ctx->
їque°
, ctx->
їґy
, ctx->
cb_ђg
);

683 
	`evљc_їque°_wњµФ_дУ
(
щx
);

685 
	}
}

688 
	$evљc_scheduЋ_їque°_юosuї
(*
ђg
, 
EVRPC_HOOK_RESULT
 
hook_їs
)

690 
evљc_їque°_wњµФ
 *
щx
 = 
ђg
;

691 
evhЙp_cЏ√щiЏ
 *
cЏ√щiЏ
 = 
щx
->
evcЏ
;

692 
evhЙp_їque°
 *
їq
 = 
щx
->req;

693 
evљc_poё
 *
poё
 = 
щx
->pool;

694 
evљc_°©us
 
°©us
;

695 *
uri
 = 
NULL
;

696 
їs
 = 0;

698 iа(
hook_їs
 =р
EVRPC_TERMINATE
)

699 
Фr№
;

701 
uri
 = 
	`evљc_cЏ°ruщ_uri
(
щx
->
«me
);

702 iа(
uri
 =р
NULL
)

703 
Фr№
;

705 iа(
poё
->
timeout
 > 0) {

709 
timevЃ
 
tv
;

710 
	`evutЮ_timФюЧr
(&
tv
);

711 
tv
.
tv_£c
 = 
poё
->
timeout
;

712 
	`evtimФ_add
(&
щx
->
ev_timeout
, &
tv
);

716 
їs
 = 
	`evhЙp_make_їque°
(
cЏ√щiЏ
, 
їq
, 
EVHTTP_REQ_POST
, 
uri
);

717 
	`mm_дУ
(
uri
);

719 iа(
їs
 == -1)

720 
Фr№
;

724 
Фr№
:

725 
	`mem£t
(&
°©us
, 0, (status));

726 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

727 (*
щx
->
cb
)(&
°©us
, ctx->
їque°
, ctx->
їґy
, ctx->
cb_ђg
);

728 
	`evљc_їque°_wњµФ_дУ
(
щx
);

729 
	}
}

733 
evљc_Јu£_їque°
(*
vba£
, *
щx
,

734 (*
cb
)(*, 
EVRPC_HOOK_RESULT
))

736 
_evљc_hooks
 *
ba£
 = 
vba£
;

737 
evљc_hook_щx
 *
Јu£
 = 
	`mm_mЃloc
((*pause));

738 iа(
Јu£
 =р
NULL
)

741 
Јu£
->
щx
 = ctx;

742 
Јu£
->
cb
 = cb;

744 
	`TAILQ_INSERT_TAIL
(&
ba£
->
Јu£_їque°s
, 
Јu£
, 
√xt
);

746 
	}
}

749 
	$evљc_їsume_їque°
(*
vba£
, *
щx
, 
EVRPC_HOOK_RESULT
 
їs
)

751 
_evљc_hooks
 *
ba£
 = 
vba£
;

752 
evљc_Јu£_li°
 *
hЧd
 = &
ba£
->
Јu£_їque°s
;

753 
evљc_hook_щx
 *
Јu£
;

755 
	`TAILQ_FOREACH
(
Јu£
, 
hЧd
, 
√xt
) {

756 iа(
Јu£
->
щx
 == ctx)

760 iа(
Јu£
 =р
NULL
)

763 (*
Јu£
->
cb
)’au£->
щx
, 
їs
);

764 
	`TAILQ_REMOVE
(
hЧd
, 
Јu£
, 
√xt
);

766 
	}
}

769 
	$evљc_make_їque°
(
evљc_їque°_wњµФ
 *
щx
)

771 
evљc_poё
 *
poё
 = 
щx
->pool;

774 
	`evtimФ_assign
(&
щx
->
ev_timeout
, 
poё
->
ba£
, 
evљc_їque°_timeout
, ctx);

777 
	`EVUTIL_ASSERT
(
	`TAILQ_FIRST
(&
poё
->
cЏ√щiЏs
и!р
NULL
);

783 
	`TAILQ_INSERT_TAIL
(&
poё
->
їque°s
, 
щx
, 
√xt
);

785 
	`evљc_poё_scheduЋ
(
poё
);

788 
	}
}

791 
evљc_їque°_wњµФ
 *

792 
evљc_make_їque°_щx
(

793 
evљc_poё
 *
poё
, *
їque°
, *
їґy
,

794 cЏ° *
љъame
,

795 (*
їq_mђshЃ
)(
evbufгr
*, *),

796 (*
љl_юЧr
)(*),

797 (*
љl_unmђshЃ
)(*, 
evbufгr
 *),

798 (*
cb
)(
evљc_°©us
 *, *, *, *),

799 *
cbђg
)

801 
evљc_їque°_wњµФ
 *
щx
 = (evrpc_request_wrapper *)

802 
	`mm_mЃloc
((
evљc_їque°_wњµФ
));

803 iа(
щx
 =р
NULL
)

804  (
NULL
);

806 
щx
->
poё
 =Еool;

807 
щx
->
hook_mСa
 = 
NULL
;

808 
щx
->
evcЏ
 = 
NULL
;

809 
щx
->
«me
 = 
	`mm_°rdup
(
љъame
);

810 iа(
щx
->
«me
 =р
NULL
) {

811 
	`mm_дУ
(
щx
);

812  (
NULL
);

814 
щx
->
cb
 = cb;

815 
щx
->
cb_ђg
 = 
cbђg
;

816 
щx
->
їque°
 =Дequest;

817 
щx
->
їґy
 =Дeply;

818 
щx
->
їque°_mђshЃ
 = 
їq_mђshЃ
;

819 
щx
->
їґy_юЧr
 = 
љl_юЧr
;

820 
щx
->
їґy_unmђshЃ
 = 
љl_unmђshЃ
;

822  (
щx
);

823 
	}
}

826 
evљc_їґy_dЏe_юosuї
(*, 
EVRPC_HOOK_RESULT
);

829 
	$evљc_їґy_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

831 
evљc_їque°_wњµФ
 *
щx
 = 
ђg
;

832 
evљc_poё
 *
poё
 = 
щx
->pool;

833 
hook_їs
 = 
EVRPC_CONTINUE
;

836 
	`evТt_dЦ
(&
щx
->
ev_timeout
);

838 
щx
->
їq
 =Дeq;

841 iа(
їq
 =р
NULL
) {

842 
	`evљc_їґy_dЏe_юosuї
(
щx
, 
EVRPC_CONTINUE
);

846 iа(
	`TAILQ_FIRST
(&
poё
->
Ъput_hooks
и!р
NULL
) {

847 
	`evљc_hook_assocЯЛ_mСa
(&
щx
->
hook_mСa
, ctx->
evcЏ
);

850 
hook_їs
 = 
	`evљc_іoыss_hooks
(&
poё
->
Ъput_hooks
,

851 
щx
, 
їq
,Дeq->
Ъput_bufгr
);

853 
hook_їs
) {

854 
EVRPC_TERMINATE
:

855 
EVRPC_CONTINUE
:

857 
EVRPC_PAUSE
:

864 iа(
їq
 !р
NULL
)

865 
	`evhЙp_їque°_own
(
їq
);

867 
	`evљc_Јu£_їque°
(
poё
, 
щx
,

868 
evљc_їґy_dЏe_юosuї
);

871 
	`EVUTIL_ASSERT
(
hook_їs
 =р
EVRPC_TERMINATE
 ||

872 
hook_їs
 =р
EVRPC_CONTINUE
 ||

873 
hook_їs
 =р
EVRPC_PAUSE
);

877 
	`evљc_їґy_dЏe_юosuї
(
щx
, 
hook_їs
);

880 
	}
}

883 
	$evљc_їґy_dЏe_юosuї
(*
ђg
, 
EVRPC_HOOK_RESULT
 
hook_їs
)

885 
evљc_їque°_wњµФ
 *
щx
 = 
ђg
;

886 
evhЙp_їque°
 *
їq
 = 
щx
->req;

887 
evљc_poё
 *
poё
 = 
щx
->pool;

888 
evљc_°©us
 
°©us
;

889 
їs
 = -1;

891 
	`mem£t
(&
°©us
, 0, (status));

892 
°©us
.
hЙp_їq
 = 
їq
;

895 iа(
їq
 =р
NULL
) {

896 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_TIMEOUT
;

897 } iа(
hook_їs
 =р
EVRPC_TERMINATE
) {

898 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_HOOKABORTED
;

900 
їs
 = 
щx
->
	`їґy_unmђshЃ
(щx->
їґy
, 
їq
->
Ъput_bufгr
);

901 iа(
їs
 == -1)

902 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_BADPAYLOAD
;

905 iа(
їs
 == -1) {

907 
щx
->
	`їґy_юЧr
(щx->
їґy
);

910 (*
щx
->
cb
)(&
°©us
, ctx->
їque°
, ctx->
їґy
, ctx->
cb_ђg
);

912 
	`evљc_їque°_wњµФ_дУ
(
щx
);

916 iа(
їq
 !р
NULL
 && 
	`evhЙp_їque°_is_ow√d
(req))

917 
	`evhЙp_їque°_дУ
(
їq
);

920 
	`evљc_poё_scheduЋ
(
poё
);

921 
	}
}

924 
	$evљc_poё_scheduЋ
(
evљc_poё
 *
poё
)

926 
evљc_їque°_wњµФ
 *
щx
 = 
	`TAILQ_FIRST
(&
poё
->
їque°s
);

927 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

930 iа(
щx
 =р
NULL
)

933 iа((
evcЏ
 = 
	`evљc_poё_fЪd_cЏ√щiЏ
(
poё
)и!р
NULL
) {

934 
	`TAILQ_REMOVE
(&
poё
->
їque°s
, 
щx
, 
√xt
);

935 
	`evљc_scheduЋ_їque°
(
evcЏ
, 
щx
);

937 
	}
}

940 
	$evљc_їque°_timeout
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

942 
evљc_їque°_wњµФ
 *
щx
 = 
ђg
;

943 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
щx
->evcon;

944 
	`EVUTIL_ASSERT
(
evcЏ
 !р
NULL
);

946 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
, 
EVCON_HTTP_TIMEOUT
);

947 
	}
}

954 
	$evљc_mСa_d©a_дУ
(
evљc_mСa_li°
 *
mСa_d©a
)

956 
evљc_mСa
 *
ТМy
;

957 
	`EVUTIL_ASSERT
(
mСa_d©a
 !р
NULL
);

959 (
ТМy
 = 
	`TAILQ_FIRST
(
mСa_d©a
)и!р
NULL
) {

960 
	`TAILQ_REMOVE
(
mСa_d©a
, 
ТМy
, 
√xt
);

961 
	`mm_дУ
(
ТМy
->
key
);

962 
	`mm_дУ
(
ТМy
->
d©a
);

963 
	`mm_дУ
(
ТМy
);

965 
	}
}

967 
evљc_hook_mСa
 *

968 
	$evљc_hook_mСa_√w
()

970 
evљc_hook_mСa
 *
щx
;

971 
щx
 = 
	`mm_mЃloc
((
evљc_hook_mСa
));

972 
	`EVUTIL_ASSERT
(
щx
 !р
NULL
);

974 
	`TAILQ_INIT
(&
щx
->
mСa_d©a
);

975 
щx
->
evcЏ
 = 
NULL
;

977  (
щx
);

978 
	}
}

981 
	$evљc_hook_assocЯЛ_mСa
(
evљc_hook_mСa
 **
pщx
,

982 
evhЙp_cЏ√щiЏ
 *
evcЏ
)

984 
evљc_hook_mСa
 *
щx
 = *
pщx
;

985 iа(
щx
 =р
NULL
)

986 *
pщx
 = 
щx
 = 
	`evљc_hook_mСa_√w
();

987 
щx
->
evcЏ
 =Гvcon;

988 
	}
}

991 
	$evљc_hook_cЏЛxt_дУ
(
evљc_hook_mСa
 *
щx
)

993 
	`evљc_mСa_d©a_дУ
(&
щx
->
mСa_d©a
);

994 
	`mm_дУ
(
щx
);

995 
	}
}

999 
	$evљc_hook_add_mСa
(*
щx
, cЏ° *
key
,

1000 cЏ° *
d©a
, 
size_t
 
d©a_size
)

1002 
evљc_їque°_wњµФ
 *
їq
 = 
щx
;

1003 
evљc_hook_mСa
 *
°№e
 = 
NULL
;

1004 
evљc_mСa
 *
mСa
 = 
NULL
;

1006 iа((
°№e
 = 
їq
->
hook_mСa
и=р
NULL
)

1007 
°№e
 = 
їq
->
hook_mСa
 = 
	`evљc_hook_mСa_√w
();

1009 
	`EVUTIL_ASSERT
((
mСa
 = 
	`mm_mЃloc
((
evљc_mСa
))и!р
NULL
);

1010 
	`EVUTIL_ASSERT
((
mСa
->
key
 = 
	`mm_°rdup
(key)и!р
NULL
);

1011 
mСa
->
d©a_size
 = data_size;

1012 
	`EVUTIL_ASSERT
((
mСa
->
d©a
 = 
	`mm_mЃloc
(
d©a_size
)и!р
NULL
);

1013 
	`memэy
(
mСa
->
d©a
, d©a, 
d©a_size
);

1015 
	`TAILQ_INSERT_TAIL
(&
°№e
->
mСa_d©a
, 
mСa
, 
√xt
);

1016 
	}
}

1019 
	$evљc_hook_fЪd_mСa
(*
щx
, cЏ° *
key
, **
d©a
, 
size_t
 *
d©a_size
)

1021 
evљc_їque°_wњµФ
 *
їq
 = 
щx
;

1022 
evљc_mСa
 *
mСa
 = 
NULL
;

1024 iа(
їq
->
hook_mСa
 =р
NULL
)

1027 
	`TAILQ_FOREACH
(
mСa
, &
їq
->
hook_mСa
->
mСa_d©a
, 
√xt
) {

1028 iа(
	`°rcmp
(
mСa
->
key
, key) == 0) {

1029 *
d©a
 = 
mСa
->data;

1030 *
d©a_size
 = 
mСa
->data_size;

1036 
	}
}

1038 
evhЙp_cЏ√щiЏ
 *

1039 
	$evљc_hook_gС_cЏ√щiЏ
(*
щx
)

1041 
evљc_їque°_wњµФ
 *
їq
 = 
щx
;

1042  (
їq
->
hook_mСa
 !р
NULL
 ?Дeq->hook_mСa->
evcЏ
 : NULL);

1043 
	}
}

1046 
evљc_£nd_їque°_gТФic
(
evљc_poё
 *
poё
,

1047 *
їque°
, *
їґy
,

1048 (*
cb
)(
evљc_°©us
 *, *, *, *),

1049 *
cb_ђg
,

1050 cЏ° *
љъame
,

1051 (*
їq_mђshЃ
)(
evbufгr
 *, *),

1052 (*
љl_юЧr
)(*),

1053 (*
љl_unmђshЃ
)(*, 
evbufгr
 *))

1055 
evљc_°©us
 
°©us
;

1056 
evљc_їque°_wњµФ
 *
щx
;

1057 
щx
 = 
	`evљc_make_їque°_щx
(
poё
, 
їque°
, 
їґy
,

1058 
љъame
, 
їq_mђshЃ
, 
љl_юЧr
, 
љl_unmђshЃ
, 
cb
, 
cb_ђg
);

1059 iа(
щx
 =р
NULL
)

1060 
Фr№
;

1061  (
	`evљc_make_їque°
(
щx
));

1062 
Фr№
:

1063 
	`mem£t
(&
°©us
, 0, (status));

1064 
°©us
.
Фr№
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

1065 (*(
cb
))(&
°©us
, 
їque°
, 
їґy
, 
cb_ђg
);

1067 
	}
}

1070 
evљc
 *

1071 
evљc_їgi°Ф_objeщ
(cЏ° *
«me
,

1072 *(*
їq_√w
)(), (*
їq_дУ
)(*),

1073 (*
їq_unmђshЃ
)(*, 
evbufгr
 *),

1074 *(*
љl_√w
)(), (*
љl_дУ
)(*),

1075 (*
љl_comґСe
)(*),

1076 (*
љl_mђshЃ
)(
evbufгr
 *, *))

1078 
evљc
* 
љc
 = (evљш*)
	`mm_€ќoc
(1, (evrpc));

1079 iа(
љc
 =р
NULL
)

1080  (
NULL
);

1081 
љc
->
uri
 = 
	`mm_°rdup
(
«me
);

1082 iа(
љc
->
uri
 =р
NULL
) {

1083 
	`mm_дУ
(
љc
);

1084  (
NULL
);

1086 
љc
->
їque°_√w
 = 
їq_√w
;

1087 
љc
->
їque°_дУ
 = 
їq_дУ
;

1088 
љc
->
їque°_unmђshЃ
 = 
їq_unmђshЃ
;

1089 
љc
->
їґy_√w
 = 
љl_√w
;

1090 
љc
->
їґy_дУ
 = 
љl_дУ
;

1091 
љc
->
їґy_comґСe
 = 
љl_comґСe
;

1092 
љc
->
їґy_mђshЃ
 = 
љl_mђshЃ
;

1093  (
љc
);

1094 
	}
}

1097 
evљc_їgi°Ф_gТФic
(
evљc_ba£
 *
ba£
, cЏ° *
«me
,

1098 (*
€ќback
)(
evљc_їq_gТФic
 *, *), *
cbђg
,

1099 *(*
їq_√w
)(), (*
їq_дУ
)(*),

1100 (*
їq_unmђshЃ
)(*, 
evbufгr
 *),

1101 *(*
љl_√w
)(), (*
љl_дУ
)(*),

1102 (*
љl_comґСe
)(*),

1103 (*
љl_mђshЃ
)(
evbufгr
 *, *))

1105 
evљc
* 
љc
 =

1106 
	`evљc_їgi°Ф_objeщ
(
«me
, 
їq_√w
, 
їq_дУ
, 
їq_unmђshЃ
,

1107 
љl_√w
, 
љl_дУ
, 
љl_comґСe
, 
љl_mђshЃ
);

1108 iа(
љc
 =р
NULL
)

1110 
	`evљc_їgi°Ф_љc
(
ba£
, 
љc
,

1111 ((*)(
evљc_їq_gТФic
*, *))
€ќback
, 
cbђg
);

1113 
	}
}

1116 
evљc_poё
 *

1117 
	$evљc_їque°_gС_poё
(
evљc_їque°_wњµФ
 *
щx
)

1119  (
щx
->
poё
);

1120 
	}
}

1123 
	$evљc_їque°_£t_poё
(
evљc_їque°_wњµФ
 *
щx
,

1124 
evљc_poё
 *
poё
)

1126 
щx
->
poё
 =Еool;

1127 
	}
}

1130 
evљc_їque°_£t_cb
(
evљc_їque°_wњµФ
 *
щx
,

1131 (*
cb
)(
evљc_°©us
*, *
їque°
, *
їґy
, *
ђg
),

1132 *
cb_ђg
)

1134 
щx
->
cb
 = cb;

1135 
щx
->
cb_ђg
 = cb_arg;

1136 
	}
}

	@evrpc.h

27 #iвdeа
_EVRPC_H_


28 
	#_EVRPC_H_


	)

30 
	~<evТt.h
>

31 
	~<evТt2/љc.h
>

32 
	~<evТt2/љc_°ruщ.h
>

33 
	~<evТt2/љc_comЈt.h
>

	@evsignal-internal.h

27 #iвdeа
_EVSIGNAL_H_


28 
	#_EVSIGNAL_H_


	)

30 #iвdeа
evutЮ_sockС_t


31 
	~"evТt2/utЮ.h
"

33 
	~<sig«l.h
>

35 (*
	tev_sigh™dЋr_t
)();

37 
	sevsig_Ъfo
 {

38 
evТt
 
ev_sig«l
;

39 
evutЮ_sockС_t
 
ev_sig«l_ЈЬ
[2];

40 
ev_sig«l_added
;

41 vё©ЮР
sig_©omic_t
 
evsig_€ught
;

42 
sig_©omic_t
 
evsig€ught
[
NSIG
];

43 #ifdeа
_EVENT_HAVE_SIGACTION


44 
sigaщiЏ
 **
sh_ёd
;

46 
ev_sigh™dЋr_t
 **
sh_ёd
;

48 
sh_ёd_max
;

50 
	`evsig_ЪЩ
(
evТt_ba£
 *);

51 
	`evsig_іoыss
(
evТt_ba£
 *);

52 
	`evsig_dЧќoc
(
evТt_ba£
 *);

	@evthread-internal.h

26 #iвdeа
_EVTHREAD_INTERNAL_H_


27 
	#_EVTHREAD_INTERNAL_H_


	)

29 #ifdeа
__эlu•lus


33 
	~<evТt2/thїad.h
>

34 
	~"evТt-cЏfig.h
"

35 
	~"utЮ-ЪЛЇЃ.h
"

37 
evТt_ba£
;

39 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


42 
evthїad_lock_€ќbacks
 
_evthїad_lock_вs
;

43 (*
_evthїad_id_в
)();

44 
_evthїad_lock_debuggЪg_ТabЋd
;

47 
	#EVBASE_USING_LOCKS
(
ba£
) \

48 (
ba£
 !р
NULL
 && (ba£)->
th_ba£_lock
 !рNULL)

	)

51 
	#EVTHREAD_GET_ID
() \

52 (
_evthїad_id_в
 ? 
	`_evthїad_id_в
(и: 1)

	)

56 
	#EVBASE_IN_THREAD
(
ba£
) \

57 (
_evthїad_id_в
 =р
NULL
 || \

58 (
ba£
)->
th_ow√r_id
 =р
	`_evthїad_id_в
())

	)

62 
	#EVTHREAD_ALLOC_LOCK
(
lockvђ
, 
lockty≥
) \

63 ((
lockvђ
ир
_evthїad_lock_вs
.
Ѓloc
 ? \

64 
_evthїad_lock_вs
.
	`Ѓloc
(
lockty≥
и: 
NULL
)

	)

67 
	#EVTHREAD_FREE_LOCK
(
lockvђ
, 
lockty≥
) \

69 *
_lock_tmp_
 = (
lockvђ
); \

70 iа(
_lock_tmp_
 && 
_evthїad_lock_вs
.
дУ
) \

71 
_evthїad_lock_вs
.
	`дУ
(
_lock_tmp_
, (
lockty≥
)); \

72 } 0)

	)

75 
	#EVLOCK_LOCK
(
lockvђ
,
mode
) \

77 iа(
lockvђ
) \

78 
_evthїad_lock_вs
.
	`lock
(
mode
, 
lockvђ
); \

79 } 0)

	)

82 
	#EVLOCK_UNLOCK
(
lockvђ
,
mode
) \

84 iа(
lockvђ
) \

85 
_evthїad_lock_вs
.
	`u∆ock
(
mode
, 
lockvђ
); \

86 } 0)

	)

89 
	#_EVLOCK_SORTLOCKS
(
lockvђ1
, 
lockvђ2
) \

91 iа(
lockvђ1
 && 
lockvђ2
 &&Жockvar1 >Жockvar2) { \

92 *
tmp
 = 
lockvђ1
; \

93 
lockvђ1
 = 
lockvђ2
; \

94 
lockvђ2
 = 
tmp
; \

96 } 0)

	)

100 
	#EVLOCK_LOCK2
(
lock1
,
lock2
,
mode1
,
mode2
) \

102 *
_lock1_tmґock
 = (
lock1
); \

103 *
_lock2_tmґock
 = (
lock2
); \

104 
	`_EVLOCK_SORTLOCKS
(
_lock1_tmґock
,
_lock2_tmґock
); \

105 
	`EVLOCK_LOCK
(
_lock1_tmґock
,
mode1
); \

106 iа(
_lock2_tmґock
 !р
_lock1_tmґock
) \

107 
	`EVLOCK_LOCK
(
_lock2_tmґock
,
mode2
); \

108 } 0)

	)

111 
	#EVLOCK_UNLOCK2
(
lock1
,
lock2
,
mode1
,
mode2
) \

113 *
_lock1_tmґock
 = (
lock1
); \

114 *
_lock2_tmґock
 = (
lock2
); \

115 
	`_EVLOCK_SORTLOCKS
(
_lock1_tmґock
,
_lock2_tmґock
); \

116 iа(
_lock2_tmґock
 !р
_lock1_tmґock
) \

117 
	`EVLOCK_UNLOCK
(
_lock2_tmґock
,
mode2
); \

118 
	`EVLOCK_UNLOCK
(
_lock1_tmґock
,
mode1
); \

119 } 0)

	)

124 
	#EVBASE_ACQUIRE_LOCK
(
ba£
, 
lockvђ
) do { \

125 iа(
	`EVBASE_USING_LOCKS
(
ba£
)) \

126 
_evthїad_lock_вs
.
	`lock
(0, (
ba£
)->
lockvђ
); \

127 } 0)

	)

130 
	#EVBASE_RELEASE_LOCK
(
ba£
, 
lockvђ
) do { \

131 iа(
	`EVBASE_USING_LOCKS
(
ba£
)) \

132 
_evthїad_lock_вs
.
	`u∆ock
(0, (
ba£
)->
lockvђ
); \

133 } 0)

	)

137 
	#EVLOCK_ASSERT_LOCKED
(
lock
) \

139 iа((
lock
и&& 
_evthїad_lock_debuggЪg_ТabЋd
) { \

140 
	`EVUTIL_ASSERT
(
	`_evthїad_is_debug_lock_hЦd
(
lock
)); \

142 } 0)

	)

144 
_evthїad_is_debug_lock_hЦd
(*
lock
);

148 
ЪlЪe
 
EVLOCK_TRY_LOCK
(*
lock
);

149 
ЪlЪe
 

150 
EVLOCK_TRY_LOCK
(*
lock
)

152 iа(
	glock
 && 
	g_evthїad_lock_вs
.lock) {

153 
	gr
 = 
_evthїad_lock_вs
.
lock
(
EVTHREAD_TRY
,Жock);

154  !
	gr
;

164 
	#EVTHREAD_GET_ID
(и1

	)

165 
	#EVTHREAD_ALLOC_LOCK
(
lockvђ
, 
lockty≥
и
_EVUTIL_NIL_STMT


	)

166 
	#EVTHREAD_FREE_LOCK
(
lockvђ
, 
lockty≥
и
_EVUTIL_NIL_STMT


	)

168 
	#EVLOCK_LOCK
(
lockvђ
, 
mode
и
_EVUTIL_NIL_STMT


	)

169 
	#EVLOCK_UNLOCK
(
lockvђ
, 
mode
и
_EVUTIL_NIL_STMT


	)

170 
	#EVLOCK_LOCK2
(
lock1
,
lock2
,
mode1
,
mode2
и
_EVUTIL_NIL_STMT


	)

171 
	#EVLOCK_UNLOCK2
(
lock1
,
lock2
,
mode1
,
mode2
и
_EVUTIL_NIL_STMT


	)

173 
	#EVBASE_IN_THREAD
(
ba£
и1

	)

174 
	#EVBASE_ACQUIRE_LOCK
(
ba£
, 
lock
и
_EVUTIL_NIL_STMT


	)

175 
	#EVBASE_RELEASE_LOCK
(
ba£
, 
lock
и
_EVUTIL_NIL_STMT


	)

176 
	#EVLOCK_ASSERT_LOCKED
(
lock
и
_EVUTIL_NIL_STMT


	)

178 
	#EVLOCK_TRY_LOCK
(
lock
и1

	)

181 #ifdeа
__эlu•lus


	@evthread.c

27 
	~"evТt-cЏfig.h
"

29 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


31 
	~<evТt2/thїad.h
>

33 
	~<°dlib.h
>

34 
	~<°rЪg.h
>

36 
	~"log-ЪЛЇЃ.h
"

37 
	~"mm-ЪЛЇЃ.h
"

38 
	~"utЮ-ЪЛЇЃ.h
"

39 
	~"evthїad-ЪЛЇЃ.h
"

42 
	g_evthїad_lock_debuggЪg_ТabЋd
 = 0;

43 
evthїad_lock_€ќbacks
 
	g_evthїad_lock_вs
 = {

44 0, 0, 
NULL
, NULL, NULL, NULL

47 
evthїad_lock_€ќbacks
 
	g_№igЪЃ_lock_вs
 = {

48 0, 0, 
NULL
, NULL, NULL, NULL

50 (*
_evthїad_id_в
)(ир
NULL
;

53 
	`evthїad_£t_id_€ќback
((*
id_в
)())

55 
_evthїad_id_в
 = 
id_в
;

56 
	}
}

59 
	$evthїad_£t_lock_€ќbacks
(cЏ° 
evthїad_lock_€ќbacks
 *
cbs
)

61 
evthїad_lock_€ќbacks
 *
ПrgС
 =

62 
_evthїad_lock_debuggЪg_ТabЋd


63 ? &
_№igЪЃ_lock_вs
 : &
_evthїad_lock_вs
;

65 iа(!
cbs
) {

66 
	`mem£t
(
ПrgС
, 0, (
_evthїad_lock_вs
));

69 iа(
cbs
->
Ѓloc
 && cbs->
дУ
 && cbs->
lock
 && cbs->
u∆ock
) {

70 
	`memэy
(
ПrgС
, 
cbs
, (
_evthїad_lock_вs
));

75 
	}
}

77 #iвdeа
DISABLE_OBSOLETE_LOCK_API


80 (*
_obsёСe_lockЪg_в
)(, *ир
NULL
;

81 *(*
_obsёСe_lock_Ѓloc_в
)(ир
NULL
;

82 (*
_obsёСe_lock_дУ_в
)(*ир
NULL
;

85 
	$≠i_wђn
()

87 
wђ√d
 = 0;

88 iа(!
wђ√d
) {

89 
wђ√d
 = 1;

90 
	`evТt_wђnx
("evthread_set_locking_callbackЗnd "

94 
	}
}

97 
	$comЈt_lock_Ѓloc
(
lockty≥
)

99 iа(
_obsёСe_lock_Ѓloc_в
)

100  
	`_obsёСe_lock_Ѓloc_в
();

101  
NULL
;

102 
	}
}

105 
	$comЈt_lock_дУ
(*
lock
, 
lockty≥
)

107 iа(
_obsёСe_lock_дУ_в
)

108 
	`_obsёСe_lock_дУ_в
(
lock
);

109 
	}
}

112 
	$comЈt_lock_lock
(
mode
, *
lock
)

114 
	`_obsёСe_lockЪg_в
(
EVTHREAD_LOCK
|
EVTHREAD_WRITE
, 
lock
);

116 
	}
}

120 
	$comЈt_lock_u∆ock
(
mode
, *
lock
)

122 
	`_obsёСe_lockЪg_в
(
EVTHREAD_UNLOCK
|
EVTHREAD_WRITE
, 
lock
);

124 
	}
}

127 
evthїad_£t_lockЪg_€ќback
((*
lockЪg_в
)(
mode
, *
lock
))

129 
	`≠i_wђn
();

130 iа(
lockЪg_в
) {

131 
_evthїad_lock_вs
.
lock
 = 
comЈt_lock_lock
;

132 
_evthїad_lock_вs
.
u∆ock
 = 
comЈt_lock_u∆ock
;

134 
_evthїad_lock_вs
.
lock
 = 
NULL
;

135 
_evthїad_lock_вs
.
u∆ock
 = 
NULL
;

137 
_obsёСe_lockЪg_в
 = 
lockЪg_в
;

138 
	}
}

141 
evthїad_£t_lock_ьЧЛ_€ќbacks
(*(*
Ѓloc_в
)(),

142 (*
дУ_в
)(*))

144 
	`≠i_wђn
();

145 
_obsёСe_lock_Ѓloc_в
 = 
Ѓloc_в
;

146 
_obsёСe_lock_дУ_в
 = 
дУ_в
;

147 
_evthїad_lock_вs
.
Ѓloc
 = 
Ѓloc_в
 ? 
comЈt_lock_Ѓloc
 : 
NULL
;

148 
_evthїad_lock_вs
.
дУ
 = 
дУ_в
 ? 
comЈt_lock_дУ
 : 
NULL
;

149 
	}
}

152 
	sdebug_lock
 {

153 
	mlockty≥
;

154 
	mhЦd_by
;

157 
	mcouЅ
;

158 *
	mlock
;

162 
	$debug_lock_Ѓloc
(
lockty≥
)

164 
debug_lock
 *
їsu…
 = 
	`mm_mЃloc
((debug_lock));

165 iа(!
їsu…
)

166  
NULL
;

167 iа(
_№igЪЃ_lock_вs
.
Ѓloc
) {

168 iа(!(
їsu…
->
lock
 = 
_№igЪЃ_lock_вs
.
	`Ѓloc
(

169 
lockty≥
|
EVTHREAD_LOCKTYPE_RECURSIVE
))) {

170 
	`mm_дУ
(
їsu…
);

171  
NULL
;

174 
їsu…
->
lock
 = 
NULL
;

176 
їsu…
->
lockty≥
 =Жocktype;

177 
їsu…
->
couЅ
 = 0;

178 
їsu…
->
hЦd_by
 = 0;

179  
їsu…
;

180 
	}
}

183 
	$debug_lock_дУ
(*
lock_
, 
lockty≥
)

185 
debug_lock
 *
lock
 = 
lock_
;

186 
	`EVUTIL_ASSERT
(
lock
->
couЅ
 == 0);

187 
	`EVUTIL_ASSERT
(
lockty≥
 =р
lock
->locktype);

188 iа(
_№igЪЃ_lock_вs
.
дУ
) {

189 
_№igЪЃ_lock_вs
.
	`дУ
(
lock
->lock,

190 
lock
->
lockty≥
|
EVTHREAD_LOCKTYPE_RECURSIVE
);

192 
lock
->lock = 
NULL
;

193 
lock
->
couЅ
 = -100;

194 
	`mm_дУ
(
lock
);

195 
	}
}

198 
	$debug_lock_lock
(
mode
, *
lock_
)

200 
debug_lock
 *
lock
 = 
lock_
;

201 
їs
 = 0;

202 iа(
lock
->
lockty≥
 & 
EVTHREAD_LOCKTYPE_READWRITE
)

203 
	`EVUTIL_ASSERT
(
mode
 & (
EVTHREAD_READ
|
EVTHREAD_WRITE
));

205 
	`EVUTIL_ASSERT
((
mode
 & (
EVTHREAD_READ
|
EVTHREAD_WRITE
)) == 0);

206 iа(
_№igЪЃ_lock_вs
.
lock
)

207 
їs
 = 
_№igЪЃ_lock_вs
.
	`lock
(
mode
, 
lock
->lock);

208 iа(!
їs
) {

209 ++
lock
->
couЅ
;

210 iа(!(
lock
->
lockty≥
 & 
EVTHREAD_LOCKTYPE_RECURSIVE
))

211 
	`EVUTIL_ASSERT
(
lock
->
couЅ
 == 1);

212 iа(
_evthїad_id_в
) {

213 
me
;

214 
me
 = 
	`_evthїad_id_в
();

215 iа(
lock
->
couЅ
 > 1)

216 
	`EVUTIL_ASSERT
(
lock
->
hЦd_by
 =р
me
);

217 
lock
->
hЦd_by
 = 
me
;

220  
їs
;

221 
	}
}

224 
	$debug_lock_u∆ock
(
mode
, *
lock_
)

226 
debug_lock
 *
lock
 = 
lock_
;

227 
їs
 = 0;

228 iа(
lock
->
lockty≥
 & 
EVTHREAD_LOCKTYPE_READWRITE
)

229 
	`EVUTIL_ASSERT
(
mode
 & (
EVTHREAD_READ
|
EVTHREAD_WRITE
));

231 
	`EVUTIL_ASSERT
((
mode
 & (
EVTHREAD_READ
|
EVTHREAD_WRITE
)) == 0);

232 iа(
_evthїad_id_в
) {

233 
me
 = 
	`_evthїad_id_в
();

234 
	`EVUTIL_ASSERT
(
lock
->
hЦd_by
 =р
me
);

235 iа(
lock
->
couЅ
 == 1)

236 
lock
->
hЦd_by
 = 0;

238 --
lock
->
couЅ
;

239 
	`EVUTIL_ASSERT
(
lock
->
couЅ
 >= 0);

240 iа(
_№igЪЃ_lock_вs
.
u∆ock
)

241 
їs
 = 
_№igЪЃ_lock_вs
.
	`u∆ock
(
mode
, 
lock
->lock);

242  
їs
;

243 
	}
}

246 
	$evthїad_ТabЋ_lock_debugЪg
()

248 
evthїad_lock_€ќbacks
 
cbs
 = {

249 
EVTHREAD_LOCK_API_VERSION
,

250 
EVTHREAD_LOCKTYPE_RECURSIVE
,

251 
debug_lock_Ѓloc
,

252 
debug_lock_дУ
,

253 
debug_lock_lock
,

254 
debug_lock_u∆ock


256 iа(
_evthїad_lock_debuggЪg_ТabЋd
)

258 
	`memэy
(&
_№igЪЃ_lock_вs
, &
_evthїad_lock_вs
,

259 (
evthїad_lock_€ќbacks
));

260 
	`memэy
(&
_evthїad_lock_вs
, &
cbs
,

261 (
evthїad_lock_€ќbacks
));

262 
_evthїad_lock_debuggЪg_ТabЋd
 = 1;

263 
	}
}

266 
	$_evthїad_is_debug_lock_hЦd
(*
lock_
)

268 
debug_lock
 *
lock
 = 
lock_
;

269 iа(! 
lock
->
couЅ
)

271 iа(
_evthїad_id_в
) {

272 
me
 = 
	`_evthїad_id_в
();

273 iа(
lock
->
hЦd_by
 !р
me
)

277 
	}
}

	@evthread_pthread.c

26 
	~"evТt-cЏfig.h
"

29 
	#_GNU_SOURCE


	)

30 
	~<±hїad.h
>

32 
	gevТt_ba£
;

33 
	~<evТt2/thїad.h
>

35 
	~<°dlib.h
>

36 
	~"mm-ЪЛЇЃ.h
"

38 
±hїad_muЛx©М_t
 
	g©М_їcursive
;

41 
	$evthїad_posix_lock_Ѓloc
(
lockty≥
)

43 
±hїad_muЛx©М_t
 *
©М
 = 
NULL
;

44 
±hїad_muЛx_t
 *
lock
 = 
	`mm_mЃloc
((pthread_mutex_t));

45 iа(!
lock
)

46  
NULL
;

47 iа(
lockty≥
 & 
EVTHREAD_LOCKTYPE_RECURSIVE
)

48 
©М
 = &
©М_їcursive
;

49 iа(
	`±hїad_muЛx_ЪЩ
(
lock
, 
©М
)) {

50 
	`mm_дУ
(
lock
);

51  
NULL
;

53  
lock
;

54 
	}
}

57 
	$evthїad_posix_lock_дУ
(*
_lock
, 
lockty≥
)

59 
±hїad_muЛx_t
 *
lock
 = 
_lock
;

60 
	`±hїad_muЛx_de°roy
(
lock
);

61 
	`mm_дУ
(
lock
);

62 
	}
}

65 
	$evthїad_posix_lock
(
mode
, *
_lock
)

67 
±hїad_muЛx_t
 *
lock
 = 
_lock
;

68 iа(
mode
 & 
EVTHREAD_TRY
)

69  
	`±hїad_muЛx_Мylock
(
lock
);

71  
	`±hїad_muЛx_lock
(
lock
);

72 
	}
}

75 
	$evthїad_posix_u∆ock
(
mode
, *
_lock
)

77 
±hїad_muЛx_t
 *
lock
 = 
_lock
;

78  
	`±hїad_muЛx_u∆ock
(
lock
);

79 
	}
}

82 
	$evthїad_posix_gС_id
()

85 
±hїad_t
 
thr
;

86 
id
;

87 } 
r
;

88 
r
.
thr
 = 
	`±hїad_£lf
();

89  
r
.
id
;

90 
	}
}

93 
	$evthїad_u£_±hїads
()

95 
evthїad_lock_€ќbacks
 
cbs
 = {

96 
EVTHREAD_LOCK_API_VERSION
,

97 
EVTHREAD_LOCKTYPE_RECURSIVE
,

98 
evthїad_posix_lock_Ѓloc
,

99 
evthїad_posix_lock_дУ
,

100 
evthїad_posix_lock
,

101 
evthїad_posix_u∆ock


104 iа(
	`±hїad_muЛx©М_ЪЩ
(&
©М_їcursive
))

106 iа(
	`±hїad_muЛx©М_£Йy≥
(&
©М_їcursive
, 
PTHREAD_MUTEX_RECURSIVE
))

109 
	`evthїad_£t_lock_€ќbacks
(&
cbs
);

110 
	`evthїad_£t_id_€ќback
(
evthїad_posix_gС_id
);

112 
	}
}

	@evthread_win32.c

26 
	~"evТt-cЏfig.h
"

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	#WIN32_LEAN_AND_MEAN


	)

31 
	~<wЪdows.h
>

32 #undeа
WIN32_LEAN_AND_MEAN


33 
	~<sys/lockЪg.h
>

36 
	gevТt_ba£
;

37 
	~<evТt2/thїad.h
>

39 
	~"mm-ЪЛЇЃ.h
"

41 
	#SPIN_COUNT
 2000

	)

44 
	$evthїad_wЪ32_lock_ьЧЛ
(
lockty≥
)

46 
CRITICAL_SECTION
 *
lock
 = 
	`mm_mЃloc
((CRITICAL_SECTION));

47 iа(!
lock
)

48  
NULL
;

49 iа(
	`InЩЯlizeCrЩi€lSeщiЏAndSpЪCouЅ
(
lock
, 
SPIN_COUNT
) == 0) {

50 
	`mm_дУ
(
lock
);

51  
NULL
;

53  
lock
;

54 
	}
}

57 
	$evthїad_wЪ32_lock_дУ
(*
_lock
, 
lockty≥
)

59 
CRITICAL_SECTION
 *
lock
 = 
_lock
;

60 
	`DЦСeCrЩi€lSeщiЏ
(
lock
);

61 
	`mm_дУ
(
lock
);

62 
	}
}

65 
	$evthїad_wЪ32_lock
(
mode
, *
_lock
)

67 
CRITICAL_SECTION
 *
lock
 = 
_lock
;

68 iа((
mode
 & 
EVTHREAD_TRY
)) {

69  
	`TryEЅФCrЩi€lSeщiЏ
(
lock
) != 0;

71 
	`EЅФCrЩi€lSeщiЏ
(
lock
);

74 
	}
}

77 
	$evthїad_wЪ32_u∆ock
(
mode
, *
_lock
)

79 
CRITICAL_SECTION
 *
lock
 = 
_lock
;

80 
	`LЧveCrЩi€lSeщiЏ
(
lock
);

82 
	}
}

85 
	$evthїad_wЪ32_gС_id
()

87  (и
	`GСCuЉТtThїadId
();

88 
	}
}

91 
	$evthїad_u£_wЪdows_thїads
()

93 
evthїad_lock_€ќbacks
 
cbs
 = {

94 
EVTHREAD_LOCK_API_VERSION
,

95 
EVTHREAD_LOCKTYPE_RECURSIVE
,

96 
evthїad_wЪ32_lock_ьЧЛ
,

97 
evthїad_wЪ32_lock_дУ
,

98 
evthїad_wЪ32_lock
,

99 
evthїad_wЪ32_u∆ock


102 
	`evthїad_£t_lock_€ќbacks
(&
cbs
);

103 
	`evthїad_£t_id_€ќback
(
evthїad_wЪ32_gС_id
);

105 
	}
}

	@evutil.c

27 
	~"evТt-cЏfig.h
"

29 
	#_REENTRANT


	)

30 
	#_GNU_SOURCE


	)

32 #ifdeа
WIN32


33 
	~<wЪsock2.h
>

34 
	~<ws2tэЭ.h
>

35 
	#WIN32_LEAN_AND_MEAN


	)

36 
	~<wЪdows.h
>

37 #undeа
WIN32_LEAN_AND_MEAN


38 
	~<io.h
>

41 
	~<sys/ty≥s.h
>

42 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


43 
	~<sys/sockС.h
>

45 #ifdeа
_EVENT_HAVE_UNISTD_H


46 
	~<uni°d.h
>

48 #ifdeа
_EVENT_HAVE_FCNTL_H


49 
	~<fъО.h
>

51 #ifdeа
_EVENT_HAVE_STDLIB_H


52 
	~<°dlib.h
>

54 
	~<ФЇo.h
>

55 
	~<°dio.h
>

56 
	~<°rЪg.h
>

57 #ifdeа
_EVENT_HAVE_ARPA_INET_H


58 
	~<ђЈ/ЪС.h
>

60 #ifdeа
_EVENT_HAVE_NETINET_IN_H


61 
	~<√tЪС/Ъ.h
>

63 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


64 
	~<√tЪС/Ъ6.h
>

67 #iвdeа
_EVENT_HAVE_GETTIMEOFDAY


68 
	~<sys/timeb.h
>

69 
	~<time.h
>

71 
	~<sys/°©.h
>

73 
	~"evТt2/utЮ.h
"

74 
	~"utЮ-ЪЛЇЃ.h
"

75 
	~"log-ЪЛЇЃ.h
"

76 
	~"mm-ЪЛЇЃ.h
"

78 
	~"°Њэy-ЪЛЇЃ.h
"

79 
	~"Эv6-ЪЛЇЃ.h
"

92 
	$evutЮ_їad_fЮe
(cЏ° *
fЮТame
, **
cЏЛЅ_out
, 
size_t
 *
Ћn_out
,

93 
is_bЪђy
)

95 
fd
, 
r
;

96 
°©
 
°
;

97 *
mem
;

98 
size_t
 
їad_so_зr
=0;

99 
mode
 = 
O_RDONLY
;

101 
	`EVUTIL_ASSERT
(
cЏЛЅ_out
);

102 
	`EVUTIL_ASSERT
(
Ћn_out
);

103 *
cЏЛЅ_out
 = 
NULL
;

104 *
Ћn_out
 = 0;

106 #ifdeа
O_BINARY


107 iа(
is_bЪђy
)

108 
mode
 |р
O_BINARY
;

111 
fd
 = 
	`ЁТ
(
fЮТame
, 
mode
);

112 iа(
fd
 < 0)

114 iа(
	`f°©
(
fd
, &
°
)) {

115 
	`юo£
(
fd
);

118 
mem
 = 
	`mm_mЃloc
(
°
.
°_size
 + 1);

119 iа(!
mem
) {

120 
	`юo£
(
fd
);

123 
їad_so_зr
 = 0;

124 (
r
 = 
	`їad
(
fd
, 
mem
+
їad_so_зr
, 
°
.
°_size
 -Дead_so_far)) > 0) {

125 
їad_so_зr
 +р
r
;

126 iа(
їad_so_зr
 >р
°
.
°_size
)

128 
	`EVUTIL_ASSERT
(
їad_so_зr
 < 
°
.
°_size
);

130 iа(
r
 < 0) {

131 
	`юo£
(
fd
);

132 
	`mm_дУ
(
mem
);

135 
mem
[
їad_so_зr
] = 0;

137 *
Ћn_out
 = 
їad_so_зr
;

138 *
cЏЛЅ_out
 = 
mem
;

140 
	}
}

143 
	$evutЮ_sockСЈЬ
(
зmЮy
, 
ty≥
, 
іўocё
, 
evutЮ_sockС_t
 
fd
[2])

145 #iвdeа
WIN32


146  
	`sockСЈЬ
(
зmЮy
, 
ty≥
, 
іўocё
, 
fd
);

155 
evutЮ_sockС_t
 
li°ТФ
 = -1;

156 
evutЮ_sockС_t
 
cЏ√щ№
 = -1;

157 
evutЮ_sockС_t
 
acы±№
 = -1;

158 
sockaddr_Ъ
 
li°Т_addr
;

159 
sockaddr_Ъ
 
cЏ√щ_addr
;

160 
size
;

161 
Іved_ФЇo
 = -1;

163 iа(
іўocё


164 || (
зmЮy
 !р
AF_INET


165 #ifdeа
AF_UNIX


166 && 
зmЮy
 !р
AF_UNIX


169 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEAFNOSUPPORT
);

172 iа(!
fd
) {

173 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEINVAL
);

177 
li°ТФ
 = 
	`sockС
(
AF_INET
, 
ty≥
, 0);

178 iа(
li°ТФ
 < 0)

180 
	`mem£t
(&
li°Т_addr
, 0, (listen_addr));

181 
li°Т_addr
.
sЪ_зmЮy
 = 
AF_INET
;

182 
li°Т_addr
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(
INADDR_LOOPBACK
);

183 
li°Т_addr
.
sЪ_p№t
 = 0;

184 iа(
	`bЪd
(
li°ТФ
, (
sockaddr
 *и&
li°Т_addr
,  (listen_addr))

186 
tidy_up_™d_зЮ
;

187 iа(
	`li°Т
(
li°ТФ
, 1) == -1)

188 
tidy_up_™d_зЮ
;

190 
cЏ√щ№
 = 
	`sockС
(
AF_INET
, 
ty≥
, 0);

191 iа(
cЏ√щ№
 < 0)

192 
tidy_up_™d_зЮ
;

194 
size
 = (
cЏ√щ_addr
);

195 iа(
	`gСsock«me
(
li°ТФ
, (
sockaddr
 *и&
cЏ√щ_addr
, &
size
) == -1)

196 
tidy_up_™d_зЮ
;

197 iа(
size
 !р (
cЏ√щ_addr
))

198 
ab№t_tidy_up_™d_зЮ
;

199 iа(
	`cЏ√щ
(
cЏ√щ№
, (
sockaddr
 *и&
cЏ√щ_addr
,

200 (
cЏ√щ_addr
)) == -1)

201 
tidy_up_™d_зЮ
;

203 
size
 = (
li°Т_addr
);

204 
acы±№
 = 
	`acы±
(
li°ТФ
, (
sockaddr
 *и&
li°Т_addr
, &
size
);

205 iа(
acы±№
 < 0)

206 
tidy_up_™d_зЮ
;

207 iа(
size
 !р(
li°Т_addr
))

208 
ab№t_tidy_up_™d_зЮ
;

209 
	`EVUTIL_CLOSESOCKET
(
li°ТФ
);

212 iа(
	`gСsock«me
(
cЏ√щ№
, (
sockaddr
 *и&
cЏ√щ_addr
, &
size
) == -1)

213 
tidy_up_™d_зЮ
;

214 iа(
size
 !р (
cЏ√щ_addr
)

215 || 
li°Т_addr
.
sЪ_зmЮy
 !р
cЏ√щ_addr
.sin_family

216 || 
li°Т_addr
.
sЪ_addr
.
s_addr
 !р
cЏ√щ_addr
.sin_addr.s_addr

217 || 
li°Т_addr
.
sЪ_p№t
 !р
cЏ√щ_addr
.sin_port)

218 
ab№t_tidy_up_™d_зЮ
;

219 
fd
[0] = 
cЏ√щ№
;

220 
fd
[1] = 
acы±№
;

224 
ab№t_tidy_up_™d_зЮ
:

225 
Іved_ФЇo
 = 
WSAECONNABORTED
;

226 
tidy_up_™d_зЮ
:

227 iа(
Іved_ФЇo
 < 0)

228 
Іved_ФЇo
 = 
	`WSAGСLa°EЉ№
();

229 iа(
li°ТФ
 != -1)

230 
	`EVUTIL_CLOSESOCKET
(
li°ТФ
);

231 iа(
cЏ√щ№
 != -1)

232 
	`EVUTIL_CLOSESOCKET
(
cЏ√щ№
);

233 iа(
acы±№
 != -1)

234 
	`EVUTIL_CLOSESOCKET
(
acы±№
);

236 
	`EVUTIL_SET_SOCKET_ERROR
(
Іved_ФЇo
);

239 
	}
}

242 
	$evutЮ_make_sockС_nЏblockЪg
(
evutЮ_sockС_t
 
fd
)

244 #ifdeа
WIN32


246 
nЏblockЪg
 = 1;

247 
	`ioщlsockС
(
fd
, 
FIONBIO
, (*и&
nЏblockЪg
);

251 
жags
;

252 iа((
жags
 = 
	`fъО
(
fd
, 
F_GETFL
, 
NULL
)) < 0) {

253 
	`evТt_wђn
("fъО(%d, F_GETFL)", 
fd
);

256 iа(
	`fъО
(
fd
, 
F_SETFL
, 
жags
 | 
O_NONBLOCK
) == -1) {

257 
	`evТt_wђn
("fъО(%d, F_SETFL)", 
fd
);

263 
	}
}

266 
	$evutЮ_make_li°Т_sockС_їu£abЋ
(
evutЮ_sockС_t
 
sock
)

268 #iвdeа
WIN32


269 
Џe
 = 1;

273  
	`£tsockЁt
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*и&
Џe
,

274 (
ev_sockЋn_t
)(
Џe
));

278 
	}
}

281 
	$evutЮ_make_sockС_юo£Џexec
(
evutЮ_sockС_t
 
fd
)

283 #iа!
	`defЪed
(
WIN32
и&& defЪed(
_EVENT_HAVE_SETFD
)

284 
жags
;

285 iа((
жags
 = 
	`fъО
(
fd
, 
F_GETFD
, 
NULL
)) < 0) {

286 
	`evТt_wђn
("fъО(%d, F_GETFD)", 
fd
);

289 iа(
	`fъО
(
fd
, 
F_SETFD
, 
жags
 | 
FD_CLOEXEC
) == -1) {

290 
	`evТt_wђn
("fъО(%d, F_SETFD)", 
fd
);

295 
	}
}

297 
ev_Ъt64_t


298 
	$evutЮ_°єёl
(cЏ° *
s
, **
Тd±r
, 
ba£
)

300 #ifdeа
_EVENT_HAVE_STRTOLL


301  (
ev_Ъt64_t
)
	`°єёl
(
s
, 
Тd±r
, 
ba£
);

302 #Цiа
_EVENT_SIZEOF_LONG
 == 8

303  (
ev_Ъt64_t
)
	`°єё
(
s
, 
Тd±r
, 
ba£
);

304 #Цiа
	`defЪed
(
WIN32
и&& defЪed(
_MSC_VER
) && _MSC_VER < 1300

307 
ev_Ъt64_t
 
r
;

308 iа(
ba£
 != 10)

310 
r
 = (
ev_Ъt64_t
и
	`_©oi64
(
s
);

311 
	`is•aы
(*
s
))

312 ++
s
;

313 
	`isdigЩ
(*
s
))

314 ++
s
;

315 iа(
Тd±r
)

316 *
Тd±r
 = (*и
s
;

317  
r
;

318 #Цiа
	`defЪed
(
WIN32
)

319  (
ev_Ъt64_t
и
	`_°єoi64
(
s
, 
Тd±r
, 
ba£
);

323 
	}
}

325 #iвdeа
_EVENT_HAVE_GETTIMEOFDAY


327 
	$evutЮ_gСtimeofday
(
timevЃ
 *
tv
, 
timezЏe
 *
tz
)

329 
_timeb
 
tb
;

331 iа(
tv
 =р
NULL
)

334 
	`_бime
(&
tb
);

335 
tv
->
tv_£c
 = (и
tb
.
time
;

336 
tv
->
tv_u£c
 = ((и
tb
.
mЮlЩm
) * 1000;

338 
	}
}

341 #ifdeа
WIN32


343 
	$evutЮ_sockС_gСФr№
(
evutЮ_sockС_t
 
sock
)

345 
ЁtvЃ
, 
ЁtvЃЋn
=(optval);

346 
Фr
 = 
	`WSAGСLa°EЉ№
();

347 iа(
Фr
 =р
WSAEWOULDBLOCK
 && 
sock
 >= 0) {

348 iа(
	`gСsockЁt
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
ЁtvЃ
,

349 &
ЁtvЃЋn
))

350  
Фr
;

351 iа(
ЁtvЃ
)

352  
ЁtvЃ
;

354  
Фr
;

355 
	}
}

361 
	$evutЮ_sockС_cЏ√щ
(
evutЮ_sockС_t
 *
fd_±r
, 
sockaddr
 *
І
, 
sockЋn
)

363 
made_fd
 = 0;

365 iа(*
fd_±r
 < 0) {

366 
made_fd
 = 1;

367 iа((*
fd_±r
 = 
	`sockС
(
І
->
І_зmЮy
, 
SOCK_STREAM
, 0)) < 0)

368 
Фr
;

369 iа(
	`evutЮ_make_sockС_nЏblockЪg
(*
fd_±r
) < 0) {

370 
Фr
;

374 iа(
	`cЏ√щ
(*
fd_±r
, 
І
, 
sockЋn
) < 0) {

375 
e
 = 
	`evutЮ_sockС_gСФr№
(*
fd_±r
);

376 iа(
	`EVUTIL_ERR_CONNECT_RETRIABLE
(
e
))

378 iа(
	`EVUTIL_ERR_CONNECT_REFUSED
(
e
))

380 
Фr
;

385 
Фr
:

386 iа(
made_fd
) {

387 
	`EVUTIL_CLOSESOCKET
(*
fd_±r
);

388 *
fd_±r
 = -1;

391 
	}
}

398 
	$evutЮ_sockС_fЪished_cЏ√щЪg
(
evutЮ_sockС_t
 
fd
)

400 
e
;

401 
ev_sockЋn_t
 
ЦТ
 = (
e
);

403 iа(
	`gСsockЁt
(
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
e
, &
ЦТ
) < 0)

406 iа(
e
) {

407 iа(
	`EVUTIL_ERR_CONNECT_RETRIABLE
(
e
))

409 
	`EVUTIL_SET_SOCKET_ERROR
(
e
);

414 
	}
}

416 #iа(
EVUTIL_AI_PASSIVE
|
EVUTIL_AI_CANONNAME
|
EVUTIL_AI_NUMERICHOST
| \

417 
	gEVUTIL_AI_NUMERICSERV
|
	gEVUTIL_AI_V4MAPPED
|
	gEVUTIL_AI_ALL
| \

418 
	gEVUTIL_AI_ADDRCONFIG
) != \

419 (
EVUTIL_AI_PASSIVE
^
EVUTIL_AI_CANONNAME
^
EVUTIL_AI_NUMERICHOST
^ \

420 
EVUTIL_AI_NUMERICSERV
^
EVUTIL_AI_V4MAPPED
^
EVUTIL_AI_ALL
^ \

421 
EVUTIL_AI_ADDRCONFIG
)

430 
have_checked_ЪЛrзыs
, 
	ghad_Эv4_addїss
, 
	ghad_Эv6_addїss
;

435 
	$evutЮ_check_ЪЛrзыs
(
f№ы_їcheck
)

437 cЏ° 
ZEROES
[] = "\x00\x00\x00\x00\x00\x00\x00\x00"

439 
evutЮ_sockС_t
 
fd
 = -1;

440 
sockaddr_Ъ
 
sЪ
, 
sЪ_out
;

441 
sockaddr_Ъ6
 
sЪ6
, 
sЪ6_out
;

442 
ev_sockЋn_t
 
sЪ_out_Ћn
 = (
sЪ_out
);

443 
ev_sockЋn_t
 
sЪ6_out_Ћn
 = (
sЪ6_out
);

444 
r
;

445 
buf
[128];

446 iа(
have_checked_ЪЛrзыs
 && !
f№ы_їcheck
)

454 
	`mem£t
(&
sЪ
, 0, (sin));

455 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

456 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(53);

457 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET
, "18.244.0.188", &
sЪ
.
sЪ_addr
);

458 
	`EVUTIL_ASSERT
(
r
);

460 
	`mem£t
(&
sЪ6
, 0, (sin6));

461 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

462 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(53);

463 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET6
, "2001:4860:b002::68", &
sЪ6
.
sЪ6_addr
);

464 
	`EVUTIL_ASSERT
(
r
);

466 
	`mem£t
(&
sЪ_out
, 0, (sin_out));

467 
	`mem£t
(&
sЪ6_out
, 0, (sin6_out));

470 iа((
fd
 = 
	`sockС
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
)) >= 0 &&

471 
	`cЏ√щ
(
fd
, (
sockaddr
*)&
sЪ
, (sin)) == 0 &&

472 
	`gСsock«me
(
fd
, (
sockaddr
*)&
sЪ_out
, &
sЪ_out_Ћn
) == 0) {

474 
ev_uЪt32_t
 
addr
 = 
	`Ѕohl
(
sЪ_out
.
sЪ_addr
.
s_addr
);

475 iа(
addr
 == 0 || (addr&0xff000000) == 127 ||

476 (
addr
 && 0xff) == 255 || (addr & 0xf0) == 14) {

477 
	`evutЮ_ЪС_ЅЁ
(
AF_INET
, &
sЪ_out
.
sЪ_addr
,

478 
buf
, (buf));

483 
	`evТt_wђnx
("GўЗ sМ™gРlo€»Эv4Зddїs†%s",
buf
);

485 
	`evТt_debug
(("DetectedЗn IPv4 interface"));

486 
had_Эv4_addїss
 = 1;

489 iа(
fd
 >= 0)

490 
	`EVUTIL_CLOSESOCKET
(
fd
);

492 iа((
fd
 = 
	`sockС
(
AF_INET6
, 
SOCK_DGRAM
, 
IPPROTO_UDP
)) >= 0 &&

493 
	`cЏ√щ
(
fd
, (
sockaddr
*)&
sЪ6
, (sin6)) == 0 &&

494 
	`gСsock«me
(
fd
, (
sockaddr
*)&
sЪ6_out
, &
sЪ6_out_Ћn
) == 0) {

496 cЏ° *
addr
 =

497 (*)
sЪ6_out
.
sЪ6_addr
.
s6_addr
;

498 iа(!
	`memcmp
(
addr
, 
ZEROES
, 8) ||

499 (
addr
[0] == 0xfe && (addr[1] & 0xc0) == 0x80)) {

504 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
sЪ6_out
.
sЪ6_addr
,

505 
buf
, (buf));

506 
	`evТt_wђnx
("GўЗ sМ™gРlo€»Эv6Зddїs†%s",
buf
);

508 
	`evТt_debug
(("DetectedЗn IPv4 interface"));

509 
had_Эv6_addїss
 = 1;

513 iа(
fd
 >= 0)

514 
	`EVUTIL_CLOSESOCKET
(
fd
);

517 
	}
}

523 
	#EVUTIL_AI_LIBEVENT_ALLOCATED
 0x80000000

	)

530 
evutЮ_addrЪfo
 *

531 
	$evutЮ_√w_addrЪfo
(
sockaddr
 *
І
, 
ev_sockЋn_t
 
sockЋn
,

532 cЏ° 
evutЮ_addrЪfo
 *
hЪts
)

534 
size_t
 
exМa
;

535 
evutЮ_addrЪfo
 *
їs
;

536 
	`EVUTIL_ASSERT
(
hЪts
);

538 iа(
hЪts
->
ai_sockty≥
 =р0 && hЪts->
ai_іўocё
 == 0) {

540 
evutЮ_addrЪfo
 *
r1
, *
r2
;

541 
evutЮ_addrЪfo
 
tmp
;

542 
	`memэy
(&
tmp
, 
hЪts
, (tmp));

543 
tmp
.
ai_sockty≥
 = 
SOCK_STREAM
;Бmp.
ai_іўocё
 = 
IPPROTO_TCP
;

544 
r1
 = 
	`evutЮ_√w_addrЪfo
(
І
, 
sockЋn
, &
tmp
);

545 iа(!
r1
)

546  
NULL
;

547 
tmp
.
ai_sockty≥
 = 
SOCK_DGRAM
;Бmp.
ai_іўocё
 = 
IPPROTO_UDP
;

548 
r2
 = 
	`evutЮ_√w_addrЪfo
(
І
, 
sockЋn
, &
tmp
);

549 iа(!
r2
) {

550 
	`evutЮ_дУaddrЪfo
(
r1
);

551  
NULL
;

553 
r1
->
ai_√xt
 = 
r2
;

554  
r1
;

558 
exМa
 = (
hЪts
->
ai_зmЮy
 =р
PF_INET
и? (
sockaddr_Ъ
) :

559 (
sockaddr_Ъ6
);

560 
їs
 = 
	`mm_€ќoc
(1,(
evutЮ_addrЪfo
)+
sockЋn
);

561 iа(!
їs
)

562  
NULL
;

563 
їs
->
ai_addr
 = (
sockaddr
*)

564 (((*)
їs
и+ (
evutЮ_addrЪfo
));

565 
	`memэy
(
їs
->
ai_addr
, 
І
, 
sockЋn
);

566 
їs
->
ai_addЊТ
 = 
sockЋn
;

567 
їs
->
ai_зmЮy
 = 
І
->
І_зmЮy
;

568 
їs
->
ai_жags
 = 
EVUTIL_AI_LIBEVENT_ALLOCATED
;

569 
їs
->
ai_sockty≥
 = 
hЪts
->ai_socktype;

570 
їs
->
ai_іўocё
 = 
hЪts
->ai_protocol;

572  
їs
;

573 
	}
}

578 
evutЮ_addrЪfo
 *

579 
	$evutЮ_addrЪfo_≠≥nd
(
evutЮ_addrЪfo
 *
fЬ°
,

580 
evutЮ_addrЪfo
 *
≠≥nd
)

582 
evutЮ_addrЪfo
 *
ai
 = 
fЬ°
;

583 iа(!
ai
)

584  
≠≥nd
;

585 
ai
->
ai_√xt
)

586 
ai
 =Зi->
ai_√xt
;

587 
ai
->
ai_√xt
 = 
≠≥nd
;

589  
fЬ°
;

590 
	}
}

593 
	$Јr£_numФic_£rv«me
(cЏ° *
£rv«me
)

595 
n
;

596 *
Тd±r
=
NULL
;

597 
n
 = (и
	`°єё
(
£rv«me
, &
Тd±r
, 10);

598 iа(
n
>=0 &&В <р65535 && 
£rv«me
[0] && 
Тd±r
 && !endptr[0])

599  
n
;

602 
	}
}

608 
	$evutЮ_Јr£_£rv«me
(cЏ° *
£rv«me
, cЏ° *
іўocё
,

609 cЏ° 
evutЮ_addrЪfo
 *
hЪts
)

611 
n
 = 
	`Јr£_numФic_£rv«me
(
£rv«me
);

612 iа(
n
>=0)

613  
n
;

614 #iа
	`defЪed
(
_EVENT_HAVE_GETSERVBYNAME
и|| defЪed(
WIN32
)

615 iа(!(
hЪts
->
ai_жags
 & 
EVUTIL_AI_NUMERICSERV
)) {

616 
£rvТt
 *
Тt
 = 
	`gС£rvby«me
(
£rv«me
, 
іўocё
);

617 iа(
Тt
) {

618  
	`Ѕohs
(
Тt
->
s_p№t
);

623 
	}
}

628 
	$evutЮ_u≈ђ£_іўЏame
(
іўo
)

630 
іўo
) {

632  
NULL
;

633 
IPPROTO_TCP
:

635 
IPPROTO_UDP
:

637 #ifdeа
IPPROTO_SCTP


638 
IPPROTO_SCTP
:

642 #ifdeа
_EVENT_HAVE_GETPROTOBYNUMBER


644 
іўџЅ
 *
Тt
 = 
	`gСіўobynumbФ
(
іўo
);

645 iа(
Тt
)

646  
Тt
->
p_«me
;

649  
NULL
;

651 
	}
}

654 
	$evutЮ_gСaddrЪfo_Ъгr_іўocёs
(
evutЮ_addrЪfo
 *
hЪts
)

657 iа(!
hЪts
->
ai_іўocё
 && hЪts->
ai_sockty≥
) {

658 iа(
hЪts
->
ai_sockty≥
 =р
SOCK_DGRAM
)

659 
hЪts
->
ai_іўocё
 = 
IPPROTO_UDP
;

660 iа(
hЪts
->
ai_sockty≥
 =р
SOCK_STREAM
)

661 
hЪts
->
ai_іўocё
 = 
IPPROTO_TCP
;

665 iа(!
hЪts
->
ai_sockty≥
 && hЪts->
ai_іўocё
) {

666 iа(
hЪts
->
ai_іўocё
 =р
IPPROTO_UDP
)

667 
hЪts
->
ai_sockty≥
 = 
SOCK_DGRAM
;

668 iа(
hЪts
->
ai_іўocё
 =р
IPPROTO_TCP
)

669 
hЪts
->
ai_sockty≥
 = 
SOCK_STREAM
;

670 #ifdeа
IPPROTO_SCTP


671 iа(
hЪts
->
ai_іўocё
 =р
IPPROTO_SCTP
)

672 
hЪts
->
ai_sockty≥
 = 
SOCK_STREAM
;

675 
	}
}

691 
	$evutЮ_gСaddrЪfo_commЏ
(cЏ° *
nodТame
, cЏ° *
£rv«me
,

692 
evutЮ_addrЪfo
 *
hЪts
, evutЮ_addrЪfЎ**
їs
, *
p№Кum
)

694 
p№t
 = 0;

695 cЏ° *
≤ame
;

697 iа(
nodТame
 =р
NULL
 && 
£rv«me
 == NULL)

698  
EVUTIL_EAI_NONAME
;

701 iа(
hЪts
->
ai_зmЮy
 !р
PF_UNSPEC
 && hЪts->ai_зmЮy !р
PF_INET
 &&

702 
hЪts
->
ai_зmЮy
 !р
PF_INET6
)

703  
EVUTIL_EAI_FAMILY
;

705 
	`evutЮ_gСaddrЪfo_Ъгr_іўocёs
(
hЪts
);

708 
≤ame
 = 
	`evutЮ_u≈ђ£_іўЏame
(
hЪts
->
ai_іўocё
);

709 iа(
£rv«me
) {

712 
p№t
 = 
	`evutЮ_Јr£_£rv«me
(
£rv«me
, 
≤ame
, 
hЪts
);

713 iа(
p№t
 < 0) {

714  
EVUTIL_EAI_NONAME
;

720 iа(
nodТame
 =р
NULL
) {

721 
evutЮ_addrЪfo
 *
їs4
=
NULL
, *
їs6
=NULL;

722 iа(
hЪts
->
ai_зmЮy
 !р
PF_INET
) {

723 
sockaddr_Ъ6
 
sЪ6
;

724 
	`mem£t
(&
sЪ6
, 0, (sin6));

725 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

726 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

727 iа(
hЪts
->
ai_жags
 & 
AI_PASSIVE
) {

731 
sЪ6
.
sЪ6_addr
.
s6_addr
[15] = 1;

733 
їs6
 = 
	`evutЮ_√w_addrЪfo
((
sockaddr
*)&
sЪ6
,

734 (
sЪ6
), 
hЪts
);

735 iа(!
їs6
)

736  
EVUTIL_EAI_MEMORY
;

739 iа(
hЪts
->
ai_зmЮy
 !р
PF_INET6
) {

740 
sockaddr_Ъ
 
sЪ
;

741 
	`mem£t
(&
sЪ
, 0, (sin));

742 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

743 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
p№t
);

744 iа(
hЪts
->
ai_жags
 & 
AI_PASSIVE
) {

748 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

750 
їs4
 = 
	`evutЮ_√w_addrЪfo
((
sockaddr
*)&
sЪ
,

751 (
sЪ
), 
hЪts
);

752 iа(!
їs4
) {

753 iа(
їs6
)

754 
	`evutЮ_дУaddrЪfo
(
їs6
);

755  
EVUTIL_EAI_MEMORY
;

758 *
їs
 = 
	`evutЮ_addrЪfo_≠≥nd
(
їs4
, 
їs6
);

765 iа(
hЪts
->
ai_зmЮy
 =р
PF_INET6
 || hЪts->ai_зmЮy =р
PF_UNSPEC
) {

766 
sockaddr_Ъ6
 
sЪ6
;

767 
	`mem£t
(&
sЪ6
, 0, (sin6));

768 iа(1==
	`evutЮ_ЪС_±Џ
(
AF_INET6
, 
nodТame
, &
sЪ6
.
sЪ6_addr
)) {

770 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

771 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

772 *
їs
 = 
	`evutЮ_√w_addrЪfo
((
sockaddr
*)&
sЪ6
,

773 (
sЪ6
), 
hЪts
);

774 iа(!*
їs
)

775  
EVUTIL_EAI_MEMORY
;

781 iа(
hЪts
->
ai_зmЮy
 =р
PF_INET
 || hЪts->ai_зmЮy =р
PF_UNSPEC
) {

782 
sockaddr_Ъ
 
sЪ
;

783 
	`mem£t
(&
sЪ
, 0, (sin));

784 iа(1==
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
nodТame
, &
sЪ
.
sЪ_addr
)) {

786 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

787 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
p№t
);

788 *
їs
 = 
	`evutЮ_√w_addrЪfo
((
sockaddr
*)&
sЪ
,

789 (
sЪ
), 
hЪts
);

790 iа(!*
їs
)

791  
EVUTIL_EAI_MEMORY
;

799 iа((
hЪts
->
ai_жags
 & 
EVUTIL_AI_NUMERICHOST
)) {

801  
EVUTIL_EAI_NONAME
;

803 *
p№Кum
 = 
p№t
;

804  
EVUTIL_EAI_NEED_RESOLVE
;

805 
	}
}

807 #ifdeа
_EVENT_HAVE_GETADDRINFO


808 
	#USE_NATIVE_GETADDRINFO


	)

811 #ifdeа
USE_NATIVE_GETADDRINFO


814 cЏ° 
	gALL_NONNATIVE_AI_FLAGS
 =

815 #iвdeа
AI_PASSIVE


816 
EVUTIL_AI_PASSIVE
 |

818 #iвdeа
AI_CANONNAME


819 
EVUTIL_AI_CANONNAME
 |

821 #iвdeа
AI_NUMERICHOST


822 
EVUTIL_AI_NUMERICHOST
 |

824 #iвdeа
AI_NUMERICSERV


825 
EVUTIL_AI_NUMERICSERV
 |

827 #iвdeа
AI_ADDRCONFIG


828 
EVUTIL_AI_ADDRCONFIG
 |

830 #iвdeа
AI_ALL


831 
EVUTIL_AI_ALL
 |

833 #iвdeа
AI_V4MAPPED


834 
EVUTIL_AI_V4MAPPED
 |

836 
EVUTIL_AI_LIBEVENT_ALLOCATED
;

838 cЏ° 
	gALL_NATIVE_AI_FLAGS
 =

839 #ifdeа
AI_PASSIVE


840 
AI_PASSIVE
 |

842 #ifdeа
AI_CANONNAME


843 
AI_CANONNAME
 |

845 #ifdeа
AI_NUMERICHOST


846 
AI_NUMERICHOST
 |

848 #ifdeа
AI_NUMERICSERV


849 
AI_NUMERICSERV
 |

851 #ifdeа
AI_ADDRCONFIG


852 
AI_ADDRCONFIG
 |

854 #ifdeа
AI_ALL


855 
AI_ALL
 |

857 #ifdeа
AI_V4MAPPED


858 
AI_V4MAPPED
 |

863 #iвdeа
USE_NATIVE_GETADDRINFO


867 
evutЮ_addrЪfo
 *

868 
	$addrЪfo_дom_ho°Тt
(cЏ° 
ho°Тt
 *
Тt
,

869 
p№t
, cЏ° 
evutЮ_addrЪfo
 *
hЪts
)

871 
i
;

872 
sockaddr_Ъ
 
sЪ
;

873 
sockaddr_Ъ6
 
sЪ6
;

874 
sockaddr
 *
І
;

875 
sockЋn
;

876 
evutЮ_addrЪfo
 *
їs
=
NULL
, *
ai
;

877 *
addљ
;

879 iа(
Тt
->
h_addєy≥
 =р
PF_INET
) {

880 
	`mem£t
(&
sЪ
, 0, (sin));

881 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

882 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
p№t
);

883 
І
 = (
sockaddr
 *)&
sЪ
;

884 
sockЋn
 = (
sockaddr_Ъ
);

885 
addљ
 = &
sЪ
.
sЪ_addr
;

886 iа(
Тt
->
h_Ћngth
 !р(
sЪ
.
sЪ_addr
)) {

887 
	`evТt_wђnx
("Weird h_length from gethostbyname");

888  
NULL
;

890 } iа(
Тt
->
h_addєy≥
 =р
PF_INET6
) {

891 
	`mem£t
(&
sЪ6
, 0, (sin6));

892 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

893 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

894 
І
 = (
sockaddr
 *)&
sЪ6
;

895 
sockЋn
 = (
sockaddr_Ъ
);

896 
addљ
 = &
sЪ6
.
sЪ6_addr
;

897 iа(
Тt
->
h_Ћngth
 !р(
sЪ6
.
sЪ6_addr
)) {

898 
	`evТt_wђnx
("Weird h_length from gethostbyname");

899  
NULL
;

902  
NULL
;

904 
i
 = 0; 
Тt
->
h_addr_li°
[i]; ++i) {

905 
	`memэy
(
addљ
, 
Тt
->
h_addr_li°
[
i
],ГЅ->
h_Ћngth
);

906 
ai
 = 
	`evutЮ_√w_addrЪfo
(
І
, 
sockЋn
, 
hЪts
);

907 iа(!
ai
) {

908 
	`evutЮ_дУaddrЪfo
(
їs
);

909  
NULL
;

911 
їs
 = 
	`evutЮ_addrЪfo_≠≥nd
‘es, 
ai
);

914 iа(
їs
 && ((
hЪts
->
ai_жags
 & 
EVUTIL_AI_CANONNAME
и&& 
Тt
->
h_«me
))

915 
їs
->
ai_€nЏ«me
 = 
	`mm_°rdup
(
Тt
->
h_«me
);

917  
їs
;

918 
	}
}

926 
	$evutЮ_adju°_hЪts_f№_addrcЏfig
(
evutЮ_addrЪfo
 *
hЪts
)

928 iа(!(
hЪts
->
ai_жags
 & 
EVUTIL_AI_ADDRCONFIG
))

930 iа(
hЪts
->
ai_зmЮy
 !р
PF_UNSPEC
)

932 iа(!
have_checked_ЪЛrзыs
)

933 
	`evutЮ_check_ЪЛrзыs
(0);

934 iа(
had_Эv4_addїss
 && !
had_Эv6_addїss
) {

935 
hЪts
->
ai_зmЮy
 = 
PF_INET
;

936 } iа(!
had_Эv4_addїss
 && 
had_Эv6_addїss
) {

937 
hЪts
->
ai_зmЮy
 = 
PF_INET6
;

939 
	}
}

941 #ifdeа
USE_NATIVE_GETADDRINFO


958 
	$√ed_numФic_p№t_hack
()

960 
Л°ed
=0;

961 
√ed_hack
=0;

962 
r
, 
r2
;

963 
evutЮ_addrЪfo
 *
ai
=
NULL
, *
ai2
=NULL;

964 
evutЮ_addrЪfo
 
hЪts
;

965 iа(
Л°ed
)

966  
√ed_hack
;

968 
	`mem£t
(&
hЪts
,0,(hints));

969 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

970 
hЪts
.
ai_жags
 =

971 #ifdeа
AI_NUMERICHOST


972 
AI_NUMERICHOST
 |

974 #ifdeа
AI_NUMERICSERV


975 
AI_NUMERICSERV
 |

978 
r
 = 
	`gСaddrЪfo
("1.2.3.4", "80", &
hЪts
, &
ai
);

979 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

980 
r2
 = 
	`gСaddrЪfo
("1.2.3.4", "80", &
hЪts
, &
ai2
);

981 iа(
r2
 =р0 && 
r
 != 0) {

982 
√ed_hack
=1;

984 iа(
ai
)

985 
	`дУaddrЪfo
(
ai
);

986 iа(
ai2
)

987 
	`дУaddrЪfo
(
ai2
);

988 
Л°ed
 = 1;

989  
√ed_hack
;

990 
	}
}

993 
	$≠ґy_numФic_p№t_hack
(
p№t
, 
evutЮ_addrЪfo
 **
ai
)

997  ; *
ai
;ЗШр&(*ai)->
ai_√xt
) {

998 
sockaddr
 *
І
 = (*
ai
)->
ai_addr
;

999 iа(
І
 && sa->
І_зmЮy
 =р
AF_INET
) {

1000 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ*)
І
;

1001 
sЪ
->
sЪ_p№t
 = 
	`htЏs
(
p№t
);

1002 } iа(
І
 && sa->
І_зmЮy
 =р
AF_INET6
) {

1003 
sockaddr_Ъ6
 *
sЪ6
 = (sockaddr_Ъ6*)
І
;

1004 
sЪ6
->
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

1008 
evutЮ_addrЪfo
 *
viщim
 = *
ai
;

1009 *
ai
 = 
viщim
->
ai_√xt
;

1010 
viщim
->
ai_√xt
 = 
NULL
;

1011 
	`дУaddrЪfo
(
viщim
);

1014 
	}
}

1018 
	$evutЮ_gСaddrЪfo
(cЏ° *
nodТame
, cЏ° *
£rv«me
,

1019 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
, evutЮ_addrЪfЎ**
їs
)

1021 #ifdeа
USE_NATIVE_GETADDRINFO


1022 
evutЮ_addrЪfo
 
hЪts
;

1023 
p№Кum
=-1, 
√ed_≈_hack
, 
Фr
;

1025 iа(
hЪts_Ъ
) {

1026 
	`memэy
(&
hЪts
, 
hЪts_Ъ
, (hints));

1028 
	`mem£t
(&
hЪts
, 0, (hints));

1029 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1032 #iвdeа
AI_ADDRCONFIG


1034 iа(
hЪts
.
ai_зmЮy
 =р
PF_UNSPEC
 &&

1035 (
hЪts
.
ai_жags
 & 
EVUTIL_AI_ADDRCONFIG
)) {

1036 
	`evutЮ_adju°_hЪts_f№_addrcЏfig
(&
hЪts
);

1040 #iвdeа
AI_NUMERICSERV


1042 iа(
hЪts
.
ai_жags
 & 
EVUTIL_AI_NUMERICSERV
) {

1043 iа(
£rv«me
 && 
	`Јr£_numФic_£rv«me
(servname)<0)

1044  
EVUTIL_EAI_NONAME
;

1059 #ifdeа
WIN32


1061 
tmp_p№t
;

1062 
Фr
 = 
	`evutЮ_gСaddrЪfo_commЏ
(
nodТame
,
£rv«me
,&
hЪts
,

1063 
їs
, &
tmp_p№t
);

1064 iа(
Фr
 == 0 ||

1065 
Фr
 =р
EVUTIL_EAI_MEMORY
 ||

1066 
Фr
 =р
EVUTIL_EAI_NONAME
)

1067  
Фr
;

1074 
√ed_≈_hack
 = 
	`√ed_numФic_p№t_hack
(и&& 
£rv«me
 && !
hЪts
.
ai_sockty≥


1075 && ((
p№Кum
=
	`Јr£_numФic_£rv«me
(
£rv«me
)) >= 0);

1076 iа(
√ed_≈_hack
) {

1077 iа(!
nodТame
)

1078  
	`evutЮ_gСaddrЪfo_commЏ
(

1079 
NULL
,
£rv«me
,&
hЪts
, 
їs
, &
p№Кum
);

1080 
£rv«me
 = 
NULL
;

1090 
	`EVUTIL_ASSERT
((
ALL_NONNATIVE_AI_FLAGS
 & 
ALL_NATIVE_AI_FLAGS
) == 0);

1093 
hЪts
.
ai_жags
 &р~
ALL_NONNATIVE_AI_FLAGS
;

1095 
Фr
 = 
	`gСaddrЪfo
(
nodТame
, 
£rv«me
, &
hЪts
, 
їs
);

1096 iа(
√ed_≈_hack
)

1097 
	`≠ґy_numФic_p№t_hack
(
p№Кum
, 
їs
);

1098  
Фr
;

1100 
p№t
=0, 
Фr
;

1101 
ho°Тt
 *
Тt
 = 
NULL
;

1102 
evutЮ_addrЪfo
 
hЪts
;

1104 iа(
hЪts_Ъ
) {

1105 
	`memэy
(&
hЪts
, 
hЪts_Ъ
, (hints));

1107 
	`mem£t
(&
hЪts
, 0, (hints));

1108 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1111 
	`evutЮ_adju°_hЪts_f№_addrcЏfig
(&
hЪts
);

1113 
Фr
 = 
	`evutЮ_gСaddrЪfo_commЏ
(
nodТame
, 
£rv«me
, &
hЪts
, 
їs
, &
p№t
);

1114 iа(
Фr
 !р
EVUTIL_EAI_NEED_RESOLVE
) {

1116  
Фr
;

1119 
Фr
 = 0;

1122 #ifdeа
_EVENT_HAVE_GETHOSTBYNAME_R_6_ARG


1124 
buf
[2048];

1125 
ho°Тt
 hostent;

1126 
r
;

1127 
r
 = 
	`gСho°by«me_r
(
nodТame
, &
ho°Тt
, 
buf
, (buf), &
Тt
,

1128 &
Фr
);

1129 #Цiа
	`defЪed
(
_EVENT_HAVE_GETHOSTBYNAME_R_5_ARG
)

1130 
buf
[2048];

1131 
ho°Тt
 hostent;

1132 
Тt
 = 
	`gСho°by«me_r
(
nodТame
, &
ho°Тt
, 
buf
, (buf),

1133 &
Фr
);

1134 #Цiа
	`defЪed
(
_EVENT_HAVE_GETHOSTBYNAME_R_3_ARG
)

1135 
ho°Тt_d©a
 
d©a
;

1136 
ho°Тt
 hostent;

1137 
	`mem£t
(&
d©a
, 0, (data));

1138 
Фr
 = 
	`gСho°by«me_r
(
nodТame
, &
ho°Тt
, &
d©a
);

1139 
Тt
 = 
Фr
 ? 
NULL
 : &
ho°Тt
;

1143 
Тt
 = 
	`gСho°by«me
(
nodТame
);

1144 #ifdeа
WIN32


1145 
Фr
 = 
	`WSAGСLa°EЉ№
();

1147 
Фr
 = 
h_ФЇo
;

1152 iа(!
Тt
) {

1154 
Фr
) {

1155 
TRY_AGAIN
:

1156  
EVUTIL_EAI_AGAIN
;

1157 
NO_RECOVERY
:

1159  
EVUTIL_EAI_FAIL
;

1160 
HOST_NOT_FOUND
:

1161  
EVUTIL_EAI_NONAME
;

1162 
NO_ADDRESS
:

1163 #iа
NO_DATA
 !р
NO_ADDRESS


1164 
NO_DATA
:

1166  
EVUTIL_EAI_NODATA
;

1170 iа(
Тt
->
h_addєy≥
 !р
hЪts
.
ai_зmЮy
 &&

1171 
hЪts
.
ai_зmЮy
 !р
PF_UNSPEC
) {

1175  
EVUTIL_EAI_NONAME
;

1179 iа(
Тt
->
h_Ћngth
 == 0)

1180  
EVUTIL_EAI_NODATA
;

1184 iа(
Тt
->
h_addєy≥
 !р
PF_INET
 &&ГЅ->h_addєy≥ !р
PF_INET6
)

1185  
EVUTIL_EAI_FAMILY
;

1187 *
їs
 = 
	`addrЪfo_дom_ho°Тt
(
Тt
, 
p№t
, &
hЪts
);

1188 iа(! *
їs
)

1189  
EVUTIL_EAI_MEMORY
;

1194 
	}
}

1197 
	$evutЮ_дУaddrЪfo
(
evutЮ_addrЪfo
 *
ai
)

1199 #ifdeа
_EVENT_HAVE_GETADDRINFO


1200 iа(!(
ai
->
ai_жags
 & 
EVUTIL_AI_LIBEVENT_ALLOCATED
)) {

1201 
	`дУaddrЪfo
(
ai
);

1205 
ai
) {

1206 
evutЮ_addrЪfo
 *
√xt
 = 
ai
->
ai_√xt
;

1207 iа(
ai
->
ai_€nЏ«me
)

1208 
	`mm_дУ
(
ai
->
ai_€nЏ«me
);

1209 
	`mm_дУ
(
ai
);

1210 
ai
 = 
√xt
;

1212 
	}
}

1214 
evdns_gСaddrЪfo_в
 
	gevdns_gСaddrЪfo_imґ
 = 
NULL
;

1217 
	$evutЮ_£t_evdns_gСaddrЪfo_в
(
evdns_gСaddrЪfo_в
 
в
)

1219 iа(!
evdns_gСaddrЪfo_imґ
)

1220 
evdns_gСaddrЪfo_imґ
 = 
в
;

1221 
	}
}

1228 
evutЮ_gСaddrЪfo_async
(
evdns_ba£
 *
dns_ba£
,

1229 cЏ° *
nodТame
, cЏ° *
£rv«me
,

1230 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
,

1231 (*
cb
)(, 
evutЮ_addrЪfo
 *, *), *
ђg
)

1233 iа(
dns_ba£
 && 
evdns_gСaddrЪfo_imґ
) {

1234 
	`evdns_gСaddrЪfo_imґ
(

1235 
dns_ba£
, 
nodТame
, 
£rv«me
, 
hЪts_Ъ
, 
cb
, 
ђg
);

1237 
evutЮ_addrЪfo
 *
ai
=
NULL
;

1238 
Фr
;

1239 
Фr
 = 
	`evutЮ_gСaddrЪfo
(
nodТame
, 
£rv«me
, 
hЪts_Ъ
, &
ai
);

1240 
	`cb
(
Фr
, 
ai
, 
ђg
);

1243 
	}
}

1246 
	$evutЮ_gai_°їЉ№
(
Фr
)

1251 
Фr
) {

1252 
EVUTIL_EAI_CANCEL
:

1257 
EVUTIL_EAI_ADDRFAMILY
:

1259 
EVUTIL_EAI_AGAIN
:

1261 
EVUTIL_EAI_BADFLAGS
:

1263 
EVUTIL_EAI_FAIL
:

1265 
EVUTIL_EAI_FAMILY
:

1267 
EVUTIL_EAI_MEMORY
:

1269 
EVUTIL_EAI_NODATA
:

1271 
EVUTIL_EAI_NONAME
:

1273 
EVUTIL_EAI_SERVICE
:

1275 
EVUTIL_EAI_SOCKTYPE
:

1277 
EVUTIL_EAI_SYSTEM
:

1280 #ifdeа
USE_NATIVE_GETADDRINFO


1281  
	`gai_°їЉ№
(
Фr
);

1286 
	}
}

1288 #ifdeа
WIN32


1289 
	#E
(
code
, 
s
и{ code, (†" [" #codР" ]"и}

	)

1290 °ruщ { 
	mcode
; cЏ° *
	mmsg
; } 
	gwЪdows_sockС_Фr№s
[] = {

1291 
E
(
WSAEINTR
, "Interrupted function call"),

1292 
E
(
WSAEACCES
, "Permission denied"),

1293 
E
(
WSAEFAULT
, "BadЗddress"),

1294 
E
(
WSAEINVAL
, "InvalidЗrgument"),

1295 
E
(
WSAEMFILE
, "Too many open files"),

1296 
E
(
WSAEWOULDBLOCK
, "ResourceБemporarily unavailable"),

1297 
E
(
WSAEINPROGRESS
, "OperationВow inЕrogress"),

1298 
E
(
WSAEALREADY
, "OperationЗlready inЕrogress"),

1299 
E
(
WSAENOTSOCK
, "Socket operation onВonsocket"),

1300 
E
(
WSAEDESTADDRREQ
, "DestinationЗddressДequired"),

1301 
E
(
WSAEMSGSIZE
, "MessageБooЖong"),

1302 
E
(
WSAEPROTOTYPE
, "Protocol wrong for socket"),

1303 
E
(
WSAENOPROTOOPT
, "BadЕrotocol option"),

1304 
E
(
WSAEPROTONOSUPPORT
, "ProtocolВot supported"),

1305 
E
(
WSAESOCKTNOSUPPORT
, "SocketБypeВot supported"),

1307 
E
(
WSAEOPNOTSUPP
, "OperationВot supported"),

1308 
E
(
WSAEPFNOSUPPORT
, "Protocol familyВot supported"),

1309 
E
(
WSAEAFNOSUPPORT
, "Address familyВot supported byЕrotocol family"),

1310 
E
(
WSAEADDRINUSE
, "AddressЗlready in use"),

1311 
E
(
WSAEADDRNOTAVAIL
, "CannotЗssignДequestedЗddress"),

1312 
E
(
WSAENETDOWN
, "Network is down"),

1313 
E
(
WSAENETUNREACH
, "Network is unreachable"),

1314 
E
(
WSAENETRESET
, "Network dropped connection onДeset"),

1315 
E
(
WSAECONNABORTED
, "Software caused connectionЗbort"),

1316 
E
(
WSAECONNRESET
, "ConnectionДeset byЕeer"),

1317 
E
(
WSAENOBUFS
, "No buffer spaceЗvailable"),

1318 
E
(
WSAEISCONN
, "Socket isЗlready connected"),

1319 
E
(
WSAENOTCONN
, "Socket isВot connected"),

1320 
E
(
WSAESHUTDOWN
, "Cannot sendЗfter socket shutdown"),

1321 
E
(
WSAETIMEDOUT
, "ConnectionБimed out"),

1322 
E
(
WSAECONNREFUSED
, "ConnectionДefused"),

1323 
E
(
WSAEHOSTDOWN
, "Host is down"),

1324 
E
(
WSAEHOSTUNREACH
, "NoДouteБo host"),

1325 
E
(
WSAEPROCLIM
, "Too manyЕrocesses"),

1328 
E
(
WSASYSNOTREADY
, "Network subsystem is unavailable"),

1329 
E
(
WSAVERNOTSUPPORTED
, "Winsock.dll out ofДange"),

1330 
E
(
WSANOTINITIALISED
, "Successful WSAStartupВot yetЕerformed"),

1331 
E
(
WSAEDISCON
, "Graceful shutdownВow inЕrogress"),

1332 #ifdeа
WSATYPE_NOT_FOUND


1333 
E
(
WSATYPE_NOT_FOUND
, "ClassБypeВot found"),

1335 
E
(
WSAHOST_NOT_FOUND
, "HostВot found"),

1336 
E
(
WSATRY_AGAIN
, "Nonauthoritative hostВot found"),

1337 
E
(
WSANO_RECOVERY
, "This isЗВonrecoverableГrror"),

1338 
E
(
WSANO_DATA
, "ValidВame,Вo dataДecord ofДequestedБype)"),

1348 { -1, 
NULL
 },

1350 #undeа
E


1353 
	$evutЮ_sockС_Фr№_to_°rЪg
(
Фrcode
)

1356 
i
;

1357 
i
=0; 
wЪdows_sockС_Фr№s
[i].
code
 >= 0; ++i) {

1358 iа(
Фrcode
 =р
wЪdows_sockС_Фr№s
[
i
].
code
)

1359  
wЪdows_sockС_Фr№s
[
i
].
msg
;

1361  
	`°їЉ№
(
Фrcode
);

1362 
	}
}

1366 
	$evutЮ_ҐіЪtf
(*
buf
, 
size_t
 
buжТ
, cЏ° *
f№m©
, ...)

1368 
r
;

1369 
va_li°
 
≠
;

1370 
	`va_°ђt
(
≠
, 
f№m©
);

1371 
r
 = 
	`evutЮ_vҐіЪtf
(
buf
, 
buжТ
, 
f№m©
, 
≠
);

1372 
	`va_Тd
(
≠
);

1373  
r
;

1374 
	}
}

1377 
	$evutЮ_vҐіЪtf
(*
buf
, 
size_t
 
buжТ
, cЏ° *
f№m©
, 
va_li°
 
≠
)

1379 
r
;

1380 iа(!
buжТ
)

1382 #ifdeа
_MSC_VER


1383 
r
 = 
	`_vҐіЪtf
(
buf
, 
buжТ
, 
f№m©
, 
≠
);

1384 iа(
r
 < 0)

1385 
r
 = 
	`_vsэrЪtf
(
f№m©
, 
≠
);

1387 
r
 = 
	`vҐіЪtf
(
buf
, 
buжТ
, 
f№m©
, 
≠
);

1389 
buf
[
buжТ
-1] = '\0';

1390  
r
;

1391 
	}
}

1393 
	#USE_INTERNAL_NTOP


	)

1394 
	#USE_INTERNAL_PTON


	)

1397 
	$evutЮ_ЪС_ЅЁ
(
af
, cЏ° *
§c
, *
d°
, 
size_t
 
Ћn
)

1399 #iа
	`defЪed
(
_EVENT_HAVE_INET_NTOP
и&& !defЪed(
USE_INTERNAL_NTOP
)

1400  
	`ЪС_ЅЁ
(
af
, 
§c
, 
d°
, 
Ћn
);

1402 iа(
af
 =р
AF_INET
) {

1403 cЏ° 
Ъ_addr
 *
Ъ
 = 
§c
;

1404 cЏ° 
ev_uЪt32_t
 
a
 = 
	`Ѕohl
(
Ъ
->
s_addr
);

1405 
r
;

1406 
r
 = 
	`evutЮ_ҐіЪtf
(
d°
, 
Ћn
, "%d.%d.%d.%d",

1407 ()(
ev_uЪt8_t
)((
a
>>24)&0xff),

1408 ()(
ev_uЪt8_t
)((
a
>>16)&0xff),

1409 ()(
ev_uЪt8_t
)((
a
>>8 )&0xff),

1410 ()(
ev_uЪt8_t
)((
a
 )&0xff));

1411 iа(
r
<0||(
size_t
м>=
Ћn
)

1412  
NULL
;

1414  
d°
;

1415 #ifdeа
AF_INET6


1416 } iа(
af
 =р
AF_INET6
) {

1417 cЏ° 
Ъ6_addr
 *
addr
 = 
§c
;

1418 
buf
[64], *
э
;

1419 
lЏge°G≠LТ
 = 0, 
lЏge°G≠Pos
 = -1, 
i
,

1420 
curG≠Pos
 = -1, 
curG≠LТ
 = 0;

1421 
ev_uЪt16_t
 
w№ds
[8];

1422 
i
 = 0; i < 8; ++i) {

1423 
w№ds
[
i
] =

1424 (((
ev_uЪt16_t
)
addr
->
s6_addr
[2*
i
])<<8) +Зddr->s6_addr[2*i+1];

1426 iа(
w№ds
[0] == 0 && words[1] == 0 && words[2] == 0 && words[3] == 0 &&

1427 
w№ds
[4] == 0 && ((words[5] == 0 && words[6] && words[7]) ||

1428 (
w№ds
[5] == 0xffff))) {

1430 iа(
w№ds
[5] == 0) {

1431 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "::%d.%d.%d.%d",

1432 
addr
->
s6_addr
[12],Зddr->s6_addr[13],

1433 
addr
->
s6_addr
[14],Зddr->s6_addr[15]);

1435 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "::%x:%d.%d.%d.%d", 
w№ds
[5],

1436 
addr
->
s6_addr
[12],Зddr->s6_addr[13],

1437 
addr
->
s6_addr
[14],Зddr->s6_addr[15]);

1439 iа(
	`°ЊТ
(
buf
и> 
Ћn
)

1440  
NULL
;

1441 
	`°Њэy
(
d°
, 
buf
, 
Ћn
);

1442  
d°
;

1444 
i
 = 0;

1445 
i
 < 8) {

1446 iа(
w№ds
[
i
] == 0) {

1447 
curG≠Pos
 = 
i
++;

1448 
curG≠LТ
 = 1;

1449 
i
<8 && 
w№ds
[i] == 0) {

1450 ++
i
; ++
curG≠LТ
;

1452 iа(
curG≠LТ
 > 
lЏge°G≠LТ
) {

1453 
lЏge°G≠Pos
 = 
curG≠Pos
;

1454 
lЏge°G≠LТ
 = 
curG≠LТ
;

1457 ++
i
;

1460 iа(
lЏge°G≠LТ
<=1)

1461 
lЏge°G≠Pos
 = -1;

1463 
э
 = 
buf
;

1464 
i
 = 0; i < 8; ++i) {

1465 iа(
w№ds
[
i
] =р0 && 
lЏge°G≠Pos
 == i) {

1466 iа(
i
 == 0)

1467 *
э
++ = ':';

1468 *
э
++ = ':';

1469 
i
 < 8 && 
w№ds
[i] == 0)

1470 ++
i
;

1471 --
i
;

1473 
	`evutЮ_ҐіЪtf
(
э
,

1474 (
buf
)-(
э
-buf), "%x", ()
w№ds
[
i
]);

1475 
э
 +р
	`°ЊТ
(cp);

1476 iа(
i
 != 7)

1477 *
э
++ = ':';

1480 *
э
 = '\0';

1481 iа(
	`°ЊТ
(
buf
и> 
Ћn
)

1482  
NULL
;

1483 
	`°Њэy
(
d°
, 
buf
, 
Ћn
);

1484  
d°
;

1487  
NULL
;

1490 
	}
}

1493 
	$evutЮ_ЪС_±Џ
(
af
, cЏ° *
§c
, *
d°
)

1495 #iа
	`defЪed
(
_EVENT_HAVE_INET_PTON
и&& !defЪed(
USE_INTERNAL_PTON
)

1496  
	`ЪС_±Џ
(
af
, 
§c
, 
d°
);

1498 iа(
af
 =р
AF_INET
) {

1499 
a
,
b
,
c
,
d
;

1500 
m№e
;

1501 
Ъ_addr
 *
addr
 = 
d°
;

1502 iа(
	`ss€nf
(
§c
, "%d.%d.%d.%d%c", &
a
,&
b
,&
c
,&
d
,&
m№e
) != 4)

1504 iа(
a
 < 0 ||З > 255)  0;

1505 iа(
b
 < 0 || b > 255)  0;

1506 iа(
c
 < 0 || c > 255)  0;

1507 iа(
d
 < 0 || d > 255)  0;

1508 
addr
->
s_addr
 = 
	`htЏl
((
a
<<24и| (
b
<<16и| (
c
<<8и| 
d
);

1510 #ifdeа
AF_INET6


1511 } iа(
af
 =р
AF_INET6
) {

1512 
Ъ6_addr
 *
out
 = 
d°
;

1513 
ev_uЪt16_t
 
w№ds
[8];

1514 
g≠Pos
 = -1, 
i
, 
£tW№ds
=0;

1515 cЏ° *
dў
 = 
	`°rchr
(
§c
, '.');

1516 cЏ° *
eow
;

1517 iа(
dў
 =р
§c
)

1519 iа(!
dў
)

1520 
eow
 = 
§c
+
	`°ЊТ
(src);

1522 
byЛ1
,
byЛ2
,
byЛ3
,
byЛ4
;

1523 
m№e
;

1524 
eow
 = 
dў
-1;Гow >р
§c
 && 
	`EVUTIL_ISDIGIT
(*eow); --eow)

1526 ++
eow
;

1530 iа(
	`ss€nf
(
eow
, "%d.%d.%d.%d%c",

1531 &
byЛ1
,&
byЛ2
,&
byЛ3
,&
byЛ4
,&
m№e
) != 4)

1534 iа(
byЛ1
 > 255 || byte1 < 0 ||

1535 
byЛ2
 > 255 || byte2 < 0 ||

1536 
byЛ3
 > 255 || byte3 < 0 ||

1537 
byЛ4
 > 255 || byte4 < 0)

1540 
w№ds
[6] = (
byЛ1
<<8и| 
byЛ2
;

1541 
w№ds
[7] = (
byЛ3
<<8и| 
byЛ4
;

1542 
£tW№ds
 += 2;

1545 
i
 = 0;

1546 
§c
 < 
eow
) {

1547 iа(
i
 > 7)

1549 iа(
	`EVUTIL_ISXDIGIT
(*
§c
)) {

1550 *
√xt
;

1551 
r
 = 
	`°єё
(
§c
, &
√xt
, 16);

1552 iа(
√xt
 > 4+
§c
)

1554 iа(
√xt
 =р
§c
)

1556 iа(
r
<0 ||Д>65536)

1559 
w№ds
[
i
++] = (
ev_uЪt16_t
)
r
;

1560 
£tW№ds
++;

1561 
§c
 = 
√xt
;

1562 iа(*
§c
 !р':' && srш!р
eow
)

1564 ++
§c
;

1565 } iа(*
§c
 =р':' && 
i
 > 0 && 
g≠Pos
==-1) {

1566 
g≠Pos
 = 
i
;

1567 ++
§c
;

1568 } iа(*
§c
 =р':' && 
i
 =р0 && src[1] =р':' && 
g≠Pos
==-1) {

1569 
g≠Pos
 = 
i
;

1570 
§c
 += 2;

1576 iа(
£tW№ds
 > 8 ||

1577 (
£tW№ds
 =р8 && 
g≠Pos
 != -1) ||

1578 (
£tW№ds
 < 8 && 
g≠Pos
 == -1))

1581 iа(
g≠Pos
 >= 0) {

1582 
nToMove
 = 
£tW№ds
 - (
dў
 ? 2 : 0и- 
g≠Pos
;

1583 
g≠LТ
 = 8 - 
£tW№ds
;

1585 iа(
nToMove
 < 0)

1587 
	`memmove
(&
w№ds
[
g≠Pos
+
g≠LТ
], &words[gapPos],

1588 (
ev_uЪt16_t
)*
nToMove
);

1589 
	`mem£t
(&
w№ds
[
g≠Pos
], 0, (
ev_uЪt16_t
)*
g≠LТ
);

1591 
i
 = 0; i < 8; ++i) {

1592 
out
->
s6_addr
[2*
i
 ] = 
w№ds
[i] >> 8;

1593 
out
->
s6_addr
[2*
i
+1] = 
w№ds
[i] & 0xff;

1602 
	}
}

1605 
	$evutЮ_Јr£_sockaddr_p№t
(cЏ° *
Э_as_°rЪg
, 
sockaddr
 *
out
, *
ouОТ
)

1607 
p№t
;

1608 
buf
[128];

1609 cЏ° *
э
, *
addr_Јє
, *
p№t_Јє
;

1610 
is_Эv6
;

1619 
э
 = 
	`°rchr
(
Э_as_°rЪg
, ':');

1620 iа(*
Э_as_°rЪg
 == '[') {

1621 
Ћn
;

1622 iа(!(
э
 = 
	`°rchr
(
Э_as_°rЪg
, ']'))) {

1625 
Ћn
 = 
э
-(
Э_as_°rЪg
 + 1);

1626 iа(
Ћn
 > ()(
buf
)-1) {

1629 
	`memэy
(
buf
, 
Э_as_°rЪg
+1, 
Ћn
);

1630 
buf
[
Ћn
] = '\0';

1631 
addr_Јє
 = 
buf
;

1632 iа(
э
[1] == ':')

1633 
p№t_Јє
 = 
э
+2;

1635 
p№t_Јє
 = 
NULL
;

1636 
is_Эv6
 = 1;

1637 } iа(
э
 && 
	`°rchr
(cp+1, ':')) {

1638 
is_Эv6
 = 1;

1639 
addr_Јє
 = 
Э_as_°rЪg
;

1640 
p№t_Јє
 = 
NULL
;

1641 } iа(
э
) {

1642 
is_Эv6
 = 0;

1643 iа(
э
 - 
Э_as_°rЪg
 > ()(
buf
)-1) {

1646 
	`memэy
(
buf
, 
Э_as_°rЪg
, 
э
-ip_as_string);

1647 
buf
[
э
-
Э_as_°rЪg
] = '\0';

1648 
addr_Јє
 = 
buf
;

1649 
p№t_Јє
 = 
э
+1;

1651 
addr_Јє
 = 
Э_as_°rЪg
;

1652 
p№t_Јє
 = 
NULL
;

1653 
is_Эv6
 = 0;

1656 iа(
p№t_Јє
 =р
NULL
) {

1657 
p№t
 = 0;

1659 
p№t
 = 
	`©oi
(
p№t_Јє
);

1660 iа(
p№t
 <= 0 ||Еort > 65535) {

1665 iа(!
addr_Јє
)

1667 #ifdeа
AF_INET6


1668 iа(
is_Эv6
)

1670 
sockaddr_Ъ6
 
sЪ6
;

1671 
	`mem£t
(&
sЪ6
, 0, (sin6));

1672 #ifdeа
_EVENT_HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN


1673 
sЪ6
.
sЪ6_Ћn
 = (sin6);

1675 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

1676 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
p№t
);

1677 iа(1 !р
	`evutЮ_ЪС_±Џ
(
AF_INET6
, 
addr_Јє
, &
sЪ6
.
sЪ6_addr
))

1679 iа((
sЪ6
и> *
ouОТ
)

1681 
	`mem£t
(
out
, 0, *
ouОТ
);

1682 
	`memэy
(
out
, &
sЪ6
, (sin6));

1683 *
ouОТ
 = (
sЪ6
);

1689 
sockaddr_Ъ
 
sЪ
;

1690 
	`mem£t
(&
sЪ
, 0, (sin));

1691 #ifdeа
_EVENT_HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


1692 
sЪ
.
sЪ_Ћn
 = (sin);

1694 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

1695 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
p№t
);

1696 iа(1 !р
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
addr_Јє
, &
sЪ
.
sЪ_addr
))

1698 iа((
sЪ
и> *
ouОТ
)

1700 
	`mem£t
(
out
, 0, *
ouОТ
);

1701 
	`memэy
(
out
, &
sЪ
, (sin));

1702 *
ouОТ
 = (
sЪ
);

1705 
	}
}

1708 
	$evutЮ_sockaddr_cmp
(cЏ° 
sockaddr
 *
І1
, cЏ° sockaddЄ*
І2
,

1709 
Ъюude_p№t
)

1711 
r
;

1712 iа(0 !р(
r
 = (
І1
->
І_зmЮy
 - 
І2
->sa_family)))

1713  
r
;

1715 iа(
І1
->
І_зmЮy
 =р
AF_INET
) {

1716 cЏ° 
sockaddr_Ъ
 *
sЪ1
, *
sЪ2
;

1717 
sЪ1
 = (cЏ° 
sockaddr_Ъ
 *)
І1
;

1718 
sЪ2
 = (cЏ° 
sockaddr_Ъ
 *)
І2
;

1719 iа(
sЪ1
->
sЪ_addr
.
s_addr
 < 
sЪ2
->sin_addr.s_addr)

1721 iа(
sЪ1
->
sЪ_addr
.
s_addr
 > 
sЪ2
->sin_addr.s_addr)

1723 iа(
Ъюude_p№t
 &&

1724 (
r
 = (()
sЪ1
->
sЪ_p№t
 - ()
sЪ2
->sin_port)))

1725  
r
;

1729 #ifdeа
AF_INET6


1730 iа(
І1
->
І_зmЮy
 =р
AF_INET6
) {

1731 cЏ° 
sockaddr_Ъ6
 *
sЪ1
, *
sЪ2
;

1732 
sЪ1
 = (cЏ° 
sockaddr_Ъ6
 *)
І1
;

1733 
sЪ2
 = (cЏ° 
sockaddr_Ъ6
 *)
І2
;

1734 iа((
r
 = 
	`memcmp
(
sЪ1
->
sЪ6_addr
.
s6_addr
, 
sЪ2
->sin6_addr.s6_addr, 16)))

1735  
r
;

1736 iа(
Ъюude_p№t
 &&

1737 (
r
 = (()
sЪ1
->
sЪ6_p№t
 - ()
sЪ2
->sin6_port)))

1738  
r
;

1744 
	}
}

1751 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISALPHA_TABLE
[8] =

1753 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISALNUM_TABLE
[8] =

1755 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISSPACE_TABLE
[8] = { 0x3e00, 0x1, 0, 0, 0, 0, 0, 0 };

1756 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISXDIGIT_TABLE
[8] =

1758 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISDIGIT_TABLE
[8] = { 0, 0x3ff0000, 0, 0, 0, 0, 0, 0 };

1759 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISPRINT_TABLE
[8] =

1761 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISUPPER_TABLE
[8] = { 0, 0, 0x7fffffe, 0, 0, 0, 0, 0 };

1762 cЏ° 
ev_uЪt32_t
 
	gEVUTIL_ISLOWER_TABLE
[8] = { 0, 0, 0, 0x7fffffe, 0, 0, 0, 0 };

1765 cЏ° 
	gEVUTIL_TOUPPER_TABLE
[256] = {

1783 cЏ° 
	gEVUTIL_TOLOWER_TABLE
[256] = {

1803 
	$evutЮ_ascii_°r€£cmp
(cЏ° *
s1
, cЏ° *
s2
)

1805 
c1
, 
c2
;

1807 
c1
 = 
	`EVUTIL_TOLOWER
(*
s1
++);

1808 
c2
 = 
	`EVUTIL_TOLOWER
(*
s2
++);

1809 iа(
c1
 < 
c2
)

1811 iа(
c1
 > 
c2
)

1813 iа(
c1
 == 0)

1816 
	}
}

1817 
	$evutЮ_ascii_°Ї€£cmp
(cЏ° *
s1
, cЏ° *
s2
, 
size_t
 
n
)

1819 
c1
, 
c2
;

1820 
n
--) {

1821 
c1
 = 
	`EVUTIL_TOLOWER
(*
s1
++);

1822 
c2
 = 
	`EVUTIL_TOLOWER
(*
s2
++);

1823 iа(
c1
 < 
c2
)

1825 iа(
c1
 > 
c2
)

1827 iа(
c1
 == 0)

1831 
	}
}

1834 
	$evutЮ_is£tugid
()

1836 #ifdeа
_EVENT_HAVE_ISSETUGID


1837  
	`is£tugid
();

1840 #ifdeа
_EVENT_HAVE_GETEUID


1841 iа(
	`gСuid
(и!р
	`gСeuid
())

1844 #ifdeа
_EVENT_HAVE_GETEGID


1845 iа(
	`gСgid
(и!р
	`gСegid
())

1850 
	}
}

1853 
	$evutЮ_gСТv
(cЏ° *
vђ«me
)

1855 iа(
	`evutЮ_is£tugid
())

1856  
NULL
;

1858  
	`gСТv
(
vђ«me
);

1859 
	}
}

1862 
	$_evutЮ_wЧkњnd
()

1864 #ifdeа
WIN32


1865  
	`њnd
();

1867  
	`њndom
();

1869 
	}
}

1872 
	$evutЮ_sockaddr_is_loЁback
(cЏ° 
sockaddr
 *
addr
)

1874 cЏ° 
LOOPBACK_S6
[16] =

1876 iа(
addr
->
І_зmЮy
 =р
AF_INET
) {

1877 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ *)
addr
;

1878  (
	`Ѕohl
(
sЪ
->
sЪ_addr
.
s_addr
) & 0xff000000) == 0x7f000000;

1879 } iа(
addr
->
І_зmЮy
 =р
AF_INET6
) {

1880 
sockaddr_Ъ6
 *
sЪ6
 = (sockaddr_Ъ6 *)
addr
;

1881  !
	`memcmp
(
sЪ6
->
sЪ6_addr
.
s6_addr
, 
LOOPBACK_S6
, 16);

1884 
	}
}

	@evutil.h

26 #iвdeа
_EVUTIL_H_


27 
	#_EVUTIL_H_


	)

29 
	~<evТt2/utЮ.h
>

	@evutil_rand.c

35 
	~"evТt-cЏfig.h
"

37 
	~"utЮ-ЪЛЇЃ.h
"

38 
	~"evthїad-ЪЛЇЃ.h
"

40 #ifdeа
_EVENT_HAVE_ARC4RANDOM


41 
	~<°dlib.h
>

42 
	~<°rЪg.h
>

44 
	$evutЮ_£cuї_Їg_ЪЩ
()

47 
	}
}

49 #iвdeа
_EVENT_HAVE_ARC4RANDOM_BUF


51 
	$ђc4њndom_buf
(*
buf
, 
size_t
 
n
)

53 *
b
 = 
buf
;

56 iа(
n
 >р4 && ((
ev_uЪНМ_t
)
b
) & 3) {

57 
ev_uЪt32_t
 
u
 = 
	`ђc4њndom
();

58 
n_byЛs
 = 4 - (((
ev_uЪНМ_t
)
b
) & 3);

59 
	`memэy
(
b
, &
u
, 
n_byЛs
);

60 
b
 +р
n_byЛs
;

61 
n
 -р
n_byЛs
;

63 
n
 >= 4) {

64 *(
ev_uЪt32_t
*)
b
 = 
	`ђc4њndom
();

65 
b
 += 4;

66 
n
 -= 4;

68 iа(
n
) {

69 
ev_uЪt32_t
 
u
 = 
	`ђc4њndom
();

70 
	`memэy
(
b
, &
u
, 
n
);

72 
	}
}

77 #ifdeа
_EVENT_ssize_t


78 
	#ssize_t
 
_EVENT_SSIZE_t


	)

80 
	#ARC4RANDOM_EXPORT
 

	)

81 
	#_ARC4_LOCK
(и
	`EVLOCK_LOCK
(
ђc4њnd_lock
, 0)

	)

82 
	#_ARC4_UNLOCK
(и
	`EVLOCK_UNLOCK
(
ђc4њnd_lock
, 0)

	)

83 *
	gђc4њnd_lock
;

85 
	#ARC4RANDOM_UINT32
 
ev_uЪt32_t


	)

86 
	#ARC4RANDOM_NOSTIR


	)

87 
	#ARC4RANDOM_NORANDOM


	)

88 
	#ARC4RANDOM_NOUNIFORM


	)

90 
	~"ђc4њndom.c
"

93 
	$evutЮ_£cuї_Їg_ЪЩ
()

95 
vЃ
;

96 iа(!
ђc4њnd_lock
) {

97 
	`EVTHREAD_ALLOC_LOCK
(
ђc4њnd_lock
, 0);

100 
	`_ARC4_LOCK
();

101 iа(!
ђc4_£eded_ok
)

102 
	`ђc4_°Ь
();

103 
vЃ
 = 
ђc4_£eded_ok
 ? 0 : -1;

104 
	`_ARC4_UNLOCK
();

105  
vЃ
;

106 
	}
}

111 
	$evutЮ_£cuї_Їg_gС_byЛs
(*
buf
, 
size_t
 
n
)

113 
	`ђc4њndom_buf
(
buf
, 
n
);

114 
	}
}

117 
	$evutЮ_£cuї_Їg_add_byЛs
(cЏ° *
buf
, 
size_t
 
n
)

119 
	`ђc4њndom_addњndom
((*)
buf
, 
n
);

120 
	}
}

	@ht-internal.h

8 #iвdeа
_EVENT_HT_H


9 
	#_EVENT_HT_H


	)

11 
	#HT_HEAD
(
«me
, 
ty≥
) \

12 
	s«me
 { \

14 
ty≥
 **
hth_ПbЋ
; \

16 
hth_ПbЋ_Ћngth
; \

18 
hth_n_ТМЫs
; \

20 
hth_lяd_limЩ
; \

22 
hth_іime_idx
; \

23 }

	)

25 
	#HT_INITIALIZER
() \

26 { 
NULL
, 0, 0, 0, -1 }

	)

28 #ifdeа
HT_CACHE_HASH_VALUES


29 
	#HT_ENTRY
(
ty≥
) \

31 
ty≥
 *
hЛ_√xt
; \

32 
hЛ_hash
; \

33 }

	)

35 
	#HT_ENTRY
(
ty≥
) \

37 
ty≥
 *
hЛ_√xt
; \

38 }

	)

41 
	#HT_EMPTY
(
hЧd
) \

42 ((
hЧd
)->
hth_n_ТМЫs
 =р0)

	)

45 
	#HT_SIZE
(
hЧd
) \

46 ((
hЧd
)->
hth_n_ТМЫs
)

	)

48 
	#HT_FIND
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_FIND
((hЧd), (Цm))

	)

49 
	#HT_INSERT
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_INSERT
((hЧd), (Цm))

	)

50 
	#HT_REPLACE
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_REPLACE
((hЧd), (Цm))

	)

51 
	#HT_REMOVE
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_REMOVE
((hЧd), (Цm))

	)

52 
	#HT_START
(
«me
, 
hЧd
и«me##
	`_HT_START
(hЧd)

	)

53 
	#HT_NEXT
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_NEXT
((hЧd), (Цm))

	)

54 
	#HT_NEXT_RMV
(
«me
, 
hЧd
, 
Цm
и«me##
	`_HT_NEXT_RMV
((hЧd), (Цm))

	)

55 
	#HT_CLEAR
(
«me
, 
hЧd
и«me##
	`_HT_CLEAR
(hЧd)

	)

56 
	#HT_INIT
(
«me
, 
hЧd
и«me##
	`_HT_INIT
(hЧd)

	)

58 
ЪlЪe
 

59 
	$ht_imіove_hash
(
h
)

63 
h
 += ~(h << 9);

64 
h
 ^= ((h >> 14) | (h << 18));

65 
h
 += (h << 4);

66 
h
 ^= ((h >> 10) | (h << 22));

67  
h
;

68 
	}
}

72 
ЪlЪe
 

73 
	$ht_°rЪg_hash
(cЏ° *
s
)

75 
h
 = 0;

76 
m
 = 1;

77 *
s
) {

78 
h
 +р((sig√d )*
s
++)*
m
;

79 
m
 = (m<<5)-1;

81  
h
;

82 
	}
}

86 
ЪlЪe
 

87 
	$ht_°rЪg_hash
(cЏ° *
s
)

89 
h
;

90 cЏ° *
э
 = (cЏ° *)
s
;

91 
h
 = *
э
 << 7;

92 *
э
) {

93 
h
 = (1000003*hи^ *
э
++;

96 
h
 ^р()(
э
-(cЏ° *)
s
);

97  
h
;

98 
	}
}

100 #ifdeа
HT_CACHE_HASH_VALUES


101 
	#_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
) \

102 dЎ{ (
Цm
)->
fЫld
.
hЛ_hash
 = 
	`hashв
”lm); } 0)

	)

103 
	#_HT_SET_HASHVAL
(
Цm
, 
fЫld
, 
vЃ
) \

104 dЎ{ (
Цm
)->
fЫld
.
hЛ_hash
 = (
vЃ
); } 0)

	)

105 
	#_HT_ELT_HASH
(
Цm
, 
fЫld
, 
hashв
) \

106 ((
Цm
)->
fЫld
.
hЛ_hash
)

	)

108 
	#_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
) \

109 (()0)

	)

110 
	#_HT_ELT_HASH
(
Цm
, 
fЫld
, 
hashв
) \

111 (
	`hashв
(
Цm
))

	)

112 
	#_HT_SET_HASHVAL
(
Цm
, 
fЫld
, 
vЃ
) \

113 (()0)

	)

117 
	#_HT_BUCKET
(
hЧd
, 
fЫld
, 
Цm
, 
hashв
) \

118 ((
hЧd
)->
hth_ПbЋ
[
	`_HT_ELT_HASH
(
Цm
,
fЫld
,
hashв
и% hЧd->
hth_ПbЋ_Ћngth
])

	)

120 
	#HT_FOREACH
(
x
, 
«me
, 
hЧd
) \

121 (
x
ир
	`HT_START
(
«me
, 
hЧd
); \

122 (
x
и!р
NULL
; \

123 (
x
ир
	`HT_NEXT
(
«me
, 
hЧd
, x))

	)

125 
	#HT_PROTOTYPE
(
«me
, 
ty≥
, 
fЫld
, 
hashв
, 
eqв
) \

126 
«me
##
	`_HT_GROW
(«mР*
ht
, 
mЪ_€ЈcЩy
); \

127 
«me
##
	`_HT_CLEAR
(«mР*
ht
); \

128 
_
##
«me
##
	`_HT_REP_IS_BAD
(cЏ° «mР*
ht
); \

129 
ЪlЪe
 \

130 
«me
##
	`_HT_INIT
(«mР*
hЧd
) { \

131 
hЧd
->
hth_ПbЋ_Ћngth
 = 0; \

132 
hЧd
->
hth_ПbЋ
 = 
NULL
; \

133 
hЧd
->
hth_n_ТМЫs
 = 0; \

134 
hЧd
->
hth_lяd_limЩ
 = 0; \

135 
hЧd
->
hth_іime_idx
 = -1; \

139 
ЪlЪe
 
ty≥
 ** \

140 
_
##
«me
##
	`_HT_FIND_P
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

142 
ty≥
 **
p
; \

143 iа(!
hЧd
->
hth_ПbЋ
) \

144  
NULL
; \

145 
p
 = &
	`_HT_BUCKET
(
hЧd
, 
fЫld
, 
Цm
, 
hashв
); \

146 *
p
) { \

147 iа(
	`eqв
(*
p
, 
Цm
)) \

148  
p
; \

149 
p
 = &(*p)->
fЫld
.
hЛ_√xt
; \

151  
p
; \

155 
ЪlЪe
 
ty≥
 * \

156 
«me
##
	`_HT_FIND
(cЏ° «mР*
hЧd
, 
ty≥
 *
Цm
) \

158 
ty≥
 **
p
; \

159 
«me
 *
h
 = («mР*и
hЧd
; \

160 
	`_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
); \

161 
p
 = 
_
##
«me
##
	`_HT_FIND_P
(
h
, 
Цm
); \

162  
p
 ? *∞: 
NULL
; \

166 
ЪlЪe
 \

167 
«me
##
	`_HT_INSERT
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

169 
ty≥
 **
p
; \

170 iа(!
hЧd
->
hth_ПbЋ
 || hЧd->
hth_n_ТМЫs
 >рhЧd->
hth_lяd_limЩ
) \

171 
«me
##
	`_HT_GROW
(
hЧd
, hЧd->
hth_n_ТМЫs
+1); \

172 ++
hЧd
->
hth_n_ТМЫs
; \

173 
	`_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
); \

174 
p
 = &
	`_HT_BUCKET
(
hЧd
, 
fЫld
, 
Цm
, 
hashв
); \

175 
Цm
->
fЫld
.
hЛ_√xt
 = *
p
; \

176 *
p
 = 
Цm
; \

181 
ЪlЪe
 
ty≥
 * \

182 
«me
##
	`_HT_REPLACE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

184 
ty≥
 **
p
, *
r
; \

185 iа(!
hЧd
->
hth_ПbЋ
 || hЧd->
hth_n_ТМЫs
 >рhЧd->
hth_lяd_limЩ
) \

186 
«me
##
	`_HT_GROW
(
hЧd
, hЧd->
hth_n_ТМЫs
+1); \

187 
	`_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
); \

188 
p
 = 
_
##
«me
##
	`_HT_FIND_P
(
hЧd
, 
Цm
); \

189 
r
 = *
p
; \

190 *
p
 = 
Цm
; \

191 iа(
r
 && (r!=
Цm
)) { \

192 
Цm
->
fЫld
.
hЛ_√xt
 = 
r
->field.hte_next; \

193 
r
->
fЫld
.
hЛ_√xt
 = 
NULL
; \

194  
r
; \

196 ++
hЧd
->
hth_n_ТМЫs
; \

197  
NULL
; \

202 
ЪlЪe
 
ty≥
 * \

203 
«me
##
	`_HT_REMOVE
(«mР*
hЧd
, 
ty≥
 *
Цm
) \

205 
ty≥
 **
p
, *
r
; \

206 
	`_HT_SET_HASH
(
Цm
, 
fЫld
, 
hashв
); \

207 
p
 = 
_
##
«me
##
	`_HT_FIND_P
(
hЧd
,
Цm
); \

208 iа(!
p
 || !*p) \

209  
NULL
; \

210 
r
 = *
p
; \

211 *
p
 = 
r
->
fЫld
.
hЛ_√xt
; \

212 
r
->
fЫld
.
hЛ_√xt
 = 
NULL
; \

213 --
hЧd
->
hth_n_ТМЫs
; \

214  
r
; \

220 
ЪlЪe
 \

221 
«me
##
	`_HT_FOREACH_FN
(«mР*
hЧd
, \

222 (*
в
)(
ty≥
 *, *), \

223 *
d©a
) \

225 
idx
; \

226 
їmove
; \

227 
ty≥
 **
p
, **
√xН
, *
√xt
; \

228 iа(!
hЧd
->
hth_ПbЋ
) \

230 
idx
=0; idx < 
hЧd
->
hth_ПbЋ_Ћngth
; ++idx) { \

231 
p
 = &
hЧd
->
hth_ПbЋ
[
idx
]; \

232 *
p
) { \

233 
√xН
 = &(*
p
)->
fЫld
.
hЛ_√xt
; \

234 
√xt
 = *
√xН
; \

235 
їmove
 = 
	`в
(*
p
, 
d©a
); \

236 iа(
їmove
) { \

237 --
hЧd
->
hth_n_ТМЫs
; \

238 *
p
 = 
√xt
; \

240 
p
 = 
√xН
; \

248 
ЪlЪe
 
ty≥
 ** \

249 
«me
##
	`_HT_START
(«mР*
hЧd
) \

251 
b
 = 0; \

252 
b
 < 
hЧd
->
hth_ПbЋ_Ћngth
) { \

253 iа(
hЧd
->
hth_ПbЋ
[
b
]) \

254  &
hЧd
->
hth_ПbЋ
[
b
]; \

255 ++
b
; \

257  
NULL
; \

264 
ЪlЪe
 
ty≥
 ** \

265 
«me
##
	`_HT_NEXT
(«mР*
hЧd
, 
ty≥
 **
Цm
) \

267 iа((*
Цm
)->
fЫld
.
hЛ_√xt
) { \

268  &(*
Цm
)->
fЫld
.
hЛ_√xt
; \

270 
b
 = (
	`_HT_ELT_HASH
(*
Цm
, 
fЫld
, 
hashв
и% 
hЧd
->
hth_ПbЋ_Ћngth
)+1; \

271 
b
 < 
hЧd
->
hth_ПbЋ_Ћngth
) { \

272 iа(
hЧd
->
hth_ПbЋ
[
b
]) \

273  &
hЧd
->
hth_ПbЋ
[
b
]; \

274 ++
b
; \

276  
NULL
; \

279 
ЪlЪe
 
ty≥
 ** \

280 
«me
##
	`_HT_NEXT_RMV
(«mР*
hЧd
, 
ty≥
 **
Цm
) \

282 
h
 = 
	`_HT_ELT_HASH
(*
Цm
, 
fЫld
, 
hashв
); \

283 *
Цm
 = (*Цm)->
fЫld
.
hЛ_√xt
; \

284 --
hЧd
->
hth_n_ТМЫs
; \

285 iа(*
Цm
) { \

286  
Цm
; \

288 
b
 = (
h
 % 
hЧd
->
hth_ПbЋ_Ћngth
)+1; \

289 
b
 < 
hЧd
->
hth_ПbЋ_Ћngth
) { \

290 iа(
hЧd
->
hth_ПbЋ
[
b
]) \

291  &
hЧd
->
hth_ПbЋ
[
b
]; \

292 ++
b
; \

294  
NULL
; \

296 }

	)

298 
	#HT_GENERATE
(
«me
, 
ty≥
, 
fЫld
, 
hashв
, 
eqв
, 
lяd
, 
mЃlocв
, \

299 
їЃlocв
, 
дУв
) \

300 
«me
##
_PRIMES
[] = { \

309 
«me
##
_N_PRIMES
 = \

310 ()((
«me
##
_PRIMES
)/(name##_PRIMES[0])); \

315 
«me
##
	`_HT_GROW
(«mР*
hЧd
, 
size
) \

317 
√w_Ћn
, 
√w_lяd_limЩ
; \

318 
іime_idx
; \

319 
ty≥
 **
√w_ПbЋ
; \

320 iа(
hЧd
->
hth_іime_idx
 =р()
«me
##
_N_PRIMES
 - 1) \

322 iа(
hЧd
->
hth_lяd_limЩ
 > 
size
) \

324 
іime_idx
 = 
hЧd
->
hth_іime_idx
; \

326 
√w_Ћn
 = 
«me
##
_PRIMES
[++
іime_idx
]; \

327 
√w_lяd_limЩ
 = ()(
lяd
*
√w_Ћn
); \

328 } 
√w_lяd_limЩ
 <р
size
 && \

329 
іime_idx
 < ()
«me
##
_N_PRIMES
); \

330 iа((
√w_ПbЋ
 = 
	`mЃlocв
(
√w_Ћn
*(
ty≥
*)))) { \

331 
b
; \

332 
	`mem£t
(
√w_ПbЋ
, 0, 
√w_Ћn
*(
ty≥
*)); \

333 
b
 = 0; b < 
hЧd
->
hth_ПbЋ_Ћngth
; ++b) { \

334 
ty≥
 *
Цm
, *
√xt
; \

335 
b2
; \

336 
Цm
 = 
hЧd
->
hth_ПbЋ
[
b
]; \

337 
Цm
) { \

338 
√xt
 = 
Цm
->
fЫld
.
hЛ_√xt
; \

339 
b2
 = 
	`_HT_ELT_HASH
(
Цm
, 
fЫld
, 
hashв
и% 
√w_Ћn
; \

340 
Цm
->
fЫld
.
hЛ_√xt
 = 
√w_ПbЋ
[
b2
]; \

341 
√w_ПbЋ
[
b2
] = 
Цm
; \

342 
Цm
 = 
√xt
; \

345 iа(
hЧd
->
hth_ПbЋ
) \

346 
	`дУв
(
hЧd
->
hth_ПbЋ
); \

347 
hЧd
->
hth_ПbЋ
 = 
√w_ПbЋ
; \

349 
b
, 
b2
; \

350 
√w_ПbЋ
 = 
	`їЃlocв
(
hЧd
->
hth_ПbЋ
, 
√w_Ћn
*(
ty≥
*)); \

351 iа(!
√w_ПbЋ
)  -1; \

352 
	`mem£t
(
√w_ПbЋ
 + 
hЧd
->
hth_ПbЋ_Ћngth
, 0, \

353 (
√w_Ћn
 - 
hЧd
->
hth_ПbЋ_Ћngth
)*(
ty≥
*)); \

354 
b
=0; b < 
hЧd
->
hth_ПbЋ_Ћngth
; ++b) { \

355 
ty≥
 *
e
, **
pE
; \

356 
pE
 = &
√w_ПbЋ
[
b
], 
e
 = *pE;Г !р
NULL
;Г = *pE) { \

357 
b2
 = 
	`_HT_ELT_HASH
(
e
, 
fЫld
, 
hashв
и% 
√w_Ћn
; \

358 iа(
b2
 =р
b
) { \

359 
pE
 = &
e
->
fЫld
.
hЛ_√xt
; \

361 *
pE
 = 
e
->
fЫld
.
hЛ_√xt
; \

362 
e
->
fЫld
.
hЛ_√xt
 = 
√w_ПbЋ
[
b2
]; \

363 
√w_ПbЋ
[
b2
] = 
e
; \

367 
hЧd
->
hth_ПbЋ
 = 
√w_ПbЋ
; \

369 
hЧd
->
hth_ПbЋ_Ћngth
 = 
√w_Ћn
; \

370 
hЧd
->
hth_іime_idx
 = 
іime_idx
; \

371 
hЧd
->
hth_lяd_limЩ
 = 
√w_lяd_limЩ
; \

377 
«me
##
	`_HT_CLEAR
(«mР*
hЧd
) \

379 iа(
hЧd
->
hth_ПbЋ
) \

380 
	`дУв
(
hЧd
->
hth_ПbЋ
); \

381 
hЧd
->
hth_ПbЋ_Ћngth
 = 0; \

382 
«me
##
	`_HT_INIT
(
hЧd
); \

387 
_
##
«me
##
	`_HT_REP_IS_BAD
(cЏ° «mР*
hЧd
) \

389 
n
, 
i
; \

390 
ty≥
 *
Цm
; \

391 iа(!
hЧd
->
hth_ПbЋ_Ћngth
) { \

392 iа(!
hЧd
->
hth_ПbЋ
 && !hЧd->
hth_n_ТМЫs
 && \

393 !
hЧd
->
hth_lяd_limЩ
 && hЧd->
hth_іime_idx
 == -1) \

398 iа(!
hЧd
->
hth_ПbЋ
 || hЧd->
hth_іime_idx
 < 0 || \

399 !
hЧd
->
hth_lяd_limЩ
) \

401 iа(
hЧd
->
hth_n_ТМЫs
 > hЧd->
hth_lяd_limЩ
) \

403 iа(
hЧd
->
hth_ПbЋ_Ћngth
 !р
«me
##
_PRIMES
[hЧd->
hth_іime_idx
]) \

405 iа(
hЧd
->
hth_lяd_limЩ
 !р()(
lяd
*hЧd->
hth_ПbЋ_Ћngth
)) \

407 
n
 = 
i
 = 0; i < 
hЧd
->
hth_ПbЋ_Ћngth
; ++i) { \

408 
Цm
 = 
hЧd
->
hth_ПbЋ
[
i
];Гlm;Гlm =Гlm->
fЫld
.
hЛ_√xt
) { \

409 iа(
	`_HT_ELT_HASH
(
Цm
, 
fЫld
, 
hashв
и!р
	`hashв
(elm)) \

410  1000 + 
i
; \

411 iа((
	`_HT_ELT_HASH
(
Цm
, 
fЫld
, 
hashв
и% 
hЧd
->
hth_ПbЋ_Ћngth
и!р
i
) \

412  10000 + 
i
; \

413 ++
n
; \

416 iа(
n
 !р
hЧd
->
hth_n_ТМЫs
) \

419 }

	)

424 
	#_HT_FIND_OR_INSERT
(
«me
, 
fЫld
, 
hashв
, 
hЧd
, 
Цty≥
, 
Цm
, 
vђ
, 
y
, 
n
) \

426 
«me
 *
_
##
vђ
##
_hЧd
 = 
hЧd
; \

427 
Цty≥
 **
vђ
; \

428 iа(!
_
##
vђ
##
_hЧd
->
hth_ПbЋ
 || \

429 
_
##
vђ
##
_hЧd
->
hth_n_ТМЫs
 >р_##vђ##_hЧd->
hth_lяd_limЩ
) \

430 
«me
##
	`_HT_GROW
(
_
##
vђ
##
_hЧd
, _##vђ##_hЧd->
hth_n_ТМЫs
+1); \

431 
	`_HT_SET_HASH
((
Цm
), 
fЫld
, 
hashв
); \

432 
vђ
 = 
_
##
«me
##
	`_HT_FIND_P
(_##vђ##
_hЧd
, (
Цm
)); \

433 iа(*
vђ
) { \

434 
y
; \

436 
n
; \

438 }

	)

439 
	#_HT_FOI_INSERT
(
fЫld
, 
hЧd
, 
Цm
, 
√wТt
, 
vђ
) \

441 
	`_HT_SET_HASHVAL
(
√wТt
, 
fЫld
, (
Цm
)->fЫld.
hЛ_hash
); \

442 
√wТt
->
fЫld
.
hЛ_√xt
 = 
NULL
; \

443 *
vђ
 = 
√wТt
; \

444 ++((
hЧd
)->
hth_n_ТМЫs
); \

445 }

	)

	@http-internal.h

10 #iвdeа
_HTTP_INTERNAL_H_


11 
	#_HTTP_INTERNAL_H_


	)

13 
	~"evТt2/evТt_°ruщ.h
"

14 
	~"utЮ-ЪЛЇЃ.h
"

16 
	#HTTP_CONNECT_TIMEOUT
 45

	)

17 
	#HTTP_WRITE_TIMEOUT
 50

	)

18 
	#HTTP_READ_TIMEOUT
 50

	)

20 
	#HTTP_PREFIX
 "hЙp://"

	)

21 
	#HTTP_DEFAULTPORT
 80

	)

23 
	emesІge_їad_°©us
 {

24 
	mALL_DATA_READ
 = 1,

25 
	mMORE_DATA_EXPECTED
 = 0,

26 
	mDATA_CORRUPTED
 = -1,

27 
	mREQUEST_CANCELED
 = -2,

28 
	mDATA_TOO_LONG
 = -3

31 
	eevhЙp_cЏ√щiЏ_Фr№
 {

32 
	mEVCON_HTTP_TIMEOUT
,

33 
	mEVCON_HTTP_EOF
,

34 
	mEVCON_HTTP_INVALID_HEADER
,

35 
	mEVCON_HTTP_BUFFER_ERROR
,

36 
	mEVCON_HTTP_REQUEST_CANCEL


39 
	gevbufгr
;

40 
	gaddrЪfo
;

41 
	gevhЙp_їque°
;

45 
	eevhЙp_cЏ√щiЏ_°©e
 {

46 
	mEVCON_DISCONNECTED
,

47 
	mEVCON_CONNECTING
,

48 
	mEVCON_IDLE
,

49 
	mEVCON_READING_FIRSTLINE
,

51 
	mEVCON_READING_HEADERS
,

52 
	mEVCON_READING_BODY
,

53 
	mEVCON_READING_TRAILER
,

54 
	mEVCON_WRITING


57 
	gevТt_ba£
;

59 
	sevhЙp_cЏ√щiЏ
 {

61 
TAILQ_ENTRY
(
evhЙp_cЏ√щiЏ
и(
	m√xt
);

63 
evutЮ_sockС_t
 
	mfd
;

64 
bufгїvТt
 *
	mbuгv
;

66 
evТt
 
	mїМy_ev
;

68 *
	mbЪd_addїss
;

69 
u_sh№t
 
	mbЪd_p№t
;

71 *
	maddїss
;

72 
u_sh№t
 
	mp№t
;

74 
size_t
 
	mmax_hЧdФs_size
;

75 
ev_uЪt64_t
 
	mmax_body_size
;

77 
	mжags
;

78 
	#EVHTTP_CON_INCOMING
 0x0001

	)

79 
	#EVHTTP_CON_OUTGOING
 0x0002

	)

80 
	#EVHTTP_CON_CLOSEDETECT
 0x0004

	)

82 
	mtimeout
;

83 
	mїМy_ъt
;

84 
	mїМy_max
;

86 
evhЙp_cЏ√щiЏ_°©e
 
	m°©e
;

89 
evhЙp
 *
	mhЙp_£rvФ
;

91 
TAILQ_HEAD
(
evcЏ_їque°q
, 
evhЙp_їque°
и
	mїque°s
;

93 (*
	mcb
)(
	mevhЙp_cЏ√щiЏ
 *, *);

94 *
	mcb_ђg
;

96 (*
	mюo£cb
)(
	mevhЙp_cЏ√щiЏ
 *, *);

97 *
	mюo£cb_ђg
;

99 (*
	mcЏncb
)(
	mevhЙp_cЏ√щiЏ
 *, *);

100 *
	mcЏncb_ђg
;

102 
evТt_ba£
 *
	mba£
;

103 
evdns_ba£
 *
	mdns_ba£
;

106 
	sevhЙp_cb
 {

107 
TAILQ_ENTRY
(
evhЙp_cb
и
	m√xt
;

109 *
	mwh©
;

111 (*
	mcb
)(
evhЙp_їque°
 *
	mїq
, *);

112 *
	mcbђg
;

116 
TAILQ_HEAD
(
evcЏq
, 
evhЙp_cЏ√щiЏ
);

119 
	sevhЙp_bound_sockС
 {

120 
TAILQ_ENTRY
(
evhЙp_bound_sockС
и(
	m√xt
);

122 
evcЏ∆i°ТФ
 *
	mli°ТФ
;

125 
	sevhЙp
 {

126 
TAILQ_ENTRY
(
evhЙp
и
	m√xt
;

128 
TAILQ_HEAD
(
boundq
, 
evhЙp_bound_sockС
и
	msockСs
;

130 
TAILQ_HEAD
(
hЙpcbq
, 
evhЙp_cb
и
	m€ќbacks
;

131 
evcЏq
 
	mcЏ√щiЏs
;

133 
TAILQ_HEAD
(
vho°sq
, 
evhЙp
и
	mvЬtuЃho°s
;

136 *
	mvho°_ЈЙФn
;

138 
	mtimeout
;

140 
size_t
 
	mdeзu…_max_hЧdФs_size
;

141 
ev_uЪt64_t
 
	mdeзu…_max_body_size
;

143 (*
	mgТcb
)(
evhЙp_їque°
 *
	mїq
, *);

144 *
	mgТcbђg
;

146 
evТt_ba£
 *
	mba£
;

150 
evhЙp_cЏ√щiЏ_ї£t
(
evhЙp_cЏ√щiЏ
 *);

153 
evhЙp_cЏ√щiЏ_cЏ√щ
(
evhЙp_cЏ√щiЏ
 *);

156 
evhЙp_cЏ√щiЏ_зЮ
(
evhЙp_cЏ√щiЏ
 *,

157 
evhЙp_cЏ√щiЏ_Фr№
 
Фr№
);

159 
evhЙp_gС_їque°
(
evhЙp
 *, 
evutЮ_sockС_t
, 
sockaddr
 *, 
ev_sockЋn_t
);

161 
	gmesІge_їad_°©us
;

163 
mesІge_їad_°©us
 
evhЙp_Јr£_fЬ°lЪe
(
evhЙp_їque°
 *, 
evbufгr
*);

164 
mesІge_їad_°©us
 
evhЙp_Јr£_hЧdФs
(
evhЙp_їque°
 *, 
evbufгr
*);

166 
evhЙp_°ђt_їad
(
evhЙp_cЏ√щiЏ
 *);

167 
evhЙp_make_hЧdФ
(
evhЙp_cЏ√щiЏ
 *, 
evhЙp_їque°
 *);

169 
evhЙp_wrЩe_bufгr
(
evhЙp_cЏ√щiЏ
 *,

170 (*)(
evhЙp_cЏ√щiЏ
 *, *), *);

173 
	`evhЙp_ї•Џ£_code
(
evhЙp_їque°
 *, , const *);

174 
	`evhЙp_£nd_Јge
(
evhЙp_їque°
 *, 
evbufгr
 *);

	@http.c

28 
	~"evТt-cЏfig.h
"

30 
	#_REENTRANT


	)

32 #ifdeа
_EVENT_HAVE_SYS_PARAM_H


33 
	~<sys/Јњm.h
>

35 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

39 #ifdeа
_EVENT_HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 #ifdeа
HAVE_SYS_IOCCOM_H


43 
	~<sys/ioccom.h
>

46 #iвdeа
WIN32


47 
	~<sys/їsourы.h
>

48 
	~<sys/sockС.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/waЩ.h
>

52 
	~<ws2tэЭ.h
>

55 
	~<sys/queue.h
>

57 #ifdeа
_EVENT_HAVE_NETINET_IN_H


58 
	~<√tЪС/Ъ.h
>

60 #ifdeа
_EVENT_HAVE_NETDB_H


61 
	~<√tdb.h
>

64 #ifdeа
WIN32


65 
	~<wЪsock2.h
>

68 
	~<ФЇo.h
>

69 
	~<°dio.h
>

70 
	~<°dlib.h
>

71 
	~<°rЪg.h
>

72 #iвdeа
WIN32


73 
	~<sy¶og.h
>

75 
	~<sig«l.h
>

76 
	~<time.h
>

77 #ifdeа
_EVENT_HAVE_UNISTD_H


78 
	~<uni°d.h
>

80 #ifdeа
_EVENT_HAVE_FCNTL_H


81 
	~<fъО.h
>

84 #undeа
timeout_≥ndЪg


85 #undeа
timeout_ЪЩЯlized


87 
	~"°Њэy-ЪЛЇЃ.h
"

88 
	~"evТt2/hЙp.h
"

89 
	~"evТt2/evТt.h
"

90 
	~"evТt2/bufгr.h
"

91 
	~"evТt2/bufгїvТt.h
"

92 
	~"evТt2/bufгїvТt_comЈt.h
"

93 
	~"evТt2/hЙp_°ruщ.h
"

94 
	~"evТt2/hЙp_comЈt.h
"

95 
	~"evТt2/utЮ.h
"

96 
	~"evТt2/li°ТФ.h
"

97 
	~"log-ЪЛЇЃ.h
"

98 
	~"utЮ-ЪЛЇЃ.h
"

99 
	~"hЙp-ЪЛЇЃ.h
"

100 
	~"mm-ЪЛЇЃ.h
"

102 #iвdeа
_EVENT_HAVE_GETNAMEINFO


103 
	#NI_MAXSERV
 32

	)

104 
	#NI_MAXHOST
 1025

	)

106 #iвdeа
NI_NUMERICHOST


107 
	#NI_NUMERICHOST
 1

	)

110 #iвdeа
NI_NUMERICSERV


111 
	#NI_NUMERICSERV
 2

	)

115 
	$зke_gС«meЪfo
(cЏ° 
sockaddr
 *
І
, 
size_t
 
ІЋn
, *
ho°
,

116 
size_t
 
ho°Ћn
, *
£rv
, size_И
£rvЋn
, 
жags
)

118 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ *)
І
;

120 iа(
£rv
 !р
NULL
) {

121 
tmp£rv
[16];

122 
	`evutЮ_ҐіЪtf
(
tmp£rv
, (tmpserv),

123 "%d", 
	`Ѕohs
(
sЪ
->
sЪ_p№t
));

124 iа(
	`°Њэy
(
£rv
, 
tmp£rv
, 
£rvЋn
) >= servlen)

128 iа(
ho°
 !р
NULL
) {

129 iа(
жags
 & 
NI_NUMERICHOST
) {

130 iа(
	`°Њэy
(
ho°
, 
	`ЪС_Ѕя
(
sЪ
->
sЪ_addr
),

131 
ho°Ћn
) >= hostlen)

136 
ho°Тt
 *
hp
;

137 
hp
 = 
	`gСho°byaddr
((*)&
sЪ
->
sЪ_addr
,

138 (
Ъ_addr
), 
AF_INET
);

139 iа(
hp
 =р
NULL
)

142 iа(
	`°Њэy
(
ho°
, 
hp
->
h_«me
, 
ho°Ћn
) >= hostlen)

149 
	}
}

153 #iвdeа
MIN


154 
	#MIN
(
a
,
b
и((„)<(b))?„):(b))

	)

157 
debug
;

159 
evutЮ_sockС_t
 
bЪd_sockС_ai
(
evutЮ_addrЪfo
 *, 
їu£
);

160 
evutЮ_sockС_t
 
bЪd_sockС
(cЏ° *, 
ev_uЪt16_t
, 
їu£
);

161 
«me_дom_addr
(
sockaddr
 *, 
ev_sockЋn_t
, **, **);

162 
evhЙp_assocЯЛ_√w_їque°_wЩh_cЏ√щiЏ
(

163 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

164 
evhЙp_cЏ√щiЏ_°ђt_dСeщюo£
(

165 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

166 
evhЙp_cЏ√щiЏ_°Ё_dСeщюo£
(

167 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

168 
evhЙp_їque°_di•©ch
(
evhЙp_cЏ√щiЏ
* 
evcЏ
);

169 
evhЙp_їad_fЬ°lЪe
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

170 
evhЙp_їque°
 *
їq
);

171 
evhЙp_їad_hЧdФ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

172 
evhЙp_їque°
 *
їq
);

173 
evhЙp_add_hЧdФ_ЪЛЇЃ
(
evkeyvЃq
 *
hЧdФs
,

174 cЏ° *
key
, cЏ° *
vЃue
);

177 
evhЙp_їad_cb
(
bufгїvТt
 *, *);

178 
evhЙp_wrЩe_cb
(
bufгїvТt
 *, *);

179 
evhЙp_Фr№_cb
(
bufгїvТt
 *
buгv
, 
wh©
, *
ђg
);

180 
evhЙp_decode_uri_ЪЛЇЃ
(cЏ° *
uri
, 
size_t
 
Ћngth
,

181 *
їt
, 
Ѓways_decode_ґus
);

183 #iвdeа
_EVENT_HAVE_STRSEP


187 
	$°r£p
(**
s
, cЏ° *
dЦ
)

189 *
d
, *
tok
;

190 
	`EVUTIL_ASSERT
(
	`°ЊТ
(
dЦ
) == 1);

191 iа(!
s
 || !*s)

192  
NULL
;

193 
tok
 = *
s
;

194 
d
 = 
	`°r°r
(
tok
, 
dЦ
);

195 iа(
d
) {

196 *
d
 = '\0';

197 *
s
 = 
d
 + 1;

199 *
s
 = 
NULL
;

200  
tok
;

201 
	}
}

205 
	$html_їґaы
(
ch
, *
buf
)

207 
ch
) {

223 
buf
[0] = 
ch
;

224 
buf
[1] = '\0';

226  
buf
;

227 
	}
}

237 
	$evhЙp_htmЋs€≥
(cЏ° *
html
)

239 
i
, 
√w_size
 = 0, 
ёd_size
 = 
	`°ЊТ
(
html
);

240 *
es€≥d_html
, *
p
;

241 
sь©ch_•aы
[2];

243 
i
 = 0; i < 
ёd_size
; ++i)

244 
√w_size
 +р
	`°ЊТ
(
	`html_їґaы
(
html
[
i
], 
sь©ch_•aы
));

246 
p
 = 
es€≥d_html
 = 
	`mm_mЃloc
(
√w_size
 + 1);

247 iа(
es€≥d_html
 =р
NULL
) {

248 
	`evТt_wђn
("%s: mЃloc(%d)", 
__func__
, 
√w_size
 + 1);

249  (
NULL
);

251 
i
 = 0; i < 
ёd_size
; ++i) {

252 cЏ° *
їґaыd
 = 
	`html_їґaы
(
html
[
i
], 
sь©ch_•aы
);

254 
	`°rэy
(
p
, 
їґaыd
);

255 
p
 +р
	`°ЊТ
(
їґaыd
);

258 *
p
 = '\0';

260  (
es€≥d_html
);

261 
	}
}

264 
	$evhЙp_mСhod
(
evhЙp_cmd_ty≥
 
ty≥
)

266 cЏ° *
mСhod
;

268 
ty≥
) {

269 
EVHTTP_REQ_GET
:

270 
mСhod
 = "GET";

272 
EVHTTP_REQ_POST
:

273 
mСhod
 = "POST";

275 
EVHTTP_REQ_HEAD
:

276 
mСhod
 = "HEAD";

278 
EVHTTP_REQ_PUT
:

279 
mСhod
 = "PUT";

281 
EVHTTP_REQ_DELETE
:

282 
mСhod
 = "DELETE";

285 
mСhod
 = 
NULL
;

289  (
mСhod
);

290 
	}
}

299 
	$evhЙp_ї•Џ£_√eds_body
(
evhЙp_їque°
 *
їq
)

301  (
їq
->
ї•Џ£_code
 !р
HTTP_NOCONTENT
 &&

302 
їq
->
ї•Џ£_code
 !р
HTTP_NOTMODIFIED
 &&

303 (
їq
->
ї•Џ£_code
 < 100 ||Дeq->response_code >= 200) &&

304 
їq
->
ty≥
 !р
EVHTTP_REQ_HEAD
);

305 
	}
}

308 
	$evhЙp_add_evТt
(
evТt
 *
ev
, 
timeout
, 
deзu…_timeout
)

310 iа(
timeout
 != 0) {

311 
timevЃ
 
tv
;

313 
	`evutЮ_timФюЧr
(&
tv
);

314 
tv
.
tv_£c
 = 
timeout
 !р-1 ?БimeouИ: 
deзu…_timeout
;

315  
	`evТt_add
(
ev
, &
tv
);

317  
	`evТt_add
(
ev
, 
NULL
);

319 
	}
}

322 
evhЙp_wrЩe_bufгr
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

323 (*
cb
)(
evhЙp_cЏ√щiЏ
 *, *), *
ђg
)

325 
	`evТt_debug
(("%s:ЕїЈrЪgБЎwrЩРbufгr\n", 
__func__
));

328 
evcЏ
->
cb
 = cb;

329 
evcЏ
->
cb_ђg
 = 
ђg
;

331 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
);

332 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_WRITE
);

333 
	}
}

336 
	$evhЙp_cЏ√щed
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

338 
evcЏ
->
°©e
) {

339 
EVCON_DISCONNECTED
:

340 
EVCON_CONNECTING
:

342 
EVCON_IDLE
:

343 
EVCON_READING_FIRSTLINE
:

344 
EVCON_READING_HEADERS
:

345 
EVCON_READING_BODY
:

346 
EVCON_READING_TRAILER
:

347 
EVCON_WRITING
:

351 
	}
}

357 
	$evhЙp_make_hЧdФ_їque°
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

358 
evhЙp_їque°
 *
їq
)

360 cЏ° *
mСhod
;

362 
	`evhЙp_їmove_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Proxy-Connection");

365 
mСhod
 = 
	`evhЙp_mСhod
(
їq
->
ty≥
);

366 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
),

368 
mСhod
, 
їq
->
uri
,Дeq->
maj№
,Дeq->
mЪ№
);

371 iа((
їq
->
ty≥
 =р
EVHTTP_REQ_POST
 ||Дeq->ty≥ =р
EVHTTP_REQ_PUT
) &&

372 
	`evhЙp_fЪd_hЧdФ
(
їq
->
ouНut_hЧdФs
, "CЏЛЅ-LТgth"и=р
NULL
){

373 
size
[12];

374 
	`evutЮ_ҐіЪtf
(
size
, (size), "%ld",

375 ()
	`evbufгr_gС_Ћngth
(
їq
->
ouНut_bufгr
));

376 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "CЏЛЅ-LТgth", 
size
);

378 
	}
}

381 
	$evhЙp_is_cЏ√щiЏ_юo£
(
жags
, 
evkeyvЃq
* 
hЧdФs
)

383 iа(
жags
 & 
EVHTTP_PROXY_REQUEST
) {

385 cЏ° *
cЏ√щiЏ
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Proxy-Connection");

386  (
cЏ√щiЏ
 =р
NULL
 || 
	`evutЮ_ascii_°r€£cmp
(connection, "keep-alive") != 0);

388 cЏ° *
cЏ√щiЏ
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Connection");

389  (
cЏ√щiЏ
 !р
NULL
 && 
	`evutЮ_ascii_°r€£cmp
(connection, "close") == 0);

391 
	}
}

394 
	$evhЙp_is_cЏ√щiЏ_kУЈlive
(
evkeyvЃq
* 
hЧdФs
)

396 cЏ° *
cЏ√щiЏ
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Connection");

397  (
cЏ√щiЏ
 !р
NULL


398 && 
	`evutЮ_ascii_°Ї€£cmp
(
cЏ√щiЏ
, "keep-alive", 10) == 0);

399 
	}
}

402 
	$evhЙp_maybe_add_d©e_hЧdФ
(
evkeyvЃq
 *
hЧdФs
)

404 iа(
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "D©e"и=р
NULL
) {

405 
d©e
[50];

406 #iвdeа
WIN32


407 
tm
 
cur
;

409 
tm
 *
cur_p
;

410 
time_t
 
t
 = 
	`time
(
NULL
);

411 #ifdeа
WIN32


412 
cur_p
 = 
	`gmtime
(&
t
);

414 
	`gmtime_r
(&
t
, &
cur
);

415 
cur_p
 = &
cur
;

417 iа(
	`°rбime
(
d©e
, (date),

418 "%a, %d %b %Y %H:%M:%S GMT", 
cur_p
) != 0) {

419 
	`evhЙp_add_hЧdФ
(
hЧdФs
, "D©e", 
d©e
);

422 
	}
}

425 
	$evhЙp_maybe_add_cЏЛЅ_Ћngth_hЧdФ
(
evkeyvЃq
 *
hЧdФs
,

426 
cЏЛЅ_Ћngth
)

428 iа(
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Tњnsгr-EncodЪg"и=р
NULL
 &&

429 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "CЏЛЅ-LТgth"и=р
NULL
) {

430 
Ћn
[12];

431 
	`evutЮ_ҐіЪtf
(
Ћn
, ÷Т), "%ld", 
cЏЛЅ_Ћngth
);

432 
	`evhЙp_add_hЧdФ
(
hЧdФs
, "CЏЛЅ-LТgth", 
Ћn
);

434 
	}
}

441 
	$evhЙp_make_hЧdФ_ї•Џ£
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

442 
evhЙp_їque°
 *
їq
)

444 
is_kУЈlive
 = 
	`evhЙp_is_cЏ√щiЏ_kУЈlive
(
їq
->
Ъput_hЧdФs
);

445 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
),

447 
їq
->
maj№
,Дeq->
mЪ№
,Дeq->
ї•Џ£_code
,

448 
їq
->
ї•Џ£_code_lЪe
);

450 iа(
їq
->
maj№
 == 1) {

451 iа(
їq
->
mЪ№
 == 1)

452 
	`evhЙp_maybe_add_d©e_hЧdФ
(
їq
->
ouНut_hЧdФs
);

458 iа(
їq
->
mЪ№
 =р0 && 
is_kУЈlive
)

459 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
,

462 iа((
їq
->
mЪ№
 =р1 || 
is_kУЈlive
) &&

463 
	`evhЙp_ї•Џ£_√eds_body
(
їq
)) {

469 
	`evhЙp_maybe_add_cЏЛЅ_Ћngth_hЧdФ
(

470 
їq
->
ouНut_hЧdФs
,

471 ()
	`evbufгr_gС_Ћngth
(
їq
->
ouНut_bufгr
));

476 iа(
	`evhЙp_ї•Џ£_√eds_body
(
їq
)) {

477 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
ouНut_hЧdФs
,

478 "CЏЛЅ-Ty≥"и=р
NULL
) {

479 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
,

485 iа(
	`evhЙp_is_cЏ√щiЏ_юo£
(
їq
->
жags
,Дeq->
Ъput_hЧdФs
)) {

486 
	`evhЙp_їmove_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection");

487 iа(!(
їq
->
жags
 & 
EVHTTP_PROXY_REQUEST
))

488 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection", "close");

489 
	`evhЙp_їmove_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Proxy-Connection");

491 
	}
}

494 
	$evhЙp_make_hЧdФ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, 
evhЙp_їque°
 *
їq
)

496 
evkeyvЃ
 *
hЧdФ
;

497 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
);

503 iа(
їq
->
kЪd
 =р
EVHTTP_REQUEST
) {

504 
	`evhЙp_make_hЧdФ_їque°
(
evcЏ
, 
їq
);

506 
	`evhЙp_make_hЧdФ_ї•Џ£
(
evcЏ
, 
їq
);

509 
	`TAILQ_FOREACH
(
hЧdФ
, 
їq
->
ouНut_hЧdФs
, 
√xt
) {

510 
	`evbufгr_add_іЪtf
(
ouНut
, "%s: %s\r\n",

511 
hЧdФ
->
key
, hЧdФ->
vЃue
);

513 
	`evbufгr_add
(
ouНut
, "\r\n", 2);

515 iа(
	`evbufгr_gС_Ћngth
(
їq
->
ouНut_bufгr
) > 0) {

520 
	`evbufгr_add_bufгr
(
ouНut
, 
їq
->
ouНut_bufгr
);

522 
	}
}

525 
	$evhЙp_cЏ√щiЏ_£t_max_hЧdФs_size
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

526 
ev_ssize_t
 
√w_max_hЧdФs_size
)

528 iа(
√w_max_hЧdФs_size
<0)

529 
evcЏ
->
max_hЧdФs_size
 = 
EV_SIZE_MAX
;

531 
evcЏ
->
max_hЧdФs_size
 = 
√w_max_hЧdФs_size
;

532 
	}
}

534 
	$evhЙp_cЏ√щiЏ_£t_max_body_size
(
evhЙp_cЏ√щiЏ
* 
evcЏ
,

535 
ev_ssize_t
 
√w_max_body_size
)

537 iа(
√w_max_body_size
<0)

538 
evcЏ
->
max_body_size
 = 
EV_UINT64_MAX
;

540 
evcЏ
->
max_body_size
 = 
√w_max_body_size
;

541 
	}
}

544 
	$evhЙp_cЏ√щiЏ_ЪcomЪg_зЮ
(
evhЙp_їque°
 *
їq
,

545 
evhЙp_cЏ√щiЏ_Фr№
 
Фr№
)

547 
Фr№
) {

548 
EVCON_HTTP_TIMEOUT
:

549 
EVCON_HTTP_EOF
:

558 iа(!
їq
->
u£rdЏe
) {

560 
	`TAILQ_REMOVE
(&
їq
->
evcЏ
->
їque°s
,Дeq, 
√xt
);

564 
їq
->
evcЏ
 = 
NULL
;

567 
EVCON_HTTP_INVALID_HEADER
:

568 
EVCON_HTTP_BUFFER_ERROR
:

569 
EVCON_HTTP_REQUEST_CANCEL
:

572 iа(
їq
->
uri
) {

573 
	`mm_дУ
(
їq
->
uri
);

574 
їq
->
uri
 = 
NULL
;

581 (*
їq
->
cb
)‘eq,Дeq->
cb_ђg
);

585 
	}
}

588 
	$evhЙp_cЏ√щiЏ_зЮ_code
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

589 
Фr№
)

591 
evhЙp_їque°
* 
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

592 (*
cb
)(
evhЙp_їque°
 *, *);

593 *
cb_ђg
;

594 
	`EVUTIL_ASSERT
(
їq
 !р
NULL
);

595 
	`EVUTIL_ASSERT
(!(
evcЏ
->
жags
 & 
EVHTTP_CON_INCOMING
));

597 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
|
EV_WRITE
);

599 
cb
 = 
їq
->cb;

600 
cb_ђg
 = 
їq
->cb_arg;

602 
їq
->
Фr№
 =Гrror;

603 
їq
->
ї•Џ£_code
 = -1;

606 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

608 (*
cb
)(
їq
, 
cb_ђg
);

609 iа((
їq
->
жags
 & 
EVHTTP_USER_OWNED
) == 0) {

610 
	`evhЙp_їque°_дУ
(
їq
);

612 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

615 iа(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и!р
NULL
)

616 
	`evhЙp_cЏ√щiЏ_cЏ√щ
(
evcЏ
);

618 
	}
}

622 
	$evhЙp_cЏ√щiЏ_зЮ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

623 
evhЙp_cЏ√щiЏ_Фr№
 
Фr№
)

625 
evhЙp_їque°
* 
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

626 (*
cb
)(
evhЙp_їque°
 *, *);

627 *
cb_ђg
;

628 
	`EVUTIL_ASSERT
(
їq
 !р
NULL
);

630 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
|
EV_WRITE
);

632 iа(
evcЏ
->
жags
 & 
EVHTTP_CON_INCOMING
) {

641 iа(
	`evhЙp_cЏ√щiЏ_ЪcomЪg_зЮ
(
їq
, 
Фr№
) == -1)

642 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

647 iа(
Фr№
 !р
EVCON_HTTP_REQUEST_CANCEL
) {

649 
cb
 = 
їq
->cb;

650 
cb_ђg
 = 
їq
->cb_arg;

652 
cb
 = 
NULL
;

653 
cb_ђg
 = 
NULL
;

660 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

661 
	`evhЙp_їque°_дУ
(
їq
);

664 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

667 iа(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и!р
NULL
)

668 
	`evhЙp_cЏ√щiЏ_cЏ√щ
(
evcЏ
);

673 iа(
cb
 !р
NULL
)

674 (*
cb
)(
NULL
, 
cb_ђg
);

675 
	}
}

678 
	$evhЙp_wrЩe_cb
(
bufгїvТt
 *
buгv
, *
ђg
)

680 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

683 iа(
evcЏ
->
cb
 !р
NULL
)

684 (*
evcЏ
->
cb
)”vcЏ,ГvcЏ->
cb_ђg
);

685 
	}
}

695 
	$evhЙp_cЏ√щiЏ_dЏe
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

697 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

698 
cЏ_outgoЪg
 = 
evcЏ
->
жags
 & 
EVHTTP_CON_OUTGOING
;

700 iа(
cЏ_outgoЪg
) {

702 
√ed_юo£
;

703 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

704 
їq
->
evcЏ
 = 
NULL
;

706 
evcЏ
->
°©e
 = 
EVCON_IDLE
;

708 
√ed_юo£
 =

709 
	`evhЙp_is_cЏ√щiЏ_юo£
(
їq
->
жags
,Дeq->
Ъput_hЧdФs
)||

710 
	`evhЙp_is_cЏ√щiЏ_юo£
(
їq
->
жags
,Дeq->
ouНut_hЧdФs
);

713 iа(
√ed_юo£
)

714 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

716 iа(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и!р
NULL
) {

721 iа(!
	`evhЙp_cЏ√щed
(
evcЏ
))

722 
	`evhЙp_cЏ√щiЏ_cЏ√щ
(
evcЏ
);

724 
	`evhЙp_їque°_di•©ch
(
evcЏ
);

725 } iа(!
√ed_юo£
) {

730 
	`evhЙp_cЏ√щiЏ_°ђt_dСeщюo£
(
evcЏ
);

737 
evcЏ
->
°©e
 = 
EVCON_WRITING
;

741 (*
їq
->
cb
)‘eq,Дeq->
cb_ђg
);

746 iа(
cЏ_outgoЪg
 && ((
їq
->
жags
 & 
EVHTTP_USER_OWNED
) == 0)) {

747 
	`evhЙp_їque°_дУ
(
їq
);

749 
	}
}

765 
mesІge_їad_°©us


766 
	$evhЙp_h™dЋ_chunked_їad
(
evhЙp_їque°
 *
їq
, 
evbufгr
 *
buf
)

768 
Ћn
;

770 (
Ћn
 = 
	`evbufгr_gС_Ћngth
(
buf
)) > 0) {

771 iа(
їq
->
Ѕ№Чd
 < 0) {

773 
ev_Ъt64_t
 
Ѕ№Чd
;

774 *
p
 = 
	`evbufгr_їad 
(
buf
, 
NULL
, 
EVBUFFER_EOL_CRLF
);

775 *
Тdp
;

776 
Фr№
;

777 iа(
p
 =р
NULL
)

780 iа(
	`°ЊТ
(
p
) == 0) {

781 
	`mm_дУ
(
p
);

784 
Ѕ№Чd
 = 
	`evutЮ_°єёl
(
p
, &
Тdp
, 16);

785 
Фr№
 = (*
p
 == '\0' ||

786 (*
Тdp
 != '\0' && *endp != ' ') ||

787 
Ѕ№Чd
 < 0);

788 
	`mm_дУ
(
p
);

789 iа(
Фr№
) {

791  (
DATA_CORRUPTED
);

793 iа(
їq
->
body_size
 + (
size_t
)
Ѕ№Чd
 >Дeq->
evcЏ
->
max_body_size
) {

795 
	`evТt_debug
(("Request body isБooЖong"));

796  (
DATA_TOO_LONG
);

798 
їq
->
body_size
 +р(
size_t
)
Ѕ№Чd
;

799 
їq
->
Ѕ№Чd
 =Вtoread;

800 iа(
їq
->
Ѕ№Чd
 == 0) {

802  (
ALL_DATA_READ
);

808 iа(
Ћn
 < 
їq
->
Ѕ№Чd
)

809  (
MORE_DATA_EXPECTED
);

813 
	`evbufгr_їmove_bufгr
(
buf
, 
їq
->
Ъput_bufгr
, (
size_t
мeq->
Ѕ№Чd
);

814 
їq
->
Ѕ№Чd
 = -1;

815 iа(
їq
->
chunk_cb
 !р
NULL
) {

816 
їq
->
жags
 |р
EVHTTP_REQ_DEFER_FREE
;

817 (*
їq
->
chunk_cb
)‘eq,Дeq->
cb_ђg
);

818 
	`evbufгr_dњЪ
(
їq
->
Ъput_bufгr
,

819 
	`evbufгr_gС_Ћngth
(
їq
->
Ъput_bufгr
));

820 
їq
->
жags
 &р~
EVHTTP_REQ_DEFER_FREE
;

821 iа((
їq
->
жags
 & 
EVHTTP_REQ_NEEDS_FREE
) != 0) {

822  (
REQUEST_CANCELED
);

827  (
MORE_DATA_EXPECTED
);

828 
	}
}

831 
	$evhЙp_їad_МaЮФ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, 
evhЙp_їque°
 *
їq
)

833 
evbufгr
 *
buf
 = 
	`bufгїvТt_gС_Ъput
(
evcЏ
->
buгv
);

835 
	`evhЙp_Јr£_hЧdФs
(
їq
, 
buf
)) {

836 
DATA_CORRUPTED
:

837 
DATA_TOO_LONG
:

838 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
, 
EVCON_HTTP_INVALID_HEADER
);

840 
ALL_DATA_READ
:

841 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
);

842 
	`evhЙp_cЏ√щiЏ_dЏe
(
evcЏ
);

844 
MORE_DATA_EXPECTED
:

845 
REQUEST_CANCELED
:

847 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_READ
);

850 
	}
}

853 
	$evhЙp_їad_body
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, 
evhЙp_їque°
 *
їq
)

855 
evbufгr
 *
buf
 = 
	`bufгїvТt_gС_Ъput
(
evcЏ
->
buгv
);

857 iа(
їq
->
chunked
) {

858 
	`evhЙp_h™dЋ_chunked_їad
(
їq
, 
buf
)) {

859 
ALL_DATA_READ
:

861 
evcЏ
->
°©e
 = 
EVCON_READING_TRAILER
;

862 
	`evhЙp_їad_МaЮФ
(
evcЏ
, 
їq
);

864 
DATA_CORRUPTED
:

865 
DATA_TOO_LONG
:

867 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
,

868 
EVCON_HTTP_INVALID_HEADER
);

870 
REQUEST_CANCELED
:

872 
	`evhЙp_їque°_дУ
(
їq
);

874 
MORE_DATA_EXPECTED
:

878 } iа(
їq
->
Ѕ№Чd
 < 0) {

880 
	`evbufгr_add_bufгr
(
їq
->
Ъput_bufгr
, 
buf
);

881 
їq
->
body_size
 +р
	`evbufгr_gС_Ћngth
(
buf
);

882 } iа(
їq
->
chunk_cb
 !р
NULL
 ||

883 
	`evbufгr_gС_Ћngth
(
buf
и>р
їq
->
Ѕ№Чd
) {

886 
їq
->
Ѕ№Чd
 -р
	`evbufгr_gС_Ћngth
(
buf
);

887 
їq
->
body_size
 +р
	`evbufгr_gС_Ћngth
(
buf
);

888 
	`evbufгr_add_bufгr
(
їq
->
Ъput_bufгr
, 
buf
);

891 iа(
їq
->
body_size
 >Дeq->
evcЏ
->
max_body_size
) {

893 
	`evТt_debug
(("Request body isБooЖong"));

894 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
,

895 
EVCON_HTTP_INVALID_HEADER
);

899 iа(
	`evbufгr_gС_Ћngth
(
їq
->
Ъput_bufгr
и> 0 &&Дeq->
chunk_cb
 !р
NULL
) {

900 
їq
->
жags
 |р
EVHTTP_REQ_DEFER_FREE
;

901 (*
їq
->
chunk_cb
)‘eq,Дeq->
cb_ђg
);

902 
їq
->
жags
 &р~
EVHTTP_REQ_DEFER_FREE
;

903 
	`evbufгr_dњЪ
(
їq
->
Ъput_bufгr
,

904 
	`evbufгr_gС_Ћngth
(
їq
->
Ъput_bufгr
));

905 iа((
їq
->
жags
 & 
EVHTTP_REQ_NEEDS_FREE
) != 0) {

906 
	`evhЙp_їque°_дУ
(
їq
);

911 iа(
їq
->
Ѕ№Чd
 == 0) {

912 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
);

914 
	`evhЙp_cЏ√щiЏ_dЏe
(
evcЏ
);

919 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_READ
);

920 
	}
}

927 
	$evhЙp_їad_cb
(
bufгїvТt
 *
buгv
, *
ђg
)

929 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

930 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

932 
evcЏ
->
°©e
) {

933 
EVCON_READING_FIRSTLINE
:

934 
	`evhЙp_їad_fЬ°lЪe
(
evcЏ
, 
їq
);

938 
EVCON_READING_HEADERS
:

939 
	`evhЙp_їad_hЧdФ
(
evcЏ
, 
їq
);

943 
EVCON_READING_BODY
:

944 
	`evhЙp_їad_body
(
evcЏ
, 
їq
);

948 
EVCON_READING_TRAILER
:

949 
	`evhЙp_їad_МaЮФ
(
evcЏ
, 
їq
);

951 
EVCON_DISCONNECTED
:

952 
EVCON_CONNECTING
:

953 
EVCON_IDLE
:

954 
EVCON_WRITING
:

956 
	`evТt_Фrx
(1, "%s: illegal connection state %d",

957 
__func__
, 
evcЏ
->
°©e
);

959 
	}
}

962 
	$evhЙp_wrЩe_cЏ√щiЏcb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, *
ђg
)

965 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

966 
	`EVUTIL_ASSERT
(
їq
 !р
NULL
);

968 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_WRITING
);

971 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

973 
	`evhЙp_°ђt_їad
(
evcЏ
);

974 
	}
}

981 
	$evhЙp_cЏ√щiЏ_дУ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

983 
evhЙp_їque°
 *
їq
;

986 iа(
evcЏ
->
fd
 != -1) {

987 iа(
	`evhЙp_cЏ√щed
(
evcЏ
и&&ГvcЏ->
юo£cb
 !р
NULL
)

988 (*
evcЏ
->
юo£cb
)”vcЏ,ГvcЏ->
юo£cb_ђg
);

996 (
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
)и!р
NULL
) {

997 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

998 
	`evhЙp_їque°_дУ
(
їq
);

1001 iа(
evcЏ
->
hЙp_£rvФ
 !р
NULL
) {

1002 
evhЙp
 *
hЙp
 = 
evcЏ
->
hЙp_£rvФ
;

1003 
	`TAILQ_REMOVE
(&
hЙp
->
cЏ√щiЏs
, 
evcЏ
, 
√xt
);

1006 iа(
	`evТt_ЪЩЯlized
(&
evcЏ
->
їМy_ev
)) {

1007 
	`evТt_dЦ
(&
evcЏ
->
їМy_ev
);

1008 
	`evТt_debug_u«ssign
(&
evcЏ
->
їМy_ev
);

1011 iа(
evcЏ
->
buгv
 !р
NULL
)

1012 
	`bufгїvТt_дУ
(
evcЏ
->
buгv
);

1014 iа(
evcЏ
->
fd
 != -1)

1015 
	`EVUTIL_CLOSESOCKET
(
evcЏ
->
fd
);

1017 iа(
evcЏ
->
bЪd_addїss
 !р
NULL
)

1018 
	`mm_дУ
(
evcЏ
->
bЪd_addїss
);

1020 iа(
evcЏ
->
addїss
 !р
NULL
)

1021 
	`mm_дУ
(
evcЏ
->
addїss
);

1023 
	`mm_дУ
(
evcЏ
);

1024 
	}
}

1027 
	$evhЙp_cЏ√щiЏ_£t_lo€l_addїss
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1028 cЏ° *
addїss
)

1030 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_DISCONNECTED
);

1031 iа(
evcЏ
->
bЪd_addїss
)

1032 
	`mm_дУ
(
evcЏ
->
bЪd_addїss
);

1033 iа((
evcЏ
->
bЪd_addїss
 = 
	`mm_°rdup
(
addїss
)и=р
NULL
)

1034 
	`evТt_Фr
(1, "%s: sМdup", 
__func__
);

1035 
	}
}

1038 
	$evhЙp_cЏ√щiЏ_£t_lo€l_p№t
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1039 
ev_uЪt16_t
 
p№t
)

1041 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_DISCONNECTED
);

1042 
evcЏ
->
bЪd_p№t
 = 
p№t
;

1043 
	}
}

1046 
	$evhЙp_їque°_di•©ch
(
evhЙp_cЏ√щiЏ
* 
evcЏ
)

1048 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

1051 iа(
їq
 =р
NULL
)

1055 
	`evhЙp_cЏ√щiЏ_°Ё_dСeщюo£
(
evcЏ
);

1058 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_IDLE
);

1060 
evcЏ
->
°©e
 = 
EVCON_WRITING
;

1063 
	`evhЙp_make_hЧdФ
(
evcЏ
, 
їq
);

1065 
	`evhЙp_wrЩe_bufгr
(
evcЏ
, 
evhЙp_wrЩe_cЏ√щiЏcb
, 
NULL
);

1066 
	}
}

1070 
	$evhЙp_cЏ√щiЏ_ї£t
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

1072 
evbufгr
 *
tmp
;

1074 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
|
EV_WRITE
);

1076 iа(
evcЏ
->
fd
 != -1) {

1078 iа(
	`evhЙp_cЏ√щed
(
evcЏ
и&&ГvcЏ->
юo£cb
 !р
NULL
)

1079 (*
evcЏ
->
юo£cb
)”vcЏ,ГvcЏ->
юo£cb_ђg
);

1081 
	`EVUTIL_CLOSESOCKET
(
evcЏ
->
fd
);

1082 
evcЏ
->
fd
 = -1;

1086 
tmp
 = 
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
);

1087 
	`evbufгr_dњЪ
(
tmp
, 
	`evbufгr_gС_Ћngth
(tmp));

1088 
tmp
 = 
	`bufгїvТt_gС_Ъput
(
evcЏ
->
buгv
);

1089 
	`evbufгr_dњЪ
(
tmp
, 
	`evbufгr_gС_Ћngth
(tmp));

1091 
evcЏ
->
°©e
 = 
EVCON_DISCONNECTED
;

1092 
	}
}

1095 
	$evhЙp_cЏ√щiЏ_°ђt_dСeщюo£
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

1097 
evcЏ
->
жags
 |р
EVHTTP_CON_CLOSEDETECT
;

1099 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_READ
);

1100 
	}
}

1103 
	$evhЙp_cЏ√щiЏ_°Ё_dСeщюo£
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

1105 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
);

1106 
	}
}

1109 
	$evhЙp_cЏ√щiЏ_їМy
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

1111 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

1113 
evcЏ
->
°©e
 = 
EVCON_DISCONNECTED
;

1114 
	`evhЙp_cЏ√щiЏ_cЏ√щ
(
evcЏ
);

1115 
	}
}

1118 
	$evhЙp_cЏ√щiЏ_cb_юЧnup
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

1120 iа(
evcЏ
->
їМy_max
 < 0 ||ГvcЏ->
їМy_ъt
 <Гvcon->retry_max) {

1121 
	`evtimФ_assign
(&
evcЏ
->
їМy_ev
,ГvcЏ->
ba£
, 
evhЙp_cЏ√щiЏ_їМy
,Гvcon);

1123 
	`evhЙp_add_evТt
(&
evcЏ
->
їМy_ev
,

1124 
	`MIN
(3600, 2 << 
evcЏ
->
їМy_ъt
),

1125 
HTTP_CONNECT_TIMEOUT
);

1126 
evcЏ
->
їМy_ъt
++;

1129 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

1132 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и!р
NULL
) {

1133 
evhЙp_їque°
 *
їque°
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

1134 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їque°
, 
√xt
);

1135 
їque°
->
evcЏ
 = 
NULL
;

1138 
їque°
->
	`cb
‘eque°,Дeque°->
cb_ђg
);

1139 
	`evhЙp_їque°_дУ
(
їque°
);

1141 
	}
}

1144 
	$evhЙp_Фr№_cb
(
bufгїvТt
 *
buгv
, 
wh©
, *
ђg
)

1146 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

1147 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

1149 
evcЏ
->
°©e
) {

1150 
EVCON_CONNECTING
:

1151 iа(
wh©
 =р
BEV_EVENT_TIMEOUT
) {

1152 
	`evТt_debug
(("%s: connectionБimeout for \"%s:%d\" on %d",

1153 
__func__
, 
evcЏ
->
addїss
,ГvcЏ->
p№t
,

1154 
evcЏ
->
fd
));

1155 
	`evhЙp_cЏ√щiЏ_cb_юЧnup
(
evcЏ
);

1160 
EVCON_READING_BODY
:

1161 iа(!
їq
->
chunked
 &&Дeq->
Ѕ№Чd
 < 0

1162 && 
wh©
 =р(
BEV_EVENT_READING
|
BEV_EVENT_EOF
)) {

1164 
	`evhЙp_cЏ√щiЏ_dЏe
(
evcЏ
);

1169 
EVCON_DISCONNECTED
:

1170 
EVCON_IDLE
:

1171 
EVCON_READING_FIRSTLINE
:

1172 
EVCON_READING_HEADERS
:

1173 
EVCON_READING_TRAILER
:

1174 
EVCON_WRITING
:

1182 iа(
evcЏ
->
жags
 & 
EVHTTP_CON_CLOSEDETECT
) {

1183 
evcЏ
->
жags
 &р~
EVHTTP_CON_CLOSEDETECT
;

1184 
	`EVUTIL_ASSERT
(
evcЏ
->
hЙp_£rvФ
 =р
NULL
);

1189 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_IDLE
);

1190 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

1195 
	`evhЙp_cЏ√щiЏ_зЮ_code
(
evcЏ
, 
wh©
);

1207 
	}
}

1213 
	$evhЙp_cЏ√щiЏ_cb
(
bufгїvТt
 *
buгv
, 
wh©
, *
ђg
)

1215 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

1216 
Фr№
;

1217 
ev_sockЋn_t
 
Фrsz
 = (
Фr№
);

1219 iа(!(
wh©
 & 
BEV_EVENT_CONNECTED
)) {

1224 #iвdeа
WIN32


1225 iа(
ФЇo
 =р
ECONNREFUSED
)

1226 
юЧnup
;

1228 
	`evhЙp_Фr№_cb
(
buгv
, 
wh©
, 
ђg
);

1233 iа(
	`gСsockЁt
(
evcЏ
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
Фr№
,

1234 &
Фrsz
) == -1) {

1235 
	`evТt_debug
(("%s: getsockopt for \"%s:%d\" on %d",

1236 
__func__
, 
evcЏ
->
addїss
,ГvcЏ->
p№t
,ГvcЏ->
fd
));

1237 
юЧnup
;

1240 iа(
Фr№
) {

1241 
	`evТt_debug
(("%s: connect failed for \"%s:%d\" on %d: %s",

1242 
__func__
, 
evcЏ
->
addїss
,ГvcЏ->
p№t
,ГvcЏ->
fd
,

1243 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr№
)));

1244 
юЧnup
;

1248 
	`evТt_debug
(("%s: connectedБo \"%s:%d\" on %d\n",

1249 
__func__
, 
evcЏ
->
addїss
,ГvcЏ->
p№t
,ГvcЏ->
fd
));

1251 iа(
evcЏ
->
cЏncb
)

1252 
evcЏ
->
	`cЏncb
”vcЏ,ГvcЏ->
cЏncb_ђg
);

1255 
evcЏ
->
їМy_ъt
 = 0;

1256 
evcЏ
->
°©e
 = 
EVCON_IDLE
;

1259 
	`bufгїvТt_£tcb
(
evcЏ
->
buгv
,

1260 
evhЙp_їad_cb
,

1261 
evhЙp_wrЩe_cb
,

1262 
evhЙp_Фr№_cb
,

1263 
evcЏ
);

1265 iа(
evcЏ
->
timeout
 == -1)

1266 
	`bufгїvТt_£Йimeout
(
evcЏ
->
buгv
,

1267 
HTTP_READ_TIMEOUT
, 
HTTP_WRITE_TIMEOUT
);

1269 
timevЃ
 
tv
;

1270 
tv
.
tv_£c
 = 
evcЏ
->
timeout
;

1271 
tv
.
tv_u£c
 = 0;

1272 
	`bufгїvТt_£t_timeouts
(
evcЏ
->
buгv
, &
tv
, &tv);

1276 
	`evhЙp_їque°_di•©ch
(
evcЏ
);

1279 
юЧnup
:

1280 
	`evhЙp_cЏ√щiЏ_cb_юЧnup
(
evcЏ
);

1281 
	}
}

1288 
	$evhЙp_vЃid_ї•Џ£_code
(
code
)

1290 iа(
code
 == 0)

1294 
	}
}

1299 
	$evhЙp_Јr£_ї•Џ£_lЪe
(
evhЙp_їque°
 *
їq
, *
lЪe
)

1301 *
іўocё
;

1302 *
numbФ
;

1303 *
їadabЋ
;

1305 
іўocё
 = 
	`°r£p
(&
lЪe
, " ");

1306 iа(
lЪe
 =р
NULL
)

1308 
numbФ
 = 
	`°r£p
(&
lЪe
, " ");

1309 iа(
lЪe
 =р
NULL
)

1311 
їadabЋ
 = 
lЪe
;

1313 iа(
	`°rcmp
(
іўocё
, "HTTP/1.0") == 0) {

1314 
їq
->
maj№
 = 1;

1315 
їq
->
mЪ№
 = 0;

1316 } iа(
	`°rcmp
(
іўocё
, "HTTP/1.1") == 0) {

1317 
їq
->
maj№
 = 1;

1318 
їq
->
mЪ№
 = 1;

1320 
	`evТt_debug
(("%s: badЕrotocol \"%s\"",

1321 
__func__
, 
іўocё
));

1325 
їq
->
ї•Џ£_code
 = 
	`©oi
(
numbФ
);

1326 iа(!
	`evhЙp_vЃid_ї•Џ£_code
(
їq
->
ї•Џ£_code
)) {

1327 
	`evТt_debug
(("%s: badДesponse code \"%s\"",

1328 
__func__
, 
numbФ
));

1332 iа((
їq
->
ї•Џ£_code_lЪe
 = 
	`mm_°rdup
(
їadabЋ
)и=р
NULL
) {

1333 
	`evТt_wђn
("%s: sМdup", 
__func__
);

1338 
	}
}

1343 
	$evhЙp_Јr£_їque°_lЪe
(
evhЙp_їque°
 *
їq
, *
lЪe
)

1345 *
mСhod
;

1346 *
uri
;

1347 *
vФsiЏ
;

1350 
mСhod
 = 
	`°r£p
(&
lЪe
, " ");

1351 iа(
lЪe
 =р
NULL
)

1353 
uri
 = 
	`°r£p
(&
lЪe
, " ");

1354 iа(
lЪe
 =р
NULL
)

1356 
vФsiЏ
 = 
	`°r£p
(&
lЪe
, " ");

1357 iа(
lЪe
 !р
NULL
)

1361 iа(
	`°rcmp
(
mСhod
, "GET") == 0) {

1362 
їq
->
ty≥
 = 
EVHTTP_REQ_GET
;

1363 } iа(
	`°rcmp
(
mСhod
, "POST") == 0) {

1364 
їq
->
ty≥
 = 
EVHTTP_REQ_POST
;

1365 } iа(
	`°rcmp
(
mСhod
, "HEAD") == 0) {

1366 
їq
->
ty≥
 = 
EVHTTP_REQ_HEAD
;

1367 } iа(
	`°rcmp
(
mСhod
, "PUT") == 0) {

1368 
їq
->
ty≥
 = 
EVHTTP_REQ_PUT
;

1369 } iа(
	`°rcmp
(
mСhod
, "DELETE") == 0) {

1370 
їq
->
ty≥
 = 
EVHTTP_REQ_DELETE
;

1372 
	`evТt_debug
(("%s: bad method %s onДequest %p from %s",

1373 
__func__
, 
mСhod
, 
їq
,Дeq->
їmўe_ho°
));

1377 iа(
	`°rcmp
(
vФsiЏ
, "HTTP/1.0") == 0) {

1378 
їq
->
maj№
 = 1;

1379 
їq
->
mЪ№
 = 0;

1380 } iа(
	`°rcmp
(
vФsiЏ
, "HTTP/1.1") == 0) {

1381 
їq
->
maj№
 = 1;

1382 
їq
->
mЪ№
 = 1;

1384 
	`evТt_debug
(("%s: bad version %s onДequest %p from %s",

1385 
__func__
, 
vФsiЏ
, 
їq
,Дeq->
їmўe_ho°
));

1389 iа((
їq
->
uri
 = 
	`mm_°rdup
(uri)и=р
NULL
) {

1390 
	`evТt_debug
(("%s: mm_°rdup", 
__func__
));

1395 iа(
	`°ЊТ
(
їq
->
uri
) > 0 &&Дeq->uri[0] != '/')

1396 
їq
->
жags
 |р
EVHTTP_PROXY_REQUEST
;

1399 
	}
}

1402 
	$evhЙp_fЪd_hЧdФ
(cЏ° 
evkeyvЃq
 *
hЧdФs
, cЏ° *
key
)

1404 
evkeyvЃ
 *
hЧdФ
;

1406 
	`TAILQ_FOREACH
(
hЧdФ
, 
hЧdФs
, 
√xt
) {

1407 iа(
	`evutЮ_ascii_°r€£cmp
(
hЧdФ
->
key
, key) == 0)

1408  (
hЧdФ
->
vЃue
);

1411  (
NULL
);

1412 
	}
}

1415 
	$evhЙp_юЧr_hЧdФs
(
evkeyvЃq
 *
hЧdФs
)

1417 
evkeyvЃ
 *
hЧdФ
;

1419 
hЧdФ
 = 
	`TAILQ_FIRST
(
hЧdФs
);

1420 
hЧdФ
 !р
NULL
;

1421 
hЧdФ
 = 
	`TAILQ_FIRST
(
hЧdФs
)) {

1422 
	`TAILQ_REMOVE
(
hЧdФs
, 
hЧdФ
, 
√xt
);

1423 
	`mm_дУ
(
hЧdФ
->
key
);

1424 
	`mm_дУ
(
hЧdФ
->
vЃue
);

1425 
	`mm_дУ
(
hЧdФ
);

1427 
	}
}

1435 
	$evhЙp_їmove_hЧdФ
(
evkeyvЃq
 *
hЧdФs
, cЏ° *
key
)

1437 
evkeyvЃ
 *
hЧdФ
;

1439 
	`TAILQ_FOREACH
(
hЧdФ
, 
hЧdФs
, 
√xt
) {

1440 iа(
	`evutЮ_ascii_°r€£cmp
(
hЧdФ
->
key
, key) == 0)

1444 iа(
hЧdФ
 =р
NULL
)

1448 
	`TAILQ_REMOVE
(
hЧdФs
, 
hЧdФ
, 
√xt
);

1449 
	`mm_дУ
(
hЧdФ
->
key
);

1450 
	`mm_дУ
(
hЧdФ
->
vЃue
);

1451 
	`mm_дУ
(
hЧdФ
);

1454 
	}
}

1457 
	$evhЙp_hЧdФ_is_vЃid_vЃue
(cЏ° *
vЃue
)

1459 cЏ° *
p
 = 
vЃue
;

1461 (
p
 = 
	`°љbrk
’, "\r\n")и!р
NULL
) {

1463 
p
 +р
	`°r•n
(p, "\r\n");

1465 iа(*
p
 != ' ' && *p != '\t')

1469 
	}
}

1472 
	$evhЙp_add_hЧdФ
(
evkeyvЃq
 *
hЧdФs
,

1473 cЏ° *
key
, cЏ° *
vЃue
)

1475 
	`evТt_debug
(("%s: key: %†vЃ: %s\n", 
__func__
, 
key
, 
vЃue
));

1477 iа(
	`°rchr
(
key
, '\r'и!р
NULL
 || strchr(key, '\n') != NULL) {

1479 
	`evТt_debug
(("%s: drЁpЪg iќegЃ hЧdФ key\n", 
__func__
));

1483 iа(!
	`evhЙp_hЧdФ_is_vЃid_vЃue
(
vЃue
)) {

1484 
	`evТt_debug
(("%s: drЁpЪg iќegЃ hЧdФ vЃue\n", 
__func__
));

1488  (
	`evhЙp_add_hЧdФ_ЪЛЇЃ
(
hЧdФs
, 
key
, 
vЃue
));

1489 
	}
}

1492 
	$evhЙp_add_hЧdФ_ЪЛЇЃ
(
evkeyvЃq
 *
hЧdФs
,

1493 cЏ° *
key
, cЏ° *
vЃue
)

1495 
evkeyvЃ
 *
hЧdФ
 = 
	`mm_€ќoc
(1, (evkeyval));

1496 iа(
hЧdФ
 =р
NULL
) {

1497 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

1500 iа((
hЧdФ
->
key
 = 
	`mm_°rdup
(key)и=р
NULL
) {

1501 
	`mm_дУ
(
hЧdФ
);

1502 
	`evТt_wђn
("%s: sМdup", 
__func__
);

1505 iа((
hЧdФ
->
vЃue
 = 
	`mm_°rdup
(vЃue)и=р
NULL
) {

1506 
	`mm_дУ
(
hЧdФ
->
key
);

1507 
	`mm_дУ
(
hЧdФ
);

1508 
	`evТt_wђn
("%s: sМdup", 
__func__
);

1512 
	`TAILQ_INSERT_TAIL
(
hЧdФs
, 
hЧdФ
, 
√xt
);

1515 
	}
}

1527 
mesІge_їad_°©us


1528 
	$evhЙp_Јr£_fЬ°lЪe
(
evhЙp_їque°
 *
їq
, 
evbufгr
 *
bufгr
)

1530 *
lЪe
;

1531 
mesІge_їad_°©us
 
°©us
 = 
ALL_DATA_READ
;

1533 
size_t
 
lЪe_Ћngth
;

1535 
lЪe
 = 
	`evbufгr_їad 
(
bufгr
, &
lЪe_Ћngth
, 
EVBUFFER_EOL_CRLF
);

1536 iа(
lЪe
 =р
NULL
) {

1537 iа(
їq
->
evcЏ
 !р
NULL
 &&

1538 
	`evbufгr_gС_Ћngth
(
bufгr
и> 
їq
->
evcЏ
->
max_hЧdФs_size
)

1539  (
DATA_TOO_LONG
);

1541  (
MORE_DATA_EXPECTED
);

1544 iа(
їq
->
evcЏ
 !р
NULL
 &&

1545 
lЪe_Ћngth
 > 
їq
->
evcЏ
->
max_hЧdФs_size
) {

1546 
	`mm_дУ
(
lЪe
);

1547  (
DATA_TOO_LONG
);

1550 
їq
->
hЧdФs_size
 = 
lЪe_Ћngth
;

1552 
їq
->
kЪd
) {

1553 
EVHTTP_REQUEST
:

1554 iа(
	`evhЙp_Јr£_їque°_lЪe
(
їq
, 
lЪe
) == -1)

1555 
°©us
 = 
DATA_CORRUPTED
;

1557 
EVHTTP_RESPONSE
:

1558 iа(
	`evhЙp_Јr£_ї•Џ£_lЪe
(
їq
, 
lЪe
) == -1)

1559 
°©us
 = 
DATA_CORRUPTED
;

1562 
°©us
 = 
DATA_CORRUPTED
;

1565 
	`mm_дУ
(
lЪe
);

1566  (
°©us
);

1567 
	}
}

1570 
	$evhЙp_≠≥nd_to_ѕ°_hЧdФ
(
evkeyvЃq
 *
hЧdФs
, cЏ° *
lЪe
)

1572 
evkeyvЃ
 *
hЧdФ
 = 
	`TAILQ_LAST
(
hЧdФs
, 
evkeyvЃq
);

1573 *
√wvЃ
;

1574 
size_t
 
ёd_Ћn
, 
lЪe_Ћn
;

1576 iа(
hЧdФ
 =р
NULL
)

1579 
ёd_Ћn
 = 
	`°ЊТ
(
hЧdФ
->
vЃue
);

1580 
lЪe_Ћn
 = 
	`°ЊТ
(
lЪe
);

1582 
√wvЃ
 = 
	`mm_їЃloc
(
hЧdФ
->
vЃue
, 
ёd_Ћn
 + 
lЪe_Ћn
 + 1);

1583 iа(
√wvЃ
 =р
NULL
)

1586 
	`memэy
(
√wvЃ
 + 
ёd_Ћn
, 
lЪe
, 
lЪe_Ћn
 + 1);

1587 
hЧdФ
->
vЃue
 = 
√wvЃ
;

1590 
	}
}

1592 
mesІge_їad_°©us


1593 
	$evhЙp_Јr£_hЧdФs
(
evhЙp_їque°
 *
їq
, 
evbufгr
* 
bufгr
)

1595 
mesІge_їad_°©us
 
Фrcode
 = 
DATA_CORRUPTED
;

1596 *
lЪe
;

1597 
mesІge_їad_°©us
 
°©us
 = 
MORE_DATA_EXPECTED
;

1599 
evkeyvЃq
* 
hЧdФs
 = 
їq
->
Ъput_hЧdФs
;

1600 
size_t
 
lЪe_Ћngth
;

1601 (
lЪe
 = 
	`evbufгr_їad 
(
bufгr
, &
lЪe_Ћngth
, 
EVBUFFER_EOL_CRLF
))

1602 !р
NULL
) {

1603 *
skey
, *
svЃue
;

1605 
їq
->
hЧdФs_size
 +р
lЪe_Ћngth
;

1607 iа(
їq
->
evcЏ
 !р
NULL
 &&

1608 
їq
->
hЧdФs_size
 >Дeq->
evcЏ
->
max_hЧdФs_size
) {

1609 
Фrcode
 = 
DATA_TOO_LONG
;

1610 
Фr№
;

1613 iа(*
lЪe
 == '\0') {

1614 
°©us
 = 
ALL_DATA_READ
;

1615 
	`mm_дУ
(
lЪe
);

1620 iа(*
lЪe
 == ' ' || *line == '\t') {

1621 iа(
	`evhЙp_≠≥nd_to_ѕ°_hЧdФ
(
hЧdФs
, 
lЪe
) == -1)

1622 
Фr№
;

1623 
	`mm_дУ
(
lЪe
);

1628 
svЃue
 = 
lЪe
;

1629 
skey
 = 
	`°r£p
(&
svЃue
, ":");

1630 iа(
svЃue
 =р
NULL
)

1631 
Фr№
;

1633 
svЃue
 +р
	`°r•n
(svalue, " ");

1635 iа(
	`evhЙp_add_hЧdФ
(
hЧdФs
, 
skey
, 
svЃue
) == -1)

1636 
Фr№
;

1638 
	`mm_дУ
(
lЪe
);

1641 iа(
°©us
 =р
MORE_DATA_EXPECTED
) {

1642 iа(
їq
->
hЧdФs_size
 + 
	`evbufгr_gС_Ћngth
(
bufгr
и>Дeq->
evcЏ
->
max_hЧdФs_size
)

1643  (
DATA_TOO_LONG
);

1646  (
°©us
);

1648 
Фr№
:

1649 
	`mm_дУ
(
lЪe
);

1650  (
Фrcode
);

1651 
	}
}

1654 
	$evhЙp_gС_body_Ћngth
(
evhЙp_їque°
 *
їq
)

1656 
evkeyvЃq
 *
hЧdФs
 = 
їq
->
Ъput_hЧdФs
;

1657 cЏ° *
cЏЛЅ_Ћngth
;

1658 cЏ° *
cЏ√щiЏ
;

1660 
cЏЛЅ_Ћngth
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Content-Length");

1661 
cЏ√щiЏ
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, "Connection");

1663 iа(
cЏЛЅ_Ћngth
 =р
NULL
 && 
cЏ√щiЏ
 == NULL)

1664 
їq
->
Ѕ№Чd
 = -1;

1665 iа(
cЏЛЅ_Ћngth
 =р
NULL
 &&

1666 
	`evutЮ_ascii_°r€£cmp
(
cЏ√щiЏ
, "Close") != 0) {

1668 
	`evТt_wђnx
("%s: we gotВo contentЖength, butБhe "

1670 
__func__
, 
cЏ√щiЏ
);

1672 } iа(
cЏЛЅ_Ћngth
 =р
NULL
) {

1673 
їq
->
Ѕ№Чd
 = -1;

1675 *
Тdp
;

1676 
ev_Ъt64_t
 
Ѕ№Чd
 = 
	`evutЮ_°єёl
(
cЏЛЅ_Ћngth
, &
Тdp
, 10);

1677 iа(*
cЏЛЅ_Ћngth
 =р'\0' || *
Тdp
 !р'\0' || 
Ѕ№Чd
 < 0) {

1678 
	`evТt_debug
(("%s: illegal contentЖength: %s",

1679 
__func__
, 
cЏЛЅ_Ћngth
));

1682 
їq
->
Ѕ№Чd
 =Вtoread;

1685 
	`evТt_debug
(("%s: bytesБoДead: %ld (in buffer %ld)\n",

1686 
__func__
, ()
їq
->
Ѕ№Чd
,

1687 
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_Ъput
(
їq
->
evcЏ
->
buгv
))));

1690 
	}
}

1693 
	$evhЙp_gС_body
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, 
evhЙp_їque°
 *
їq
)

1695 cЏ° *
xгr_Тc
;

1698 iа(
їq
->
kЪd
 =р
EVHTTP_REQUEST
 &&

1699 (
їq
->
ty≥
 !р
EVHTTP_REQ_POST
 &&Дeq->ty≥ !р
EVHTTP_REQ_PUT
)) {

1700 
	`evhЙp_cЏ√щiЏ_dЏe
(
evcЏ
);

1703 
evcЏ
->
°©e
 = 
EVCON_READING_BODY
;

1704 
xгr_Тc
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Transfer-Encoding");

1705 iа(
xгr_Тc
 !р
NULL
 && 
	`evutЮ_ascii_°r€£cmp
(xfer_enc, "chunked") == 0) {

1706 
їq
->
chunked
 = 1;

1707 
їq
->
Ѕ№Чd
 = -1;

1709 iа(
	`evhЙp_gС_body_Ћngth
(
їq
) == -1) {

1710 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
,

1711 
EVCON_HTTP_INVALID_HEADER
);

1715 
	`evhЙp_їad_body
(
evcЏ
, 
їq
);

1717 
	}
}

1720 
	$evhЙp_їad_fЬ°lЪe
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1721 
evhЙp_їque°
 *
їq
)

1723 
mesІge_їad_°©us
 
їs
;

1725 
їs
 = 
	`evhЙp_Јr£_fЬ°lЪe
(
їq
, 
	`bufгїvТt_gС_Ъput
(
evcЏ
->
buгv
));

1726 iа(
їs
 =р
DATA_CORRUPTED
 ||Дe†=р
DATA_TOO_LONG
) {

1728 
	`evТt_debug
(("%s: bad headerЖines on %d\n",

1729 
__func__
, 
evcЏ
->
fd
));

1730 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
, 
EVCON_HTTP_INVALID_HEADER
);

1732 } iа(
їs
 =р
MORE_DATA_EXPECTED
) {

1737 
evcЏ
->
°©e
 = 
EVCON_READING_HEADERS
;

1738 
	`evhЙp_їad_hЧdФ
(
evcЏ
, 
їq
);

1739 
	}
}

1742 
	$evhЙp_їad_hЧdФ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1743 
evhЙp_їque°
 *
їq
)

1745 
mesІge_їad_°©us
 
їs
;

1746 
fd
 = 
evcЏ
->fd;

1748 
їs
 = 
	`evhЙp_Јr£_hЧdФs
(
їq
, 
	`bufгїvТt_gС_Ъput
(
evcЏ
->
buгv
));

1749 iа(
їs
 =р
DATA_CORRUPTED
 ||Дe†=р
DATA_TOO_LONG
) {

1751 
	`evТt_debug
(("%s: bad hЧdФЖЪe†Џ %d\n", 
__func__
, 
fd
));

1752 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
, 
EVCON_HTTP_INVALID_HEADER
);

1754 } iа(
їs
 =р
MORE_DATA_EXPECTED
) {

1760 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_READ
);

1763 
їq
->
kЪd
) {

1764 
EVHTTP_REQUEST
:

1765 
	`evТt_debug
(("%s: checking forЕost data on %d\n",

1766 
__func__
, 
fd
));

1767 
	`evhЙp_gС_body
(
evcЏ
, 
їq
);

1771 
EVHTTP_RESPONSE
:

1772 iа(!
	`evhЙp_ї•Џ£_√eds_body
(
їq
)) {

1773 
	`evТt_debug
(("%s: skipping body for code %d\n",

1774 
__func__
, 
їq
->
ї•Џ£_code
));

1775 
	`evhЙp_cЏ√щiЏ_dЏe
(
evcЏ
);

1777 
	`evТt_debug
(("%s: start ofДead body for %s on %d\n",

1778 
__func__
, 
їq
->
їmўe_ho°
, 
fd
));

1779 
	`evhЙp_gС_body
(
evcЏ
, 
їq
);

1786 
	`evТt_wђnx
("%s: bad hЧdФ oј%d", 
__func__
, 
fd
);

1787 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
, 
EVCON_HTTP_INVALID_HEADER
);

1791 
	}
}

1803 
evhЙp_cЏ√щiЏ
 *

1804 
	$evhЙp_cЏ√щiЏ_√w
(cЏ° *
addїss
, 
p№t
)

1806  (
	`evhЙp_cЏ√щiЏ_ba£_√w
(
NULL
, NULL, 
addїss
, 
p№t
));

1807 
	}
}

1809 
evhЙp_cЏ√щiЏ
 *

1810 
	$evhЙp_cЏ√щiЏ_ba£_√w
(
evТt_ba£
 *
ba£
, 
evdns_ba£
 *
dnsba£
,

1811 cЏ° *
addїss
, 
p№t
)

1813 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1815 
	`evТt_debug
(("AЙem±Ъg cЏ√щiЏБЎ%s:%d\n", 
addїss
, 
p№t
));

1817 iа((
evcЏ
 = 
	`mm_€ќoc
(1, (
evhЙp_cЏ√щiЏ
))и=р
NULL
) {

1818 
	`evТt_wђn
("%s: cЃloшзЮed", 
__func__
);

1819 
Фr№
;

1822 
evcЏ
->
fd
 = -1;

1823 
evcЏ
->
p№t
 =Еort;

1825 
evcЏ
->
max_hЧdФs_size
 = 
EV_SIZE_MAX
;

1826 
evcЏ
->
max_body_size
 = 
EV_SIZE_MAX
;

1828 
evcЏ
->
timeout
 = -1;

1829 
evcЏ
->
їМy_ъt
 =ГvcЏ->
їМy_max
 = 0;

1831 
evcЏ
->
cЏncb
 = 
NULL
;

1832 
evcЏ
->
cЏncb_ђg
 = 
NULL
;

1834 iа((
evcЏ
->
addїss
 = 
	`mm_°rdup
„ddїss)и=р
NULL
) {

1835 
	`evТt_wђn
("%s: sМdu∞зЮed", 
__func__
);

1836 
Фr№
;

1839 iа((
evcЏ
->
buгv
 = 
	`bufгїvТt_√w
(-1,

1840 
evhЙp_їad_cb
,

1841 
evhЙp_wrЩe_cb
,

1842 
evhЙp_Фr№_cb
, 
evcЏ
)и=р
NULL
) {

1843 
	`evТt_wђn
("%s: bufгїvТt_√w faЮed", 
__func__
);

1844 
Фr№
;

1847 
evcЏ
->
°©e
 = 
EVCON_DISCONNECTED
;

1848 
	`TAILQ_INIT
(&
evcЏ
->
їque°s
);

1850 iа(
ba£
 !р
NULL
) {

1851 
evcЏ
->
ba£
 = base;

1852 
	`bufгїvТt_ba£_£t
(
ba£
, 
evcЏ
->
buгv
);

1855 
evcЏ
->
dns_ba£
 = 
dnsba£
;

1857  (
evcЏ
);

1859 
Фr№
:

1860 iа(
evcЏ
 !р
NULL
)

1861 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1862  (
NULL
);

1863 
	}
}

1866 
	$evhЙp_cЏ√щiЏ_£t_ba£
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1867 
evТt_ba£
 *
ba£
)

1869 
	`EVUTIL_ASSERT
(
evcЏ
->
ba£
 =р
NULL
);

1870 
	`EVUTIL_ASSERT
(
evcЏ
->
°©e
 =р
EVCON_DISCONNECTED
);

1871 
evcЏ
->
ba£
 = base;

1872 
	`bufгїvТt_ba£_£t
(
ba£
, 
evcЏ
->
buгv
);

1873 
	}
}

1876 
evhЙp_cЏ√щiЏ_£t_cЏncb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1877 (*
cЏncb
)(
evhЙp_cЏ√щiЏ
 *, *), * 
cЏncb_ђg
)

1879 
evcЏ
->
cЏncb
 = conncb;

1880 
evcЏ
->
cЏncb_ђg
 = conncb_arg;

1881 
	}
}

1884 
	$evhЙp_cЏ√щiЏ_£t_timeout
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1885 
timeout_Ъ_£cs
)

1887 
evcЏ
->
timeout
 = 
timeout_Ъ_£cs
;

1889 iа(
evcЏ
->
timeout
 == -1)

1890 
	`bufгїvТt_£Йimeout
(
evcЏ
->
buгv
,

1891 
HTTP_READ_TIMEOUT
, 
HTTP_WRITE_TIMEOUT
);

1893 
	`bufгїvТt_£Йimeout
(
evcЏ
->
buгv
,

1894 
evcЏ
->
timeout
,Гvcon->timeout);

1895 
	}
}

1898 
	$evhЙp_cЏ√щiЏ_£t_їМЫs
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1899 
їМy_max
)

1901 
evcЏ
->
їМy_max
 =Дetry_max;

1902 
	}
}

1905 
evhЙp_cЏ√щiЏ_£t_юo£cb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1906 (*
cb
)(
evhЙp_cЏ√щiЏ
 *, *), *
cbђg
)

1908 
evcЏ
->
юo£cb
 = 
cb
;

1909 
evcЏ
->
юo£cb_ђg
 = 
cbђg
;

1910 
	}
}

1913 
	$evhЙp_cЏ√щiЏ_gС_≥Ф
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1914 **
addїss
, 
ev_uЪt16_t
 *
p№t
)

1916 *
addїss
 = 
evcЏ
->address;

1917 *
p№t
 = 
evcЏ
->port;

1918 
	}
}

1921 
	$evhЙp_cЏ√щiЏ_cЏ√щ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

1923 iа(
evcЏ
->
°©e
 =р
EVCON_CONNECTING
)

1926 
	`evhЙp_cЏ√щiЏ_ї£t
(
evcЏ
);

1928 
	`EVUTIL_ASSERT
(!(
evcЏ
->
жags
 & 
EVHTTP_CON_INCOMING
));

1929 
evcЏ
->
жags
 |р
EVHTTP_CON_OUTGOING
;

1931 
evcЏ
->
fd
 = 
	`bЪd_sockС
(

1932 
evcЏ
->
bЪd_addїss
,ГvcЏ->
bЪd_p№t
, 0 );

1933 iа(
evcЏ
->
fd
 == -1) {

1934 
	`evТt_debug
(("%s: failedБo bindБo \"%s\"",

1935 
__func__
, 
evcЏ
->
bЪd_addїss
));

1940 
	`bufгїvТt_£tfd
(
evcЏ
->
buгv
,ГvcЏ->
fd
);

1941 
	`bufгїvТt_£tcb
(
evcЏ
->
buгv
,

1942 
NULL
 ,

1943 
NULL
 ,

1944 
evhЙp_cЏ√щiЏ_cb
,

1945 
evcЏ
);

1946 
	`bufгїvТt_£Йimeout
(
evcЏ
->
buгv
, 0,

1947 
evcЏ
->
timeout
 !р-1 ?ГvcЏ->timeouИ: 
HTTP_CONNECT_TIMEOUT
);

1949 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_WRITE
);

1951 iа(
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
evcЏ
->
buгv
,ГvcЏ->
dns_ba£
,

1952 
AF_UNSPEC
, 
evcЏ
->
addїss
,ГvcЏ->
p№t
) < 0) {

1953 
	`evТt_sock_wђn
(
evcЏ
->
fd
, "%s: connectionБo \"%s\" failed",

1954 
__func__
, 
evcЏ
->
addїss
);

1959 
	`evhЙp_cЏ√щiЏ_cb_юЧnup
(
evcЏ
);

1963 
evcЏ
->
°©e
 = 
EVCON_CONNECTING
;

1966 
	}
}

1975 
	$evhЙp_make_їque°
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

1976 
evhЙp_їque°
 *
їq
,

1977 
evhЙp_cmd_ty≥
 
ty≥
, cЏ° *
uri
)

1980 
їq
->
kЪd
 = 
EVHTTP_REQUEST
;

1981 
їq
->
ty≥
 =Бype;

1982 iа(
їq
->
uri
 !р
NULL
)

1983 
	`mm_дУ
(
їq
->
uri
);

1984 iа((
їq
->
uri
 = 
	`mm_°rdup
(uri)и=р
NULL
) {

1985 
	`evТt_wђn
("%s: sМdup", 
__func__
);

1986 
	`evhЙp_їque°_дУ
(
їq
);

1991 iа(!
їq
->
maj№
 && !їq->
mЪ№
) {

1992 
їq
->
maj№
 = 1;

1993 
їq
->
mЪ№
 = 1;

1996 
	`EVUTIL_ASSERT
(
їq
->
evcЏ
 =р
NULL
);

1997 
їq
->
evcЏ
 =Гvcon;

1998 
	`EVUTIL_ASSERT
(!(
їq
->
жags
 & 
EVHTTP_REQ_OWN_CONNECTION
));

2000 
	`TAILQ_INSERT_TAIL
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

2003 iа(!
	`evhЙp_cЏ√щed
(
evcЏ
))

2004  (
	`evhЙp_cЏ√щiЏ_cЏ√щ
(
evcЏ
));

2011 iа(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и=р
їq
)

2012 
	`evhЙp_їque°_di•©ch
(
evcЏ
);

2015 
	}
}

2018 
	$evhЙp_€nыl_їque°
(
evhЙp_їque°
 *
їq
)

2020 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
їq
->evcon;

2021 iа(
evcЏ
 !р
NULL
) {

2023 iа(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и=р
їq
) {

2027 
	`evhЙp_cЏ√щiЏ_зЮ
(
evcЏ
,

2028 
EVCON_HTTP_REQUEST_CANCEL
);

2036 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

2040 
	`evhЙp_їque°_дУ
(
їq
);

2041 
	}
}

2049 
	$evhЙp_°ђt_їad
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

2052 
	`bufгїvТt_diІbЋ
(
evcЏ
->
buгv
, 
EV_WRITE
);

2053 
	`bufгїvТt_ТabЋ
(
evcЏ
->
buгv
, 
EV_READ
);

2054 
evcЏ
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

2055 
	}
}

2058 
	$evhЙp_£nd_dЏe
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, *
ђg
)

2060 
√ed_юo£
;

2061 
evhЙp_їque°
 *
їq
 = 
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
);

2062 
	`TAILQ_REMOVE
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

2064 
√ed_юo£
 =

2065 (
їq
->
mЪ№
 == 0 &&

2066 !
	`evhЙp_is_cЏ√щiЏ_kУЈlive
(
їq
->
Ъput_hЧdФs
))||

2067 
	`evhЙp_is_cЏ√щiЏ_юo£
(
їq
->
жags
,Дeq->
Ъput_hЧdФs
) ||

2068 
	`evhЙp_is_cЏ√щiЏ_юo£
(
їq
->
жags
,Дeq->
ouНut_hЧdФs
);

2070 
	`EVUTIL_ASSERT
(
їq
->
жags
 & 
EVHTTP_REQ_OWN_CONNECTION
);

2071 
	`evhЙp_їque°_дУ
(
їq
);

2073 iа(
√ed_юo£
) {

2074 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2079 iа(
	`evhЙp_assocЯЛ_√w_їque°_wЩh_cЏ√щiЏ
(
evcЏ
) == -1) {

2080 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2082 
	}
}

2089 
	$evhЙp_£nd_Фr№
(
evhЙp_їque°
 *
їq
, 
Фr№
, cЏ° *
їasЏ
)

2091 
	#ERR_FORMAT
 "<HTML><HEAD>\n" \

2096 "</BODY></HTML>\n"

	)

2098 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

2099 iа(
buf
 =р
NULL
) {

2101 
	`evhЙp_cЏ√щiЏ_дУ
(
їq
->
evcЏ
);

2106 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection", "close");

2108 
	`evhЙp_ї•Џ£_code
(
їq
, 
Фr№
, 
їasЏ
);

2110 
	`evbufгr_add_іЪtf
(
buf
, 
ERR_FORMAT
, 
Фr№
, 
їasЏ
);

2112 
	`evhЙp_£nd_Јge
(
їq
, 
buf
);

2114 
	`evbufгr_дУ
(
buf
);

2115 #undeа
ERR_FORMAT


2116 
	}
}

2120 
ЪlЪe
 

2121 
	$evhЙp_£nd
(
evhЙp_їque°
 *
їq
, 
evbufгr
 *
d©abuf
)

2123 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
їq
->evcon;

2125 iа(
evcЏ
 =р
NULL
) {

2126 
	`evhЙp_їque°_дУ
(
їq
);

2130 
	`EVUTIL_ASSERT
(
	`TAILQ_FIRST
(&
evcЏ
->
їque°s
и=р
їq
);

2133 
їq
->
u£rdЏe
 = 1;

2136 iа(
d©abuf
 !р
NULL
)

2137 
	`evbufгr_add_bufгr
(
їq
->
ouНut_bufгr
, 
d©abuf
);

2140 
	`evhЙp_make_hЧdФ
(
evcЏ
, 
їq
);

2142 
	`evhЙp_wrЩe_bufгr
(
evcЏ
, 
evhЙp_£nd_dЏe
, 
NULL
);

2143 
	}
}

2146 
	$evhЙp_£nd_їґy
(
evhЙp_їque°
 *
їq
, 
code
, cЏ° *
їasЏ
,

2147 
evbufгr
 *
d©abuf
)

2149 
	`evhЙp_ї•Џ£_code
(
їq
, 
code
, 
їasЏ
);

2151 
	`evhЙp_£nd
(
їq
, 
d©abuf
);

2152 
	}
}

2155 
	$evhЙp_£nd_їґy_°ђt
(
evhЙp_їque°
 *
їq
, 
code
,

2156 cЏ° *
їasЏ
)

2158 
	`evhЙp_ї•Џ£_code
(
їq
, 
code
, 
їasЏ
);

2159 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
ouНut_hЧdФs
, "CЏЛЅ-LТgth"и=р
NULL
 &&

2160 
їq
->
maj№
 =р1 &&Дeq->
mЪ№
 == 1 &&

2161 
	`evhЙp_ї•Џ£_√eds_body
(
їq
)) {

2167 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Transfer-Encoding",

2169 
їq
->
chunked
 = 1;

2171 
	`evhЙp_make_hЧdФ
(
їq
->
evcЏ
,Дeq);

2172 
	`evhЙp_wrЩe_bufгr
(
їq
->
evcЏ
, 
NULL
, NULL);

2173 
	}
}

2176 
	$evhЙp_£nd_їґy_chunk
(
evhЙp_їque°
 *
їq
, 
evbufгr
 *
d©abuf
)

2178 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
їq
->evcon;

2179 
evbufгr
 *
ouНut
;

2181 iа(
evcЏ
 =р
NULL
)

2184 
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
);

2186 iа(
	`evbufгr_gС_Ћngth
(
d©abuf
) == 0)

2188 iа(!
	`evhЙp_ї•Џ£_√eds_body
(
їq
))

2190 iа(
їq
->
chunked
) {

2191 
	`evbufгr_add_іЪtf
(
ouНut
, "%x\r\n",

2192 ()
	`evbufгr_gС_Ћngth
(
d©abuf
));

2194 
	`evbufгr_add_bufгr
(
ouНut
, 
d©abuf
);

2195 iа(
їq
->
chunked
) {

2196 
	`evbufгr_add
(
ouНut
, "\r\n", 2);

2198 
	`evhЙp_wrЩe_bufгr
(
evcЏ
, 
NULL
, NULL);

2199 
	}
}

2202 
	$evhЙp_£nd_їґy_Тd
(
evhЙp_їque°
 *
їq
)

2204 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
їq
->evcon;

2205 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
evcЏ
->
buгv
);

2207 iа(
evcЏ
 =р
NULL
) {

2208 
	`evhЙp_їque°_дУ
(
їq
);

2213 
їq
->
u£rdЏe
 = 1;

2215 iа(
їq
->
chunked
) {

2216 
	`evbufгr_add
(
ouНut
, "0\r\n\r\n", 5);

2217 
	`evhЙp_wrЩe_bufгr
(
їq
->
evcЏ
, 
evhЙp_£nd_dЏe
, 
NULL
);

2218 
їq
->
chunked
 = 0;

2219 } iа(
	`evbufгr_gС_Ћngth
(
ouНut
) == 0) {

2221 
	`evhЙp_£nd_dЏe
(
evcЏ
, 
NULL
);

2224 
evcЏ
->
cb
 = 
evhЙp_£nd_dЏe
;

2225 
evcЏ
->
cb_ђg
 = 
NULL
;

2227 
	}
}

2230 
	$evhЙp_ї•Џ£_code
(
evhЙp_їque°
 *
їq
, 
code
, cЏ° *
їasЏ
)

2232 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

2233 
їq
->
ї•Џ£_code
 = 
code
;

2234 iа(
їq
->
ї•Џ£_code_lЪe
 !р
NULL
)

2235 
	`mm_дУ
(
їq
->
ї•Џ£_code_lЪe
);

2236 
їq
->
ї•Џ£_code_lЪe
 = 
	`mm_°rdup
(
їasЏ
);

2237 
	}
}

2240 
	$evhЙp_£nd_Јge
(
evhЙp_їque°
 *
їq
, 
evbufгr
 *
d©abuf
)

2242 iа(!
їq
->
maj№
 || !їq->
mЪ№
) {

2243 
їq
->
maj№
 = 1;

2244 
їq
->
mЪ№
 = 1;

2247 iа(
їq
->
kЪd
 !р
EVHTTP_RESPONSE
)

2248 
	`evhЙp_ї•Џ£_code
(
їq
, 200, "OK");

2250 
	`evhЙp_юЧr_hЧdФs
(
їq
->
ouНut_hЧdФs
);

2251 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Content-Type", "text/html");

2252 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection", "close");

2254 
	`evhЙp_£nd
(
їq
, 
d©abuf
);

2255 
	}
}

2257 cЏ° 
	guri_chђs
[256] = {

2284 
	$evhЙp_Тcode_uri
(cЏ° *
uri
)

2286 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

2287 *
p
;

2289 iа(
buf
 =р
NULL
)

2290  (
NULL
);

2292 
p
 = (*)
uri
; *p != '\0';Е++) {

2293 iа(
uri_chђs
[()(*
p
)]) {

2294 
	`evbufгr_add
(
buf
, 
p
, 1);

2296 
	`evbufгr_add_іЪtf
(
buf
, "%%%02X", ()(*
p
));

2299 
	`evbufгr_add
(
buf
, "", 1);

2300 
p
 = 
	`mm_°rdup
((*)
	`evbufгr_puќup
(
buf
, -1));

2301 
	`evbufгr_дУ
(
buf
);

2303  (
p
);

2304 
	}
}

2311 
	$evhЙp_decode_uri_ЪЛЇЃ
(

2312 cЏ° *
uri
, 
size_t
 
Ћngth
, *
їt
, 
Ѓways_decode_ґus
)

2314 
c
;

2315 
j
, 
Ъ_quФy
 = 
Ѓways_decode_ґus
;

2316 
i
;

2318 
i
 = 
j
 = 0; i < 
Ћngth
; i++) {

2319 
c
 = 
uri
[
i
];

2320 iа(
c
 == '?') {

2321 
Ъ_quФy
 = 1;

2322 } iа(
c
 =р'+' && 
Ъ_quФy
) {

2323 
c
 = ' ';

2324 } iа(
c
 =р'%' && 
	`EVUTIL_ISXDIGIT
(
uri
[
i
+1]) &&

2325 
	`EVUTIL_ISXDIGIT
(
uri
[
i
+2])) {

2326 
tmp
[3];

2327 
tmp
[0] = 
uri
[
i
+1];

2328 
tmp
[1] = 
uri
[
i
+2];

2329 
tmp
[2] = '\0';

2330 
c
 = ()
	`°єё
(
tmp
, 
NULL
, 16);

2331 
i
 += 2;

2333 
їt
[
j
++] = 
c
;

2335 
їt
[
j
] = '\0';

2337  (
j
);

2338 
	}
}

2341 
	$evhЙp_decode_uri
(cЏ° *
uri
)

2343 *
їt
;

2345 iа((
їt
 = 
	`mm_mЃloc
(
	`°ЊТ
(
uri
и+ 1)и=р
NULL
) {

2346 
	`evТt_wђn
("%s: mЃloc(%lu)", 
__func__
,

2347 ()(
	`°ЊТ
(
uri
) + 1));

2348  (
NULL
);

2351 
	`evhЙp_decode_uri_ЪЛЇЃ
(
uri
, 
	`°ЊТ
(uri),

2352 
їt
, 0 );

2354  (
їt
);

2355 
	}
}

2363 
	$evhЙp_Јr£_quФy
(cЏ° *
uri
, 
evkeyvЃq
 *
hЧdФs
)

2365 *
lЪe
;

2366 *
ђgumТt
;

2367 *
p
;

2369 
	`TAILQ_INIT
(
hЧdФs
);

2372 iа(
	`°rchr
(
uri
, '?'и=р
NULL
)

2375 iа((
lЪe
 = 
	`mm_°rdup
(
uri
)и=р
NULL
) {

2377 
	`evТt_wђn
("%s: sМdup", 
__func__
);

2382 
ђgumТt
 = 
lЪe
;

2385 
	`°r£p
(&
ђgumТt
, "?");

2387 
p
 = 
ђgumТt
;

2388 
p
 !р
NULL
 && *p != '\0') {

2389 *
key
, *
vЃue
, *
decoded_vЃue
;

2390 
ђgumТt
 = 
	`°r£p
(&
p
, "&");

2392 
vЃue
 = 
ђgumТt
;

2393 
key
 = 
	`°r£p
(&
vЃue
, "=");

2394 iа(
vЃue
 =р
NULL
)

2395 
Фr№
;

2397 iа((
decoded_vЃue
 = 
	`mm_mЃloc
(
	`°ЊТ
(
vЃue
и+ 1)и=р
NULL
) {

2399 
	`evТt_wђn
("%s: mm_mЃloc", 
__func__
);

2402 
	`evhЙp_decode_uri_ЪЛЇЃ
(
vЃue
, 
	`°ЊТ
(value),

2403 
decoded_vЃue
, 1 );

2404 
	`evТt_debug
(("QuФy Pђam: %†-> %s\n", 
key
, 
decoded_vЃue
));

2405 
	`evhЙp_add_hЧdФ_ЪЛЇЃ
(
hЧdФs
, 
key
, 
decoded_vЃue
);

2406 
	`mm_дУ
(
decoded_vЃue
);

2409 
Фr№
:

2410 
	`mm_дУ
(
lЪe
);

2411 
	}
}

2413 
evhЙp_cb
 *

2414 
	$evhЙp_di•©ch_€ќback
(
hЙpcbq
 *
€ќbacks
, 
evhЙp_їque°
 *
їq
)

2416 
evhЙp_cb
 *
cb
;

2417 
size_t
 
off£t
 = 0;

2418 *
М™¶©ed
;

2421 *
p
 = 
їq
->
uri
;

2422 *
p
 != '\0' && *p != '?')

2423 ++
p
;

2424 
off£t
 = (
size_t
)(
p
 - 
їq
->
uri
);

2426 iа((
М™¶©ed
 = 
	`mm_mЃloc
(
off£t
 + 1)и=р
NULL
)

2427  (
NULL
);

2428 
off£t
 = 
	`evhЙp_decode_uri_ЪЛЇЃ
(
їq
->
uri
, offset,

2429 
М™¶©ed
, 0 );

2431 
	`TAILQ_FOREACH
(
cb
, 
€ќbacks
, 
√xt
) {

2432 
їs
 = 0;

2433 
їs
 = ((
	`°Їcmp
(
cb
->
wh©
, 
М™¶©ed
, 
off£t
) == 0) &&

2434 (
cb
->
wh©
[
off£t
] == '\0'));

2436 iа(
їs
) {

2437 
	`mm_дУ
(
М™¶©ed
);

2438  (
cb
);

2442 
	`mm_дУ
(
М™¶©ed
);

2443  (
NULL
);

2444 
	}
}

2448 
	$іefix_suffix_m©ch
(cЏ° *
ЈЙФn
, cЏ° *
«me
, 
ign№e€£
)

2450 
c
;

2453 
c
 = *
ЈЙФn
++) {

2455  *
«me
 == '\0';

2458 *
«me
 != '\0') {

2459 iа(
	`іefix_suffix_m©ch
(
ЈЙФn
, 
«me
,

2460 
ign№e€£
))

2462 ++
«me
;

2466 iа(
c
 !р*
«me
) {

2467 iа(!
ign№e€£
 ||

2468 
	`EVUTIL_TOLOWER
(
c
и!рEVUTIL_TOLOWER(*
«me
))

2471 ++
«me
;

2475 
	}
}

2478 
	$evhЙp_h™dЋ_їque°
(
evhЙp_їque°
 *
їq
, *
ђg
)

2480 
evhЙp
 *
hЙp
 = 
ђg
;

2481 
evhЙp_cb
 *
cb
 = 
NULL
;

2482 cЏ° *
ho°«me
;

2484 iа(
їq
->
uri
 =р
NULL
) {

2485 
	`evhЙp_£nd_Фr№
(
їq
, 
HTTP_BADREQUEST
, "Bad Request");

2490 
ho°«me
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Host");

2491 iа(
ho°«me
 !р
NULL
) {

2492 
evhЙp
 *
vho°
;

2493 
	`TAILQ_FOREACH
(
vho°
, &
hЙp
->
vЬtuЃho°s
, 
√xt
) {

2494 iа(
	`іefix_suffix_m©ch
(
vho°
->
vho°_ЈЙФn
, 
ho°«me
,

2496 
	`evhЙp_h™dЋ_їque°
(
їq
, 
vho°
);

2502 iа((
cb
 = 
	`evhЙp_di•©ch_€ќback
(&
hЙp
->
€ќbacks
, 
їq
)и!р
NULL
) {

2503 (*
cb
->cb)(
їq
, cb->
cbђg
);

2508 iа(
hЙp
->
gТcb
) {

2509 (*
hЙp
->
gТcb
)(
їq
, hЙp->
gТcbђg
);

2513 
	#ERR_FORMAT
 "<html><head>" \

2518 "</body></html>\n"

	)

2520 *
es€≥d_html
;

2521 
evbufгr
 *
buf
;

2523 iа((
es€≥d_html
 = 
	`evhЙp_htmЋs€≥
(
їq
->
uri
)и=р
NULL
) {

2524 
	`evhЙp_cЏ√щiЏ_дУ
(
їq
->
evcЏ
);

2528 iа((
buf
 = 
	`evbufгr_√w
()и=р
NULL
) {

2529 
	`mm_дУ
(
es€≥d_html
);

2530 
	`evhЙp_cЏ√щiЏ_дУ
(
їq
->
evcЏ
);

2534 
	`evhЙp_ї•Џ£_code
(
їq
, 
HTTP_NOTFOUND
, "Not Found");

2536 
	`evbufгr_add_іЪtf
(
buf
, 
ERR_FORMAT
, 
es€≥d_html
);

2538 
	`mm_дУ
(
es€≥d_html
);

2540 
	`evhЙp_£nd_Јge
(
їq
, 
buf
);

2542 
	`evbufгr_дУ
(
buf
);

2543 #undeа
ERR_FORMAT


2545 
	}
}

2548 
	$acы±_sockС_cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
nfd
, 
sockaddr
 *
≥Ф_І
, 
≥Ф_sockЋn
, *
ђg
)

2550 
evhЙp
 *
hЙp
 = 
ђg
;

2552 
	`evhЙp_gС_їque°
(
hЙp
, 
nfd
, 
≥Ф_І
, 
≥Ф_sockЋn
);

2553 
	}
}

2556 
	$evhЙp_bЪd_sockС
(
evhЙp
 *
hЙp
, cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
)

2558 
evhЙp_bound_sockС
 *
bound
 =

2559 
	`evhЙp_bЪd_sockС_wЩh_h™dЋ
(
hЙp
, 
addїss
, 
p№t
);

2560 iа(
bound
 =р
NULL
)

2563 
	}
}

2565 
evhЙp_bound_sockС
 *

2566 
	$evhЙp_bЪd_sockС_wЩh_h™dЋ
(
evhЙp
 *
hЙp
, cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
)

2568 
evutЮ_sockС_t
 
fd
;

2569 
evhЙp_bound_sockС
 *
bound
;

2571 iа((
fd
 = 
	`bЪd_sockС
(
addїss
, 
p№t
, 1 )) == -1)

2572  (
NULL
);

2574 iа(
	`li°Т
(
fd
, 128) == -1) {

2575 
	`evТt_sock_wђn
(
fd
, "%s:Жi°Т", 
__func__
);

2576 
	`EVUTIL_CLOSESOCKET
(
fd
);

2577  (
NULL
);

2580 
bound
 = 
	`evhЙp_acы±_sockС_wЩh_h™dЋ
(
hЙp
, 
fd
);

2582 iа(
bound
 !р
NULL
) {

2583 
	`evТt_debug
(("BoundБoЕort %d - Awaiting connections ... ",

2584 
p№t
));

2585  (
bound
);

2588  (
NULL
);

2589 
	}
}

2592 
	$evhЙp_acы±_sockС
(
evhЙp
 *
hЙp
, 
evutЮ_sockС_t
 
fd
)

2594 
evhЙp_bound_sockС
 *
bound
 =

2595 
	`evhЙp_acы±_sockС_wЩh_h™dЋ
(
hЙp
, 
fd
);

2596 iа(
bound
 =р
NULL
)

2599 
	}
}

2602 
evhЙp_bound_sockС
 *

2603 
	$evhЙp_acы±_sockС_wЩh_h™dЋ
(
evhЙp
 *
hЙp
, 
evutЮ_sockС_t
 
fd
)

2605 
evhЙp_bound_sockС
 *
bound
;

2606 
evcЏ∆i°ТФ
 *
li°ТФ
;

2607 cЏ° 
жags
 =

2608 
LEV_OPT_REUSEABLE
|
LEV_OPT_CLOSE_ON_EXEC
|
LEV_OPT_CLOSE_ON_FREE
;

2610 
bound
 = 
	`mm_mЃloc
((
evhЙp_bound_sockС
));

2611 iа(
bound
 =р
NULL
)

2612  (
NULL
);

2614 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w
(
hЙp
->
ba£
, 
acы±_sockС_cb
, http,

2615 
жags
,

2617 
fd
);

2618 iа(!
li°ТФ
) {

2619 
	`mm_дУ
(
bound
);

2620  (
NULL
);

2622 
bound
->
li°ТФ
 =Жistener;

2624 
	`TAILQ_INSERT_TAIL
(&
hЙp
->
sockСs
, 
bound
, 
√xt
);

2626  (
bound
);

2627 
	}
}

2629 
evutЮ_sockС_t
 
	$evhЙp_bound_sockС_gС_fd
(
evhЙp_bound_sockС
 *
bound
)

2631  
	`evcЏ∆i°ТФ_gС_fd
(
bound
->
li°ТФ
);

2632 
	}
}

2635 
	$evhЙp_dЦ_acы±_sockС
(
evhЙp
 *
hЙp
, 
evhЙp_bound_sockС
 *
bound
)

2637 
	`TAILQ_REMOVE
(&
hЙp
->
sockСs
, 
bound
, 
√xt
);

2638 
	`evcЏ∆i°ТФ_дУ
(
bound
->
li°ТФ
);

2639 
	`mm_дУ
(
bound
);

2640 
	}
}

2642 
evhЙp
*

2643 
	$evhЙp_√w_objeщ
()

2645 
evhЙp
 *
hЙp
 = 
NULL
;

2647 iа((
hЙp
 = 
	`mm_€ќoc
(1, (
evhЙp
))и=р
NULL
) {

2648 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

2649  (
NULL
);

2652 
hЙp
->
timeout
 = -1;

2653 
	`evhЙp_£t_max_hЧdФs_size
(
hЙp
, 
EV_SIZE_MAX
);

2654 
	`evhЙp_£t_max_body_size
(
hЙp
, 
EV_SIZE_MAX
);

2656 
	`TAILQ_INIT
(&
hЙp
->
sockСs
);

2657 
	`TAILQ_INIT
(&
hЙp
->
€ќbacks
);

2658 
	`TAILQ_INIT
(&
hЙp
->
cЏ√щiЏs
);

2659 
	`TAILQ_INIT
(&
hЙp
->
vЬtuЃho°s
);

2661  (
hЙp
);

2662 
	}
}

2664 
evhЙp
 *

2665 
	$evhЙp_√w
(
evТt_ba£
 *
ba£
)

2667 
evhЙp
 *
hЙp
 = 
	`evhЙp_√w_objeщ
();

2669 
hЙp
->
ba£
 = base;

2671  (
hЙp
);

2672 
	}
}

2678 
evhЙp
 *

2679 
	$evhЙp_°ђt
(cЏ° *
addїss
, 
p№t
)

2681 
evhЙp
 *
hЙp
 = 
	`evhЙp_√w_objeщ
();

2683 iа(
	`evhЙp_bЪd_sockС
(
hЙp
, 
addїss
, 
p№t
) == -1) {

2684 
	`mm_дУ
(
hЙp
);

2685  (
NULL
);

2688  (
hЙp
);

2689 
	}
}

2692 
	$evhЙp_дУ
(
evhЙp
* 
hЙp
)

2694 
evhЙp_cb
 *
hЙp_cb
;

2695 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

2696 
evhЙp_bound_sockС
 *
bound
;

2697 
evhЙp
* 
vho°
;

2700 (
bound
 = 
	`TAILQ_FIRST
(&
hЙp
->
sockСs
)и!р
NULL
) {

2701 
	`TAILQ_REMOVE
(&
hЙp
->
sockСs
, 
bound
, 
√xt
);

2703 
	`evcЏ∆i°ТФ_дУ
(
bound
->
li°ТФ
);

2705 
	`mm_дУ
(
bound
);

2708 (
evcЏ
 = 
	`TAILQ_FIRST
(&
hЙp
->
cЏ√щiЏs
)и!р
NULL
) {

2710 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2713 (
hЙp_cb
 = 
	`TAILQ_FIRST
(&
hЙp
->
€ќbacks
)и!р
NULL
) {

2714 
	`TAILQ_REMOVE
(&
hЙp
->
€ќbacks
, 
hЙp_cb
, 
√xt
);

2715 
	`mm_дУ
(
hЙp_cb
->
wh©
);

2716 
	`mm_дУ
(
hЙp_cb
);

2719 (
vho°
 = 
	`TAILQ_FIRST
(&
hЙp
->
vЬtuЃho°s
)и!р
NULL
) {

2720 
	`TAILQ_REMOVE
(&
hЙp
->
vЬtuЃho°s
, 
vho°
, 
√xt
);

2722 
	`evhЙp_дУ
(
vho°
);

2725 iа(
hЙp
->
vho°_ЈЙФn
 !р
NULL
)

2726 
	`mm_дУ
(
hЙp
->
vho°_ЈЙФn
);

2728 
	`mm_дУ
(
hЙp
);

2729 
	}
}

2732 
	$evhЙp_add_vЬtuЃ_ho°
(
evhЙp
* 
hЙp
, cЏ° *
ЈЙФn
,

2733 
evhЙp
* 
vho°
)

2736 iа(
vho°
->
vho°_ЈЙФn
 !р
NULL
 ||

2737 
	`TAILQ_FIRST
(&
vho°
->
sockСs
и!р
NULL
)

2740 
vho°
->
vho°_ЈЙФn
 = 
	`mm_°rdup
(
ЈЙФn
);

2741 iа(
vho°
->
vho°_ЈЙФn
 =р
NULL
)

2744 
	`TAILQ_INSERT_TAIL
(&
hЙp
->
vЬtuЃho°s
, 
vho°
, 
√xt
);

2747 
	}
}

2750 
	$evhЙp_їmove_vЬtuЃ_ho°
(
evhЙp
* 
hЙp
, evhЙp* 
vho°
)

2752 iа(
vho°
->
vho°_ЈЙФn
 =р
NULL
)

2755 
	`TAILQ_REMOVE
(&
hЙp
->
vЬtuЃho°s
, 
vho°
, 
√xt
);

2757 
	`mm_дУ
(
vho°
->
vho°_ЈЙФn
);

2758 
vho°
->
vho°_ЈЙФn
 = 
NULL
;

2761 
	}
}

2764 
	$evhЙp_£t_timeout
(
evhЙp
* 
hЙp
, 
timeout_Ъ_£cs
)

2766 
hЙp
->
timeout
 = 
timeout_Ъ_£cs
;

2767 
	}
}

2770 
	$evhЙp_£t_max_hЧdФs_size
(
evhЙp
* 
hЙp
, 
ev_ssize_t
 
max_hЧdФs_size
)

2772 iа(
max_hЧdФs_size
 < 0)

2773 
hЙp
->
deзu…_max_hЧdФs_size
 = 
EV_SIZE_MAX
;

2775 
hЙp
->
deзu…_max_hЧdФs_size
 = 
max_hЧdФs_size
;

2776 
	}
}

2779 
	$evhЙp_£t_max_body_size
(
evhЙp
* 
hЙp
, 
ev_ssize_t
 
max_body_size
)

2781 iа(
max_body_size
 < 0)

2782 
hЙp
->
deзu…_max_body_size
 = 
EV_UINT64_MAX
;

2784 
hЙp
->
deзu…_max_body_size
 = 
max_body_size
;

2785 
	}
}

2788 
evhЙp_£t_cb
(
evhЙp
 *
hЙp
, cЏ° *
uri
,

2789 (*
cb
)(
evhЙp_їque°
 *, *), *
cbђg
)

2791 
evhЙp_cb
 *
hЙp_cb
;

2793 
	`TAILQ_FOREACH
(
hЙp_cb
, &
hЙp
->
€ќbacks
, 
√xt
) {

2794 iа(
	`°rcmp
(
hЙp_cb
->
wh©
, 
uri
) == 0)

2798 iа((
hЙp_cb
 = 
	`mm_€ќoc
(1, (
evhЙp_cb
))и=р
NULL
) {

2799 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

2803 
hЙp_cb
->
wh©
 = 
	`mm_°rdup
(
uri
);

2804 
hЙp_cb
->
cb
 = cb;

2805 
hЙp_cb
->
cbђg
 = cbarg;

2807 
	`TAILQ_INSERT_TAIL
(&
hЙp
->
€ќbacks
, 
hЙp_cb
, 
√xt
);

2810 
	}
}

2813 
	$evhЙp_dЦ_cb
(
evhЙp
 *
hЙp
, cЏ° *
uri
)

2815 
evhЙp_cb
 *
hЙp_cb
;

2817 
	`TAILQ_FOREACH
(
hЙp_cb
, &
hЙp
->
€ќbacks
, 
√xt
) {

2818 iа(
	`°rcmp
(
hЙp_cb
->
wh©
, 
uri
) == 0)

2821 iа(
hЙp_cb
 =р
NULL
)

2824 
	`TAILQ_REMOVE
(&
hЙp
->
€ќbacks
, 
hЙp_cb
, 
√xt
);

2825 
	`mm_дУ
(
hЙp_cb
->
wh©
);

2826 
	`mm_дУ
(
hЙp_cb
);

2829 
	}
}

2832 
evhЙp_£t_gТcb
(
evhЙp
 *
hЙp
,

2833 (*
cb
)(
evhЙp_їque°
 *, *), *
cbђg
)

2835 
hЙp
->
gТcb
 = 
cb
;

2836 
hЙp
->
gТcbђg
 = 
cbђg
;

2837 
	}
}

2843 
evhЙp_їque°
 *

2844 
evhЙp_їque°_√w
((*
cb
)(
evhЙp_їque°
 *, *), *
ђg
)

2846 
evhЙp_їque°
 *
їq
 = 
NULL
;

2849 iа((
їq
 = 
	`mm_€ќoc
(1, (
evhЙp_їque°
))и=р
NULL
) {

2850 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

2851 
Фr№
;

2854 
їq
->
hЧdФs_size
 = 0;

2855 
їq
->
body_size
 = 0;

2857 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

2858 
їq
->
Ъput_hЧdФs
 = 
	`mm_€ќoc
(1, (
evkeyvЃq
));

2859 iа(
їq
->
Ъput_hЧdФs
 =р
NULL
) {

2860 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

2861 
Фr№
;

2863 
	`TAILQ_INIT
(
їq
->
Ъput_hЧdФs
);

2865 
їq
->
ouНut_hЧdФs
 = 
	`mm_€ќoc
(1, (
evkeyvЃq
));

2866 iа(
їq
->
ouНut_hЧdФs
 =р
NULL
) {

2867 
	`evТt_wђn
("%s: cЃloc", 
__func__
);

2868 
Фr№
;

2870 
	`TAILQ_INIT
(
їq
->
ouНut_hЧdФs
);

2872 iа((
їq
->
Ъput_bufгr
 = 
	`evbufгr_√w
()и=р
NULL
) {

2873 
	`evТt_wђn
("%s:Гvbufгr_√w", 
__func__
);

2874 
Фr№
;

2877 iа((
їq
->
ouНut_bufгr
 = 
	`evbufгr_√w
()и=р
NULL
) {

2878 
	`evТt_wђn
("%s:Гvbufгr_√w", 
__func__
);

2879 
Фr№
;

2882 
їq
->
cb
 = cb;

2883 
їq
->
cb_ђg
 = 
ђg
;

2885  (
їq
);

2887 
Фr№
:

2888 iа(
їq
 !р
NULL
)

2889 
	`evhЙp_їque°_дУ
(
їq
);

2890  (
NULL
);

2891 
	}
}

2894 
	$evhЙp_їque°_дУ
(
evhЙp_їque°
 *
їq
)

2896 iа((
їq
->
жags
 & 
EVHTTP_REQ_DEFER_FREE
) != 0) {

2897 
їq
->
жags
 |р
EVHTTP_REQ_NEEDS_FREE
;

2901 iа(
їq
->
їmўe_ho°
 !р
NULL
)

2902 
	`mm_дУ
(
їq
->
їmўe_ho°
);

2903 iа(
їq
->
uri
 !р
NULL
)

2904 
	`mm_дУ
(
їq
->
uri
);

2905 iа(
їq
->
ї•Џ£_code_lЪe
 !р
NULL
)

2906 
	`mm_дУ
(
їq
->
ї•Џ£_code_lЪe
);

2908 
	`evhЙp_юЧr_hЧdФs
(
їq
->
Ъput_hЧdФs
);

2909 
	`mm_дУ
(
їq
->
Ъput_hЧdФs
);

2911 
	`evhЙp_юЧr_hЧdФs
(
їq
->
ouНut_hЧdФs
);

2912 
	`mm_дУ
(
їq
->
ouНut_hЧdФs
);

2914 iа(
їq
->
Ъput_bufгr
 !р
NULL
)

2915 
	`evbufгr_дУ
(
їq
->
Ъput_bufгr
);

2917 iа(
їq
->
ouНut_bufгr
 !р
NULL
)

2918 
	`evbufгr_дУ
(
їq
->
ouНut_bufгr
);

2920 
	`mm_дУ
(
їq
);

2921 
	}
}

2924 
	$evhЙp_їque°_own
(
evhЙp_їque°
 *
їq
)

2926 
їq
->
жags
 |р
EVHTTP_USER_OWNED
;

2927 
	}
}

2930 
	$evhЙp_їque°_is_ow√d
(
evhЙp_їque°
 *
їq
)

2932  (
їq
->
жags
 & 
EVHTTP_USER_OWNED
) != 0;

2933 
	}
}

2935 
evhЙp_cЏ√щiЏ
 *

2936 
	$evhЙp_їque°_gС_cЏ√щiЏ
(
evhЙp_їque°
 *
їq
)

2938  
їq
->
evcЏ
;

2939 
	}
}

2943 
evhЙp_їque°_£t_chunked_cb
(
evhЙp_їque°
 *
їq
,

2944 (*
cb
)(
evhЙp_їque°
 *, *))

2946 
їq
->
chunk_cb
 = 
cb
;

2947 
	}
}

2954 
	$evhЙp_їque°_gС_uri
(
evhЙp_їque°
 *
їq
) {

2955 iа(
їq
->
uri
 =р
NULL
)

2956 
	`evТt_debug
(("%s:Дeque° %∞ha†nЎuri\n", 
__func__
, 
їq
));

2957  (
їq
->
uri
);

2958 
	}
}

2961 
evkeyvЃq
 *
	$evhЙp_їque°_gС_Ъput_hЧdФs
(
evhЙp_їque°
 *
їq
)

2963  (
їq
->
Ъput_hЧdФs
);

2964 
	}
}

2967 
evkeyvЃq
 *
	$evhЙp_їque°_gС_ouНut_hЧdФs
(
evhЙp_їque°
 *
їq
)

2969  (
їq
->
ouНut_hЧdФs
);

2970 
	}
}

2973 
evbufгr
 *
	$evhЙp_їque°_gС_Ъput_bufгr
(
evhЙp_їque°
 *
їq
)

2975  (
їq
->
Ъput_bufгr
);

2976 
	}
}

2979 
evbufгr
 *
	$evhЙp_їque°_gС_ouНut_bufгr
(
evhЙp_їque°
 *
їq
)

2981  (
їq
->
ouНut_bufгr
);

2982 
	}
}

2990 
evhЙp_cЏ√щiЏ
*

2991 
	$evhЙp_gС_їque°_cЏ√щiЏ
(

2992 
evhЙp
* 
hЙp
,

2993 
evutЮ_sockС_t
 
fd
, 
sockaddr
 *
І
, 
ev_sockЋn_t
 
ІЋn
)

2995 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

2996 *
ho°«me
 = 
NULL
, *
p№Кame
 = NULL;

2998 
	`«me_дom_addr
(
І
, 
ІЋn
, &
ho°«me
, &
p№Кame
);

2999 iа(
ho°«me
 =р
NULL
 || 
p№Кame
 == NULL) {

3000 iа(
ho°«me
и
	`mm_дУ
(hostname);

3001 iа(
p№Кame
и
	`mm_дУ
(portname);

3002  (
NULL
);

3005 
	`evТt_debug
(("%s:ВewДequest from %s:%s on %d\n",

3006 
__func__
, 
ho°«me
, 
p№Кame
, 
fd
));

3009 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_ba£_√w
(

3010 
hЙp
->
ba£
, 
NULL
, 
ho°«me
, 
	`©oi
(
p№Кame
));

3011 
	`mm_дУ
(
ho°«me
);

3012 
	`mm_дУ
(
p№Кame
);

3013 iа(
evcЏ
 =р
NULL
)

3014  (
NULL
);

3016 
evcЏ
->
max_hЧdФs_size
 = 
hЙp
->
deзu…_max_hЧdФs_size
;

3017 
evcЏ
->
max_body_size
 = 
hЙp
->
deзu…_max_body_size
;

3019 
evcЏ
->
жags
 |р
EVHTTP_CON_INCOMING
;

3020 
evcЏ
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

3022 
evcЏ
->
fd
 = fd;

3024 
	`bufгїvТt_£tfd
(
evcЏ
->
buгv
, 
fd
);

3026  (
evcЏ
);

3027 
	}
}

3030 
	$evhЙp_assocЯЛ_√w_їque°_wЩh_cЏ√щiЏ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
)

3032 
evhЙp
 *
hЙp
 = 
evcЏ
->
hЙp_£rvФ
;

3033 
evhЙp_їque°
 *
їq
;

3034 iа((
їq
 = 
	`evhЙp_їque°_√w
(
evhЙp_h™dЋ_їque°
, 
hЙp
)и=р
NULL
)

3037 iа((
їq
->
їmўe_ho°
 = 
	`mm_°rdup
(
evcЏ
->
addїss
)и=р
NULL
) {

3038 
	`evТt_wђn
("%s: sМdup", 
__func__
);

3039 
	`evhЙp_їque°_дУ
(
їq
);

3042 
їq
->
їmўe_p№t
 = 
evcЏ
->
p№t
;

3044 
їq
->
evcЏ
 =Гvcon;

3045 
їq
->
жags
 |р
EVHTTP_REQ_OWN_CONNECTION
;

3047 
	`TAILQ_INSERT_TAIL
(&
evcЏ
->
їque°s
, 
їq
, 
√xt
);

3049 
їq
->
kЪd
 = 
EVHTTP_REQUEST
;

3052 
	`evhЙp_°ђt_їad
(
evcЏ
);

3055 
	}
}

3058 
	$evhЙp_gС_їque°
(
evhЙp
 *
hЙp
, 
evutЮ_sockС_t
 
fd
,

3059 
sockaddr
 *
І
, 
ev_sockЋn_t
 
ІЋn
)

3061 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

3063 
evcЏ
 = 
	`evhЙp_gС_їque°_cЏ√щiЏ
(
hЙp
, 
fd
, 
І
, 
ІЋn
);

3064 iа(
evcЏ
 =р
NULL
) {

3065 
	`evТt_sock_wђn
(
fd
, "%s: c™nў gС cЏ√щiЏ oј%d", 
__func__
, fd);

3066 
	`EVUTIL_CLOSESOCKET
(
fd
);

3071 iа(
hЙp
->
timeout
 != -1)

3072 
	`evhЙp_cЏ√щiЏ_£t_timeout
(
evcЏ
, 
hЙp
->
timeout
);

3078 
evcЏ
->
hЙp_£rvФ
 = 
hЙp
;

3079 
	`TAILQ_INSERT_TAIL
(&
hЙp
->
cЏ√щiЏs
, 
evcЏ
, 
√xt
);

3081 iа(
	`evhЙp_assocЯЛ_√w_їque°_wЩh_cЏ√щiЏ
(
evcЏ
) == -1)

3082 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

3083 
	}
}

3092 
	$«me_дom_addr
(
sockaddr
 *
І
, 
ev_sockЋn_t
 
ІЋn
,

3093 **
pho°
, **
µ№t
)

3095 
ЅЁ
[
NI_MAXHOST
];

3096 
°љ№t
[
NI_MAXSERV
];

3097 
ni_їsu…
;

3099 #ifdeа
_EVENT_HAVE_GETNAMEINFO


3100 
ni_їsu…
 = 
	`gС«meЪfo
(
І
, 
ІЋn
,

3101 
ЅЁ
, “tЁ), 
°љ№t
, (strport),

3102 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

3104 iа(
ni_їsu…
 != 0) {

3105 #ifdeа
EAI_SYSTEM


3107 iа(
ni_їsu…
 =р
EAI_SYSTEM
)

3108 
	`evТt_Фr
(1, "getnameinfo failed");

3111 
	`evТt_Фrx
(1, "gС«meЪfЎзЮed: %s", 
	`gai_°їЉ№
(
ni_їsu…
));

3115 
ni_їsu…
 = 
	`зke_gС«meЪfo
(
І
, 
ІЋn
,

3116 
ЅЁ
, “tЁ), 
°љ№t
, (strport),

3117 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

3118 iа(
ni_їsu…
 != 0)

3122 *
pho°
 = 
	`mm_°rdup
(
ЅЁ
);

3123 *
µ№t
 = 
	`mm_°rdup
(
°љ№t
);

3124 
	}
}

3128 
evutЮ_sockС_t


3129 
	$bЪd_sockС_ai
(
evutЮ_addrЪfo
 *
ai
, 
їu£
)

3131 
evutЮ_sockС_t
 
fd
;

3133 
Џ
 = 1, 
r
;

3134 
£Љno
;

3137 
fd
 = 
	`sockС
(
ai
 ?Зi->
ai_зmЮy
 : 
AF_INET
, 
SOCK_STREAM
, 0);

3138 iа(
fd
 == -1) {

3139 
	`evТt_sock_wђn
(-1, "socket");

3143 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
fd
) < 0)

3144 
out
;

3145 iа(
	`evutЮ_make_sockС_юo£Џexec
(
fd
) < 0)

3146 
out
;

3148 
	`£tsockЁt
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Џ
, (on));

3149 iа(
їu£
)

3150 
	`evutЮ_make_li°Т_sockС_їu£abЋ
(
fd
);

3152 iа(
ai
 !р
NULL
) {

3153 
r
 = 
	`bЪd
(
fd
, 
ai
->
ai_addr
,Зi->
ai_addЊТ
);

3154 iа(
r
 == -1)

3155 
out
;

3158  (
fd
);

3160 
out
:

3161 
£Љno
 = 
	`EVUTIL_SOCKET_ERROR
();

3162 
	`EVUTIL_CLOSESOCKET
(
fd
);

3163 
	`EVUTIL_SET_SOCKET_ERROR
(
£Љno
);

3165 
	}
}

3167 
evutЮ_addrЪfo
 *

3168 
	$make_addrЪfo
(cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
)

3170 
evutЮ_addrЪfo
 *
ai
 = 
NULL
;

3172 
evutЮ_addrЪfo
 
hЪts
;

3173 
°љ№t
[
NI_MAXSERV
];

3174 
ai_їsu…
;

3176 
	`mem£t
(&
hЪts
, 0, (hints));

3177 
hЪts
.
ai_зmЮy
 = 
AF_UNSPEC
;

3178 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

3181 
hЪts
.
ai_жags
 = 
EVUTIL_AI_PASSIVE
|
EVUTIL_AI_ADDRCONFIG
;

3182 
	`evutЮ_ҐіЪtf
(
°љ№t
, (°љ№t), "%d", 
p№t
);

3183 iа((
ai_їsu…
 = 
	`evutЮ_gСaddrЪfo
(
addїss
, 
°љ№t
, &
hЪts
, &
ai
))

3185 iа(
ai_їsu…
 =р
EVUTIL_EAI_SYSTEM
)

3186 
	`evТt_wђn
("getaddrinfo");

3188 
	`evТt_wђnx
("getaddrinfo: %s",

3189 
	`evutЮ_gai_°їЉ№
(
ai_їsu…
));

3190  (
NULL
);

3193  (
ai
);

3194 
	}
}

3196 
evutЮ_sockС_t


3197 
	$bЪd_sockС
(cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
, 
їu£
)

3199 
evutЮ_sockС_t
 
fd
;

3200 
evutЮ_addrЪfo
 *
aЩЁ
 = 
NULL
;

3203 iа(
addїss
 =р
NULL
 && 
p№t
 == 0)

3204  
	`bЪd_sockС_ai
(
NULL
, 0);

3206 
aЩЁ
 = 
	`make_addrЪfo
(
addїss
, 
p№t
);

3208 iа(
aЩЁ
 =р
NULL
)

3211 
fd
 = 
	`bЪd_sockС_ai
(
aЩЁ
, 
їu£
);

3213 
	`evutЮ_дУaddrЪfo
(
aЩЁ
);

3215  (
fd
);

3216 
	}
}

	@include/event2/buffer.h

26 #iвdeа
_EVENT2_BUFFER_H_


27 
	#_EVENT2_BUFFER_H_


	)

64 #ifdeа
__эlu•lus


68 
	~<evТt-cЏfig.h
>

69 
	~<°dђg.h
>

70 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


71 
	~<sys/ty≥s.h
>

73 #ifdeа
_EVENT_HAVE_SYS_UIO_H


74 
	~<sys/uio.h
>

76 
	~<evТt2/utЮ.h
>

78 
evbufгr
;

85 
	sevbufгr_±r
 {

86 
ev_ssize_t
 
pos
;

90 *
chaЪ
;

91 
size_t
 
pos_Ъ_chaЪ
;

92 } 
_ЪЛЇЃ
;

100 #ifdeа
_EVENT_HAVE_SYS_UIO_H


101 
	#evbufгr_iovec
 
iovec


	)

103 
	#_EVBUFFER_IOVEC_IS_NATIVE


	)

105 
	sevbufгr_iovec
 {

107 *
iov_ba£
;

109 
size_t
 
iov_Ћn
;

119 
evbufгr
 *
evbufгr_√w
();

127 
evbufгr_дУ
(
evbufгr
 *
buf
);

141 
evbufгr_ТabЋ_lockЪg
(
evbufгr
 *
buf
, *
lock
);

147 
evbufгr_lock
(
evbufгr
 *
buf
);

153 
evbufгr_u∆ock
(
evbufгr
 *
buf
);

161 
size_t
 
evbufгr_gС_Ћngth
(cЏ° 
evbufгr
 *
buf
);

175 
size_t
 
evbufгr_gС_cЏtiguous_•aы
(cЏ° 
evbufгr
 *
buf
);

187 
evbufгr_exЈnd
(
evbufгr
 *
buf
, 
size_t
 
d©Ћn
);

222 
evbufгr_ї£rve_•aы
(
evbufгr
 *
buf
, 
ev_ssize_t
 
size
,

223 
evbufгr_iovec
 *
vec
, 
n_vecs
);

246 
evbufгr_commЩ_•aы
(
evbufгr
 *
buf
,

247 
evbufгr_iovec
 *
vec
, 
n_vecs
);

257 
evbufгr_add
(
evbufгr
 *
buf
, cЏ° *
d©a
, 
size_t
 
d©Ћn
);

268 
evbufгr_їmove
(
evbufгr
 *
buf
, *
d©a
, 
size_t
 
d©Ћn
);

280 
evbufгr_їmove_bufгr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

281 
size_t
 
d©Ћn
);

285 
	eevbufгr_eё_°yЋ
 {

287 
EVBUFFER_EOL_ANY
,

290 
EVBUFFER_EOL_CRLF
,

292 
EVBUFFER_EOL_CRLF_STRICT
,

294 
EVBUFFER_EOL_LF


311 *
evbufгr_їad 
(
evbufгr
 *
bufгr
, 
size_t
 *
n_їad_out
,

312 
evbufгr_eё_°yЋ
 
eё_°yЋ
);

324 
evbufгr_add_bufгr
(
evbufгr
 *
outbuf
, evbufгЄ*
Ъbuf
);

327 (*
evbufгr_їf_юЧnup_cb
)(cЏ° *
	td©a
,

328 
	tsize_t
 
	td©ЃТ
, *
	texМa
);

345 
evbufгr_add_їгїnы
(
evbufгr
 *
outbuf
,

346 cЏ° *
d©a
, 
size_t
 
d©Ћn
,

347 
evbufгr_їf_юЧnup_cb
 
юЧnupв
, *
exМa
);

368 
evbufгr_add_fЮe
(
evbufгr
 *
ouНut
, 
fd
, 
off_t
 
off£t
,

369 
off_t
 
Ћngth
);

380 
evbufгr_add_іЪtf
(
evbufгr
 *
buf
, cЏ° *
fmt
, ...)

381 #ifdeа
__GNUC__


382 
__©МibuЛ__
((
f№m©
(
іЪtf
, 2, 3)))

395 
evbufгr_add_vіЪtf
(
evbufгr
 *
buf
, cЏ° *
fmt
, 
va_li°
 
≠
);

405 
evbufгr_dњЪ
(
evbufгr
 *
buf
, 
size_t
 
Ћn
);

418 
evbufгr_wrЩe
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
);

432 
evbufгr_wrЩe_©mo°
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
,

433 
ev_ssize_t
 
howmuch
);

444 
evbufгr_їad
(
evbufгr
 *
bufгr
, 
evutЮ_sockС_t
 
fd
, 
howmuch
);

457 
evbufгr_±r
 
evbufгr_£ђch
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
, cЏ° evbufгr_±Є*
°ђt
);

473 
evbufгr_±r
 
evbufгr_£ђch_њnge
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
, cЏ° evbufгr_±Є*
°ђt
, cЏ° evbufгr_±Є*
Тd
);

475 
	eevbufгr_±r_how
 {

478 
EVBUFFER_PTR_SET
,

480 
EVBUFFER_PTR_ADD


496 
evbufгr_±r_£t
(
evbufгr
 *
bufгr
, 
evbufгr_±r
 *
pos
,

497 
size_t
 
posЩiЏ
, 
evbufгr_±r_how
 
how
);

513 
evbufгr_±r
 
evbufгr_£ђch_eё
(
evbufгr
 *
bufгr
,

514 
evbufгr_±r
 *
°ђt
, 
size_t
 *
eё_Ћn_out
,

515 
evbufгr_eё_°yЋ
 
eё_°yЋ
);

518 
	sevbufгr_cb_Ъfo
 {

520 
size_t
 
№ig_size
;

521 
size_t
 
n_added
;

522 
size_t
 
n_dЦСed
;

551 
evbufгr_≥ek
(
evbufгr
 *
bufгr
, 
ev_ssize_t
 
Ћn
,

552 
evbufгr_±r
 *
°ђt_©
,

553 
evbufгr_iovec
 *
vec_out
, 
n_vec
);

574 (*
evbufгr_cb_func
)(
	tevbufгr
 *
	tbufгr
, cЏ° 
	tevbufгr_cb_Ъfo
 *
	tЪfo
, *
	tђg
);

576 
evbufгr_cb_ТМy
;

588 
evbufгr_cb_ТМy
 *
evbufгr_add_cb
(
evbufгr
 *
bufгr
, 
evbufгr_cb_func
 
cb
, *
cbђg
);

598 
evbufгr_їmove_cb_ТМy
(
evbufгr
 *
bufгr
,

599 
evbufгr_cb_ТМy
 *
Тt
);

607 
evbufгr_їmove_cb
(
evbufгr
 *
bufгr
, 
evbufгr_cb_func
 
cb
, *
cbђg
);

611 
	#EVBUFFER_CB_ENABLED
 1

	)

620 
evbufгr_cb_£t_жags
(
evbufгr
 *
bufгr
,

621 
evbufгr_cb_ТМy
 *
cb
, 
ev_uЪt32_t
 
жags
);

630 
evbufгr_cb_юЧr_жags
(
evbufгr
 *
bufгr
,

631 
evbufгr_cb_ТМy
 *
cb
, 
ev_uЪt32_t
 
жags
);

643 
evbufгr_cb_su•Тd
(
evbufгr
 *
bufгr
, 
evbufгr_cb_ТМy
 *
cb
);

652 
evbufгr_cb_unsu•Тd
(
evbufгr
 *
bufгr
, 
evbufгr_cb_ТМy
 *
cb
);

664 *
evbufгr_puќup
(
evbufгr
 *
buf
, 
ev_ssize_t
 
size
);

675 
evbufгr_іХТd
(
evbufгr
 *
buf
, cЏ° *
d©a
, 
size_t
 
size
);

685 
evbufгr_іХТd_bufгr
(
evbufгr
 *
d°
, evbufгr* 
§c
);

701 
evbufгr_дУze
(
evbufгr
 *
buf
, 
©_дЏt
);

710 
evbufгr_unдУze
(
evbufгr
 *
buf
, 
©_дЏt
);

712 
evТt_ba£
;

720 
evbufгr_deгr_€ќbacks
(
evbufгr
 *
bufгr
, 
evТt_ba£
 *
ba£
);

722 #ifdeа
__эlu•lus


	@include/event2/buffer_compat.h

27 #iвdeа
_EVENT2_BUFFER_COMPAT_H_


28 
	#_EVENT2_BUFFER_COMPAT_H_


	)

48 *
evbufгr_їadlЪe
(
evbufгr
 *
bufгr
);

70 (*
	tevbufгr_cb
)(
	tevbufгr
 *
	tbufгr
, 
	tsize_t
 
	tёd_Ћn
, size_И
	t√w_Ћn
, *
	tђg
);

91 
	`evbufгr_£tcb
(
evbufгr
 *
bufгr
, 
evbufгr_cb
 
cb
, *
cbђg
);

102 *
	`evbufгr_fЪd
(
evbufгr
 *
bufгr
, cЏ° *
wh©
, 
size_t
 
Ћn
);

105 
	#EVBUFFER_LENGTH
(
x
и
	`evbufгr_gС_Ћngth
(x)

	)

107 
	#EVBUFFER_DATA
(
x
и
	`evbufгr_puќup
((x), -1)

	)

	@include/event2/bufferevent.h

27 #iвdeа
_EVENT2_BUFFEREVENT_H_


28 
	#_EVENT2_BUFFEREVENT_H_


	)

53 #ifdeа
__эlu•lus


57 
	~<evТt-cЏfig.h
>

58 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


59 
	~<sys/ty≥s.h
>

61 #ifdeа
_EVENT_HAVE_SYS_TIME_H


62 
	~<sys/time.h
>

66 
	~<evТt2/utЮ.h
>

69 
	#BEV_EVENT_READING
 0x01

	)

70 
	#BEV_EVENT_WRITING
 0x02

	)

71 
	#BEV_EVENT_EOF
 0x10

	)

72 
	#BEV_EVENT_ERROR
 0x20

	)

73 
	#BEV_EVENT_TIMEOUT
 0x40

	)

74 
	#BEV_EVENT_CONNECTED
 0x80

	)

75 
bufгїvТt
;

76 
evТt_ba£
;

77 
evbufгr
;

78 
sockaddr
;

93 (*
bufгїvТt_d©a_cb
)(
	tbufгїvТt
 *
	tbev
, *
	tщx
);

109 (*
bufгїvТt_evТt_cb
)(
	tbufгїvТt
 *
	tbev
, 
	twh©
, *
	tщx
);

112 
	ebufгїvТt_ЁtiЏs
 {

115 
BEV_OPT_CLOSE_ON_FREE
 = (1<<0),

119 
BEV_OPT_THREADSAFE
 = (1<<1),

122 
BEV_OPT_DEFER_CALLBACKS
 = (1<<2)

137 
bufгїvТt
 *
bufгїvТt_sockС_√w
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
ЁtiЏs
);

156 
bufгїvТt_sockС_cЏ√щ
(
bufгїvТt
 *, 
sockaddr
 *, );

158 
evdns_ba£
;

185 
bufгїvТt_sockС_cЏ√щ_ho°«me
(
bufгїvТt
 *
b
,

186 
evdns_ba£
 *, , const *, );

196 
bufгїvТt_ba£_£t
(
evТt_ba£
 *
ba£
, 
bufгїvТt
 *
buгv
);

206 
bufгїvТt_іi№Щy_£t
(
bufгїvТt
 *
buгv
, 
іi
);

214 
bufгїvТt_дУ
(
bufгїvТt
 *
buгv
);

231 
bufгїvТt_£tcb
(
bufгїvТt
 *
buгv
,

232 
bufгїvТt_d©a_cb
 
їadcb
, bufгїvТt_d©a_cb 
wrЩecb
,

233 
bufгїvТt_evТt_cb
 
evТtcb
, *
cbђg
);

242 
bufгїvТt_£tfd
(
bufгїvТt
 *
buгv
, 
evutЮ_sockС_t
 
fd
);

248 
evutЮ_sockС_t
 
bufгїvТt_gСfd
(
bufгїvТt
 *
buгv
);

254 
bufгїvТt
 *
bufгїvТt_gС_undФlyЪg
(bufгїvТИ*
buгv
);

269 
bufгїvТt_wrЩe
(
bufгїvТt
 *
buгv
,

270 cЏ° *
d©a
, 
size_t
 
size
);

282 
bufгїvТt_wrЩe_bufгr
(
bufгїvТt
 *
buгv
, 
evbufгr
 *
buf
);

295 
size_t
 
bufгїvТt_їad
(
bufгїvТt
 *
buгv
, *
d©a
, size_И
size
);

305 
bufгїvТt_їad_bufгr
(
bufгїvТt
 *
buгv
, 
evbufгr
 *
buf
);

316 
evbufгr
 *
bufгїvТt_gС_Ъput
(
bufгїvТt
 *
buгv
);

330 
evbufгr
 *
bufгїvТt_gС_ouНut
(
bufгїvТt
 *
buгv
);

340 
bufгїvТt_ТabЋ
(
bufгїvТt
 *
buгv
, 
evТt
);

350 
bufгїvТt_diІbЋ
(
bufгїvТt
 *
buгv
, 
evТt
);

358 
bufгїvТt_gС_ТabЋd
(
bufгїvТt
 *
buгv
);

386 
bufгїvТt_£t_timeouts
(
bufгїvТt
 *
buгv
,

387 cЏ° 
timevЃ
 *
timeout_їad
, cЏ° timevЃ *
timeout_wrЩe
);

407 
bufгїvТt_£tw©Фmђk
(
bufгїvТt
 *
buгv
, 
evТts
,

408 
size_t
 
lowmђk
, size_И
highmђk
);

414 
	ebufгїvТt_жush_mode
 {

416 
BEV_NORMAL
 = 0,

419 
BEV_FLUSH
 = 1,

422 
BEV_FINISHED
 = 2

434 
bufгїvТt_жush
(
bufгїvТt
 *
buгv
,

435 
iўy≥
,

436 
bufгїvТt_жush_mode
 
mode
);

445 
	ebufгїvТt_fЮЛr_їsu…
 {

447 
BEV_OK
 = 0,

450 
BEV_NEED_MORE
 = 1,

454 
BEV_ERROR
 = 2

475 
bufгїvТt_fЮЛr_їsu…
 (*
	tbufгїvТt_fЮЛr_cb
)(

476 
	tevbufгr
 *
	t§c
, evbufгЄ*
	td°
, 
	tev_ssize_t
 
	td°_limЩ
,

477 
	tbufгїvТt_жush_mode
 
	tmode
, *
	tщx
);

492 
bufгїvТt
 *

493 
bufгїvТt_fЮЛr_√w
(
bufгїvТt
 *
undФlyЪg
,

494 
bufгїvТt_fЮЛr_cb
 
Ъput_fЮЛr
,

495 
bufгїvТt_fЮЛr_cb
 
ouНut_fЮЛr
,

496 
ЁtiЏs
,

497 (*
дУ_cЏЛxt
)(*),

498 *
щx
);

511 
bufгїvТt_ЈЬ_√w
(
evТt_ba£
 *
ba£
, 
ЁtiЏs
,

512 
bufгїvТt
 *
ЈЬ
[2]);

518 
ev_tokТ_buckС_cfg
;

524 
bufгїvТt_њЛ_limЩ_group
;

542 
ev_tokТ_buckС_cfg
 *
ev_tokТ_buckС_cfg_√w
(

543 
ev_uЪt32_t
 
їad_њЛ
,Гv_uЪt32_И
їad_bur°
,

544 
ev_uЪt32_t
 
wrЩe_њЛ
,Гv_uЪt32_И
wrЩe_bur°
,

545 cЏ° 
timevЃ
 *
tick_Ћn
);

552 
ev_tokТ_buckС_cfg_дУ
(
ev_tokТ_buckС_cfg
 *
cfg
);

565 
bufгїvТt_£t_њЛ_limЩ
(
bufгїvТt
 *
bev
,

566 
ev_tokТ_buckС_cfg
 *
cfg
);

585 
bufгїvТt_њЛ_limЩ_group
 *
bufгїvТt_њЛ_limЩ_group_√w
(

586 
evТt_ba£
 *
ba£
,

587 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
);

601 
bufгїvТt_add_to_њЛ_limЩ_group
(
bufгїvТt
 *
bev
,

602 
bufгїvТt_њЛ_limЩ_group
 *
g
);

605 
bufгїvТt_їmove_дom_њЛ_limЩ_group
(
bufгїvТt
 *
bev
);

615 
ev_ssize_t
 
bufгїvТt_gС_їad_limЩ
(
bufгїvТt
 *
bev
);

616 
ev_ssize_t
 
bufгїvТt_gС_wrЩe_limЩ
(
bufгїvТt
 *
bev
);

619 
ev_ssize_t
 
bufгїvТt_gС_max_to_їad
(
bufгїvТt
 *
bev
);

620 
ev_ssize_t
 
bufгїvТt_gС_max_to_wrЩe
(
bufгїvТt
 *
bev
);

628 
ev_ssize_t
 
bufгїvТt_њЛ_limЩ_group_gС_їad_limЩ
(

629 
bufгїvТt_њЛ_limЩ_group
 *);

630 
ev_ssize_t
 
bufгїvТt_њЛ_limЩ_group_gС_wrЩe_limЩ
(

631 
bufгїvТt_њЛ_limЩ_group
 *);

645 
bufгїvТt_deьemТt_їad_limЩ
(
bufгїvТt
 *
bev
, 
ev_ssize_t
 
deь
);

646 
bufгїvТt_deьemТt_wrЩe_limЩ
(
bufгїvТt
 *
bev
, 
ev_ssize_t
 
deь
);

659 
bufгїvТt_њЛ_limЩ_group_deьemТt_їad
(

660 
bufгїvТt_њЛ_limЩ_group
 *, 
ev_ssize_t
);

661 
bufгїvТt_њЛ_limЩ_group_deьemТt_wrЩe
(

662 
bufгїvТt_њЛ_limЩ_group
 *, 
ev_ssize_t
);

666 #ifdeа
__эlu•lus


	@include/event2/bufferevent_compat.h

28 #iвdeа
_EVENT2_BUFFEREVENT_COMPAT_H_


29 
	#_EVENT2_BUFFEREVENT_COMPAT_H_


	)

31 
	#evbufгrcb
 
bufгїvТt_d©a_cb


	)

32 
	#evФr№cb
 
bufгїvТt_evТt_cb


	)

71 
bufгїvТt
 *
bufгїvТt_√w
(
evutЮ_sockС_t
 
fd
,

72 
evbufгrcb
 
їadcb
,Гvbufгrcb 
wrЩecb
, 
evФr№cb
 
Фr№cb
, *
cbђg
);

82 
bufгїvТt_£Йimeout
(
bufгїvТt
 *
buгv
,

83 
timeout_їad
, 
timeout_wrЩe
);

85 
	#EVBUFFER_READ
 
BEV_EVENT_READING


	)

86 
	#EVBUFFER_WRITE
 
BEV_EVENT_WRITING


	)

87 
	#EVBUFFER_EOF
 
BEV_EVENT_EOF


	)

88 
	#EVBUFFER_ERROR
 
BEV_EVENT_ERROR


	)

89 
	#EVBUFFER_TIMEOUT
 
BEV_EVENT_TIMEOUT


	)

92 
	#EVBUFFER_INPUT
(
x
и
	`bufгїvТt_gС_Ъput
(x)

	)

94 
	#EVBUFFER_OUTPUT
(
x
и
	`bufгїvТt_gС_ouНut
(x)

	)

	@include/event2/bufferevent_ssl.h

26 #iвdeа
_EVENT2_BUFFEREVENT_SSL_H_


27 
	#_EVENT2_BUFFEREVENT_SSL_H_


	)

34 
	~<evТt-cЏfig.h
>

35 
	~<evТt2/bufгїvТt.h
>

36 
	~<evТt2/utЮ.h
>

38 #ifdeа
__эlu•lus


42 
s¶_°
;

44 
	ebufгїvТt_s¶_°©e
 {

45 
BUFFEREVENT_SSL_OPEN
 = 0,

46 
BUFFEREVENT_SSL_CONNECTING
 = 1,

47 
BUFFEREVENT_SSL_ACCEPTING
 = 2

50 #ifdeа
_EVENT_HAVE_OPENSSL


51 
bufгїvТt
 *

52 
bufгїvТt_ЁТs¶_fЮЛr_√w
(
evТt_ba£
 *
ba£
,

53 
bufгїvТt
 *
undФlyЪg
,

54 
s¶_°
 *
s¶
,

55 
bufгїvТt_s¶_°©e
 
°©e
,

56 
ЁtiЏs
);

58 
bufгїvТt
 *

59 
bufгїvТt_ЁТs¶_sockС_√w
(
evТt_ba£
 *
ba£
,

60 
evutЮ_sockС_t
 
fd
,

61 
s¶_°
 *
s¶
,

62 
bufгїvТt_s¶_°©e
 
°©e
,

63 
ЁtiЏs
);

65 
s¶_°
 *

66 
bufгїvТt_ЁТs¶_gС_s¶
(
bufгїvТt
 *
buгv
);

68 
bufгїvТt_s¶_ї√gўЯЛ
(
bufгїvТt
 *
bev
);

70 
bufгїvТt_gС_ЁТs¶_Фr№
(
bufгїvТt
 *
bev
);

74 #ifdeа
__эlu•lus


	@include/event2/bufferevent_struct.h

27 #iвdeа
_EVENT2_BUFFEREVENT_STRUCT_H_


28 
	#_EVENT2_BUFFEREVENT_STRUCT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

52 
	~<evТt2/evТt_°ruщ.h
>

54 
	sevТt_w©Фmђk
 {

55 
size_t
 
low
;

56 
size_t
 
high
;

67 
	sbufгїvТt
 {

69 
evТt_ba£
 *
ev_ba£
;

72 cЏ° 
bufгїvТt_Ёs
 *
be_Ёs
;

77 
evТt
 
ev_їad
;

81 
evТt
 
ev_wrЩe
;

85 
evbufгr
 *
Ъput
;

89 
evbufгr
 *
ouНut
;

91 
evТt_w©Фmђk
 
wm_їad
;

92 
evТt_w©Фmђk
 
wm_wrЩe
;

94 
bufгїvТt_d©a_cb
 
їadcb
;

95 
bufгїvТt_d©a_cb
 
wrЩecb
;

98 
bufгїvТt_evТt_cb
 
Фr№cb
;

99 *
cbђg
;

101 
timevЃ
 
timeout_їad
;

102 
timevЃ
 
timeout_wrЩe
;

106 
ТabЋd
;

109 #ifdeа
__эlu•lus


	@include/event2/dns.h

135 #iвdeа
_EVENT2_DNS_H_


136 
	#_EVENT2_DNS_H_


	)

138 #ifdeа
__эlu•lus


143 
	~<evТt2/utЮ.h
>

146 
	#DNS_ERR_NONE
 0

	)

148 
	#DNS_ERR_FORMAT
 1

	)

151 
	#DNS_ERR_SERVERFAILED
 2

	)

153 
	#DNS_ERR_NOTEXIST
 3

	)

155 
	#DNS_ERR_NOTIMPL
 4

	)

158 
	#DNS_ERR_REFUSED
 5

	)

160 
	#DNS_ERR_TRUNCATED
 65

	)

162 
	#DNS_ERR_UNKNOWN
 66

	)

164 
	#DNS_ERR_TIMEOUT
 67

	)

166 
	#DNS_ERR_SHUTDOWN
 68

	)

168 
	#DNS_ERR_CANCEL
 69

	)

170 
	#DNS_IPv4_A
 1

	)

171 
	#DNS_PTR
 2

	)

172 
	#DNS_IPv6_AAAA
 3

	)

174 
	#DNS_QUERY_NO_SEARCH
 1

	)

176 
	#DNS_OPTION_SEARCH
 1

	)

177 
	#DNS_OPTION_NAMESERVERS
 2

	)

178 
	#DNS_OPTION_MISC
 4

	)

179 
	#DNS_OPTION_HOSTSFILE
 8

	)

180 
	#DNS_OPTIONS_ALL
 15

	)

192 (*
evdns_€ќback_ty≥
и(
	tїsu…
, 
	tty≥
, 
	tcouЅ
, 
	tЙl
, *
	taddїs£s
, *
	tђg
);

194 
evdns_ba£
;

195 
evТt_ba£
;

209 
evdns_ba£
 * 
evdns_ba£_√w
(
evТt_ba£
 *evТt_ba£, 
ЪЩЯlize_«me£rvФs
);

224 
evdns_ba£_дУ
(
evdns_ba£
 *
ba£
, 
зЮ_їque°s
);

232 cЏ° *
evdns_Фr_to_°rЪg
(
Фr
);

246 
evdns_ba£_«me£rvФ_add
(
evdns_ba£
 *
ba£
,

247 
addїss
);

261 
evdns_ba£_couЅ_«me£rvФs
(
evdns_ba£
 *
ba£
);

272 
evdns_ba£_юЧr_«me£rvФs_™d_su•Тd
(
evdns_ba£
 *
ba£
);

285 
evdns_ba£_їsume
(
evdns_ba£
 *
ba£
);

304 
evdns_ba£_«me£rvФ_Э_add
(
evdns_ba£
 *
ba£
,

305 cЏ° *
Э_as_°rЪg
);

307 
evdns_їque°
;

320 
evdns_їque°
 *
evdns_ba£_їsёve_Эv4
(
evdns_ba£
 *
ba£
, cЏ° *
«me
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

333 
evdns_їque°
 *
evdns_ba£_їsёve_Эv6
(
evdns_ba£
 *
ba£
, cЏ° *
«me
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

335 
Ъ_addr
;

336 
Ъ6_addr
;

349 
evdns_їque°
 *
evdns_ba£_їsёve_їvФ£
(
evdns_ba£
 *
ba£
, cЏ° 
Ъ_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

363 
evdns_їque°
 *
evdns_ba£_їsёve_їvФ£_Эv6
(
evdns_ba£
 *
ba£
, cЏ° 
Ъ6_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

372 
evdns_€nыl_їque°
(
evdns_ba£
 *
ba£
, 
evdns_їque°
 *
їq
);

390 
evdns_ba£_£t_ЁtiЏ
(
evdns_ba£
 *
ba£
, cЏ° *
ЁtiЏ
, cЏ° *
vЃ
);

415 
evdns_ba£_їsёv_cЏf_Јr£
(
evdns_ba£
 *
ba£
, 
жags
, cЏ° *cЏ° 
fЮТame
);

427 
evdns_ba£_lяd_ho°s
(
evdns_ba£
 *
ba£
, cЏ° *
ho°s_вame
);

439 #ifdeа
WIN32


440 
evdns_ba£_cЏfig_wЪdows_«me£rvФs
(
evdns_ba£
 *);

441 
	#EVDNS_BASE_CONFIG_WINDOWS_NAMESERVERS_IMPLEMENTED


	)

448 
evdns_ba£_£ђch_юЧr
(
evdns_ba£
 *
ba£
);

456 
evdns_ba£_£ђch_add
(
evdns_ba£
 *
ba£
, cЏ° *
domaЪ
);

467 
evdns_ba£_£ђch_ndўs_£t
(
evdns_ba£
 *
ba£
, cЏ° 
ndўs
);

475 (*
evdns_debug_log_в_ty≥
)(
	tis_wђnЪg
, cЏ° *
	tmsg
);

483 
evdns_£t_log_в
(
evdns_debug_log_в_ty≥
 
в
);

495 
evdns_£t_М™ІщiЏ_id_в
(
ev_uЪt16_t
 (*
в
)());

506 
evdns_£t_њndom_byЛs_в
((*
в
)(*, 
size_t
));

508 
	#DNS_NO_SEARCH
 1

	)

514 
evdns_£rvФ_їque°
;

515 
evdns_£rvФ_que°iЏ
;

528 (*
evdns_їque°_€ќback_в_ty≥
)(
	tevdns_£rvФ_їque°
 *, *);

529 
	#EVDNS_ANSWER_SECTION
 0

	)

530 
	#EVDNS_AUTHORITY_SECTION
 1

	)

531 
	#EVDNS_ADDITIONAL_SECTION
 2

	)

533 
	#EVDNS_TYPE_A
 1

	)

534 
	#EVDNS_TYPE_NS
 2

	)

535 
	#EVDNS_TYPE_CNAME
 5

	)

536 
	#EVDNS_TYPE_SOA
 6

	)

537 
	#EVDNS_TYPE_PTR
 12

	)

538 
	#EVDNS_TYPE_MX
 15

	)

539 
	#EVDNS_TYPE_TXT
 16

	)

540 
	#EVDNS_TYPE_AAAA
 28

	)

542 
	#EVDNS_QTYPE_AXFR
 252

	)

543 
	#EVDNS_QTYPE_ALL
 255

	)

545 
	#EVDNS_CLASS_INET
 1

	)

548 
	#EVDNS_FLAGS_AA
 0x400

	)

549 
	#EVDNS_FLAGS_RD
 0x080

	)

561 
evdns_£rvФ_p№t
 *
evdns_add_£rvФ_p№t_wЩh_ba£
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
sockС
, 
is_tэ
, 
evdns_їque°_€ќback_в_ty≥
 
€ќback
, *
u£r_d©a
);

563 
evdns_юo£_£rvФ_p№t
(
evdns_£rvФ_p№t
 *
p№t
);

568 
evdns_£rvФ_їque°_£t_жags
(
evdns_£rvФ_їque°
 *
їq
, 
жags
);

572 
evdns_£rvФ_їque°_add_їґy
(
evdns_£rvФ_їque°
 *
їq
, 
£щiЏ
, cЏ° *
«me
, 
ty≥
, 
dns_юass
, 
Йl
, 
d©ЃТ
, 
is_«me
, cЏ° *
d©a
);

573 
evdns_£rvФ_їque°_add_a_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, 
n
, *
addrs
, 
Йl
);

574 
evdns_£rvФ_їque°_add_ѓѓ_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, 
n
, *
addrs
, 
Йl
);

575 
evdns_£rvФ_їque°_add_±r_їґy
(
evdns_£rvФ_їque°
 *
їq
, 
Ъ_addr
 *
Ъ
, cЏ° *
Ъaddr_«me
, cЏ° *
ho°«me
, 
Йl
);

576 
evdns_£rvФ_їque°_add_ъame_їґy
(
evdns_£rvФ_їque°
 *
їq
, cЏ° *
«me
, cЏ° *
ъame
, 
Йl
);

581 
evdns_£rvФ_їque°_ї•Џd
(
evdns_£rvФ_їque°
 *
їq
, 
Фr
);

585 
evdns_£rvФ_їque°_drЁ
(
evdns_£rvФ_їque°
 *
їq
);

586 
sockaddr
;

590 
evdns_£rvФ_їque°_gС_їque°Ъg_addr
(
evdns_£rvФ_їque°
 *
_їq
, 
sockaddr
 *
І
, 
addr_Ћn
);

593 (*
evdns_gСaddrЪfo_cb
)(
	tїsu…
, 
	tevutЮ_addrЪfo
 *
	tїs
, *
	tђg
);

595 
evdns_ba£
;

596 
evdns_gСaddrЪfo_їque°
;

614 
evdns_gСaddrЪfo_їque°
 *
evdns_gСaddrЪfo
(

615 
evdns_ba£
 *
dns_ba£
,

616 cЏ° *
nodТame
, cЏ° *
£rv«me
,

617 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
,

618 
evdns_gСaddrЪfo_cb
 
cb
, *
ђg
);

623 
evdns_gСaddrЪfo_€nыl
(
evdns_gСaddrЪfo_їque°
 *
їq
);

625 #ifdeа
__эlu•lus


	@include/event2/dns_compat.h

27 #iвdeа
_EVENT2_DNS_COMPAT_H_


28 
	#_EVENT2_DNS_COMPAT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

68 
evdns_ЪЩ
();

70 
evdns_ba£
;

78 
evdns_ba£
 *
evdns_gС_globЃ_ba£
();

95 
evdns_shutdown
(
зЮ_їque°s
);

111 
evdns_«me£rvФ_add
(
addїss
);

128 
evdns_couЅ_«me£rvФs
();

142 
evdns_юЧr_«me£rvФs_™d_su•Тd
();

157 
evdns_їsume
();

172 
evdns_«me£rvФ_Э_add
(cЏ° *
Э_as_°rЪg
);

188 
evdns_їsёve_Эv4
(cЏ° *
«me
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

200 
evdns_їsёve_Эv6
(cЏ° *
«me
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

202 
Ъ_addr
;

203 
Ъ6_addr
;

219 
evdns_їsёve_їvФ£
(cЏ° 
Ъ_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

235 
evdns_їsёve_їvФ£_Эv6
(cЏ° 
Ъ6_addr
 *
Ъ
, 
жags
, 
evdns_€ќback_ty≥
 
€ќback
, *
±r
);

253 
evdns_£t_ЁtiЏ
(cЏ° *
ЁtiЏ
, cЏ° *
vЃ
, 
жags
);

280 
evdns_їsёv_cЏf_Јr£
(
жags
, cЏ° *cЏ° 
fЮТame
);

289 
evdns_£ђch_юЧr
();

300 
evdns_£ђch_add
(cЏ° *
domaЪ
);

314 
evdns_£ђch_ndўs_£t
(cЏ° 
ndўs
);

324 
evdns_£rvФ_p№t
 *
evdns_add_£rvФ_p№t
(
evutЮ_sockС_t
 
sockС
, 
is_tэ
, 
evdns_їque°_€ќback_в_ty≥
 
€ќback
, *
u£r_d©a
);

326 #ifdeа
WIN32


327 
evdns_cЏfig_wЪdows_«me£rvФs
();

328 
	#EVDNS_CONFIG_WINDOWS_NAMESERVERS_IMPLEMENTED


	)

331 #ifdeа
__эlu•lus


	@include/event2/dns_struct.h

27 #iвdeа
_EVENT2_DNS_STRUCT_H_


28 
	#_EVENT2_DNS_STRUCT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

56 
	sevdns_£rvФ_їque°
 {

57 
жags
;

58 
nque°iЏs
;

59 
evdns_£rvФ_que°iЏ
 **
que°iЏs
;

61 
	sevdns_£rvФ_que°iЏ
 {

62 
ty≥
;

63 #ifdeа
__эlu•lus


64 
dns_que°iЏ_юass
;

69 
юass
;

70 
	#dns_que°iЏ_юass
 
юass


	)

72 
«me
[1];

75 #ifdeа
__эlu•lus


	@include/event2/event.h

27 #iвdeа
_EVENT2_EVENT_H_


28 
	#_EVENT2_EVENT_H_


	)

36 #ifdeа
__эlu•lus


40 
	~<evТt-cЏfig.h
>

41 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


42 
	~<sys/ty≥s.h
>

44 #ifdeа
_EVENT_HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

48 
	~<°dio.h
>

51 
	~<evТt2/utЮ.h
>

53 
evТt_ba£
;

54 
evТt
;

55 
evТt_cЏfig
;

74 
evТt_ТabЋ_debug_mode
();

83 
evТt_debug_u«ssign
(
evТt
 *);

95 
evТt_ba£
 *
evТt_ba£_√w
();

107 
evТt_їЪЩ
(
evТt_ba£
 *
ba£
);

115 
evТt_ba£_di•©ch
(
evТt_ba£
 *);

123 cЏ° *
evТt_ba£_gС_mСhod
(cЏ° 
evТt_ba£
 *);

137 cЏ° **
evТt_gС_suµ№Лd_mСhods
();

149 
evТt_cЏfig
 *
evТt_cЏfig_√w
();

156 
evТt_cЏfig_дУ
(
evТt_cЏfig
 *
cfg
);

169 
evТt_cЏfig_avoid_mСhod
(
evТt_cЏfig
 *
cfg
, cЏ° *
mСhod
);

171 
	eevТt_mСhod_г©uї
 {

173 
EV_FEATURE_ET
 = 0x01,

178 
EV_FEATURE_O1
 = 0x02,

181 
EV_FEATURE_FDS
 = 0x04

184 
	eevТt_ba£_cЏfig_жag
 {

187 
EVENT_BASE_FLAG_NOLOCK
 = 0x01,

190 
EVENT_BASE_FLAG_IGNORE_ENV
 = 0x02,

192 
EVENT_BASE_FLAG_STARTUP_IOCP
 = 0x04,

196 
EVENT_BASE_FLAG_NO_CACHE_TIME
 = 0x08,

202 
evТt_ba£_gС_г©uїs
(cЏ° 
evТt_ba£
 *
ba£
);

225 
evТt_cЏfig_їquЬe_г©uїs
(
evТt_cЏfig
 *
cfg
, 
г©uї
);

229 
evТt_cЏfig_£t_жag
(
evТt_cЏfig
 *
cfg
, 
жag
);

243 
evТt_ba£
 *
evТt_ba£_√w_wЩh_cЏfig
(cЏ° 
evТt_cЏfig
 *);

253 
evТt_ba£_дУ
(
evТt_ba£
 *);

255 
	#_EVENT_LOG_DEBUG
 0

	)

256 
	#_EVENT_LOG_MSG
 1

	)

257 
	#_EVENT_LOG_WARN
 2

	)

258 
	#_EVENT_LOG_ERR
 3

	)

259 (*
evТt_log_cb
)(
	t£vФЩy
, cЏ° *
	tmsg
);

267 
evТt_£t_log_€ќback
(
evТt_log_cb
 
cb
);

281 (*
evТt_зПl_cb
)(
	tФr
);

282 
evТt_£t_зПl_€ќback
(
evТt_зПl_cb
 
cb
);

290 
evТt_ba£_£t
(
evТt_ba£
 *, 
evТt
 *);

296 
	#EVLOOP_ONCE
 0x01

	)

297 
	#EVLOOP_NONBLOCK
 0x02

	)

311 
evТt_ba£_loЁ
(
evТt_ba£
 *, );

327 
evТt_ba£_loЁexЩ
(
evТt_ba£
 *, cЏ° 
timevЃ
 *);

342 
evТt_ba£_loЁbїak
(
evТt_ba£
 *);

356 
evТt_ba£_gў_exЩ
(
evТt_ba£
 *);

370 
evТt_ba£_gў_bїak
(
evТt_ba£
 *);

375 
	#EV_TIMEOUT
 0x01

	)

376 
	#EV_READ
 0x02

	)

377 
	#EV_WRITE
 0x04

	)

378 
	#EV_SIGNAL
 0x08

	)

380 
	#EV_PERSIST
 0x10

	)

382 
	#EV_ET
 0x20

	)

392 
	#evtimФ_assign
(
ev
, 
b
, 
cb
, 
ђg
) \

393 
	`evТt_assign
((
ev
), (
b
), -1, 0, (
cb
), (
ђg
))

	)

394 
	#evtimФ_√w
(
b
, 
cb
, 
ђg
и
	`evТt_√w
((b), -1, 0, (cb), (ђg))

	)

402 
	#evtimФ_add
(
ev
, 
tv
и
	`evТt_add
(”v), (tv))

	)

409 
	#evtimФ_dЦ
(
ev
и
	`evТt_dЦ
”v)

	)

410 
	#evtimФ_≥ndЪg
(
ev
, 
tv
и
	`evТt_≥ndЪg
(”v), 
EV_TIMEOUT
, (tv))

	)

411 
	#evtimФ_ЪЩЯlized
(
ev
и
	`_evТt_ЪЩЯlized
(”v), 0)

	)

413 
	#evsig«l_add
(
ev
, 
tv
и
	`evТt_add
(”v), (tv))

	)

414 
	#evsig«l_assign
(
ev
, 
b
, 
x
, 
cb
, 
ђg
) \

415 
	`evТt_assign
((
ev
), (
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, (
ђg
))

	)

416 
	#evsig«l_√w
(
b
, 
x
, 
cb
, 
ђg
) \

417 
	`evТt_√w
((
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
ђg
))

	)

418 
	#evsig«l_dЦ
(
ev
и
	`evТt_dЦ
”v)

	)

419 
	#evsig«l_≥ndЪg
(
ev
, 
tv
и
	`evТt_≥ndЪg
(”v), 
EV_SIGNAL
, (tv))

	)

420 
	#evsig«l_ЪЩЯlized
(
ev
и
	`_evТt_ЪЩЯlized
(”v), 0)

	)

422 (*
evТt_€ќback_в
)(
	tevutЮ_sockС_t
, , *);

459 
evТt_assign
(
evТt
 *, 
evТt_ba£
 *, 
evutЮ_sockС_t
, , 
evТt_€ќback_в
, *);

468 
evТt
 *
evТt_√w
(
evТt_ba£
 *, 
evutЮ_sockС_t
, , 
evТt_€ќback_в
, *);

473 
evТt_дУ
(
evТt
 *);

493 
evТt_ba£_Џы
(
evТt_ba£
 *, 
evutЮ_sockС_t
, , 
evТt_€ќback_в
, *, cЏ° 
timevЃ
 *);

513 
evТt_add
(
evТt
 *, cЏ° 
timevЃ
 *);

526 
evТt_dЦ
(
evТt
 *);

536 
evТt_aщive
(
evТt
 *, , );

553 
evТt_≥ndЪg
(cЏ° 
evТt
 *, , 
timevЃ
 *);

570 
	#evТt_ЪЩЯlized
(
ev
и
	`_evТt_ЪЩЯlized
(”v), 1)

	)

572 
_evТt_ЪЩЯlized
(cЏ° 
evТt
 *, 
check_fd
);

577 
	#evТt_gС_sig«l
(
ev
и(()
	`evТt_gС_fd
”v))

	)

582 
evutЮ_sockС_t
 
evТt_gС_fd
(cЏ° 
evТt
 *
ev
);

587 
evТt_ba£
 *
evТt_gС_ba£
(cЏ° 
evТt
 *
ev
);

592 
evТt_gС_evТts
(cЏ° 
evТt
 *
ev
);

597 
evТt_€ќback_в
 
evТt_gС_€ќback
(cЏ° 
evТt
 *
ev
);

602 *
evТt_gС_€ќback_ђg
(cЏ° 
evТt
 *
ev
);

604 
evТt_gС_assignmТt
(cЏ° 
evТt
 *evТt, 
evТt_ba£
 **
ba£_out
, 
evutЮ_sockС_t
 *
fd_out
, *
evТts_out
, 
evТt_€ќback_в
 *
€ќback_out
, **
ђg_out
);

614 
size_t
 
evТt_gС_°ruщ_evТt_size
();

625 cЏ° *
evТt_gС_vФsiЏ
();

638 
ev_uЪt32_t
 
evТt_gС_vФsiЏ_numbФ
();

641 
	#LIBEVENT_VERSION
 
_EVENT_VERSION


	)

644 
	#LIBEVENT_VERSION_NUMBER
 
_EVENT_NUMERIC_VERSION


	)

646 
	#EVENT_MAX_PRIORITIES
 256

	)

657 
evТt_ba£_іi№Щy_ЪЩ
(
evТt_ba£
 *, );

668 
evТt_іi№Щy_£t
(
evТt
 *, );

688 cЏ° 
timevЃ
 *
evТt_ba£_ЪЩ_commЏ_timeout
(
evТt_ba£
 *
ba£
,

689 cЏ° 
timevЃ
 *
duњtiЏ
);

691 #iвdeа
_EVENT_DISABLE_MM_REPLACEMENT


709 
evТt_£t_mem_funщiЏs
(*(*
mЃloc_в
)(
size_t
 
sz
),

710 *(*
їЃloc_в
)(*
±r
, 
size_t
 
sz
),

711 (*
дУ_в
)(*
±r
));

712 
	#EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED


	)

715 
evТt_ba£_dump_evТts
(
evТt_ba£
 *, 
FILE
 *);

728 
evТt_ba£_gСtimeofday_€ched
(
evТt_ba£
 *
ba£
,

729 
timevЃ
 *
tv
);

731 #ifdeа
__эlu•lus


	@include/event2/event_compat.h

27 #iвdeа
_EVENT2_EVENT_COMPAT_H_


28 
	#_EVENT2_EVENT_COMPAT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

65 
evТt_ba£
 *
evТt_ЪЩ
();

80 
evТt_di•©ch
();

96 
evТt_loЁ
();

116 
evТt_loЁexЩ
(cЏ° 
timevЃ
 *);

135 
evТt_loЁbїak
();

159 
evТt_Џы
(
evutЮ_sockС_t
 , ,

160 (*)(
evutЮ_sockС_t
, , *), *, cЏ° 
timevЃ
 *);

172 cЏ° *
evТt_gС_mСhod
();

199 
evТt_іi№Щy_ЪЩ
();

235 
evТt_£t
(
evТt
 *, 
evutЮ_sockС_t
, , (*)(evutil_socket_t, , *), *);

237 
	#evtimФ_£t
(
ev
, 
cb
, 
ђg
и
	`evТt_£t
(”v), -1, 0, (cb), (ђg))

	)

238 
	#evsig«l_£t
(
ev
, 
x
, 
cb
, 
ђg
) \

239 
	`evТt_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
ђg
))

	)

251 
	#timeout_add
(
ev
, 
tv
и
	`evТt_add
(”v), (tv))

	)

264 
	#timeout_£t
(
ev
, 
cb
, 
ђg
и
	`evТt_£t
(”v), -1, 0, (cb), (ђg))

	)

274 
	#timeout_dЦ
(
ev
и
	`evТt_dЦ
”v)

	)

280 
	#timeout_≥ndЪg
(
ev
, 
tv
и
	`evТt_≥ndЪg
(”v), 
EV_TIMEOUT
, (tv))

	)

285 
	#timeout_ЪЩЯlized
(
ev
и
	`_evТt_ЪЩЯlized
(”v), 0)

	)

291 
	#sig«l_add
(
ev
, 
tv
и
	`evТt_add
(”v), (tv))

	)

296 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
ђg
) \

297 
	`evТt_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
ђg
))

	)

302 
	#sig«l_assign
(
ev
, 
b
, 
x
, 
cb
, 
ђg
) \

303 
	`evТt_assign
((
ev
), (
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
ђg
))

	)

308 
	#sig«l_√w
(
b
, 
x
, 
cb
, 
ђg
) \

309 
	`evТt_√w
((
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
ђg
))

	)

314 
	#sig«l_dЦ
(
ev
и
	`evТt_dЦ
”v)

	)

319 
	#sig«l_≥ndЪg
(
ev
, 
tv
и
	`evТt_≥ndЪg
(”v), 
EV_SIGNAL
, (tv))

	)

324 
	#sig«l_ЪЩЯlized
(
ev
и
	`_evТt_ЪЩЯlized
(”v), 0)

	)

326 #iвdeа
EVENT_FD


328 
	#EVENT_FD
(
ev
и(()
	`evТt_gС_fd
”v))

	)

329 
	#EVENT_SIGNAL
(
ev
и
	`evТt_gС_sig«l
”v)

	)

332 #ifdeа
__эlu•lus


	@include/event2/event_struct.h

27 #iвdeа
_EVENT2_EVENT_STRUCT_H_


28 
	#_EVENT2_EVENT_STRUCT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

52 
	#EVLIST_TIMEOUT
 0x01

	)

53 
	#EVLIST_INSERTED
 0x02

	)

54 
	#EVLIST_SIGNAL
 0x04

	)

55 
	#EVLIST_ACTIVE
 0x08

	)

56 
	#EVLIST_INTERNAL
 0x10

	)

57 
	#EVLIST_INIT
 0x80

	)

60 
	#EVLIST_ALL
 (0xf000 | 0x9f)

	)

63 #iвdeа
TAILQ_ENTRY


64 
	#_EVENT_DEFINED_TQENTRY


	)

65 
	#TAILQ_ENTRY
(
ty≥
) \

67 
ty≥
 *
tqe_√xt
; \

68 
ty≥
 **
tqe_іev
; \

69 }

	)

72 
evТt_ba£
;

73 
	sevТt
 {

74 
TAILQ_ENTRY
 (
evТt
и(
ev_aщive_√xt
);

75 
TAILQ_ENTRY
 (
evТt
и(
ev_√xt
);

78 
TAILQ_ENTRY
 (
evТt
и(
ev_√xt_wЩh_commЏ_timeout
);

79 
mЪ_hЧp_idx
;

80 } 
ev_timeout_pos
;

81 
evutЮ_sockС_t
 
ev_fd
;

83 
evТt_ba£
 *
ev_ba£
;

88 
TAILQ_ENTRY
 (
evТt
и(
ev_io_√xt
);

89 
timevЃ
 
ev_timeout
;

90 } 
ev_io
;

94 
TAILQ_ENTRY
 (
evТt
и(
ev_sig«l_√xt
);

95 
ev_n€ќs
;

97 *
ev_≤€ќs
;

98 } 
ev_sig«l
;

99 } 
_ev
;

101 
ev_evТts
;

102 
ev_їs
;

103 
ev_жags
;

104 
ev_uЪt8_t
 
ev_іi
;

105 
ev_uЪt8_t
 
ev_юosuї
;

106 
timevЃ
 
ev_timeout
;

109 (*
ev_€ќback
)(
evutЮ_sockС_t
, , *
ђg
);

110 *
ev_ђg
;

117 
	sevkeyvЃ
 {

118 
TAILQ_ENTRY
(
evkeyvЃ
и
√xt
;

120 *
key
;

121 *
vЃue
;

124 #ifdeа
_EVENT_DEFINED_TQENTRY


125 #undeа
TAILQ_ENTRY


126 
evТt_li°
;

127 
evkeyvЃq
;

128 #undeа
_EVENT_DEFINED_TQENTRY


130 
TAILQ_HEAD
 (
evТt_li°
, 
evТt
);

131 
TAILQ_HEAD
 (
evkeyvЃq
, 
evkeyvЃ
);

134 #ifdeа
__эlu•lus


	@include/event2/http.h

27 #iвdeа
_EVENT2_HTTP_H_


28 
	#_EVENT2_HTTP_H_


	)

31 
	~<evТt2/utЮ.h
>

33 #ifdeа
__эlu•lus


38 
evbufгr
;

39 
evТt_ba£
;

53 
	#HTTP_OK
 200

	)

54 
	#HTTP_NOCONTENT
 204

	)

55 
	#HTTP_MOVEPERM
 301

	)

56 
	#HTTP_MOVETEMP
 302

	)

57 
	#HTTP_NOTMODIFIED
 304

	)

58 
	#HTTP_BADREQUEST
 400

	)

59 
	#HTTP_NOTFOUND
 404

	)

60 
	#HTTP_SERVUNAVAIL
 503

	)

62 
evhЙp
;

63 
evhЙp_їque°
;

64 
evkeyvЃq
;

65 
evhЙp_bound_sockС
;

74 
evhЙp
 *
evhЙp_√w
(
evТt_ba£
 *
ba£
);

88 
evhЙp_bЪd_sockС
(
evhЙp
 *
hЙp
, cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
);

101 
evhЙp_bound_sockС
 *
evhЙp_bЪd_sockС_wЩh_h™dЋ
(
evhЙp
 *
hЙp
, cЏ° *
addїss
, 
ev_uЪt16_t
 
p№t
);

119 
evhЙp_acы±_sockС
(
evhЙp
 *
hЙp
, 
evutЮ_sockС_t
 
fd
);

131 
evhЙp_bound_sockС
 *
evhЙp_acы±_sockС_wЩh_h™dЋ
(
evhЙp
 *
hЙp
, 
evutЮ_sockС_t
 
fd
);

147 
evhЙp_dЦ_acы±_sockС
(
evhЙp
 *
hЙp
, 
evhЙp_bound_sockС
 *
bound_sockС
);

156 
evutЮ_sockС_t
 
evhЙp_bound_sockС_gС_fd
(
evhЙp_bound_sockС
 *
bound_sockС
);

166 
evhЙp_дУ
(
evhЙp
* 
hЙp
);

169 
evhЙp_£t_max_hЧdФs_size
(
evhЙp
* 
hЙp
, 
ev_ssize_t
 
max_hЧdФs_size
);

171 
evhЙp_£t_max_body_size
(
evhЙp
* 
hЙp
, 
ev_ssize_t
 
max_body_size
);

182 
evhЙp_£t_cb
(
evhЙp
 *
hЙp
, cЏ° *
Јth
,

183 (*
cb
)(
evhЙp_їque°
 *, *), *
cb_ђg
);

186 
evhЙp_dЦ_cb
(
evhЙp
 *, const *);

199 
evhЙp_£t_gТcb
(
evhЙp
 *
hЙp
,

200 (*
cb
)(
evhЙp_їque°
 *, *), *
ђg
);

224 
evhЙp_add_vЬtuЃ_ho°
(
evhЙp
* 
hЙp
, cЏ° *
ЈЙФn
,

225 
evhЙp
* 
vho°
);

235 
evhЙp_їmove_vЬtuЃ_ho°
(
evhЙp
* 
hЙp
, evhЙp* 
vho°
);

244 
evhЙp_£t_timeout
(
evhЙp
 *
hЙp
, 
timeout_Ъ_£cs
);

255 
evhЙp_£nd_Фr№
(
evhЙp_їque°
 *
їq
, 
Фr№
,

256 cЏ° *
їasЏ
);

271 
evhЙp_£nd_їґy
(
evhЙp_їque°
 *
їq
, 
code
,

272 cЏ° *
їasЏ
, 
evbufгr
 *
d©abuf
);

290 
evhЙp_£nd_їґy_°ђt
(
evhЙp_їque°
 *
їq
, 
code
,

291 cЏ° *
їasЏ
);

304 
evhЙp_£nd_їґy_chunk
(
evhЙp_їque°
 *
їq
,

305 
evbufгr
 *
d©abuf
);

311 
evhЙp_£nd_їґy_Тd
(
evhЙp_їque°
 *
їq
);

318 
	eevhЙp_cmd_ty≥
 {

319 
EVHTTP_REQ_GET
,

320 
EVHTTP_REQ_POST
,

321 
EVHTTP_REQ_HEAD
,

322 
EVHTTP_REQ_PUT
,

323 
EVHTTP_REQ_DELETE


327 
	eevhЙp_їque°_kЪd
 { 
EVHTTP_REQUEST
, 
EVHTTP_RESPONSE
 };

334 
evhЙp_їque°
 *
evhЙp_їque°_√w
(

335 (*
cb
)(
evhЙp_їque°
 *, *), *
ђg
);

344 
evhЙp_їque°_£t_chunked_cb
(
evhЙp_їque°
 *,

345 (*
cb
)(
evhЙp_їque°
 *, *));

348 
evhЙp_їque°_дУ
(
evhЙp_їque°
 *
їq
);

350 
evdns_ba£
;

364 
evhЙp_cЏ√щiЏ
 *
evhЙp_cЏ√щiЏ_ba£_√w
(

365 
evТt_ba£
 *
ba£
, 
evdns_ba£
 *
dnsba£
,

366 cЏ° *
addїss
, 
p№t
);

373 
evhЙp_їque°_own
(
evhЙp_їque°
 *
їq
);

376 
evhЙp_їque°_is_ow√d
(
evhЙp_їque°
 *
їq
);

384 
evhЙp_cЏ√щiЏ
 *
evhЙp_їque°_gС_cЏ√щiЏ
(
evhЙp_їque°
 *
їq
);

386 
evhЙp_cЏ√щiЏ_£t_max_hЧdФs_size
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

387 
ev_ssize_t
 
√w_max_hЧdФs_size
);

389 
evhЙp_cЏ√щiЏ_£t_max_body_size
(
evhЙp_cЏ√щiЏ
* 
evcЏ
,

390 
ev_ssize_t
 
√w_max_body_size
);

393 
evhЙp_cЏ√щiЏ_дУ
(
evhЙp_cЏ√щiЏ
 *
evcЏ
);

396 
evhЙp_cЏ√щiЏ_£t_lo€l_addїss
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

397 cЏ° *
addїss
);

400 
evhЙp_cЏ√щiЏ_£t_lo€l_p№t
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

401 
ev_uЪt16_t
 
p№t
);

403 
evhЙp_cЏ√щiЏ_£t_cЏncb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

404 (*
cЏncb
)(
evhЙp_cЏ√щiЏ
 *, *), *
cЏncb_ђg
);

407 
evhЙp_cЏ√щiЏ_£t_timeout
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

408 
timeout_Ъ_£cs
);

411 
evhЙp_cЏ√щiЏ_£t_їМЫs
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

412 
їМy_max
);

415 
evhЙp_cЏ√щiЏ_£t_юo£cb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

416 (*)(
evhЙp_cЏ√щiЏ
 *, *), *);

419 
evhЙp_cЏ√щiЏ_gС_≥Ф
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

420 **
addїss
, 
ev_uЪt16_t
 *
p№t
);

435 
evhЙp_make_їque°
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

436 
evhЙp_їque°
 *
їq
,

437 
evhЙp_cmd_ty≥
 
ty≥
, cЏ° *
uri
);

452 
evhЙp_€nыl_їque°
(
evhЙp_їque°
 *
їq
);

456 cЏ° *
evhЙp_їque°_gС_uri
(
evhЙp_їque°
 *
їq
);

458 
evkeyvЃq
 *
evhЙp_їque°_gС_Ъput_hЧdФs
(
evhЙp_їque°
 *
їq
);

460 
evkeyvЃq
 *
evhЙp_їque°_gС_ouНut_hЧdФs
(
evhЙp_їque°
 *
їq
);

462 
evbufгr
 *
evhЙp_їque°_gС_Ъput_bufгr
(
evhЙp_їque°
 *
їq
);

464 
evbufгr
 *
evhЙp_їque°_gС_ouНut_bufгr
(
evhЙp_їque°
 *
їq
);

477 cЏ° *
evhЙp_fЪd_hЧdФ
(cЏ° 
evkeyvЃq
 *
hЧdФs
,

478 cЏ° *
key
);

488 
evhЙp_їmove_hЧdФ
(
evkeyvЃq
 *
hЧdФs
, cЏ° *
key
);

499 
evhЙp_add_hЧdФ
(
evkeyvЃq
 *
hЧdФs
, cЏ° *
key
, cЏ° *
vЃue
);

506 
evhЙp_юЧr_hЧdФs
(
evkeyvЃq
 *
hЧdФs
);

519 *
evhЙp_Тcode_uri
(cЏ° *
uri
);

530 *
evhЙp_decode_uri
(cЏ° *
uri
);

548 
evhЙp_Јr£_quФy
(cЏ° *
uri
, 
evkeyvЃq
 *
hЧdФs
);

562 *
evhЙp_htmЋs€≥
(cЏ° *
html
);

564 #ifdeа
__эlu•lus


	@include/event2/http_compat.h

27 #iвdeа
_EVENT2_HTTP_COMPAT_H_


28 
	#_EVENT2_HTTP_COMPAT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

61 
evhЙp
 *
evhЙp_°ђt
(cЏ° *
addїss
, 
p№t
);

70 
evhЙp_cЏ√щiЏ
 *
evhЙp_cЏ√щiЏ_√w
(

71 cЏ° *
addїss
, 
p№t
);

79 
evhЙp_cЏ√щiЏ_£t_ba£
(
evhЙp_cЏ√щiЏ
 *
evcЏ
,

80 
evТt_ba£
 *
ba£
);

84 
	#evhЙp_їque°_uri
 
evhЙp_їque°_gС_uri


	)

86 #ifdeа
__эlu•lus


	@include/event2/http_struct.h

27 #iвdeа
_EVENT2_HTTP_STRUCT_H_


28 
	#_EVENT2_HTTP_STRUCT_H_


	)

37 #ifdeа
__эlu•lus


41 
	~<evТt-cЏfig.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


43 
	~<sys/ty≥s.h
>

45 #ifdeа
_EVENT_HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

50 
	~<evТt2/utЮ.h
>

57 
	sevhЙp_їque°
 {

58 #iа
defЪed
(
TAILQ_ENTRY
)

59 
TAILQ_ENTRY
(
evhЙp_їque°
и
√xt
;

62 
evhЙp_їque°
 *
tqe_√xt
;

63 
evhЙp_їque°
 **
tqe_іev
;

64 } 
√xt
;

68 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

69 
жags
;

71 
	#EVHTTP_REQ_OWN_CONNECTION
 0x0001

	)

73 
	#EVHTTP_PROXY_REQUEST
 0x0002

	)

75 
	#EVHTTP_USER_OWNED
 0x0004

	)

77 
	#EVHTTP_REQ_DEFER_FREE
 0x0008

	)

79 
	#EVHTTP_REQ_NEEDS_FREE
 0x0010

	)

81 
evkeyvЃq
 *
Ъput_hЧdФs
;

82 
evkeyvЃq
 *
ouНut_hЧdФs
;

85 *
їmўe_ho°
;

86 
ev_uЪt16_t
 
їmўe_p№t
;

88 
evhЙp_їque°_kЪd
 
kЪd
;

89 
evhЙp_cmd_ty≥
 
ty≥
;

91 
size_t
 
hЧdФs_size
;

92 
size_t
 
body_size
;

94 *
uri
;

96 
maj№
;

97 
mЪ№
;

99 
ї•Џ£_code
;

100 *
ї•Џ£_code_lЪe
;

102 
evbufгr
 *
Ъput_bufгr
;

103 
ev_Ъt64_t
 
Ѕ№Чd
;

104 
chunked
:1,

105 
u£rdЏe
:1;

107 
evbufгr
 *
ouНut_bufгr
;

110 (*
cb
)(
evhЙp_їque°
 *, *);

111 *
cb_ђg
;

113 
Фr№
;

120 (*
chunk_cb
)(
evhЙp_їque°
 *, *);

123 #ifdeа
__эlu•lus


	@include/event2/listener.h

27 #iвdeа
_EVENT2_LISTENER_H_


28 
	#_EVENT2_LISTENER_H_


	)

30 #ifdeа
__эlu•lus


34 
	~<evТt2/evТt.h
>

36 
sockaddr
;

37 
evcЏ∆i°ТФ
;

48 (*
evcЏ∆i°ТФ_cb
)(
	tevcЏ∆i°ТФ
 *, 
	tevutЮ_sockС_t
, 
	tsockaddr
 *, 
	tsockЋn
, *);

52 
	#LEV_OPT_LEAVE_SOCKETS_BLOCKING
 (1u<<0)

	)

55 
	#LEV_OPT_CLOSE_ON_FREE
 (1u<<1)

	)

57 
	#LEV_OPT_CLOSE_ON_EXEC
 (1u<<2)

	)

60 
	#LEV_OPT_REUSEABLE
 (1u<<3)

	)

77 
evcЏ∆i°ТФ
 *
evcЏ∆i°ТФ_√w
(
evТt_ba£
 *
ba£
,

78 
evcЏ∆i°ТФ_cb
 
cb
, *
±r
, 
жags
, 
backlog
,

79 
evutЮ_sockС_t
 
fd
);

93 
evcЏ∆i°ТФ
 *
evcЏ∆i°ТФ_√w_bЪd
(
evТt_ba£
 *
ba£
,

94 
evcЏ∆i°ТФ_cb
 
cb
, *
±r
, 
жags
, 
backlog
,

95 cЏ° 
sockaddr
 *
І
, 
sockЋn
);

99 
evcЏ∆i°ТФ_дУ
(
evcЏ∆i°ТФ
 *
Ћv
);

103 
evcЏ∆i°ТФ_ТabЋ
(
evcЏ∆i°ТФ
 *
Ћv
);

107 
evcЏ∆i°ТФ_diІbЋ
(
evcЏ∆i°ТФ
 *
Ћv
);

110 
evТt_ba£
 *
evcЏ∆i°ТФ_gС_ba£
(
evcЏ∆i°ТФ
 *
Ћv
);

113 
evutЮ_sockС_t
 
evcЏ∆i°ТФ_gС_fd
(
evcЏ∆i°ТФ
 *
Ћv
);

115 #ifdeа
__эlu•lus


	@include/event2/rpc.h

27 #iвdeа
_EVENT2_RPC_H_


28 
	#_EVENT2_RPC_H_


	)

30 #ifdeа
__эlu•lus


76 
	#EVTAG_HAS
(
msg
, 
membФ
) \

77 ((
msg
)->
membФ
##
_£t
 =р1)

	)

79 #iвdeа
_EVENT2_RPC_COMPAT_H_


88 
	#EVTAG_ASSIGN
(
msg
, 
membФ
, 
vЃue
) \

89 (*(
msg
)->
ba£
->
membФ
##
_assign
)((msg), (
vЃue
))

	)

98 
	#EVTAG_ASSIGN_WITH_LEN
(
msg
, 
membФ
, 
vЃue
, 
Ћn
) \

99 (*(
msg
)->
ba£
->
membФ
##
_assign
)((msg), (
vЃue
), (
Ћn
))

	)

108 
	#EVTAG_GET
(
msg
, 
membФ
, 
pvЃue
) \

109 (*(
msg
)->
ba£
->
membФ
##
_gС
)((msg), (
pvЃue
))

	)

119 
	#EVTAG_GET_WITH_LEN
(
msg
, 
membФ
, 
pvЃue
, 
ґТ
) \

120 (*(
msg
)->
ba£
->
membФ
##
_gС
)((msg), (
pvЃue
), (
ґТ
))

	)

127 
	#EVTAG_ARRAY_ADD_VALUE
(
msg
, 
membФ
, 
vЃue
) \

128 (*(
msg
)->
ba£
->
membФ
##
_add
)((msg), (
vЃue
))

	)

132 
	#EVTAG_ARRAY_ADD
(
msg
, 
membФ
) \

133 (*(
msg
)->
ba£
->
membФ
##
_add
)(msg)

	)

137 
	#EVTAG_ARRAY_GET
(
msg
, 
membФ
, 
off£t
, 
pvЃue
) \

138 (*(
msg
)->
ba£
->
membФ
##
_gС
)((msg), (
off£t
), (
pvЃue
))

	)

142 
	#EVTAG_ARRAY_LEN
(
msg
, 
membФ
и((msg)->membФ##
_Ћngth
)

	)

145 
evbufгr
;

146 
evТt_ba£
;

147 
evљc_їq_gТФic
;

148 
evљc_їque°_wњµФ
;

149 
evљc
;

155 
	#EVRPC_STRUCT
(
љъame
и
evљc_їq__
##
	)
rpcname

157 
evhЙp_їque°
;

158 
evљc_°©us
;

159 
evљc_hook_mСa
;

172 
	#EVRPC_HEADER
(
љъame
, 
їq°ruщ
, 
љly°ruщ
) \

173 
	`EVRPC_STRUCT
(
љъame
) { \

174 
evљc_hook_mСa
 *
hook_mСa
; \

175 
їq°ruщ
* 
їque°
; \

176 
љly°ruщ
* 
їґy
; \

177 
evљc
* 
љc
; \

178 
evhЙp_їque°
* 
hЙp_їq
; \

179 
evbufгr
* 
љc_d©a
; \

181 
evљc_£nd_їque°_
##
	`љъame
(
evљc_poё
 *, \

182 
їq°ruщ
 *, 
љly°ruщ
 *, \

183 (*)(
evљc_°©us
 *, \

184 
їq°ruщ
 *, 
љly°ruщ
 *, *
cbђg
), \

185 *);

	)

187 
evљc_poё
;

190 
evљc_їque°_wњµФ
 *
evљc_make_їque°_щx
(

191 
evљc_poё
 *
poё
, *
їque°
, *
їґy
,

192 cЏ° *
љъame
,

193 (*
їq_mђshЃ
)(
evbufгr
*, *),

194 (*
љl_юЧr
)(*),

195 (*
љl_unmђshЃ
)(*, 
evbufгr
 *),

196 (*
cb
)(
evљc_°©us
 *, *, *, *),

197 *
cbђg
);

213 
	#EVRPC_MAKE_CTX
(
љъame
, 
їq°ruщ
, 
љly°ruщ
, \

214 
poё
, 
їque°
, 
їґy
, 
cb
, 
cbђg
) \

215 
	`evљc_make_їque°_щx
(
poё
, 
їque°
, 
їґy
, \

217 ((*)(
evbufгr
 *, *))
їq°ruщ
##
_mђshЃ
, \

218 ((*)(*))
љly°ruщ
##
_юЧr
, \

219 ((*)(*, 
evbufгr
 *))
љly°ruщ
##
_unmђshЃ
, \

220 ((*)(
evљc_°©us
 *, *, *, *))
cb
, \

221 
cbђg
)

	)

233 
	#EVRPC_GENERATE
(
љъame
, 
їq°ruщ
, 
љly°ruщ
) \

234 
evљc_£nd_їque°_
##
	`љъame
(
evљc_poё
 *
poё
, \

235 
їq°ruщ
 *
їque°
, 
љly°ruщ
 *
їґy
, \

236 (*
cb
)(
evљc_°©us
 *, \

237 
їq°ruщ
 *, 
љly°ruщ
 *, *
cbђg
), \

238 *
cbђg
) { \

239  
	`evљc_£nd_їque°_gТФic
(
poё
, 
їque°
, 
їґy
, \

240 ((*)(
evљc_°©us
 *, *, *, *))
cb
, \

241 
cbђg
, \

243 ((*)(
evbufгr
 *, *))
їq°ruщ
##
_mђshЃ
, \

244 ((*)(*))
љly°ruщ
##
_юЧr
, \

245 ((*)(*, 
evbufгr
 *))
љly°ruщ
##
_unmђshЃ
); \

246 }

	)

257 
	#EVRPC_REQUEST_HTTP
(
љc_їq
и‘pc_їq)->
hЙp_їq


	)

260 
evљc_їque°_dЏe
(
evљc_їq_gТФic
 *
їq
);

270 
	#EVRPC_REQUEST_DONE
(
љc_їq
) do { \

271 
evљc_їq_gТФic
 *
_їq
 = (evљc_їq_gТФiш*)(
љc_їq
); \

272 
	`evљc_їque°_dЏe
(
_їq
); \

273 } 0)

	)

276 
evљc_ba£
;

277 
evhЙp
;

287 
evљc_ba£
 *
evљc_ЪЩ
(
evhЙp
 *
£rvФ
);

297 
evљc_дУ
(
evљc_ba£
 *
ba£
);

315 
	#EVRPC_REGISTER
(
ba£
, 
«me
, 
їque°
, 
їґy
, 
€ќback
, 
cbђg
) \

316 
	`evљc_їgi°Ф_gТФic
(
ba£
, #name, \

317 ((*)(
evљc_їq_gТФic
 *, *))
€ќback
, 
cbђg
, \

318 (*(*)())
їque°
##
_√w
, \

319 ((*)(*))
їque°
##
_дУ
, \

320 ((*)(*, 
evbufгr
 *))
їque°
##
_unmђshЃ
, \

321 (*(*)())
їґy
##
_√w
, \

322 ((*)(*))
їґy
##
_дУ
, \

323 ((*)(*))
їґy
##
_comґСe
, \

324 ((*)(
evbufгr
 *, *))
їґy
##
_mђshЃ
)

	)

333 
evљc_їgi°Ф_љc
(
evљc_ba£
 *, 
evљc
 *,

334 (*)(
evљc_їq_gТФic
*, *), *);

344 
	#EVRPC_UNREGISTER
(
ba£
, 
«me
и
	`evљc_uƒegi°Ф_љc
((ba£), #«me)

	)

346 
evљc_uƒegi°Ф_љc
(
evљc_ba£
 *
ba£
, cЏ° *
«me
);

352 
evhЙp_cЏ√щiЏ
;

353 
evљc_°©us
;

370 
	#EVRPC_MAKE_REQUEST
(
«me
, 
poё
, 
їque°
, 
їґy
, 
cb
, 
cbђg
) \

371 
evљc_£nd_їque°_
##
	`«me
((
poё
), (
їque°
), (
їґy
), (
cb
), (
cbђg
))

	)

384 
evљc_make_їque°
(
evљc_їque°_wњµФ
 *
щx
);

396 
evљc_poё
 *
evљc_poё_√w
(
evТt_ba£
 *
ba£
);

402 
evљc_poё_дУ
(
evљc_poё
 *
poё
);

412 
evљc_poё_add_cЏ√щiЏ
(
evљc_poё
 *
poё
,

413 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

423 
evљc_poё_їmove_cЏ√щiЏ
(
evљc_poё
 *
poё
,

424 
evhЙp_cЏ√щiЏ
 *
evcЏ
);

441 
evљc_poё_£t_timeout
(
evљc_poё
 *
poё
, 
timeout_Ъ_£cs
);

448 
	eEVRPC_HOOK_TYPE
 {

449 
EVRPC_INPUT
,

450 
EVRPC_OUTPUT


453 #iвdeа
WIN32


456 
	#INPUT
 
EVRPC_INPUT


	)

459 
	#OUTPUT
 
EVRPC_OUTPUT


	)

466 
	eEVRPC_HOOK_RESULT
 {

467 
EVRPC_TERMINATE
 = -1,

468 
EVRPC_CONTINUE
 = 0,

469 
EVRPC_PAUSE
 = 1

488 *
evљc_add_hook
(*
vba£
,

489 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

490 (*
cb
)(*, 
evhЙp_їque°
 *, 
evbufгr
 *, *),

491 *
cb_ђg
);

501 
evљc_їmove_hook
(*
vba£
,

502 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

503 *
h™dЋ
);

511 
evљc_їsume_їque°
(*
vba£
, *
щx
, 
EVRPC_HOOK_RESULT
 
їs
);

524 
evљc_hook_add_mСa
(*
щx
, cЏ° *
key
,

525 cЏ° *
d©a
, 
size_t
 
d©a_size
);

537 
evљc_hook_fЪd_mСa
(*
щx
, cЏ° *
key
,

538 **
d©a
, 
size_t
 *
d©a_size
);

546 
evhЙp_cЏ√щiЏ
 *
evљc_hook_gС_cЏ√щiЏ
(*
щx
);

555 
evљc_£nd_їque°_gТФic
(
evљc_poё
 *
poё
,

556 *
їque°
, *
їґy
,

557 (*
cb
)(
evљc_°©us
 *, *, *, *),

558 *
cb_ђg
,

559 cЏ° *
љъame
,

560 (*
їq_mђshЃ
)(
evbufгr
 *, *),

561 (*
љl_юЧr
)(*),

562 (*
љl_unmђshЃ
)(*, 
evbufгr
 *));

572 
evљc_їgi°Ф_gТФic
(
evљc_ba£
 *
ba£
, cЏ° *
«me
,

573 (*
€ќback
)(
evљc_їq_gТФic
 *, *), *
cbђg
,

574 *(*
їq_√w
)(), (*
їq_дУ
)(*),

575 (*
їq_unmђshЃ
)(*, 
evbufгr
 *),

576 *(*
љl_√w
)(), (*
љl_дУ
)(*),

577 (*
љl_comґСe
)(*),

578 (*
љl_mђshЃ
)(
evbufгr
 *, *));

581 
evљc_poё
* 
evљc_їque°_gС_poё
(
evљc_їque°_wњµФ
 *
щx
);

582 
evљc_їque°_£t_poё
(
evљc_їque°_wњµФ
 *
щx
,

583 
evљc_poё
 *
poё
);

584 
evљc_їque°_£t_cb
(
evљc_їque°_wњµФ
 *
щx
,

585 (*
cb
)(
evљc_°©us
*, *
їque°
, *
їґy
, *
ђg
),

586 *
cb_ђg
);

588 #ifdeа
__эlu•lus


	@include/event2/rpc_compat.h

27 #iвdeа
_EVENT2_RPC_COMPAT_H_


28 
	#_EVENT2_RPC_COMPAT_H_


	)

37 #ifdeа
__эlu•lus


42 #iа
defЪed
(
__GNUC__
и&& !defЪed(
__STRICT_ANSI__
)

44 #undeа
EVTAG_ASSIGN


45 #undeа
EVTAG_GET


46 #undeа
EVTAG_ADD


48 
	#EVTAG_ASSIGN
(
msg
, 
membФ
, 
ђgs
...) \

49 (*(
msg
)->
ba£
->
membФ
##
_assign
)(msg, ## 
ђgs
)

	)

50 
	#EVTAG_GET
(
msg
, 
membФ
, 
ђgs
...) \

51 (*(
msg
)->
ba£
->
membФ
##
_gС
)(msg, ## 
ђgs
)

	)

52 
	#EVTAG_ADD
(
msg
, 
membФ
, 
ђgs
...) \

53 (*(
msg
)->
ba£
->
membФ
##
_add
)(msg, ## 
ђgs
)

	)

55 
	#EVTAG_LEN
(
msg
, 
membФ
и((msg)->membФ##
_Ћngth
)

	)

57 #ifdeа
__эlu•lus


	@include/event2/rpc_struct.h

27 #iвdeа
_EVENT2_RPC_STRUCT_H_


28 
	#_EVENT2_RPC_STRUCT_H_


	)

30 #ifdeа
__эlu•lus


44 
	sevљc_°©us
 {

45 
	#EVRPC_STATUS_ERR_NONE
 0

	)

46 
	#EVRPC_STATUS_ERR_TIMEOUT
 1

	)

47 
	#EVRPC_STATUS_ERR_BADPAYLOAD
 2

	)

48 
	#EVRPC_STATUS_ERR_UNSTARTED
 3

	)

49 
	#EVRPC_STATUS_ERR_HOOKABORTED
 4

	)

50 
Фr№
;

53 
evhЙp_їque°
 *
hЙp_їq
;

59 
	sevљc
 {

60 
TAILQ_ENTRY
(
evљc
и
√xt
;

63 cЏ° * 
uri
;

66 *(*
їque°_√w
)();

69 (*
їque°_дУ
)(*);

72 (*
їque°_unmђshЃ
)(*, 
evbufгr
 *);

75 *(*
їґy_√w
)();

78 (*
їґy_дУ
)(*);

81 (*
їґy_comґСe
)(*);

84 (*
їґy_mђshЃ
)(
evbufгr
*, *);

87 (*
cb
)(
evљc_їq_gТФic
 *, *);

88 *
cb_ђg
;

91 
evљc_ba£
 *
ba£
;

94 #ifdeа
__эlu•lus


	@include/event2/tag.h

27 #iвdeа
_EVENT2_TAG_H_


28 
	#_EVENT2_TAG_H_


	)

36 #ifdeа
__эlu•lus


40 
	~<evТt-cЏfig.h
>

41 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


42 
	~<sys/ty≥s.h
>

44 #ifdeа
_EVENT_HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

49 
	~<evТt2/utЮ.h
>

51 
evbufгr
;

59 
evПg_ЪЩ
();

68 
evПg_unmђshЃ_hЧdФ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
±ag
);

70 
evПg_mђshЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
, cЏ° *
d©a
,

71 
ev_uЪt32_t
 
Ћn
);

72 
evПg_mђshЃ_bufгr
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

73 
evbufгr
 *
d©a
);

85 
evПg_Тcode_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
numbФ
);

86 
evПg_Тcode_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt64_t
 
numbФ
);

88 
evПg_mђshЃ_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

89 
ev_uЪt32_t
 
ЪЛgФ
);

90 
evПg_mђshЃ_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

91 
ev_uЪt64_t
 
ЪЛgФ
);

93 
evПg_mђshЃ_°rЪg
(
evbufгr
 *
buf
, 
ev_uЪt32_t
 
Пg
,

94 cЏ° *
°rЪg
);

96 
evПg_mђshЃ_timevЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
,

97 
timevЃ
 *
tv
);

99 
evПg_unmђshЃ
(
evbufгr
 *
§c
, 
ev_uЪt32_t
 *
±ag
,

100 
evbufгr
 *
d°
);

101 
evПg_≥ek
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
±ag
);

102 
evПg_≥ek_Ћngth
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
ґТgth
);

103 
evПg_Јylяd_Ћngth
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 *
ґТgth
);

104 
evПg_cЏsume
(
evbufгr
 *
evbuf
);

106 
evПg_unmђshЃ_Ъt
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

107 
ev_uЪt32_t
 *
pЪЛgФ
);

108 
evПg_unmђshЃ_Ъt64
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

109 
ev_uЪt64_t
 *
pЪЛgФ
);

111 
evПg_unmђshЃ_fixed
(
evbufгr
 *
§c
, 
ev_uЪt32_t
 
√ed_Пg
,

112 *
d©a
, 
size_t
 
Ћn
);

114 
evПg_unmђshЃ_°rЪg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

115 **
p°rЪg
);

117 
evПg_unmђshЃ_timevЃ
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
,

118 
timevЃ
 *
±v
);

120 #ifdeа
__эlu•lus


	@include/event2/tag_compat.h

27 #iвdeа
_EVENT2_TAG_COMPAT_H_


28 
	#_EVENT2_TAG_COMPAT_H_


	)

36 
	#Тcode_Ъt
(
evbuf
, 
numbФ
и
	`evПg_Тcode_Ъt
(”vbuf), (numbФ))

	)

37 
	#Тcode_Ъt64
(
evbuf
, 
numbФ
и
	`evПg_Тcode_Ъt64
(”vbuf), (numbФ))

	)

	@include/event2/thread.h

26 #iвdeа
_EVENT2_THREAD_H_


27 
	#_EVENT2_THREAD_H_


	)

56 #ifdeа
__эlu•lus


60 
	~<evТt-cЏfig.h
>

64 
	#EVTHREAD_LOCK
 0x01

	)

67 
	#EVTHREAD_UNLOCK
 0x02

	)

70 
	#EVTHREAD_WRITE
 0x04

	)

73 
	#EVTHREAD_READ
 0x08

	)

77 
	#EVTHREAD_TRY
 0x10

	)

79 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


85 
evthїad_£t_lock_ьЧЛ_€ќbacks
(

86 *(*
Ѓloc_в
)(), (*
дУ_в
)(*));

92 
evthїad_£t_lockЪg_€ќback
(

93 (*
lockЪg_в
)(
mode
, *
lock
));

95 
	#EVTHREAD_LOCK_API_VERSION
 1

	)

100 
	#EVTHREAD_LOCKTYPE_RECURSIVE
 1

	)

103 
	#EVTHREAD_LOCKTYPE_READWRITE
 2

	)

109 
	sevthїad_lock_€ќbacks
 {

112 
lock_≠i_vФsiЏ
;

120 
suµ№Лd_lockty≥s
;

123 *(*
Ѓloc
)(
lockty≥
);

126 (*
дУ
)(*
lock
, 
lockty≥
);

129 (*
lock
)(
mode
, *lock);

132 (*
u∆ock
)(
mode
, *
lock
);

143 
evthїad_£t_lock_€ќbacks
(cЏ° 
evthїad_lock_€ќbacks
 *);

152 
evthїad_£t_id_€ќback
(

153 (*
id_в
)());

155 #iа
defЪed
(
WIN32
и&& !defЪed(
_EVENT_DISABLE_THREAD_SUPPORT
)

160 
evthїad_u£_wЪdows_thїads
();

161 
	#EVTHREAD_USE_WINDOWS_THREADS_IMPLEMENTED
 1

	)

164 #iа
defЪed
(
_EVENT_HAVE_PTHREADS
)

170 
evthїad_u£_±hїads
();

171 
	#EVTHREAD_USE_PTHREADS_IMPLEMENTED
 1

	)

178 
evthїad_ТabЋ_lock_debugЪg
();

182 
evТt_ba£
;

188 
evthїad_make_ba£_nўifЯbЋ
(
evТt_ba£
 *
ba£
);

190 #ifdeа
__эlu•lus


	@include/event2/util.h

26 #iвdeа
_EVENT2_UTIL_H_


27 
	#_EVENT2_UTIL_H_


	)

36 #ifdeа
__эlu•lus


40 
	~<evТt-cЏfig.h
>

41 #ifdeа
_EVENT_HAVE_SYS_TIME_H


42 
	~<sys/time.h
>

44 #ifdeа
_EVENT_HAVE_STDINT_H


45 
	~<°dЪt.h
>

46 #Цiа
defЪed
(
_EVENT_HAVE_INTTYPES_H
)

47 
	~<ЪЙy≥s.h
>

49 #ifdeа
_EVENT_HAVE_SYS_TYPES_H


50 
	~<sys/ty≥s.h
>

52 #ifdeа
_EVENT_HAVE_STDDEF_H


53 
	~<°ddef.h
>

55 #ifdeа
_MSC_VER


56 
	~<Ba£Tsd.h
>

58 
	~<°dђg.h
>

59 #ifdeа
_EVENT_HAVE_NETDB_H


60 #iа!
defЪed
(
_GNU_SOURCE
)

61 
	#_GNU_SOURCE


	)

63 
	~<√tdb.h
>

66 #ifdeа
WIN32


67 
	~<wЪsock2.h
>

84 #ifdeа
_EVENT_HAVE_UINT64_T


85 
	#ev_uЪt64_t
 
uЪt64_t


	)

86 
	#ev_Ъt64_t
 
Ъt64_t


	)

87 #Цiа
defЪed
(
WIN32
)

88 
	#ev_uЪt64_t
 
__Ъt64


	)

89 
	#ev_Ъt64_t
 sig√d 
__Ъt64


	)

90 #Цiа
_EVENT_SIZEOF_LONG_LONG
 == 8

91 
	#ev_uЪt64_t
 

	)

92 
	#ev_Ъt64_t
 

	)

93 #Цiа
_EVENT_SIZEOF_LONG
 == 8

94 
	#ev_uЪt64_t
 

	)

95 
	#ev_Ъt64_t
 

	)

100 #ifdeа
_EVENT_HAVE_UINT32_T


101 
	#ev_uЪt32_t
 
uЪt32_t


	)

102 
	#ev_Ъt32_t
 
Ъt32_t


	)

103 #Цiа
defЪed
(
WIN32
)

104 
	#ev_uЪt32_t
 

	)

105 
	#ev_Ъt32_t
 sig√d 

	)

106 #Цiа
_EVENT_SIZEOF_LONG
 == 4

107 
	#ev_uЪt32_t
 

	)

108 
	#ev_Ъt32_t
 sig√d 

	)

109 #Цiа
_EVENT_SIZEOF_INT
 == 4

110 
	#ev_uЪt32_t
 

	)

111 
	#ev_Ъt32_t
 sig√d 

	)

116 #ifdeа
_EVENT_HAVE_UINT16_T


117 
	#ev_uЪt16_t
 
uЪt16_t


	)

118 
	#ev_Ъt16_t
 
Ъt16_t


	)

119 #Цiа
defЪed
(
WIN32
)

120 
	#ev_uЪt16_t
 

	)

121 
	#ev_Ъt16_t
 sig√d 

	)

122 #Цiа
_EVENT_SIZEOF_INT
 == 2

123 
	#ev_uЪt16_t
 

	)

124 
	#ev_Ъt16_t
 sig√d 

	)

125 #Цiа
_EVENT_SIZEOF_SHORT
 == 2

126 
	#ev_uЪt16_t
 

	)

127 
	#ev_Ъt16_t
 sig√d 

	)

132 #ifdeа
_EVENT_HAVE_UINT8_T


133 
	#ev_uЪt8_t
 
uЪt8_t


	)

134 
	#ev_Ъt8_t
 
Ъt8_t


	)

136 
	#ev_uЪt8_t
 

	)

137 
	#ev_Ъt8_t
 sig√d 

	)

140 #ifdeа
_EVENT_HAVE_UINTPTR_T


141 
	#ev_uЪНМ_t
 
uЪНМ_t


	)

142 
	#ev_ЪНМ_t
 
ЪНМ_t


	)

143 #Цiа
_EVENT_SIZEOF_VOID_P
 <= 4

144 
	#ev_uЪНМ_t
 
ev_uЪt32_t


	)

145 
	#ev_ЪНМ_t
 
ev_Ъt32_t


	)

146 #Цiа
_EVENT_SIZEOF_VOID_P
 <= 8

147 
	#ev_uЪНМ_t
 
ev_uЪt64_t


	)

148 
	#ev_ЪНМ_t
 
ev_Ъt64_t


	)

153 #ifdeа
_EVENT_ssize_t


154 
	#ev_ssize_t
 
_EVENT_ssize_t


	)

156 
	#ev_ssize_t
 
ssize_t


	)

166 
	#EV_UINT64_MAX
 ((((
ev_uЪt64_t
)0xffffffffULи<< 32и| 0xffffffffUL)

	)

167 
	#EV_INT64_MAX
 ((((
ev_Ъt64_t
и0x7fffffffLи<< 32и| 0xffffffffL)

	)

168 
	#EV_INT64_MIN
 ((-
EV_INT64_MAX
и- 1)

	)

169 
	#EV_UINT32_MAX
 ((
ev_uЪt32_t
)0xffffffffUL)

	)

170 
	#EV_INT32_MAX
 ((
ev_Ъt32_t
и0x7fffffffL)

	)

171 
	#EV_INT32_MIN
 ((-
EV_INT32_MAX
и- 1)

	)

172 
	#EV_UINT16_MAX
 ((
ev_uЪt16_t
)0xffffUL)

	)

173 
	#EV_INT16_MAX
 ((
ev_Ъt16_t
и0x7fffL)

	)

174 
	#EV_INT16_MIN
 ((-
EV_INT16_MAX
и- 1)

	)

175 
	#EV_UINT8_MAX
 255

	)

176 
	#EV_INT8_MAX
 127

	)

177 
	#EV_INT8_MIN
 ((-
EV_INT8_MAX
и- 1)

	)

179 #iа
_EVENT_SIZEOF_SIZE_T
 == 8

180 
	#EV_SIZE_MAX
 
EV_UINT64_MAX


	)

181 
	#EV_SSIZE_MAX
 
EV_INT64_MAX


	)

182 #Цiа
_EVENT_SIZEOF_SIZE_T
 == 4

183 
	#EV_SIZE_MAX
 
EV_UINT32_MAX


	)

184 
	#EV_SSIZE_MAX
 
EV_INT32_MAX


	)

189 
	#EV_SSIZE_MIN
 ((-
EV_SSIZE_MAX
и- 1)

	)

191 #ifdeа
WIN32


192 
	#ev_sockЋn_t
 

	)

193 #Цiа
defЪed
(
_EVENT_sockЋn_t
)

194 
	#ev_sockЋn_t
 
_EVENT_sockЋn_t


	)

196 
	#ev_sockЋn_t
 
sockЋn_t


	)

199 #ifdeа
WIN32


202 
	#evutЮ_sockС_t
 
ЪНМ_t


	)

204 
	#evutЮ_sockС_t
 

	)

216 
evutЮ_sockСЈЬ
(
d
, 
ty≥
, 
іўocё
, 
evutЮ_sockС_t
 
sv
[2]);

222 
evutЮ_make_sockС_nЏblockЪg
(
evutЮ_sockС_t
 
sock
);

231 
evutЮ_make_li°Т_sockС_їu£abЋ
(
evutЮ_sockС_t
 
sock
);

239 
evutЮ_make_sockС_юo£Џexec
(
evutЮ_sockС_t
 
sock
);

241 #ifdeа
WIN32


244 
	#EVUTIL_CLOSESOCKET
(
s
и
	`юo£sockС
(s)

	)

248 
	#EVUTIL_CLOSESOCKET
(
s
и
	`юo£
(s)

	)

257 #ifdeа
WIN32


259 
	#EVUTIL_SOCKET_ERROR
(и
	`WSAGСLa°EЉ№
()

	)

261 
	#EVUTIL_SET_SOCKET_ERROR
(
Фrcode
) \

262 dЎ{ 
	`WSASСLa°EЉ№
(
Фrcode
); } 0)

	)

264 
evutЮ_sockС_gСФr№
(
evutЮ_sockС_t
 
sock
);

266 cЏ° *
evutЮ_sockС_Фr№_to_°rЪg
(
Фrcode
);

268 
	#EVUTIL_SOCKET_ERROR
(и(
ФЇo
)

	)

269 
	#EVUTIL_SET_SOCKET_ERROR
(
Фrcode
) \

270 dЎ{ 
ФЇo
 = (
Фrcode
); } 0)

	)

271 
	#evutЮ_sockС_gСФr№
(
sock
и(
ФЇo
)

	)

272 
	#evutЮ_sockС_Фr№_to_°rЪg
(
Фrcode
и(
	`°їЉ№
”Љcode))

	)

279 #ifdeа
_EVENT_HAVE_TIMERADD


280 
	#evutЮ_timФadd
(
tvp
, 
uvp
, 
vvp
и
	`timФadd
(—vp), (uvp), (vvp))

	)

281 
	#evutЮ_timФsub
(
tvp
, 
uvp
, 
vvp
и
	`timФsub
(—vp), (uvp), (vvp))

	)

283 
	#evutЮ_timФadd
(
tvp
, 
uvp
, 
vvp
) \

285 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£ш+ (
uvp
)->tv_sec; \

286 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£ш+ (
uvp
)->tv_usec; \

287 iа((
vvp
)->
tv_u£c
 >= 1000000) { \

288 (
vvp
)->
tv_£c
++; \

289 (
vvp
)->
tv_u£c
 -= 1000000; \

291 } 0)

	)

292 
	#evutЮ_timФsub
(
tvp
, 
uvp
, 
vvp
) \

294 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£ш- (
uvp
)->tv_sec; \

295 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£ш- (
uvp
)->tv_usec; \

296 iа((
vvp
)->
tv_u£c
 < 0) { \

297 (
vvp
)->
tv_£c
--; \

298 (
vvp
)->
tv_u£c
 += 1000000; \

300 } 0)

	)

303 #ifdeа
_EVENT_HAVE_TIMERCLEAR


304 
	#evutЮ_timФюЧr
(
tvp
и
	`timФюЧr
—vp)

	)

306 
	#evutЮ_timФюЧr
(
tvp
и—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

311 
	#evutЮ_timФcmp
(
tvp
, 
uvp
, 
cmp
) \

312 (((
tvp
)->
tv_£c
 =р(
uvp
)->tv_sec) ? \

313 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

314 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

316 #ifdeа
_EVENT_HAVE_TIMERISSET


317 
	#evutЮ_timФis£t
(
tvp
и
	`timФis£t
—vp)

	)

319 
	#evutЮ_timФis£t
(
tvp
и(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

323 #ifdeа
off£tof


324 
	#evutЮ_off£tof
(
ty≥
, 
fЫld
и
	`off£tof
—y≥, fЫld)

	)

326 
	#evutЮ_off£tof
(
ty≥
, 
fЫld
и((
off_t
)(&(—y≥ *)0)->fЫld))

	)

331 
ev_Ъt64_t
 
evutЮ_°єёl
(cЏ° *
s
, **
Тd±r
, 
ba£
);

334 #ifdeа
_EVENT_HAVE_GETTIMEOFDAY


335 
	#evutЮ_gСtimeofday
(
tv
, 
tz
и
	`gСtimeofday
(—v), (tz))

	)

337 
timezЏe
;

338 
evutЮ_gСtimeofday
(
timevЃ
 *
tv
, 
timezЏe
 *
tz
);

344 
evutЮ_ҐіЪtf
(*
buf
, 
size_t
 
buжТ
, cЏ° *
f№m©
, ...)

345 #ifdeа
__GNUC__


346 
__©МibuЛ__
((
f№m©
(
іЪtf
, 3, 4)))

349 
evutЮ_vҐіЪtf
(*
buf
, 
size_t
 
buжТ
, cЏ° *
f№m©
, 
va_li°
 
≠
);

352 cЏ° *
evutЮ_ЪС_ЅЁ
(
af
, cЏ° *
§c
, *
d°
, 
size_t
 
Ћn
);

354 
evutЮ_ЪС_±Џ
(
af
, cЏ° *
§c
, *
d°
);

355 
sockaddr
;

377 
evutЮ_Јr£_sockaddr_p№t
(cЏ° *
°r
, 
sockaddr
 *
out
, *
ouОТ
);

384 
evutЮ_sockaddr_cmp
(cЏ° 
sockaddr
 *
І1
, cЏ° sockaddЄ*
І2
,

385 
Ъюude_p№t
);

390 
evutЮ_ascii_°r€£cmp
(cЏ° *
°r1
, cЏ° *
°r2
);

394 
evutЮ_ascii_°Ї€£cmp
(cЏ° *
°r1
, cЏ° *
°r2
, 
size_t
 
n
);

398 #ifdeа
_EVENT_HAVE_STRUCT_ADDRINFO


399 
	#evutЮ_addrЪfo
 
addrЪfo


	)

401 
	sevutЮ_addrЪfo
 {

402 
ai_жags
;

403 
ai_зmЮy
;

404 
ai_sockty≥
;

405 
ai_іўocё
;

406 
size_t
 
ai_addЊТ
;

407 *
ai_€nЏ«me
;

408 
sockaddr
 *
ai_addr
;

409 
evutЮ_addrЪfo
 *
ai_√xt
;

412 #ifdeа
EAI_ADDRFAMILY


413 
	#EVUTIL_EAI_ADDRFAMILY
 
EAI_ADDRFAMILY


	)

415 
	#EVUTIL_EAI_ADDRFAMILY
 -901

	)

417 #ifdeа
EAI_AGAIN


418 
	#EVUTIL_EAI_AGAIN
 
EAI_AGAIN


	)

420 
	#EVUTIL_EAI_AGAIN
 -902

	)

422 #ifdeа
EAI_BADFLAGS


423 
	#EVUTIL_EAI_BADFLAGS
 
EAI_BADFLAGS


	)

425 
	#EVUTIL_EAI_BADFLAGS
 -903

	)

427 #ifdeа
EAI_FAIL


428 
	#EVUTIL_EAI_FAIL
 
EAI_FAIL


	)

430 
	#EVUTIL_EAI_FAIL
 -904

	)

432 #ifdeа
EAI_FAMILY


433 
	#EVUTIL_EAI_FAMILY
 
EAI_FAMILY


	)

435 
	#EVUTIL_EAI_FAMILY
 -905

	)

437 #ifdeа
EAI_MEMORY


438 
	#EVUTIL_EAI_MEMORY
 
EAI_MEMORY


	)

440 
	#EVUTIL_EAI_MEMORY
 -906

	)

445 #iа
defЪed
(
EAI_NODATA
и&& (!defЪed(
EAI_NONAME
) || EAI_NODATA != EAI_NONAME)

446 
	#EVUTIL_EAI_NODATA
 
EAI_NODATA


	)

448 
	#EVUTIL_EAI_NODATA
 -907

	)

450 #ifdeа
EAI_NONAME


451 
	#EVUTIL_EAI_NONAME
 
EAI_NONAME


	)

453 
	#EVUTIL_EAI_NONAME
 -908

	)

455 #ifdeа
EAI_SERVICE


456 
	#EVUTIL_EAI_SERVICE
 
EAI_SERVICE


	)

458 
	#EVUTIL_EAI_SERVICE
 -909

	)

460 #ifdeа
EAI_SOCKTYPE


461 
	#EVUTIL_EAI_SOCKTYPE
 
EAI_SOCKTYPE


	)

463 
	#EVUTIL_EAI_SOCKTYPE
 -910

	)

465 #ifdeа
EAI_SYSTEM


466 
	#EVUTIL_EAI_SYSTEM
 
EAI_SYSTEM


	)

468 
	#EVUTIL_EAI_SYSTEM
 -911

	)

471 
	#EVUTIL_EAI_CANCEL
 -90001

	)

473 #ifdeа
AI_PASSIVE


474 
	#EVUTIL_AI_PASSIVE
 
AI_PASSIVE


	)

476 
	#EVUTIL_AI_PASSIVE
 0x1000

	)

478 #ifdeа
AI_CANONNAME


479 
	#EVUTIL_AI_CANONNAME
 
AI_CANONNAME


	)

481 
	#EVUTIL_AI_CANONNAME
 0x2000

	)

483 #ifdeа
AI_NUMERICHOST


484 
	#EVUTIL_AI_NUMERICHOST
 
AI_NUMERICHOST


	)

486 
	#EVUTIL_AI_NUMERICHOST
 0x4000

	)

488 #ifdeа
AI_NUMERICSERV


489 
	#EVUTIL_AI_NUMERICSERV
 
AI_NUMERICSERV


	)

491 
	#EVUTIL_AI_NUMERICSERV
 0x8000

	)

493 #ifdeа
AI_V4MAPPED


494 
	#EVUTIL_AI_V4MAPPED
 
AI_V4MAPPED


	)

496 
	#EVUTIL_AI_V4MAPPED
 0x10000

	)

498 #ifdeа
AI_ALL


499 
	#EVUTIL_AI_ALL
 
AI_ALL


	)

501 
	#EVUTIL_AI_ALL
 0x20000

	)

503 #ifdeа
AI_ADDRCONFIG


504 
	#EVUTIL_AI_ADDRCONFIG
 
AI_ADDRCONFIG


	)

506 
	#EVUTIL_AI_ADDRCONFIG
 0x40000

	)

509 
evutЮ_addrЪfo
;

520 
evutЮ_gСaddrЪfo
(cЏ° *
nodТame
, cЏ° *
£rv«me
,

521 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
, evutЮ_addrЪfЎ**
їs
);

524 
evutЮ_дУaddrЪfo
(
evutЮ_addrЪfo
 *
ai
);

526 cЏ° *
evutЮ_gai_°їЉ№
(
Фr
);

534 
evutЮ_£cuї_Їg_gС_byЛs
(*
buf
, 
size_t
 
n
);

536 
evutЮ_£cuї_Їg_ЪЩ
();

538 
evutЮ_£cuї_Їg_add_byЛs
(cЏ° *
d©
, 
size_t
 
d©Ћn
);

540 #ifdeа
__эlu•lus


	@iocp-internal.h

27 #iвdeа
_EVENT_IOCP_INTERNAL_H


28 
	#_EVENT_IOCP_INTERNAL_H


	)

30 #ifdeа
__эlu•lus


34 
evТt_ovФѕµed
;

35 
evТt_ioэ_p№t
;

36 
evbufгr
;

37 (*
ioэ_€ќback
)(
	tevТt_ovФѕµed
 *, 
	tev_uЪНМ_t
, 
	tev_ssize_t
, 
	tsucыss
);

42 #ifdeа
WIN32


51 
	sevТt_ovФѕµed
 {

52 
OVERLAPPED
 
ovФѕµed
;

53 
ioэ_€ќback
 
cb
;

58 
BOOL
 (
	tWINAPI
 *
	tAcы±ExPМ
)(
	tSOCKET
, SOCKET, 
	tPVOID
, 
	tDWORD
, DWORD, DWORD, 
	tLPDWORD
, 
	tLPOVERLAPPED
);

59 
BOOL
 (
	tWINAPI
 *
	tCЏ√щExPМ
)(
	tSOCKET
, cЏ° 
	tsockaddr
 *, , 
	tPVOID
, 
	tDWORD
, 
	tLPDWORD
, 
	tLPOVERLAPPED
);

60 (
WINAPI
 *
	tGСAcы±ExSockaddrsPМ
)(
	tPVOID
, 
	tDWORD
, DWORD, DWORD, 
	tLPSOCKADDR
 *, 
	tLPINT
, LPSOCKADDR *, LPINT);

65 
	swЪ32_exЛnsiЏ_вs
 {

66 
Acы±ExPМ
 
Acы±Ex
;

67 
CЏ√щExPМ
 
CЏ√щEx
;

68 
GСAcы±ExSockaddrsPМ
 
GСAcы±ExSockaddrs
;

75 
	sevТt_ioэ_p№t
 {

77 
HANDLE
 
p№t
;

79 
CRITICAL_SECTION
 
lock
;

81 
n_thїads
;

83 
shutdown
;

86 
ms
;

88 
HANDLE
 *
thїads
;

90 
n_live_thїads
;

92 
HANDLE
 *
shutdownSem≠h№e
;

95 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
evТt_gС_wЪ32_exЛnsiЏ_вs
();

98 
	sevТt_ovФѕµed
 {

99 
ioэ_€ќback
 
cb
;

109 
evТt_ovФѕµed_ЪЩ
(
evТt_ovФѕµed
 *, 
ioэ_€ќback
 
cb
);

115 
evbufгr
 *
evbufгr_ovФѕµed_√w
(
evutЮ_sockС_t
 
fd
);

118 
evutЮ_sockС_t
 
_evbufгr_ovФѕµed_gС_fd
(
evbufгr
 *
buf
);

120 
_evbufгr_ovФѕµed_£t_fd
(
evbufгr
 *
buf
, 
evutЮ_sockС_t
 
fd
);

134 
evbufгr_ѕunch_їad
(
evbufгr
 *
buf
, 
size_t
 
n
, 
evТt_ovФѕµed
 *
ё
);

148 
evbufгr_ѕunch_wrЩe
(
evbufгr
 *
buf
, 
ev_ssize_t
 
n
, 
evТt_ovФѕµed
 *
ё
);

151 
evbufгr_commЩ_їad
(
evbufгr
 *, 
ev_ssize_t
);

152 
evbufгr_commЩ_wrЩe
(
evbufгr
 *, 
ev_ssize_t
);

158 
evТt_ioэ_p№t
 *
evТt_ioэ_p№t_ѕunch
();

163 
evТt_ioэ_p№t_assocЯЛ
(
evТt_ioэ_p№t
 *
p№t
, 
evutЮ_sockС_t
 
fd
,

164 
ev_uЪНМ_t
 
key
);

171 
evТt_ioэ_shutdown
(
evТt_ioэ_p№t
 *
p№t
, 
waЩM£c
);

174 
evТt_ioэ_aщiv©e_ovФѕµed
(
evТt_ioэ_p№t
 *
p№t
,

175 
evТt_ovФѕµed
 *
o
,

176 
ev_uЪНМ_t
 
key
, 
ev_uЪt32_t
 
n_byЛs
);

178 
evТt_ba£
;

180 
evТt_ioэ_p№t
 *
evТt_ba£_gС_ioэ
(
evТt_ba£
 *
ba£
);

183 
evТt_ba£_°ђt_ioэ
(
evТt_ba£
 *
ba£
);

186 
bufгїvТt
 *
bufгїvТt_async_√w
(
evТt_ba£
 *
ba£
,

187 
evutЮ_sockС_t
 
fd
, 
ЁtiЏs
);

190 
bufгїvТt_async_£t_cЏ√щed
(
bufгїvТt
 *
bev
);

191 
bufгїvТt_async_€n_cЏ√щ
(
bufгїvТt
 *
bev
);

192 
bufгїvТt_async_cЏ√щ
(
bufгїvТt
 *
bev
, 
evutЮ_sockС_t
 
fd
,

193 cЏ° 
sockaddr
 *
І
, 
sockЋn
);

195 #ifdeа
__эlu•lus


	@ipv6-internal.h

30 #iвdeа
_EVENT_IPV6_INTERNAL_H


31 
	#_EVENT_IPV6_INTERNAL_H


	)

33 
	~<sys/ty≥s.h
>

34 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


35 
	~<sys/sockС.h
>

37 
	~"evТt-cЏfig.h
"

38 
	~<evТt2/utЮ.h
>

40 #ifdeа
__эlu•lus


50 #iвdeа
_EVENT_HAVE_STRUCT_IN6_ADDR


51 
	sЪ6_addr
 {

52 
ev_uЪt8_t
 
s6_addr
[16];

56 #iвdeа
_EVENT_HAVE_SA_FAMILY_T


57 
	tІ_зmЮy_t
;

60 #iвdeа
_EVENT_HAVE_STRUCT_SOCKADDR_IN6


61 
	ssockaddr_Ъ6
 {

62 
І_зmЮy_t
 
	msЪ6_зmЮy
;

63 
ev_uЪt16_t
 
	msЪ6_p№t
;

64 
Ъ6_addr
 
	msЪ6_addr
;

68 #ifdeа
__эlu•lus


	@kqueue.c

29 
	~"evТt-cЏfig.h
"

31 
	#_GNU_SOURCE


	)

33 
	~<sys/ty≥s.h
>

34 #ifdeа
_EVENT_HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/queue.h
>

38 
	~<sys/evТt.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rЪg.h
>

43 
	~<uni°d.h
>

44 
	~<ФЇo.h
>

45 #ifdeа
_EVENT_HAVE_INTTYPES_H


46 
	~<ЪЙy≥s.h
>

52 #iа
defЪed
(
_EVENT_HAVE_INTTYPES_H
и&& !defЪed(
__O≥nBSD__
и&& !defЪed(
__FїeBSD__
и&& !defЪed(
__dђwЪ__
и&& !defЪed(
__APPLE__
)

53 
	#PTR_TO_UDATA
(
x
и((
ЪНМ_t
)(x))

	)

55 
	#PTR_TO_UDATA
(
x
и(x)

	)

58 
	~"evТt-ЪЛЇЃ.h
"

59 
	~"log-ЪЛЇЃ.h
"

60 
	~"evm≠-ЪЛЇЃ.h
"

61 
	~"evТt2/thїad.h
"

62 
	~"evthїad-ЪЛЇЃ.h
"

63 
	~"ch™gЦi°-ЪЛЇЃ.h
"

65 
	#NEVENT
 64

	)

67 
	skqЁ
 {

68 
kevТt
 *
	mch™ges
;

69 
	mch™ges_size
;

71 
kevТt
 *
	mevТts
;

72 
	mevТts_size
;

73 
	mkq
;

74 
pid_t
 
	mpid
;

77 
kqЁ_дУ
(
kqЁ
 *kqop);

79 *
kq_ЪЩ
 (
evТt_ba£
 *);

80 
kq_sig_add
 (
evТt_ba£
 *, , , , *);

81 
kq_sig_dЦ
 (
evТt_ba£
 *, , , , *);

82 
kq_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

83 
kq_dЧќoc
 (
evТt_ba£
 *);

85 cЏ° 
evТtЁ
 
	gkqЁs
 = {

87 
kq_ЪЩ
,

88 
evТt_ch™gЦi°_add
,

89 
evТt_ch™gЦi°_dЦ
,

90 
kq_di•©ch
,

91 
kq_dЧќoc
,

93 
EV_FEATURE_ET
|
EV_FEATURE_O1
|
EV_FEATURE_FDS
,

94 
EVENT_CHANGELIST_FDINFO_SIZE


97 cЏ° 
evТtЁ
 
	gkqsigЁs
 = {

99 
NULL
,

100 
kq_sig_add
,

101 
kq_sig_dЦ
,

102 
NULL
,

103 
NULL
,

110 
	$kq_ЪЩ
(
evТt_ba£
 *
ba£
)

112 
kq
 = -1;

113 
kqЁ
 *
kqueueЁ
 = 
NULL
;

115 iа(!(
kqueueЁ
 = 
	`mm_€ќoc
(1, (
kqЁ
))))

116  (
NULL
);

120 iа((
kq
 = 
	`kqueue
()) == -1) {

121 
	`evТt_wђn
("kqueue");

122 
Фr
;

125 
kqueueЁ
->
kq
 = kq;

127 
kqueueЁ
->
pid
 = 
	`gСpid
();

130 
kqueueЁ
->
ch™ges
 = 
	`mm_€ќoc
(
NEVENT
, (
kevТt
));

131 iа(
kqueueЁ
->
ch™ges
 =р
NULL
)

132 
Фr
;

133 
kqueueЁ
->
evТts
 = 
	`mm_€ќoc
(
NEVENT
, (
kevТt
));

134 iа(
kqueueЁ
->
evТts
 =р
NULL
)

135 
Фr
;

136 
kqueueЁ
->
evТts_size
 = kqueueЁ->
ch™ges_size
 = 
NEVENT
;

139 
	`mem£t
(&
kqueueЁ
->
ch™ges
[0], 0,  kqueueop->changes[0]);

140 
kqueueЁ
->
ch™ges
[0].
idТt
 = -1;

141 
kqueueЁ
->
ch™ges
[0].
fЮЛr
 = 
EVFILT_READ
;

142 
kqueueЁ
->
ch™ges
[0].
жags
 = 
EV_ADD
;

148 iа(
	`kevТt
(
kq
,

149 
kqueueЁ
->
ch™ges
, 1, kqueueЁ->
evТts
, 
NEVENT
, 
NULL
) != 1 ||

150 
kqueueЁ
->
evТts
[0].
idТt
 != -1 ||

151 
kqueueЁ
->
evТts
[0].
жags
 !р
EV_ERROR
) {

152 
	`evТt_wђn
("%s: dСeщed brokТ kqueue;Вў usЪg.", 
__func__
);

153 
Фr
;

156 
ba£
->
evsig£l
 = &
kqsigЁs
;

157 
ba£
->
evsigba£
 = 
kqueueЁ
;

159  (
kqueueЁ
);

160 
Фr
:

161 iа(
kqueueЁ
)

162 
	`kqЁ_дУ
(
kqueueЁ
);

164  (
NULL
);

165 
	}
}

168 
	$kq_sigh™dЋr
(
sig
)

171 
	}
}

174 
	$kq_£tup_kevТt
(
kevТt
 *
out
, 
evutЮ_sockС_t
 
fd
, 
fЮЛr
, 
ch™ge
)

176 
	`mem£t
(
out
, 0, (out));

177 
out
->
idТt
 = 
fd
;

178 
out
->
fЮЛr
 = filter;

180 iа(
ch™ge
 & 
EV_CHANGE_ADD
) {

181 
out
->
жags
 = 
EV_ADD
;

182 iа(
ch™ge
 & 
EV_ET
)

183 
out
->
жags
 |р
EV_CLEAR
;

184 #ifdeа
NOTE_EOF


186 iа(
fЮЛr
 =р
EVFILT_READ
)

187 
out
->
fжags
 = 
NOTE_EOF
;

190 
	`EVUTIL_ASSERT
(
ch™ge
 & 
EV_CHANGE_DEL
);

191 
out
->
жags
 = 
EV_DELETE
;

193 
	}
}

196 
	$kq_buЮd_ch™ges_li°
(cЏ° 
evТt_ch™gЦi°
 *
ch™gЦi°
,

197 
kqЁ
 *kqop)

199 
i
;

200 
n_ch™ges
 = 0;

202 
i
 = 0; i < 
ch™gЦi°
->
n_ch™ges
; ++i) {

203 
evТt_ch™ge
 *
Ъ_ch
 = &
ch™gЦi°
->
ch™ges
[
i
];

204 
kevТt
 *
out_ch
;

205 iа(
n_ch™ges
 >р
kqЁ
->
ch™ges_size
 - 1) {

206 
√wsize
 = 
kqЁ
->
ch™ges_size
 * 2;

207 
kevТt
 *
√wch™ges
;

209 
√wch™ges
 = 
	`mm_їЃloc
(
kqЁ
->
ch™ges
,

210 
√wsize
 * (
kevТt
));

211 iа(
√wch™ges
 =р
NULL
) {

212 
	`evТt_wђn
("%s:ДЧќoc", 
__func__
);

215 
kqЁ
->
ch™ges
 = 
√wch™ges
;

216 
kqЁ
->
ch™ges_size
 = 
√wsize
;

218 iа(
Ъ_ch
->
їad_ch™ge
) {

219 
out_ch
 = &
kqЁ
->
ch™ges
[
n_ch™ges
++];

220 
	`kq_£tup_kevТt
(
out_ch
, 
Ъ_ch
->
fd
, 
EVFILT_READ
,

221 
Ъ_ch
->
їad_ch™ge
);

223 iа(
Ъ_ch
->
wrЩe_ch™ge
) {

224 
out_ch
 = &
kqЁ
->
ch™ges
[
n_ch™ges
++];

225 
	`kq_£tup_kevТt
(
out_ch
, 
Ъ_ch
->
fd
, 
EVFILT_WRITE
,

226 
Ъ_ch
->
wrЩe_ch™ge
);

229  
n_ch™ges
;

230 
	}
}

233 
	$kq_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

235 
kqЁ
 *kqЁ = 
ba£
->
evba£
;

236 
kevТt
 *
evТts
 = 
kqЁ
->events;

237 
kevТt
 *
ch™ges
;

238 
time•ec
 
ts
, *
ts_p
 = 
NULL
;

239 
i
, 
n_ch™ges
, 
їs
;

241 iа(
tv
 !р
NULL
) {

242 
	`TIMEVAL_TO_TIMESPEC
(
tv
, &
ts
);

243 
ts_p
 = &
ts
;

247 
	`EVUTIL_ASSERT
(
kqЁ
->
ch™ges
);

248 
n_ch™ges
 = 
	`kq_buЮd_ch™ges_li°
(&
ba£
->
ch™gЦi°
, 
kqЁ
);

249 iа(
n_ch™ges
 < 0)

252 
	`evТt_ch™gЦi°_їmove_Ѓl
(&
ba£
->
ch™gЦi°
, base);

256 
ch™ges
 = 
kqЁ
->changes;

257 
kqЁ
->
ch™ges
 = 
NULL
;

259 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

261 
їs
 = 
	`kevТt
(
kqЁ
->
kq
, 
ch™ges
, 
n_ch™ges
,

262 
evТts
, 
kqЁ
->
evТts_size
, 
ts_p
);

264 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

266 
	`EVUTIL_ASSERT
(
kqЁ
->
ch™ges
 =р
NULL
);

267 
kqЁ
->
ch™ges
 = changes;

269 iа(
їs
 == -1) {

270 iа(
ФЇo
 !р
EINTR
) {

271 
	`evТt_wђn
("kevent");

278 
	`evТt_debug
(("%s: kevТИїp№t†%d", 
__func__
, 
їs
));

280 
i
 = 0; i < 
їs
; i++) {

281 
which
 = 0;

283 iа(
evТts
[
i
].
жags
 & 
EV_ERROR
) {

296 iа(
evТts
[
i
].
d©a
 =р
EBADF
 ||

297 
evТts
[
i
].
d©a
 =р
EINVAL
 ||

298 
evТts
[
i
].
d©a
 =р
ENOENT
)

300 
ФЇo
 = 
evТts
[
i
].
d©a
;

304 iа(
evТts
[
i
].
fЮЛr
 =р
EVFILT_READ
) {

305 
which
 |р
EV_READ
;

306 } iа(
evТts
[
i
].
fЮЛr
 =р
EVFILT_WRITE
) {

307 
which
 |р
EV_WRITE
;

308 } iа(
evТts
[
i
].
fЮЛr
 =р
EVFILT_SIGNAL
) {

309 
which
 |р
EV_SIGNAL
;

312 iа(!
which
)

315 iа(
evТts
[
i
].
fЮЛr
 =р
EVFILT_SIGNAL
) {

316 
	`evm≠_sig«l_aщive
(
ba£
, 
evТts
[
i
].
idТt
, 1);

318 
	`evm≠_io_aщive
(
ba£
, 
evТts
[
i
].
idТt
, 
which
 | 
EV_ET
);

322 iа(
їs
 =р
kqЁ
->
evТts_size
) {

323 
kevТt
 *
√wїsu…
;

324 
size
 = 
kqЁ
->
evТts_size
;

327 
size
 *= 2;

328 
√wїsu…
 = 
	`mm_їЃloc
(
kqЁ
->
evТts
,

329 
size
 * (
kevТt
));

330 iа(
√wїsu…
) {

331 
kqЁ
->
evТts
 = 
√wїsu…
;

332 
kqЁ
->
evТts_size
 = 
size
;

337 
	}
}

340 
	$kqЁ_дУ
(
kqЁ
 *kqop)

342 iа(
kqЁ
->
ch™ges
)

343 
	`mm_дУ
(
kqЁ
->
ch™ges
);

344 iа(
kqЁ
->
evТts
)

345 
	`mm_дУ
(
kqЁ
->
evТts
);

346 iа(
kqЁ
->
kq
 >р0 && kqЁ->
pid
 =р
	`gСpid
())

347 
	`юo£
(
kqЁ
->
kq
);

348 
	`mem£t
(
kqЁ
, 0, (kqop));

349 
	`mm_дУ
(
kqЁ
);

350 
	}
}

353 
	$kq_dЧќoc
(
evТt_ba£
 *
ba£
)

355 
kqЁ
 *kqЁ = 
ba£
->
evba£
;

356 
	`evsig_dЧќoc
(
ba£
);

357 
	`kqЁ_дУ
(
kqЁ
);

358 
	}
}

362 
	$kq_sig_add
(
evТt_ba£
 *
ba£
, 
nsig«l
, 
ёd
, 
evТts
, *
p
)

364 
kqЁ
 *kqЁ = 
ba£
->
evba£
;

365 
kevТt
 
kev
;

366 
time•ec
 
timeout
 = { 0, 0 };

367 ()
p
;

369 
	`EVUTIL_ASSERT
(
nsig«l
 >р0 &&Вsig«»< 
NSIG
);

371 
	`mem£t
(&
kev
, 0, (kev));

372 
kev
.
idТt
 = 
nsig«l
;

373 
kev
.
fЮЛr
 = 
EVFILT_SIGNAL
;

374 
kev
.
жags
 = 
EV_ADD
;

379 iа(
	`kevТt
(
kqЁ
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

382 iа(
	`_evsig_£t_h™dЋr
(
ba£
, 
nsig«l
, 
kq_sigh™dЋr
) == -1)

386 
	}
}

389 
	$kq_sig_dЦ
(
evТt_ba£
 *
ba£
, 
nsig«l
, 
ёd
, 
evТts
, *
p
)

391 
kqЁ
 *kqЁ = 
ba£
->
evba£
;

392 
kevТt
 
kev
;

394 
time•ec
 
timeout
 = { 0, 0 };

395 ()
p
;

397 
	`EVUTIL_ASSERT
(
nsig«l
 >р0 &&Вsig«»< 
NSIG
);

399 
	`mem£t
(&
kev
, 0, (kev));

400 
kev
.
idТt
 = 
nsig«l
;

401 
kev
.
fЮЛr
 = 
EVFILT_SIGNAL
;

402 
kev
.
жags
 = 
EV_DELETE
;

407 iа(
	`kevТt
(
kqЁ
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

410 iа(
	`_evsig_ї°№e_h™dЋr
(
ba£
, 
nsig«l
) == -1)

414 
	}
}

	@listener.c

27 
	~<sys/ty≥s.h
>

29 
	~"evТt-cЏfig.h
"

31 #ifdeа
WIN32


32 
	~<wЪsock2.h
>

33 
	~<ws2tэЭ.h
>

34 
	~<mswsock.h
>

36 
	~<ФЇo.h
>

37 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


38 
	~<sys/sockС.h
>

40 #ifdeа
_EVENT_HAVE_FCNTL_H


41 
	~<fъО.h
>

43 #ifdeа
_EVENT_HAVE_UNISTD_H


44 
	~<uni°d.h
>

47 
	~<evТt2/li°ТФ.h
>

48 
	~<evТt2/utЮ.h
>

49 
	~<evТt2/evТt.h
>

50 
	~<evТt2/evТt_°ruщ.h
>

51 
	~"mm-ЪЛЇЃ.h
"

52 
	~"utЮ-ЪЛЇЃ.h
"

53 
	~"log-ЪЛЇЃ.h
"

54 #ifdeа
WIN32


55 
	~"ioэ-ЪЛЇЃ.h
"

56 
	~"deгr-ЪЛЇЃ.h
"

59 
	sevcЏ∆i°ТФ_Ёs
 {

60 (*
	mТabЋ
)(
	mevcЏ∆i°ТФ
 *);

61 (*
	mdiІbЋ
)(
	mevcЏ∆i°ТФ
 *);

62 (*
	mde°roy
)(
	mevcЏ∆i°ТФ
 *);

63 
evutЮ_sockС_t
 (*
gСfd
)(
	mevcЏ∆i°ТФ
 *);

64 
	mevТt_ba£
 *(*
	mgСba£
)(
	mevcЏ∆i°ТФ
 *);

67 
	sevcЏ∆i°ТФ
 {

68 cЏ° 
evcЏ∆i°ТФ_Ёs
 *
	mЁs
;

69 
evcЏ∆i°ТФ_cb
 
	mcb
;

70 *
	mu£r_d©a
;

71 
	mжags
;

74 
	sevcЏ∆i°ТФ_evТt
 {

75 
evcЏ∆i°ТФ
 
	mba£
;

76 
evТt
 
	mli°ТФ
;

79 #ifdeа
WIN32


80 
	sevcЏ∆i°ТФ_ioэ
 {

81 
evcЏ∆i°ТФ
 
	mba£
;

82 
evutЮ_sockС_t
 
	mfd
;

83 
evТt_ba£
 *
	mevТt_ba£
;

84 
evТt_ioэ_p№t
 *
	mp№t
;

85 
CRITICAL_SECTION
 
	mlock
;

86 
	mn_acы±Ъg
;

87 
acы±Ъg_sockС
 **
	macы±Ъg
;

91 
evcЏ∆i°ТФ
 *

92 
evcЏ∆i°ТФ_√w_async
(
evТt_ba£
 *
ba£
,

93 
evcЏ∆i°ТФ_cb
 
cb
, *
±r
, 
жags
, 
backlog
,

94 
evutЮ_sockС_t
 
fd
);

96 
evТt_li°ТФ_ТabЋ
(
evcЏ∆i°ТФ
 *);

97 
evТt_li°ТФ_diІbЋ
(
evcЏ∆i°ТФ
 *);

98 
evТt_li°ТФ_de°roy
(
evcЏ∆i°ТФ
 *);

99 
evutЮ_sockС_t
 
evТt_li°ТФ_gСfd
(
evcЏ∆i°ТФ
 *);

100 
evТt_ba£
 *
evТt_li°ТФ_gСba£
(
evcЏ∆i°ТФ
 *);

102 cЏ° 
evcЏ∆i°ТФ_Ёs
 
	gevcЏ∆i°ТФ_evТt_Ёs
 = {

103 
evТt_li°ТФ_ТabЋ
,

104 
evТt_li°ТФ_diІbЋ
,

105 
evТt_li°ТФ_de°roy
,

106 
evТt_li°ТФ_gСfd
,

107 
evТt_li°ТФ_gСba£


110 
li°ТФ_їad_cb
(
evutЮ_sockС_t
, , *);

112 
evcЏ∆i°ТФ
 *

113 
	$evcЏ∆i°ТФ_√w
(
evТt_ba£
 *
ba£
,

114 
evcЏ∆i°ТФ_cb
 
cb
, *
±r
, 
жags
, 
backlog
,

115 
evutЮ_sockС_t
 
fd
)

117 
evcЏ∆i°ТФ_evТt
 *
Ћv
;

119 #ifdeа
WIN32


120 iа(
ba£
 && 
	`evТt_ba£_gС_ioэ
(base)) {

121 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
ext
 =

122 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

123 iа(
ext
->
Acы±Ex
 &&Гxt->
GСAcы±ExSockaddrs
)

124  
	`evcЏ∆i°ТФ_√w_async
(
ba£
, 
cb
, 
±r
, 
жags
,

125 
backlog
, 
fd
);

129 iа(
backlog
 > 0) {

130 iа(
	`li°Т
(
fd
, 
backlog
) < 0)

131  
NULL
;

132 } iа(
backlog
 < 0) {

133 iа(
	`li°Т
(
fd
, 128) < 0)

134  
NULL
;

137 
Ћv
 = 
	`mm_€ќoc
(1, (
evcЏ∆i°ТФ_evТt
));

138 iа(!
Ћv
)

139  
NULL
;

141 
Ћv
->
ba£
.
Ёs
 = &
evcЏ∆i°ТФ_evТt_Ёs
;

142 
Ћv
->
ba£
.
cb
 = cb;

143 
Ћv
->
ba£
.
u£r_d©a
 = 
±r
;

144 
Ћv
->
ba£
.
жags
 = flags;

146 
	`evТt_assign
(&
Ћv
->
li°ТФ
, 
ba£
, 
fd
, 
EV_READ
|
EV_PERSIST
,

147 
li°ТФ_їad_cb
, 
Ћv
);

148 
	`evcЏ∆i°ТФ_ТabЋ
(&
Ћv
->
ba£
);

150  &
Ћv
->
ba£
;

151 
	}
}

153 
evcЏ∆i°ТФ
 *

154 
	$evcЏ∆i°ТФ_√w_bЪd
(
evТt_ba£
 *
ba£
, 
evcЏ∆i°ТФ_cb
 
cb
,

155 *
±r
, 
жags
, 
backlog
, cЏ° 
sockaddr
 *
І
,

156 
sockЋn
)

158 
evcЏ∆i°ТФ
 *
li°ТФ
;

159 
evutЮ_sockС_t
 
fd
;

160 
Џ
 = 1;

161 
зmЮy
 = 
І
 ? sa->
І_зmЮy
 : 
AF_UNSPEC
;

163 iа(
backlog
 == 0)

164  
NULL
;

166 
fd
 = 
	`sockС
(
зmЮy
, 
SOCK_STREAM
, 0);

167 iа(
fd
 == -1)

168  
NULL
;

170 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
fd
) < 0) {

171 
	`EVUTIL_CLOSESOCKET
(
fd
);

172  
NULL
;

175 iа(
жags
 & 
LEV_OPT_CLOSE_ON_EXEC
) {

176 iа(
	`evutЮ_make_sockС_юo£Џexec
(
fd
) < 0) {

177 
	`EVUTIL_CLOSESOCKET
(
fd
);

178  
NULL
;

182 
	`£tsockЁt
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Џ
, (on));

183 iа(
жags
 & 
LEV_OPT_REUSEABLE
) {

184 
	`evutЮ_make_li°Т_sockС_їu£abЋ
(
fd
);

187 iа(
І
) {

188 iа(
	`bЪd
(
fd
, 
І
, 
sockЋn
)<0) {

189 
	`EVUTIL_CLOSESOCKET
(
fd
);

190  
NULL
;

194 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w
(
ba£
, 
cb
, 
±r
, 
жags
, 
backlog
, 
fd
);

195 iа(!
li°ТФ
) {

196 
	`EVUTIL_CLOSESOCKET
(
fd
);

197  
NULL
;

200  
li°ТФ
;

201 
	}
}

204 
	$evcЏ∆i°ТФ_дУ
(
evcЏ∆i°ТФ
 *
Ћv
)

206 
Ћv
->
Ёs
->
	`de°roy
(lev);

207 
	`mm_дУ
(
Ћv
);

208 
	}
}

211 
	$evТt_li°ТФ_de°roy
(
evcЏ∆i°ТФ
 *
Ћv
)

213 
evcЏ∆i°ТФ_evТt
 *
Ћv_e
 =

214 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_evТt
, 
ba£
);

216 
	`evТt_dЦ
(&
Ћv_e
->
li°ТФ
);

217 iа(
Ћv
->
жags
 & 
LEV_OPT_CLOSE_ON_FREE
)

218 
	`EVUTIL_CLOSESOCKET
(
	`evТt_gС_fd
(&
Ћv_e
->
li°ТФ
));

219 
	`evТt_debug_u«ssign
(&
Ћv_e
->
li°ТФ
);

220 
	}
}

223 
	$evcЏ∆i°ТФ_ТabЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

225  
Ћv
->
Ёs
->
	`ТabЋ
(lev);

226 
	}
}

229 
	$evcЏ∆i°ТФ_diІbЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

231  
Ћv
->
Ёs
->
	`diІbЋ
(lev);

232 
	}
}

235 
	$evТt_li°ТФ_ТabЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

237 
evcЏ∆i°ТФ_evТt
 *
Ћv_e
 =

238 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_evТt
, 
ba£
);

239  
	`evТt_add
(&
Ћv_e
->
li°ТФ
, 
NULL
);

240 
	}
}

243 
	$evТt_li°ТФ_diІbЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

245 
evcЏ∆i°ТФ_evТt
 *
Ћv_e
 =

246 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_evТt
, 
ba£
);

247  
	`evТt_dЦ
(&
Ћv_e
->
li°ТФ
);

248 
	}
}

250 
evutЮ_sockС_t


251 
	$evcЏ∆i°ТФ_gС_fd
(
evcЏ∆i°ТФ
 *
Ћv
)

253  
Ћv
->
Ёs
->
	`gСfd
(lev);

254 
	}
}

256 
evutЮ_sockС_t


257 
	$evТt_li°ТФ_gСfd
(
evcЏ∆i°ТФ
 *
Ћv
)

259 
evcЏ∆i°ТФ_evТt
 *
Ћv_e
 =

260 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_evТt
, 
ba£
);

261  
	`evТt_gС_fd
(&
Ћv_e
->
li°ТФ
);

262 
	}
}

264 
evТt_ba£
 *

265 
	$evcЏ∆i°ТФ_gС_ba£
(
evcЏ∆i°ТФ
 *
Ћv
)

267  
Ћv
->
Ёs
->
	`gСba£
(lev);

268 
	}
}

270 
evТt_ba£
 *

271 
	$evТt_li°ТФ_gСba£
(
evcЏ∆i°ТФ
 *
Ћv
)

273 
evcЏ∆i°ТФ_evТt
 *
Ћv_e
 =

274 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_evТt
, 
ba£
);

275  
	`evТt_gС_ba£
(&
Ћv_e
->
li°ТФ
);

276 
	}
}

279 
	$li°ТФ_їad_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
p
)

281 
evcЏ∆i°ТФ
 *
Ћv
 = 
p
;

282 
Фr
;

284 
sockaddr_°№age
 
ss
;

285 
sockЋn_t
 
sockЋn
 = (
ss
);

287 
evutЮ_sockС_t
 
√w_fd
 = 
	`acы±
(
fd
, (
sockaddr
*)&
ss
, &
sockЋn
);

288 iа(
√w_fd
 < 0)

291 iа(!(
Ћv
->
жags
 & 
LEV_OPT_LEAVE_SOCKETS_BLOCKING
))

292 
	`evutЮ_make_sockС_nЏblockЪg
(
√w_fd
);

294 
Ћv
->
	`cb
÷ev, 
√w_fd
, (
sockaddr
*)&
ss
, ()
sockЋn
,

295 
Ћv
->
u£r_d©a
);

297 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
fd
);

298 iа(
	`EVUTIL_ERR_ACCEPT_RETRIABLE
(
Фr
))

300 
	`evТt_sock_wђn
(
fd
, "Error fromЗccept() call");

301 
	}
}

303 #ifdeа
WIN32


304 
	sacы±Ъg_sockС
 {

305 
CRITICAL_SECTION
 
	mlock
;

306 
evТt_ovФѕµed
 
	movФѕµed
;

307 
SOCKET
 
	ms
;

308 
deгЉed_cb
 
	mdeгЉed
;

309 
evcЏ∆i°ТФ_ioэ
 *
	mЋv
;

310 
ev_uЪt8_t
 
	mbuжТ
;

311 
ev_uЪt8_t
 
	mзmЮy
;

312 
	mдУ_Џ_cb
:1;

313 
	maddrbuf
[1];

316 
acы±ed_sockС_cb
(
evТt_ovФѕµed
 *
o
, 
ev_uЪНМ_t
 
key
,

317 
ev_ssize_t
 
n
, 
ok
);

318 
acы±ed_sockС_Ъvoke_u£r_cb
(
deгЉed_cb
 *
cb
, *
ђg
);

320 
acы±Ъg_sockС
 *

321 
	$√w_acы±Ъg_sockС
(
evcЏ∆i°ТФ_ioэ
 *
Ћv
, 
зmЮy
)

323 
acы±Ъg_sockС
 *
їs
;

324 
addЊТ
;

325 
buжТ
;

327 iа(
зmЮy
 =р
AF_INET
)

328 
addЊТ
 = (
sockaddr_Ъ
);

329 iа(
зmЮy
 =р
AF_INET6
)

330 
addЊТ
 = (
sockaddr_Ъ6
);

332  
NULL
;

333 
buжТ
 = (
addЊТ
+16)*2;

335 
їs
 = 
	`mm_€ќoc
(1,(
acы±Ъg_sockС
)-1+
buжТ
);

336 iа(!
їs
)

337  
NULL
;

339 
	`evТt_ovФѕµed_ЪЩ
(&
їs
->
ovФѕµed
, 
acы±ed_sockС_cb
);

340 
їs
->
s
 = 
INVALID_SOCKET
;

341 
їs
->
Ћv
 =Жev;

342 
їs
->
buжТ
 = buflen;

343 
їs
->
зmЮy
 = family;

345 
	`evТt_deгЉed_cb_ЪЩ
(&
їs
->
deгЉed
,

346 
acы±ed_sockС_Ъvoke_u£r_cb
, 
їs
);

348 
	`InЩЯlizeCrЩi€lSeщiЏAndSpЪCouЅ
(&
їs
->
lock
, 1000);

350  
їs
;

351 
	}
}

354 
	$дУ_™d_u∆ock_acы±Ъg_sockС
(
acы±Ъg_sockС
 *
as
)

357 iа(
as
->
s
 !р
INVALID_SOCKET
)

358 
	`юo£sockС
(
as
->
s
);

360 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

361 
	`DЦСeCrЩi€lSeщiЏ
(&
as
->
lock
);

362 
	`mm_дУ
(
as
);

363 
	}
}

366 
	$°ђt_acы±Ъg
(
acы±Ъg_sockС
 *
as
)

369 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
ext
 = 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

370 
DWORD
 
≥ndЪg
 = 0;

371 
SOCKET
 
s
 = 
	`sockС
(
as
->
зmЮy
, 
SOCK_STREAM
, 0);

372 iа(
s
 =р
INVALID_SOCKET
)

375 
	`£tsockЁt
(
s
, 
SOL_SOCKET
, 
SO_UPDATE_ACCEPT_CONTEXT
,

376 (*)&
as
->
Ћv
->
fd
, (&as->lev->fd));

378 iа(!(
as
->
Ћv
->
ba£
.
жags
 & 
LEV_OPT_LEAVE_SOCKETS_BLOCKING
))

379 
	`evutЮ_make_sockС_nЏblockЪg
(
s
);

381 iа(
	`evТt_ioэ_p№t_assocЯЛ
(
as
->
Ћv
->
p№t
, 
s
, 1) < 0) {

382 
	`юo£sockС
(
s
);

386 
as
->
s
 = s;

388 iа(
ext
->
	`Acы±Ex
(
as
->
Ћv
->
fd
, 
s
,Зs->
addrbuf
, 0,

389 
as
->
buжТ
/2,Зs->buжТ/2, &
≥ndЪg
, &as->
ovФѕµed
.overlapped))

392 
	`acы±ed_sockС_cb
(&
as
->
ovФѕµed
, 1, 0, 1);

394 
Фr
 = 
	`WSAGСLa°EЉ№
();

395 iа(
Фr
 !р
ERROR_IO_PENDING
) {

396 
	`evТt_wђnx
("Acы±Ex: %s", 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
));

402 
	}
}

405 
	$°Ё_acы±Ъg
(
acы±Ъg_sockС
 *
as
)

408 
SOCKET
 
s
 = 
as
->s;

409 
as
->
s
 = 
INVALID_SOCKET
;

410 
	`юo£sockС
(
s
);

411 
	}
}

414 
	$acы±ed_sockС_Ъvoke_u£r_cb
(
deгЉed_cb
 *
cb
, *
ђg
)

416 
acы±Ъg_sockС
 *
as
 = 
ђg
;

418 
sockaddr
 *
І_lo€l
=
NULL
, *
І_їmўe
=NULL;

419 
sockЋn_lo€l
=0, 
sockЋn_їmўe
=0;

420 cЏ° 
wЪ32_exЛnsiЏ_вs
 *
ext
 = 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

422 
	`EVUTIL_ASSERT
(
ext
->
GСAcы±ExSockaddrs
);

424 
	`EЅФCrЩi€lSeщiЏ
(&
as
->
lock
);

425 iа(
as
->
дУ_Џ_cb
) {

426 
	`дУ_™d_u∆ock_acы±Ъg_sockС
(
as
);

430 
ext
->
	`GСAcы±ExSockaddrs
(

431 
as
->
addrbuf
, 0,Зs->
buжТ
/2,Зs->buflen/2,

432 &
І_lo€l
, &
sockЋn_lo€l
, &
І_їmўe
, &
sockЋn_їmўe
);

434 
as
->
Ћv
->
ba£
.
	`cb
(&as->Ћv->ba£,Зs->
s
, 
І_їmўe
,

435 
sockЋn_їmўe
, 
as
->
Ћv
->
ba£
.
u£r_d©a
);

437 
as
->
s
 = 
INVALID_SOCKET
;

439 
	`°ђt_acы±Ъg
(
as
);

440 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

441 
	}
}

444 
	$acы±ed_sockС_cb
(
evТt_ovФѕµed
 *
o
, 
ev_uЪНМ_t
 
key
, 
ev_ssize_t
 
n
, 
ok
)

446 
acы±Ъg_sockС
 *
as
 =

447 
	`EVUTIL_UPCAST
(
o
, 
acы±Ъg_sockС
, 
ovФѕµed
);

449 
	`EЅФCrЩi€lSeщiЏ
(&
as
->
lock
);

450 iа(
ok
) {

452 
	`evТt_deгЉed_cb_scheduЋ
(

453 
	`evТt_ba£_gС_deгЉed_cb_queue
(
as
->
Ћv
->
evТt_ba£
),

454 &
as
->
deгЉed
);

455 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

456 } iа(
as
->
дУ_Џ_cb
) {

457 
	`дУ_™d_u∆ock_acы±Ъg_sockС
(
as
);

458 } iа(
as
->
s
 =р
INVALID_SOCKET
) {

460 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

463 
	`evТt_sock_wђn
(
as
->
s
, "UnexpectedГrror on AcceptEx");

464 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

467 
	}
}

470 
	$ioэ_li°ТФ_ТabЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

472 
i
;

473 
evcЏ∆i°ТФ_ioэ
 *
Ћv_ioэ
 =

474 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_ioэ
, 
ba£
);

476 
	`EЅФCrЩi€lSeщiЏ
(&
Ћv_ioэ
->
lock
);

477 
i
 = 0; i < 
Ћv_ioэ
->
n_acы±Ъg
; ++i) {

478 
acы±Ъg_sockС
 *
as
 = 
Ћv_ioэ
->
acы±Ъg
[
i
];

479 iа(!
as
)

481 
	`EЅФCrЩi€lSeщiЏ
(&
as
->
lock
);

482 iа(!
as
->
дУ_Џ_cb
 &&Зs->
s
 =р
INVALID_SOCKET
)

483 
	`°ђt_acы±Ъg
(
as
);

484 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

486 
	`LЧveCrЩi€lSeщiЏ
(&
Ћv_ioэ
->
lock
);

488 
	}
}

491 
	$ioэ_li°ТФ_diІbЋ_imґ
(
evcЏ∆i°ТФ
 *
Ћv
, 
shutdown
)

493 
i
;

494 
evcЏ∆i°ТФ_ioэ
 *
Ћv_ioэ
 =

495 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_ioэ
, 
ba£
);

497 
	`EЅФCrЩi€lSeщiЏ
(&
Ћv_ioэ
->
lock
);

498 
i
 = 0; i < 
Ћv_ioэ
->
n_acы±Ъg
; ++i) {

499 
acы±Ъg_sockС
 *
as
 = 
Ћv_ioэ
->
acы±Ъg
[
i
];

500 iа(!
as
)

502 
	`EЅФCrЩi€lSeщiЏ
(&
as
->
lock
);

503 iа(!
as
->
дУ_Џ_cb
 &&Зs->
s
 !р
INVALID_SOCKET
) {

504 iа(
shutdown
)

505 
as
->
дУ_Џ_cb
 = 1;

506 
	`°Ё_acы±Ъg
(
as
);

508 
	`LЧveCrЩi€lSeщiЏ
(&
as
->
lock
);

510 
	`LЧveCrЩi€lSeщiЏ
(&
Ћv_ioэ
->
lock
);

512 
	}
}

515 
	$ioэ_li°ТФ_diІbЋ
(
evcЏ∆i°ТФ
 *
Ћv
)

517  
	`ioэ_li°ТФ_diІbЋ_imґ
(
Ћv
,0);

518 
	}
}

520 
	$ioэ_li°ТФ_de°roy
(
evcЏ∆i°ТФ
 *
Ћv
)

522 
	`ioэ_li°ТФ_diІbЋ_imґ
(
Ћv
,1);

523 
	}
}

525 
evutЮ_sockС_t


526 
	$ioэ_li°ТФ_gСfd
(
evcЏ∆i°ТФ
 *
Ћv
)

528 
evcЏ∆i°ТФ_ioэ
 *
Ћv_ioэ
 =

529 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_ioэ
, 
ba£
);

530  
Ћv_ioэ
->
fd
;

531 
	}
}

532 
evТt_ba£
 *

533 
	$ioэ_li°ТФ_gСba£
(
evcЏ∆i°ТФ
 *
Ћv
)

535 
evcЏ∆i°ТФ_ioэ
 *
Ћv_ioэ
 =

536 
	`EVUTIL_UPCAST
(
Ћv
, 
evcЏ∆i°ТФ_ioэ
, 
ba£
);

537  
Ћv_ioэ
->
evТt_ba£
;

538 
	}
}

540 cЏ° 
evcЏ∆i°ТФ_Ёs
 
	gevcЏ∆i°ТФ_ioэ_Ёs
 = {

541 
ioэ_li°ТФ_ТabЋ
,

542 
ioэ_li°ТФ_diІbЋ
,

543 
ioэ_li°ТФ_de°roy
,

544 
ioэ_li°ТФ_gСfd
,

545 
ioэ_li°ТФ_gСba£


549 
	#N_SOCKETS_PER_LISTENER
 4

	)

551 
evcЏ∆i°ТФ
 *

552 
	$evcЏ∆i°ТФ_√w_async
(
evТt_ba£
 *
ba£
,

553 
evcЏ∆i°ТФ_cb
 
cb
, *
±r
, 
жags
, 
backlog
,

554 
evutЮ_sockС_t
 
fd
)

556 
sockaddr_°№age
 
ss
;

557 
sockЋn
 = (
ss
);

558 
evcЏ∆i°ТФ_ioэ
 *
Ћv
;

559 
i
;

561 iа(!
ba£
 || !
	`evТt_ba£_gС_ioэ
(base))

562 
Фr
;

565 iа(
backlog
 > 0) {

566 iа(
	`li°Т
(
fd
, 
backlog
) < 0)

567 
Фr
;

568 } iа(
backlog
 < 0) {

569 iа(
	`li°Т
(
fd
, 128) < 0)

570 
Фr
;

572 iа(
	`gСsock«me
(
fd
, (
sockaddr
*)&
ss
, &
sockЋn
)) {

573 
	`evТt_sock_wђn
(
fd
, "getsockname");

574 
Фr
;

576 
Ћv
 = 
	`mm_€ќoc
(1, (
evcЏ∆i°ТФ_evТt
));

577 iа(!
Ћv
) {

578 
	`evТt_wђn
("calloc");

579 
Фr
;

581 
Ћv
->
ba£
.
Ёs
 = &
evcЏ∆i°ТФ_ioэ_Ёs
;

582 
Ћv
->
ba£
.
cb
 = cb;

583 
Ћv
->
ba£
.
u£r_d©a
 = 
±r
;

584 
Ћv
->
ba£
.
жags
 = flags;

586 
Ћv
->
p№t
 = 
	`evТt_ba£_gС_ioэ
(
ba£
);

587 
Ћv
->
fd
 = fd;

588 
Ћv
->
evТt_ba£
 = 
ba£
;

590 iа(
	`evТt_ioэ_p№t_assocЯЛ
(
Ћv
->
p№t
, 
fd
, 1) < 0)

591 
Фr_дУ_Ћv
;

593 
	`InЩЯlizeCrЩi€lSeщiЏAndSpЪCouЅ
(&
Ћv
->
lock
, 1000);

595 
Ћv
->
n_acы±Ъg
 = 
N_SOCKETS_PER_LISTENER
;

596 
Ћv
->
acы±Ъg
 = 
	`mm_€ќoc
÷ev->
n_acы±Ъg
,

597 (
acы±Ъg_sockС
 *));

598 iа(!
Ћv
->
acы±Ъg
) {

599 
	`evТt_wђn
("calloc");

600 
Фr_dЦСe_lock
;

602 
i
 = 0; i < 
Ћv
->
n_acы±Ъg
; ++i) {

603 
Ћv
->
acы±Ъg
[
i
] = 
	`√w_acы±Ъg_sockС
÷ev, 
ss
.
ss_зmЮy
);

604 iа(!
Ћv
->
acы±Ъg
[
i
]) {

605 
	`evТt_wђnx
("Couldn't createЗccepting socket");

606 
Фr_дУ_acы±Ъg
;

608 iа(
	`°ђt_acы±Ъg
(
Ћv
->
acы±Ъg
[
i
]) < 0) {

609 
	`evТt_wђnx
("Couldn't startЗccepting on socket");

610 
	`EЅФCrЩi€lSeщiЏ
(&
Ћv
->
acы±Ъg
[
i
]->
lock
);

611 
	`дУ_™d_u∆ock_acы±Ъg_sockС
(
Ћv
->
acы±Ъg
[
i
]);

612 
Фr_дУ_acы±Ъg
;

616  &
Ћv
->
ba£
;

618 
Фr_дУ_acы±Ъg
:

619 
	`mm_дУ
(
Ћv
->
acы±Ъg
);

621 
Фr_dЦСe_lock
:

622 
	`DЦСeCrЩi€lSeщiЏ
(&
Ћv
->
lock
);

623 
Фr_дУ_Ћv
:

624 
	`mm_дУ
(
Ћv
);

625 
Фr
:

627  
NULL
;

628 
	}
}

	@log-internal.h

27 #iвdeа
_LOG_H_


28 
	#_LOG_H_


	)

30 
	~<evТt2/utЮ.h
>

32 #ifdeа
__GNUC__


33 
	#EV_CHECK_FMT
(
a
,
b
и
	`__©МibuЛ__
((
	`f№m©
(
іЪtf
,З, b)))

	)

35 
	#EV_CHECK_FMT
(
a
,
b
)

	)

38 
	#_EVENT_ERR_ABORT
 0xdЧddЧd

	)

40 
	$evТt_Фr
(
evЃ
, cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(2,3);

41 
	$evТt_wђn
(cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(1,2);

42 
	$evТt_sock_Фr
(
evЃ
, 
evutЮ_sockС_t
 
sock
, cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(3,4);

43 
	$evТt_sock_wђn
(
evutЮ_sockС_t
 
sock
, cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(2,3);

44 
	$evТt_Фrx
(
evЃ
, cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(2,3);

45 
	$evТt_wђnx
(cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(1,2);

46 
	$evТt_msgx
(cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(1,2);

47 
	$_evТt_debugx
(cЏ° *
fmt
, ...и
	`EV_CHECK_FMT
(1,2);

49 #ifdeа
USE_DEBUG


50 
	#evТt_debug
(
x
и
_evТt_debugx
 
	)
x

52 
	#evТt_debug
(
x
иdЎ{;
	}
} 0)

	)

55 #undeа
EV_CHECK_FMT


	@log.c

40 
	~"evТt-cЏfig.h
"

42 #ifdeа
WIN32


43 
	~<wЪsock2.h
>

44 
	#WIN32_LEAN_AND_MEAN


	)

45 
	~<wЪdows.h
>

46 #undeа
WIN32_LEAN_AND_MEAN


48 
	~<sys/ty≥s.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°dђg.h
>

52 
	~<°rЪg.h
>

53 
	~<ФЇo.h
>

54 
	~"evТt2/evТt.h
"

55 
	~"evТt2/utЮ.h
"

57 
	~"log-ЪЛЇЃ.h
"

59 
_wђn_hЦ≥r
(
£vФЩy
, cЏ° *
Фr°r
, cЏ° *
fmt
,

60 
va_li°
 
≠
);

61 
evТt_log
(
£vФЩy
, cЏ° *
msg
);

63 
evТt_зПl_cb
 
	gзПl_в
 = 
NULL
;

66 
	$evТt_£t_зПl_€ќback
(
evТt_зПl_cb
 
cb
)

68 
зПl_в
 = 
cb
;

69 
	}
}

72 
	$evТt_exЩ
(
Фrcode
)

74 iа(
зПl_в
)

75 
	`зПl_в
(
Фrcode
);

76 iа(
Фrcode
 =р
_EVENT_ERR_ABORT
)

77 
	`ab№t
();

79 
	`exЩ
(
Фrcode
);

80 
	}
}

83 
	$evТt_Фr
(
evЃ
, cЏ° *
fmt
, ...)

85 
va_li°
 
≠
;

87 
	`va_°ђt
(
≠
, 
fmt
);

88 
	`_wђn_hЦ≥r
(
_EVENT_LOG_ERR
, 
	`°їЉ№
(
ФЇo
), 
fmt
, 
≠
);

89 
	`va_Тd
(
≠
);

90 
	`evТt_exЩ
(
evЃ
);

91 
	}
}

94 
	$evТt_wђn
(cЏ° *
fmt
, ...)

96 
va_li°
 
≠
;

98 
	`va_°ђt
(
≠
, 
fmt
);

99 
	`_wђn_hЦ≥r
(
_EVENT_LOG_WARN
, 
	`°їЉ№
(
ФЇo
), 
fmt
, 
≠
);

100 
	`va_Тd
(
≠
);

101 
	}
}

104 
	$evТt_sock_Фr
(
evЃ
, 
evutЮ_sockС_t
 
sock
, cЏ° *
fmt
, ...)

106 
va_li°
 
≠
;

107 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
sock
);

109 
	`va_°ђt
(
≠
, 
fmt
);

110 
	`_wђn_hЦ≥r
(
_EVENT_LOG_ERR
, 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
), 
fmt
, 
≠
);

111 
	`va_Тd
(
≠
);

112 
	`evТt_exЩ
(
evЃ
);

113 
	}
}

116 
	$evТt_sock_wђn
(
evutЮ_sockС_t
 
sock
, cЏ° *
fmt
, ...)

118 
va_li°
 
≠
;

119 
Фr
 = 
	`evutЮ_sockС_gСФr№
(
sock
);

121 
	`va_°ђt
(
≠
, 
fmt
);

122 
	`_wђn_hЦ≥r
(
_EVENT_LOG_WARN
, 
	`evutЮ_sockС_Фr№_to_°rЪg
(
Фr
), 
fmt
, 
≠
);

123 
	`va_Тd
(
≠
);

124 
	}
}

127 
	$evТt_Фrx
(
evЃ
, cЏ° *
fmt
, ...)

129 
va_li°
 
≠
;

131 
	`va_°ђt
(
≠
, 
fmt
);

132 
	`_wђn_hЦ≥r
(
_EVENT_LOG_ERR
, 
NULL
, 
fmt
, 
≠
);

133 
	`va_Тd
(
≠
);

134 
	`evТt_exЩ
(
evЃ
);

135 
	}
}

138 
	$evТt_wђnx
(cЏ° *
fmt
, ...)

140 
va_li°
 
≠
;

142 
	`va_°ђt
(
≠
, 
fmt
);

143 
	`_wђn_hЦ≥r
(
_EVENT_LOG_WARN
, 
NULL
, 
fmt
, 
≠
);

144 
	`va_Тd
(
≠
);

145 
	}
}

148 
	$evТt_msgx
(cЏ° *
fmt
, ...)

150 
va_li°
 
≠
;

152 
	`va_°ђt
(
≠
, 
fmt
);

153 
	`_wђn_hЦ≥r
(
_EVENT_LOG_MSG
, 
NULL
, 
fmt
, 
≠
);

154 
	`va_Тd
(
≠
);

155 
	}
}

158 
	$_evТt_debugx
(cЏ° *
fmt
, ...)

160 
va_li°
 
≠
;

162 
	`va_°ђt
(
≠
, 
fmt
);

163 
	`_wђn_hЦ≥r
(
_EVENT_LOG_DEBUG
, 
NULL
, 
fmt
, 
≠
);

164 
	`va_Тd
(
≠
);

165 
	}
}

168 
	$_wђn_hЦ≥r
(
£vФЩy
, cЏ° *
Фr°r
, cЏ° *
fmt
, 
va_li°
 
≠
)

170 
buf
[1024];

171 
size_t
 
Ћn
;

173 iа(
fmt
 !р
NULL
)

174 
	`evutЮ_vҐіЪtf
(
buf
, (buf), 
fmt
, 
≠
);

176 
buf
[0] = '\0';

178 iа(
Фr°r
) {

179 
Ћn
 = 
	`°ЊТ
(
buf
);

180 iа(
Ћn
 < (
buf
) - 3) {

181 
	`evutЮ_ҐіЪtf
(
buf
 + 
Ћn
, (bufи-ЖТ, ": %s", 
Фr°r
);

185 
	`evТt_log
(
£vФЩy
, 
buf
);

186 
	}
}

188 
evТt_log_cb
 
	glog_в
 = 
NULL
;

191 
	$evТt_£t_log_€ќback
(
evТt_log_cb
 
cb
)

193 
log_в
 = 
cb
;

194 
	}
}

197 
	$evТt_log
(
£vФЩy
, cЏ° *
msg
)

199 iа(
log_в
)

200 
	`log_в
(
£vФЩy
, 
msg
);

202 cЏ° *
£vФЩy_°r
;

203 
£vФЩy
) {

204 
_EVENT_LOG_DEBUG
:

205 
£vФЩy_°r
 = "debug";

207 
_EVENT_LOG_MSG
:

208 
£vФЩy_°r
 = "msg";

210 
_EVENT_LOG_WARN
:

211 
£vФЩy_°r
 = "warn";

213 
_EVENT_LOG_ERR
:

214 
£vФЩy_°r
 = "err";

217 
£vФЩy_°r
 = "???";

220 ()
	`еrЪtf
(
°dФr
, "[%s] %s\n", 
£vФЩy_°r
, 
msg
);

222 
	}
}

	@minheap-internal.h

28 #iвdeа
_MIN_HEAP_H_


29 
	#_MIN_HEAP_H_


	)

31 
	~"evТt-cЏfig.h
"

32 
	~"evТt2/evТt.h
"

33 
	~"evТt2/evТt_°ruщ.h
"

34 
	~"evТt2/utЮ.h
"

35 
	~"utЮ-ЪЛЇЃ.h
"

37 
	smЪ_hЧp


39 
evТt
** 
	mp
;

40 
	mn
, 
	ma
;

41 } 
	tmЪ_hЧp_t
;

43 
ЪlЪe
 
mЪ_hЧp_щ№
(
mЪ_hЧp_t
* 
s
);

44 
ЪlЪe
 
mЪ_hЧp_dt№
(
mЪ_hЧp_t
* 
s
);

45 
ЪlЪe
 
mЪ_hЧp_Цem_ЪЩ
(
evТt
* 
e
);

46 
ЪlЪe
 
mЪ_hЧp_Цt_is_tЁ
(cЏ° 
evТt
 *
e
);

47 
ЪlЪe
 
mЪ_hЧp_Цem_gї©Ф
(
evТt
 *
a
, evТИ*
b
);

48 
ЪlЪe
 
mЪ_hЧp_em±y
(
mЪ_hЧp_t
* 
s
);

49 
ЪlЪe
 
mЪ_hЧp_size
(
mЪ_hЧp_t
* 
s
);

50 
ЪlЪe
 
evТt
* 
mЪ_hЧp_tЁ
(
mЪ_hЧp_t
* 
s
);

51 
ЪlЪe
 
mЪ_hЧp_ї£rve
(
mЪ_hЧp_t
* 
s
, 
n
);

52 
ЪlЪe
 
mЪ_hЧp_push
(
mЪ_hЧp_t
* 
s
, 
evТt
* 
e
);

53 
ЪlЪe
 
evТt
* 
mЪ_hЧp_pЁ
(
mЪ_hЧp_t
* 
s
);

54 
ЪlЪe
 
mЪ_hЧp_Фa£
(
mЪ_hЧp_t
* 
s
, 
evТt
* 
e
);

55 
ЪlЪe
 
mЪ_hЧp_shiб_up_
(
mЪ_hЧp_t
* 
s
, 
hёe_Ъdex
, 
evТt
* 
e
);

56 
ЪlЪe
 
mЪ_hЧp_shiб_down_
(
mЪ_hЧp_t
* 
s
, 
hёe_Ъdex
, 
evТt
* 
e
);

58 
	$mЪ_hЧp_Цem_gї©Ф
(
evТt
 *
a
, evТИ*
b
)

60  
	`evutЮ_timФcmp
(&
a
->
ev_timeout
, &
b
->ev_timeout, >);

61 
	}
}

63 
	$mЪ_hЧp_щ№
(
mЪ_hЧp_t
* 
s
и{ s->
p
 = 0; s->
n
 = 0; s->
a
 = 0; 
	}
}

64 
	$mЪ_hЧp_dt№
(
mЪ_hЧp_t
* 
s
и{ 
	`дУ
(s->
p
); 
	}
}

65 
	$mЪ_hЧp_Цem_ЪЩ
(
evТt
* 
e
и{Г->
ev_timeout_pos
.
mЪ_hЧp_idx
 = -1; 
	}
}

66 
	$mЪ_hЧp_em±y
(
mЪ_hЧp_t
* 
s
и{  0u =рs->
n
; 
	}
}

67 
	$mЪ_hЧp_size
(
mЪ_hЧp_t
* 
s
и{  s->
n
; 
	}
}

68 
evТt
* 
	$mЪ_hЧp_tЁ
(
mЪ_hЧp_t
* 
s
и{  s->
n
 ? *s->
p
 : 0; 
	}
}

70 
	$mЪ_hЧp_push
(
mЪ_hЧp_t
* 
s
, 
evТt
* 
e
)

72 iа(
	`mЪ_hЧp_ї£rve
(
s
, s->
n
 + 1))

74 
	`mЪ_hЧp_shiб_up_
(
s
, s->
n
++, 
e
);

76 
	}
}

78 
evТt
* 
	$mЪ_hЧp_pЁ
(
mЪ_hЧp_t
* 
s
)

80 iа(
s
->
n
)

82 
evТt
* 
e
 = *
s
->
p
;

83 
	`mЪ_hЧp_shiб_down_
(
s
, 0u, s->
p
[--s->
n
]);

84 
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
 = -1;

85  
e
;

88 
	}
}

90 
	$mЪ_hЧp_Цt_is_tЁ
(cЏ° 
evТt
 *
e
)

92  
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
 == 0;

93 
	}
}

95 
	$mЪ_hЧp_Фa£
(
mЪ_hЧp_t
* 
s
, 
evТt
* 
e
)

97 iа((()-1и!р
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
)

99 
evТt
 *
ѕ°
 = 
s
->
p
[--s->
n
];

100 
ЈїЅ
 = (
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
 - 1) / 2;

106 iа(
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
 > 0 && 
	`mЪ_hЧp_Цem_gї©Ф
(
s
->
p
[
ЈїЅ
], 
ѕ°
))

107 
	`mЪ_hЧp_shiб_up_
(
s
, 
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
, 
ѕ°
);

109 
	`mЪ_hЧp_shiб_down_
(
s
, 
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
, 
ѕ°
);

110 
e
->
ev_timeout_pos
.
mЪ_hЧp_idx
 = -1;

114 
	}
}

116 
	$mЪ_hЧp_ї£rve
(
mЪ_hЧp_t
* 
s
, 
n
)

118 iа(
s
->
a
 < 
n
)

120 
evТt
** 
p
;

121 
a
 = 
s
->a ? s->a * 2 : 8;

122 if(
a
 < 
n
)

123 
a
 = 
n
;

124 if(!(
p
 = (
evТt
**)
	`їЃloc
(
s
->p, 
a
 *  *p)))

126 
s
->
p
 =Е;

127 
s
->
a
 =З;

130 
	}
}

132 
	$mЪ_hЧp_shiб_up_
(
mЪ_hЧp_t
* 
s
, 
hёe_Ъdex
, 
evТt
* 
e
)

134 
ЈїЅ
 = (
hёe_Ъdex
 - 1) / 2;

135 
hёe_Ъdex
 && 
	`mЪ_hЧp_Цem_gї©Ф
(
s
->
p
[
ЈїЅ
], 
e
))

137 (
s
->
p
[
hёe_Ъdex
] = s->p[
ЈїЅ
])->
ev_timeout_pos
.
mЪ_hЧp_idx
 = hole_index;

138 
hёe_Ъdex
 = 
ЈїЅ
;

139 
ЈїЅ
 = (
hёe_Ъdex
 - 1) / 2;

141 (
s
->
p
[
hёe_Ъdex
] = 
e
)->
ev_timeout_pos
.
mЪ_hЧp_idx
 = hole_index;

142 
	}
}

144 
	$mЪ_hЧp_shiб_down_
(
mЪ_hЧp_t
* 
s
, 
hёe_Ъdex
, 
evТt
* 
e
)

146 
mЪ_chЮd
 = 2 * (
hёe_Ъdex
 + 1);

147 
mЪ_chЮd
 <р
s
->
n
)

149 
mЪ_chЮd
 -рmЪ_chЮd =р
s
->
n
 || 
	`mЪ_hЧp_Цem_gї©Ф
(s->
p
[min_child], s->p[min_child - 1]);

150 iа(!(
	`mЪ_hЧp_Цem_gї©Ф
(
e
, 
s
->
p
[
mЪ_chЮd
])))

152 (
s
->
p
[
hёe_Ъdex
] = s->p[
mЪ_chЮd
])->
ev_timeout_pos
.
mЪ_hЧp_idx
 = hole_index;

153 
hёe_Ъdex
 = 
mЪ_chЮd
;

154 
mЪ_chЮd
 = 2 * (
hёe_Ъdex
 + 1);

156 
	`mЪ_hЧp_shiб_up_
(
s
, 
hёe_Ъdex
, 
e
);

157 
	}
}

	@mm-internal.h

26 #iвdeа
_EVENT_MM_INTERNAL_H


27 
	#_EVENT_MM_INTERNAL_H


	)

29 
	~<sys/ty≥s.h
>

31 #ifdeа
__эlu•lus


35 #iвdeа
_EVENT_DISABLE_MM_REPLACEMENT


37 *
mm_mЃloc
(
size_t
 
sz
);

38 *
mm_€ќoc
(
size_t
 
couЅ
, size_И
size
);

39 *
mm_°rdup
(cЏ° *
s
);

40 *
mm_їЃloc
(*
p
, 
size_t
 
sz
);

41 
mm_дУ
(*
p
);

43 
	#mm_mЃloc
(
sz
и
	`mЃloc
(sz)

	)

44 
	#mm_€ќoc
(
n
, 
sz
и
	`€ќoc
(“), (sz))

	)

45 
	#mm_°rdup
(
s
и
	`°rdup
(s)

	)

46 
	#mm_їЃloc
(
p
, 
sz
и
	`їЃloc
(’), (sz))

	)

47 
	#mm_дУ
(
p
и
	`дУ
’)

	)

50 #ifdeа
__эlu•lus


	@poll.c

29 
	~"evТt-cЏfig.h
"

31 
	~<sys/ty≥s.h
>

32 #ifdeа
_EVENT_HAVE_SYS_TIME_H


33 
	~<sys/time.h
>

35 
	~<sys/queue.h
>

36 
	~<pёl.h
>

37 
	~<sig«l.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rЪg.h
>

41 
	~<uni°d.h
>

42 
	~<ФЇo.h
>

44 
	~"evТt-ЪЛЇЃ.h
"

45 
	~"evsig«l-ЪЛЇЃ.h
"

46 
	~"log-ЪЛЇЃ.h
"

47 
	~"evm≠-ЪЛЇЃ.h
"

48 
	~"evТt2/thїad.h
"

49 
	~"evthїad-ЪЛЇЃ.h
"

51 
	spёlidx
 {

52 
	midxґus1
;

55 
	spёlЁ
 {

56 
	mevТt_couЅ
;

57 
	mnfds
;

58 
	mїЃloc_cЁy
;

60 
pёlfd
 *
	mevТt_£t
;

61 
pёlfd
 *
	mevТt_£t_cЁy
;

64 *
pёl_ЪЩ
 (
evТt_ba£
 *);

65 
pёl_add
(
evТt_ba£
 *, , 
ёd
, 
evТts
, *
_idx
);

66 
pёl_dЦ
(
evТt_ba£
 *, , 
ёd
, 
evТts
, *
_idx
);

67 
pёl_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

68 
pёl_dЧќoc
 (
evТt_ba£
 *);

70 cЏ° 
evТtЁ
 
	gpёlЁs
 = {

72 
pёl_ЪЩ
,

73 
pёl_add
,

74 
pёl_dЦ
,

75 
pёl_di•©ch
,

76 
pёl_dЧќoc
,

78 
EV_FEATURE_FDS
,

79 (
pёlidx
),

83 
	$pёl_ЪЩ
(
evТt_ba£
 *
ba£
)

85 
pёlЁ
 *pollop;

87 iа(!(
pёlЁ
 = 
	`mm_€ќoc
(1, (pollop))))

88  (
NULL
);

90 
	`evsig_ЪЩ
(
ba£
);

92  (
pёlЁ
);

93 
	}
}

95 #ifdeа
CHECK_INVARIANTS


97 
	$pёl_check_ok
(
pёlЁ
 *
pЁ
)

99 
i
, 
idx
;

100 
evТt
 *
ev
;

102 
i
 = 0; i < 
pЁ
->
fd_couЅ
; ++i) {

103 
idx
 = 
pЁ
->
idxґus1_by_fd
[
i
]-1;

104 iа(
idx
 < 0)

106 
	`EVUTIL_ASSERT
(
pЁ
->
evТt_£t
[
idx
].
fd
 =р
i
);

108 
i
 = 0; i < 
pЁ
->
nfds
; ++i) {

109 
pёlfd
 *
pfd
 = &
pЁ
->
evТt_£t
[
i
];

110 
	`EVUTIL_ASSERT
(
pЁ
->
idxґus1_by_fd
[
pfd
->
fd
] =р
i
+1);

112 
	}
}

114 
	#pёl_check_ok
(
pЁ
)

	)

118 
	$pёl_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

120 
їs
, 
i
, 
j
, 
m£c
 = -1, 
nfds
;

121 
pёlЁ
 *
pЁ
 = 
ba£
->
evba£
;

122 
pёlfd
 *
evТt_£t
;

124 
	`pёl_check_ok
(
pЁ
);

126 
nfds
 = 
pЁ
->nfds;

128 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


129 iа(
ba£
->
th_ba£_lock
) {

135 iа(
pЁ
->
їЃloc_cЁy
) {

136 
pёlfd
 *
tmp
 = 
	`mm_їЃloc
(
pЁ
->
evТt_£t_cЁy
,

137 
pЁ
->
evТt_couЅ
 * (
pёlfd
));

138 iа(
tmp
 =р
NULL
) {

139 
	`evТt_wђn
("realloc");

142 
pЁ
->
evТt_£t_cЁy
 = 
tmp
;

143 
pЁ
->
їЃloc_cЁy
 = 0;

145 
	`memэy
(
pЁ
->
evТt_£t_cЁy
,ЕЁ->
evТt_£t
,

146 (
pёlfd
)*
nfds
);

147 
evТt_£t
 = 
pЁ
->
evТt_£t_cЁy
;

149 
evТt_£t
 = 
pЁ
->event_set;

152 
evТt_£t
 = 
pЁ
->event_set;

155 iа(
tv
 !р
NULL
)

156 
m£c
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

158 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

160 
їs
 = 
	`pёl
(
evТt_£t
, 
nfds
, 
m£c
);

162 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

164 iа(
їs
 == -1) {

165 iа(
ФЇo
 !р
EINTR
) {

166 
	`evТt_wђn
("poll");

170 
	`evsig_іoыss
(
ba£
);

172 } iа(
ba£
->
sig
.
evsig_€ught
) {

173 
	`evsig_іoыss
(
ba£
);

176 
	`evТt_debug
(("%s:Её»їp№t†%d", 
__func__
, 
їs
));

178 iа(
їs
 =р0 || 
nfds
 == 0)

181 
i
 = 
	`њndom
(и% 
nfds
;

182 
j
 = 0; j < 
nfds
; j++) {

183 
wh©
;

184 iа(++
i
 =р
nfds
)

185 
i
 = 0;

186 
wh©
 = 
evТt_£t
[
i
].
їvТts
;

187 iа(!
wh©
)

190 
їs
 = 0;

193 iа(
wh©
 & (
POLLHUP
|
POLLERR
))

194 
wh©
 |р
POLLIN
|
POLLOUT
;

195 iа(
wh©
 & 
POLLIN
)

196 
їs
 |р
EV_READ
;

197 iа(
wh©
 & 
POLLOUT
)

198 
їs
 |р
EV_WRITE
;

199 iа(
їs
 == 0)

202 
	`evm≠_io_aщive
(
ba£
, 
evТt_£t
[
i
].
fd
, 
їs
);

206 
	}
}

209 
	$pёl_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
_idx
)

211 
pёlЁ
 *
pЁ
 = 
ba£
->
evba£
;

212 
pёlfd
 *
pfd
 = 
NULL
;

213 
pёlidx
 *
idx
 = 
_idx
;

214 
i
;

216 
	`EVUTIL_ASSERT
((
evТts
 & 
EV_SIGNAL
) == 0);

217 iа(!(
evТts
 & (
EV_READ
|
EV_WRITE
)))

220 
	`pёl_check_ok
(
pЁ
);

221 iа(
pЁ
->
nfds
 + 1 >рpЁ->
evТt_couЅ
) {

222 
pёlfd
 *
tmp_evТt_£t
;

223 
tmp_evТt_couЅ
;

225 iа(
pЁ
->
evТt_couЅ
 < 32)

226 
tmp_evТt_couЅ
 = 32;

228 
tmp_evТt_couЅ
 = 
pЁ
->
evТt_couЅ
 * 2;

231 
tmp_evТt_£t
 = 
	`mm_їЃloc
(
pЁ
->
evТt_£t
,

232 
tmp_evТt_couЅ
 * (
pёlfd
));

233 iа(
tmp_evТt_£t
 =р
NULL
) {

234 
	`evТt_wђn
("realloc");

237 
pЁ
->
evТt_£t
 = 
tmp_evТt_£t
;

239 
pЁ
->
evТt_couЅ
 = 
tmp_evТt_couЅ
;

240 
pЁ
->
їЃloc_cЁy
 = 1;

243 
i
 = 
idx
->
idxґus1
 - 1;

245 iа(
i
 >= 0) {

246 
pfd
 = &
pЁ
->
evТt_£t
[
i
];

248 
i
 = 
pЁ
->
nfds
++;

249 
pfd
 = &
pЁ
->
evТt_£t
[
i
];

250 
pfd
->
evТts
 = 0;

251 
pfd
->
fd
 = fd;

252 
idx
->
idxґus1
 = 
i
 + 1;

255 
pfd
->
їvТts
 = 0;

256 iа(
evТts
 & 
EV_WRITE
)

257 
pfd
->
evТts
 |р
POLLOUT
;

258 iа(
evТts
 & 
EV_READ
)

259 
pfd
->
evТts
 |р
POLLIN
;

260 
	`pёl_check_ok
(
pЁ
);

263 
	}
}

270 
	$pёl_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
_idx
)

272 
pёlЁ
 *
pЁ
 = 
ba£
->
evba£
;

273 
pёlfd
 *
pfd
 = 
NULL
;

274 
pёlidx
 *
idx
 = 
_idx
;

275 
i
;

277 
	`EVUTIL_ASSERT
((
evТts
 & 
EV_SIGNAL
) == 0);

278 iа(!(
evТts
 & (
EV_READ
|
EV_WRITE
)))

281 
	`pёl_check_ok
(
pЁ
);

282 
i
 = 
idx
->
idxґus1
 - 1;

283 iа(
i
 < 0)

287 
pfd
 = &
pЁ
->
evТt_£t
[
i
];

288 iа(
evТts
 & 
EV_READ
)

289 
pfd
->
evТts
 &р~
POLLIN
;

290 iа(
evТts
 & 
EV_WRITE
)

291 
pfd
->
evТts
 &р~
POLLOUT
;

292 
	`pёl_check_ok
(
pЁ
);

293 iа(
pfd
->
evТts
)

298 
idx
->
idxґus1
 = 0;

300 --
pЁ
->
nfds
;

301 iа(
i
 !р
pЁ
->
nfds
) {

306 
	`memэy
(&
pЁ
->
evТt_£t
[
i
], &pЁ->evТt_£t[pЁ->
nfds
],

307 (
pёlfd
));

308 
idx
 = 
	`evm≠_io_gС_fdЪfo
(&
ba£
->
io
, 
pЁ
->
evТt_£t
[
i
].
fd
);

309 
	`EVUTIL_ASSERT
(
idx
);

310 
	`EVUTIL_ASSERT
(
idx
->
idxґus1
 =р
pЁ
->
nfds
 + 1);

311 
idx
->
idxґus1
 = 
i
 + 1;

314 
	`pёl_check_ok
(
pЁ
);

316 
	}
}

319 
	$pёl_dЧќoc
(
evТt_ba£
 *
ba£
)

321 
pёlЁ
 *
pЁ
 = 
ba£
->
evba£
;

323 
	`evsig_dЧќoc
(
ba£
);

324 iа(
pЁ
->
evТt_£t
)

325 
	`mm_дУ
(
pЁ
->
evТt_£t
);

326 iа(
pЁ
->
evТt_£t_cЁy
)

327 
	`mm_дУ
(
pЁ
->
evТt_£t_cЁy
);

329 
	`mem£t
(
pЁ
, 0, (
pёlЁ
));

330 
	`mm_дУ
(
pЁ
);

331 
	}
}

	@ratelim-internal.h

26 #iвdeа
_RATELIM_INTERNAL_H_


27 
	#_RATELIM_INTERNAL_H_


	)

29 #ifdeа
__эlu•lus


33 
	~<evТt2/utЮ.h
>

38 
	sev_tokТ_buckС
 {

41 
ev_Ъt32_t
 
їad_limЩ
, 
wrЩe_limЩ
;

44 
ev_uЪt32_t
 
ѕ°_upd©ed
;

48 
	sev_tokТ_buckС_cfg
 {

50 
ev_uЪt32_t
 
їad_њЛ
;

52 
ev_uЪt32_t
 
їad_maximum
;

54 
ev_uЪt32_t
 
wrЩe_њЛ
;

56 
ev_uЪt32_t
 
wrЩe_maximum
;

60 
timevЃ
 
tick_timeout
;

63 
m£c_≥r_tick
;

68 
ev_tokТ_buckС_upd©e
(
ev_tokТ_buckС
 *
buckС
,

69 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
,

70 
ev_uЪt32_t
 
cuЉТt_tick
);

74 
ev_uЪt32_t
 
ev_tokТ_buckС_gС_tick
(cЏ° 
timevЃ
 *
tv
,

75 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
);

82 
ev_tokТ_buckС_ЪЩ
(
ev_tokТ_buckС
 *
buckС
,

83 cЏ° 
ev_tokТ_buckС_cfg
 *
cfg
,

84 
ev_uЪt32_t
 
cuЉТt_tick
,

85 
їЪЩЯlize
);

88 
	#ev_tokТ_buckС_deьemТt_їad
(
b
,
n
) \

90 (
b
)->
їad_limЩ
 -р(
n
); \

91 } 0)

	)

93 
	#ev_tokТ_buckС_deьemТt_wrЩe
(
b
,
n
) \

95 (
b
)->
wrЩe_limЩ
 -р(
n
); \

96 } 0)

	)

98 #ifdeа
__эlu•lus


	@sample/dns-example.c

8 
	~<evТt-cЏfig.h
>

10 
	~<sys/ty≥s.h
>

12 #ifdeа
WIN32


13 
	~<wЪsock2.h
>

14 
	~<ws2tэЭ.h
>

16 
	~<sys/sockС.h
>

17 
	~<√tЪС/Ъ.h
>

18 
	~<ђЈ/ЪС.h
>

21 
	~<evТt2/evТt.h
>

22 
	~<evТt2/dns.h
>

23 
	~<evТt2/dns_°ruщ.h
>

24 
	~<evТt2/utЮ.h
>

26 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


27 
	~<√tЪС/Ъ6.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rЪg.h
>

34 
	#u32
 
ev_uЪt32_t


	)

35 
	#u8
 
ev_uЪt8_t


	)

38 
	$debug_Ѕя
(
u32
 
addїss
)

40 
buf
[32];

41 
u32
 
a
 = 
	`Ѕohl
(
addїss
);

42 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "%d.%d.%d.%d",

43 ()(
u8
)((
a
>>24)&0xff),

44 ()(
u8
)((
a
>>16)&0xff),

45 ()(
u8
)((
a
>>8 )&0xff),

46 ()(
u8
)((
a
 )&0xff));

47  
buf
;

48 
	}
}

51 
	$maЪ_€ќback
(
їsu…
, 
ty≥
, 
couЅ
, 
Йl
,

52 *
addrs
, *
№ig
) {

53 *
n
 = (*)
№ig
;

54 
i
;

55 
i
 = 0; i < 
couЅ
; ++i) {

56 iа(
ty≥
 =р
DNS_IPv4_A
) {

57 
	`іЪtf
("%s: %s\n", 
n
, 
	`debug_Ѕя
(((
u32
*)
addrs
)[
i
]));

58 } iа(
ty≥
 =р
DNS_PTR
) {

59 
	`іЪtf
("%s: %s\n", 
n
, ((**)
addrs
)[
i
]);

62 iа(!
couЅ
) {

63 
	`іЪtf
("%s: NЎ™swФ (%d)\n", 
n
, 
їsu…
);

65 
	`fжush
(
°dout
);

66 
	}
}

69 
	$gai_€ќback
(
Фr
, 
evutЮ_addrЪfo
 *
ai
, *
ђg
)

71 cЏ° *
«me
 = 
ђg
;

72 
evutЮ_addrЪfo
 *
ai_fЬ°
 = 
NULL
;

73 
i
;

74 iа(
Фr
) {

75 
	`іЪtf
("%s: %s\n", 
«me
, 
	`evutЮ_gai_°їЉ№
(
Фr
));

77 iа(
ai
 &&Зi->
ai_€nЏ«me
)

78 
	`іЪtf
(" %†==> %s\n", 
«me
, 
ai
->
ai_€nЏ«me
);

79 
i
=0; 
ai
;ЗШрai->
ai_√xt
, ++i) {

80 
buf
[128];

81 iа(
ai
->
ai_зmЮy
 =р
PF_INET
) {

82 
sockaddr_Ъ
 *
sЪ
 =

83 (
sockaddr_Ъ
*)
ai
->
ai_addr
;

84 
	`evutЮ_ЪС_ЅЁ
(
AF_INET
, &
sЪ
->
sЪ_addr
, 
buf
,

85 (
buf
));

86 
	`іЪtf
("[%d] %s: %s\n",
i
,
«me
,
buf
);

88 
sockaddr_Ъ6
 *
sЪ6
 =

89 (
sockaddr_Ъ6
*)
ai
->
ai_addr
;

90 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
sЪ6
->
sЪ6_addr
, 
buf
,

91 (
buf
));

92 
	`іЪtf
("[%d] %s: %s\n",
i
,
«me
,
buf
);

95 iа(
ai_fЬ°
)

96 
	`evutЮ_дУaddrЪfo
(
ai_fЬ°
);

97 
	}
}

100 
	$evdns_£rvФ_€ќback
(
evdns_£rvФ_їque°
 *
їq
, *
d©a
)

102 
i
, 
r
;

103 ()
d©a
;

106 
i
 = 0; i < 
їq
->
nque°iЏs
; ++i) {

107 
u32
 
™s
 = 
	`htЏl
(0xc0a80b0bUL);

108 iа(
їq
->
que°iЏs
[
i
]->
ty≥
 =р
EVDNS_TYPE_A
 &&

109 
їq
->
que°iЏs
[
i
]->
dns_que°iЏ_юass
 =р
EVDNS_CLASS_INET
) {

110 
	`іЪtf
(" --ДХlyЪg f№ %†(A)\n", 
їq
->
que°iЏs
[
i
]->
«me
);

111 
r
 = 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
,Дeq->
que°iЏs
[
i
]->
«me
,

112 1, &
™s
, 10);

113 iа(
r
<0)

114 
	`іЪtf
("eeep, didn't work.\n");

115 } iа(
їq
->
que°iЏs
[
i
]->
ty≥
 =р
EVDNS_TYPE_PTR
 &&

116 
їq
->
que°iЏs
[
i
]->
dns_que°iЏ_юass
 =р
EVDNS_CLASS_INET
) {

117 
	`іЪtf
(" --ДХlyЪg f№ %†(PTR)\n", 
їq
->
que°iЏs
[
i
]->
«me
);

118 
r
 = 
	`evdns_£rvФ_їque°_add_±r_їґy
(
їq
, 
NULL
,Дeq->
que°iЏs
[
i
]->
«me
,

121 
	`іЪtf
(" -- skЭpЪg %†[%d %d]\n", 
їq
->
que°iЏs
[
i
]->
«me
,

122 
їq
->
que°iЏs
[
i
]->
ty≥
,Дeq->que°iЏs[i]->
dns_que°iЏ_юass
);

126 
r
 = 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 0);

127 iа(
r
<0)

128 
	`іЪtf
("eeek, couldn't sendДeply.\n");

129 
	}
}

131 
	gvФbo£
 = 0;

134 
	$logв
(
is_wђn
, cЏ° *
msg
) {

135 iа(!
is_wђn
 && !
vФbo£
)

137 
	`еrЪtf
(
°dФr
, "%s: %s\n", 
is_wђn
?"WARN":"INFO", 
msg
);

138 
	}
}

141 
	$maЪ
(
c
, **
v
) {

142 
idx
;

143 
їvФ£
 = 0, 
£rvФЛ°
 = 0, 
u£_gСaddrЪfo
 = 0;

144 
evТt_ba£
 *evТt_ba£ = 
NULL
;

145 
evdns_ba£
 *evdns_ba£ = 
NULL
;

146 iа(
c
<2) {

147 
	`еrЪtf
(
°dФr
, "syЅax: %†[-x] [-v] ho°«me\n", 
v
[0]);

148 
	`еrЪtf
(
°dФr
, "syЅax: %†[-£rvФЛ°]\n", 
v
[0]);

151 
idx
 = 1;

152 
idx
 < 
c
 && 
v
[idx][0] == '-') {

153 iа(!
	`°rcmp
(
v
[
idx
], "-x"))

154 
їvФ£
 = 1;

155 iа(!
	`°rcmp
(
v
[
idx
], "-v"))

156 
vФbo£
 = 1;

157 iа(!
	`°rcmp
(
v
[
idx
], "-g"))

158 
u£_gСaddrЪfo
 = 1;

159 iа(!
	`°rcmp
(
v
[
idx
], "-servertest"))

160 
£rvФЛ°
 = 1;

162 
	`еrЪtf
(
°dФr
, "UnknowјЁtiЏ %s\n", 
v
[
idx
]);

163 ++
idx
;

166 
evТt_ba£
 = 
	`evТt_ba£_√w
();

167 
evdns_ba£
 = 
	`evdns_ba£_√w
(
evТt_ba£
, 0);

168 
	`evdns_£t_log_в
(
logв
);

170 iа(
£rvФЛ°
) {

171 
sock
;

172 
sockaddr_Ъ
 
my_addr
;

173 
sock
 = 
	`sockС
(
PF_INET
, 
SOCK_DGRAM
, 0);

174 
	`evutЮ_make_sockС_nЏblockЪg
(
sock
);

175 
my_addr
.
sЪ_зmЮy
 = 
AF_INET
;

176 
my_addr
.
sЪ_p№t
 = 
	`htЏs
(10053);

177 
my_addr
.
sЪ_addr
.
s_addr
 = 
INADDR_ANY
;

178 iа(
	`bЪd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr))<0) {

179 
	`≥Љ№
("bind");

180 
	`exЩ
(1);

182 
	`evdns_add_£rvФ_p№t_wЩh_ba£
(
evТt_ba£
, 
sock
, 0, 
evdns_£rvФ_€ќback
, 
NULL
);

184 iа(
idx
 < 
c
) {

185 #ifdeа
WIN32


186 
	`evdns_ba£_cЏfig_wЪdows_«me£rvФs
(
evdns_ba£
);

188 
	`evdns_ba£_їsёv_cЏf_Јr£
(
evdns_ba£
, 
DNS_OPTION_NAMESERVERS
,

193 
	`іЪtf
("EVUTIL_AI_CANONNAME iјexamґРр%d\n", 
EVUTIL_AI_CANONNAME
);

194 ; 
idx
 < 
c
; ++idx) {

195 iа(
їvФ£
) {

196 
Ъ_addr
 
addr
;

197 iа(
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
v
[
idx
], &
addr
)!=1) {

198 
	`еrЪtf
(
°dФr
, "SkЭpЪgВЏ-IP %s\n", 
v
[
idx
]);

201 
	`еrЪtf
(
°dФr
, "їsёvЪg %s...\n",
v
[
idx
]);

202 
	`evdns_ba£_їsёve_їvФ£
(
evdns_ba£
, &
addr
, 0, 
maЪ_€ќback
, 
v
[
idx
]);

203 } iа(
u£_gСaddrЪfo
) {

204 
evutЮ_addrЪfo
 
hЪts
;

205 
	`mem£t
(&
hЪts
, 0, (hints));

206 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

207 
hЪts
.
ai_іўocё
 = 
IPPROTO_TCP
;

208 
hЪts
.
ai_жags
 = 
EVUTIL_AI_CANONNAME
;

209 
	`еrЪtf
(
°dФr
, "їsёvЪg (fwdи%s...\n",
v
[
idx
]);

210 
	`evdns_gСaddrЪfo
(
evdns_ba£
, 
v
[
idx
], 
NULL
, &
hЪts
,

211 
gai_€ќback
, 
v
[
idx
]);

213 
	`еrЪtf
(
°dФr
, "їsёvЪg (fwdи%s...\n",
v
[
idx
]);

214 
	`evdns_ba£_їsёve_Эv4
(
evdns_ba£
, 
v
[
idx
], 0, 
maЪ_€ќback
, v[idx]);

217 
	`fжush
(
°dout
);

218 
	`evТt_ba£_di•©ch
(
evТt_ba£
);

220 
	}
}

	@sample/event-test.c

11 
	~<evТt-cЏfig.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #iвdeа
WIN32


16 
	~<sys/queue.h
>

17 
	~<uni°d.h
>

18 
	~<sys/time.h
>

20 
	~<wЪsock2.h
>

21 
	~<wЪdows.h
>

23 
	~<fъО.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<°rЪg.h
>

27 
	~<ФЇo.h
>

29 
	~<evТt.h
>

32 
	$fifo_їad
(
fd
, 
evТt
, *
ђg
)

34 
buf
[255];

35 
Ћn
;

36 
evТt
 *
ev
 = 
ђg
;

37 #ifdeа
WIN32


38 
DWORD
 
dwByЛsRЧd
;

42 
	`evТt_add
(
ev
, 
NULL
);

44 
	`еrЪtf
(
°dФr
, "fifo_read called with fd: %d,Гvent: %d,Зrg: %p\n",

45 
fd
, 
evТt
, 
ђg
);

46 #ifdeа
WIN32


47 
Ћn
 = 
	`RЧdFЮe
((
HANDLE
)
fd
, 
buf
, (bufи- 1, &
dwByЛsRЧd
, 
NULL
);

50 iа(
Ћn
 && 
dwByЛsRЧd
 == 0) {

51 
	`еrЪtf
(
°dФr
, "End Of File");

52 
	`evТt_dЦ
(
ev
);

56 
buf
[
dwByЛsRЧd
] = '\0';

58 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf) - 1);

60 iа(
Ћn
 == -1) {

61 
	`≥Љ№
("read");

63 } iа(
Ћn
 == 0) {

64 
	`еrЪtf
(
°dФr
, "Connection closed\n");

68 
buf
[
Ћn
] = '\0';

70 
	`еrЪtf
(
°dout
, "RЧd: %s\n", 
buf
);

71 
	}
}

74 
	$maЪ
(
ђgc
, **
ђgv
)

76 
evТt
 
evfifo
;

77 #ifdeа
WIN32


78 
HANDLE
 
sockС
;

80 
sockС
 = 
	`Cї©eFЮeA
("test.txt",

81 
GENERIC_READ
,

83 
NULL
,

84 
OPEN_EXISTING
,

85 
FILE_ATTRIBUTE_NORMAL
,

86 
NULL
);

88 iа(
sockС
 =р
INVALID_HANDLE_VALUE
)

92 
°©
 
°
;

93 cЏ° *
fifo
 = "event.fifo";

94 
sockС
;

96 iа(
	`l°©
 (
fifo
, &
°
) == 0) {

97 iа((
°
.
°_mode
 & 
S_IFMT
и=р
S_IFREG
) {

98 
ФЇo
 = 
EEXIST
;

99 
	`≥Љ№
("lstat");

100 
	`exЩ
 (1);

104 
	`u∆Ъk
 (
fifo
);

105 iа(
	`mkfifo
 (
fifo
, 0600) == -1) {

106 
	`≥Љ№
("mkfifo");

107 
	`exЩ
 (1);

111 #ifdeа
__lЪux


112 
sockС
 = 
	`ЁТ
 (
fifo
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

114 
sockС
 = 
	`ЁТ
 (
fifo
, 
O_RDONLY
 | 
O_NONBLOCK
, 0);

117 iа(
sockС
 == -1) {

118 
	`≥Љ№
("open");

119 
	`exЩ
 (1);

122 
	`еrЪtf
(
°dФr
, "WrЩРd©®tЎ%s\n", 
fifo
);

125 
	`evТt_ЪЩ
();

128 #ifdeа
WIN32


129 
	`evТt_£t
(&
evfifo
, ()
sockС
, 
EV_READ
, 
fifo_їad
, &evfifo);

131 
	`evТt_£t
(&
evfifo
, 
sockС
, 
EV_READ
, 
fifo_їad
, &evfifo);

135 
	`evТt_add
(&
evfifo
, 
NULL
);

137 
	`evТt_di•©ch
();

138 #ifdeа
WIN32


139 
	`Clo£H™dЋ
(
sockС
);

142 
	}
}

	@sample/hello-world.c

10 
	~<°rЪg.h
>

11 
	~<ФЇo.h
>

12 
	~<°dio.h
>

13 
	~<sig«l.h
>

14 #iвdeа
WIN32


15 
	~<√tЪС/Ъ.h
>

16 
	~<sys/sockС.h
>

19 
	~<evТt2/bufгїvТt.h
>

20 
	~<evТt2/bufгr.h
>

21 
	~<evТt2/li°ТФ.h
>

22 
	~<evТt2/utЮ.h
>

23 
	~<evТt2/evТt.h
>

25 cЏ° 
	gMESSAGE
[] = "Hello, World!\n";

27 cЏ° 
	gPORT
 = 9995;

29 
li°ТФ_cb
(
evcЏ∆i°ТФ
 *, 
evutЮ_sockС_t
,

30 
sockaddr
 *, 
sockЋn
, *);

31 
cЏn_wrЩecb
(
bufгїvТt
 *, *);

32 
cЏn_evТtcb
(
bufгїvТt
 *, , *);

33 
sig«l_cb
(
evutЮ_sockС_t
, , *);

36 
	$maЪ
(
ђgc
, **
ђgv
)

38 
evТt_ba£
 *
ba£
;

39 
evcЏ∆i°ТФ
 *
li°ТФ
;

40 
evТt
 *
sig«l_evТt
;

43 
sockaddr_Ъ
 
sЪ
;

45 
ba£
 = 
	`evТt_ba£_√w
();

46 iа(!
ba£
) {

47 
	`еrЪtf
(
°dФr
, "CouldВot initializeЖibevent!\n");

51 
	`mem£t
(&
sЪ
, 0, (sin));

52 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

53 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
PORT
);

55 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
li°ТФ_cb
, (*)base,

56 
LEV_OPT_REUSEABLE
|
LEV_OPT_CLOSE_ON_FREE
, -1,

57 (
sockaddr
*)&
sЪ
,

58 (
sЪ
));

60 iа(!
li°ТФ
) {

61 
	`еrЪtf
(
°dФr
, "CouldВot createЗЖistener!\n");

65 
sig«l_evТt
 = 
	`evsig«l_√w
(
ba£
, 
SIGINT
, 
sig«l_cb
, (*)base);

67 iа(!
sig«l_evТt
 || 
	`evТt_add
(sig«l_evТt, 
NULL
)<0) {

68 
	`еrЪtf
(
°dФr
, "CouldВot create/addЗ signalГvent!\n");

72 
	`evТt_ba£_di•©ch
(
ba£
);

74 
	`evcЏ∆i°ТФ_дУ
(
li°ТФ
);

75 
	`evТt_дУ
(
sig«l_evТt
);

76 
	`evТt_ba£_дУ
(
ba£
);

78 
	`іЪtf
("done\n");

80 
	}
}

83 
	$li°ТФ_cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
fd
,

84 
sockaddr
 *
І
, 
sockЋn
, *
u£r_d©a
)

86 
evТt_ba£
 *
ba£
 = 
u£r_d©a
;

87 
bufгїvТt
 *
bev
;

89 
bev
 = 
	`bufгїvТt_sockС_√w
(
ba£
, 
fd
, 
BEV_OPT_CLOSE_ON_FREE
);

90 iа(!
bev
) {

91 
	`еrЪtf
(
°dФr
, "Error constructing bufferevent!");

92 
	`evТt_ba£_loЁbїak
(
ba£
);

95 
	`bufгїvТt_£tcb
(
bev
, 
NULL
, 
cЏn_wrЩecb
, 
cЏn_evТtcb
, NULL);

96 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_WRITE
);

97 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

99 
	`bufгїvТt_wrЩe
(
bev
, 
MESSAGE
, 
	`°ЊТ
(MESSAGE));

100 
	}
}

103 
	$cЏn_wrЩecb
(
bufгїvТt
 *
bev
, *
u£r_d©a
)

105 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
bev
);

106 iа(
	`evbufгr_gС_Ћngth
(
ouНut
) == 0) {

107 
	`іЪtf
("flushedЗnswer\n");

108 
	`bufгїvТt_дУ
(
bev
);

110 
	}
}

113 
	$cЏn_evТtcb
(
bufгїvТt
 *
bev
, 
evТts
, *
u£r_d©a
)

115 iа(
evТts
 & 
BEV_EVENT_EOF
) {

116 
	`іЪtf
("Connection closed.\n");

117 } iа(
evТts
 & 
BEV_EVENT_ERROR
) {

118 
	`іЪtf
("GotЗnГrror onБhe connection: %s\n",

119 
	`°їЉ№
(
ФЇo
));

123 
	`bufгїvТt_дУ
(
bev
);

124 
	}
}

127 
	$sig«l_cb
(
evutЮ_sockС_t
 
sig
, 
evТts
, *
u£r_d©a
)

129 
evТt_ba£
 *
ba£
 = 
u£r_d©a
;

130 
timevЃ
 
dЦay
 = { 2, 0 };

132 
	`іЪtf
("CaughtЗn interrupt signal;Гxiting cleanly inБwo seconds.\n");

134 
	`evТt_ba£_loЁexЩ
(
ba£
, &
dЦay
);

135 
	}
}

	@sample/le-proxy.c

8 
	~<°dio.h
>

9 
	~<as£є.h
>

10 
	~<°dlib.h
>

11 
	~<°rЪg.h
>

12 
	~<ФЇo.h
>

14 
	~<sys/sockС.h
>

15 
	~<√tЪС/Ъ.h
>

17 
	~<evТt2/bufгїvТt_s¶.h
>

18 
	~<evТt2/bufгїvТt.h
>

19 
	~<evТt2/bufгr.h
>

20 
	~<evТt2/li°ТФ.h
>

21 
	~<evТt2/utЮ.h
>

23 
	~<ЁТs¶/s¶.h
>

24 
	~<ЁТs¶/Фr.h
>

25 
	~<ЁТs¶/њnd.h
>

27 
evТt_ba£
 *
	gba£
;

28 
sockaddr_°№age
 
	gli°Т_Џ_addr
;

29 
sockaddr_°№age
 
	gcЏ√щ_to_addr
;

30 
	gcЏ√щ_to_addЊТ
;

31 
	gu£_wњµФ
 = 1;

33 
SSL_CTX
 *
	gs¶_щx
 = 
NULL
;

35 
	#MAX_OUTPUT
 (512*1024)

	)

37 
dњЪed_wrЩecb
(
bufгїvТt
 *
bev
, *
щx
);

38 
evТtcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
);

41 
	$їadcb
(
bufгїvТt
 *
bev
, *
щx
)

43 
bufгїvТt
 *
Јє√r
 = 
щx
;

44 
evbufгr
 *
§c
, *
d°
;

45 
size_t
 
Ћn
;

46 
§c
 = 
	`bufгїvТt_gС_Ъput
(
bev
);

47 
Ћn
 = 
	`evbufгr_gС_Ћngth
(
§c
);

48 iа(!
Јє√r
) {

49 
	`evbufгr_dњЪ
(
§c
, 
Ћn
);

52 
d°
 = 
	`bufгїvТt_gС_ouНut
(
Јє√r
);

53 
	`evbufгr_add_bufгr
(
d°
, 
§c
);

55 iа(
	`evbufгr_gС_Ћngth
(
d°
и>р
MAX_OUTPUT
) {

59 
	`bufгїvТt_£tcb
(
Јє√r
, 
їadcb
, 
dњЪed_wrЩecb
,

60 
evТtcb
, 
bev
);

61 
	`bufгїvТt_£tw©Фmђk
(
Јє√r
, 
EV_WRITE
, 
MAX_OUTPUT
/2,

62 
MAX_OUTPUT
);

63 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

65 
	}
}

68 
	$dњЪed_wrЩecb
(
bufгїvТt
 *
bev
, *
щx
)

70 
bufгїvТt
 *
Јє√r
 = 
щx
;

74 
	`bufгїvТt_£tcb
(
bev
, 
їadcb
, 
NULL
, 
evТtcb
, 
Јє√r
);

75 
	`bufгїvТt_£tw©Фmђk
(
bev
, 
EV_WRITE
, 0, 0);

76 iа(
Јє√r
)

77 
	`bufгїvТt_ТabЋ
(
Јє√r
, 
EV_READ
);

78 
	}
}

81 
	$юo£_Џ_fЪished_wrЩecb
(
bufгїvТt
 *
bev
, *
щx
)

83 
evbufгr
 *
b
 = 
	`bufгїvТt_gС_ouНut
(
bev
);

85 iа(
	`evbufгr_gС_Ћngth
(
b
) == 0) {

86 
	`bufгїvТt_дУ
(
bev
);

88 
	}
}

91 
	$evТtcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

93 
bufгїvТt
 *
Јє√r
 = 
щx
;

95 iа(
wh©
 & (
BEV_EVENT_EOF
|
BEV_EVENT_ERROR
)) {

96 iа(
wh©
 & 
BEV_EVENT_ERROR
) {

97 
Фr
;

98 (
Фr
 = (
	`bufгїvТt_gС_ЁТs¶_Фr№
(
bev
)))) {

99 cЏ° *
msg
 = (const *)

100 
	`ERR_їasЏ_Фr№_°rЪg
(
Фr
);

101 cЏ° *
lib
 = (const *)

102 
	`ERR_lib_Фr№_°rЪg
(
Фr
);

103 cЏ° *
func
 = (const *)

104 
	`ERR_func_Фr№_°rЪg
(
Фr
);

105 
	`еrЪtf
(
°dФr
,

106 "%†Ъ %†%s\n", 
msg
, 
lib
, 
func
);

108 iа(
ФЇo
)

109 
	`≥Љ№
("connectionГrror");

112 iа(
Јє√r
) {

114 
	`їadcb
(
bev
, 
щx
);

116 iа(
	`evbufгr_gС_Ћngth
(

117 
	`bufгїvТt_gС_ouНut
(
Јє√r
))) {

121 
	`bufгїvТt_£tcb
(
Јє√r
,

122 
NULL
, 
юo£_Џ_fЪished_wrЩecb
,

123 
evТtcb
, 
NULL
);

124 
	`bufгїvТt_diІbЋ
(
Јє√r
, 
EV_READ
);

128 
	`bufгїvТt_дУ
(
Јє√r
);

131 
	`bufгїvТt_дУ
(
bev
);

133 
	}
}

136 
	$syЅax
()

138 
	`еuts
("SyЅax:\n", 
°dФr
);

139 
	`еuts
("Жe-іoxy [-s] [-W] <li°Т-Џ-addr> <cЏ√щ-to-addr>\n", 
°dФr
);

140 
	`еuts
("Examґe:\n", 
°dФr
);

141 
	`еuts
("Жe-іoxy 127.0.0.1:8888 1.2.3.4:80\n", 
°dФr
);

143 
	`exЩ
(1);

144 
	}
}

147 
	$acы±_cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
fd
,

148 
sockaddr
 *
a
, 
¶Т
, *
p
)

150 
bufгїvТt
 *
b_out
, *
b_Ъ
;

153 
b_Ъ
 = 
	`bufгїvТt_sockС_√w
(
ba£
, 
fd
,

154 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

156 iа(!
s¶_щx
 || 
u£_wњµФ
)

157 
b_out
 = 
	`bufгїvТt_sockС_√w
(
ba£
, -1,

158 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

160 
SSL
 *
s¶
 = 
	`SSL_√w
(
s¶_щx
);

161 
b_out
 = 
	`bufгїvТt_ЁТs¶_sockС_√w
(
ba£
, -1, 
s¶
,

162 
BUFFEREVENT_SSL_CONNECTING
,

163 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

166 
	`as£є
(
b_Ъ
 && 
b_out
);

168 iа(
	`bufгїvТt_sockС_cЏ√щ
(
b_out
,

169 (
sockaddr
*)&
cЏ√щ_to_addr
, 
cЏ√щ_to_addЊТ
)<0) {

170 
	`≥Љ№
("bufferevent_socket_connect");

171 
	`bufгїvТt_дУ
(
b_out
);

172 
	`bufгїvТt_дУ
(
b_Ъ
);

176 iа(
s¶_щx
 && 
u£_wњµФ
) {

177 
bufгїvТt
 *
b_s¶
;

178 
SSL
 *
s¶
 = 
	`SSL_√w
(
s¶_щx
);

179 
b_s¶
 = 
	`bufгїvТt_ЁТs¶_fЮЛr_√w
(
ba£
,

180 
b_out
, 
s¶
, 
BUFFEREVENT_SSL_CONNECTING
,

181 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

182 iа(!
b_s¶
) {

183 
	`≥Љ№
("Bufferevent_openssl_new");

184 
	`bufгїvТt_дУ
(
b_out
);

185 
	`bufгїvТt_дУ
(
b_Ъ
);

187 
b_out
 = 
b_s¶
;

190 
	`bufгїvТt_£tcb
(
b_Ъ
, 
їadcb
, 
NULL
, 
evТtcb
, 
b_out
);

191 
	`bufгїvТt_£tcb
(
b_out
, 
їadcb
, 
NULL
, 
evТtcb
, 
b_Ъ
);

193 
	`bufгїvТt_ТabЋ
(
b_Ъ
, 
EV_READ
|
EV_WRITE
);

194 
	`bufгїvТt_ТabЋ
(
b_out
, 
EV_READ
|
EV_WRITE
);

195 
	}
}

198 
	$maЪ
(
ђgc
, **
ђgv
)

200 
i
;

201 
sockЋn
;

203 
u£_s¶
 = 0;

204 
evcЏ∆i°ТФ
 *
li°ТФ
;

206 iа(
ђgc
 < 3)

207 
	`syЅax
();

209 
i
=1; i < 
ђgc
; ++i) {

210 iа(!
	`°rcmp
(
ђgv
[
i
], "-s")) {

211 
u£_s¶
 = 1;

212 } iа(!
	`°rcmp
(
ђgv
[
i
], "-W")) {

213 
u£_wњµФ
 = 0;

214 } iа(
ђgv
[
i
][0] == '-') {

215 
	`syЅax
();

220 iа(
i
+2 !р
ђgc
)

221 
	`syЅax
();

223 
	`mem£t
(&
li°Т_Џ_addr
, 0, (listen_on_addr));

224 
sockЋn
 = (
li°Т_Џ_addr
);

225 iа(
	`evutЮ_Јr£_sockaddr_p№t
(
ђgv
[
i
],

226 (
sockaddr
*)&
li°Т_Џ_addr
, &
sockЋn
)<0) {

227 
p
 = 
	`©oi
(
ђgv
[
i
]);

228 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ*)&
li°Т_Џ_addr
;

229 iа(
p
 < 1 ||Е > 65535)

230 
	`syЅax
();

231 
sЪ
->
sЪ_p№t
 = 
	`htЏs
(
p
);

232 
sЪ
->
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

233 
sЪ
->
sЪ_зmЮy
 = 
AF_INET
;

234 
sockЋn
 = (
sockaddr_Ъ
);

237 
	`mem£t
(&
cЏ√щ_to_addr
, 0, (connect_to_addr));

238 
cЏ√щ_to_addЊТ
 = (
cЏ√щ_to_addr
);

239 iа(
	`evutЮ_Јr£_sockaddr_p№t
(
ђgv
[
i
+1],

240 (
sockaddr
*)&
cЏ√щ_to_addr
, &
cЏ√щ_to_addЊТ
)<0)

241 
	`syЅax
();

243 
ba£
 = 
	`evТt_ba£_√w
();

244 iа(!
ba£
) {

245 
	`≥Љ№
("event_base_new()");

249 iа(
u£_s¶
) {

250 
r
;

251 
	`SSL_libњry_ЪЩ
();

252 
	`ERR_lяd_ьy±o_°rЪgs
();

253 
	`SSL_lяd_Фr№_°rЪgs
();

254 
	`O≥nSSL_add_Ѓl_Ѓg№Щhms
();

255 
r
 = 
	`RAND_pёl
();

256 iа(
r
 == 0) {

257 
	`еrЪtf
(
°dФr
, "RAND_poll() failed.\n");

260 
s¶_щx
 = 
	`SSL_CTX_√w
(
	`SSLv23_mСhod
());

263 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
acы±_cb
, 
NULL
,

264 
LEV_OPT_CLOSE_ON_FREE
|
LEV_OPT_CLOSE_ON_EXEC
|
LEV_OPT_REUSEABLE
,

265 -1, (
sockaddr
*)&
li°Т_Џ_addr
, 
sockЋn
);

267 
	`evТt_ba£_di•©ch
(
ba£
);

270 
	}
}

	@sample/signal-test.c

7 
	~<sys/ty≥s.h
>

9 
	~<evТt-cЏfig.h
>

11 
	~<sys/°©.h
>

12 #iвdeа
WIN32


13 
	~<sys/queue.h
>

14 
	~<uni°d.h
>

15 
	~<sys/time.h
>

17 
	~<wЪsock2.h
>

18 
	~<wЪdows.h
>

20 
	~<sig«l.h
>

21 
	~<fъО.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rЪg.h
>

25 
	~<ФЇo.h
>

27 
	~<evТt.h
>

29 #ifdeа
_EVENT___func__


30 
	#__func__
 
_EVENT___func__


	)

33 
	g€ќed
 = 0;

36 
	$sig«l_cb
(
fd
, 
evТt
, *
ђg
)

38 
evТt
 *
sig«l
 = 
ђg
;

40 
	`іЪtf
("%s: gў sig«»%d\n", 
__func__
, 
	`EVENT_SIGNAL
(
sig«l
));

42 iа(
€ќed
 >= 2)

43 
	`evТt_dЦ
(
sig«l
);

45 
€ќed
++;

46 
	}
}

49 
	$maЪ
(
ђgc
, **
ђgv
)

51 
evТt
 
sig«l_Ъt
;

52 
evТt_ba£
* 
ba£
;

53 #ifdeа
WIN32


54 
WORD
 
wVФsiЏReque°ed
;

55 
WSADATA
 
wІD©a
;

56 
Фr
;

58 
wVФsiЏReque°ed
 = 
	`MAKEWORD
(2, 2);

60 
Фr
 = 
	`WSASПєup
(
wVФsiЏReque°ed
, &
wІD©a
);

64 
ba£
 = 
	`evТt_ba£_√w
();

67 
	`evТt_assign
(&
sig«l_Ъt
, 
ba£
, 
SIGINT
, 
EV_SIGNAL
|
EV_PERSIST
, 
sig«l_cb
,

68 &
sig«l_Ъt
);

70 
	`evТt_add
(&
sig«l_Ъt
, 
NULL
);

72 
	`evТt_ba£_di•©ch
(
ba£
);

73 
	`evТt_ba£_дУ
(
ba£
);

76 
	}
}

	@sample/time-test.c

11 
	~<sys/ty≥s.h
>

13 
	~<evТt-cЏfig.h
>

15 
	~<sys/°©.h
>

16 #iвdeа
WIN32


17 
	~<sys/queue.h
>

18 
	~<uni°d.h
>

20 
	~<time.h
>

21 #ifdeа
_EVENT_HAVE_SYS_TIME_H


22 
	~<sys/time.h
>

24 
	~<fъО.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<°rЪg.h
>

28 
	~<ФЇo.h
>

30 
	~<evТt2/evТt.h
>

31 
	~<evТt2/evТt_°ruщ.h
>

32 
	~<evТt2/utЮ.h
>

34 #ifdeа
WIN32


35 
	~<wЪsock2.h
>

38 
timevЃ
 
	gѕ°time
;

40 
	gevТt_is_≥rsi°Тt
;

43 
	$timeout_cb
(
evutЮ_sockС_t
 
fd
, 
evТt
, *
ђg
)

45 
timevЃ
 
√wtime
, 
difгїnы
;

46 
evТt
 *
timeout
 = 
ђg
;

47 
Ц≠£d
;

49 
	`evutЮ_gСtimeofday
(&
√wtime
, 
NULL
);

50 
	`evutЮ_timФsub
(&
√wtime
, &
ѕ°time
, &
difгїnы
);

51 
Ц≠£d
 = 
difгїnы
.
tv_£c
 +

52 (
difгїnы
.
tv_u£c
 / 1.0e6);

54 
	`іЪtf
("timeout_cb calledЗt %d: %.3f secondsГlapsed.\n",

55 ()
√wtime
.
tv_£c
, 
Ц≠£d
);

56 
ѕ°time
 = 
√wtime
;

58 iа(! 
evТt_is_≥rsi°Тt
) {

59 
timevЃ
 
tv
;

60 
	`evutЮ_timФюЧr
(&
tv
);

61 
tv
.
tv_£c
 = 2;

62 
	`evТt_add
(
timeout
, &
tv
);

64 
	}
}

67 
	$maЪ
(
ђgc
, **
ђgv
)

69 
evТt
 
timeout
;

70 
timevЃ
 
tv
;

71 
evТt_ba£
 *
ba£
;

72 
жags
;

74 #ifdeа
WIN32


75 
WORD
 
wVФsiЏReque°ed
;

76 
WSADATA
 
wІD©a
;

77 
Фr
;

79 
wVФsiЏReque°ed
 = 
	`MAKEWORD
(2, 2);

81 
Фr
 = 
	`WSASПєup
(
wVФsiЏReque°ed
, &
wІD©a
);

84 iа(
ђgc
 =р2 && !
	`°rcmp
(
ђgv
[1], "-p")) {

85 
evТt_is_≥rsi°Тt
 = 1;

86 
жags
 = 
EV_PERSIST
;

88 
evТt_is_≥rsi°Тt
 = 0;

89 
жags
 = 0;

93 
ba£
 = 
	`evТt_ba£_√w
();

96 
	`evТt_assign
(&
timeout
, 
ba£
, -1, 
жags
, 
timeout_cb
, (*) &timeout);

98 
	`evutЮ_timФюЧr
(&
tv
);

99 
tv
.
tv_£c
 = 2;

100 
	`evТt_add
(&
timeout
, &
tv
);

102 
	`evutЮ_gСtimeofday
(&
ѕ°time
, 
NULL
);

104 
	`evТt_ba£_di•©ch
(
ba£
);

107 
	}
}

	@select.c

29 
	~"evТt-cЏfig.h
"

31 
	~<sys/ty≥s.h
>

32 #ifdeа
_EVENT_HAVE_SYS_TIME_H


33 
	~<sys/time.h
>

35 #ifdeа
_EVENT_HAVE_SYS_SELECT_H


36 
	~<sys/£Ћщ.h
>

38 
	~<sys/queue.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rЪg.h
>

43 
	~<uni°d.h
>

44 
	~<ФЇo.h
>

46 
	~"evТt-ЪЛЇЃ.h
"

47 
	~"evsig«l-ЪЛЇЃ.h
"

48 
	~"evТt2/thїad.h
"

49 
	~"evthїad-ЪЛЇЃ.h
"

50 
	~"log-ЪЛЇЃ.h
"

51 
	~"evm≠-ЪЛЇЃ.h
"

53 #iвdeа
howm™y


54 
	#howm™y
(
x
, 
y
и(((x)+((y)-1))/(y))

	)

57 #iвdeа
_EVENT_HAVE_FD_MASK


59 #undeа
NFDBITS


60 
	#NFDBITS
 (()*8)

	)

61 
	tfd_mask
;

64 
	s£ЋщЁ
 {

65 
	mevТt_fds
;

66 
	mevТt_fdsz
;

67 
	mїsize_out_£ts
;

68 
fd_£t
 *
	mevТt_їad£t_Ъ
;

69 
fd_£t
 *
	mevТt_wrЩe£t_Ъ
;

70 
fd_£t
 *
	mevТt_їad£t_out
;

71 
fd_£t
 *
	mevТt_wrЩe£t_out
;

74 *
£Ћщ_ЪЩ
 (
evТt_ba£
 *);

75 
£Ћщ_add
(
evТt_ba£
 *, , 
ёd
, 
evТts
, *);

76 
£Ћщ_dЦ
(
evТt_ba£
 *, , 
ёd
, 
evТts
, *);

77 
£Ћщ_di•©ch
 (
evТt_ba£
 *, 
timevЃ
 *);

78 
£Ћщ_dЧќoc
 (
evТt_ba£
 *);

80 cЏ° 
evТtЁ
 
	g£ЋщЁs
 = {

82 
£Ћщ_ЪЩ
,

83 
£Ћщ_add
,

84 
£Ћщ_dЦ
,

85 
£Ћщ_di•©ch
,

86 
£Ћщ_dЧќoc
,

88 
EV_FEATURE_FDS
,

92 
£Ћщ_їsize
(
£ЋщЁ
 *
sЁ
, 
fdsz
);

95 
	$£Ћщ_ЪЩ
(
evТt_ba£
 *
ba£
)

97 
£ЋщЁ
 *
sЁ
;

99 iа(!(
sЁ
 = 
	`mm_€ќoc
(1, (
£ЋщЁ
))))

100  (
NULL
);

102 
	`£Ћщ_їsize
(
sЁ
, 
	`howm™y
(32 + 1, 
NFDBITS
)*(
fd_mask
));

104 
	`evsig_ЪЩ
(
ba£
);

106  (
sЁ
);

107 
	}
}

109 #ifdeа
CHECK_INVARIANTS


111 
	$check_£ЋщЁ
(
£ЋщЁ
 *
sЁ
)

114 
	}
}

116 
	#check_£ЋщЁ
(
sЁ
иdЎ{ (иsЁ; } 0)

	)

120 
	$£Ћщ_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

122 
їs
=0, 
i
, 
j
, 
nfds
;

123 
£ЋщЁ
 *
sЁ
 = 
ba£
->
evba£
;

125 
	`check_£ЋщЁ
(
sЁ
);

126 iа(
sЁ
->
їsize_out_£ts
) {

127 
fd_£t
 *
їad£t_out
=
NULL
, *
wrЩe£t_out
=NULL;

128 
size_t
 
sz
 = 
sЁ
->
evТt_fdsz
;

129 iа(!(
їad£t_out
 = 
	`mm_їЃloc
(
sЁ
->
evТt_їad£t_out
, 
sz
)))

131 iа(!(
wrЩe£t_out
 = 
	`mm_їЃloc
(
sЁ
->
evТt_wrЩe£t_out
, 
sz
))) {

132 
	`mm_дУ
(
їad£t_out
);

135 
sЁ
->
evТt_їad£t_out
 = 
їad£t_out
;

136 
sЁ
->
evТt_wrЩe£t_out
 = 
wrЩe£t_out
;

137 
sЁ
->
їsize_out_£ts
 = 0;

140 
	`memэy
(
sЁ
->
evТt_їad£t_out
, sЁ->
evТt_їad£t_Ъ
,

141 
sЁ
->
evТt_fdsz
);

142 
	`memэy
(
sЁ
->
evТt_wrЩe£t_out
, sЁ->
evТt_wrЩe£t_Ъ
,

143 
sЁ
->
evТt_fdsz
);

145 
nfds
 = 
sЁ
->
evТt_fds
+1;

147 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

149 
їs
 = 
	`£Ћщ
(
nfds
, 
sЁ
->
evТt_їad£t_out
,

150 
sЁ
->
evТt_wrЩe£t_out
, 
NULL
, 
tv
);

152 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

154 
	`check_£ЋщЁ
(
sЁ
);

156 iа(
їs
 == -1) {

157 iа(
ФЇo
 !р
EINTR
) {

158 
	`evТt_wђn
("select");

162 
	`evsig_іoыss
(
ba£
);

164 } iа(
ba£
->
sig
.
evsig_€ught
) {

165 
	`evsig_іoыss
(
ba£
);

168 
	`evТt_debug
(("%s: sЦeщДХ№t†%d", 
__func__
, 
їs
));

170 
	`check_£ЋщЁ
(
sЁ
);

171 
i
 = 
	`њndom
(и% (
nfds
+1);

172 
j
 = 0; j <р
nfds
; ++j) {

173 iа(++
i
 >р
nfds
+1)

174 
i
 = 0;

175 
їs
 = 0;

176 iа(
	`FD_ISSET
(
i
, 
sЁ
->
evТt_їad£t_out
))

177 
їs
 |р
EV_READ
;

178 iа(
	`FD_ISSET
(
i
, 
sЁ
->
evТt_wrЩe£t_out
))

179 
їs
 |р
EV_WRITE
;

181 iа(
їs
 == 0)

184 
	`evm≠_io_aщive
(
ba£
, 
i
, 
їs
);

186 
	`check_£ЋщЁ
(
sЁ
);

189 
	}
}

193 
	$£Ћщ_їsize
(
£ЋщЁ
 *
sЁ
, 
fdsz
)

195 
n_evТts
, 
n_evТts_ёd
;

197 
fd_£t
 *
їad£t_Ъ
 = 
NULL
;

198 
fd_£t
 *
wrЩe£t_Ъ
 = 
NULL
;

200 
n_evТts
 = (
fdsz
/(
fd_mask
)и* 
NFDBITS
;

201 
n_evТts_ёd
 = (
sЁ
->
evТt_fdsz
/(
fd_mask
)и* 
NFDBITS
;

203 iа(
sЁ
->
evТt_їad£t_Ъ
)

204 
	`check_£ЋщЁ
(
sЁ
);

206 iа((
їad£t_Ъ
 = 
	`mm_їЃloc
(
sЁ
->
evТt_їad£t_Ъ
, 
fdsz
)и=р
NULL
)

207 
Фr№
;

208 
sЁ
->
evТt_їad£t_Ъ
 = 
їad£t_Ъ
;

209 iа((
wrЩe£t_Ъ
 = 
	`mm_їЃloc
(
sЁ
->
evТt_wrЩe£t_Ъ
, 
fdsz
)и=р
NULL
)

210 
Фr№
;

211 
sЁ
->
evТt_wrЩe£t_Ъ
 = 
wrЩe£t_Ъ
;

212 
sЁ
->
їsize_out_£ts
 = 1;

214 
	`mem£t
((*)
sЁ
->
evТt_їad£t_Ъ
 + sЁ->
evТt_fdsz
, 0,

215 
fdsz
 - 
sЁ
->
evТt_fdsz
);

216 
	`mem£t
((*)
sЁ
->
evТt_wrЩe£t_Ъ
 + sЁ->
evТt_fdsz
, 0,

217 
fdsz
 - 
sЁ
->
evТt_fdsz
);

219 
sЁ
->
evТt_fdsz
 = 
fdsz
;

220 
	`check_£ЋщЁ
(
sЁ
);

224 
Фr№
:

225 
	`evТt_wђn
("malloc");

227 
	}
}

231 
	$£Ћщ_add
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

233 
£ЋщЁ
 *
sЁ
 = 
ba£
->
evba£
;

234 (и
p
;

236 
	`EVUTIL_ASSERT
((
evТts
 & 
EV_SIGNAL
) == 0);

237 
	`check_£ЋщЁ
(
sЁ
);

242 iа(
sЁ
->
evТt_fds
 < 
fd
) {

243 
fdsz
 = 
sЁ
->
evТt_fdsz
;

245 iа(
fdsz
 < (
fd_mask
))

246 
fdsz
 = (
fd_mask
);

248 
fdsz
 <

249 (
	`howm™y
(
fd
 + 1, 
NFDBITS
и* (
fd_mask
)))

250 
fdsz
 *= 2;

252 iа(
fdsz
 !р
sЁ
->
evТt_fdsz
) {

253 iа(
	`£Ћщ_їsize
(
sЁ
, 
fdsz
)) {

254 
	`check_£ЋщЁ
(
sЁ
);

259 
sЁ
->
evТt_fds
 = 
fd
;

262 iа(
evТts
 & 
EV_READ
)

263 
	`FD_SET
(
fd
, 
sЁ
->
evТt_їad£t_Ъ
);

264 iа(
evТts
 & 
EV_WRITE
)

265 
	`FD_SET
(
fd
, 
sЁ
->
evТt_wrЩe£t_Ъ
);

266 
	`check_£ЋщЁ
(
sЁ
);

269 
	}
}

276 
	$£Ћщ_dЦ
(
evТt_ba£
 *
ba£
, 
fd
, 
ёd
, 
evТts
, *
p
)

278 
£ЋщЁ
 *
sЁ
 = 
ba£
->
evba£
;

279 ()
p
;

281 
	`EVUTIL_ASSERT
((
evТts
 & 
EV_SIGNAL
) == 0);

282 
	`check_£ЋщЁ
(
sЁ
);

284 iа(
sЁ
->
evТt_fds
 < 
fd
) {

285 
	`check_£ЋщЁ
(
sЁ
);

289 iа(
evТts
 & 
EV_READ
)

290 
	`FD_CLR
(
fd
, 
sЁ
->
evТt_їad£t_Ъ
);

292 iа(
evТts
 & 
EV_WRITE
)

293 
	`FD_CLR
(
fd
, 
sЁ
->
evТt_wrЩe£t_Ъ
);

295 
	`check_£ЋщЁ
(
sЁ
);

297 
	}
}

300 
	$£Ћщ_dЧќoc
(
evТt_ba£
 *
ba£
)

302 
£ЋщЁ
 *
sЁ
 = 
ba£
->
evba£
;

304 
	`evsig_dЧќoc
(
ba£
);

305 iа(
sЁ
->
evТt_їad£t_Ъ
)

306 
	`mm_дУ
(
sЁ
->
evТt_їad£t_Ъ
);

307 iа(
sЁ
->
evТt_wrЩe£t_Ъ
)

308 
	`mm_дУ
(
sЁ
->
evТt_wrЩe£t_Ъ
);

309 iа(
sЁ
->
evТt_їad£t_out
)

310 
	`mm_дУ
(
sЁ
->
evТt_їad£t_out
);

311 iа(
sЁ
->
evТt_wrЩe£t_out
)

312 
	`mm_дУ
(
sЁ
->
evТt_wrЩe£t_out
);

314 
	`mem£t
(
sЁ
, 0, (
£ЋщЁ
));

315 
	`mm_дУ
(
sЁ
);

316 
	}
}

	@signal.c

29 
	~"evТt-cЏfig.h
"

31 #ifdeа
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wЪsock2.h
>

34 
	~<wЪdows.h
>

35 #undeа
WIN32_LEAN_AND_MEAN


37 
	~<sys/ty≥s.h
>

38 #ifdeа
_EVENT_HAVE_SYS_TIME_H


39 
	~<sys/time.h
>

41 
	~<sys/queue.h
>

42 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


43 
	~<sys/sockС.h
>

45 
	~<sig«l.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rЪg.h
>

49 #ifdeа
_EVENT_HAVE_UNISTD_H


50 
	~<uni°d.h
>

52 
	~<ФЇo.h
>

53 #ifdeа
_EVENT_HAVE_FCNTL_H


54 
	~<fъО.h
>

57 
	~"evТt2/evТt.h
"

58 
	~"evТt2/evТt_°ruщ.h
"

59 
	~"evТt-ЪЛЇЃ.h
"

60 
	~"evТt2/utЮ.h
"

61 
	~"evsig«l-ЪЛЇЃ.h
"

62 
	~"log-ЪЛЇЃ.h
"

63 
	~"evm≠-ЪЛЇЃ.h
"

65 
evsig_add
(
evТt_ba£
 *, , , , *);

66 
evsig_dЦ
(
evТt_ba£
 *, , , , *);

68 cЏ° 
evТtЁ
 
	gevsigЁs
 = {

70 
NULL
,

71 
evsig_add
,

72 
evsig_dЦ
,

73 
NULL
,

74 
NULL
,

78 
evТt_ba£
 *
	gevsig_ba£
 = 
NULL
;

80 
evsig_h™dЋr
(
sig
);

84 
	$evsig_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

86 
sig«ls
[1];

87 
ev_ssize_t
 
n
;

89 ()
ђg
;

91 
n
 = 
	`їcv
(
fd
, 
sig«ls
, (signals), 0);

92 iа(
n
 == -1)

93 
	`evТt_sock_Фr
(1, 
fd
, "%s:ДЧd", 
__func__
);

94 
	}
}

97 
	$evsig_ЪЩ
(
evТt_ba£
 *
ba£
)

104 iа(
	`evutЮ_sockСЈЬ
(

105 
AF_UNIX
, 
SOCK_STREAM
, 0, 
ba£
->
sig
.
ev_sig«l_ЈЬ
) == -1) {

106 #ifdeа
WIN32


109 
	`evТt_sock_wђn
(-1, "%s: sockСЈЬ", 
__func__
);

111 
	`evТt_sock_Фr
(1, -1, "%s: sockСЈЬ", 
__func__
);

116 
	`evutЮ_make_sockС_юo£Џexec
(
ba£
->
sig
.
ev_sig«l_ЈЬ
[0]);

117 
	`evutЮ_make_sockС_юo£Џexec
(
ba£
->
sig
.
ev_sig«l_ЈЬ
[1]);

118 
ba£
->
sig
.
sh_ёd
 = 
NULL
;

119 
ba£
->
sig
.
sh_ёd_max
 = 0;

120 
ba£
->
sig
.
evsig_€ught
 = 0;

121 
	`mem£t
(&
ba£
->
sig
.
evsig€ught
, 0, (
sig_©omic_t
)*
NSIG
);

123 
	`evutЮ_make_sockС_nЏblockЪg
(
ba£
->
sig
.
ev_sig«l_ЈЬ
[0]);

125 
	`evТt_assign
(&
ba£
->
sig
.
ev_sig«l
, ba£, ba£->sig.
ev_sig«l_ЈЬ
[1],

126 
EV_READ
 | 
EV_PERSIST
, 
evsig_cb
, &
ba£
->
sig
.
ev_sig«l
);

128 
ba£
->
sig
.
ev_sig«l
.
ev_жags
 |р
EVLIST_INTERNAL
;

130 
ba£
->
evsig£l
 = &
evsigЁs
;

131 
ba£
->
evsigba£
 = &ba£->
sig
;

134 
	}
}

139 
_evsig_£t_h™dЋr
(
evТt_ba£
 *
ba£
,

140 
evsig«l
, (*
h™dЋr
)())

142 #ifdeа
_EVENT_HAVE_SIGACTION


143 
sigaщiЏ
 
І
;

145 
ev_sigh™dЋr_t
 
sh
;

147 
evsig_Ъfo
 *
sig
 = &
ba£
->sig;

148 *
p
;

154 iа(
evsig«l
 >р
sig
->
sh_ёd_max
) {

155 
√w_max
 = 
evsig«l
 + 1;

156 
	`evТt_debug
(("%s:Гvsignal (%d) >= sh_old_max (%d),Дesizing",

157 
__func__
, 
evsig«l
, 
sig
->
sh_ёd_max
));

158 
p
 = 
	`mm_їЃloc
(
sig
->
sh_ёd
, 
√w_max
 * (*sig->sh_old));

159 iа(
p
 =р
NULL
) {

160 
	`evТt_wђn
("realloc");

164 
	`mem£t
((*)
p
 + 
sig
->
sh_ёd_max
 * (*sig->
sh_ёd
),

165 0, (
√w_max
 - 
sig
->
sh_ёd_max
и* (*sig->
sh_ёd
));

167 
sig
->
sh_ёd_max
 = 
√w_max
;

168 
sig
->
sh_ёd
 = 
p
;

172 
sig
->
sh_ёd
[
evsig«l
] = 
	`mm_mЃloc
( *sig->sh_old[evsignal]);

173 iа(
sig
->
sh_ёd
[
evsig«l
] =р
NULL
) {

174 
	`evТt_wђn
("malloc");

179 #ifdeа
_EVENT_HAVE_SIGACTION


180 
	`mem£t
(&
І
, 0, (sa));

181 
І
.
І_h™dЋr
 = 
h™dЋr
;

182 
І
.
І_жags
 |р
SA_RESTART
;

183 
	`sigfЮl£t
(&
І
.
І_mask
);

185 iа(
	`sigaщiЏ
(
evsig«l
, &
І
, 
sig
->
sh_ёd
[evsignal]) == -1) {

186 
	`evТt_wђn
("sigaction");

187 
	`mm_дУ
(
sig
->
sh_ёd
[
evsig«l
]);

191 iа((
sh
 = 
	`sig«l
(
evsig«l
, 
h™dЋr
)и=р
SIG_ERR
) {

192 
	`evТt_wђn
("signal");

193 
	`mm_дУ
(
sig
->
sh_ёd
[
evsig«l
]);

196 *
sig
->
sh_ёd
[
evsig«l
] = 
sh
;

200 
	}
}

203 
	$evsig_add
(
evТt_ba£
 *
ba£
, 
evsig«l
, 
ёd
, 
evТts
, *
p
)

205 
evsig_Ъfo
 *
sig
 = &
ba£
->sig;

206 ()
p
;

208 
	`EVUTIL_ASSERT
(
evsig«l
 >р0 &&Гvsig«»< 
NSIG
);

210 
	`evТt_debug
(("%s: %d: ch™gЪg sig«»h™dЋr", 
__func__
, 
evsig«l
));

211 iа(
	`_evsig_£t_h™dЋr
(
ba£
, 
evsig«l
, 
evsig_h™dЋr
) == -1)

215 
evsig_ba£
 = 
ba£
;

217 iа(!
sig
->
ev_sig«l_added
) {

218 iа(
	`evТt_add
(&
sig
->
ev_sig«l
, 
NULL
))

220 
sig
->
ev_sig«l_added
 = 1;

224 
	}
}

227 
	$_evsig_ї°№e_h™dЋr
(
evТt_ba£
 *
ba£
, 
evsig«l
)

229 
їt
 = 0;

230 
evsig_Ъfo
 *
sig
 = &
ba£
->sig;

231 #ifdeа
_EVENT_HAVE_SIGACTION


232 
sigaщiЏ
 *
sh
;

234 
ev_sigh™dЋr_t
 *
sh
;

238 
sh
 = 
sig
->
sh_ёd
[
evsig«l
];

239 
sig
->
sh_ёd
[
evsig«l
] = 
NULL
;

240 #ifdeа
_EVENT_HAVE_SIGACTION


241 iа(
	`sigaщiЏ
(
evsig«l
, 
sh
, 
NULL
) == -1) {

242 
	`evТt_wђn
("sigaction");

243 
їt
 = -1;

246 iа(
	`sig«l
(
evsig«l
, *
sh
и=р
SIG_ERR
) {

247 
	`evТt_wђn
("signal");

248 
їt
 = -1;

252 
	`mm_дУ
(
sh
);

254  
їt
;

255 
	}
}

258 
	$evsig_dЦ
(
evТt_ba£
 *
ba£
, 
evsig«l
, 
ёd
, 
evТts
, *
p
)

260 
	`EVUTIL_ASSERT
(
evsig«l
 >р0 &&Гvsig«»< 
NSIG
);

262 
	`evТt_debug
(("%s: %d:Дe°№Ъg sig«»h™dЋr", 
__func__
, 
evsig«l
));

264  (
	`_evsig_ї°№e_h™dЋr
(
ba£
, 
evsig«l
));

265 
	}
}

268 
	$evsig_h™dЋr
(
sig
)

270 
Іve_ФЇo
 = 
ФЇo
;

271 #ifdeа
WIN32


272 
sockС_ФЇo
 = 
	`EVUTIL_SOCKET_ERROR
();

275 iа(
evsig_ba£
 =р
NULL
) {

276 
	`evТt_wђn
(

278 
__func__
, 
sig
);

282 
evsig_ba£
->
sig
.
evsig€ught
[sig]++;

283 
evsig_ba£
->
sig
.
evsig_€ught
 = 1;

285 #iвdeа
_EVENT_HAVE_SIGACTION


286 
	`sig«l
(
sig
, 
evsig_h™dЋr
);

290 
	`£nd
(
evsig_ba£
->
sig
.
ev_sig«l_ЈЬ
[0], "a", 1, 0);

291 
ФЇo
 = 
Іve_ФЇo
;

292 #ifdeа
WIN32


293 
	`EVUTIL_SET_SOCKET_ERROR
(
sockС_ФЇo
);

295 
	}
}

298 
	$evsig_іoыss
(
evТt_ba£
 *
ba£
)

300 
evsig_Ъfo
 *
sig
 = &
ba£
->sig;

301 
sig_©omic_t
 
n€ќs
;

302 
i
;

304 
ba£
->
sig
.
evsig_€ught
 = 0;

305 
i
 = 1; i < 
NSIG
; ++i) {

306 
n€ќs
 = 
sig
->
evsig€ught
[
i
];

307 iа(
n€ќs
 == 0)

309 
sig
->
evsig€ught
[
i
] -р
n€ќs
;

311 
	`evm≠_sig«l_aщive
(
ba£
, 
i
, 
n€ќs
);

313 
	}
}

316 
	$evsig_dЧќoc
(
evТt_ba£
 *
ba£
)

318 
i
 = 0;

319 iа(
ba£
->
sig
.
ev_sig«l_added
) {

320 
	`evТt_dЦ
(&
ba£
->
sig
.
ev_sig«l
);

321 
	`evТt_debug_u«ssign
(&
ba£
->
sig
.
ev_sig«l
);

322 
ba£
->
sig
.
ev_sig«l_added
 = 0;

324 
i
 = 0; i < 
NSIG
; ++i) {

325 iа(
i
 < 
ba£
->
sig
.
sh_ёd_max
 && ba£->sig.
sh_ёd
[i] !р
NULL
)

326 
	`_evsig_ї°№e_h™dЋr
(
ba£
, 
i
);

329 iа(
ba£
->
sig
.
ev_sig«l_ЈЬ
[0] != -1) {

330 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_ЈЬ
[0]);

331 
ba£
->
sig
.
ev_sig«l_ЈЬ
[0] = -1;

333 iа(
ba£
->
sig
.
ev_sig«l_ЈЬ
[1] != -1) {

334 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_ЈЬ
[1]);

335 
ba£
->
sig
.
ev_sig«l_ЈЬ
[1] = -1;

337 
ba£
->
sig
.
sh_ёd_max
 = 0;

340 iа(
ba£
->
sig
.
sh_ёd
) {

341 
	`mm_дУ
(
ba£
->
sig
.
sh_ёd
);

342 
ba£
->
sig
.
sh_ёd
 = 
NULL
;

344 
	}
}

	@strlcpy-internal.h

1 #iвdeа
_STRLCPY_INTERNAL_H_


2 
	#_STRLCPY_INTERNAL_H_


	)

4 #ifdeа
__эlu•lus


8 
	~"evТt-cЏfig.h
"

10 #iвdeа
_EVENT_HAVE_STRLCPY


11 
	~<°rЪg.h
>

12 
size_t
 
_evТt_°Њэy
(*
d°
, cЏ° *
§c
, size_И
siz
);

13 
	#°Њэy
 
_evТt_°Њэy


	)

16 #ifdeа
__эlu•lus


	@strlcpy.c

30 #iа
defЪed
(
LIBC_SCCS
и&& !defЪed(
lЪt
)

31 *
	grcsid
 = "$OpenBSD: strlcpy.c,v 1.5 2001/05/13 15:40:16 deraadt Exp $";

34 
	~<sys/ty≥s.h
>

36 
	~"evТt-cЏfig.h
"

38 #iвdeа
_EVENT_HAVE_STRLCPY


39 
	~"°Њэy-ЪЛЇЃ.h
"

46 
size_t


47 
	$_evТt_°Њэy
(
d°
, 
§c
, 
siz
)

48 *
d°
;

49 cЏ° *
§c
;

50 
size_t
 
siz
;

52 *
d
 = 
d°
;

53 cЏ° *
s
 = 
§c
;

54 
size_t
 
n
 = 
siz
;

57 iа(
n
 != 0 && --n != 0) {

59 iа((*
d
++ = *
s
++) == 0)

61 } --
n
 != 0);

65 iа(
n
 == 0) {

66 iа(
siz
 != 0)

67 *
d
 = '\0';

68 *
s
++)

72  (
s
 - 
§c
 - 1);

73 
	}
}

	@test/bench.c

36 
	~"evТt-cЏfig.h
"

38 
	~<sys/ty≥s.h
>

39 
	~<sys/°©.h
>

40 
	~<sys/time.h
>

41 #ifdeа
WIN32


42 
	~<wЪdows.h
>

44 
	~<sys/sockС.h
>

45 
	~<sig«l.h
>

46 
	~<sys/їsourы.h
>

48 
	~<fъО.h
>

49 
	~<°dlib.h
>

50 
	~<°dio.h
>

51 
	~<°rЪg.h
>

52 
	~<uni°d.h
>

53 
	~<ФЇo.h
>

55 
	~<evТt.h
>

56 
	~<evutЮ.h
>

58 
	gcouЅ
, 
	gwrЩes
, 
	gfЬed
;

59 *
	gpЭes
;

60 
	gnum_pЭes
, 
	gnum_aщive
, 
	gnum_wrЩes
;

61 
evТt
 *
	gevТts
;

65 
	$їad_cb
(
fd
, 
which
, *
ђg
)

67 
idx
 = (и
ђg
, 
widx
 = idx + 1;

68 
u_chђ
 
ch
;

70 
couЅ
 +р
	`їcv
(
fd
, &
ch
, (ch), 0);

71 iа(
wrЩes
) {

72 iа(
widx
 >р
num_pЭes
)

73 
widx
 -р
num_pЭes
;

74 
	`£nd
(
pЭes
[2 * 
widx
 + 1], "e", 1, 0);

75 
wrЩes
--;

76 
fЬed
++;

78 
	}
}

80 
timevЃ
 *

81 
	$run_Џы
()

83 *
э
, 
•aы
;

84 
i
;

85 
timevЃ
 
ts
, 
Л
;

87 
э
 = 
pЭes
, 
i
 = 0; i < 
num_pЭes
; i++, cp += 2) {

88 
	`evТt_dЦ
(&
evТts
[
i
]);

89 
	`evТt_£t
(&
evТts
[
i
], 
э
[0], 
EV_READ
 | 
EV_PERSIST
, 
їad_cb
, (*) i);

90 
	`evТt_add
(&
evТts
[
i
], 
NULL
);

93 
	`evТt_loЁ
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

95 
fЬed
 = 0;

96 
•aы
 = 
num_pЭes
 / 
num_aщive
;

97 
•aы
 = space * 2;

98 
i
 = 0; i < 
num_aщive
; i++, 
fЬed
++)

99 
	`£nd
(
pЭes
[
i
 * 
•aы
 + 1], "e", 1, 0);

101 
couЅ
 = 0;

102 
wrЩes
 = 
num_wrЩes
;

103 { 
xcouЅ
 = 0;

104 
	`gСtimeofday
(&
ts
, 
NULL
);

106 
	`evТt_loЁ
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

107 
xcouЅ
++;

108 } 
couЅ
 !р
fЬed
);

109 
	`gСtimeofday
(&
Л
, 
NULL
);

111 iа(
xcouЅ
 !р
couЅ
и
	`еrЪtf
(
°dФr
, "Xcount: %d, Rcount: %d\n", xcount, count);

114 
	`evutЮ_timФsub
(&
Л
, &
ts
, &te);

116  (&
Л
);

117 
	}
}

120 
	$maЪ
(
ђgc
, **
ђgv
)

122 #iвdeа
WIN32


123 
ЊimЩ
 
Њ
;

125 
i
, 
c
;

126 
timevЃ
 *
tv
;

127 *
э
;

129 #ifdeа
WIN32


130 
WSADATA
 
WSAD©a
;

131 
	`WSASПєup
(0x101, &
WSAD©a
);

133 
num_pЭes
 = 100;

134 
num_aщive
 = 1;

135 
num_wrЩes
 = 
num_pЭes
;

136 (
c
 = 
	`gСЁt
(
ђgc
, 
ђgv
, "n:a:w:")) != -1) {

137 
c
) {

139 
num_pЭes
 = 
	`©oi
(
ЁПrg
);

142 
num_aщive
 = 
	`©oi
(
ЁПrg
);

145 
num_wrЩes
 = 
	`©oi
(
ЁПrg
);

148 
	`еrЪtf
(
°dФr
, "IќegЃЗrgumТИ\"%c\"\n", 
c
);

149 
	`exЩ
(1);

153 #iвdeа
WIN32


154 
Њ
.
Њim_cur
 =Дl.
Њim_max
 = 
num_pЭes
 * 2 + 50;

155 iа(
	`£МlimЩ
(
RLIMIT_NOFILE
, &
Њ
) == -1) {

156 
	`≥Љ№
("setrlimit");

157 
	`exЩ
(1);

161 
evТts
 = 
	`€ќoc
(
num_pЭes
, (
evТt
));

162 
pЭes
 = 
	`€ќoc
(
num_pЭes
 * 2, ());

163 iа(
evТts
 =р
NULL
 || 
pЭes
 == NULL) {

164 
	`≥Љ№
("malloc");

165 
	`exЩ
(1);

168 
	`evТt_ЪЩ
();

170 
э
 = 
pЭes
, 
i
 = 0; i < 
num_pЭes
; i++, cp += 2) {

171 #ifdeа
USE_PIPES


172 iа(
	`pЭe
(
э
) == -1) {

174 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
э
) == -1) {

176 
	`≥Љ№
("pipe");

177 
	`exЩ
(1);

181 
i
 = 0; i < 25; i++) {

182 
tv
 = 
	`run_Џы
();

183 iа(
tv
 =р
NULL
)

184 
	`exЩ
(1);

185 
	`еrЪtf
(
°dout
, "%ld\n",

186 
tv
->
tv_£c
 * 1000000L +Бv->
tv_u£c
);

189 
	`exЩ
(0);

190 
	}
}

	@test/bench_cascade.c

28 
	~"evТt-cЏfig.h
"

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<sys/time.h
>

33 #ifdeа
WIN32


34 
	~<wЪdows.h
>

36 
	~<sys/sockС.h
>

37 
	~<sys/їsourы.h
>

39 
	~<sig«l.h
>

40 
	~<fъО.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<°rЪg.h
>

44 
	~<uni°d.h
>

45 
	~<ФЇo.h
>

47 
	~<evТt.h
>

48 
	~<evutЮ.h
>

57 
	gfЬed
;

58 *
	gpЭes
;

59 
evТt
 *
	gevТts
;

62 
	$їad_cb
(
fd
, 
which
, *
ђg
)

64 
ch
;

65 
idx
 = (и
ђg
;

67 
	`їcv
(
fd
, &
ch
, (ch), 0);

68 iа(
idx
 >= 0)

69 
	`£nd
(
idx
, "e", 1, 0);

70 
fЬed
++;

71 
	}
}

73 
timevЃ
 *

74 
	$run_Џы
(
num_pЭes
)

76 *
э
, 
i
;

77 
timevЃ
 
ts
, 
Л
, 
tv_timeout
;

79 
evТts
 = 
	`€ќoc
(
num_pЭes
, (
evТt
));

80 
pЭes
 = 
	`€ќoc
(
num_pЭes
 * 2, ());

82 iа(
evТts
 =р
NULL
 || 
pЭes
 == NULL) {

83 
	`≥Љ№
("malloc");

84 
	`exЩ
(1);

87 
э
 = 
pЭes
, 
i
 = 0; i < 
num_pЭes
; i++, cp += 2) {

88 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
э
) == -1) {

89 
	`≥Љ№
("socketpair");

90 
	`exЩ
(1);

95 
	`gСtimeofday
(&
ts
, 
NULL
);

98 
	`evutЮ_timФюЧr
(&
tv_timeout
);

99 
tv_timeout
.
tv_£c
 = 60;

101 
э
 = 
pЭes
, 
i
 = 0; i < 
num_pЭes
; i++, cp += 2) {

102 
fd
 = 
i
 < 
num_pЭes
 - 1 ? 
э
[3] : -1;

103 
	`evТt_£t
(&
evТts
[
i
], 
э
[0], 
EV_READ
, 
їad_cb
, (*и
fd
);

104 
	`evТt_add
(&
evТts
[
i
], &
tv_timeout
);

107 
fЬed
 = 0;

110 
	`£nd
(
pЭes
[1], "e", 1, 0);

112 
	`evТt_di•©ch
();

114 
	`gСtimeofday
(&
Л
, 
NULL
);

115 
	`evutЮ_timФsub
(&
Л
, &
ts
, &te);

117 
э
 = 
pЭes
, 
i
 = 0; i < 
num_pЭes
; i++, cp += 2) {

118 
	`evТt_dЦ
(&
evТts
[
i
]);

119 
	`юo£
(
э
[0]);

120 
	`юo£
(
э
[1]);

123 
	`дУ
(
pЭes
);

124 
	`дУ
(
evТts
);

126  (&
Л
);

127 
	}
}

130 
	$maЪ
(
ђgc
, **
ђgv
)

132 #iвdeа
WIN32


133 
ЊimЩ
 
Њ
;

135 
i
, 
c
;

136 
timevЃ
 *
tv
;

138 
num_pЭes
 = 100;

139 (
c
 = 
	`gСЁt
(
ђgc
, 
ђgv
, "n:")) != -1) {

140 
c
) {

142 
num_pЭes
 = 
	`©oi
(
ЁПrg
);

145 
	`еrЪtf
(
°dФr
, "IќegЃЗrgumТИ\"%c\"\n", 
c
);

146 
	`exЩ
(1);

150 #iвdeа
WIN32


151 
Њ
.
Њim_cur
 =Дl.
Њim_max
 = 
num_pЭes
 * 2 + 50;

152 iа(
	`£МlimЩ
(
RLIMIT_NOFILE
, &
Њ
) == -1) {

153 
	`≥Љ№
("setrlimit");

154 
	`exЩ
(1);

158 
	`evТt_ЪЩ
();

160 
i
 = 0; i < 25; i++) {

161 
tv
 = 
	`run_Џы
(
num_pЭes
);

162 iа(
tv
 =р
NULL
)

163 
	`exЩ
(1);

164 
	`еrЪtf
(
°dout
, "%ld\n",

165 
tv
->
tv_£c
 * 1000000L +Бv->
tv_u£c
);

168 
	`exЩ
(0);

169 
	}
}

	@test/bench_http.c

28 
	~"evТt-cЏfig.h
"

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<sys/time.h
>

33 #ifdeа
WIN32


34 
	~<wЪdows.h
>

36 
	~<sys/sockС.h
>

37 
	~<sys/їsourы.h
>

39 
	~<fъО.h
>

40 
	~<sig«l.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<°rЪg.h
>

44 
	~<uni°d.h
>

45 
	~<ФЇo.h
>

47 
	~<evТt.h
>

48 
	~<evutЮ.h
>

49 
	~<evhЙp.h
>

51 
hЙp_basic_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

53 *
	gcЏЛЅ
;

54 
size_t
 
	gcЏЛЅ_Ћn
;

57 
	$hЙp_basic_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

59 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

61 
	`evbufгr_add
(
evb
, 
cЏЛЅ
, 
cЏЛЅ_Ћn
);

64 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†fЪe", 
evb
);

66 
	`evbufгr_дУ
(
evb
);

67 
	}
}

70 #ifdeа
_EVENT2_EVENT_H_


72 
	$hЙp_їf_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

74 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

76 
	`evbufгr_add_їгїnы
(
evb
, 
cЏЛЅ
, 
cЏЛЅ_Ћn
, 
NULL
, NULL);

79 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†fЪe", 
evb
);

81 
	`evbufгr_дУ
(
evb
);

82 
	}
}

86 
	$maЪ
(
ђgc
, **
ђgv
)

88 
evТt_ba£
 *
ba£
 = 
	`evТt_ba£_√w
();

89 
evhЙp
 *
hЙp
 = 
	`evhЙp_√w
(
ba£
);

90 
c
;

92 
p№t
 = 8080;

93 (
c
 = 
	`gСЁt
(
ђgc
, 
ђgv
, "p:l:")) != -1) {

94 
c
) {

96 
p№t
 = 
	`©oi
(
ЁПrg
);

99 
cЏЛЅ_Ћn
 = 
	`©ё
(
ЁПrg
);

100 iа(
cЏЛЅ_Ћn
 == 0) {

101 
	`еrЪtf
(
°dФr
, "Bad contentЖength\n");

102 
	`exЩ
(1);

106 
	`еrЪtf
(
°dФr
, "IќegЃЗrgumТИ\"%c\"\n", 
c
);

107 
	`exЩ
(1);

111 #iвdeа
WIN32


112 iа(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
и=р
SIG_ERR
)

116 
cЏЛЅ
 = 
	`mЃloc
(
cЏЛЅ_Ћn
);

117 iа(
cЏЛЅ
 =р
NULL
) {

118 
	`еrЪtf
(
°dФr
, "CannotЗllocate content\n");

119 
	`exЩ
(1);

121 
i
 = 0;

122 
i
 = 0; i < 
cЏЛЅ_Ћn
; ++i)

123 
cЏЛЅ
[
i
] = (i & 255);

126 
	`evhЙp_£t_cb
(
hЙp
, "/Ъd", 
hЙp_basic_cb
, 
NULL
);

127 
	`еrЪtf
(
°dФr
, "/ind - basic content (memory copy)\n");

129 #ifdeа
_EVENT2_EVENT_H_


130 
	`evhЙp_£t_cb
(
hЙp
, "/їf", 
hЙp_їf_cb
, 
NULL
);

131 
	`еrЪtf
(
°dФr
, "/ref - basic content (reference)\n");

134 
	`еrЪtf
(
°dФr
, "Serving %d bytes onЕort %d\n",

135 ()
cЏЛЅ_Ћn
, 
p№t
);

137 
	`evhЙp_bЪd_sockС
(
hЙp
, "0.0.0.0", 
p№t
);

139 
	`evТt_ba£_di•©ch
(
ba£
);

143 
	}
}

	@test/bench_httpclient.c

28 
	~<sys/ty≥s.h
>

29 #ifdeа
WIN32


30 
	~<wЪsock2.h
>

32 
	~<sys/sockС.h
>

33 
	~<√tЪС/Ъ.h
>

35 
	~<°dlib.h
>

36 
	~<ФЇo.h
>

38 
	~<evТt2/evТt.h
>

39 
	~<evТt2/bufгїvТt.h
>

40 
	~<evТt2/bufгr.h
>

41 
	~<evТt2/utЮ.h
>

44 
	~"utЮ-ЪЛЇЃ.h
"

46 cЏ° *
	gїsourы
 = 
NULL
;

47 
evТt_ba£
 *
	gba£
 = 
NULL
;

49 
	gtўЃ_n_h™dЋd
 = 0;

50 
	gtўЃ_n_Фr№s
 = 0;

51 
	gtўЃ_n_ѕunched
 = 0;

52 
size_t
 
	gtўЃ_n_byЛs
 = 0;

53 
timevЃ
 
	gtўЃ_time
 = {0,0};

54 
	gn_Фr№s
 = 0;

56 cЏ° 
	gPARALLELISM
 = 200;

57 cЏ° 
	gN_REQUESTS
 = 20000;

59 
	sїque°_Ъfo
 {

60 
size_t
 
	mn_їad
;

61 
timevЃ
 
	m°ђЛd
;

64 
ѕunch_їque°
();

65 
їadcb
(
bufгїvТt
 *
b
, *
ђg
);

66 
Фr№cb
(
bufгїvТt
 *
b
, 
wh©
, *
ђg
);

69 
	$їadcb
(
bufгїvТt
 *
b
, *
ђg
)

71 
їque°_Ъfo
 *
ri
 = 
ђg
;

72 
evbufгr
 *
Ъput
 = 
	`bufгїvТt_gС_Ъput
(
b
);

73 
size_t
 
n
 = 
	`evbufгr_gС_Ћngth
(
Ъput
);

75 
ri
->
n_їad
 +р
n
;

76 
	`evbufгr_dњЪ
(
Ъput
, 
n
);

77 
	}
}

80 
	$Фr№cb
(
bufгїvТt
 *
b
, 
wh©
, *
ђg
)

82 
їque°_Ъfo
 *
ri
 = 
ђg
;

83 
timevЃ
 
now
, 
diff
;

84 iа(
wh©
 & 
BEV_EVENT_EOF
) {

85 ++
tўЃ_n_h™dЋd
;

86 
tўЃ_n_byЛs
 +р
ri
->
n_їad
;

87 
	`gСtimeofday
(&
now
, 
NULL
);

88 
	`evutЮ_timФsub
(&
now
, &
ri
->
°ђЛd
, &
diff
);

89 
	`evutЮ_timФadd
(&
diff
, &
tўЃ_time
, &total_time);

91 iа(
tўЃ_n_h™dЋd
 && (total_n_handled%1000)==0)

92 
	`іЪtf
("%dДeque°†dЏe\n",
tўЃ_n_h™dЋd
);

94 iа(
tўЃ_n_ѕunched
 < 
N_REQUESTS
) {

95 iа(
	`ѕunch_їque°
() < 0)

96 
	`≥Љ№
("Can'tЖaunch");

99 ++
tўЃ_n_Фr№s
;

100 
	`≥Љ№
("UnexpectedГrror");

103 
	`bufгїvТt_£tcb
(
b
, 
NULL
, NULL, NULL, NULL);

104 
	`дУ
(
ri
);

105 
	`bufгїvТt_diІbЋ
(
b
, 
EV_READ
|
EV_WRITE
);

106 
	`bufгїvТt_дУ
(
b
);

107 
	}
}

110 
	$дob_sockС
(
sock
)

112 
lЪgФ
 
l
;

113 
Џe
 = 1;

114 
	`£tsockЁt
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Џe
, (one));

115 
l
.
l_Џoff
 = 1;

116 
l
.
l_lЪgФ
 = 0;

117 iа(
	`£tsockЁt
(
sock
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
l
, (l))<0)

118 
	`≥Љ№
("setsockopt");

119 
	}
}

122 
	$ѕunch_їque°
()

124 
sock
;

125 
sockaddr_Ъ
 
sЪ
;

126 
bufгїvТt
 *
b
;

128 
їque°_Ъfo
 *
ri
;

130 ++
tўЃ_n_ѕunched
;

132 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

133 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

134 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(8080);

135 iа((
sock
 = 
	`sockС
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0)

137 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
sock
) < 0)

139 
	`дob_sockС
(
sock
);

140 iа(
	`cЏ√щ
(
sock
, (
sockaddr
*)&
sЪ
, (sin)) < 0) {

141 
e
 = 
ФЇo
;

142 iа(! 
	`EVUTIL_ERR_CONNECT_RETRIABLE
(
e
)) {

147 
ri
 = 
	`mЃloc
((*ri));

148 
ri
->
n_їad
 = 0;

149 
	`gСtimeofday
(&
ri
->
°ђЛd
, 
NULL
);

151 
b
 = 
	`bufгїvТt_sockС_√w
(
ba£
, 
sock
, 
BEV_OPT_CLOSE_ON_FREE
);

153 
	`bufгїvТt_£tcb
(
b
, 
їadcb
, 
NULL
, 
Фr№cb
, 
ri
);

154 
	`bufгїvТt_ТabЋ
(
b
, 
EV_READ
|
EV_WRITE
);

156 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
b
),

157 "GET %†HTTP/1.0\r\n\r\n", 
їsourы
);

160 
	}
}

164 
	$maЪ
(
ђgc
, **
ђgv
)

166 
i
;

167 
timevЃ
 
°ђt
, 
Тd
, 
tўЃ
;

168 
u£c
;

169 
throughput
;

170 
їsourы
 = "/ref";

172 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

174 
ba£
 = 
	`evТt_ba£_√w
();

176 
i
=0; i < 
PARALLELISM
; ++i) {

177 iа(
	`ѕunch_їque°
() < 0)

178 
	`≥Љ№
("launch");

181 
	`gСtimeofday
(&
°ђt
, 
NULL
);

183 
	`evТt_ba£_di•©ch
(
ba£
);

185 
	`gСtimeofday
(&
Тd
, 
NULL
);

186 
	`evutЮ_timФsub
(&
Тd
, &
°ђt
, &
tўЃ
);

187 
u£c
 = 
tўЃ_time
.
tv_£c
 * 1000000 +БўЃ_time.
tv_u£c
;

189 iа(!
tўЃ_n_h™dЋd
) {

190 
	`puts
("Nothing worked. YouЕrobably did something dumb.");

195 
throughput
 = 
tўЃ_n_h™dЋd
 /

196 (
tўЃ
.
tv_£c
+ ((йўЃ.
tv_u£c
)/1000000.0);

198 
	`іЪtf
("\n%dДequests in %d.%06d sec. (%.2fБhroughput)\n"

201 
tўЃ_n_h™dЋd
,

202 ()
tўЃ
.
tv_£c
, (йўЃ.
tv_u£c
,

203 
throughput
,

204 ()(
u£c
/1000и/ 
tўЃ_n_h™dЋd
,

205 ()
tўЃ_n_byЛs
, 
n_Фr№s
);

208 
	}
}

	@test/regress.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sys/waЩ.h
>

44 
	~<sig«l.h
>

45 
	~<uni°d.h
>

46 
	~<√tdb.h
>

48 
	~<fъО.h
>

49 
	~<sig«l.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rЪg.h
>

53 
	~<ФЇo.h
>

54 
	~<as£є.h
>

55 
	~<щy≥.h
>

57 
	~"evТt2/evТt.h
"

58 
	~"evТt2/evТt_°ruщ.h
"

59 
	~"evТt2/evТt_comЈt.h
"

60 
	~"evТt2/Пg.h
"

61 
	~"evТt2/bufгr.h
"

62 
	~"evТt2/bufгr_comЈt.h
"

63 
	~"evТt2/utЮ.h
"

64 
	~"evТt-ЪЛЇЃ.h
"

65 
	~"log-ЪЛЇЃ.h
"

67 
	~"їgїss.h
"

69 #iвdeа
WIN32


70 
	~"їgїss.gТ.h
"

73 
	gЈЬ
[2];

74 
	gЛ°_ok
;

75 
	g€ќed
;

76 
evТt_ba£
 *
	gglobЃ_ba£
;

78 
	gwbuf
[4096];

79 
	grbuf
[4096];

80 
	gwoff
;

81 
	groff
;

82 
	gu£≥rsi°
;

83 
timevЃ
 
	gt£t
;

84 
timevЃ
 
	gt€ќed
;

87 
	#TEST1
 "thi†i†®Л°"

	)

88 
	#SECONDS
 1

	)

90 #iвdeа
SHUT_WR


91 
	#SHUT_WR
 1

	)

94 #ifdeа
WIN32


95 
	#wrЩe
(
fd
,
buf
,
Ћn
и
	`£nd
((fd),(buf),÷Т),0)

	)

96 
	#їad
(
fd
,
buf
,
Ћn
и
	`їcv
((fd),(buf),÷Т),0)

	)

99 
	sbasic_cb_ђgs


101 
evТt_ba£
 *
	meb
;

102 
evТt
 *
	mev
;

103 
	m€ќcouЅ
;

107 
	$simґe_їad_cb
(
fd
, 
evТt
, *
ђg
)

109 
buf
[256];

110 
Ћn
;

112 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf));

114 iа(
Ћn
) {

115 iа(!
€ќed
) {

116 iа(
	`evТt_add
(
ђg
, 
NULL
) == -1)

117 
	`exЩ
(1);

119 } iа(
€ќed
 == 1)

120 
Л°_ok
 = 1;

122 
€ќed
++;

123 
	}
}

126 
	$basic_їad_cb
(
fd
, 
evТt
, *
d©a
)

128 
buf
[256];

129 
Ћn
;

130 
basic_cb_ђgs
 *
ђg
 = 
d©a
;

132 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf));

134 iа(
Ћn
 < 0) {

135 
	`Й_зЮ_≥Љ№
("read (callback)");

137 
ђg
->
€ќcouЅ
++) {

139 iа(
Ћn
 > 0)

142 
	`Й_зЮ_msg
("EOF before dataДead");

146 iа(
Ћn
 > 0)

147 
	`Й_зЮ_msg
("notЗll dataДead on first cycle");

151 
	`Й_зЮ_msg
("too many cycles");

155 
	`evТt_dЦ
(
ђg
->
ev
);

156 
	`evТt_ba£_loЁexЩ
(
ђg
->
eb
, 
NULL
);

157 
	}
}

160 
	$dummy_їad_cb
(
fd
, 
evТt
, *
ђg
)

162 
	}
}

165 
	$simґe_wrЩe_cb
(
fd
, 
evТt
, *
ђg
)

167 
Ћn
;

169 
Ћn
 = 
	`wrЩe
(
fd
, 
TEST1
, 
	`°ЊТ
(TEST1) + 1);

170 iа(
Ћn
 == -1)

171 
Л°_ok
 = 0;

173 
Л°_ok
 = 1;

174 
	}
}

177 
	$mu…ЭЋ_wrЩe_cb
(
fd
, 
evТt
, *
ђg
)

179 
evТt
 *
ev
 = 
ђg
;

180 
Ћn
;

182 
Ћn
 = 128;

183 iа(
woff
 + 
Ћn
 >р(
wbuf
))

184 
Ћn
 = (
wbuf
и- 
woff
;

186 
Ћn
 = 
	`wrЩe
(
fd
, 
wbuf
 + 
woff
,Жen);

187 iа(
Ћn
 == -1) {

188 
	`еrЪtf
(
°dФr
, "%s: wrЩe\n", 
__func__
);

189 iа(
u£≥rsi°
)

190 
	`evТt_dЦ
(
ev
);

194 
woff
 +р
Ћn
;

196 iа(
woff
 >р(
wbuf
)) {

197 
	`shutdown
(
fd
, 
SHUT_WR
);

198 iа(
u£≥rsi°
)

199 
	`evТt_dЦ
(
ev
);

203 iа(!
u£≥rsi°
) {

204 iа(
	`evТt_add
(
ev
, 
NULL
) == -1)

205 
	`exЩ
(1);

207 
	}
}

210 
	$mu…ЭЋ_їad_cb
(
fd
, 
evТt
, *
ђg
)

212 
evТt
 *
ev
 = 
ђg
;

213 
Ћn
;

215 
Ћn
 = 
	`їad
(
fd
, 
rbuf
 + 
roff
, (rbuf) -Дoff);

216 iа(
Ћn
 == -1)

217 
	`еrЪtf
(
°dФr
, "%s:ДЧd\n", 
__func__
);

218 iа(
Ћn
 <= 0) {

219 iа(
u£≥rsi°
)

220 
	`evТt_dЦ
(
ev
);

224 
roff
 +р
Ћn
;

225 iа(!
u£≥rsi°
) {

226 iа(
	`evТt_add
(
ev
, 
NULL
) == -1)

227 
	`exЩ
(1);

229 
	}
}

232 
	$timeout_cb
(
fd
, 
evТt
, *
ђg
)

234 
timevЃ
 
tv
;

235 
diff
;

237 
	`evutЮ_gСtimeofday
(&
t€ќed
, 
NULL
);

238 iа(
	`evutЮ_timФcmp
(&
t€ќed
, &
t£t
, >))

239 
	`evutЮ_timФsub
(&
t€ќed
, &
t£t
, &
tv
);

241 
	`evutЮ_timФsub
(&
t£t
, &
t€ќed
, &
tv
);

243 
diff
 = 
tv
.
tv_£c
*1000 +Бv.
tv_u£c
/1000 - 
SECONDS
 * 1000;

244 iа(
diff
 < 0)

245 
diff
 = -diff;

247 iа(
diff
 < 100)

248 
Л°_ok
 = 1;

249 
	}
}

251 
	sbўh
 {

252 
evТt
 
	mev
;

253 
	mƒЧd
;

257 
	$combЪed_їad_cb
(
fd
, 
evТt
, *
ђg
)

259 
bўh
 *bўh = 
ђg
;

260 
buf
[128];

261 
Ћn
;

263 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf));

264 iа(
Ћn
 == -1)

265 
	`еrЪtf
(
°dФr
, "%s:ДЧd\n", 
__func__
);

266 iа(
Ћn
 <= 0)

269 
bўh
->
ƒЧd
 +р
Ћn
;

270 iа(
	`evТt_add
(&
bўh
->
ev
, 
NULL
) == -1)

271 
	`exЩ
(1);

272 
	}
}

275 
	$combЪed_wrЩe_cb
(
fd
, 
evТt
, *
ђg
)

277 
bўh
 *bўh = 
ђg
;

278 
buf
[128];

279 
Ћn
;

281 
Ћn
 = (
buf
);

282 iа(
Ћn
 > 
bўh
->
ƒЧd
)

283 
Ћn
 = 
bўh
->
ƒЧd
;

285 
Ћn
 = 
	`wrЩe
(
fd
, 
buf
,Жen);

286 iа(
Ћn
 == -1)

287 
	`еrЪtf
(
°dФr
, "%s: wrЩe\n", 
__func__
);

288 iа(
Ћn
 <= 0) {

289 
	`shutdown
(
fd
, 
SHUT_WR
);

293 
bўh
->
ƒЧd
 -р
Ћn
;

294 iа(
	`evТt_add
(&
bўh
->
ev
, 
NULL
) == -1)

295 
	`exЩ
(1);

296 
	}
}

301 
	$£tup_Л°
(cЏ° *
«me
)

303 iа(
Ъ_Ћgacy_Л°_wњµФ
)

306 
	`еrЪtf
(
°dout
, "%s", 
«me
);

308 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1) {

309 
	`еrЪtf
(
°dФr
, "%s: sockСЈЬ\n", 
__func__
);

310 
	`exЩ
(1);

313 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
ЈЬ
[0]) == -1)

314 
	`еrЪtf
(
°dФr
, "fcntl(O_NONBLOCK)");

316 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
ЈЬ
[1]) == -1)

317 
	`еrЪtf
(
°dФr
, "fcntl(O_NONBLOCK)");

319 
Л°_ok
 = 0;

320 
€ќed
 = 0;

322 
	}
}

325 
	$юЧnup_Л°
()

327 iа(
Ъ_Ћgacy_Л°_wњµФ
)

330 #iвdeа
WIN32


331 
	`юo£
(
ЈЬ
[0]);

332 
	`юo£
(
ЈЬ
[1]);

334 
	`Clo£H™dЋ
((
HANDLE
)
ЈЬ
[0]);

335 
	`Clo£H™dЋ
((
HANDLE
)
ЈЬ
[1]);

337 iа(
Л°_ok
)

338 
	`еrЪtf
(
°dout
, "OK\n");

340 
	`еrЪtf
(
°dout
, "FAILED\n");

341 
	`exЩ
(1);

343 
Л°_ok
 = 0;

345 
	}
}

348 
	$Л°_simґФЧd
()

350 
evТt
 
ev
;

353 
	`£tup_Л°
("SimpleДead: ");

355 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

356 
	`shutdown
(
ЈЬ
[0], 
SHUT_WR
);

358 
	`evТt_£t
(&
ev
, 
ЈЬ
[1], 
EV_READ
, 
simґe_їad_cb
, &ev);

359 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

360 
	`exЩ
(1);

361 
	`evТt_di•©ch
();

363 
	`юЧnup_Л°
();

364 
	}
}

367 
	$Л°_simґewrЩe
()

369 
evТt
 
ev
;

372 
	`£tup_Л°
("Simple write: ");

374 
	`evТt_£t
(&
ev
, 
ЈЬ
[0], 
EV_WRITE
, 
simґe_wrЩe_cb
, &ev);

375 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

376 
	`exЩ
(1);

377 
	`evТt_di•©ch
();

379 
	`юЧnup_Л°
();

380 
	}
}

383 
	$simґФЧd_mu…ЭЋ_cb
(
fd
, 
evТt
, *
ђg
)

385 iа(++
€ќed
 == 2)

386 
Л°_ok
 = 1;

387 
	}
}

390 
	$Л°_simґФЧd_mu…ЭЋ
()

392 
evТt
 
Џe
, 
two
;

395 
	`£tup_Л°
("SimpleДeadБo multipleГvens: ");

397 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

398 
	`shutdown
(
ЈЬ
[0], 
SHUT_WR
);

400 
	`evТt_£t
(&
Џe
, 
ЈЬ
[1], 
EV_READ
, 
simґФЧd_mu…ЭЋ_cb
, 
NULL
);

401 iа(
	`evТt_add
(&
Џe
, 
NULL
) == -1)

402 
	`exЩ
(1);

403 
	`evТt_£t
(&
two
, 
ЈЬ
[1], 
EV_READ
, 
simґФЧd_mu…ЭЋ_cb
, 
NULL
);

404 iа(
	`evТt_add
(&
two
, 
NULL
) == -1)

405 
	`exЩ
(1);

406 
	`evТt_di•©ch
();

408 
	`юЧnup_Л°
();

409 
	}
}

412 
	$Л°_mu…ЭЋ
()

414 
evТt
 
ev
, 
ev2
;

415 
i
;

418 
	`£tup_Л°
("MultipleДead/write: ");

419 
	`mem£t
(
rbuf
, 0, (rbuf));

420 
i
 = 0; i < (
wbuf
); i++)

421 
wbuf
[
i
] = i;

423 
roff
 = 
woff
 = 0;

424 
u£≥rsi°
 = 0;

426 
	`evТt_£t
(&
ev
, 
ЈЬ
[0], 
EV_WRITE
, 
mu…ЭЋ_wrЩe_cb
, &ev);

427 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

428 
	`exЩ
(1);

429 
	`evТt_£t
(&
ev2
, 
ЈЬ
[1], 
EV_READ
, 
mu…ЭЋ_їad_cb
, &ev2);

430 iа(
	`evТt_add
(&
ev2
, 
NULL
) == -1)

431 
	`exЩ
(1);

432 
	`evТt_di•©ch
();

434 iа(
roff
 =р
woff
)

435 
Л°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

437 
	`юЧnup_Л°
();

438 
	}
}

441 
	$Л°_≥rsi°Тt
()

443 
evТt
 
ev
, 
ev2
;

444 
i
;

447 
	`£tup_Л°
("PersistДead/write: ");

448 
	`mem£t
(
rbuf
, 0, (rbuf));

449 
i
 = 0; i < (
wbuf
); i++)

450 
wbuf
[
i
] = i;

452 
roff
 = 
woff
 = 0;

453 
u£≥rsi°
 = 1;

455 
	`evТt_£t
(&
ev
, 
ЈЬ
[0], 
EV_WRITE
|
EV_PERSIST
, 
mu…ЭЋ_wrЩe_cb
, &ev);

456 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

457 
	`exЩ
(1);

458 
	`evТt_£t
(&
ev2
, 
ЈЬ
[1], 
EV_READ
|
EV_PERSIST
, 
mu…ЭЋ_їad_cb
, &ev2);

459 iа(
	`evТt_add
(&
ev2
, 
NULL
) == -1)

460 
	`exЩ
(1);

461 
	`evТt_di•©ch
();

463 iа(
roff
 =р
woff
)

464 
Л°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

466 
	`юЧnup_Л°
();

467 
	}
}

470 
	$Л°_combЪed
()

472 
bўh
 
r1
, 
r2
, 
w1
, 
w2
;

474 
	`£tup_Л°
("CombinedДead/write: ");

475 
	`mem£t
(&
r1
, 0, (r1));

476 
	`mem£t
(&
r2
, 0, (r2));

477 
	`mem£t
(&
w1
, 0, (w1));

478 
	`mem£t
(&
w2
, 0, (w2));

480 
w1
.
ƒЧd
 = 4096;

481 
w2
.
ƒЧd
 = 8192;

483 
	`evТt_£t
(&
r1
.
ev
, 
ЈЬ
[0], 
EV_READ
, 
combЪed_їad_cb
, &r1);

484 
	`evТt_£t
(&
w1
.
ev
, 
ЈЬ
[0], 
EV_WRITE
, 
combЪed_wrЩe_cb
, &w1);

485 
	`evТt_£t
(&
r2
.
ev
, 
ЈЬ
[1], 
EV_READ
, 
combЪed_їad_cb
, &r2);

486 
	`evТt_£t
(&
w2
.
ev
, 
ЈЬ
[1], 
EV_WRITE
, 
combЪed_wrЩe_cb
, &w2);

487 
	`Й_as£є
(
	`evТt_add
(&
r1
.
ev
, 
NULL
) != -1);

488 
	`Й_as£є
(!
	`evТt_add
(&
w1
.
ev
, 
NULL
));

489 
	`Й_as£є
(!
	`evТt_add
(&
r2
.
ev
, 
NULL
));

490 
	`Й_as£є
(!
	`evТt_add
(&
w2
.
ev
, 
NULL
));

491 
	`evТt_di•©ch
();

493 iа(
r1
.
ƒЧd
 =р8192 && 
r2
.nread == 4096)

494 
Л°_ok
 = 1;

496 
Тd
:

497 
	`юЧnup_Л°
();

498 
	}
}

501 
	$Л°_simґСimeout
()

503 
timevЃ
 
tv
;

504 
evТt
 
ev
;

506 
	`£tup_Л°
("SimpleБimeout: ");

508 
tv
.
tv_u£c
 = 0;

509 
tv
.
tv_£c
 = 
SECONDS
;

510 
	`evtimФ_£t
(&
ev
, 
timeout_cb
, 
NULL
);

511 
	`evtimФ_add
(&
ev
, &
tv
);

513 
	`evutЮ_gСtimeofday
(&
t£t
, 
NULL
);

514 
	`evТt_di•©ch
();

516 
	`юЧnup_Л°
();

517 
	}
}

520 
	$≥riodic_timeout_cb
(
fd
, 
evТt
, *
ђg
)

522 *
couЅ
 = 
ђg
;

524 (*
couЅ
)++;

525 iа(*
couЅ
 == 6) {

528 
Л°_ok
 = 1;

529 
	`evТt_ba£_loЁexЩ
(
globЃ_ba£
, 
NULL
);

531 
	}
}

534 
	$Л°_≥rsi°Тt_timeout
()

536 
timevЃ
 
tv
;

537 
evТt
 
ev
;

538 
couЅ
 = 0;

540 
	`evutЮ_timФюЧr
(&
tv
);

541 
tv
.
tv_u£c
 = 10000;

543 
	`evТt_assign
(&
ev
, 
globЃ_ba£
, -1, 
EV_TIMEOUT
|
EV_PERSIST
,

544 
≥riodic_timeout_cb
, &
couЅ
);

545 
	`evТt_add
(&
ev
, &
tv
);

547 
	`evТt_di•©ch
();

549 
	`evТt_dЦ
(&
ev
);

550 
	}
}

552 
	s≥rsi°_aщive_timeout_€ќed
 {

553 
	mn
;

554 
	mevТts
[16];

555 
timevЃ
 
	mtvs
[16];

559 
	$aщiv©e_cb
(
fd
, 
evТt
, *
ђg
)

561 
evТt
 *
ev
 = 
ђg
;

562 
	`evТt_aщive
(
ev
, 
EV_READ
, 1);

563 
	}
}

566 
	$≥rsi°_aщive_timeout_cb
(
fd
, 
evТt
, *
ђg
)

568 
≥rsi°_aщive_timeout_€ќed
 *
c
 = 
ђg
;

569 iа(
c
->
n
 < 15) {

570 
c
->
evТts
[c->
n
] = 
evТt
;

571 
	`evutЮ_gСtimeofday
(&
c
->
tvs
[c->
n
], 
NULL
);

572 ++
c
->
n
;

574 
	}
}

577 
	$Л°_≥rsi°Тt_aщive_timeout
(*
±r
)

579 
timevЃ
 
tv
, 
tv2
, 
tv_exЩ
, 
°ђt
;

580 
evТt
 
ev
;

581 
≥rsi°_aщive_timeout_€ќed
 
їs
;

583 
basic_Л°_d©a
 *
d©a
 = 
±r
;

584 
evТt_ba£
 *
ba£
 = 
d©a
->base;

586 
	`mem£t
(&
їs
, 0, (res));

588 
tv
.
tv_£c
 = 0;

589 
tv
.
tv_u£c
 = 200 * 1000;

590 
	`evТt_assign
(&
ev
, 
ba£
, -1, 
EV_TIMEOUT
|
EV_PERSIST
,

591 
≥rsi°_aщive_timeout_cb
, &
їs
);

592 
	`evТt_add
(&
ev
, &
tv
);

594 
tv2
.
tv_£c
 = 0;

595 
tv2
.
tv_u£c
 = 100 * 1000;

596 
	`evТt_ba£_Џы
(
ba£
, -1, 
EV_TIMEOUT
, 
aщiv©e_cb
, &
ev
, &
tv2
);

598 
tv_exЩ
.
tv_£c
 = 0;

599 
tv_exЩ
.
tv_u£c
 = 600 * 1000;

600 
	`evТt_ba£_loЁexЩ
(
ba£
, &
tv_exЩ
);

602 
	`evutЮ_gСtimeofday
(&
°ђt
, 
NULL
);

604 
	`evТt_ba£_di•©ch
(
ba£
);

606 
	`Й_Ъt_Ё
(
їs
.
n
, ==, 3);

607 
	`Й_Ъt_Ё
(
їs
.
evТts
[0], ==, 
EV_READ
);

608 
	`Й_Ъt_Ё
(
їs
.
evТts
[1], ==, 
EV_TIMEOUT
);

609 
	`Й_Ъt_Ё
(
їs
.
evТts
[2], ==, 
EV_TIMEOUT
);

610 
	`Л°_timevЃ_diff_eq
(&
°ђt
, &
їs
.
tvs
[0], 100);

611 
	`Л°_timevЃ_diff_eq
(&
°ђt
, &
їs
.
tvs
[1], 300);

612 
	`Л°_timevЃ_diff_eq
(&
°ђt
, &
їs
.
tvs
[2], 500);

613 
Тd
:

614 
	`evТt_dЦ
(&
ev
);

615 
	}
}

617 
	gtўЃ_commЏ_couЅs
;

619 
	scommЏ_timeout_Ъfo
 {

620 
evТt
 
	mev
;

621 
timevЃ
 
	m€ќed_©
;

622 
	mwhich
;

623 
	mcouЅ
;

627 
	$commЏ_timeout_cb
(
fd
, 
evТt
, *
ђg
)

629 
commЏ_timeout_Ъfo
 *
ti
 = 
ђg
;

630 ++
ti
->
couЅ
;

631 
	`evutЮ_gСtimeofday
(&
ti
->
€ќed_©
, 
NULL
);

632 iа(
ti
->
couЅ
 >= 6)

633 
	`evТt_dЦ
(&
ti
->
ev
);

634 
	}
}

637 
	$Л°_commЏ_timeout
(*
±r
)

639 
basic_Л°_d©a
 *
d©a
 = 
±r
;

641 
evТt_ba£
 *
ba£
 = 
d©a
->base;

642 
i
;

643 
commЏ_timeout_Ъfo
 
Ъfo
[100];

645 
timevЃ
 
now
;

646 
timevЃ
 
tmp_100_ms
 = { 0, 100*1000 };

647 
timevЃ
 
tmp_200_ms
 = { 0, 200*1000 };

649 cЏ° 
timevЃ
 *
ms_100
, *
ms_200
;

651 
ms_100
 = 
	`evТt_ba£_ЪЩ_commЏ_timeout
(
ba£
, &
tmp_100_ms
);

652 
ms_200
 = 
	`evТt_ba£_ЪЩ_commЏ_timeout
(
ba£
, &
tmp_200_ms
);

653 
	`Й_as£є
(
ms_100
);

654 
	`Й_as£є
(
ms_200
);

655 
	`Й_±r_Ё
(
	`evТt_ba£_ЪЩ_commЏ_timeout
(
ba£
, &
tmp_200_ms
),

656 ==, 
ms_200
);

657 
	`Й_Ъt_Ё
(
ms_100
->
tv_£c
, ==, 0);

658 
	`Й_Ъt_Ё
(
ms_200
->
tv_£c
, ==, 0);

659 
	`Й_Ъt_Ё
(
ms_100
->
tv_u£c
, ==, 100000|0x50000000);

660 
	`Й_Ъt_Ё
(
ms_200
->
tv_u£c
, ==, 200000|0x50100000);

662 
tўЃ_commЏ_couЅs
 = 0;

664 
	`mem£t
(
Ъfo
, 0, (info));

666 
i
=0; i<100; ++i) {

667 
Ъfo
[
i
].
which
 = i;

668 
	`evТt_assign
(&
Ъfo
[
i
].
ev
, 
ba£
, -1, 
EV_TIMEOUT
|
EV_PERSIST
,

669 
commЏ_timeout_cb
, &
Ъfo
[
i
]);

670 iа(
i
 % 2) {

671 
	`evТt_add
(&
Ъfo
[
i
].
ev
, 
ms_100
);

673 
	`evТt_add
(&
Ъfo
[
i
].
ev
, 
ms_200
);

677 
	`evТt_ba£_di•©ch
(
ba£
);

679 
	`evutЮ_gСtimeofday
(&
now
, 
NULL
);

681 
i
=0; i<10; ++i) {

682 
timevЃ
 
tmp
;

683 
ms_diff
;

684 
	`Й_Ъt_Ё
(
Ъfo
[
i
].
couЅ
, ==, 6);

685 
	`evutЮ_timФsub
(&
now
, &
Ъfo
[
i
].
€ќed_©
, &
tmp
);

686 
ms_diff
 = 
tmp
.
tv_u£c
/1000 +Бmp.
tv_£c
*1000;

687 iа(
i
 % 2) {

688 
	`Й_Ъt_Ё
(
ms_diff
, >, 500);

689 
	`Й_Ъt_Ё
(
ms_diff
, <, 700);

691 
	`Й_Ъt_Ё
(
ms_diff
, >, -100);

692 
	`Й_Ъt_Ё
(
ms_diff
, <, 100);

697 
i
=0; i<100; ++i) {

698 iа(
i
 % 2) {

699 
	`evТt_add
(&
Ъfo
[
i
].
ev
, 
ms_100
);

701 
	`evТt_add
(&
Ъfo
[
i
].
ev
, 
ms_200
);

705 
Тd
:

706 
	`evТt_ba£_дУ
(
d©a
->
ba£
);

708 
d©a
->
ba£
 = 
NULL
;

709 
	}
}

711 #iвdeа
WIN32


712 
sig«l_cb
(
fd
, 
evТt
, *
ђg
);

714 
evТt_ba£
 *
cuЉТt_ba£
;

717 
	$chЮd_sig«l_cb
(
fd
, 
evТt
, *
ђg
)

719 
timevЃ
 
tv
;

720 *
pЪt
 = 
ђg
;

722 *
pЪt
 = 1;

724 
tv
.
tv_u£c
 = 500000;

725 
tv
.
tv_£c
 = 0;

726 
	`evТt_loЁexЩ
(&
tv
);

727 
	}
}

730 
	$Л°_f№k
()

732 
°©us
, 
gў_sigchld
 = 0;

733 
evТt
 
ev
, 
sig_ev
;

734 
pid_t
 
pid
;

736 
	`£tup_Л°
("After fork: ");

738 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

740 
	`evТt_£t
(&
ev
, 
ЈЬ
[1], 
EV_READ
, 
simґe_їad_cb
, &ev);

741 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

742 
	`exЩ
(1);

744 
	`evsig«l_£t
(&
sig_ev
, 
SIGCHLD
, 
chЮd_sig«l_cb
, &
gў_sigchld
);

745 
	`evsig«l_add
(&
sig_ev
, 
NULL
);

747 iа((
pid
 = 
	`f№k
()) == 0) {

749 iа(
	`evТt_їЪЩ
(
cuЉТt_ba£
) == -1) {

750 
	`еrЪtf
(
°dout
, "FAILED (reinit)\n");

751 
	`exЩ
(1);

754 
	`evsig«l_dЦ
(&
sig_ev
);

756 
€ќed
 = 0;

758 
	`evТt_di•©ch
();

760 
	`evТt_ba£_дУ
(
cuЉТt_ba£
);

765 
	`exЩ
(
Л°_ok
 !р0 || 
€ќed
 != 2 ? -2 : 76);

769 
	`¶Уp
(1);

771 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

773 iа(
	`waЩpid
(
pid
, &
°©us
, 0) == -1) {

774 
	`еrЪtf
(
°dout
, "FAILED (fork)\n");

775 
	`exЩ
(1);

778 iа(
	`WEXITSTATUS
(
°©us
) != 76) {

779 
	`еrЪtf
(
°dout
, "FAILED (exЩ): %d\n", 
	`WEXITSTATUS
(
°©us
));

780 
	`exЩ
(1);

784 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

785 
	`shutdown
(
ЈЬ
[0], 
SHUT_WR
);

787 
	`evТt_di•©ch
();

789 iа(!
gў_sigchld
) {

790 
	`еrЪtf
(
°dout
, "FAILED (sigchld)\n");

791 
	`exЩ
(1);

794 
	`evsig«l_dЦ
(&
sig_ev
);

796 
	`юЧnup_Л°
();

797 
	}
}

800 
	$sig«l_cb_І
(
sig
)

802 
Л°_ok
 = 2;

803 
	}
}

806 
	$sig«l_cb
(
fd
, 
evТt
, *
ђg
)

808 
evТt
 *
ev
 = 
ђg
;

810 
	`evsig«l_dЦ
(
ev
);

811 
Л°_ok
 = 1;

812 
	}
}

815 
	$Л°_simґesig«l
()

817 
evТt
 
ev
;

818 
ЩimФvЃ
 
Щv
;

820 
	`£tup_Л°
("Simple signal: ");

821 
	`evsig«l_£t
(&
ev
, 
SIGALRM
, 
sig«l_cb
, &ev);

822 
	`evsig«l_add
(&
ev
, 
NULL
);

824 
	`evsig«l_dЦ
(&
ev
);

825 
	`evsig«l_add
(&
ev
, 
NULL
);

827 
	`mem£t
(&
Щv
, 0, (itv));

828 
Щv
.
Щ_vЃue
.
tv_£c
 = 1;

829 iа(
	`£tЩimФ
(
ITIMER_REAL
, &
Щv
, 
NULL
) == -1)

830 
skЭ_simґesig«l
;

832 
	`evТt_di•©ch
();

833 
skЭ_simґesig«l
:

834 iа(
	`evsig«l_dЦ
(&
ev
) == -1)

835 
Л°_ok
 = 0;

837 
	`юЧnup_Л°
();

838 
	}
}

841 
	$Л°_mu…ЭЋsig«l
()

843 
evТt
 
ev_Џe
, 
ev_two
;

844 
ЩimФvЃ
 
Щv
;

846 
	`£tup_Л°
("Multiple signal: ");

848 
	`evsig«l_£t
(&
ev_Џe
, 
SIGALRM
, 
sig«l_cb
, &ev_one);

849 
	`evsig«l_add
(&
ev_Џe
, 
NULL
);

851 
	`evsig«l_£t
(&
ev_two
, 
SIGALRM
, 
sig«l_cb
, &ev_two);

852 
	`evsig«l_add
(&
ev_two
, 
NULL
);

854 
	`mem£t
(&
Щv
, 0, (itv));

855 
Щv
.
Щ_vЃue
.
tv_£c
 = 1;

856 iа(
	`£tЩimФ
(
ITIMER_REAL
, &
Щv
, 
NULL
) == -1)

857 
skЭ_simґesig«l
;

859 
	`evТt_di•©ch
();

861 
skЭ_simґesig«l
:

862 iа(
	`evsig«l_dЦ
(&
ev_Џe
) == -1)

863 
Л°_ok
 = 0;

864 iа(
	`evsig«l_dЦ
(&
ev_two
) == -1)

865 
Л°_ok
 = 0;

867 
	`юЧnup_Л°
();

868 
	}
}

871 
	$Л°_immedЯЛsig«l
()

873 
evТt
 
ev
;

875 
Л°_ok
 = 0;

876 
	`іЪtf
("Immediate signal: ");

877 
	`evsig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

878 
	`evsig«l_add
(&
ev
, 
NULL
);

879 
	`њi£
(
SIGUSR1
);

880 
	`evТt_loЁ
(
EVLOOP_NONBLOCK
);

881 
	`evsig«l_dЦ
(&
ev
);

882 
	`юЧnup_Л°
();

883 
	}
}

886 
	$Л°_sig«l_dЧќoc
()

889 
evТt
 
ev
;

890 
evТt_ba£
 *
ba£
 = 
	`evТt_ЪЩ
();

891 
	`іЪtf
("Signal dealloc: ");

892 
	`evsig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

893 
	`evsig«l_add
(&
ev
, 
NULL
);

894 
	`evsig«l_dЦ
(&
ev
);

895 
	`evТt_ba£_дУ
(
ba£
);

897 
Л°_ok
 = 1;

898 
	`юЧnup_Л°
();

899 
	}
}

902 
	$Л°_sig«l_pЭЦoss
()

905 
evТt_ba£
 *
ba£1
, *
ba£2
;

906 
pЭe1
;

907 
Л°_ok
 = 0;

908 
	`іЪtf
("SignalЕipeloss: ");

909 
ba£1
 = 
	`evТt_ЪЩ
();

910 
pЭe1
 = 
ba£1
->
sig
.
ev_sig«l_ЈЬ
[0];

911 
ba£2
 = 
	`evТt_ЪЩ
();

912 
	`evТt_ba£_дУ
(
ba£2
);

913 
	`evТt_ba£_дУ
(
ba£1
);

914 iа(
	`юo£
(
pЭe1
и!р-1 || 
ФЇo
!=
EBADF
) {

916 
	`іЪtf
("signalЕipeВot closed. ");

917 
Л°_ok
 = 0;

919 
Л°_ok
 = 1;

921 
	`юЧnup_Л°
();

922 
	}
}

930 
	$Л°_sig«l_swЩchba£
()

932 
evТt
 
ev1
, 
ev2
;

933 
evТt_ba£
 *
ba£1
, *
ba£2
;

934 
is_kqueue
;

935 
Л°_ok
 = 0;

936 
	`іЪtf
("Signal switchbase: ");

937 
ba£1
 = 
	`evТt_ЪЩ
();

938 
ba£2
 = 
	`evТt_ЪЩ
();

939 
is_kqueue
 = !
	`°rcmp
(
	`evТt_gС_mСhod
(),"kqueue");

940 
	`evsig«l_£t
(&
ev1
, 
SIGUSR1
, 
sig«l_cb
, &ev1);

941 
	`evsig«l_£t
(&
ev2
, 
SIGUSR1
, 
sig«l_cb
, &ev2);

942 iа(
	`evТt_ba£_£t
(
ba£1
, &
ev1
) ||

943 
	`evТt_ba£_£t
(
ba£2
, &
ev2
) ||

944 
	`evТt_add
(&
ev1
, 
NULL
) ||

945 
	`evТt_add
(&
ev2
, 
NULL
)) {

946 
	`еrЪtf
(
°dФr
, "%s: c™nў sС ba£,Зdd\n", 
__func__
);

947 
	`exЩ
(1);

950 
	`Й_±r_Ё
(
	`evТt_gС_ba£
(&
ev1
), ==, 
ba£1
);

951 
	`Й_±r_Ё
(
	`evТt_gС_ba£
(&
ev2
), ==, 
ba£2
);

953 
Л°_ok
 = 0;

955 
	`њi£
(
SIGUSR1
);

956 
	`evТt_ba£_loЁ
(
ba£2
, 
EVLOOP_NONBLOCK
);

957 iа(
is_kqueue
) {

958 iа(!
Л°_ok
)

959 
Тd
;

960 
Л°_ok
 = 0;

962 
	`evТt_ba£_loЁ
(
ba£1
, 
EVLOOP_NONBLOCK
);

963 iа(
Л°_ok
 && !
is_kqueue
) {

964 
Л°_ok
 = 0;

967 
	`evТt_ba£_loЁ
(
ba£1
, 
EVLOOP_NONBLOCK
);

968 
	`њi£
(
SIGUSR1
);

969 
	`evТt_ba£_loЁ
(
ba£1
, 
EVLOOP_NONBLOCK
);

970 
	`evТt_ba£_loЁ
(
ba£2
, 
EVLOOP_NONBLOCK
);

972 
Тd
:

973 
	`evТt_ba£_дУ
(
ba£1
);

974 
	`evТt_ba£_дУ
(
ba£2
);

975 
	`юЧnup_Л°
();

976 
	}
}

983 
	$Л°_sig«l_as£є
()

985 
evТt
 
ev
;

986 
evТt_ba£
 *
ba£
 = 
	`evТt_ЪЩ
();

987 
Л°_ok
 = 0;

988 
	`іЪtf
("Signal handlerЗssert: ");

990 
	`evsig«l_£t
(&
ev
, 
SIGCONT
, 
sig«l_cb
, &ev);

991 
	`evsig«l_add
(&
ev
, 
NULL
);

996 
	`evsig«l_dЦ
(&
ev
);

998 
	`њi£
(
SIGCONT
);

1000 iа(
ba£
->
sig
.
evsig_€ught
)

1001 
Л°_ok
 = 0;

1003 
Л°_ok
 = 1;

1005 
	`evТt_ba£_дУ
(
ba£
);

1006 
	`юЧnup_Л°
();

1008 
	}
}

1014 
	$Л°_sig«l_ї°№e
()

1016 
evТt
 
ev
;

1017 
evТt_ba£
 *
ba£
 = 
	`evТt_ЪЩ
();

1018 #ifdeа
_EVENT_HAVE_SIGACTION


1019 
sigaщiЏ
 
І
;

1022 
Л°_ok
 = 0;

1023 
	`іЪtf
("Signal handlerДestore: ");

1024 #ifdeа
_EVENT_HAVE_SIGACTION


1025 
І
.
І_h™dЋr
 = 
sig«l_cb_І
;

1026 
І
.
І_жags
 = 0x0;

1027 
	`sigem±y£t
(&
І
.
І_mask
);

1028 iа(
	`sigaщiЏ
(
SIGUSR1
, &
І
, 
NULL
) == -1)

1029 
out
;

1031 iа(
	`sig«l
(
SIGUSR1
, 
sig«l_cb_І
и=р
SIG_ERR
)

1032 
out
;

1034 
	`evsig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

1035 
	`evsig«l_add
(&
ev
, 
NULL
);

1036 
	`evsig«l_dЦ
(&
ev
);

1038 
	`њi£
(
SIGUSR1
);

1040 iа(
Л°_ok
 != 2)

1041 
Л°_ok
 = 0;

1042 
out
:

1043 
	`evТt_ba£_дУ
(
ba£
);

1044 
	`юЧnup_Л°
();

1046 
	}
}

1049 
	$sig«l_cb_swp
(
sig
, 
evТt
, *
ђg
)

1051 
€ќed
++;

1052 iа(
€ќed
 < 5)

1053 
	`њi£
(
sig
);

1055 
	`evТt_loЁexЩ
(
NULL
);

1056 
	}
}

1058 
	$timeout_cb_swp
(
fd
, 
evТt
, *
ђg
)

1060 iа(
€ќed
 == -1) {

1061 
timevЃ
 
tv
 = {5, 0};

1063 
€ќed
 = 0;

1064 
	`evtimФ_add
((
evТt
 *)
ђg
, &
tv
);

1065 
	`њi£
(
SIGUSR1
);

1068 
Л°_ok
 = 0;

1069 
	`evТt_loЁexЩ
(
NULL
);

1070 
	}
}

1073 
	$Л°_sig«l_whЮe_іoыssЪg
()

1075 
evТt_ba£
 *
ba£
 = 
	`evТt_ЪЩ
();

1076 
evТt
 
ev
, 
ev_timФ
;

1077 
timevЃ
 
tv
 = {0, 0};

1079 
	`£tup_Л°
("ReceivingЗ signal whileЕrocessing other signal: ");

1081 
€ќed
 = -1;

1082 
Л°_ok
 = 1;

1083 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb_swp
, 
NULL
);

1084 
	`sig«l_add
(&
ev
, 
NULL
);

1085 
	`evtimФ_£t
(&
ev_timФ
, 
timeout_cb_swp
, &ev_timer);

1086 
	`evtimФ_add
(&
ev_timФ
, &
tv
);

1087 
	`evТt_di•©ch
();

1089 
	`evТt_ba£_дУ
(
ba£
);

1090 
	`юЧnup_Л°
();

1092 
	}
}

1096 
	$Л°_дУ_aщive_ba£
(*
±r
)

1098 
basic_Л°_d©a
 *
d©a
 = 
±r
;

1099 
evТt_ba£
 *
ba£1
;

1100 
evТt
 
ev1
;

1102 
ba£1
 = 
	`evТt_ЪЩ
();

1103 iа(
ba£1
) {

1104 
	`evТt_assign
(&
ev1
, 
ba£1
, 
d©a
->
ЈЬ
[1], 
EV_READ
,

1105 
dummy_їad_cb
, 
NULL
);

1106 
	`evТt_add
(&
ev1
, 
NULL
);

1107 
	`evТt_ba£_дУ
(
ba£1
);

1109 
	`Й_зЮ_msg
("failedБo createГvent_base forБest");

1112 
ba£1
 = 
	`evТt_ЪЩ
();

1113 
	`Й_as£є
(
ba£1
);

1114 
	`evТt_assign
(&
ev1
, 
ba£1
, 0, 0, 
dummy_їad_cb
, 
NULL
);

1115 
	`evТt_aщive
(&
ev1
, 
EV_READ
, 1);

1116 
	`evТt_ba£_дУ
(
ba£1
);

1117 
Тd
:

1119 
	}
}

1122 
	$Л°_m™ЭuѕЛ_aщive_evТts
(*
±r
)

1124 
basic_Л°_d©a
 *
d©a
 = 
±r
;

1125 
evТt_ba£
 *
ba£
 = 
d©a
->base;

1126 
evТt
 
ev1
;

1128 
	`evТt_assign
(&
ev1
, 
ba£
, -1, 
EV_TIMEOUT
, 
dummy_їad_cb
, 
NULL
);

1131 
	`evТt_aщive
(&
ev1
, 
EV_READ
, 1);

1132 
	`Й_Ъt_Ё
(
	`evТt_≥ndЪg
(&
ev1
, 
EV_READ
|
EV_TIMEOUT
|
EV_WRITE
, 
NULL
),

1133 ==, 
EV_READ
);

1136 
	`evТt_aщive
(&
ev1
, 
EV_WRITE
, 1);

1137 
	`Й_Ъt_Ё
(
	`evТt_≥ndЪg
(&
ev1
, 
EV_READ
|
EV_TIMEOUT
|
EV_WRITE
, 
NULL
),

1138 ==, 
EV_READ
|
EV_WRITE
);

1140 
Тd
:

1141 
	`evТt_dЦ
(&
ev1
);

1142 
	}
}

1145 
	$Л°_bad_assign
(*
±r
)

1147 
evТt
 
ev
;

1148 
r
;

1150 
r
 = 
	`evТt_assign
(&
ev
, 
NULL
, -1, 
EV_SIGNAL
|
EV_READ
, 
dummy_їad_cb
, NULL);

1151 
	`Й_Ъt_Ё
(
r
,==,-1);

1153 
Тd
:

1155 
	}
}

1158 
	$Л°_evТt_ba£_√w
(*
±r
)

1160 
basic_Л°_d©a
 *
d©a
 = 
±r
;

1161 
evТt_ba£
 *
ba£
 = 0;

1162 
evТt
 
ev1
;

1163 
basic_cb_ђgs
 
ђgs
;

1165 
towrЩe
 = 
	`°ЊТ
(
TEST1
)+1;

1166 
Ћn
 = 
	`wrЩe
(
d©a
->
ЈЬ
[0], 
TEST1
, 
towrЩe
);

1168 iа(
Ћn
 < 0)

1169 
	`Й_ab№t_≥Љ№
("initial write");

1170 iа(
Ћn
 !р
towrЩe
)

1171 
	`Й_ab№t_іЪtf
(("initial write fell short (%d of %d bytes)",

1172 
Ћn
, 
towrЩe
));

1174 iа(
	`shutdown
(
d©a
->
ЈЬ
[0], 
SHUT_WR
))

1175 
	`Й_ab№t_≥Љ№
("initial write shutdown");

1177 
ba£
 = 
	`evТt_ba£_√w
();

1178 iа(!
ba£
)

1179 
	`Й_ab№t_msg
("failedБo createГvent base");

1181 
ђgs
.
eb
 = 
ba£
;

1182 
ђgs
.
ev
 = &
ev1
;

1183 
ђgs
.
€ќcouЅ
 = 0;

1184 
	`evТt_assign
(&
ev1
, 
ba£
, 
d©a
->
ЈЬ
[1],

1185 
EV_READ
|
EV_PERSIST
, 
basic_їad_cb
, &
ђgs
);

1187 iа(
	`evТt_add
(&
ev1
, 
NULL
))

1188 
	`Й_ab№t_≥Љ№
("initialГvent_add");

1190 iа(
	`evТt_ba£_loЁ
(
ba£
, 0))

1191 
	`Й_ab№t_msg
("unsuccessfulГxit fromГventЖoop");

1193 
Тd
:

1194 iа(
ba£
)

1195 
	`evТt_ba£_дУ
(
ba£
);

1196 
	}
}

1199 
	$Л°_loЁexЩ
()

1201 
timevЃ
 
tv
, 
tv_°ђt
, 
tv_Тd
;

1202 
evТt
 
ev
;

1204 
	`£tup_Л°
("LoopГxit: ");

1206 
tv
.
tv_u£c
 = 0;

1207 
tv
.
tv_£c
 = 60*60*24;

1208 
	`evtimФ_£t
(&
ev
, 
timeout_cb
, 
NULL
);

1209 
	`evtimФ_add
(&
ev
, &
tv
);

1211 
tv
.
tv_u£c
 = 0;

1212 
tv
.
tv_£c
 = 1;

1213 
	`evТt_loЁexЩ
(&
tv
);

1215 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

1216 
	`evТt_di•©ch
();

1217 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

1218 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

1220 
	`evtimФ_dЦ
(&
ev
);

1222 
	`Й_as£є
(
	`evТt_ba£_gў_exЩ
(
globЃ_ba£
));

1223 
	`Й_as£є
(!
	`evТt_ba£_gў_bїak
(
globЃ_ba£
));

1225 iа(
tv
.
tv_£c
 < 2)

1226 
Л°_ok
 = 1;

1228 
Тd
:

1229 
	`юЧnup_Л°
();

1230 
	}
}

1233 
	$Л°_loЁexЩ_mu…ЭЋ
()

1235 
timevЃ
 
tv
;

1236 
evТt_ba£
 *
ba£
;

1238 
	`£tup_Л°
("Loop MultipleГxit: ");

1240 
ba£
 = 
	`evТt_ba£_√w
();

1242 
tv
.
tv_u£c
 = 0;

1243 
tv
.
tv_£c
 = 1;

1244 
	`evТt_ba£_loЁexЩ
(
ba£
, &
tv
);

1246 
tv
.
tv_u£c
 = 0;

1247 
tv
.
tv_£c
 = 2;

1248 
	`evТt_ba£_loЁexЩ
(
ba£
, &
tv
);

1250 
	`evТt_ba£_di•©ch
(
ba£
);

1252 
	`Й_as£є
(
	`evТt_ba£_gў_exЩ
(
ba£
));

1253 
	`Й_as£є
(!
	`evТt_ba£_gў_bїak
(
ba£
));

1255 
	`evТt_ba£_дУ
(
ba£
);

1257 
Л°_ok
 = 1;

1259 
Тd
:

1260 
	`юЧnup_Л°
();

1261 
	}
}

1264 
	$bїak_cb
(
fd
, 
evТts
, *
ђg
)

1266 
Л°_ok
 = 1;

1267 
	`evТt_loЁbїak
();

1268 
	}
}

1271 
	$зЮ_cb
(
fd
, 
evТts
, *
ђg
)

1273 
Л°_ok
 = 0;

1274 
	}
}

1277 
	$Л°_loЁbїak
()

1279 
evТt
 
ev1
, 
ev2
;

1280 
timevЃ
 
tv
;

1282 
	`£tup_Л°
("Loop break: ");

1284 
tv
.
tv_£c
 = 0;

1285 
tv
.
tv_u£c
 = 0;

1286 
	`evtimФ_£t
(&
ev1
, 
bїak_cb
, 
NULL
);

1287 
	`evtimФ_add
(&
ev1
, &
tv
);

1288 
	`evtimФ_£t
(&
ev2
, 
зЮ_cb
, 
NULL
);

1289 
	`evtimФ_add
(&
ev2
, &
tv
);

1291 
	`evТt_di•©ch
();

1293 
	`Й_as£є
(!
	`evТt_ba£_gў_exЩ
(
globЃ_ba£
));

1294 
	`Й_as£є
(
	`evТt_ba£_gў_bїak
(
globЃ_ba£
));

1296 
	`evtimФ_dЦ
(&
ev1
);

1297 
	`evtimФ_dЦ
(&
ev2
);

1299 
Тd
:

1300 
	`юЧnup_Л°
();

1301 
	}
}

1303 
evТt
 *
	gїadd_Л°_evТt_ѕ°_added
 = 
NULL
;

1305 
	$ї_add_їad_cb
(
fd
, 
evТt
, *
ђg
)

1307 
buf
[256];

1308 
Ћn
;

1309 
evТt
 *
ev_ўhФ
 = 
ђg
;

1310 
їadd_Л°_evТt_ѕ°_added
 = 
ev_ўhФ
;

1311 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf));

1312 
	`evТt_add
(
ev_ўhФ
, 
NULL
);

1313 ++
Л°_ok
;

1314 
	}
}

1317 
	$Л°_nЏ≥rsi°_їadd
()

1319 
evТt
 
ev1
, 
ev2
;

1320 
n
, 
m
;

1322 
	`£tup_Л°
("Re-addВonpersistentГvents: ");

1323 
	`evТt_£t
(&
ev1
, 
ЈЬ
[0], 
EV_READ
, 
ї_add_їad_cb
, &
ev2
);

1324 
	`evТt_£t
(&
ev2
, 
ЈЬ
[1], 
EV_READ
, 
ї_add_їad_cb
, &
ev1
);

1325 
n
 = 
	`wrЩe
(
ЈЬ
[0], "Hello", 5);

1326 
m
 = 
	`wrЩe
(
ЈЬ
[1], "Hello", 5);

1327 iа(
	`evТt_add
(&
ev1
, 
NULL
) == -1 ||

1328 
	`evТt_add
(&
ev2
, 
NULL
) == -1) {

1329 
Л°_ok
 = 0;

1331 iа(
Л°_ok
 != 0)

1332 
	`exЩ
(1);

1333 
	`evТt_loЁ
(
EVLOOP_ONCE
);

1334 iа(
Л°_ok
 != 2)

1335 
	`exЩ
(1);

1341 iа(!
їadd_Л°_evТt_ѕ°_added
) {

1342 
Л°_ok
 = 0;

1343 } iа(
їadd_Л°_evТt_ѕ°_added
 =р&
ev1
) {

1344 iа(!
	`evТt_≥ndЪg
(&
ev1
, 
EV_READ
, 
NULL
) ||

1345 
	`evТt_≥ndЪg
(&
ev2
, 
EV_READ
, 
NULL
))

1346 
Л°_ok
 = 0;

1348 iа(
	`evТt_≥ndЪg
(&
ev1
, 
EV_READ
, 
NULL
) ||

1349 !
	`evТt_≥ndЪg
(&
ev2
, 
EV_READ
, 
NULL
))

1350 
Л°_ok
 = 0;

1353 
	`evТt_dЦ
(&
ev1
);

1354 
	`evТt_dЦ
(&
ev2
);

1356 
	`юЧnup_Л°
();

1357 
	}
}

1359 
	sЛ°_іi_evТt
 {

1360 
evТt
 
	mev
;

1361 
	mcouЅ
;

1365 
	$Л°_іi№ЩЫs_cb
(
fd
, 
wh©
, *
ђg
)

1367 
Л°_іi_evТt
 *
іi
 = 
ђg
;

1368 
timevЃ
 
tv
;

1370 iа(
іi
->
couЅ
 == 3) {

1371 
	`evТt_loЁexЩ
(
NULL
);

1375 
іi
->
couЅ
++;

1377 
	`evutЮ_timФюЧr
(&
tv
);

1378 
	`evТt_add
(&
іi
->
ev
, &
tv
);

1379 
	}
}

1382 
	$Л°_іi№ЩЫs_imґ
(
≈ri№ЩЫs
)

1384 
Л°_іi_evТt
 
Џe
, 
two
;

1385 
timevЃ
 
tv
;

1387 
	`TT_BLATHER
(("Te°Ъg Pri№ЩЫ†%d: ", 
≈ri№ЩЫs
));

1389 
	`evТt_ba£_іi№Щy_ЪЩ
(
globЃ_ba£
, 
≈ri№ЩЫs
);

1391 
	`mem£t
(&
Џe
, 0, (one));

1392 
	`mem£t
(&
two
, 0, (two));

1394 
	`timeout_£t
(&
Џe
.
ev
, 
Л°_іi№ЩЫs_cb
, &one);

1395 iа(
	`evТt_іi№Щy_£t
(&
Џe
.
ev
, 0) == -1) {

1396 
	`еrЪtf
(
°dФr
, "%s: faЮedБЎ£Иіi№Щy", 
__func__
);

1397 
	`exЩ
(1);

1400 
	`timeout_£t
(&
two
.
ev
, 
Л°_іi№ЩЫs_cb
, &two);

1401 iа(
	`evТt_іi№Щy_£t
(&
two
.
ev
, 
≈ri№ЩЫs
 - 1) == -1) {

1402 
	`еrЪtf
(
°dФr
, "%s: faЮedБЎ£Иіi№Щy", 
__func__
);

1403 
	`exЩ
(1);

1406 
	`evutЮ_timФюЧr
(&
tv
);

1408 iа(
	`evТt_add
(&
Џe
.
ev
, &
tv
) == -1)

1409 
	`exЩ
(1);

1410 iа(
	`evТt_add
(&
two
.
ev
, &
tv
) == -1)

1411 
	`exЩ
(1);

1413 
	`evТt_di•©ch
();

1415 
	`evТt_dЦ
(&
Џe
.
ev
);

1416 
	`evТt_dЦ
(&
two
.
ev
);

1418 iа(
≈ri№ЩЫs
 == 1) {

1419 iа(
Џe
.
couЅ
 =р3 && 
two
.count == 3)

1420 
Л°_ok
 = 1;

1421 } iа(
≈ri№ЩЫs
 == 2) {

1423 iа(
Џe
.
couЅ
 =р3 && 
two
.count == 1)

1424 
Л°_ok
 = 1;

1426 iа(
Џe
.
couЅ
 =р3 && 
two
.count == 0)

1427 
Л°_ok
 = 1;

1429 
	}
}

1432 
	$Л°_іi№ЩЫs
()

1434 
	`Л°_іi№ЩЫs_imґ
(1);

1435 iа(
Л°_ok
)

1436 
	`Л°_іi№ЩЫs_imґ
(2);

1437 iа(
Л°_ok
)

1438 
	`Л°_іi№ЩЫs_imґ
(3);

1439 
	}
}

1443 
	$Л°_mu…ЭЋ_cb
(
fd
, 
evТt
, *
ђg
)

1445 iа(
evТt
 & 
EV_READ
)

1446 
Л°_ok
 |= 1;

1447 iа(
evТt
 & 
EV_WRITE
)

1448 
Л°_ok
 |= 2;

1449 
	}
}

1452 
	$Л°_mu…ЭЋ_evТts_f№_Іme_fd
()

1454 
evТt
 
e1
, 
e2
;

1456 
	`£tup_Л°
("MultipleГvents for same fd: ");

1458 
	`evТt_£t
(&
e1
, 
ЈЬ
[0], 
EV_READ
, 
Л°_mu…ЭЋ_cb
, 
NULL
);

1459 
	`evТt_add
(&
e1
, 
NULL
);

1460 
	`evТt_£t
(&
e2
, 
ЈЬ
[0], 
EV_WRITE
, 
Л°_mu…ЭЋ_cb
, 
NULL
);

1461 
	`evТt_add
(&
e2
, 
NULL
);

1462 
	`evТt_loЁ
(
EVLOOP_ONCE
);

1463 
	`evТt_dЦ
(&
e2
);

1464 
	`wrЩe
(
ЈЬ
[1], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

1465 
	`evТt_loЁ
(
EVLOOP_ONCE
);

1466 
	`evТt_dЦ
(&
e1
);

1468 iа(
Л°_ok
 != 3)

1469 
Л°_ok
 = 0;

1471 
	`юЧnup_Л°
();

1472 
	}
}

1474 
evПg_decode_Ъt
(
ev_uЪt32_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
);

1475 
evПg_decode_Ъt64
(
ev_uЪt64_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
);

1476 
evПg_Тcode_Пg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
numbФ
);

1477 
evПg_decode_Пg
(
ev_uЪt32_t
 *
≤umbФ
, 
evbufгr
 *
evbuf
);

1480 
	$їad_Џы_cb
(
fd
, 
evТt
, *
ђg
)

1482 
buf
[256];

1483 
Ћn
;

1485 
Ћn
 = 
	`їad
(
fd
, 
buf
, (buf));

1487 iа(
€ќed
) {

1488 
Л°_ok
 = 0;

1489 } iа(
Ћn
) {

1491 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

1492 
Л°_ok
 = 1;

1495 
€ќed
++;

1496 
	}
}

1499 
	$Л°_w™t_Џly_Џы
()

1501 
evТt
 
ev
;

1502 
timevЃ
 
tv
;

1505 
	`£tup_Л°
("WantДead only once: ");

1507 
	`wrЩe
(
ЈЬ
[0], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

1510 
	`evutЮ_timФюЧr
(&
tv
);

1511 
tv
.
tv_£c
 = 1;

1512 
	`evТt_loЁexЩ
(&
tv
);

1514 
	`evТt_£t
(&
ev
, 
ЈЬ
[1], 
EV_READ
, 
їad_Џы_cb
, &ev);

1515 iа(
	`evТt_add
(&
ev
, 
NULL
) == -1)

1516 
	`exЩ
(1);

1517 
	`evТt_di•©ch
();

1519 
	`юЧnup_Л°
();

1520 
	}
}

1522 
	#TEST_MAX_INT
 6

	)

1525 
	$evПg_Ъt_Л°
(*
±r
)

1527 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

1528 
ev_uЪt32_t
 
ЪЛgФs
[
TEST_MAX_INT
] = {

1531 
ev_uЪt32_t
 
ЪЛgФ
;

1532 
ev_uЪt64_t
 
big_Ъt
;

1533 
i
;

1535 
	`evПg_ЪЩ
();

1537 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1538 
ёdЋn
, 
√wЋn
;

1539 
ёdЋn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1540 
	`evПg_Тcode_Ъt
(
tmp
, 
ЪЛgФs
[
i
]);

1541 
√wЋn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1542 
	`TT_BLATHER
(("encoded 0x%08x with %d bytes",

1543 ()
ЪЛgФs
[
i
], 
√wЋn
 - 
ёdЋn
));

1544 
big_Ъt
 = 
ЪЛgФs
[
i
];

1545 
big_Ъt
 *= 1000000000;

1546 
	`evПg_Тcode_Ъt64
(
tmp
, 
big_Ъt
);

1549 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1550 
	`Й_Ъt_Ё
(
	`evПg_decode_Ъt
(&
ЪЛgФ
, 
tmp
), !=, -1);

1551 
	`Й_uЪt_Ё
(
ЪЛgФ
, ==, 
ЪЛgФs
[
i
]);

1552 
	`Й_Ъt_Ё
(
	`evПg_decode_Ъt64
(&
big_Ъt
, 
tmp
), !=, -1);

1553 
	`Й_as£є
((
big_Ъt
 / 1000000000и=р
ЪЛgФs
[
i
]);

1556 
	`Й_uЪt_Ё
(
	`EVBUFFER_LENGTH
(
tmp
), ==, 0);

1557 
Тd
:

1558 
	`evbufгr_дУ
(
tmp
);

1559 
	}
}

1562 
	$evПg_fuzz
(*
±r
)

1564 
u_chђ
 
bufгr
[4096];

1565 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

1566 
timevЃ
 
tv
;

1567 
i
, 
j
;

1569 
nў_зЮed
 = 0;

1571 
	`evПg_ЪЩ
();

1573 
j
 = 0; j < 100; j++) {

1574 
i
 = 0; i < (
bufгr
); i++)

1575 
bufгr
[
i
] = 
	`њnd
();

1576 
	`evbufгr_dњЪ
(
tmp
, -1);

1577 
	`evbufгr_add
(
tmp
, 
bufгr
, (buffer));

1579 iа(
	`evПg_unmђshЃ_timevЃ
(
tmp
, 0, &
tv
) != -1)

1580 
nў_зЮed
++;

1584 
	`Й_Ъt_Ё
(
nў_зЮed
, <, 10);

1587 
	`evbufгr_dњЪ
(
tmp
, -1);

1588 
	`evutЮ_timФюЧr
(&
tv
);

1589 
tv
.
tv_£c
 = 1;

1590 
	`evПg_mђshЃ_timevЃ
(
tmp
, 0, &
tv
);

1591 
	`evbufгr_add
(
tmp
, 
bufгr
, (buffer));

1593 ((*)
	`EVBUFFER_DATA
(
tmp
))[1] = '\xff';

1594 iа(
	`evПg_unmђshЃ_timevЃ
(
tmp
, 0, &
tv
) != -1) {

1595 
	`Й_ab№t_msg
("evtag_unmarshal_timeval should have failed");

1598 
Тd
:

1599 
	`evbufгr_дУ
(
tmp
);

1600 
	}
}

1603 
	$evПg_Пg_ТcodЪg
(*
±r
)

1605 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

1606 
ev_uЪt32_t
 
ЪЛgФs
[
TEST_MAX_INT
] = {

1609 
ev_uЪt32_t
 
ЪЛgФ
;

1610 
i
;

1612 
	`evПg_ЪЩ
();

1614 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1615 
ёdЋn
, 
√wЋn
;

1616 
ёdЋn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1617 
	`evПg_Тcode_Пg
(
tmp
, 
ЪЛgФs
[
i
]);

1618 
√wЋn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1619 
	`TT_BLATHER
(("encoded 0x%08x with %d bytes",

1620 ()
ЪЛgФs
[
i
], 
√wЋn
 - 
ёdЋn
));

1623 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1624 
	`Й_Ъt_Ё
(
	`evПg_decode_Пg
(&
ЪЛgФ
, 
tmp
), !=, -1);

1625 
	`Й_uЪt_Ё
(
ЪЛgФ
, ==, 
ЪЛgФs
[
i
]);

1628 
	`Й_uЪt_Ё
(
	`EVBUFFER_LENGTH
(
tmp
), ==, 0);

1630 
Тd
:

1631 
	`evbufгr_дУ
(
tmp
);

1632 
	}
}

1635 
	$evПg_Л°_≥ek
(*
±r
)

1637 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

1638 
ev_uЪt32_t
 
u32
;

1640 
	`evПg_mђshЃ_Ъt
(
tmp
, 30, 0);

1641 
	`evПg_mђshЃ_°rЪg
(
tmp
, 40, "Hello world");

1643 
	`Й_Ъt_Ё
(
	`evПg_≥ek
(
tmp
, &
u32
), ==, 1);

1644 
	`Й_Ъt_Ё
(
u32
, ==, 30);

1645 
	`Й_Ъt_Ё
(
	`evПg_≥ek_Ћngth
(
tmp
, &
u32
), ==, 0);

1646 
	`Й_Ъt_Ё
(
u32
, ==, 1+1+1);

1647 
	`Й_Ъt_Ё
(
	`evПg_cЏsume
(
tmp
), ==, 0);

1649 
	`Й_Ъt_Ё
(
	`evПg_≥ek
(
tmp
, &
u32
), ==, 1);

1650 
	`Й_Ъt_Ё
(
u32
, ==, 40);

1651 
	`Й_Ъt_Ё
(
	`evПg_≥ek_Ћngth
(
tmp
, &
u32
), ==, 0);

1652 
	`Й_Ъt_Ё
(
u32
, ==, 1+1+11);

1653 
	`Й_Ъt_Ё
(
	`evПg_Јylяd_Ћngth
(
tmp
, &
u32
), ==, 0);

1654 
	`Й_Ъt_Ё
(
u32
, ==, 11);

1656 
Тd
:

1657 
	`evbufгr_дУ
(
tmp
);

1658 
	}
}

1662 
	$Л°_mСhods
(*
±r
)

1664 cЏ° **
mСhods
 = 
	`evТt_gС_suµ№Лd_mСhods
();

1665 
evТt_cЏfig
 *
cfg
 = 
NULL
;

1666 
evТt_ba£
 *
ba£
 = 
NULL
;

1667 cЏ° *
backТd
;

1668 
n_mСhods
 = 0;

1670 
	`Й_as£є
(
mСhods
);

1672 
backТd
 = 
mСhods
[0];

1673 *
mСhods
 !р
NULL
) {

1674 
	`TT_BLATHER
(("Suµ№ИmСhod: %s", *
mСhods
));

1675 ++
mСhods
;

1676 ++
n_mСhods
;

1679 
cfg
 = 
	`evТt_cЏfig_√w
();

1680 
	`as£є
(
cfg
 !р
NULL
);

1682 
	`Й_Ъt_Ё
(
	`evТt_cЏfig_avoid_mСhod
(
cfg
, 
backТd
), ==, 0);

1683 
	`evТt_cЏfig_£t_жag
(
cfg
, 
EVENT_BASE_FLAG_IGNORE_ENV
);

1685 
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

1686 iа(
n_mСhods
 > 1) {

1687 
	`Й_as£є
(
ba£
);

1688 
	`Й_°r_Ё
(
backТd
, !=, 
	`evТt_ba£_gС_mСhod
(
ba£
));

1690 
	`Й_as£є
(
ba£
 =р
NULL
);

1693 
Тd
:

1694 iа(
ba£
)

1695 
	`evТt_ba£_дУ
(
ba£
);

1696 iа(
cfg
)

1697 
	`evТt_cЏfig_дУ
(
cfg
);

1698 
	}
}

1701 
	$Л°_vФsiЏ
(*
ђg
)

1703 cЏ° *
v°r
;

1704 
ev_uЪt32_t
 
vЪt
;

1705 
maj№
, 
mЪ№
, 
Јtch
, 
n
;

1707 
v°r
 = 
	`evТt_gС_vФsiЏ
();

1708 
vЪt
 = 
	`evТt_gС_vФsiЏ_numbФ
();

1710 
	`Й_as£є
(
v°r
);

1711 
	`Й_as£є
(
vЪt
);

1713 
	`Й_°r_Ё
(
v°r
, ==, 
LIBEVENT_VERSION
);

1714 
	`Й_Ъt_Ё
(
vЪt
, ==, 
LIBEVENT_VERSION_NUMBER
);

1716 
n
 = 
	`ss€nf
(
v°r
, "%d.%d.%d", &
maj№
, &
mЪ№
, &
Јtch
);

1717 
	`Й_as£є
(3 =р
n
);

1718 
	`Й_Ъt_Ё
((
vЪt
&0xffffff00), ==, ((
maj№
<<24)|(
mЪ№
<<16)|(
Јtch
<<8)));

1719 
Тd
:

1721 
	}
}

1724 
	$Л°_ba£_г©uїs
(*
ђg
)

1726 
evТt_ba£
 *
ba£
 = 
NULL
;

1727 
evТt_cЏfig
 *
cfg
 = 
NULL
;

1729 
cfg
 = 
	`evТt_cЏfig_√w
();

1731 
	`Й_as£є
(0 =р
	`evТt_cЏfig_їquЬe_г©uїs
(
cfg
, 
EV_FEATURE_ET
));

1733 
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

1734 iа(
ba£
) {

1735 
	`Й_Ъt_Ё
(
EV_FEATURE_ET
, ==,

1736 
	`evТt_ba£_gС_г©uїs
(
ba£
и& 
EV_FEATURE_ET
);

1738 
ba£
 = 
	`evТt_ba£_√w
();

1739 
	`Й_Ъt_Ё
(0, ==, 
	`evТt_ba£_gС_г©uїs
(
ba£
и& 
EV_FEATURE_ET
);

1742 
Тd
:

1743 iа(
ba£
)

1744 
	`evТt_ba£_дУ
(
ba£
);

1745 iа(
cfg
)

1746 
	`evТt_cЏfig_дУ
(
cfg
);

1747 
	}
}

1749 #ifdeа
_EVENT_HAVE_SETENV


1750 
	#SETENV_OK


	)

1751 #Цiа!
defЪed
(
_EVENT_HAVE_SETENV
и&& defЪed(
_EVENT_HAVE_PUTENV
)

1752 
	$£Лnv
(cЏ° *
k
, cЏ° *
v
, 
_o
)

1754 
b
[256];

1755 
	`evutЮ_ҐіЪtf
(
b
, (b), "%s=%s",
k
,
v
);

1756 
	`puЛnv
(
b
);

1757 
	}
}

1758 
	#SETENV_OK


	)

1761 #ifdeа
_EVENT_HAVE_UNSETENV


1762 
	#UNSETENV_OK


	)

1763 #Цiа!
defЪed
(
_EVENT_HAVE_UNSETENV
и&& defЪed(
_EVENT_HAVE_PUTENV
)

1764 
	$un£Лnv
(cЏ° *
k
)

1766 
b
[256];

1767 
	`evutЮ_ҐіЪtf
(
b
, (b), "%s=",
k
);

1768 
	`puЛnv
(
b
);

1769 
	}
}

1770 
	#UNSETENV_OK


	)

1773 #iа
defЪed
(
SETENV_OK
и&& defЪed(
UNSETENV_OK
)

1775 
	$mСhod«me_to_Тvvђ
(cЏ° *
m«me
, *
buf
, 
size_t
 
buжТ
)

1777 *
э
;

1778 
	`evutЮ_ҐіЪtf
(
buf
, 
buжТ
, "EVENT_NO%s", 
m«me
);

1779 
э
 = 
buf
; *cp; ++cp) {

1780 *
э
 = 
	`touµФ
(*cp);

1782 
	}
}

1786 
	$Л°_ba£_ТvЬЏ
(*
ђg
)

1788 
evТt_ba£
 *
ba£
 = 
NULL
;

1789 
evТt_cЏfig
 *
cfg
 = 
NULL
;

1791 #iа
	`defЪed
(
SETENV_OK
и&& defЪed(
UNSETENV_OK
)

1792 cЏ° **
ba£«mes
;

1793 
vђbuf
[128];

1794 
i
, 
n_mСhods
=0;

1795 cЏ° *
deзu…«me
;

1797 
ba£«mes
 = 
	`evТt_gС_suµ№Лd_mСhods
();

1798 
i
 = 0; 
ba£«mes
[i]; ++i) {

1799 
	`mСhod«me_to_Тvvђ
(
ba£«mes
[
i
], 
vђbuf
, (varbuf));

1800 
	`un£Лnv
(
vђbuf
);

1801 ++
n_mСhods
;

1804 
ba£
 = 
	`evТt_ba£_√w
();

1805 
	`Й_as£є
(
ba£
);

1807 
deзu…«me
 = 
	`evТt_ba£_gС_mСhod
(
ba£
);

1808 
	`TT_BLATHER
(("deзu… i†<%s>", 
deзu…«me
));

1809 
	`evТt_ba£_дУ
(
ba£
);

1810 
ba£
 = 
NULL
;

1813 
	`mСhod«me_to_Тvvђ
(
deзu…«me
, 
vђbuf
, (varbuf));

1814 
	`£Лnv
(
vђbuf
, "1", 1);

1817 
cfg
 = 
	`evТt_cЏfig_√w
();

1818 
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

1819 
	`evТt_cЏfig_дУ
(
cfg
);

1820 
cfg
 = 
NULL
;

1821 iа(
n_mСhods
 == 1) {

1822 
	`Й_as£є
(!
ba£
);

1824 
	`Й_as£є
(
ba£
);

1825 
	`Й_°r_Ё
(
deзu…«me
, !=, 
	`evТt_ba£_gС_mСhod
(
ba£
));

1826 
	`evТt_ba£_дУ
(
ba£
);

1827 
ba£
 = 
NULL
;

1831 
cfg
 = 
	`evТt_cЏfig_√w
();

1832 
	`evТt_cЏfig_£t_жag
(
cfg
, 
EVENT_BASE_FLAG_IGNORE_ENV
);

1833 
ba£
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

1834 
	`Й_as£є
(
ba£
);

1835 
	`Й_°r_Ё
(
deзu…«me
, ==, 
	`evТt_ba£_gС_mСhod
(
ba£
));

1837 
	`Й_skЭ
();

1840 
Тd
:

1841 iа(
ba£
)

1842 
	`evТt_ba£_дУ
(
ba£
);

1843 iа(
cfg
)

1844 
	`evТt_cЏfig_дУ
(
cfg
);

1845 
	}
}

1848 
	$їad_€ќed_Џы_cb
(
fd
, 
evТt
, *
ђg
)

1850 
	`Й_Ъt_Ё
(
evТt
, ==, 
EV_READ
);

1851 
€ќed
 += 1;

1852 
Тd
:

1854 
	}
}

1857 
	$timeout_€ќed_Џы_cb
(
fd
, 
evТt
, *
ђg
)

1859 
	`Й_Ъt_Ё
(
evТt
, ==, 
EV_TIMEOUT
);

1860 
€ќed
 += 100;

1861 
Тd
:

1863 
	}
}

1866 
	$Л°_evТt_Џы
(*
±r
)

1868 
basic_Л°_d©a
 *
d©a
 = 
±r
;

1869 
timevЃ
 
tv
;

1870 
r
;

1872 
tv
.
tv_£c
 = 0;

1873 
tv
.
tv_u£c
 = 50*1000;

1874 
€ќed
 = 0;

1875 
r
 = 
	`evТt_ba£_Џы
(
d©a
->
ba£
, d©a->
ЈЬ
[0], 
EV_READ
,

1876 
їad_€ќed_Џы_cb
, 
NULL
, NULL);

1877 
	`Й_Ъt_Ё
(
r
, ==, 0);

1878 
r
 = 
	`evТt_ba£_Џы
(
d©a
->
ba£
, -1, 
EV_TIMEOUT
,

1879 
timeout_€ќed_Џы_cb
, 
NULL
, &
tv
);

1880 
	`Й_Ъt_Ё
(
r
, ==, 0);

1881 
r
 = 
	`evТt_ba£_Џы
(
d©a
->
ba£
, -1, 0, 
NULL
, NULL, NULL);

1882 
	`Й_Ъt_Ё
(
r
, <, 0);

1884 
	`wrЩe
(
d©a
->
ЈЬ
[1], 
TEST1
, 
	`°ЊТ
(TEST1)+1);

1885 
	`shutdown
(
d©a
->
ЈЬ
[1], 
SHUT_WR
);

1887 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

1889 
	`Й_Ъt_Ё
(
€ќed
, ==, 101);

1890 
Тd
:

1892 
	}
}

1895 
	$Л°_evТt_≥ndЪg
(*
±r
)

1897 
basic_Л°_d©a
 *
d©a
 = 
±r
;

1898 
evТt
 *
r
=
NULL
, *
w
=NULL, *
t
=NULL;

1899 
timevЃ
 
tv
, 
now
, 
tv2
, 
diff
;

1901 
tv
.
tv_£c
 = 0;

1902 
tv
.
tv_u£c
 = 500 * 1000;

1903 
r
 = 
	`evТt_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[0], 
EV_READ
, 
simґe_їad_cb
,

1904 
NULL
);

1905 
w
 = 
	`evТt_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[1], 
EV_WRITE
, 
simґe_wrЩe_cb
,

1906 
NULL
);

1907 
t
 = 
	`evtimФ_√w
(
d©a
->
ba£
, 
timeout_cb
, 
NULL
);

1909 
	`evutЮ_gСtimeofday
(&
now
, 
NULL
);

1910 
	`evТt_add
(
r
, 
NULL
);

1911 
	`evТt_add
(
t
, &
tv
);

1913 
	`Й_as£є
–
	`evТt_≥ndЪg
(
r
, 
EV_READ
, 
NULL
));

1914 
	`Й_as£є
(!
	`evТt_≥ndЪg
(
w
, 
EV_WRITE
, 
NULL
));

1915 
	`Й_as£є
(!
	`evТt_≥ndЪg
(
r
, 
EV_WRITE
, 
NULL
));

1916 
	`Й_as£є
–
	`evТt_≥ndЪg
(
r
, 
EV_READ
|
EV_WRITE
, 
NULL
));

1917 
	`Й_as£є
(!
	`evТt_≥ndЪg
(
r
, 
EV_TIMEOUT
, 
NULL
));

1918 
	`Й_as£є
–
	`evТt_≥ndЪg
(
t
, 
EV_TIMEOUT
, 
NULL
));

1919 
	`Й_as£є
–
	`evТt_≥ndЪg
(
t
, 
EV_TIMEOUT
, &
tv2
));

1921 
	`Й_as£є
(
	`evutЮ_timФcmp
(&
tv2
, &
now
, >));

1922 
	`evutЮ_timФadd
(&
now
, &
tv
, &tv);

1923 
	`evutЮ_timФsub
(&
tv2
, &
tv
, &
diff
);

1924 
	`Й_Ъt_Ё
(
diff
.
tv_£c
, ==, 0);

1925 
	`Й_Ъt_Ё
(
	`ѕbs
(
diff
.
tv_u£c
), <, 1000);

1927 
Тd
:

1928 iа(
r
) {

1929 
	`evТt_dЦ
(
r
);

1930 
	`evТt_дУ
(
r
);

1932 iа(
w
) {

1933 
	`evТt_dЦ
(
w
);

1934 
	`evТt_дУ
(
w
);

1936 iа(
t
) {

1937 
	`evТt_dЦ
(
t
);

1938 
	`evТt_дУ
(
t
);

1940 
	}
}

1942 #ifdeа
_EVENT_DISABLE_MM_REPLACEMENT


1944 
	$Л°_mm_funщiЏs
(*
ђg
)

1946 
	`_tЪyЛ°_£t_Л°_skЭ≥d
();

1947 
	}
}

1950 
	$check_dummy_mem_ok
(*
_mem
)

1952 *
mem
 = 
_mem
;

1953 
mem
 -= 16;

1954  !
	`memcmp
(
mem
, "{[<guardedram>]}", 16);

1955 
	}
}

1958 
	$dummy_mЃloc
(
size_t
 
Ћn
)

1960 *
mem
 = 
	`mЃloc
(
Ћn
+16);

1961 
	`memэy
(
mem
, "{[<guardedram>]}", 16);

1962  
mem
+16;

1963 
	}
}

1966 
	$dummy_їЃloc
(*
_mem
, 
size_t
 
Ћn
)

1968 *
mem
 = 
_mem
;

1969 iа(!
mem
)

1970  
	`dummy_mЃloc
(
Ћn
);

1971 
	`Й_w™t
(
	`check_dummy_mem_ok
(
_mem
));

1972 
mem
 -= 16;

1973 
mem
 = 
	`їЃloc
(mem, 
Ћn
+16);

1974  
mem
+16;

1975 
	}
}

1978 
	$dummy_дУ
(*
_mem
)

1980 *
mem
 = 
_mem
;

1981 
	`Й_w™t
(
	`check_dummy_mem_ok
(
_mem
));

1982 
mem
 -= 16;

1983 
	`дУ
(
mem
);

1984 
	}
}

1987 
	$Л°_mm_funщiЏs
(*
ђg
)

1989 
evТt_ba£
 *
b
 = 
NULL
;

1990 
evТt_cЏfig
 *
cfg
 = 
NULL
;

1991 
	`evТt_£t_mem_funщiЏs
(
dummy_mЃloc
, 
dummy_їЃloc
, 
dummy_дУ
);

1992 
cfg
 = 
	`evТt_cЏfig_√w
();

1993 
	`evТt_cЏfig_avoid_mСhod
(
cfg
, "Nonesuch");

1994 
b
 = 
	`evТt_ba£_√w_wЩh_cЏfig
(
cfg
);

1995 
	`Й_as£є
(
b
);

1996 
	`Й_as£є
(
	`check_dummy_mem_ok
(
b
));

1997 
Тd
:

1998 iа(
cfg
)

1999 
	`evТt_cЏfig_дУ
(
cfg
);

2000 iа(
b
)

2001 
	`evТt_ba£_дУ
(
b
);

2002 
	}
}

2006 
	$m™y_evТt_cb
(
fd
, 
evТt
, *
ђg
)

2008 *
€ќedp
 = 
ђg
;

2009 *
€ќedp
 += 1;

2010 
	}
}

2013 
	$Л°_m™y_evТts
(*
ђg
)

2017 
	#MANY
 64

	)

2019 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

2020 
evТt_ba£
 *
ba£
 = 
d©a
->base;

2021 
evutЮ_sockС_t
 
sock
[
MANY
];

2022 
evТt
 *
ev
[
MANY
];

2023 
€ќed
[
MANY
];

2024 
i
;

2026 
	`mem£t
(
sock
, 0xff, (sock));

2027 
	`mem£t
(
ev
, 0, (ev));

2028 
	`mem£t
(
€ќed
, 0, (called));

2030 
i
 = 0; i < 
MANY
; ++i) {

2034 
sock
[
i
] = 
	`sockС
(
AF_INET
, 
SOCK_DGRAM
, 0);

2035 
	`Й_as£є
(
sock
[
i
] >= 0);

2036 
€ќed
[
i
] = 0;

2037 
ev
[
i
] = 
	`evТt_√w
(
ba£
, 
sock
[i], 
EV_WRITE
, 
m™y_evТt_cb
,

2038 &
€ќed
[
i
]);

2039 
	`evТt_add
(
ev
[
i
], 
NULL
);

2042 
	`evТt_ba£_loЁ
(
ba£
, 
EVLOOP_NONBLOCK
);

2044 
i
 = 0; i < 
MANY
; ++i) {

2045 
	`Й_Ъt_Ё
(
€ќed
[
i
], ==, 1);

2048 
Тd
:

2049 
i
 = 0; i < 
MANY
; ++i) {

2050 iа(
ev
[
i
])

2051 
	`evТt_дУ
(
ev
[
i
]);

2052 iа(
sock
[
i
] >= 0)

2053 
	`EVUTIL_CLOSESOCKET
(
sock
[
i
]);

2055 #undeа
MANY


2056 
	}
}

2058 
Л°€£_t
 
	gmaЪ_Л°€£s
[] = {

2060 { "mСhods", 
Л°_mСhods
, 
TT_FORK
, 
NULL
, NULL },

2061 { "vФsiЏ", 
Л°_vФsiЏ
, 0, 
NULL
, NULL },

2062 
BASIC
(
ba£_г©uїs
, 
TT_FORK
|
TT_NO_LOGS
),

2063 { "ba£_ТvЬЏ", 
Л°_ba£_ТvЬЏ
, 
TT_FORK
, 
NULL
, NULL },

2065 
BASIC
(
evТt_ba£_√w
, 
TT_FORK
|
TT_NEED_SOCKETPAIR
),

2066 
BASIC
(
дУ_aщive_ba£
, 
TT_FORK
|
TT_NEED_SOCKETPAIR
),

2068 
BASIC
(
m™ЭuѕЛ_aщive_evТts
, 
TT_FORK
|
TT_NEED_BASE
),

2070 
BASIC
(
bad_assign
, 
TT_FORK
|
TT_NEED_BASE
|
TT_NO_LOGS
),

2073 
LEGACY
(
≥rsi°Тt_timeout
, 
TT_FORK
|
TT_NEED_BASE
),

2074 { "≥rsi°Тt_aщive_timeout", 
Л°_≥rsi°Тt_aщive_timeout
,

2075 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

2076 
LEGACY
(
іi№ЩЫs
, 
TT_FORK
|
TT_NEED_BASE
),

2077 { "commЏ_timeout", 
Л°_commЏ_timeout
, 
TT_FORK
|
TT_NEED_BASE
,

2078 &
basic_£tup
, 
NULL
 },

2081 
LEGACY
(
simґФЧd
, 
TT_ISOLATED
),

2082 
LEGACY
(
simґФЧd_mu…ЭЋ
, 
TT_ISOLATED
),

2083 
LEGACY
(
simґewrЩe
, 
TT_ISOLATED
),

2084 
LEGACY
(
mu…ЭЋ
, 
TT_ISOLATED
),

2085 
LEGACY
(
≥rsi°Тt
, 
TT_ISOLATED
),

2086 
LEGACY
(
combЪed
, 
TT_ISOLATED
),

2087 
LEGACY
(
simґСimeout
, 
TT_ISOLATED
),

2088 
LEGACY
(
loЁbїak
, 
TT_ISOLATED
),

2089 
LEGACY
(
loЁexЩ
, 
TT_ISOLATED
),

2090 
LEGACY
(
loЁexЩ_mu…ЭЋ
, 
TT_ISOLATED
),

2091 
LEGACY
(
nЏ≥rsi°_їadd
, 
TT_ISOLATED
),

2092 
LEGACY
(
mu…ЭЋ_evТts_f№_Іme_fd
, 
TT_ISOLATED
),

2093 
LEGACY
(
w™t_Џly_Џы
, 
TT_ISOLATED
),

2094 { "evТt_Џы", 
Л°_evТt_Џы
, 
TT_ISOLATED
, &
basic_£tup
, 
NULL
 },

2095 { "evТt_≥ndЪg", 
Л°_evТt_≥ndЪg
, 
TT_ISOLATED
, &
basic_£tup
,

2096 
NULL
 },

2097 { "mm_funщiЏs", 
Л°_mm_funщiЏs
, 
TT_FORK
, 
NULL
, NULL },

2098 
BASIC
(
m™y_evТts
, 
TT_ISOLATED
),

2100 #iвdeа
WIN32


2101 
LEGACY
(
f№k
, 
TT_ISOLATED
),

2103 
END_OF_TESTCASES


2106 
Л°€£_t
 
	gevПg_Л°€£s
[] = {

2107 { "Ъt", 
evПg_Ъt_Л°
, 
TT_FORK
, 
NULL
, NULL },

2108 { "fuzz", 
evПg_fuzz
, 
TT_FORK
, 
NULL
, NULL },

2109 { "ТcodЪg", 
evПg_Пg_ТcodЪg
, 
TT_FORK
, 
NULL
, NULL },

2110 { "≥ek", 
evПg_Л°_≥ek
, 0, 
NULL
, NULL },

2112 
END_OF_TESTCASES


2115 
Л°€£_t
 
	gsig«l_Л°€£s
[] = {

2116 #iвdeа
WIN32


2117 
LEGACY
(
simґesig«l
, 
TT_ISOLATED
),

2118 
LEGACY
(
mu…ЭЋsig«l
, 
TT_ISOLATED
),

2119 
LEGACY
(
immedЯЛsig«l
, 
TT_ISOLATED
),

2120 
LEGACY
(
sig«l_dЧќoc
, 
TT_ISOLATED
),

2121 
LEGACY
(
sig«l_pЭЦoss
, 
TT_ISOLATED
),

2122 
LEGACY
(
sig«l_swЩchba£
, 
TT_ISOLATED
),

2123 
LEGACY
(
sig«l_ї°№e
, 
TT_ISOLATED
),

2124 
LEGACY
(
sig«l_as£є
, 
TT_ISOLATED
),

2125 
LEGACY
(
sig«l_whЮe_іoыssЪg
, 
TT_ISOLATED
),

2127 
END_OF_TESTCASES


	@test/regress.gen.c

6 
	~<°dlib.h
>

7 
	~<°rЪg.h
>

8 
	~<as£є.h
>

9 
	~<evТt-cЏfig.h
>

10 
	~<evТt2/evТt.h
>

11 
	~<evТt2/bufгr.h
>

12 
	~<evТt2/Пg.h
>

14 #ifdeа
_EVENT___func__


15 
	#__func__
 
_EVENT___func__


	)

19 
	~"їgїss.gТ.h
"

21 
evТt_wђn
(cЏ° *
fmt
, ...);

22 
evТt_wђnx
(cЏ° *
fmt
, ...);

29 
msg_acыss_
 
	g__msg_ba£
 = {

30 
msg_дom_«me_assign
,

31 
msg_дom_«me_gС
,

32 
msg_to_«me_assign
,

33 
msg_to_«me_gС
,

34 
msg_©Пck_assign
,

35 
msg_©Пck_gС
,

36 
msg_run_assign
,

37 
msg_run_gС
,

38 
msg_run_add
,

41 
msg
 *

42 
	$msg_√w
()

44 
msg
 *
tmp
;

45 iа((
tmp
 = 
	`mЃloc
((
msg
))и=р
NULL
) {

46 
	`evТt_wђn
("%s: mЃloc", 
__func__
);

47  (
NULL
);

49 
tmp
->
ba£
 = &
__msg_ba£
;

51 
tmp
->
дom_«me_d©a
 = 
NULL
;

52 
tmp
->
дom_«me_£t
 = 0;

54 
tmp
->
to_«me_d©a
 = 
NULL
;

55 
tmp
->
to_«me_£t
 = 0;

57 
tmp
->
©Пck_d©a
 = 
NULL
;

58 
tmp
->
©Пck_£t
 = 0;

60 
tmp
->
run_d©a
 = 
NULL
;

61 
tmp
->
run_Ћngth
 = 0;

62 
tmp
->
run_num_Ѓlo€Лd
 = 0;

63 
tmp
->
run_£t
 = 0;

65  (
tmp
);

66 
	}
}

71 
run
*

72 
	$msg_run_add
(
msg
 *msg)

74 iа(++
msg
->
run_Ћngth
 >рmsg->
run_num_Ѓlo€Лd
) {

75 
tobe_Ѓlo€Лd
 = 
msg
->
run_num_Ѓlo€Лd
;

76 
run
** 
√w_d©a
 = 
NULL
;

77 
tobe_Ѓlo€Лd
 = !tobe_allocated ? 1 :Бobe_allocated << 1;

78 
√w_d©a
 = (
run
**и
	`їЃloc
(
msg
->
run_d©a
,

79 
tobe_Ѓlo€Лd
 * (
run
*));

80 iа(
√w_d©a
 =р
NULL
)

81 
Фr№
;

82 
msg
->
run_d©a
 = 
√w_d©a
;

83 
msg
->
run_num_Ѓlo€Лd
 = 
tobe_Ѓlo€Лd
;

85 
msg
->
run_d©a
[msg->
run_Ћngth
 - 1] = 
	`run_√w
();

86 iа(
msg
->
run_d©a
[msg->
run_Ћngth
 - 1] =р
NULL
)

87 
Фr№
;

88 
msg
->
run_£t
 = 1;

89  (
msg
->
run_d©a
[msg->
run_Ћngth
 - 1]);

90 
Фr№
:

91 --
msg
->
run_Ћngth
;

92  (
NULL
);

93 
	}
}

96 
	$msg_дom_«me_assign
(
msg
 *msg,

97 cЏ° * 
vЃue
)

99 iа(
msg
->
дom_«me_d©a
 !р
NULL
)

100 
	`дУ
(
msg
->
дom_«me_d©a
);

101 iа((
msg
->
дom_«me_d©a
 = 
	`°rdup
(
vЃue
)и=р
NULL
)

103 
msg
->
дom_«me_£t
 = 1;

105 
	}
}

108 
	$msg_to_«me_assign
(
msg
 *msg,

109 cЏ° * 
vЃue
)

111 iа(
msg
->
to_«me_d©a
 !р
NULL
)

112 
	`дУ
(
msg
->
to_«me_d©a
);

113 iа((
msg
->
to_«me_d©a
 = 
	`°rdup
(
vЃue
)и=р
NULL
)

115 
msg
->
to_«me_£t
 = 1;

117 
	}
}

120 
	$msg_©Пck_assign
(
msg
 *msg,

121 cЏ° 
kЮl
* 
vЃue
)

123 
evbufгr
 *
tmp
 = 
NULL
;

124 iа(
msg
->
©Пck_£t
) {

125 
	`kЮl_юЧr
(
msg
->
©Пck_d©a
);

126 
msg
->
©Пck_£t
 = 0;

128 
msg
->
©Пck_d©a
 = 
	`kЮl_√w
();

129 iа(
msg
->
©Пck_d©a
 =р
NULL
) {

130 
	`evТt_wђn
("%s: kЮl_√w()", 
__func__
);

131 
Фr№
;

134 iа((
tmp
 = 
	`evbufгr_√w
()и=р
NULL
) {

135 
	`evТt_wђn
("%s:Гvbufгr_√w()", 
__func__
);

136 
Фr№
;

138 
	`kЮl_mђshЃ
(
tmp
, 
vЃue
);

139 iа(
	`kЮl_unmђshЃ
(
msg
->
©Пck_d©a
, 
tmp
) == -1) {

140 
	`evТt_wђnx
("%s: kЮl_unmђshЃ", 
__func__
);

141 
Фr№
;

143 
msg
->
©Пck_£t
 = 1;

144 
	`evbufгr_дУ
(
tmp
);

146 
Фr№
:

147 iа(
tmp
 !р
NULL
)

148 
	`evbufгr_дУ
(
tmp
);

149 iа(
msg
->
©Пck_d©a
 !р
NULL
) {

150 
	`kЮl_дУ
(
msg
->
©Пck_d©a
);

151 
msg
->
©Пck_d©a
 = 
NULL
;

154 
	}
}

157 
	$msg_run_assign
(
msg
 *msg, 
off
,

158 cЏ° 
run
* 
vЃue
)

160 iа(!
msg
->
run_£t
 || 
off
 < 0 || ofа>рmsg->
run_Ћngth
)

164 
had_Фr№
 = 0;

165 
evbufгr
 *
tmp
 = 
NULL
;

166 
	`run_юЧr
(
msg
->
run_d©a
[
off
]);

167 iа((
tmp
 = 
	`evbufгr_√w
()и=р
NULL
) {

168 
	`evТt_wђn
("%s:Гvbufгr_√w()", 
__func__
);

169 
had_Фr№
 = 1;

170 
dЏe
;

172 
	`run_mђshЃ
(
tmp
, 
vЃue
);

173 iа(
	`run_unmђshЃ
(
msg
->
run_d©a
[
off
], 
tmp
) == -1) {

174 
	`evТt_wђnx
("%s:Дun_unmђshЃ", 
__func__
);

175 
had_Фr№
 = 1;

176 
dЏe
;

178 
dЏe
:iа(
tmp
 !р
NULL
)

179 
	`evbufгr_дУ
(
tmp
);

180 iа(
had_Фr№
) {

181 
	`run_юЧr
(
msg
->
run_d©a
[
off
]);

186 
	}
}

189 
	$msg_дom_«me_gС
(
msg
 *msg, * *
vЃue
)

191 iа(
msg
->
дom_«me_£t
 != 1)

193 *
vЃue
 = 
msg
->
дom_«me_d©a
;

195 
	}
}

198 
	$msg_to_«me_gС
(
msg
 *msg, * *
vЃue
)

200 iа(
msg
->
to_«me_£t
 != 1)

202 *
vЃue
 = 
msg
->
to_«me_d©a
;

204 
	}
}

207 
	$msg_©Пck_gС
(
msg
 *msg, 
kЮl
* *
vЃue
)

209 iа(
msg
->
©Пck_£t
 != 1) {

210 
msg
->
©Пck_d©a
 = 
	`kЮl_√w
();

211 iа(
msg
->
©Пck_d©a
 =р
NULL
)

213 
msg
->
©Пck_£t
 = 1;

215 *
vЃue
 = 
msg
->
©Пck_d©a
;

217 
	}
}

220 
	$msg_run_gС
(
msg
 *msg, 
off£t
,

221 
run
* *
vЃue
)

223 iа(!
msg
->
run_£t
 || 
off£t
 < 0 || off£И>рmsg->
run_Ћngth
)

225 *
vЃue
 = 
msg
->
run_d©a
[
off£t
];

227 
	}
}

230 
	$msg_юЧr
(
msg
 *
tmp
)

232 iа(
tmp
->
дom_«me_£t
 == 1) {

233 
	`дУ
(
tmp
->
дom_«me_d©a
);

234 
tmp
->
дom_«me_d©a
 = 
NULL
;

235 
tmp
->
дom_«me_£t
 = 0;

237 iа(
tmp
->
to_«me_£t
 == 1) {

238 
	`дУ
(
tmp
->
to_«me_d©a
);

239 
tmp
->
to_«me_d©a
 = 
NULL
;

240 
tmp
->
to_«me_£t
 = 0;

242 iа(
tmp
->
©Пck_£t
 == 1) {

243 
	`kЮl_дУ
(
tmp
->
©Пck_d©a
);

244 
tmp
->
©Пck_d©a
 = 
NULL
;

245 
tmp
->
©Пck_£t
 = 0;

247 iа(
tmp
->
run_£t
 == 1) {

248 
i
;

249 
i
 = 0; i < 
tmp
->
run_Ћngth
; ++i) {

250 
	`run_дУ
(
tmp
->
run_d©a
[
i
]);

252 
	`дУ
(
tmp
->
run_d©a
);

253 
tmp
->
run_d©a
 = 
NULL
;

254 
tmp
->
run_£t
 = 0;

255 
tmp
->
run_Ћngth
 = 0;

256 
tmp
->
run_num_Ѓlo€Лd
 = 0;

258 
	}
}

261 
	$msg_дУ
(
msg
 *
tmp
)

263 iа(
tmp
->
дom_«me_d©a
 !р
NULL
)

264 
	`дУ
 (
tmp
->
дom_«me_d©a
);

265 iа(
tmp
->
to_«me_d©a
 !р
NULL
)

266 
	`дУ
 (
tmp
->
to_«me_d©a
);

267 iа(
tmp
->
©Пck_d©a
 !р
NULL
)

268 
	`kЮl_дУ
(
tmp
->
©Пck_d©a
);

269 iа(
tmp
->
run_£t
 == 1) {

270 
i
;

271 
i
 = 0; i < 
tmp
->
run_Ћngth
; ++i) {

272 
	`run_дУ
(
tmp
->
run_d©a
[
i
]);

274 
	`дУ
(
tmp
->
run_d©a
);

275 
tmp
->
run_d©a
 = 
NULL
;

276 
tmp
->
run_£t
 = 0;

277 
tmp
->
run_Ћngth
 = 0;

278 
tmp
->
run_num_Ѓlo€Лd
 = 0;

280 
	`дУ
(
tmp
->
run_d©a
);

281 
	`дУ
(
tmp
);

282 
	}
}

285 
	$msg_mђshЃ
(
evbufгr
 *
evbuf
, cЏ° 
msg
 *
tmp
){

286 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
MSG_FROM_NAME
, 
tmp
->
дom_«me_d©a
);

287 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
MSG_TO_NAME
, 
tmp
->
to_«me_d©a
);

288 iа(
tmp
->
©Пck_£t
) {

289 
	`evПg_mђshЃ_kЮl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©Пck_d©a
);

291 iа(
tmp
->
run_£t
) {

293 
i
;

294 
i
 = 0; i < 
tmp
->
run_Ћngth
; ++i) {

295 
	`evПg_mђshЃ_run
(
evbuf
, 
MSG_RUN
, 
tmp
->
run_d©a
[
i
]);

299 
	}
}

302 
	$msg_unmђshЃ
(
msg
 *
tmp
, 
evbufгr
 *
evbuf
)

304 
ev_uЪt32_t
 
Пg
;

305 
	`evbufгr_gС_Ћngth
(
evbuf
) > 0) {

306 iа(
	`evПg_≥ek
(
evbuf
, &
Пg
) == -1)

308 
Пg
) {

310 
MSG_FROM_NAME
:

312 iа(
tmp
->
дom_«me_£t
)

314 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
MSG_FROM_NAME
, &
tmp
->
дom_«me_d©a
) == -1) {

315 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ from_«me", 
__func__
);

318 
tmp
->
дom_«me_£t
 = 1;

321 
MSG_TO_NAME
:

323 iа(
tmp
->
to_«me_£t
)

325 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
MSG_TO_NAME
, &
tmp
->
to_«me_d©a
) == -1) {

326 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃБo_«me", 
__func__
);

329 
tmp
->
to_«me_£t
 = 1;

332 
MSG_ATTACK
:

334 iа(
tmp
->
©Пck_£t
)

336 
tmp
->
©Пck_d©a
 = 
	`kЮl_√w
();

337 iа(
tmp
->
©Пck_d©a
 =р
NULL
)

339 iа(
	`evПg_unmђshЃ_kЮl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©Пck_d©a
) == -1) {

340 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃЗЙack", 
__func__
);

343 
tmp
->
©Пck_£t
 = 1;

346 
MSG_RUN
:

348 iа(
	`msg_run_add
(
tmp
и=р
NULL
)

350 --
tmp
->
run_Ћngth
;

351 
tmp
->
run_d©a
[tmp->
run_Ћngth
] = 
	`run_√w
();

352 iа(
tmp
->
run_d©a
[tmp->
run_Ћngth
] =р
NULL
)

354 iа(
	`evПg_unmђshЃ_run
(
evbuf
, 
MSG_RUN
, 
tmp
->
run_d©a
[tmp->
run_Ћngth
]) == -1) {

355 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃДun", 
__func__
);

358 ++
tmp
->
run_Ћngth
;

359 
tmp
->
run_£t
 = 1;

367 iа(
	`msg_comґСe
(
tmp
) == -1)

370 
	}
}

373 
	$msg_comґСe
(
msg
 *msg)

375 iа(!
msg
->
дom_«me_£t
)

377 iа(!
msg
->
to_«me_£t
)

379 iа(
msg
->
©Пck_£t
 && 
	`kЮl_comґСe
(msg->
©Пck_d©a
) == -1)

382 
i
;

383 
i
 = 0; i < 
msg
->
run_Ћngth
; ++i) {

384 iа(
msg
->
run_£t
 && 
	`run_comґСe
(msg->
run_d©a
[
i
]) == -1)

389 
	}
}

392 
	$evПg_unmђshЃ_msg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
, 
msg
 *msg)

394 
ev_uЪt32_t
 
Пg
;

395 
їs
 = -1;

397 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

399 iа(
	`evПg_unmђshЃ
(
evbuf
, &
Пg
, 
tmp
и=р-1 ||Бag !р
√ed_Пg
)

400 
Фr№
;

402 iа(
	`msg_unmђshЃ
(
msg
, 
tmp
) == -1)

403 
Фr№
;

405 
їs
 = 0;

407 
Фr№
:

408 
	`evbufгr_дУ
(
tmp
);

409  (
їs
);

410 
	}
}

413 
	$evПg_mђshЃ_msg
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
, cЏ° 
msg
 *msg)

415 
evbufгr
 *
_buf
 = 
	`evbufгr_√w
();

416 
	`as£є
(
_buf
 !р
NULL
);

417 
	`msg_mђshЃ
(
_buf
, 
msg
);

418 
	`evПg_mђshЃ_bufгr
(
evbuf
, 
Пg
, 
_buf
);

419 
	`evbufгr_дУ
(
_buf
);

420 
	}
}

426 
kЮl_acыss_
 
	g__kЮl_ba£
 = {

427 
kЮl_wЧpЏ_assign
,

428 
kЮl_wЧpЏ_gС
,

429 
kЮl_aщiЏ_assign
,

430 
kЮl_aщiЏ_gС
,

431 
kЮl_how_oбТ_assign
,

432 
kЮl_how_oбТ_gС
,

433 
kЮl_how_oбТ_add
,

436 
kЮl
 *

437 
	$kЮl_√w
()

439 
kЮl
 *
tmp
;

440 iа((
tmp
 = 
	`mЃloc
((
kЮl
))и=р
NULL
) {

441 
	`evТt_wђn
("%s: mЃloc", 
__func__
);

442  (
NULL
);

444 
tmp
->
ba£
 = &
__kЮl_ba£
;

446 
tmp
->
wЧpЏ_d©a
 = 
NULL
;

447 
tmp
->
wЧpЏ_£t
 = 0;

449 
tmp
->
aщiЏ_d©a
 = 
NULL
;

450 
tmp
->
aщiЏ_£t
 = 0;

452 
tmp
->
how_oбТ_d©a
 = 
NULL
;

453 
tmp
->
how_oбТ_Ћngth
 = 0;

454 
tmp
->
how_oбТ_num_Ѓlo€Лd
 = 0;

455 
tmp
->
how_oбТ_£t
 = 0;

457  (
tmp
);

458 
	}
}

462 
ev_uЪt32_t
 *

463 
	$kЮl_how_oбТ_add
(
kЮl
 *
msg
, cЏ° 
ev_uЪt32_t
 
vЃue
)

465 iа(++
msg
->
how_oбТ_Ћngth
 >рmsg->
how_oбТ_num_Ѓlo€Лd
) {

466 
tobe_Ѓlo€Лd
 = 
msg
->
how_oбТ_num_Ѓlo€Лd
;

467 
ev_uЪt32_t
* 
√w_d©a
 = 
NULL
;

468 
tobe_Ѓlo€Лd
 = !tobe_allocated ? 1 :Бobe_allocated << 1;

469 
√w_d©a
 = (
ev_uЪt32_t
*и
	`їЃloc
(
msg
->
how_oбТ_d©a
,

470 
tobe_Ѓlo€Лd
 * (
ev_uЪt32_t
));

471 iа(
√w_d©a
 =р
NULL
)

472 
Фr№
;

473 
msg
->
how_oбТ_d©a
 = 
√w_d©a
;

474 
msg
->
how_oбТ_num_Ѓlo€Лd
 = 
tobe_Ѓlo€Лd
;

476 
msg
->
how_oбТ_d©a
[msg->
how_oбТ_Ћngth
 - 1] = 
vЃue
;

477 
msg
->
how_oбТ_£t
 = 1;

478  &(
msg
->
how_oбТ_d©a
[msg->
how_oбТ_Ћngth
 - 1]);

479 
Фr№
:

480 --
msg
->
how_oбТ_Ћngth
;

481  (
NULL
);

482 
	}
}

485 
	$kЮl_wЧpЏ_assign
(
kЮl
 *
msg
,

486 cЏ° * 
vЃue
)

488 iа(
msg
->
wЧpЏ_d©a
 !р
NULL
)

489 
	`дУ
(
msg
->
wЧpЏ_d©a
);

490 iа((
msg
->
wЧpЏ_d©a
 = 
	`°rdup
(
vЃue
)и=р
NULL
)

492 
msg
->
wЧpЏ_£t
 = 1;

494 
	}
}

497 
	$kЮl_aщiЏ_assign
(
kЮl
 *
msg
,

498 cЏ° * 
vЃue
)

500 iа(
msg
->
aщiЏ_d©a
 !р
NULL
)

501 
	`дУ
(
msg
->
aщiЏ_d©a
);

502 iа((
msg
->
aщiЏ_d©a
 = 
	`°rdup
(
vЃue
)и=р
NULL
)

504 
msg
->
aщiЏ_£t
 = 1;

506 
	}
}

509 
	$kЮl_how_oбТ_assign
(
kЮl
 *
msg
, 
off
,

510 cЏ° 
ev_uЪt32_t
 
vЃue
)

512 iа(!
msg
->
how_oбТ_£t
 || 
off
 < 0 || ofа>рmsg->
how_oбТ_Ћngth
)

516 
msg
->
how_oбТ_d©a
[
off
] = 
vЃue
;

519 
	}
}

522 
	$kЮl_wЧpЏ_gС
(
kЮl
 *
msg
, * *
vЃue
)

524 iа(
msg
->
wЧpЏ_£t
 != 1)

526 *
vЃue
 = 
msg
->
wЧpЏ_d©a
;

528 
	}
}

531 
	$kЮl_aщiЏ_gС
(
kЮl
 *
msg
, * *
vЃue
)

533 iа(
msg
->
aщiЏ_£t
 != 1)

535 *
vЃue
 = 
msg
->
aщiЏ_d©a
;

537 
	}
}

540 
	$kЮl_how_oбТ_gС
(
kЮl
 *
msg
, 
off£t
,

541 
ev_uЪt32_t
 *
vЃue
)

543 iа(!
msg
->
how_oбТ_£t
 || 
off£t
 < 0 || off£И>рmsg->
how_oбТ_Ћngth
)

545 *
vЃue
 = 
msg
->
how_oбТ_d©a
[
off£t
];

547 
	}
}

550 
	$kЮl_юЧr
(
kЮl
 *
tmp
)

552 iа(
tmp
->
wЧpЏ_£t
 == 1) {

553 
	`дУ
(
tmp
->
wЧpЏ_d©a
);

554 
tmp
->
wЧpЏ_d©a
 = 
NULL
;

555 
tmp
->
wЧpЏ_£t
 = 0;

557 iа(
tmp
->
aщiЏ_£t
 == 1) {

558 
	`дУ
(
tmp
->
aщiЏ_d©a
);

559 
tmp
->
aщiЏ_d©a
 = 
NULL
;

560 
tmp
->
aщiЏ_£t
 = 0;

562 iа(
tmp
->
how_oбТ_£t
 == 1) {

563 
	`дУ
(
tmp
->
how_oбТ_d©a
);

564 
tmp
->
how_oбТ_d©a
 = 
NULL
;

565 
tmp
->
how_oбТ_£t
 = 0;

566 
tmp
->
how_oбТ_Ћngth
 = 0;

567 
tmp
->
how_oбТ_num_Ѓlo€Лd
 = 0;

569 
	}
}

572 
	$kЮl_дУ
(
kЮl
 *
tmp
)

574 iа(
tmp
->
wЧpЏ_d©a
 !р
NULL
)

575 
	`дУ
 (
tmp
->
wЧpЏ_d©a
);

576 iа(
tmp
->
aщiЏ_d©a
 !р
NULL
)

577 
	`дУ
 (
tmp
->
aщiЏ_d©a
);

578 iа(
tmp
->
how_oбТ_£t
 == 1) {

579 
	`дУ
(
tmp
->
how_oбТ_d©a
);

580 
tmp
->
how_oбТ_d©a
 = 
NULL
;

581 
tmp
->
how_oбТ_£t
 = 0;

582 
tmp
->
how_oбТ_Ћngth
 = 0;

583 
tmp
->
how_oбТ_num_Ѓlo€Лd
 = 0;

585 
	`дУ
(
tmp
->
how_oбТ_d©a
);

586 
	`дУ
(
tmp
);

587 
	}
}

590 
	$kЮl_mђshЃ
(
evbufгr
 *
evbuf
, cЏ° 
kЮl
 *
tmp
){

591 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
KILL_WEAPON
, 
tmp
->
wЧpЏ_d©a
);

592 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
KILL_ACTION
, 
tmp
->
aщiЏ_d©a
);

593 iа(
tmp
->
how_oбТ_£t
) {

595 
i
;

596 
i
 = 0; i < 
tmp
->
how_oбТ_Ћngth
; ++i) {

597 
	`evПg_mђshЃ_Ъt
(
evbuf
, 
KILL_HOW_OFTEN
, 
tmp
->
how_oбТ_d©a
[
i
]);

601 
	}
}

604 
	$kЮl_unmђshЃ
(
kЮl
 *
tmp
, 
evbufгr
 *
evbuf
)

606 
ev_uЪt32_t
 
Пg
;

607 
	`evbufгr_gС_Ћngth
(
evbuf
) > 0) {

608 iа(
	`evПg_≥ek
(
evbuf
, &
Пg
) == -1)

610 
Пg
) {

612 
KILL_WEAPON
:

614 iа(
tmp
->
wЧpЏ_£t
)

616 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
KILL_WEAPON
, &
tmp
->
wЧpЏ_d©a
) == -1) {

617 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ wЧpЏ", 
__func__
);

620 
tmp
->
wЧpЏ_£t
 = 1;

623 
KILL_ACTION
:

625 iа(
tmp
->
aщiЏ_£t
)

627 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
KILL_ACTION
, &
tmp
->
aщiЏ_d©a
) == -1) {

628 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃЗщiЏ", 
__func__
);

631 
tmp
->
aщiЏ_£t
 = 1;

634 
KILL_HOW_OFTEN
:

636 iа(
	`kЮl_how_oбТ_add
(
tmp
, 0и=р
NULL
)

638 --
tmp
->
how_oбТ_Ћngth
;

639 iа(
	`evПg_unmђshЃ_Ъt
(
evbuf
, 
KILL_HOW_OFTEN
, &
tmp
->
how_oбТ_d©a
[tmp->
how_oбТ_Ћngth
]) == -1) {

640 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ how_oбТ", 
__func__
);

643 ++
tmp
->
how_oбТ_Ћngth
;

644 
tmp
->
how_oбТ_£t
 = 1;

652 iа(
	`kЮl_comґСe
(
tmp
) == -1)

655 
	}
}

658 
	$kЮl_comґСe
(
kЮl
 *
msg
)

660 iа(!
msg
->
wЧpЏ_£t
)

662 iа(!
msg
->
aщiЏ_£t
)

665 
	}
}

668 
	$evПg_unmђshЃ_kЮl
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
, 
kЮl
 *
msg
)

670 
ev_uЪt32_t
 
Пg
;

671 
їs
 = -1;

673 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

675 iа(
	`evПg_unmђshЃ
(
evbuf
, &
Пg
, 
tmp
и=р-1 ||Бag !р
√ed_Пg
)

676 
Фr№
;

678 iа(
	`kЮl_unmђshЃ
(
msg
, 
tmp
) == -1)

679 
Фr№
;

681 
їs
 = 0;

683 
Фr№
:

684 
	`evbufгr_дУ
(
tmp
);

685  (
їs
);

686 
	}
}

689 
	$evПg_mђshЃ_kЮl
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
, cЏ° 
kЮl
 *
msg
)

691 
evbufгr
 *
_buf
 = 
	`evbufгr_√w
();

692 
	`as£є
(
_buf
 !р
NULL
);

693 
	`kЮl_mђshЃ
(
_buf
, 
msg
);

694 
	`evПg_mђshЃ_bufгr
(
evbuf
, 
Пg
, 
_buf
);

695 
	`evbufгr_дУ
(
_buf
);

696 
	}
}

702 
run_acыss_
 
	g__run_ba£
 = {

703 
run_how_assign
,

704 
run_how_gС
,

705 
run_some_byЛs_assign
,

706 
run_some_byЛs_gС
,

707 
run_fixed_byЛs_assign
,

708 
run_fixed_byЛs_gС
,

709 
run_nўes_assign
,

710 
run_nўes_gС
,

711 
run_nўes_add
,

712 
run_ѕrge_numbФ_assign
,

713 
run_ѕrge_numbФ_gС
,

714 
run_ўhФ_numbФs_assign
,

715 
run_ўhФ_numbФs_gС
,

716 
run_ўhФ_numbФs_add
,

719 
run
 *

720 
	$run_√w
()

722 
run
 *
tmp
;

723 iа((
tmp
 = 
	`mЃloc
((
run
))и=р
NULL
) {

724 
	`evТt_wђn
("%s: mЃloc", 
__func__
);

725  (
NULL
);

727 
tmp
->
ba£
 = &
__run_ba£
;

729 
tmp
->
how_d©a
 = 
NULL
;

730 
tmp
->
how_£t
 = 0;

732 
tmp
->
some_byЛs_d©a
 = 
NULL
;

733 
tmp
->
some_byЛs_Ћngth
 = 0;

734 
tmp
->
some_byЛs_£t
 = 0;

736 
	`mem£t
(
tmp
->
fixed_byЛs_d©a
, 0, (tmp->fixed_bytes_data));

737 
tmp
->
fixed_byЛs_£t
 = 0;

739 
tmp
->
nўes_d©a
 = 
NULL
;

740 
tmp
->
nўes_Ћngth
 = 0;

741 
tmp
->
nўes_num_Ѓlo€Лd
 = 0;

742 
tmp
->
nўes_£t
 = 0;

744 
tmp
->
ѕrge_numbФ_d©a
 = 0;

745 
tmp
->
ѕrge_numbФ_£t
 = 0;

747 
tmp
->
ўhФ_numbФs_d©a
 = 
NULL
;

748 
tmp
->
ўhФ_numbФs_Ћngth
 = 0;

749 
tmp
->
ўhФ_numbФs_num_Ѓlo€Лd
 = 0;

750 
tmp
->
ўhФ_numbФs_£t
 = 0;

752  (
tmp
);

753 
	}
}

759 
	$run_nўes_add
(
run
 *
msg
, cЏ° * 
vЃue
)

761 iа(++
msg
->
nўes_Ћngth
 >рmsg->
nўes_num_Ѓlo€Лd
) {

762 
tobe_Ѓlo€Лd
 = 
msg
->
nўes_num_Ѓlo€Лd
;

763 ** 
√w_d©a
 = 
NULL
;

764 
tobe_Ѓlo€Лd
 = !tobe_allocated ? 1 :Бobe_allocated << 1;

765 
√w_d©a
 = (**и
	`їЃloc
(
msg
->
nўes_d©a
,

766 
tobe_Ѓlo€Лd
 * (*));

767 iа(
√w_d©a
 =р
NULL
)

768 
Фr№
;

769 
msg
->
nўes_d©a
 = 
√w_d©a
;

770 
msg
->
nўes_num_Ѓlo€Лd
 = 
tobe_Ѓlo€Лd
;

772 iа(
vЃue
 !р
NULL
) {

773 
msg
->
nўes_d©a
[msg->
nўes_Ћngth
 - 1] = 
	`°rdup
(
vЃue
);

774 iа(
msg
->
nўes_d©a
[msg->
nўes_Ћngth
 - 1] =р
NULL
) {

775 
Фr№
;

778 
msg
->
nўes_d©a
[msg->
nўes_Ћngth
 - 1] = 
NULL
;

780 
msg
->
nўes_£t
 = 1;

781  &(
msg
->
nўes_d©a
[msg->
nўes_Ћngth
 - 1]);

782 
Фr№
:

783 --
msg
->
nўes_Ћngth
;

784  (
NULL
);

785 
	}
}

788 
ev_uЪt32_t
 *

789 
	$run_ўhФ_numbФs_add
(
run
 *
msg
, cЏ° 
ev_uЪt32_t
 
vЃue
)

791 iа(++
msg
->
ўhФ_numbФs_Ћngth
 >рmsg->
ўhФ_numbФs_num_Ѓlo€Лd
) {

792 
tobe_Ѓlo€Лd
 = 
msg
->
ўhФ_numbФs_num_Ѓlo€Лd
;

793 
ev_uЪt32_t
* 
√w_d©a
 = 
NULL
;

794 
tobe_Ѓlo€Лd
 = !tobe_allocated ? 1 :Бobe_allocated << 1;

795 
√w_d©a
 = (
ev_uЪt32_t
*и
	`їЃloc
(
msg
->
ўhФ_numbФs_d©a
,

796 
tobe_Ѓlo€Лd
 * (
ev_uЪt32_t
));

797 iа(
√w_d©a
 =р
NULL
)

798 
Фr№
;

799 
msg
->
ўhФ_numbФs_d©a
 = 
√w_d©a
;

800 
msg
->
ўhФ_numbФs_num_Ѓlo€Лd
 = 
tobe_Ѓlo€Лd
;

802 
msg
->
ўhФ_numbФs_d©a
[msg->
ўhФ_numbФs_Ћngth
 - 1] = 
vЃue
;

803 
msg
->
ўhФ_numbФs_£t
 = 1;

804  &(
msg
->
ўhФ_numbФs_d©a
[msg->
ўhФ_numbФs_Ћngth
 - 1]);

805 
Фr№
:

806 --
msg
->
ўhФ_numbФs_Ћngth
;

807  (
NULL
);

808 
	}
}

811 
	$run_how_assign
(
run
 *
msg
,

812 cЏ° * 
vЃue
)

814 iа(
msg
->
how_d©a
 !р
NULL
)

815 
	`дУ
(
msg
->
how_d©a
);

816 iа((
msg
->
how_d©a
 = 
	`°rdup
(
vЃue
)и=р
NULL
)

818 
msg
->
how_£t
 = 1;

820 
	}
}

823 
	$run_some_byЛs_assign
(
run
 *
msg
, cЏ° 
ev_uЪt8_t
 * 
vЃue
, 
ev_uЪt32_t
 
Ћn
)

825 iа(
msg
->
some_byЛs_d©a
 !р
NULL
)

826 
	`дУ
 (
msg
->
some_byЛs_d©a
);

827 
msg
->
some_byЛs_d©a
 = 
	`mЃloc
(
Ћn
);

828 iа(
msg
->
some_byЛs_d©a
 =р
NULL
)

830 
msg
->
some_byЛs_£t
 = 1;

831 
msg
->
some_byЛs_Ћngth
 = 
Ћn
;

832 
	`memэy
(
msg
->
some_byЛs_d©a
, 
vЃue
, 
Ћn
);

834 
	}
}

837 
	$run_fixed_byЛs_assign
(
run
 *
msg
, cЏ° 
ev_uЪt8_t
 *
vЃue
)

839 
msg
->
fixed_byЛs_£t
 = 1;

840 
	`memэy
(
msg
->
fixed_byЛs_d©a
, 
vЃue
, 24);

842 
	}
}

845 
	$run_nўes_assign
(
run
 *
msg
, 
off
,

846 cЏ° * 
vЃue
)

848 iа(!
msg
->
nўes_£t
 || 
off
 < 0 || ofа>рmsg->
nўes_Ћngth
)

852 iа(
msg
->
nўes_d©a
[
off
] !р
NULL
)

853 
	`дУ
(
msg
->
nўes_d©a
[
off
]);

854 
msg
->
nўes_d©a
[
off
] = 
	`°rdup
(
vЃue
);

855 iа(
msg
->
nўes_d©a
[
off
] =р
NULL
) {

856 
	`evТt_wђnx
("%s: sМdup", 
__func__
);

861 
	}
}

864 
	$run_ѕrge_numbФ_assign
(
run
 *
msg
, cЏ° 
ev_uЪt64_t
 
vЃue
)

866 
msg
->
ѕrge_numbФ_£t
 = 1;

867 
msg
->
ѕrge_numbФ_d©a
 = 
vЃue
;

869 
	}
}

872 
	$run_ўhФ_numbФs_assign
(
run
 *
msg
, 
off
,

873 cЏ° 
ev_uЪt32_t
 
vЃue
)

875 iа(!
msg
->
ўhФ_numbФs_£t
 || 
off
 < 0 || ofа>рmsg->
ўhФ_numbФs_Ћngth
)

879 
msg
->
ўhФ_numbФs_d©a
[
off
] = 
vЃue
;

882 
	}
}

885 
	$run_how_gС
(
run
 *
msg
, * *
vЃue
)

887 iа(
msg
->
how_£t
 != 1)

889 *
vЃue
 = 
msg
->
how_d©a
;

891 
	}
}

894 
	$run_some_byЛs_gС
(
run
 *
msg
, 
ev_uЪt8_t
 * *
vЃue
, 
ev_uЪt32_t
 *
ґТ
)

896 iа(
msg
->
some_byЛs_£t
 != 1)

898 *
vЃue
 = 
msg
->
some_byЛs_d©a
;

899 *
ґТ
 = 
msg
->
some_byЛs_Ћngth
;

901 
	}
}

904 
	$run_fixed_byЛs_gС
(
run
 *
msg
, 
ev_uЪt8_t
 **
vЃue
)

906 iа(
msg
->
fixed_byЛs_£t
 != 1)

908 *
vЃue
 = 
msg
->
fixed_byЛs_d©a
;

910 
	}
}

913 
	$run_nўes_gС
(
run
 *
msg
, 
off£t
,

914 * *
vЃue
)

916 iа(!
msg
->
nўes_£t
 || 
off£t
 < 0 || off£И>рmsg->
nўes_Ћngth
)

918 *
vЃue
 = 
msg
->
nўes_d©a
[
off£t
];

920 
	}
}

923 
	$run_ѕrge_numbФ_gС
(
run
 *
msg
, 
ev_uЪt64_t
 *
vЃue
)

925 iа(
msg
->
ѕrge_numbФ_£t
 != 1)

927 *
vЃue
 = 
msg
->
ѕrge_numbФ_d©a
;

929 
	}
}

932 
	$run_ўhФ_numbФs_gС
(
run
 *
msg
, 
off£t
,

933 
ev_uЪt32_t
 *
vЃue
)

935 iа(!
msg
->
ўhФ_numbФs_£t
 || 
off£t
 < 0 || off£И>рmsg->
ўhФ_numbФs_Ћngth
)

937 *
vЃue
 = 
msg
->
ўhФ_numbФs_d©a
[
off£t
];

939 
	}
}

942 
	$run_юЧr
(
run
 *
tmp
)

944 iа(
tmp
->
how_£t
 == 1) {

945 
	`дУ
(
tmp
->
how_d©a
);

946 
tmp
->
how_d©a
 = 
NULL
;

947 
tmp
->
how_£t
 = 0;

949 iа(
tmp
->
some_byЛs_£t
 == 1) {

950 
	`дУ
 (
tmp
->
some_byЛs_d©a
);

951 
tmp
->
some_byЛs_d©a
 = 
NULL
;

952 
tmp
->
some_byЛs_Ћngth
 = 0;

953 
tmp
->
some_byЛs_£t
 = 0;

955 
tmp
->
fixed_byЛs_£t
 = 0;

956 
	`mem£t
(
tmp
->
fixed_byЛs_d©a
, 0, (tmp->fixed_bytes_data));

957 iа(
tmp
->
nўes_£t
 == 1) {

958 
i
;

959 
i
 = 0; i < 
tmp
->
nўes_Ћngth
; ++i) {

960 iа(
tmp
->
nўes_d©a
[
i
] !р
NULL
и
	`дУ
(tmp->notes_data[i]);

962 
	`дУ
(
tmp
->
nўes_d©a
);

963 
tmp
->
nўes_d©a
 = 
NULL
;

964 
tmp
->
nўes_£t
 = 0;

965 
tmp
->
nўes_Ћngth
 = 0;

966 
tmp
->
nўes_num_Ѓlo€Лd
 = 0;

968 
tmp
->
ѕrge_numbФ_£t
 = 0;

969 iа(
tmp
->
ўhФ_numbФs_£t
 == 1) {

970 
	`дУ
(
tmp
->
ўhФ_numbФs_d©a
);

971 
tmp
->
ўhФ_numbФs_d©a
 = 
NULL
;

972 
tmp
->
ўhФ_numbФs_£t
 = 0;

973 
tmp
->
ўhФ_numbФs_Ћngth
 = 0;

974 
tmp
->
ўhФ_numbФs_num_Ѓlo€Лd
 = 0;

976 
	}
}

979 
	$run_дУ
(
run
 *
tmp
)

981 iа(
tmp
->
how_d©a
 !р
NULL
)

982 
	`дУ
 (
tmp
->
how_d©a
);

983 iа(
tmp
->
some_byЛs_d©a
 !р
NULL
)

984 
	`дУ
(
tmp
->
some_byЛs_d©a
);

985 iа(
tmp
->
nўes_£t
 == 1) {

986 
i
;

987 
i
 = 0; i < 
tmp
->
nўes_Ћngth
; ++i) {

988 iа(
tmp
->
nўes_d©a
[
i
] !р
NULL
и
	`дУ
(tmp->notes_data[i]);

990 
	`дУ
(
tmp
->
nўes_d©a
);

991 
tmp
->
nўes_d©a
 = 
NULL
;

992 
tmp
->
nўes_£t
 = 0;

993 
tmp
->
nўes_Ћngth
 = 0;

994 
tmp
->
nўes_num_Ѓlo€Лd
 = 0;

996 
	`дУ
(
tmp
->
nўes_d©a
);

997 iа(
tmp
->
ўhФ_numbФs_£t
 == 1) {

998 
	`дУ
(
tmp
->
ўhФ_numbФs_d©a
);

999 
tmp
->
ўhФ_numbФs_d©a
 = 
NULL
;

1000 
tmp
->
ўhФ_numbФs_£t
 = 0;

1001 
tmp
->
ўhФ_numbФs_Ћngth
 = 0;

1002 
tmp
->
ўhФ_numbФs_num_Ѓlo€Лd
 = 0;

1004 
	`дУ
(
tmp
->
ўhФ_numbФs_d©a
);

1005 
	`дУ
(
tmp
);

1006 
	}
}

1009 
	$run_mђshЃ
(
evbufгr
 *
evbuf
, cЏ° 
run
 *
tmp
){

1010 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
RUN_HOW
, 
tmp
->
how_d©a
);

1011 iа(
tmp
->
some_byЛs_£t
) {

1012 
	`evПg_mђshЃ
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byЛs_d©a
,Бmp->
some_byЛs_Ћngth
);

1014 
	`evПg_mђshЃ
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byЛs_d©a
, (24));

1015 iа(
tmp
->
nўes_£t
) {

1017 
i
;

1018 
i
 = 0; i < 
tmp
->
nўes_Ћngth
; ++i) {

1019 
	`evПg_mђshЃ_°rЪg
(
evbuf
, 
RUN_NOTES
, 
tmp
->
nўes_d©a
[
i
]);

1023 iа(
tmp
->
ѕrge_numbФ_£t
) {

1024 
	`evПg_mђshЃ_Ъt64
(
evbuf
, 
RUN_LARGE_NUMBER
, 
tmp
->
ѕrge_numbФ_d©a
);

1026 iа(
tmp
->
ўhФ_numbФs_£t
) {

1028 
i
;

1029 
i
 = 0; i < 
tmp
->
ўhФ_numbФs_Ћngth
; ++i) {

1030 
	`evПg_mђshЃ_Ъt
(
evbuf
, 
RUN_OTHER_NUMBERS
, 
tmp
->
ўhФ_numbФs_d©a
[
i
]);

1034 
	}
}

1037 
	$run_unmђshЃ
(
run
 *
tmp
, 
evbufгr
 *
evbuf
)

1039 
ev_uЪt32_t
 
Пg
;

1040 
	`evbufгr_gС_Ћngth
(
evbuf
) > 0) {

1041 iа(
	`evПg_≥ek
(
evbuf
, &
Пg
) == -1)

1043 
Пg
) {

1045 
RUN_HOW
:

1047 iа(
tmp
->
how_£t
)

1049 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
RUN_HOW
, &
tmp
->
how_d©a
) == -1) {

1050 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ how", 
__func__
);

1053 
tmp
->
how_£t
 = 1;

1056 
RUN_SOME_BYTES
:

1058 iа(
tmp
->
some_byЛs_£t
)

1060 iа(
	`evПg_Јylяd_Ћngth
(
evbuf
, &
tmp
->
some_byЛs_Ћngth
) == -1)

1062 iа(
tmp
->
some_byЛs_Ћngth
 > 
	`evbufгr_gС_Ћngth
(
evbuf
))

1064 iа((
tmp
->
some_byЛs_d©a
 = 
	`mЃloc
—mp->
some_byЛs_Ћngth
)и=р
NULL
)

1066 iа(
	`evПg_unmђshЃ_fixed
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byЛs_d©a
,Бmp->
some_byЛs_Ћngth
) == -1) {

1067 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ some_byЛs", 
__func__
);

1070 
tmp
->
some_byЛs_£t
 = 1;

1073 
RUN_FIXED_BYTES
:

1075 iа(
tmp
->
fixed_byЛs_£t
)

1077 iа(
	`evПg_unmђshЃ_fixed
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byЛs_d©a
, (24)) == -1) {

1078 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ fixed_byЛs", 
__func__
);

1081 
tmp
->
fixed_byЛs_£t
 = 1;

1084 
RUN_NOTES
:

1086 iа(
	`run_nўes_add
(
tmp
, 
NULL
) == NULL)

1088 --
tmp
->
nўes_Ћngth
;

1089 iа(
	`evПg_unmђshЃ_°rЪg
(
evbuf
, 
RUN_NOTES
, &
tmp
->
nўes_d©a
[tmp->
nўes_Ћngth
]) == -1) {

1090 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃВўes", 
__func__
);

1093 ++
tmp
->
nўes_Ћngth
;

1094 
tmp
->
nўes_£t
 = 1;

1097 
RUN_LARGE_NUMBER
:

1099 iа(
tmp
->
ѕrge_numbФ_£t
)

1101 iа(
	`evПg_unmђshЃ_Ъt64
(
evbuf
, 
RUN_LARGE_NUMBER
, &
tmp
->
ѕrge_numbФ_d©a
) == -1) {

1102 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃЖђge_numbФ", 
__func__
);

1105 
tmp
->
ѕrge_numbФ_£t
 = 1;

1108 
RUN_OTHER_NUMBERS
:

1110 iа(
	`run_ўhФ_numbФs_add
(
tmp
, 0и=р
NULL
)

1112 --
tmp
->
ўhФ_numbФs_Ћngth
;

1113 iа(
	`evПg_unmђshЃ_Ъt
(
evbuf
, 
RUN_OTHER_NUMBERS
, &
tmp
->
ўhФ_numbФs_d©a
[tmp->
ўhФ_numbФs_Ћngth
]) == -1) {

1114 
	`evТt_wђnx
("%s: faЮedБЎunmђshЃ othФ_numbФs", 
__func__
);

1117 ++
tmp
->
ўhФ_numbФs_Ћngth
;

1118 
tmp
->
ўhФ_numbФs_£t
 = 1;

1126 iа(
	`run_comґСe
(
tmp
) == -1)

1129 
	}
}

1132 
	$run_comґСe
(
run
 *
msg
)

1134 iа(!
msg
->
how_£t
)

1136 iа(!
msg
->
fixed_byЛs_£t
)

1139 
	}
}

1142 
	$evПg_unmђshЃ_run
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
√ed_Пg
, 
run
 *
msg
)

1144 
ev_uЪt32_t
 
Пg
;

1145 
їs
 = -1;

1147 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

1149 iа(
	`evПg_unmђshЃ
(
evbuf
, &
Пg
, 
tmp
и=р-1 ||Бag !р
√ed_Пg
)

1150 
Фr№
;

1152 iа(
	`run_unmђshЃ
(
msg
, 
tmp
) == -1)

1153 
Фr№
;

1155 
їs
 = 0;

1157 
Фr№
:

1158 
	`evbufгr_дУ
(
tmp
);

1159  (
їs
);

1160 
	}
}

1163 
	$evПg_mђshЃ_run
(
evbufгr
 *
evbuf
, 
ev_uЪt32_t
 
Пg
, cЏ° 
run
 *
msg
)

1165 
evbufгr
 *
_buf
 = 
	`evbufгr_√w
();

1166 
	`as£є
(
_buf
 !р
NULL
);

1167 
	`run_mђshЃ
(
_buf
, 
msg
);

1168 
	`evПg_mђshЃ_bufгr
(
evbuf
, 
Пg
, 
_buf
);

1169 
	`evbufгr_дУ
(
_buf
);

1170 
	}
}

	@test/regress.gen.h

5 #iвdeа
___REGRESS_RPC_


6 
	#___REGRESS_RPC_


	)

8 
	~<evТt2/utЮ.h
>

9 
	~<evТt2/љc.h
>

11 
	gmsg
;

12 
	gkЮl
;

13 
	grun
;

16 
	emsg_
 {

17 
	mMSG_FROM_NAME
=1,

18 
	mMSG_TO_NAME
=2,

19 
	mMSG_ATTACK
=3,

20 
	mMSG_RUN
=4,

21 
	mMSG_MAX_TAGS


25 
	smsg_acыss_
 {

26 (*
	mдom_«me_assign
)(
	mmsg
 *, const *);

27 (*
	mдom_«me_gС
)(
	mmsg
 *, * *);

28 (*
	mto_«me_assign
)(
	mmsg
 *, const *);

29 (*
	mto_«me_gС
)(
	mmsg
 *, * *);

30 (*
	m©Пck_assign
)(
	mmsg
 *, cЏ° 
	mkЮl
*);

31 (*
	m©Пck_gС
)(
	mmsg
 *, 
	mkЮl
* *);

32 (*
	mrun_assign
)(
	mmsg
 *, , cЏ° 
	mrun
*);

33 (*
	mrun_gС
)(
	mmsg
 *, , 
	mrun
* *);

34 
	mrun
* (*
	mrun_add
)(
msg
 *
	mmsg
);

37 
	smsg
 {

38 
msg_acыss_
 *
	mba£
;

40 *
	mдom_«me_d©a
;

41 *
	mto_«me_d©a
;

42 
kЮl
* 
	m©Пck_d©a
;

43 
run
* *
	mrun_d©a
;

44 
	mrun_Ћngth
;

45 
	mrun_num_Ѓlo€Лd
;

47 
ev_uЪt8_t
 
	mдom_«me_£t
;

48 
ev_uЪt8_t
 
	mto_«me_£t
;

49 
ev_uЪt8_t
 
	m©Пck_£t
;

50 
ev_uЪt8_t
 
	mrun_£t
;

53 
msg
 *
msg_√w
();

54 
msg_дУ
(
msg
 *);

55 
msg_юЧr
(
msg
 *);

56 
msg_mђshЃ
(
evbufгr
 *, cЏ° 
msg
 *);

57 
msg_unmђshЃ
(
msg
 *, 
evbufгr
 *);

58 
msg_comґСe
(
msg
 *);

59 
evПg_mђshЃ_msg
(
evbufгr
 *, 
ev_uЪt32_t
,

60 cЏ° 
msg
 *);

61 
evПg_unmђshЃ_msg
(
evbufгr
 *, 
ev_uЪt32_t
,

62 
msg
 *);

63 
msg_дom_«me_assign
(
msg
 *, const *);

64 
msg_дom_«me_gС
(
msg
 *, * *);

65 
msg_to_«me_assign
(
msg
 *, const *);

66 
msg_to_«me_gС
(
msg
 *, * *);

67 
msg_©Пck_assign
(
msg
 *, cЏ° 
kЮl
*);

68 
msg_©Пck_gС
(
msg
 *, 
kЮl
* *);

69 
msg_run_assign
(
msg
 *, , cЏ° 
run
*);

70 
msg_run_gС
(
msg
 *, , 
run
* *);

71 
run
* 
msg_run_add
(
msg
 *msg);

75 
	ekЮl_
 {

76 
	mKILL_WEAPON
=65825,

77 
	mKILL_ACTION
=2,

78 
	mKILL_HOW_OFTEN
=3,

79 
	mKILL_MAX_TAGS


83 
	skЮl_acыss_
 {

84 (*
	mwЧpЏ_assign
)(
	mkЮl
 *, const *);

85 (*
	mwЧpЏ_gС
)(
	mkЮl
 *, * *);

86 (*
	maщiЏ_assign
)(
	mkЮl
 *, const *);

87 (*
	maщiЏ_gС
)(
	mkЮl
 *, * *);

88 (*
	mhow_oбТ_assign
)(
	mkЮl
 *, , cЏ° 
	mev_uЪt32_t
);

89 (*
	mhow_oбТ_gС
)(
	mkЮl
 *, , 
	mev_uЪt32_t
 *);

90 
	mev_uЪt32_t
 * (*
	mhow_oбТ_add
)(
kЮl
 *
	mmsg
, cЏ° 
ev_uЪt32_t
 
	mvЃue
);

93 
	skЮl
 {

94 
kЮl_acыss_
 *
	mba£
;

96 *
	mwЧpЏ_d©a
;

97 *
	maщiЏ_d©a
;

98 
ev_uЪt32_t
 *
	mhow_oбТ_d©a
;

99 
	mhow_oбТ_Ћngth
;

100 
	mhow_oбТ_num_Ѓlo€Лd
;

102 
ev_uЪt8_t
 
	mwЧpЏ_£t
;

103 
ev_uЪt8_t
 
	maщiЏ_£t
;

104 
ev_uЪt8_t
 
	mhow_oбТ_£t
;

107 
kЮl
 *
kЮl_√w
();

108 
kЮl_дУ
(
kЮl
 *);

109 
kЮl_юЧr
(
kЮl
 *);

110 
kЮl_mђshЃ
(
evbufгr
 *, cЏ° 
kЮl
 *);

111 
kЮl_unmђshЃ
(
kЮl
 *, 
evbufгr
 *);

112 
kЮl_comґСe
(
kЮl
 *);

113 
evПg_mђshЃ_kЮl
(
evbufгr
 *, 
ev_uЪt32_t
,

114 cЏ° 
kЮl
 *);

115 
evПg_unmђshЃ_kЮl
(
evbufгr
 *, 
ev_uЪt32_t
,

116 
kЮl
 *);

117 
kЮl_wЧpЏ_assign
(
kЮl
 *, const *);

118 
kЮl_wЧpЏ_gС
(
kЮl
 *, * *);

119 
kЮl_aщiЏ_assign
(
kЮl
 *, const *);

120 
kЮl_aщiЏ_gС
(
kЮl
 *, * *);

121 
kЮl_how_oбТ_assign
(
kЮl
 *, , cЏ° 
ev_uЪt32_t
);

122 
kЮl_how_oбТ_gС
(
kЮl
 *, , 
ev_uЪt32_t
 *);

123 
ev_uЪt32_t
 * 
kЮl_how_oбТ_add
(
kЮl
 *
msg
, cЏ°Гv_uЪt32_И
vЃue
);

127 
	erun_
 {

128 
	mRUN_HOW
=1,

129 
	mRUN_SOME_BYTES
=2,

130 
	mRUN_FIXED_BYTES
=3,

131 
	mRUN_NOTES
=4,

132 
	mRUN_LARGE_NUMBER
=5,

133 
	mRUN_OTHER_NUMBERS
=6,

134 
	mRUN_MAX_TAGS


138 
	srun_acыss_
 {

139 (*
	mhow_assign
)(
	mrun
 *, const *);

140 (*
	mhow_gС
)(
	mrun
 *, * *);

141 (*
	msome_byЛs_assign
)(
	mrun
 *, cЏ° 
	mev_uЪt8_t
 *, 
	mev_uЪt32_t
);

142 (*
	msome_byЛs_gС
)(
	mrun
 *, 
	mev_uЪt8_t
 * *, 
	mev_uЪt32_t
 *);

143 (*
	mfixed_byЛs_assign
)(
	mrun
 *, cЏ° 
	mev_uЪt8_t
 *);

144 (*
	mfixed_byЛs_gС
)(
	mrun
 *, 
	mev_uЪt8_t
 **);

145 (*
	mnўes_assign
)(
	mrun
 *, , const *);

146 (*
	mnўes_gС
)(
	mrun
 *, , * *);

147 * * (*
	mnўes_add
)(
run
 *
	mmsg
, cЏ° * 
	mvЃue
);

148 (*
	mѕrge_numbФ_assign
)(
	mrun
 *, cЏ° 
	mev_uЪt64_t
);

149 (*
	mѕrge_numbФ_gС
)(
	mrun
 *, 
	mev_uЪt64_t
 *);

150 (*
	mўhФ_numbФs_assign
)(
	mrun
 *, , cЏ° 
	mev_uЪt32_t
);

151 (*
	mўhФ_numbФs_gС
)(
	mrun
 *, , 
	mev_uЪt32_t
 *);

152 
	mev_uЪt32_t
 * (*
	mўhФ_numbФs_add
)(
run
 *
	mmsg
, cЏ° 
ev_uЪt32_t
 
	mvЃue
);

155 
	srun
 {

156 
run_acыss_
 *
	mba£
;

158 *
	mhow_d©a
;

159 
ev_uЪt8_t
 *
	msome_byЛs_d©a
;

160 
ev_uЪt32_t
 
	msome_byЛs_Ћngth
;

161 
ev_uЪt8_t
 
	mfixed_byЛs_d©a
[24];

162 * *
	mnўes_d©a
;

163 
	mnўes_Ћngth
;

164 
	mnўes_num_Ѓlo€Лd
;

165 
ev_uЪt64_t
 
	mѕrge_numbФ_d©a
;

166 
ev_uЪt32_t
 *
	mўhФ_numbФs_d©a
;

167 
	mўhФ_numbФs_Ћngth
;

168 
	mўhФ_numbФs_num_Ѓlo€Лd
;

170 
ev_uЪt8_t
 
	mhow_£t
;

171 
ev_uЪt8_t
 
	msome_byЛs_£t
;

172 
ev_uЪt8_t
 
	mfixed_byЛs_£t
;

173 
ev_uЪt8_t
 
	mnўes_£t
;

174 
ev_uЪt8_t
 
	mѕrge_numbФ_£t
;

175 
ev_uЪt8_t
 
	mўhФ_numbФs_£t
;

178 
run
 *
run_√w
();

179 
run_дУ
(
run
 *);

180 
run_юЧr
(
run
 *);

181 
run_mђshЃ
(
evbufгr
 *, cЏ° 
run
 *);

182 
run_unmђshЃ
(
run
 *, 
evbufгr
 *);

183 
run_comґСe
(
run
 *);

184 
evПg_mђshЃ_run
(
evbufгr
 *, 
ev_uЪt32_t
,

185 cЏ° 
run
 *);

186 
evПg_unmђshЃ_run
(
evbufгr
 *, 
ev_uЪt32_t
,

187 
run
 *);

188 
run_how_assign
(
run
 *, const *);

189 
run_how_gС
(
run
 *, * *);

190 
run_some_byЛs_assign
(
run
 *, cЏ° 
ev_uЪt8_t
 *, 
ev_uЪt32_t
);

191 
run_some_byЛs_gС
(
run
 *, 
ev_uЪt8_t
 * *, 
ev_uЪt32_t
 *);

192 
run_fixed_byЛs_assign
(
run
 *, cЏ° 
ev_uЪt8_t
 *);

193 
run_fixed_byЛs_gС
(
run
 *, 
ev_uЪt8_t
 **);

194 
run_nўes_assign
(
run
 *, , const *);

195 
run_nўes_gС
(
run
 *, , * *);

196 * * 
run_nўes_add
(
run
 *
msg
, cЏ° * 
vЃue
);

197 
run_ѕrge_numbФ_assign
(
run
 *, cЏ° 
ev_uЪt64_t
);

198 
run_ѕrge_numbФ_gС
(
run
 *, 
ev_uЪt64_t
 *);

199 
run_ўhФ_numbФs_assign
(
run
 *, , cЏ° 
ev_uЪt32_t
);

200 
run_ўhФ_numbФs_gС
(
run
 *, , 
ev_uЪt32_t
 *);

201 
ev_uЪt32_t
 * 
run_ўhФ_numbФs_add
(
run
 *
msg
, cЏ°Гv_uЪt32_И
vЃue
);

	@test/regress.h

27 #iвdeа
_REGRESS_H_


28 
	#_REGRESS_H_


	)

30 #ifdeа
__эlu•lus


34 
	~"tЪyЛ°.h
"

35 
	~"tЪyЛ°_maьos.h
"

37 
Л°€£_t
 
maЪ_Л°€£s
[];

38 
Л°€£_t
 
evПg_Л°€£s
[];

39 
Л°€£_t
 
evbufгr_Л°€£s
[];

40 
Л°€£_t
 
bufгїvТt_Л°€£s
[];

41 
Л°€£_t
 
bufгїvТt_ioэ_Л°€£s
[];

42 
Л°€£_t
 
utЮ_Л°€£s
[];

43 
Л°€£_t
 
sig«l_Л°€£s
[];

44 
Л°€£_t
 
hЙp_Л°€£s
[];

45 
Л°€£_t
 
dns_Л°€£s
[];

46 
Л°€£_t
 
љc_Л°€£s
[];

47 
Л°€£_t
 
edgСriggФed_Л°€£s
[];

48 
Л°€£_t
 
mЪhЧp_Л°€£s
[];

49 
Л°€£_t
 
ioэ_Л°€£s
[];

50 
Л°€£_t
 
s¶_Л°€£s
[];

51 
Л°€£_t
 
li°ТФ_Л°€£s
[];

52 
Л°€£_t
 
li°ТФ_ioэ_Л°€£s
[];

54 
їgїss_thїads
(*);

55 
Л°_bufгїvТt_zlib
(*);

58 
ЈЬ
[2];

59 
Л°_ok
;

60 
€ќed
;

61 
evТt_ba£
 *
globЃ_ba£
;

62 
Ъ_Ћgacy_Л°_wњµФ
;

64 
evutЮ_sockС_t
 
їgїss_make_tmpfЮe
(cЏ° *
d©a
, 
size_t
 
d©ЃТ
);

66 
	sbasic_Л°_d©a
 {

67 
evТt_ba£
 *
	gba£
;

68 
	gЈЬ
[2];

70 (*
	gЋgacy_Л°_в
)();

72 *
	g£tup_d©a
;

74 cЏ° 
Л°€£_£tup_t
 
basic_£tup
;

77 cЏ° 
Л°€£_£tup_t
 
Ћgacy_£tup
;

78 
run_Ћgacy_Л°_в
(*
±r
);

81 
	#TT_NEED_SOCKETPAIR
 
TT_FIRST_USER_FLAG


	)

82 
	#TT_NEED_BASE
 (
TT_FIRST_USER_FLAG
<<1)

	)

83 
	#TT_NEED_DNS
 (
TT_FIRST_USER_FLAG
<<2)

	)

84 
	#TT_LEGACY
 (
TT_FIRST_USER_FLAG
<<3)

	)

85 
	#TT_NEED_THREADS
 (
TT_FIRST_USER_FLAG
<<4)

	)

86 
	#TT_NO_LOGS
 (
TT_FIRST_USER_FLAG
<<5)

	)

87 
	#TT_ENABLE_IOCP_FLAG
 (
TT_FIRST_USER_FLAG
<<6)

	)

88 
	#TT_ENABLE_IOCP
 (
TT_ENABLE_IOCP_FLAG
|
TT_NEED_THREADS
)

	)

91 
	#TT_ISOLATED
 
TT_FORK
|
TT_NEED_SOCKETPAIR
|
TT_NEED_BASE


	)

94 
	#BASIC
(
«me
,
жags
) \

95 { #«me, 
Л°_
## 
«me
, 
жags
, &
basic_£tup
, 
NULL
 }

	)

97 
	#LEGACY
(
«me
,
жags
) \

98 { #«me, 
run_Ћgacy_Л°_в
, 
жags
|
TT_LEGACY
, &
Ћgacy_£tup
, \

99 
Л°_
## 
«me
 }

	)

101 
	gevutЮ_addrЪfo
;

102 
evutЮ_addrЪfo
 *
ai_fЪd_by_зmЮy
(evutЮ_addrЪfЎ*
ai
, 
f
);

103 
evutЮ_addrЪfo
 *
ai_fЪd_by_іўocё
(evutЮ_addrЪfЎ*
ai
, 
p
);

104 
_Л°_ai_eq
(cЏ° 
evutЮ_addrЪfo
 *
ai
, cЏ° *
sockaddr_p№t
,

105 
sockty≥
, 
іўocё
, 
lЪe
);

107 
	#Л°_ai_eq
(
ai
, 
°r
, 
s
, 
p
) do { \

108 iа(
	`_Л°_ai_eq
((
ai
), (
°r
), (
s
), (
p
), 
__LINE__
)<0) \

109 
Тd
; \

110 } 0)

	)

112 
	#Л°_timevЃ_diff_eq
(
tv1
, 
tv2
, 
diff
) \

113 
	`Й_Ъt_Ё
(
	`abs
(
	`timevЃ_m£c_diff
((
tv1
), (
tv2
)и- 
diff
), <=, 30)

	)

115 
timevЃ_m£c_diff
(cЏ° 
timevЃ
 *
°ђt
, cЏ° timevЃ *
Тd
);

117 #ifdeа
__эlu•lus


	@test/regress_buffer.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sys/waЩ.h
>

44 
	~<sig«l.h
>

45 
	~<uni°d.h
>

46 
	~<√tdb.h
>

48 
	~<°dlib.h
>

49 
	~<°dio.h
>

50 
	~<°rЪg.h
>

51 
	~<ФЇo.h
>

52 
	~<as£є.h
>

54 
	~"evТt2/evТt.h
"

55 
	~"evТt2/bufгr.h
"

56 
	~"evТt2/bufгr_comЈt.h
"

57 
	~"evТt2/utЮ.h
"

59 
	~"evbufгr-ЪЛЇЃ.h
"

60 
	~"log-ЪЛЇЃ.h
"

62 
	~"їgїss.h
"

67 
	$_evbufгr_vЃid©e
(
evbufгr
 *
buf
)

69 
evbufгr_chaЪ
 *
chaЪ
, *
іevious
 = 
NULL
;

70 
size_t
 
sum
 = 0;

72 iа(
buf
->
fЬ°
 =р
NULL
) {

73 
	`Й_as£є
(
buf
->
ѕ°
 =р
NULL
);

74 
	`Й_as£є
(
buf
->
іevious_to_ѕ°
 =р
NULL
);

75 
	`Й_as£є
(
buf
->
tўЃ_Ћn
 == 0);

78 iа(
buf
->
іevious_to_ѕ°
 =р
NULL
) {

79 
	`Й_as£є
(
buf
->
fЬ°
 =рbuf->
ѕ°
);

82 
chaЪ
 = 
buf
->
fЬ°
;

83 
chaЪ
 !р
NULL
) {

84 
sum
 +р
chaЪ
->
off
;

85 iа(
chaЪ
->
√xt
 =р
NULL
) {

86 
	`Й_as£є
(
buf
->
іevious_to_ѕ°
 =р
іevious
);

87 
	`Й_as£є
(
buf
->
ѕ°
 =р
chaЪ
);

89 
	`Й_as£є
(
chaЪ
->
bufгr_Ћn
 >рchaЪ->
miІlign
 + chaЪ->
off
);

90 
іevious
 = 
chaЪ
;

91 
chaЪ
 = chaЪ->
√xt
;

94 
	`Й_as£є
(
sum
 =р
buf
->
tўЃ_Ћn
);

96 
Тd
:

98 
	}
}

100 
	#evbufгr_vЃid©e
(
buf
) \

101 
TT_STMT_BEGIN
 iа(!
	`_evbufгr_vЃid©e
(
buf
)и
Тd
; 
TT_STMT_END


	)

104 
	$Л°_evbufгr
(*
±r
)

106 
bufгr
[512], *
tmp
;

107 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

108 
evbufгr
 *
evb_two
 = 
	`evbufгr_√w
();

109 
size_t
 
sz_tmp
;

110 
i
;

112 
	`evbufгr_vЃid©e
(
evb
);

113 
	`evbufгr_add_іЪtf
(
evb
, "%s/%d", "hello", 1);

114 
	`evbufгr_vЃid©e
(
evb
);

116 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 7);

117 
	`Й_as£є
(!
	`memcmp
((*)
	`EVBUFFER_DATA
(
evb
), "hello/1", 1));

119 
	`evbufгr_add_bufгr
(
evb
, 
evb_two
);

120 
	`evbufгr_vЃid©e
(
evb
);

122 
	`evbufгr_dњЪ
(
evb
, 
	`°ЊТ
("hello/"));

123 
	`evbufгr_vЃid©e
(
evb
);

124 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 1);

125 
	`Й_as£є
(!
	`memcmp
((*)
	`EVBUFFER_DATA
(
evb
), "1", 1));

127 
	`evbufгr_add_іЪtf
(
evb_two
, "%s", "/hello");

128 
	`evbufгr_vЃid©e
(
evb
);

129 
	`evbufгr_add_bufгr
(
evb
, 
evb_two
);

130 
	`evbufгr_vЃid©e
(
evb
);

132 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb_two
) == 0);

133 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 7);

134 
	`Й_as£є
(!
	`memcmp
((*)
	`EVBUFFER_DATA
(
evb
), "1/hello", 7) != 0);

136 
	`mem£t
(
bufгr
, 0, (buffer));

137 
	`evbufгr_add
(
evb
, 
bufгr
, (buffer));

138 
	`evbufгr_vЃid©e
(
evb
);

139 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 7 + 512);

141 
tmp
 = (*)
	`evbufгr_puќup
(
evb
, 7 + 512);

142 
	`Й_as£є
(
tmp
);

143 
	`Й_as£є
(!
	`°Їcmp
(
tmp
, "1/hello", 7));

144 
	`Й_as£є
(!
	`memcmp
(
tmp
 + 7, 
bufгr
, (buffer)));

145 
	`evbufгr_vЃid©e
(
evb
);

147 
	`evbufгr_іХТd
(
evb
, "something", 9);

148 
	`evbufгr_vЃid©e
(
evb
);

149 
	`evbufгr_іХТd
(
evb
, "else", 4);

150 
	`evbufгr_vЃid©e
(
evb
);

152 
tmp
 = (*)
	`evbufгr_puќup
(
evb
, 4 + 9 + 7);

153 
	`Й_as£є
(!
	`°Їcmp
(
tmp
, "elsesomething1/hello", 4 + 9 + 7));

154 
	`evbufгr_vЃid©e
(
evb
);

156 
	`evbufгr_dњЪ
(
evb
, -1);

157 
	`evbufгr_vЃid©e
(
evb
);

158 
	`evbufгr_dњЪ
(
evb_two
, -1);

159 
	`evbufгr_vЃid©e
(
evb
);

161 
i
 = 0; i < 3; ++i) {

162 
	`evbufгr_add
(
evb_two
, 
bufгr
, (buffer));

163 
	`evbufгr_vЃid©e
(
evb_two
);

164 
	`evbufгr_add_bufгr
(
evb
, 
evb_two
);

165 
	`evbufгr_vЃid©e
(
evb
);

166 
	`evbufгr_vЃid©e
(
evb_two
);

169 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb_two
) == 0);

170 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
и=р
i
 * (
bufгr
));

173 
sz_tmp
 = (
size_t
)((
bufгr
)*2.5);

174 
	`evbufгr_їmove_bufгr
(
evb
, 
evb_two
, 
sz_tmp
);

175 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb_two
и=р
sz_tmp
);

176 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
и=р(
bufгr
) / 2);

177 
	`evbufгr_vЃid©e
(
evb
);

179 iа(
	`memcmp
(
	`evbufгr_puќup
(

180 
evb
, -1), 
bufгr
, (buffer) / 2) != 0 ||

181 
	`memcmp
(
	`evbufгr_puќup
(

182 
evb_two
, -1), 
bufгr
, (buffer) != 0))

183 
	`Й_ab№t_msg
("Pullup didВotЕreserve content");

185 
	`evbufгr_vЃid©e
(
evb
);

190 
evbufгr_iovec
 
v
[1];

191 *
buf
;

192 
i
, 
j
, 
r
;

194 
i
 = 0; i < 3; ++i) {

195 
r
 = 
	`evbufгr_ї£rve_•aы
(
evb
, 10000, 
v
, 1);

196 
	`Й_Ъt_Ё
(
r
, ==, 1);

197 
	`Й_as£є
(
v
[0].
iov_Ћn
 >= 10000);

198 
	`Й_as£є
(
v
[0].
iov_ba£
 !р
NULL
);

200 
	`evbufгr_vЃid©e
(
evb
);

201 
buf
 = 
v
[0].
iov_ba£
;

202 
j
 = 0; j < 10000; ++j) {

203 
buf
[
j
] = j;

205 
	`evbufгr_vЃid©e
(
evb
);

207 
	`Й_Ъt_Ё
(
	`evbufгr_commЩ_•aы
(
evb
, 
v
, 1), ==, 0);

208 
	`evbufгr_vЃid©e
(
evb
);

210 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) >= 10000);

212 
	`evbufгr_dњЪ
(
evb
, 
j
 * 5000);

213 
	`evbufгr_vЃid©e
(
evb
);

217 
Тd
:

218 
	`evbufгr_дУ
(
evb
);

219 
	`evbufгr_дУ
(
evb_two
);

220 
	}
}

223 
	$Л°_evbufгr_ї£rve2
(*
±r
)

226 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

227 
n
, 
i
;

228 
evbufгr_iovec
 
v
[2];

229 
size_t
 
їmaЪЪg
;

230 *
э
, *
э2
;

233 
n
 = 
	`evbufгr_ї£rve_•aы
(
buf
, 1024, 
v
, 2);

234 
	`Й_Ъt_Ё
(
n
, ==, 1);

235 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 0);

236 
	`Й_as£є
(
v
[0].
iov_ba£
 !р
NULL
);

237 
	`Й_Ъt_Ё
(
v
[0].
iov_Ћn
, >=, 1024);

238 
	`mem£t
(
v
[0].
iov_ba£
, 'X', 512);

239 
э
 = 
v
[0].
iov_ba£
;

240 
їmaЪЪg
 = 
v
[0].
iov_Ћn
 - 512;

241 
v
[0].
iov_Ћn
 = 512;

242 
	`Й_Ъt_Ё
(0, ==, 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1));

243 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 512);

247 
n
 = 
	`evbufгr_ї£rve_•aы
(
buf
, 32, 
v
, 2);

248 
	`Й_Ъt_Ё
(
n
, ==, 1);

249 
	`Й_as£є
(
э
 + 512 =р
v
[0].
iov_ba£
);

250 
	`Й_Ъt_Ё
(
їmaЪЪg
, ==, 
v
[0].
iov_Ћn
);

251 
	`mem£t
(
v
[0].
iov_ba£
, 'Y', 8);

252 
v
[0].
iov_Ћn
 = 8;

253 
	`Й_Ъt_Ё
(0, ==, 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1));

254 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 520);

255 
їmaЪЪg
 -= 8;

259 
n
 = 
	`evbufгr_ї£rve_•aы
(
buf
, 
їmaЪЪg
+64, 
v
, 2);

260 
	`Й_Ъt_Ё
(
n
, ==, 2);

261 
	`Й_as£є
(
э
 + 520 =р
v
[0].
iov_ba£
);

262 
	`Й_Ъt_Ё
(
їmaЪЪg
, ==, 
v
[0].
iov_Ћn
);

263 
	`Й_as£є
(
v
[1].
iov_ba£
);

264 
	`Й_as£є
(
v
[1].
iov_Ћn
 >= 64);

265 
э2
 = 
v
[1].
iov_ba£
;

266 
	`mem£t
(
v
[0].
iov_ba£
, 'Z', 1);

267 
v
[0].
iov_Ћn
 = 1;

268 
	`Й_Ъt_Ё
(0, ==, 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1));

269 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 521);

270 
їmaЪЪg
 -= 1;

274 
n
 = 
	`evbufгr_ї£rve_•aы
(
buf
, 
їmaЪЪg
+64, 
v
, 2);

275 
	`Й_Ъt_Ё
(
n
, ==, 2);

276 
	`Й_as£є
(
э
 + 521 =р
v
[0].
iov_ba£
);

277 
	`Й_Ъt_Ё
(
їmaЪЪg
, ==, 
v
[0].
iov_Ћn
);

278 
	`Й_as£є
(
v
[1].
iov_ba£
 =р
э2
);

279 
	`Й_as£є
(
v
[1].
iov_Ћn
 >= 64);

280 
	`mem£t
(
v
[0].
iov_ba£
, 'W', 400);

281 
v
[0].
iov_Ћn
 = 400;

282 
	`mem£t
(
v
[1].
iov_ba£
, 'x', 60);

283 
v
[1].
iov_Ћn
 = 60;

284 
	`Й_Ъt_Ё
(0, ==, 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 2));

285 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 981);

289 
	`mem£t
(
v
,0,(v));

290 
n
 = 
	`evbufгr_≥ek
(
buf
, -1, 
NULL
, 
v
, 2);

291 
	`Й_Ъt_Ё
(
n
, ==, 2);

292 
	`Й_Ъt_Ё
(
v
[0].
iov_Ћn
, ==, 921);

293 
	`Й_Ъt_Ё
(
v
[1].
iov_Ћn
, ==, 60);

295 
э
 = 
v
[0].
iov_ba£
;

296 
i
=0; i<512; ++i)

297 
	`Й_Ъt_Ё
(
э
[
i
], ==, 'X');

298 
i
=512; i<520; ++i)

299 
	`Й_Ъt_Ё
(
э
[
i
], ==, 'Y');

300 
i
=520; i<521; ++i)

301 
	`Й_Ъt_Ё
(
э
[
i
], ==, 'Z');

302 
i
=521; i<921; ++i)

303 
	`Й_Ъt_Ё
(
э
[
i
], ==, 'W');

305 
э
 = 
v
[1].
iov_ba£
;

306 
i
=0; i<60; ++i)

307 
	`Й_Ъt_Ё
(
э
[
i
], ==, 'x');

309 
Тd
:

310 
	`evbufгr_дУ
(
buf
);

311 
	}
}

313 
	gїгїnы_cb_€ќed
;

315 
	$їгїnы_cb
(cЏ° *
d©a
, 
size_t
 
Ћn
, *
exМa
)

317 
	`Й_°r_Ё
(
d©a
, ==, "this is what weЗddЗsДead-only memory.");

318 
	`Й_Ъt_Ё
(
Ћn
, ==, 
	`°ЊТ
(
d©a
));

319 
	`Й_w™t
(
exМa
 == (*)0xdeadaffe);

320 ++
їгїnы_cb_€ќed
;

321 
Тd
:

323 
	}
}

326 
	$Л°_evbufгr_їгїnы
(*
±r
)

328 
evbufгr
 *
§c
 = 
	`evbufгr_√w
();

329 
evbufгr
 *
d°
 = 
	`evbufгr_√w
();

330 
evbufгr_iovec
 
v
[1];

331 cЏ° *
d©a
 = "this is what weЗddЗsДead-only memory.";

332 
їгїnы_cb_€ќed
 = 0;

334 
	`Й_as£є
(
	`evbufгr_add_їгїnы
(
§c
, 
d©a
, 
	`°ЊТ
(data),

335 
їгїnы_cb
, (*)0xdeadaffe) != -1);

337 
	`evbufгr_ї£rve_•aы
(
d°
, 
	`°ЊТ
(
d©a
), 
v
, 1);

338 
	`Й_as£є
(
	`evbufгr_їmove
(
§c
, 
v
[0].
iov_ba£
, 10) != -1);

340 
	`evbufгr_vЃid©e
(
§c
);

341 
	`evbufгr_vЃid©e
(
d°
);

344 
	`evbufгr_іХТd
(
§c
, "aaaaa", 5);

345 
	`evbufгr_vЃid©e
(
§c
);

346 
	`evbufгr_dњЪ
(
§c
, 5);

348 
	`Й_as£є
(
	`evbufгr_їmove
(
§c
, ((*)(
v
[0].
iov_ba£
)) + 10,

349 
	`°ЊТ
(
d©a
) - 10) != -1);

351 
v
[0].
iov_Ћn
 = 
	`°ЊТ
(
d©a
);

353 
	`evbufгr_commЩ_•aы
(
d°
, 
v
, 1);

354 
	`evbufгr_vЃid©e
(
§c
);

355 
	`evbufгr_vЃid©e
(
d°
);

357 
	`Й_Ъt_Ё
(
їгїnы_cb_€ќed
, ==, 1);

359 
	`Й_as£є
(!
	`memcmp
(
	`evbufгr_puќup
(
d°
, 
	`°ЊТ
(
d©a
)),

360 
d©a
, 
	`°ЊТ
(data)));

362 
Тd
:

363 
	`evbufгr_дУ
(
d°
);

364 
	`evbufгr_дУ
(
§c
);

365 
	}
}

367 #iвdeа
WIN32


369 
	$Л°_evbufгr_add_fЮe
(*
±r
)

371 
evbufгr
 *
§c
 = 
	`evbufгr_√w
();

372 cЏ° *
d©a
 = "this is what weЗddЗs file system data.";

373 cЏ° *
comЈї
;

374 
evutЮ_sockС_t
 
fd
, 
ЈЬ
[2];

376 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1)

377 
	`Й_ab№t_msg
("socketpair failed");

379 
fd
 = 
	`їgїss_make_tmpfЮe
(
d©a
, 
	`°ЊТ
(data));

381 
	`Й_as£є
(
fd
 != -1);

383 
	`Й_as£є
(
	`evbufгr_add_fЮe
(
§c
, 
fd
, 0, 
	`°ЊТ
(
d©a
)) != -1);

385 
	`evbufгr_vЃid©e
(
§c
);

387 
	`evbufгr_wrЩe
(
§c
, 
ЈЬ
[0]) > 0) {

388 
	`evbufгr_vЃid©e
(
§c
);

391 
	`Й_as£є
(
	`evbufгr_їad
(
§c
, 
ЈЬ
[1], 
	`°ЊТ
(
d©a
)) == strlen(data));

392 
comЈї
 = (*)
	`evbufгr_puќup
(
§c
, 
	`°ЊТ
(
d©a
));

393 
	`Й_as£є
(
comЈї
 !р
NULL
);

394 iа(
	`memcmp
(
comЈї
, 
d©a
, 
	`°ЊТ
(data)))

395 
	`Й_ab№t_msg
("Data fromЗdd_file differs.");

397 
Тd
:

398 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[0]);

399 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[1]);

400 
	`evbufгr_дУ
(
§c
);

401 
	}
}

404 #iвdeа
_EVENT_DISABLE_MM_REPLACEMENT


406 
	$зЮЪg_mЃloc
(
size_t
 
how_much
)

408 
ФЇo
 = 
ENOMEM
;

409  
NULL
;

410 
	}
}

414 
	$Л°_evbufгr_їad 
(*
±r
)

416 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

417 
evbufгr
 *
evb_tmp
 = 
	`evbufгr_√w
();

418 cЏ° *
s
;

419 *
э
 = 
NULL
;

420 
size_t
 
sz
;

422 
	#Й_lЪe_eq
(
cЏЛЅ
) \

423 
TT_STMT_BEGIN
 \

424 iа(!
э
 || 
sz
 !р
	`°ЊТ
(
cЏЛЅ
и|| 
	`°rcmp
(cp, content)) { \

425 
	`TT_DIE
(("W™Лd %s; gў %†[%d]", 
cЏЛЅ
, 
э
, ()
sz
)); \

427 
TT_STMT_END


	)

430 
s
 = "complex sillyВewline\r\n\n\r\n\n\rmore\0\n";

431 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s)+2);

432 
	`evbufгr_vЃid©e
(
evb
);

433 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_ANY
);

434 
	`Й_lЪe_eq
("complex sillyВewline");

435 
	`дУ
(
э
);

436 
	`evbufгr_vЃid©e
(
evb
);

437 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_ANY
);

438 iа(!
э
 || 
sz
 !р5 || 
	`memcmp
(cp, "more\0\0", 6))

439 
	`Й_ab№t_msg
("NotЗsГxpected");

440 
	`Й_uЪt_Ё
(
	`evbufгr_gС_Ћngth
(
evb
), ==, 0);

441 
	`evbufгr_vЃid©e
(
evb
);

442 
s
 = "\nnoВewline";

443 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s));

444 
	`дУ
(
э
);

445 
	`evbufгr_vЃid©e
(
evb
);

446 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_ANY
);

447 
	`Й_lЪe_eq
("");

448 
	`дУ
(
э
);

449 
	`evbufгr_vЃid©e
(
evb
);

450 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_ANY
);

451 
	`Й_as£є
(!
э
);

452 
	`evbufгr_vЃid©e
(
evb
);

453 
	`evbufгr_dњЪ
(
evb
, 
	`evbufгr_gС_Ћngth
(evb));

454 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 0);

455 
	`evbufгr_vЃid©e
(
evb
);

458 
s
 = "Line with\rinБhe middle\nLine with good crlf\r\n\nfinal\n";

459 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s));

460 
	`evbufгr_vЃid©e
(
evb
);

461 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF
);

462 
	`Й_lЪe_eq
("Line with\rinБhe middle");

463 
	`дУ
(
э
);

464 
	`evbufгr_vЃid©e
(
evb
);

466 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF
);

467 
	`Й_lЪe_eq
("Line with good crlf");

468 
	`дУ
(
э
);

469 
	`evbufгr_vЃid©e
(
evb
);

471 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF
);

472 
	`Й_lЪe_eq
("");

473 
	`дУ
(
э
);

474 
	`evbufгr_vЃid©e
(
evb
);

476 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF
);

477 
	`Й_lЪe_eq
("final");

478 
s
 = "x";

479 
	`evbufгr_vЃid©e
(
evb
);

480 
	`evbufгr_add
(
evb
, 
s
, 1);

481 
	`evbufгr_vЃid©e
(
evb
);

482 
	`дУ
(
э
);

483 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF
);

484 
	`Й_as£є
(!
э
);

485 
	`evbufгr_vЃid©e
(
evb
);

488 
s
 = "ЗndЗ bad crlf\nandЗ good one\r\n\r\nMore\r";

489 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s));

490 
	`evbufгr_vЃid©e
(
evb
);

491 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

492 
	`Й_lЪe_eq
("xЗndЗ bad crlf\nandЗ good one");

493 
	`дУ
(
э
);

494 
	`evbufгr_vЃid©e
(
evb
);

496 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

497 
	`Й_lЪe_eq
("");

498 
	`дУ
(
э
);

499 
	`evbufгr_vЃid©e
(
evb
);

501 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

502 
	`Й_as£є
(!
э
);

503 
	`evbufгr_vЃid©e
(
evb
);

504 
	`evbufгr_add
(
evb
, "\n", 1);

505 
	`evbufгr_vЃid©e
(
evb
);

507 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

508 
	`Й_lЪe_eq
("More");

509 
	`дУ
(
э
);

510 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 0);

511 
	`evbufгr_vЃid©e
(
evb
);

513 
s
 = "An internal CR\r isВotЗnГol\r\nNor isЗЖack of one";

514 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s));

515 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

516 
	`Й_lЪe_eq
("An internal CR\r isВotЗnГol");

517 
	`дУ
(
э
);

518 
	`evbufгr_vЃid©e
(
evb
);

520 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

521 
	`Й_as£є
(!
э
);

522 
	`evbufгr_vЃid©e
(
evb
);

524 
	`evbufгr_add
(
evb
, "\r\n", 2);

525 
	`evbufгr_vЃid©e
(
evb
);

526 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

527 
	`Й_lЪe_eq
("Nor isЗЖack of one");

528 
	`дУ
(
э
);

529 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 0);

530 
	`evbufгr_vЃid©e
(
evb
);

533 
s
 = "An\randЗВl\n\nText";

534 
	`evbufгr_add
(
evb
, 
s
, 
	`°ЊТ
(s));

535 
	`evbufгr_vЃid©e
(
evb
);

537 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

538 
	`Й_lЪe_eq
("An\randЗВl");

539 
	`дУ
(
э
);

540 
	`evbufгr_vЃid©e
(
evb
);

542 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

543 
	`Й_lЪe_eq
("");

544 
	`дУ
(
э
);

545 
	`evbufгr_vЃid©e
(
evb
);

547 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

548 
	`Й_as£є
(!
э
);

549 
	`дУ
(
э
);

550 
	`evbufгr_add
(
evb
, "\n", 1);

551 
	`evbufгr_vЃid©e
(
evb
);

552 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

553 
	`Й_lЪe_eq
("Text");

554 
	`дУ
(
э
);

555 
	`evbufгr_vЃid©e
(
evb
);

558 
s
 = "ЗndЗ bad crlf\nandЗ good one\r";

559 
	`evbufгr_add
(
evb_tmp
, 
s
, 
	`°ЊТ
(s));

560 
	`evbufгr_vЃid©e
(
evb
);

561 
	`evbufгr_add_bufгr
(
evb
, 
evb_tmp
);

562 
	`evbufгr_vЃid©e
(
evb
);

563 
s
 = "\n\r";

564 
	`evbufгr_add
(
evb_tmp
, 
s
, 
	`°ЊТ
(s));

565 
	`evbufгr_vЃid©e
(
evb
);

566 
	`evbufгr_add_bufгr
(
evb
, 
evb_tmp
);

567 
	`evbufгr_vЃid©e
(
evb
);

568 
s
 = "\nMore\r";

569 
	`evbufгr_add
(
evb_tmp
, 
s
, 
	`°ЊТ
(s));

570 
	`evbufгr_vЃid©e
(
evb
);

571 
	`evbufгr_add_bufгr
(
evb
, 
evb_tmp
);

572 
	`evbufгr_vЃid©e
(
evb
);

574 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

575 
	`Й_lЪe_eq
("ЗndЗ bad crlf\nandЗ good one");

576 
	`дУ
(
э
);

577 
	`evbufгr_vЃid©e
(
evb
);

579 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

580 
	`Й_lЪe_eq
("");

581 
	`дУ
(
э
);

582 
	`evbufгr_vЃid©e
(
evb
);

584 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

585 
	`Й_as£є
(!
э
);

586 
	`дУ
(
э
);

587 
	`evbufгr_vЃid©e
(
evb
);

588 
	`evbufгr_add
(
evb
, "\n", 1);

589 
	`evbufгr_vЃid©e
(
evb
);

590 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_CRLF_STRICT
);

591 
	`Й_lЪe_eq
("More");

592 
	`дУ
(
э
); c∞р
NULL
;

593 
	`evbufгr_vЃid©e
(
evb
);

594 
	`Й_as£є
(
	`evbufгr_gС_Ћngth
(
evb
) == 0);

597 
s
 = "oneЖine\ntwoЖine\nblueЖine";

598 
	`evbufгr_add
(
evb_tmp
, 
s
, 
	`°ЊТ
(s));

599 
	`evbufгr_vЃid©e
(
evb
);

600 
	`evbufгr_add_bufгr
(
evb
, 
evb_tmp
);

601 
	`evbufгr_vЃid©e
(
evb
);

603 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

604 
	`Й_lЪe_eq
("oneЖine");

605 
	`дУ
(
э
); c∞р
NULL
;

606 
	`evbufгr_vЃid©e
(
evb
);

609 #iвdeа
_EVENT_DISABLE_MM_REPLACEMENT


610 
	`evТt_£t_mem_funщiЏs
(
зЮЪg_mЃloc
, 
їЃloc
, 
дУ
);

611 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

612 
	`Й_as£є
(
э
 =р
NULL
);

613 
	`evbufгr_vЃid©e
(
evb
);

616 
	`evТt_£t_mem_funщiЏs
(
mЃloc
, 
їЃloc
, 
дУ
);

618 
э
 = 
	`evbufгr_їad 
(
evb
, &
sz
, 
EVBUFFER_EOL_LF
);

619 
	`Й_lЪe_eq
("twoЖine");

620 
	`дУ
(
э
); c∞р
NULL
;

621 
	`evbufгr_vЃid©e
(
evb
);

623 
Л°_ok
 = 1;

624 
Тd
:

625 
	`evbufгr_дУ
(
evb
);

626 
	`evbufгr_дУ
(
evb_tmp
);

627 iа(
э
и
	`дУ
(cp);

628 
	}
}

631 
	$Л°_evbufгr_ЩФ©ive
(*
±r
)

633 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

634 cЏ° *
abc
 = "abcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyzabcdefghijklmnopqrstvuwxyz";

635 
i
, 
j
, 
sum
;

637 
sum
 = 0;

638 
i
 = 0; i < 1000; ++i) {

639 
j
 = 1; j < 
	`°ЊТ
(
abc
); ++j) {

640 
f№m©
[32];

642 
	`evutЮ_ҐіЪtf
(
f№m©
, (f№m©), "%%%u.%us", 
j
, j);

643 
	`evbufгr_add_іЪtf
(
buf
, 
f№m©
, 
abc
);

644 
	`evbufгr_vЃid©e
(
buf
);

646 
sum
 +р
j
;

650 
	`Й_uЪt_Ё
(
sum
, ==, 
	`evbufгr_gС_Ћngth
(
buf
));

652 
Тd
:

653 
	`evbufгr_дУ
(
buf
);

655 
	}
}

658 
	$Л°_evbufгr_fЪd
(*
±r
)

660 
u_chђ
* 
p
;

661 cЏ° * 
Л°1
 = "1234567890\r\n";

662 cЏ° * 
Л°2
 = "1234567890\r";

663 
	#EVBUFFER_INITIAL_LENGTH
 256

	)

664 
Л°3
[
EVBUFFER_INITIAL_LENGTH
];

665 
i
;

666 
evbufгr
 * 
buf
 = 
	`evbufгr_√w
();

669 
	`evbufгr_add
(
buf
, (
u_chђ
*)
Л°1
, 
	`°ЊТ
(test1));

670 
	`evbufгr_vЃid©e
(
buf
);

671 
	`evbufгr_dњЪ
(
buf
, 
	`°ЊТ
(
Л°1
));

672 
	`evbufгr_vЃid©e
(
buf
);

673 
	`evbufгr_add
(
buf
, (
u_chђ
*)
Л°2
, 
	`°ЊТ
(test2));

674 
	`evbufгr_vЃid©e
(
buf
);

675 
p
 = 
	`evbufгr_fЪd
(
buf
, (
u_chђ
*)"\r\n", 2);

676 
	`Й_w™t
(
p
 =р
NULL
);

682 
	`evbufгr_dњЪ
(
buf
, 
	`°ЊТ
(
Л°2
));

683 
	`evbufгr_vЃid©e
(
buf
);

684 
i
 = 0; i < 
EVBUFFER_INITIAL_LENGTH
; ++i)

685 
Л°3
[
i
] = 'a';

686 
Л°3
[
EVBUFFER_INITIAL_LENGTH
 - 1] = 'x';

687 
	`evbufгr_add
(
buf
, (
u_chђ
 *)
Л°3
, 
EVBUFFER_INITIAL_LENGTH
);

688 
	`evbufгr_vЃid©e
(
buf
);

689 
p
 = 
	`evbufгr_fЪd
(
buf
, (
u_chђ
 *)"xy", 2);

690 
	`Й_w™t
(
p
 =р
NULL
);

693 
p
 = 
	`evbufгr_fЪd
(
buf
, (
u_chђ
 *)"ax", 2);

694 
	`Й_as£є
(
p
 !р
NULL
);

695 
	`Й_w™t
(
	`°Їcmp
((*)
p
, "ax", 2) == 0);

697 
Тd
:

698 iа(
buf
)

699 
	`evbufгr_дУ
(
buf
);

700 
	}
}

703 
	$Л°_evbufгr_±r_£t
(*
±r
)

705 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

706 
evbufгr_±r
 
pos
;

707 
evbufгr_iovec
 
v
[1];

710 
	`evbufгr_ї£rve_•aы
(
buf
, 5000, 
v
, 1);

711 
v
[0].
iov_Ћn
 = 5000;

712 
	`mem£t
(
v
[0].
iov_ba£
, 1, v[0].
iov_Ћn
);

713 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1);

715 
	`evbufгr_ї£rve_•aы
(
buf
, 4000, 
v
, 1);

716 
v
[0].
iov_Ћn
 = 4000;

717 
	`mem£t
(
v
[0].
iov_ba£
, 2, v[0].
iov_Ћn
);

718 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1);

720 
	`evbufгr_ї£rve_•aы
(
buf
, 3000, 
v
, 1);

721 
v
[0].
iov_Ћn
 = 3000;

722 
	`mem£t
(
v
[0].
iov_ba£
, 3, v[0].
iov_Ћn
);

723 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1);

725 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 12000);

727 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 13000, 
EVBUFFER_PTR_SET
) == -1);

728 
	`Й_as£є
(
pos
.pos == -1);

729 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 0, 
EVBUFFER_PTR_SET
) == 0);

730 
	`Й_as£є
(
pos
.pos == 0);

731 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 13000, 
EVBUFFER_PTR_ADD
) == -1);

733 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 0, 
EVBUFFER_PTR_SET
) == 0);

734 
	`Й_as£є
(
pos
.pos == 0);

735 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 10000, 
EVBUFFER_PTR_ADD
) == 0);

736 
	`Й_as£є
(
pos
.pos == 10000);

737 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 1000, 
EVBUFFER_PTR_ADD
) == 0);

738 
	`Й_as£є
(
pos
.pos == 11000);

739 
	`Й_as£є
(
	`evbufгr_±r_£t
(
buf
, &
pos
, 1000, 
EVBUFFER_PTR_ADD
) == -1);

740 
	`Й_as£є
(
pos
.pos == -1);

742 
Тd
:

743 iа(
buf
)

744 
	`evbufгr_дУ
(
buf
);

745 
	}
}

748 
	$Л°_evbufгr_£ђch
(*
±r
)

750 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

751 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

752 
evbufгr_±r
 
pos
, 
Тd
;

755 
	`evbufгr_add_іЪtf
(
tmp
, "hello");

756 
	`evbufгr_add_bufгr
(
buf
, 
tmp
);

757 
	`evbufгr_add_іЪtf
(
tmp
, "foo");

758 
	`evbufгr_add_bufгr
(
buf
, 
tmp
);

759 
	`evbufгr_add_іЪtf
(
tmp
, "cat");

760 
	`evbufгr_add_bufгr
(
buf
, 
tmp
);

761 
	`evbufгr_add_іЪtf
(
tmp
, "attack");

762 
	`evbufгr_add_bufгr
(
buf
, 
tmp
);

764 
pos
 = 
	`evbufгr_£ђch
(
buf
, "©Пck", 6, 
NULL
);

765 
	`Й_Ъt_Ё
(
pos
.pos, ==, 11);

766 
pos
 = 
	`evbufгr_£ђch
(
buf
, "©ПckФ", 8, 
NULL
);

767 
	`Й_Ъt_Ё
(
pos
.pos, ==, -1);

770 
pos
 = 
	`evbufгr_£ђch
(
buf
, "oc", 2, 
NULL
);

771 
	`Й_Ъt_Ё
(
pos
.pos, ==, 7);

772 
pos
 = 
	`evbufгr_£ђch
(
buf
, "cat", 3, &pos);

773 
	`Й_Ъt_Ё
(
pos
.pos, ==, 8);

774 
pos
 = 
	`evbufгr_£ђch
(
buf
, "tacking", 7, &pos);

775 
	`Й_Ъt_Ё
(
pos
.pos, ==, -1);

777 
	`evbufгr_±r_£t
(
buf
, &
pos
, 5, 
EVBUFFER_PTR_SET
);

778 
pos
 = 
	`evbufгr_£ђch
(
buf
, "foo", 3, &pos);

779 
	`Й_Ъt_Ё
(
pos
.pos, ==, 5);

781 
	`evbufгr_±r_£t
(
buf
, &
pos
, 2, 
EVBUFFER_PTR_ADD
);

782 
pos
 = 
	`evbufгr_£ђch
(
buf
, "tat", 3, &pos);

783 
	`Й_Ъt_Ё
(
pos
.pos, ==, 10);

787 
	`evbufгr_±r_£t
(
buf
, &
Тd
, 12, 
EVBUFFER_PTR_SET
);

788 
pos
 = 
	`evbufгr_£ђch_њnge
(
buf
, "foo", 3, 
NULL
, &
Тd
);

789 
	`Й_Ъt_Ё
(
pos
.pos, ==, 5);

790 
pos
 = 
	`evbufгr_£ђch_њnge
(
buf
, "foo€П", 7, 
NULL
, &
Тd
);

791 
	`Й_Ъt_Ё
(
pos
.pos, ==, 5);

792 
pos
 = 
	`evbufгr_£ђch_њnge
(
buf
, "foo€Пt", 8, 
NULL
, &
Тd
);

793 
	`Й_Ъt_Ё
(
pos
.pos, ==, -1);

794 
pos
 = 
	`evbufгr_£ђch_њnge
(
buf
, "ack", 3, 
NULL
, &
Тd
);

795 
	`Й_Ъt_Ё
(
pos
.pos, ==, -1);

797 
Тd
:

798 iа(
buf
)

799 
	`evbufгr_дУ
(
buf
);

800 iа(
tmp
)

801 
	`evbufгr_дУ
(
tmp
);

802 
	}
}

805 
	$log_ch™ge_€ќback
(
evbufгr
 *
bufгr
,

806 cЏ° 
evbufгr_cb_Ъfo
 *
cbЪfo
,

807 *
ђg
)

810 
size_t
 
ёd_Ћn
 = 
cbЪfo
->
№ig_size
;

811 
size_t
 
√w_Ћn
 = 
ёd_Ћn
 + 
cbЪfo
->
n_added
 - cbЪfo->
n_dЦСed
;

812 
evbufгr
 *
out
 = 
ђg
;

813 
	`evbufгr_add_іЪtf
(
out
, "%lu->%lu; ", ()
ёd_Ћn
,

814 ()
√w_Ћn
);

815 
	}
}

817 
	$£lf_dњЪЪg_€ќback
(
evbufгr
 *evbufгr, 
size_t
 
ёd_Ћn
,

818 
size_t
 
√w_Ћn
, *
ђg
)

820 iа(
√w_Ћn
 > 
ёd_Ћn
)

821 
	`evbufгr_dњЪ
(
evbufгr
, 
√w_Ћn
);

822 
	}
}

825 
	$Л°_evbufгr_€ќbacks
(*
±r
)

827 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

828 
evbufгr
 *
buf_out1
 = 
	`evbufгr_√w
();

829 
evbufгr
 *
buf_out2
 = 
	`evbufгr_√w
();

830 
evbufгr_cb_ТМy
 *
cb1
, *
cb2
;

832 
cb1
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out1
);

833 
cb2
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out2
);

839 
	`evbufгr_add_іЪtf
(
buf
, "The %d magic wordsЗre spottyЕudding", 2);

840 
	`evbufгr_cb_юЧr_жags
(
buf
, 
cb2
, 
EVBUFFER_CB_ENABLED
);

841 
	`evbufгr_dњЪ
(
buf
, 10);

842 
	`evbufгr_іХТd
(
buf
, "Hello", 5);

843 
	`evbufгr_cb_£t_жags
(
buf
, 
cb2
, 
EVBUFFER_CB_ENABLED
);

844 
	`evbufгr_add_їгїnы
(
buf
, "Goodbye", 7, 
NULL
, NULL);

845 
	`evbufгr_їmove_cb_ТМy
(
buf
, 
cb1
);

846 
	`evbufгr_dњЪ
(
buf
, 
	`evbufгr_gС_Ћngth
(buf)); ;

847 
	`Й_as£є
(-1 =р
	`evbufгr_їmove_cb
(
buf
, 
log_ch™ge_€ќback
, 
NULL
));

848 
	`evbufгr_add
(
buf
, "X", 1);

849 
	`Й_as£є
(!
	`evbufгr_їmove_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out2
));

851 
	`Й_°r_Ё
(
	`evbufгr_puќup
(
buf_out1
, -1), ==,

853 
	`Й_°r_Ё
(
	`evbufгr_puќup
(
buf_out2
, -1), ==,

855 
	`evbufгr_dњЪ
(
buf_out1
, 
	`evbufгr_gС_Ћngth
(buf_out1));

856 
	`evbufгr_dњЪ
(
buf_out2
, 
	`evbufгr_gС_Ћngth
(buf_out2));

859 
cb1
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out1
);

860 
cb2
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out2
);

861 
	`evbufгr_£tcb
(
buf
, 
£lf_dњЪЪg_€ќback
, 
NULL
);

862 
	`evbufгr_add_іЪtf
(
buf
, "This should get drainedДightЗway.");

863 
	`Й_uЪt_Ё
(
	`evbufгr_gС_Ћngth
(
buf
), ==, 0);

864 
	`Й_uЪt_Ё
(
	`evbufгr_gС_Ћngth
(
buf_out1
), ==, 0);

865 
	`Й_uЪt_Ё
(
	`evbufгr_gС_Ћngth
(
buf_out2
), ==, 0);

866 
	`evbufгr_£tcb
(
buf
, 
NULL
, NULL);

867 
	`evbufгr_add_іЪtf
(
buf
, "This willВot.");

868 
	`Й_°r_Ё
(
	`evbufгr_puќup
(
buf
, -1), ==, "This willВot.");

870 
	`evbufгr_dњЪ
(
buf
, 
	`evbufгr_gС_Ћngth
(buf));

874 
cb1
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out1
);

875 
cb2
 = 
	`evbufгr_add_cb
(
buf
, 
log_ch™ge_€ќback
, 
buf_out2
);

876 
	`evbufгr_cb_su•Тd
(
buf
,
cb2
);

877 
	`evbufгr_іХТd
(
buf
,"Hello world",11);

878 
	`evbufгr_vЃid©e
(
buf
);

879 
	`evbufгr_cb_su•Тd
(
buf
,
cb1
);

880 
	`evbufгr_add
(
buf
,"more",4);

881 
	`evbufгr_cb_unsu•Тd
(
buf
,
cb2
);

882 
	`evbufгr_dњЪ
(
buf
, 4);

883 
	`evbufгr_cb_unsu•Тd
(
buf
,
cb1
);

884 
	`evbufгr_dњЪ
(
buf
, 
	`evbufгr_gС_Ћngth
(buf));

886 
	`Й_°r_Ё
(
	`evbufгr_puќup
(
buf_out1
, -1), ==,

888 
	`Й_°r_Ё
(
	`evbufгr_puќup
(
buf_out2
, -1), ==,

892 
Тd
:

893 iа(
buf
)

894 
	`evbufгr_дУ
(
buf
);

895 iа(
buf_out1
)

896 
	`evbufгr_дУ
(
buf_out1
);

897 iа(
buf_out2
)

898 
	`evbufгr_дУ
(
buf_out2
);

899 
	}
}

901 
	gїf_dЏe_cb_€ќed_couЅ
 = 0;

902 *
	gїf_dЏe_cb_€ќed_wЩh
 = 
NULL
;

903 cЏ° *
	gїf_dЏe_cb_€ќed_wЩh_d©a
 = 
NULL
;

904 
size_t
 
	gїf_dЏe_cb_€ќed_wЩh_Ћn
 = 0;

905 
	$їf_dЏe_cb
(cЏ° *
d©a
, 
size_t
 
Ћn
, *
Ъfo
)

907 ++
їf_dЏe_cb_€ќed_couЅ
;

908 
їf_dЏe_cb_€ќed_wЩh
 = 
Ъfo
;

909 
їf_dЏe_cb_€ќed_wЩh_d©a
 = 
d©a
;

910 
їf_dЏe_cb_€ќed_wЩh_Ћn
 = 
Ћn
;

911 
	}
}

914 
	$Л°_evbufгr_add_їгїnы
(*
±r
)

916 cЏ° 
chunk1
[] = "If you have foundБheЗnswerБo suchЗЕroblem";

917 cЏ° 
chunk2
[] = "you oughtБo write it up forЕublication";

919 
tmp
[16];

920 
size_t
 
Ћn1
 = 
	`°ЊТ
(
chunk1
), 
Ћn2
=°ЊТ(
chunk2
);

922 
evbufгr
 *
buf1
 = 
NULL
, *
buf2
 = NULL;

924 
buf1
 = 
	`evbufгr_√w
();

925 
	`Й_as£є
(
buf1
);

927 
	`evbufгr_add_їгїnы
(
buf1
, 
chunk1
, 
Ћn1
, 
їf_dЏe_cb
, (*)111);

928 
	`evbufгr_add
(
buf1
, ", ", 2);

929 
	`evbufгr_add_їгїnы
(
buf1
, 
chunk2
, 
Ћn2
, 
їf_dЏe_cb
, (*)222);

930 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
buf1
), ==, 
Ћn1
+
Ћn2
+2);

933 
	`Й_Ъt_Ё
(
	`evbufгr_їmove
(
buf1
, 
tmp
, 6), ==, 6);

934 
	`Й_Ъt_Ё
(
	`memcmp
(
tmp
, "If you", 6), ==, 0);

935 
	`Й_Ъt_Ё
(
	`evbufгr_їmove
(
buf1
, 
tmp
, 5), ==, 5);

936 
	`Й_Ъt_Ё
(
	`memcmp
(
tmp
, " have", 5), ==, 0);

939 
	`Й_Ъt_Ё
(
	`evbufгr_іХТd
(
buf1
, "I have ", 7), ==, 0);

940 
	`Й_Ъt_Ё
(
	`memcmp
(
chunk1
, "If you", 6), ==, 0);

943 
	`evbufгr_dњЪ
(
buf1
, 7);

944 
	`evbufгr_dњЪ
(
buf1
, 
Ћn1
-11-1);

945 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 0);

946 
	`evbufгr_їmove
(
buf1
, 
tmp
, 1);

947 
	`Й_Ъt_Ё
(
tmp
[0], ==, 'm');

948 
	`Й_as£є
(
їf_dЏe_cb_€ќed_wЩh
 == (*)111);

949 
	`Й_as£є
(
їf_dЏe_cb_€ќed_wЩh_d©a
 =р
chunk1
);

950 
	`Й_as£є
(
їf_dЏe_cb_€ќed_wЩh_Ћn
 =р
Ћn1
);

951 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 1);

954 
	`evbufгr_dњЪ
(
buf1
, 6);

955 
buf2
 = 
	`evbufгr_√w
();

956 
	`Й_as£є
(
buf2
);

957 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 1);

958 
	`evbufгr_add
(
buf2
, "I ", 2);

960 
	`evbufгr_add_bufгr
(
buf2
, 
buf1
);

961 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 1);

962 
	`evbufгr_їmove
(
buf2
, 
tmp
, 16);

963 
	`Й_Ъt_Ё
(
	`memcmp
("I oughИtЎwrЩe", 
tmp
, 16), ==, 0);

964 
	`evbufгr_dњЪ
(
buf2
, 
	`evbufгr_gС_Ћngth
(buf2));

965 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 2);

966 
	`Й_as£є
(
їf_dЏe_cb_€ќed_wЩh
 == (*)222);

970 
	`evbufгr_add
(
buf1
, "You shakeЗnd shakeБhe ", 24);

971 
	`evbufгr_add_їгїnы
(
buf1
, "kСchu∞bўОe", 14, 
їf_dЏe_cb
,

973 
	`evbufгr_add
(
buf1
, ". Nothing comesЗndБhenЗЖot'll.", 42);

974 
	`evbufгr_дУ
(
buf1
);

975 
buf1
 = 
NULL
;

976 
	`Й_Ъt_Ё
(
їf_dЏe_cb_€ќed_couЅ
, ==, 3);

977 
	`Й_as£є
(
їf_dЏe_cb_€ќed_wЩh
 == (*)3333);

979 
Тd
:

980 iа(
buf1
)

981 
	`evbufгr_дУ
(
buf1
);

982 iа(
buf2
)

983 
	`evbufгr_дУ
(
buf2
);

984 
	}
}

988 
	$Л°_evbufгr_іХТd
(*
±r
)

990 
evbufгr
 *
buf1
 = 
NULL
, *
buf2
 = NULL;

991 
tmp
[128];

992 
n
;

994 
buf1
 = 
	`evbufгr_√w
();

995 
	`Й_as£є
(
buf1
);

997 
	`evbufгr_add
(
buf1
, "This string has 29 characters", 29);

1000 
	`evbufгr_іХТd
(
buf1
, "Short.", 6);

1001 
	`evbufгr_vЃid©e
(
buf1
);

1004 
	`evbufгr_dњЪ
(
buf1
, 6+11);

1005 
	`evbufгr_іХТd
(
buf1
, "it", 2);

1006 
	`evbufгr_vЃid©e
(
buf1
);

1007 
	`Й_as£є
(!
	`memcmp
(
buf1
->
fЬ°
->
bufгr
+buf1->fЬ°->
miІlign
,

1011 
	`evbufгr_іХТd
(
buf1
, "It isВoЖongerБrueБo say ", 28);

1012 
	`evbufгr_vЃid©e
(
buf1
);

1013 
n
 = 
	`evbufгr_їmove
(
buf1
, 
tmp
, (tmp)-1);

1014 
tmp
[
n
]='\0';

1015 
	`Й_°r_Ё
(
tmp
,==,"It isВoЖongerБrueБo say it has 29 characters");

1017 
buf2
 = 
	`evbufгr_√w
();

1018 
	`Й_as£є
(
buf2
);

1021 
n
 = 999;

1022 
	`evbufгr_add_іЪtf
(
buf1
, "HФРi†°rЪg %d. ", 
n
++);

1023 
	`evbufгr_іХТd_bufгr
(
buf2
, 
buf1
);

1024 
	`evbufгr_vЃid©e
(
buf2
);

1027 
	`evbufгr_add_іЪtf
(
buf1
, "HФРi†°rЪg %d. ", 
n
++);

1028 
	`evbufгr_іХТd_bufгr
(
buf2
, 
buf1
);

1029 
	`evbufгr_vЃid©e
(
buf2
);

1030 
n
 = 
	`evbufгr_їmove
(
buf2
, 
tmp
, (tmp)-1);

1031 
tmp
[
n
]='\0';

1032 
	`Й_°r_Ё
(
tmp
,==,"Here is string 1000. Here is string 999. ");

1034 
Тd
:

1035 iа(
buf1
)

1036 
	`evbufгr_дУ
(
buf1
);

1037 iа(
buf2
)

1038 
	`evbufгr_дУ
(
buf2
);

1040 
	}
}

1043 
	$Л°_evbufгr_≥ek
(*
Ъfo
)

1045 
evbufгr
 *
buf
 = 
NULL
, *
tmp_buf
 = NULL;

1046 
i
;

1047 
evbufгr_iovec
 
v
[20];

1048 
evbufгr_±r
 
±r
;

1050 
	#Й_iov_eq
(
v
, 
s
) \

1051 
	`Й_Ъt_Ё
((
v
)->
iov_Ћn
, ==, 
	`°ЊТ
(
s
)); \

1052 
	`Й_as£є
(!
	`memcmp
((
v
)->
iov_ba£
, (
s
), 
	`°ЊТ
(s)))

	)

1055 
buf
 = 
	`evbufгr_√w
();

1056 
tmp_buf
 = 
	`evbufгr_√w
();

1057 
i
 = 0; i < 16; ++i) {

1058 
	`evbufгr_add_іЪtf
(
tmp_buf
, "CЏЛЅ†oаchunk [%d]\n", 
i
);

1059 
	`evbufгr_add_bufгr
(
buf
, 
tmp_buf
);

1063 
i
 = 
	`evbufгr_≥ek
(
buf
, -1, 
NULL
, 
v
, 20);

1064 
	`Й_Ъt_Ё
(
i
, ==, 16);

1065 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [0]\n");

1066 
	`Й_iov_eq
(&
v
[3], "Contents of chunk [3]\n");

1067 
	`Й_iov_eq
(&
v
[12], "Contents of chunk [12]\n");

1068 
	`Й_iov_eq
(&
v
[15], "Contents of chunk [15]\n");

1071 
	`mem£t
(
v
, 0, (v));

1072 
i
 = 
	`evbufгr_≥ek
(
buf
, -1, 
NULL
, 
v
, 1);

1073 
	`Й_Ъt_Ё
(
i
, ==, 1);

1074 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [0]\n");

1075 
	`Й_as£є
(
v
[1].
iov_ba£
 =р
NULL
);

1078 
	`mem£t
(
v
, 0, (v));

1079 
i
 = 
	`evbufгr_≥ek
(
buf
, 40, 
NULL
, 
v
, 16);

1080 
	`Й_Ъt_Ё
(
i
, ==, 2);

1081 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [0]\n");

1082 
	`Й_iov_eq
(&
v
[1], "Contents of chunk [1]\n");

1083 
	`Й_as£є
(
v
[2].
iov_ba£
 =р
NULL
);

1086 
	`mem£t
(
v
, 0, (v));

1087 
i
 = 
	`evbufгr_≥ek
(
buf
, 100, 
NULL
, NULL, 0);

1088 
	`Й_Ъt_Ё
(
i
, ==, 5);

1089 
	`Й_as£є
(
v
[0].
iov_ba£
 =р
NULL
);

1092 
	`mem£t
(
v
, 0, (v));

1093 
i
 = 
	`evbufгr_≥ek
(
buf
, 60, 
NULL
, 
v
, 1);

1094 
	`Й_Ъt_Ё
(
i
, ==, 3);

1095 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [0]\n");

1096 
	`Й_as£є
(
v
[1].
iov_ba£
 =р
NULL
);

1099 
	`mem£t
(
v
, 0, (v));

1100 
i
 = 
	`evbufгr_≥ek
(
buf
, 65536, 
NULL
, 
v
, 20);

1101 
	`Й_Ъt_Ё
(
i
, ==, 16);

1102 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [0]\n");

1103 
	`Й_iov_eq
(&
v
[3], "Contents of chunk [3]\n");

1104 
	`Й_iov_eq
(&
v
[12], "Contents of chunk [12]\n");

1105 
	`Й_iov_eq
(&
v
[15], "Contents of chunk [15]\n");

1106 
	`Й_as£є
(
v
[16].
iov_ba£
 =р
NULL
);

1109 
	`mem£t
(
v
, 0, (v));

1110 
i
 = 
	`evbufгr_≥ek
(
tmp_buf
, -1, 
NULL
, 
v
, 20);

1111 
	`Й_Ъt_Ё
(
i
, ==, 0);

1112 
	`Й_as£є
(
v
[0].
iov_ba£
 =р
NULL
);

1113 
	`mem£t
(
v
, 0, (v));

1114 
i
 = 
	`evbufгr_≥ek
(
tmp_buf
, 50, 
NULL
, 
v
, 20);

1115 
	`Й_Ъt_Ё
(
i
, ==, 0);

1116 
	`Й_as£є
(
v
[0].
iov_ba£
 =р
NULL
);

1119 
	`mem£t
(
v
, 0, (v));

1120 
	`evbufгr_±r_£t
(
buf
, &
±r
, 30, 
EVBUFFER_PTR_SET
);

1121 
i
 = 
	`evbufгr_≥ek
(
buf
, 50, &
±r
, 
v
, 20);

1122 
	`Й_Ъt_Ё
(
i
, ==, 3);

1123 
	`Й_iov_eq
(&
v
[0], " of chunk [1]\n");

1124 
	`Й_iov_eq
(&
v
[1], "Contents of chunk [2]\n");

1125 
	`Й_iov_eq
(&
v
[2], "Contents of chunk [3]\n");

1128 
	`mem£t
(
v
, 0, (v));

1129 
	`evbufгr_±r_£t
(
buf
, &
±r
, 14, 
EVBUFFER_PTR_ADD
);

1130 
i
 = 
	`evbufгr_≥ek
(
buf
, 44, &
±r
, 
v
, 20);

1131 
	`Й_Ъt_Ё
(
i
, ==, 2);

1132 
	`Й_iov_eq
(&
v
[0], "Contents of chunk [2]\n");

1133 
	`Й_iov_eq
(&
v
[1], "Contents of chunk [3]\n");

1135 
Тd
:

1136 iа(
buf
)

1137 
	`evbufгr_дУ
(
buf
);

1138 iа(
tmp_buf
)

1139 
	`evbufгr_дУ
(
tmp_buf
);

1140 
	}
}

1150 
	$Л°_evbufгr_дУze
(*
±r
)

1152 
evbufгr
 *
buf
 = 
NULL
, *
tmp_buf
=NULL;

1153 cЏ° 
°rЪg
[] =

1158 cЏ° 
°ђt
 = !
	`°rcmp
(
±r
, "start");

1159 *
э
;

1160 
chђbuf
[128];

1161 
r
;

1162 
size_t
 
№ig_Ћngth
;

1163 
evbufгr_iovec
 
v
[1];

1165 iа(!
°ђt
)

1166 
	`Й_°r_Ё
(
±r
, ==, "end");

1168 
buf
 = 
	`evbufгr_√w
();

1169 
tmp_buf
 = 
	`evbufгr_√w
();

1170 
	`Й_as£є
(
tmp_buf
);

1172 
	`evbufгr_add
(
buf
, 
°rЪg
, 
	`°ЊТ
(string));

1173 
	`evbufгr_дУze
(
buf
, 
°ђt
);

1175 
	#FREEZE_EQ
(
a
, 
°ђt€£
, 
Тd€£
) \

1177 iа(
°ђt
) { \

1178 
	`Й_Ъt_Ё
((
a
), ==, (
°ђt€£
)); \

1180 
	`Й_Ъt_Ё
((
a
), ==, (
Тd€£
)); \

1182 } 0)

	)

1185 
№ig_Ћngth
 = 
	`evbufгr_gС_Ћngth
(
buf
);

1188 
r
 = 
	`evbufгr_add
(
buf
, "abc", 0);

1189 
	`FREEZE_EQ
(
r
, 0, -1);

1190 
r
 = 
	`evbufгr_ї£rve_•aы
(
buf
, 10, 
v
, 1);

1191 
	`FREEZE_EQ
(
r
, 1, -1);

1192 iа(
r
 == 0) {

1193 
	`mem£t
(
v
[0].
iov_ba£
, 'X', 10);

1194 
v
[0].
iov_Ћn
 = 10;

1196 
r
 = 
	`evbufгr_commЩ_•aы
(
buf
, 
v
, 1);

1197 
	`FREEZE_EQ
(
r
, 0, -1);

1198 
r
 = 
	`evbufгr_add_їгїnы
(
buf
, 
°rЪg
, 5, 
NULL
, NULL);

1199 
	`FREEZE_EQ
(
r
, 0, -1);

1200 
r
 = 
	`evbufгr_add_іЪtf
(
buf
, "Hello %s", "world");

1201 
	`FREEZE_EQ
(
r
, 11, -1);

1204 iа(!
°ђt
)

1205 
	`Й_Ъt_Ё
(
№ig_Ћngth
, ==, 
	`evbufгr_gС_Ћngth
(
buf
));

1207 
№ig_Ћngth
 = 
	`evbufгr_gС_Ћngth
(
buf
);

1210 
r
 = 
	`evbufгr_їmove
(
buf
, 
chђbuf
, 1);

1211 
	`FREEZE_EQ
(
r
, -1, 1);

1212 
r
 = 
	`evbufгr_dњЪ
(
buf
, 3);

1213 
	`FREEZE_EQ
(
r
, -1, 0);

1214 
r
 = 
	`evbufгr_іХТd
(
buf
, "dummy", 5);

1215 
	`FREEZE_EQ
(
r
, -1, 0);

1216 
э
 = 
	`evbufгr_їad 
(
buf
, 
NULL
, 
EVBUFFER_EOL_LF
);

1217 
	`FREEZE_EQ
(
э
==
NULL
, 1, 0);

1218 iа(
э
)

1219 
	`дУ
(
э
);

1222 iа(
°ђt
)

1223 
	`Й_Ъt_Ё
(
№ig_Ћngth
, ==, 
	`evbufгr_gС_Ћngth
(
buf
));

1225 
Тd
:

1226 iа(
buf
)

1227 
	`evbufгr_дУ
(
buf
);

1229 iа(
tmp_buf
)

1230 
	`evbufгr_дУ
(
tmp_buf
);

1231 
	}
}

1234 
	$£tup_Јs°hrough
(cЏ° 
Л°€£_t
 *
Л°€£
)

1236  
Л°€£
->
£tup_d©a
;

1237 
	}
}

1239 
	$юЧnup_Јs°hrough
(cЏ° 
Л°€£_t
 *
Л°€£
, *
±r
)

1241 (и
±r
;

1243 
	}
}

1245 cЏ° 
Л°€£_£tup_t
 
	gnЮ_£tup
 = {

1246 
£tup_Јs°hrough
,

1247 
юЧnup_Јs°hrough


1250 
Л°€£_t
 
	gevbufгr_Л°€£s
[] = {

1251 { "evbufгr", 
Л°_evbufгr
, 0, 
NULL
, NULL },

1252 { "ї£rve2", 
Л°_evbufгr_ї£rve2
, 0, 
NULL
, NULL },

1253 { "їгїnы", 
Л°_evbufгr_їгїnы
, 0, 
NULL
, NULL },

1254 { "ЩФ©ive", 
Л°_evbufгr_ЩФ©ive
, 0, 
NULL
, NULL },

1255 { "їad ", 
Л°_evbufгr_їad 
, 
TT_NO_LOGS
, &
basic_£tup
, 
NULL
 },

1256 { "fЪd", 
Л°_evbufгr_fЪd
, 0, 
NULL
, NULL },

1257 { "±r_£t", 
Л°_evbufгr_±r_£t
, 0, 
NULL
, NULL },

1258 { "£ђch", 
Л°_evbufгr_£ђch
, 0, 
NULL
, NULL },

1259 { "€ќbacks", 
Л°_evbufгr_€ќbacks
, 0, 
NULL
, NULL },

1260 { "add_їгїnы", 
Л°_evbufгr_add_їгїnы
, 0, 
NULL
, NULL },

1261 { "іХТd", 
Л°_evbufгr_іХТd
, 0, 
NULL
, NULL },

1262 { "≥ek", 
Л°_evbufгr_≥ek
, 0, 
NULL
, NULL },

1263 { "дУze_°ђt", 
Л°_evbufгr_дУze
, 0, &
nЮ_£tup
, (*)"start" },

1264 { "дУze_Тd", 
Л°_evbufгr_дУze
, 0, &
nЮ_£tup
, (*)"end" },

1265 #iвdeа
WIN32


1267 { "add_fЮe", 
Л°_evbufгr_add_fЮe
, 0, 
NULL
, NULL },

1270 
END_OF_TESTCASES


	@test/regress_bufferevent.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sys/waЩ.h
>

44 
	~<sig«l.h
>

45 
	~<uni°d.h
>

46 
	~<√tdb.h
>

47 
	~<√tЪС/Ъ.h
>

49 
	~<fъО.h
>

50 
	~<sig«l.h
>

51 
	~<°dlib.h
>

52 
	~<°dio.h
>

53 
	~<°rЪg.h
>

54 
	~<ФЇo.h
>

55 
	~<as£є.h
>

57 #ifdeа
_EVENT_HAVE_ARPA_INET_H


58 
	~<ђЈ/ЪС.h
>

61 
	~"evТt-cЏfig.h
"

62 
	~"evТt2/evТt.h
"

63 
	~"evТt2/evТt_°ruщ.h
"

64 
	~"evТt2/evТt_comЈt.h
"

65 
	~"evТt2/Пg.h
"

66 
	~"evТt2/bufгr.h
"

67 
	~"evТt2/bufгїvТt.h
"

68 
	~"evТt2/bufгїvТt_comЈt.h
"

69 
	~"evТt2/bufгїvТt_°ruщ.h
"

70 
	~"evТt2/li°ТФ.h
"

71 
	~"evТt2/utЮ.h
"

73 
	~"bufгїvТt-ЪЛЇЃ.h
"

74 #ifdeа
WIN32


75 
	~"ioэ-ЪЛЇЃ.h
"

78 
	~"їgїss.h
"

85 
	$їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

87 iа(
	`evbufгr_gС_Ћngth
(
bev
->
Ъput
) == 8333) {

88 
evbufгr
 *
evbuf
 = 
	`evbufгr_√w
();

89 
	`as£є
(
evbuf
 !р
NULL
);

92 
	`bufгїvТt_їad_bufгr
(
bev
, 
evbuf
);

94 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

96 iа(
	`evbufгr_gС_Ћngth
(
evbuf
) == 8333) {

97 
Л°_ok
++;

100 
	`evbufгr_дУ
(
evbuf
);

102 
	}
}

105 
	$wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

107 iа(
	`evbufгr_gС_Ћngth
(
bev
->
ouНut
) == 0) {

108 
Л°_ok
++;

110 
	}
}

113 
	$Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

115 
Л°_ok
 = -2;

116 
	}
}

119 
	$Л°_bufгїvТt_imґ
(
u£_ЈЬ
)

121 
bufгїvТt
 *
bev1
 = 
NULL
, *
bev2
 = NULL;

122 
bufгr
[8333];

123 
i
;

125 iа(
u£_ЈЬ
) {

126 
bufгїvТt
 *
ЈЬ
[2];

127 
	`Й_as£є
(0 =р
	`bufгїvТt_ЈЬ_√w
(
NULL
, 0, 
ЈЬ
));

128 
bev1
 = 
ЈЬ
[0];

129 
bev2
 = 
ЈЬ
[1];

130 
	`bufгїvТt_£tcb
(
bev1
, 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

131 
	`bufгїvТt_£tcb
(
bev2
, 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

132 
	`Й_Ъt_Ё
(
	`bufгїvТt_gСfd
(
bev1
), ==, -1);

133 
	`Й_±r_Ё
(
	`bufгїvТt_gС_undФlyЪg
(
bev1
), ==, 
NULL
);

135 
bev1
 = 
	`bufгїvТt_√w
(
ЈЬ
[0], 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

136 
bev2
 = 
	`bufгїvТt_√w
(
ЈЬ
[1], 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

137 
	`Й_Ъt_Ё
(
	`bufгїvТt_gСfd
(
bev1
), ==, 
ЈЬ
[0]);

138 
	`Й_±r_Ё
(
	`bufгїvТt_gС_undФlyЪg
(
bev1
), ==, 
NULL
);

141 
	`bufгїvТt_diІbЋ
(
bev1
, 
EV_READ
);

142 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
);

144 
	`Й_Ъt_Ё
(
	`bufгїvТt_gС_ТabЋd
(
bev1
), ==, 
EV_WRITE
);

145 
	`Й_Ъt_Ё
(
	`bufгїvТt_gС_ТabЋd
(
bev2
), ==, 
EV_WRITE
|
EV_READ
);

147 
i
 = 0; i < (
bufгr
); i++)

148 
bufгr
[
i
] = i;

150 
	`bufгїvТt_wrЩe
(
bev1
, 
bufгr
, (buffer));

152 
	`evТt_di•©ch
();

154 
	`bufгїvТt_дУ
(
bev1
);

155 
	`bufгїvТt_дУ
(
bev2
);

157 iа(
Л°_ok
 != 2)

158 
Л°_ok
 = 0;

159 
Тd
:

161 
	}
}

164 
	$Л°_bufгїvТt
()

166 
	`Л°_bufгїvТt_imґ
(0);

167 
	}
}

170 
	$Л°_bufгїvТt_ЈЬ
()

172 
	`Л°_bufгїvТt_imґ
(1);

173 
	}
}

180 
	$wm_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

182 
evbufгr
 *
evbuf
 = 
	`evbufгr_√w
();

183 
Ћn
 = 
	`evbufгr_gС_Ћngth
(
bev
->
Ъput
);

184 
ƒЧd
;

186 
	`as£є
(
Ћn
 >= 10 &&Жen <= 20);

188 
	`as£є
(
evbuf
 !р
NULL
);

191 
	`bufгїvТt_їad_bufгr
(
bev
, 
evbuf
);

193 
ƒЧd
 +р
Ћn
;

194 iа(
ƒЧd
 == 65000) {

195 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

196 
Л°_ok
++;

199 
	`evbufгr_дУ
(
evbuf
);

200 
	}
}

203 
	$wm_wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

205 
	`as£є
(
	`evbufгr_gС_Ћngth
(
bev
->
ouНut
) <= 100);

206 iа(
	`evbufгr_gС_Ћngth
(
bev
->
ouНut
) == 0) {

207 
	`evbufгr_dњЪ
(
bev
->
ouНut
, 
	`evbufгr_gС_Ћngth
(bev->output));

208 
Л°_ok
++;

210 
	}
}

213 
	$wm_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

215 
Л°_ok
 = -2;

216 
	}
}

219 
	$Л°_bufгїvТt_w©Фmђks_imґ
(
u£_ЈЬ
)

221 
bufгїvТt
 *
bev1
 = 
NULL
, *
bev2
 = NULL;

222 
bufгr
[65000];

223 
i
;

224 
Л°_ok
 = 0;

226 iа(
u£_ЈЬ
) {

227 
bufгїvТt
 *
ЈЬ
[2];

228 
	`Й_as£є
(0 =р
	`bufгїvТt_ЈЬ_√w
(
NULL
, 0, 
ЈЬ
));

229 
bev1
 = 
ЈЬ
[0];

230 
bev2
 = 
ЈЬ
[1];

231 
	`bufгїvТt_£tcb
(
bev1
, 
NULL
, 
wm_wrЩecb
, 
Фr№cb
, NULL);

232 
	`bufгїvТt_£tcb
(
bev2
, 
wm_їadcb
, 
NULL
, 
Фr№cb
, NULL);

234 
bev1
 = 
	`bufгїvТt_√w
(
ЈЬ
[0], 
NULL
, 
wm_wrЩecb
, 
wm_Фr№cb
, NULL);

235 
bev2
 = 
	`bufгїvТt_√w
(
ЈЬ
[1], 
wm_їadcb
, 
NULL
, 
wm_Фr№cb
, NULL);

237 
	`bufгїvТt_diІbЋ
(
bev1
, 
EV_READ
);

238 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
);

240 
i
 = 0; i < (
bufгr
); i++)

241 
bufгr
[
i
] = ()i;

244 
	`bufгїvТt_£tw©Фmђk
(
bev2
, 
EV_READ
, 10, 20);

248 
	`bufгїvТt_£tw©Фmђk
(
bev1
, 
EV_WRITE
, 100, 2000);

250 
	`bufгїvТt_wrЩe
(
bev1
, 
bufгr
, (buffer));

252 
	`evТt_di•©ch
();

254 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

258 
	`Й_as£є
(!
	`evТt_≥ndЪg
(&
bev2
->
ev_wrЩe
, 
EV_WRITE
, 
NULL
));

260 
Тd
:

261 
	`bufгїvТt_дУ
(
bev1
);

262 
	`bufгїvТt_дУ
(
bev2
);

263 
	}
}

266 
	$Л°_bufгїvТt_w©Фmђks
()

268 
	`Л°_bufгїvТt_w©Фmђks_imґ
(0);

269 
	}
}

272 
	$Л°_bufгїvТt_ЈЬ_w©Фmђks
()

274 
	`Л°_bufгїvТt_w©Фmђks_imґ
(1);

275 
	}
}

283 
bufгїvТt_fЮЛr_їsu…


284 
	$bufгїvТt_Ъput_fЮЛr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

285 
ev_ssize_t
 
lim
, 
bufгїvТt_жush_mode
 
°©e
, *
щx
)

287 cЏ° *
bufгr
;

288 
i
;

290 
bufгr
 = 
	`evbufгr_puќup
(
§c
, 
	`evbufгr_gС_Ћngth
(src));

291 
i
 = 0; i < 
	`evbufгr_gС_Ћngth
(
§c
); i += 2) {

292 
	`as£є
(
bufгr
[
i
] == 'x');

293 
	`evbufгr_add
(
d°
, 
bufгr
 + 
i
 + 1, 1);

295 iа(
i
 + 2 > 
	`evbufгr_gС_Ћngth
(
§c
))

299 
	`evbufгr_dњЪ
(
§c
, 
i
);

300  (
BEV_OK
);

301 
	}
}

305 
bufгїvТt_fЮЛr_їsu…


306 
	$bufгїvТt_ouНut_fЮЛr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

307 
ev_ssize_t
 
lim
, 
bufгїvТt_жush_mode
 
°©e
, *
щx
)

309 cЏ° *
bufгr
;

310 
i
;

312 
bufгr
 = 
	`evbufгr_puќup
(
§c
, 
	`evbufгr_gС_Ћngth
(src));

313 
i
 = 0; i < 
	`evbufгr_gС_Ћngth
(
§c
); ++i) {

314 
	`evbufгr_add
(
d°
, "x", 1);

315 
	`evbufгr_add
(
d°
, 
bufгr
 + 
i
, 1);

318 
	`evbufгr_dњЪ
(
§c
, 
	`evbufгr_gС_Ћngth
(src));

319  (
BEV_OK
);

320 
	}
}

323 
	$Л°_bufгїvТt_fЮЛrs_imґ
(
u£_ЈЬ
)

325 
bufгїvТt
 *
bev1
 = 
NULL
, *
bev2
 = NULL;

326 
bufгїvТt
 *
bev1_ba£
 = 
NULL
, *
bev2_ba£
 = NULL;

327 
bufгr
[8333];

328 
i
;

330 
Л°_ok
 = 0;

332 iа(
u£_ЈЬ
) {

333 
bufгїvТt
 *
ЈЬ
[2];

334 
	`Й_as£є
(0 =р
	`bufгїvТt_ЈЬ_√w
(
NULL
, 0, 
ЈЬ
));

335 
bev1
 = 
ЈЬ
[0];

336 
bev2
 = 
ЈЬ
[1];

338 
bev1
 = 
	`bufгїvТt_sockС_√w
(
NULL
, 
ЈЬ
[0], 0);

339 
bev2
 = 
	`bufгїvТt_sockС_√w
(
NULL
, 
ЈЬ
[1], 0);

341 
bev1_ba£
 = 
bev1
;

342 
bev2_ba£
 = 
bev2
;

344 
i
 = 0; i < (
bufгr
); i++)

345 
bufгr
[
i
] = i;

347 
bev1
 = 
	`bufгїvТt_fЮЛr_√w
(bev1, 
NULL
, 
bufгїvТt_ouНut_fЮЛr
,

348 0, 
NULL
, NULL);

350 
bev2
 = 
	`bufгїvТt_fЮЛr_√w
(bev2, 
bufгїvТt_Ъput_fЮЛr
,

351 
NULL
, 0, NULL, NULL);

352 
	`bufгїvТt_£tcb
(
bev1
, 
NULL
, 
wrЩecb
, 
Фr№cb
, NULL);

353 
	`bufгїvТt_£tcb
(
bev2
, 
їadcb
, 
NULL
, 
Фr№cb
, NULL);

355 
	`Й_±r_Ё
(
	`bufгїvТt_gС_undФlyЪg
(
bev1
), ==, 
bev1_ba£
);

356 
	`Й_±r_Ё
(
	`bufгїvТt_gС_undФlyЪg
(
bev2
), ==, 
bev2_ba£
);

357 
	`Й_Ъt_Ё
(
	`bufгїvТt_gСfd
(
bev1
), ==, -1);

358 
	`Й_Ъt_Ё
(
	`bufгїvТt_gСfd
(
bev2
), ==, -1);

360 
	`bufгїvТt_diІbЋ
(
bev1
, 
EV_READ
);

361 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
);

363 
	`bufгїvТt_wrЩe
(
bev1
, 
bufгr
, (buffer));

365 
	`evТt_di•©ch
();

367 iа(
Л°_ok
 != 2)

368 
Л°_ok
 = 0;

370 
Тd
:

371 
	`bufгїvТt_дУ
(
bev1
);

372 
	`bufгїvТt_дУ
(
bev2
);

374 
	}
}

377 
	$Л°_bufгїvТt_fЮЛrs
()

379 
	`Л°_bufгїvТt_fЮЛrs_imґ
(0);

380 
	}
}

383 
	$Л°_bufгїvТt_ЈЬ_fЮЛrs
()

385 
	`Л°_bufгїvТt_fЮЛrs_imґ
(1);

386 
	}
}

390 
	$£ndФ_wrЩecb
(
bufгїvТt
 *
bev
, *
щx
)

392 iа(
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_ouНut
(
bev
)) == 0) {

393 
	`bufгїvТt_diІbЋ
(
bev
,
EV_READ
|
EV_WRITE
);

394 
	`bufгїvТt_дУ
(
bev
);

396 
	}
}

399 
	$£ndФ_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

401 
	`TT_FAIL
(("Gў sТdФГЉ№ %d",()
wh©
));

402 
	}
}

404 
	gn_°rЪgs_їad
 = 0;

406 
	#TEST_STR
 "Now isБheБime forЗll goodГventsБo signal for " \

407 "thРgood oаtheЬЕrўocё"

	)

409 
	$li°Т_cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
fd
,

410 
sockaddr
 *
І
, 
sockЋn
, *
ђg
)

412 
evТt_ba£
 *
ba£
 = 
ђg
;

413 
bufгїvТt
 *
bev
;

414 cЏ° 
s
[] = 
TEST_STR
;

415 
	`TT_BLATHER
(("GўЗДeque° oјsockС %d", ()
fd
 ));

416 
bev
 = 
	`bufгїvТt_sockС_√w
(
ba£
, 
fd
, 
BEV_OPT_CLOSE_ON_FREE
);

417 
	`Й_as£є
(
bev
);

418 
	`bufгїvТt_wrЩe
(
bev
, 
s
, (s));

419 
	`bufгїvТt_£tcb
(
bev
, 
NULL
, 
£ndФ_wrЩecb
, 
£ndФ_Фr№cb
, NULL);

420 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_WRITE
);

421 
Тd
:

423 
	}
}

426 
	$їadФ_evТtcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

428 
evТt_ba£
 *
ba£
 = 
щx
;

429 iа(
wh©
 & 
BEV_EVENT_ERROR
) {

430 
	`≥Љ№
("foobar");

431 
	`TT_FAIL
(("gў cЏ√щ№ГЉ№ %d", ()
wh©
));

434 iа(
wh©
 & 
BEV_EVENT_CONNECTED
) {

435 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

437 iа(
wh©
 & 
BEV_EVENT_EOF
) {

438 
buf
[512];

439 
size_t
 
n
;

440 
n
 = 
	`bufгїvТt_їad
(
bev
, 
buf
, (buf)-1);

441 
buf
[
n
] = '\0';

442 
	`Й_°r_Ё
(
buf
, ==, 
TEST_STR
);

443 iа(++
n_°rЪgs_їad
 == 2)

444 
	`evТt_ba£_loЁexЩ
(
ba£
, 
NULL
);

446 
Тd
:

448 
	}
}

451 
	$Л°_bufгїvТt_cЏ√щ
(*
ђg
)

453 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

454 
evcЏ∆i°ТФ
 *
Ћv
=
NULL
;

455 
bufгїvТt
 *
bev1
=
NULL
, *
bev2
=NULL;

456 
sockaddr_Ъ
 
lo€lho°
;

457 
sockaddr
 *
І
 = (sockaddr*)&
lo€lho°
;

458 
be_жags
=
BEV_OPT_CLOSE_ON_FREE
;

460 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "defer")) {

461 
be_жags
 |р
BEV_OPT_DEFER_CALLBACKS
;

463 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "lock")) {

464 
be_жags
 |р
BEV_OPT_THREADSAFE
;

466 #ifdeа
WIN32


467 iа(!
	`°rcmp
((*)
d©a
->
£tup_d©a
, "unset_connectex")) {

468 
wЪ32_exЛnsiЏ_вs
 *
ext
 =

469 (
wЪ32_exЛnsiЏ_вs
 *)

470 
	`evТt_gС_wЪ32_exЛnsiЏ_вs
();

471 
ext
->
CЏ√щEx
 = 
NULL
;

475 
	`mem£t
(&
lo€lho°
, 0, (localhost));

477 
lo€lho°
.
sЪ_p№t
 = 
	`htЏs
(27015);

478 
lo€lho°
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001L);

479 
lo€lho°
.
sЪ_зmЮy
 = 
AF_INET
;

481 
Ћv
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
d©a
->
ba£
, 
li°Т_cb
, data->base,

482 
LEV_OPT_CLOSE_ON_FREE
|
LEV_OPT_REUSEABLE
,

483 16, 
І
, (
lo€lho°
));

484 
	`Й_as£є
(
Ћv
);

485 
	`Й_as£є
(!
	`evcЏ∆i°ТФ_ТabЋ
(
Ћv
));

486 
bev1
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
be_жags
);

487 
bev2
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
be_жags
);

488 
	`Й_as£є
(
bev1
);

489 
	`Й_as£є
(
bev2
);

490 
	`bufгїvТt_£tcb
(
bev1
, 
NULL
, NULL, 
їadФ_evТtcb
, 
d©a
->
ba£
);

491 
	`bufгїvТt_£tcb
(
bev2
, 
NULL
, NULL, 
їadФ_evТtcb
, 
d©a
->
ba£
);

493 
	`bufгїvТt_ТabЋ
(
bev1
, 
EV_READ
);

494 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
);

496 
	`Й_w™t
(!
	`bufгїvТt_sockС_cЏ√щ
(
bev1
, 
І
, (
lo€lho°
)));

497 
	`Й_w™t
(!
	`bufгїvТt_sockС_cЏ√щ
(
bev2
, 
І
, (
lo€lho°
)));

499 #ifdeа
WIN32


502 
timevЃ
 
tv
 = {5000,0};

503 
	`evТt_ba£_loЁexЩ
(
d©a
->
ba£
, &
tv
);

506 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

508 
	`Й_Ъt_Ё
(
n_°rЪgs_їad
, ==, 2);

509 
Тd
:

510 iа(
Ћv
)

511 
	`evcЏ∆i°ТФ_дУ
(
Ћv
);

513 iа(
bev1
)

514 
	`bufгїvТt_дУ
(
bev1
);

516 iа(
bev2
)

517 
	`bufгїvТt_дУ
(
bev2
);

518 
	}
}

521 
	$w™t_зЮ_evТtcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

523 
evТt_ba£
 *
ba£
 = 
щx
;

524 cЏ° *
Фr
;

525 
evutЮ_sockС_t
 
s
;

527 iа(
wh©
 & 
BEV_EVENT_ERROR
) {

528 
s
 = 
	`bufгїvТt_gСfd
(
bev
);

529 
Фr
 = 
	`evutЮ_sockС_Фr№_to_°rЪg
(
	`evutЮ_sockС_gСФr№
(
s
));

530 
	`TT_BLATHER
(("cЏ√щiЏ faЮuї %s", 
Фr
));

531 
Л°_ok
 = 1;

533 
	`TT_FAIL
(("didn'ИзЮ? wh© %hd", 
wh©
));

536 
	`evТt_ba£_loЁexЩ
(
ba£
, 
NULL
);

537 
	}
}

540 
	$юo£_sockС_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

542 
evutЮ_sockС_t
 *
fdp
 = 
ђg
;

543 iа(*
fdp
 >= 0) {

544 
	`EVUTIL_CLOSESOCKET
(*
fdp
);

545 *
fdp
 = -1;

547 
	}
}

550 
	$Л°_bufгїvТt_cЏ√щ_зЮ
(*
ђg
)

552 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

553 
bufгїvТt
 *
bev
=
NULL
;

554 
sockaddr_Ъ
 
lo€lho°
;

555 
sockaddr
 *
І
 = (sockaddr*)&
lo€lho°
;

556 
evutЮ_sockС_t
 
зke_li°ТФ
 = -1;

557 
ev_sockЋn_t
 
¶Т
 = (
lo€lho°
);

558 
evТt
 
юo£_li°ТФ_evТt
;

559 
юo£_li°ТФ_evТt_added
 = 0;

560 
timevЃ
 
Џe_£cЏd
 = { 1, 0 };

561 
r
;

563 
Л°_ok
 = 0;

565 
	`mem£t
(&
lo€lho°
, 0, (localhost));

566 
lo€lho°
.
sЪ_p№t
 = 0;

567 
lo€lho°
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001L);

568 
lo€lho°
.
sЪ_зmЮy
 = 
AF_INET
;

572 
зke_li°ТФ
 = 
	`sockС
(
lo€lho°
.
sЪ_зmЮy
, 
SOCK_STREAM
, 0);

573 
	`Й_as£є
(
зke_li°ТФ
 >= 0);

574 
	`Й_as£є
(
	`bЪd
(
зke_li°ТФ
, 
І
, 
¶Т
) == 0);

575 
	`Й_as£є
(
	`gСsock«me
(
зke_li°ТФ
, 
І
, &
¶Т
) == 0);

576 
bev
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1,

577 
BEV_OPT_CLOSE_ON_FREE
 | 
BEV_OPT_DEFER_CALLBACKS
);

578 
	`Й_as£є
(
bev
);

579 
	`bufгїvТt_£tcb
(
bev
, 
NULL
, NULL, 
w™t_зЮ_evТtcb
, 
d©a
->
ba£
);

581 
r
 = 
	`bufгїvТt_sockС_cЏ√щ
(
bev
, 
І
, 
¶Т
);

584 
	`Й_w™t
(
r
 == 0 ||Д == -1);

588 
	`evtimФ_assign
(&
юo£_li°ТФ_evТt
, 
d©a
->
ba£
, 
юo£_sockС_cb
,

589 &
зke_li°ТФ
);

590 
	`evТt_add
(&
юo£_li°ТФ_evТt
, &
Џe_£cЏd
);

591 
юo£_li°ТФ_evТt_added
 = 1;

593 #ifdeа
WIN32


596 
timevЃ
 
tv
 = {5000,0};

597 
	`evТt_ba£_loЁexЩ
(
d©a
->
ba£
, &
tv
);

600 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

602 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

604 
Тd
:

605 iа(
зke_li°ТФ
 >= 0)

606 
	`EVUTIL_CLOSESOCKET
(
зke_li°ТФ
);

608 iа(
bev
)

609 
	`bufгїvТt_дУ
(
bev
);

611 iа(
юo£_li°ТФ_evТt_added
)

612 
	`evТt_dЦ
(&
юo£_li°ТФ_evТt
);

613 
	}
}

615 
	stimeout_cb_їsu…
 {

616 
timevЃ
 
	mїad_timeout_©
;

617 
timevЃ
 
	mwrЩe_timeout_©
;

618 
timevЃ
 
	mѕ°_wrўe_©
;

619 
	mn_їad_timeouts
;

620 
	mn_wrЩe_timeouts
;

621 
	mtўЃ_€ќs
;

625 
	$bev_timeout_wrЩe_cb
(
bufгїvТt
 *
bev
, *
ђg
)

627 
timeout_cb_їsu…
 *
їs
 = 
ђg
;

628 
	`evutЮ_gСtimeofday
(&
їs
->
ѕ°_wrўe_©
, 
NULL
);

629 
	}
}

632 
	$bev_timeout_evТt_cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

634 
timeout_cb_їsu…
 *
їs
 = 
ђg
;

635 ++
їs
->
tўЃ_€ќs
;

637 iа((
wh©
 & (
BEV_EVENT_READING
|
BEV_EVENT_TIMEOUT
))

638 =р(
BEV_EVENT_READING
|
BEV_EVENT_TIMEOUT
)) {

639 
	`evutЮ_gСtimeofday
(&
їs
->
їad_timeout_©
, 
NULL
);

640 ++
їs
->
n_їad_timeouts
;

642 iа((
wh©
 & (
BEV_EVENT_WRITING
|
BEV_EVENT_TIMEOUT
))

643 =р(
BEV_EVENT_WRITING
|
BEV_EVENT_TIMEOUT
)) {

644 
	`evutЮ_gСtimeofday
(&
їs
->
wrЩe_timeout_©
, 
NULL
);

645 ++
їs
->
n_wrЩe_timeouts
;

647 
	}
}

650 
	$Л°_bufгїvТt_timeouts
(*
ђg
)

653 
bufгїvТt
 *
bev1
 = 
NULL
, *
bev2
 = NULL;

654 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

655 
u£_ЈЬ
 = 0, 
u£_fЮЛr
 = 0;

656 
timevЃ
 
tv_w
, 
tv_r
, 
°ђЛd_©
;

657 
timeout_cb_їsu…
 
їs1
, 
їs2
;

658 
buf
[1024];

660 
	`mem£t
(&
їs1
, 0, (res1));

661 
	`mem£t
(&
їs2
, 0, (res2));

663 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "pair"))

664 
u£_ЈЬ
 = 1;

665 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "filter"))

666 
u£_fЮЛr
 = 1;

668 iа(
u£_ЈЬ
) {

669 
bufгїvТt
 *
p
[2];

670 
	`Й_Ъt_Ё
(0, ==, 
	`bufгїvТt_ЈЬ_√w
(
d©a
->
ba£
, 0, 
p
));

671 
bev1
 = 
p
[0];

672 
bev2
 = 
p
[1];

674 
bev1
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[0], 0);

675 
bev2
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[1], 0);

678 
	`Й_as£є
(
bev1
);

679 
	`Й_as£є
(
bev2
);

681 iа(
u£_fЮЛr
) {

682 
bufгїvТt
 *
bevf1
, *
bevf2
;

683 
bevf1
 = 
	`bufгїvТt_fЮЛr_√w
(
bev1
, 
NULL
, NULL,

684 
BEV_OPT_CLOSE_ON_FREE
, 
NULL
, NULL);

685 
bevf2
 = 
	`bufгїvТt_fЮЛr_√w
(
bev1
, 
NULL
, NULL,

686 
BEV_OPT_CLOSE_ON_FREE
, 
NULL
, NULL);

687 
	`Й_as£є
(
bevf1
);

688 
	`Й_as£є
(
bevf2
);

689 
bev1
 = 
bevf1
;

690 
bev2
 = 
bevf2
;

694 
	`bufгїvТt_diІbЋ
(
bev2
, 
EV_READ
);

697 
	`evutЮ_gСtimeofday
(&
°ђЛd_©
, 
NULL
);

698 
tv_w
.
tv_£c
 = 
tv_r
.tv_sec = 0;

699 
tv_w
.
tv_u£c
 = 100*1000;

700 
tv_r
.
tv_u£c
 = 150*1000;

701 
	`bufгїvТt_£tcb
(
bev1
, 
NULL
, 
bev_timeout_wrЩe_cb
,

702 
bev_timeout_evТt_cb
, &
їs1
);

703 
	`bufгїvТt_£tw©Фmђk
(
bev1
, 
EV_WRITE
, 1024*1024+10, 0);

704 
	`bufгїvТt_£t_timeouts
(
bev1
, &
tv_r
, &
tv_w
);

705 iа(
u£_ЈЬ
) {

708 
	`bufгїvТt_wrЩe
(
bev1
, "ABCDEFG", 7);

713 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
bev1
);

714 
i
;

715 
	`mem£t
(
buf
, 0xbb, (buf));

716 
i
=0;i<1024;++i) {

717 
	`evbufгr_add_їгїnы
(
ouНut
, 
buf
, (buf),

718 
NULL
, NULL);

721 
	`bufгїvТt_ТabЋ
(
bev1
, 
EV_READ
|
EV_WRITE
);

724 
	`bufгїvТt_£tcb
(
bev2
, 
NULL
, 
bev_timeout_wrЩe_cb
,

725 
bev_timeout_evТt_cb
, &
їs2
);

726 
tv_w
.
tv_£c
 = 
tv_r
.tv_sec = 0;

727 
tv_w
.
tv_u£c
 = 200*1000;

728 
tv_r
.
tv_u£c
 = 100*1000;

729 
	`bufгїvТt_£t_timeouts
(
bev2
, &
tv_r
, &
tv_w
);

730 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_WRITE
);

732 
tv_r
.
tv_£c
 = 1;

733 
tv_r
.
tv_u£c
 = 0;

735 
	`evТt_ba£_loЁexЩ
(
d©a
->
ba£
, &
tv_r
);

736 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

742 
	`Й_w™t
(
їs1
.
n_їad_timeouts
);

743 
	`Й_w™t
(
їs1
.
n_wrЩe_timeouts
);

744 
	`Й_w™t
(
їs1
.
n_їad_timeouts
 == 1);

745 
	`Й_w™t
(
їs1
.
n_wrЩe_timeouts
 == 1);

747 
	`Л°_timevЃ_diff_eq
(&
°ђЛd_©
, &
їs1
.
їad_timeout_©
, 150);

748 
	`Л°_timevЃ_diff_eq
(&
°ђЛd_©
, &
їs1
.
wrЩe_timeout_©
, 100);

750 
Тd
:

751 iа(
bev1
)

752 
	`bufгїvТt_дУ
(
bev1
);

753 iа(
bev2
)

754 
	`bufгїvТt_дУ
(
bev2
);

755 
	}
}

757 
Л°€£_t
 
	gbufгїvТt_Л°€£s
[] = {

759 
LEGACY
(
bufгїvТt
, 
TT_ISOLATED
),

760 
LEGACY
(
bufгїvТt_ЈЬ
, 
TT_ISOLATED
),

761 
LEGACY
(
bufгїvТt_w©Фmђks
, 
TT_ISOLATED
),

762 
LEGACY
(
bufгїvТt_ЈЬ_w©Фmђks
, 
TT_ISOLATED
),

763 
LEGACY
(
bufгїvТt_fЮЛrs
, 
TT_ISOLATED
),

764 
LEGACY
(
bufгїvТt_ЈЬ_fЮЛrs
, 
TT_ISOLATED
),

765 { "bufгїvТt_cЏ√щ", 
Л°_bufгїvТt_cЏ√щ
, 
TT_FORK
|
TT_NEED_BASE
,

766 &
basic_£tup
, (*)"" },

767 { "bufгїvТt_cЏ√щ_deгr", 
Л°_bufгїvТt_cЏ√щ
,

768 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, (*)"defer" },

769 { "bufгїvТt_cЏ√щ_lock", 
Л°_bufгїvТt_cЏ√щ
,

770 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_THREADS
, &
basic_£tup
, (*)"lock" },

771 { "bufгїvТt_cЏ√щ_lock_deгr", 
Л°_bufгїvТt_cЏ√щ
,

772 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_THREADS
, &
basic_£tup
,

774 { "bufгїvТt_cЏ√щ_зЮ", 
Л°_bufгїvТt_cЏ√щ_зЮ
,

775 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

776 { "bufгїvТt_timeout", 
Л°_bufгїvТt_timeouts
,

777 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_SOCKETPAIR
, &
basic_£tup
, (*)"" },

778 { "bufгїvТt_timeout_ЈЬ", 
Л°_bufгїvТt_timeouts
,

779 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, (*)"pair" },

780 { "bufгїvТt_timeout_fЮЛr", 
Л°_bufгїvТt_timeouts
,

781 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, (*)"filter" },

782 { "bufгїvТt_timeout_fЮЛr_ЈЬ", 
Л°_bufгїvТt_timeouts
,

783 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, (*)"filterЕair" },

784 #ifdeа
_EVENT_HAVE_LIBZ


785 
LEGACY
(
bufгїvТt_zlib
, 
TT_ISOLATED
),

787 { "bufгїvТt_zlib", 
NULL
, 
TT_SKIP
, NULL, NULL },

790 
END_OF_TESTCASES
,

793 
Л°€£_t
 
	gbufгїvТt_ioэ_Л°€£s
[] = {

795 
LEGACY
(
bufгїvТt
, 
TT_ISOLATED
|
TT_ENABLE_IOCP
),

796 
LEGACY
(
bufгїvТt_w©Фmђks
, 
TT_ISOLATED
|
TT_ENABLE_IOCP
),

797 
LEGACY
(
bufгїvТt_fЮЛrs
, 
TT_ISOLATED
|
TT_ENABLE_IOCP
),

798 { "bufгїvТt_cЏ√щ", 
Л°_bufгїvТt_cЏ√щ
,

799 
TT_FORK
|
TT_NEED_BASE
|
TT_ENABLE_IOCP
, &
basic_£tup
, (*)"" },

800 { "bufгїvТt_cЏ√щ_deгr", 
Л°_bufгїvТt_cЏ√щ
,

801 
TT_FORK
|
TT_NEED_BASE
|
TT_ENABLE_IOCP
, &
basic_£tup
, (*)"defer" },

802 { "bufгїvТt_cЏ√щ_lock", 
Л°_bufгїvТt_cЏ√щ
,

803 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_THREADS
|
TT_ENABLE_IOCP
, &
basic_£tup
,

805 { "bufгїvТt_cЏ√щ_lock_deгr", 
Л°_bufгїvТt_cЏ√щ
,

806 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_THREADS
|
TT_ENABLE_IOCP
, &
basic_£tup
,

808 { "bufгїvТt_cЏ√щ_зЮ", 
Л°_bufгїvТt_cЏ√щ_зЮ
,

809 
TT_FORK
|
TT_NEED_BASE
|
TT_ENABLE_IOCP
, &
basic_£tup
, 
NULL
 },

810 { "bufгїvТt_cЏ√щ_nЏblockЪg", 
Л°_bufгїvТt_cЏ√щ
,

811 
TT_FORK
|
TT_NEED_BASE
|
TT_ENABLE_IOCP
, &
basic_£tup
,

814 
END_OF_TESTCASES
,

	@test/regress_dns.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

31 
	~<ws2tэЭ.h
>

34 
	~"evТt-cЏfig.h
"

36 
	~<sys/ty≥s.h
>

37 
	~<sys/°©.h
>

38 #ifdeа
_EVENT_HAVE_SYS_TIME_H


39 
	~<sys/time.h
>

41 
	~<sys/queue.h
>

42 #iвdeа
WIN32


43 
	~<sys/sockС.h
>

44 
	~<sig«l.h
>

45 
	~<√tЪС/Ъ.h
>

46 
	~<ђЈ/ЪС.h
>

47 
	~<uni°d.h
>

49 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


50 
	~<√tЪС/Ъ6.h
>

52 #ifdeа
HAVE_NETDB_H


53 
	~<√tdb.h
>

55 
	~<fъО.h
>

56 
	~<°dlib.h
>

57 
	~<°dio.h
>

58 
	~<°rЪg.h
>

59 
	~<ФЇo.h
>

61 
	~"evТt2/evТt.h
"

62 
	~"evТt2/evТt_comЈt.h
"

63 
	~<evТt2/utЮ.h
>

64 
	~<evТt2/li°ТФ.h
>

65 
	~<evТt2/bufгїvТt.h
>

66 
	~"evdns.h
"

67 
	~"log-ЪЛЇЃ.h
"

68 
	~"їgїss.h
"

69 
	~"їgїss_Л°utЮs.h
"

71 
	gdns_ok
 = 0;

72 
	gdns_gў_€nыl
 = 0;

73 
	gdns_Фr
 = 0;

77 
	$dns_gСho°by«me_cb
(
їsu…
, 
ty≥
, 
couЅ
, 
Йl
,

78 *
addїs£s
, *
ђg
)

80 
dns_ok
 = 
dns_Фr
 = 0;

82 iа(
їsu…
 =р
DNS_ERR_TIMEOUT
) {

83 
	`іЪtf
("[Timed out] ");

84 
dns_Фr
 = 
їsu…
;

85 
out
;

88 iа(
їsu…
 !р
DNS_ERR_NONE
) {

89 
	`іЪtf
("[EЉ№ codР%d] ", 
їsu…
);

90 
out
;

93 
	`TT_BLATHER
(("ty≥: %d, couЅ: %d,БО: %d: ", 
ty≥
, 
couЅ
, 
Йl
));

95 
ty≥
) {

96 
DNS_IPv6_AAAA
: {

97 #iа
	`defЪed
(
_EVENT_HAVE_STRUCT_IN6_ADDR
и&& defЪed(
_EVENT_HAVE_INET_NTOP
и&& defЪed(
INET6_ADDRSTRLEN
)

98 
Ъ6_addr
 *
Ъ6_addrs
 = 
addїs£s
;

99 
buf
[
INET6_ADDRSTRLEN
+1];

100 
i
;

102 iа(
Йl
 < 0)

103 
out
;

104 
i
 = 0; i < 
couЅ
; ++i) {

105 cЏ° *
b
 = 
	`ЪС_ЅЁ
(
AF_INET6
, &
Ъ6_addrs
[
i
], 
buf
,(buf));

106 iа(
b
)

107 
	`TT_BLATHER
(("%†", 
b
));

109 
	`TT_BLATHER
(("%†", 
	`°їЉ№
(
ФЇo
)));

114 
DNS_IPv4_A
: {

115 
Ъ_addr
 *
Ъ_addrs
 = 
addїs£s
;

116 
i
;

118 iа(
Йl
 < 0)

119 
out
;

120 
i
 = 0; i < 
couЅ
; ++i)

121 
	`TT_BLATHER
(("%†", 
	`ЪС_Ѕя
(
Ъ_addrs
[
i
])));

124 
DNS_PTR
:

126 iа(
couЅ
 != 1)

127 
out
;

129 
	`TT_BLATHER
(("%†", *(**)
addїs£s
));

132 
out
;

135 
dns_ok
 = 
ty≥
;

137 
out
:

138 iа(
ђg
 =р
NULL
)

139 
	`evТt_loЁexЩ
(
NULL
);

141 
	`evТt_ba£_loЁexЩ
((
evТt_ba£
 *)
ђg
, 
NULL
);

142 
	}
}

145 
	$dns_gСho°by«me
()

147 
dns_ok
 = 0;

148 
	`evdns_їsёve_Эv4
("www.mЏkey.№g", 0, 
dns_gСho°by«me_cb
, 
NULL
);

149 
	`evТt_di•©ch
();

151 
	`Й_Ъt_Ё
(
dns_ok
, ==, 
DNS_IPv4_A
);

152 
Л°_ok
 = 
dns_ok
;

153 
Тd
:

155 
	}
}

158 
	$dns_gСho°by«me6
()

160 
dns_ok
 = 0;

161 
	`evdns_їsёve_Эv6
("www.Ыtf.№g", 0, 
dns_gСho°by«me_cb
, 
NULL
);

162 
	`evТt_di•©ch
();

164 iа(!
dns_ok
 && 
dns_Фr
 =р
DNS_ERR_TIMEOUT
) {

165 
	`Й_skЭ
();

168 
	`Й_Ъt_Ё
(
dns_ok
, ==, 
DNS_IPv6_AAAA
);

169 
Л°_ok
 = 1;

170 
Тd
:

172 
	}
}

175 
	$dns_gСho°byaddr
()

177 
Ъ_addr
 
Ъ
;

178 
Ъ
.
s_addr
 = 
	`htЏl
(0x7f000001ul);

179 
dns_ok
 = 0;

180 
	`evdns_їsёve_їvФ£
(&
Ъ
, 0, 
dns_gСho°by«me_cb
, 
NULL
);

181 
	`evТt_di•©ch
();

183 
	`Й_Ъt_Ё
(
dns_ok
, ==, 
DNS_PTR
);

184 
Л°_ok
 = 
dns_ok
;

185 
Тd
:

187 
	}
}

190 
	$dns_їsёve_їvФ£
(*
±r
)

192 
Ъ_addr
 
Ъ
;

193 
evТt_ba£
 *
ba£
 = 
	`evТt_ba£_√w
();

194 
evdns_ba£
 *
dns
 = 
	`evdns_ba£_√w
(
ba£
, 1 );

195 
evdns_їque°
 *
їq
 = 
NULL
;

197 
	`Й_as£є
(
ba£
);

198 
	`Й_as£є
(
dns
);

199 
Ъ
.
s_addr
 = 
	`htЏl
(0x7f000001ul);

200 
dns_ok
 = 0;

202 
їq
 = 
	`evdns_ba£_їsёve_їvФ£
(

203 
dns
, &
Ъ
, 0, 
dns_gСho°by«me_cb
, 
ba£
);

204 
	`Й_as£є
(
їq
);

206 
	`evТt_ba£_di•©ch
(
ba£
);

208 
	`Й_Ъt_Ё
(
dns_ok
, ==, 
DNS_PTR
);

210 
Тd
:

211 iа(
dns
)

212 
	`evdns_ba£_дУ
(
dns
, 0);

213 iа(
ba£
)

214 
	`evТt_ba£_дУ
(
ba£
);

215 
	}
}

217 
	gn_£rvФ_ї•Џ£s
 = 0;

220 
	$dns_£rvФ_їque°_cb
(
evdns_£rvФ_їque°
 *
їq
, *
d©a
)

222 
i
, 
r
;

223 cЏ° 
TEST_ARPA
[] = "11.11.168.192.in-addr.arpa";

224 cЏ° 
TEST_IN6
[] =

228 
i
 = 0; i < 
їq
->
nque°iЏs
; ++i) {

229 cЏ° 
qty≥
 = 
їq
->
que°iЏs
[
i
]->
ty≥
;

230 cЏ° 
qюass
 = 
їq
->
que°iЏs
[
i
]->
dns_que°iЏ_юass
;

231 cЏ° *
q«me
 = 
їq
->
que°iЏs
[
i
]->
«me
;

233 
Ъ_addr
 
™s
;

234 
™s
.
s_addr
 = 
	`htЏl
(0xc0a80b0bUL);

235 iа(
qty≥
 =р
EVDNS_TYPE_A
 &&

236 
qюass
 =р
EVDNS_CLASS_INET
 &&

237 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "zz.example.com")) {

238 
r
 = 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
q«me
,

239 1, &
™s
.
s_addr
, 12345);

240 iа(
r
<0)

241 
dns_ok
 = 0;

242 } iа(
qty≥
 =р
EVDNS_TYPE_AAAA
 &&

243 
qюass
 =р
EVDNS_CLASS_INET
 &&

244 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "zz.example.com")) {

245 
addr6
[17] = "abcdefghijklmnop";

246 
r
 = 
	`evdns_£rvФ_їque°_add_ѓѓ_їґy
(
їq
,

247 
q«me
, 1, 
addr6
, 123);

248 iа(
r
<0)

249 
dns_ok
 = 0;

250 } iа(
qty≥
 =р
EVDNS_TYPE_PTR
 &&

251 
qюass
 =р
EVDNS_CLASS_INET
 &&

252 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, 
TEST_ARPA
)) {

253 
r
 = 
	`evdns_£rvФ_їque°_add_±r_їґy
(
їq
, 
NULL
,

254 
q«me
, "ZZ.EXAMPLE.COM", 54321);

255 iа(
r
<0)

256 
dns_ok
 = 0;

257 } iа(
qty≥
 =р
EVDNS_TYPE_PTR
 &&

258 
qюass
 =р
EVDNS_CLASS_INET
 &&

259 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, 
TEST_IN6
)){

260 
r
 = 
	`evdns_£rvФ_їque°_add_±r_їґy
(
їq
, 
NULL
,

261 
q«me
,

263 iа(
r
<0)

264 
dns_ok
 = 0;

265 } iа(
qty≥
 =р
EVDNS_TYPE_A
 &&

266 
qюass
 =р
EVDNS_CLASS_INET
 &&

267 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "drop.example.com")) {

268 iа(
	`evdns_£rvФ_їque°_drЁ
(
їq
)<0)

269 
dns_ok
 = 0;

272 
	`іЪtf
("Unexpected question %d %d \"%s\" ",

273 
qty≥
, 
qюass
, 
q«me
);

274 
dns_ok
 = 0;

277 
r
 = 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 0);

278 iа(
r
<0) {

279 
	`іЪtf
("Couldn't sendДeply. ");

280 
dns_ok
 = 0;

282 
	}
}

285 
	$dns_£rvФ_gСho°by«me_cb
(
їsu…
, 
ty≥
, 
couЅ
, 
Йl
,

286 *
addїs£s
, *
ђg
)

288 iа(
їsu…
 =р
DNS_ERR_CANCEL
) {

289 iа(
ђg
 != (*)(*)90909) {

290 
	`іЪtf
("Unexpected cancelation");

291 
dns_ok
 = 0;

293 
dns_gў_€nыl
 = 1;

294 
out
;

296 iа(
їsu…
 !р
DNS_ERR_NONE
) {

297 
	`іЪtf
("U√x≥щedДesu… %d. ", 
їsu…
);

298 
dns_ok
 = 0;

299 
out
;

301 iа(
couЅ
 != 1) {

302 
	`іЪtf
("U√x≥щedЗnswФ couЅ %d. ", 
couЅ
);

303 
dns_ok
 = 0;

304 
out
;

306 
ty≥
) {

307 
DNS_IPv4_A
: {

308 
Ъ_addr
 *
Ъ_addrs
 = 
addїs£s
;

309 iа(
Ъ_addrs
[0].
s_addr
 !р
	`htЏl
(0xc0a80b0bULи|| 
Йl
 != 12345) {

310 
	`іЪtf
("Bad IPv4Дesponse \"%s\" %d. ",

311 
	`ЪС_Ѕя
(
Ъ_addrs
[0]), 
Йl
);

312 
dns_ok
 = 0;

313 
out
;

317 
DNS_IPv6_AAAA
: {

318 #iа
	`defЪed
 (
_EVENT_HAVE_STRUCT_IN6_ADDR
и&& defЪed(
_EVENT_HAVE_INET_NTOP
и&& defЪed(
INET6_ADDRSTRLEN
)

319 
Ъ6_addr
 *
Ъ6_addrs
 = 
addїs£s
;

320 
buf
[
INET6_ADDRSTRLEN
+1];

321 iа(
	`memcmp
(&
Ъ6_addrs
[0].
s6_addr
, "abcdefghijklmnop", 16)

322 || 
Йl
 != 123) {

323 cЏ° *
b
 = 
	`ЪС_ЅЁ
(
AF_INET6
, &
Ъ6_addrs
[0],
buf
,(buf));

324 
	`іЪtf
("Bad IPv6Дe•Џ£ \"%s\" %d. ", 
b
, 
Йl
);

325 
dns_ok
 = 0;

326 
out
;

331 
DNS_PTR
: {

332 **
addrs
 = 
addїs£s
;

333 iа(
ђg
 != (*)6) {

334 iа(
	`°rcmp
(
addrs
[0], "ZZ.EXAMPLE.COM") ||

335 
Йl
 != 54321) {

336 
	`іЪtf
("Bad PTRДesponse \"%s\" %d. ",

337 
addrs
[0], 
Йl
);

338 
dns_ok
 = 0;

339 
out
;

342 iа(
	`°rcmp
(
addrs
[0], "ZZ-INET6.EXAMPLE.COM") ||

343 
Йl
 != 54322) {

344 
	`іЪtf
("Bad ipv6 PTRДesponse \"%s\" %d. ",

345 
addrs
[0], 
Йl
);

346 
dns_ok
 = 0;

347 
out
;

353 
	`іЪtf
("BadДe•Џ£Бy≥ %d. ", 
ty≥
);

354 
dns_ok
 = 0;

356 
out
:

357 iа(++
n_£rvФ_ї•Џ£s
 == 3) {

358 
	`evТt_loЁexЩ
(
NULL
);

360 
	}
}

363 
	$dns_£rvФ
()

365 
evutЮ_sockС_t
 
sock
=-1;

366 
sockaddr_Ъ
 
my_addr
;

367 
evdns_£rvФ_p№t
 *
p№t
=
NULL
;

368 
Ъ_addr
 
їsёve_addr
;

369 
Ъ6_addr
 
їsёve_addr6
;

370 
evdns_ba£
 *
ba£
=
NULL
;

371 
evdns_їque°
 *
їq
=
NULL
;

373 
dns_ok
 = 1;

375 
ba£
 = 
	`evdns_ba£_√w
(
NULL
, 0);

379 
	`evdns_ba£_«me£rvФ_Э_add
(
ba£
, "127.0.0.1:35353");

381 
	`Й_Ъt_Ё
(
	`evdns_ba£_couЅ_«me£rvФs
(
ba£
), ==, 1);

383 
sock
 = 
	`sockС
(
AF_INET
, 
SOCK_DGRAM
, 0);

384 iа(
sock
<0) {

385 
	`Й_ab№t_≥Љ№
("socket");

388 
	`evutЮ_make_sockС_nЏblockЪg
(
sock
);

390 
	`mem£t
(&
my_addr
, 0, (my_addr));

391 
my_addr
.
sЪ_зmЮy
 = 
AF_INET
;

392 
my_addr
.
sЪ_p№t
 = 
	`htЏs
(35353);

393 
my_addr
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001UL);

394 iа(
	`bЪd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr)) < 0) {

395 
	`Й_ab№t_≥Љ№
("bind");

397 
p№t
 = 
	`evdns_add_£rvФ_p№t
(
sock
, 0, 
dns_£rvФ_їque°_cb
, 
NULL
);

400 
	`evdns_ba£_їsёve_Эv4
(
ba£
, "zz.examґe.com", 
DNS_QUERY_NO_SEARCH
,

401 
dns_£rvФ_gСho°by«me_cb
, 
NULL
);

402 
	`evdns_ba£_їsёve_Эv6
(
ba£
, "zz.examґe.com", 
DNS_QUERY_NO_SEARCH
,

403 
dns_£rvФ_gСho°by«me_cb
, 
NULL
);

404 
їsёve_addr
.
s_addr
 = 
	`htЏl
(0xc0a80b0bUL);

405 
	`evdns_ba£_їsёve_їvФ£
(
ba£
, &
їsёve_addr
, 0,

406 
dns_£rvФ_gСho°by«me_cb
, 
NULL
);

407 
	`memэy
(
їsёve_addr6
.
s6_addr
,

410 
	`evdns_ba£_їsёve_їvФ£_Эv6
(
ba£
, &
їsёve_addr6
, 0,

411 
dns_£rvФ_gСho°by«me_cb
, (*)6);

413 
їq
 = 
	`evdns_ba£_їsёve_Эv4
(
ba£
,

414 "drЁ.examґe.com", 
DNS_QUERY_NO_SEARCH
,

415 
dns_£rvФ_gСho°by«me_cb
, (*)(*)90909);

417 
	`evdns_€nыl_їque°
(
ba£
, 
їq
);

419 
	`evТt_di•©ch
();

421 
	`Й_as£є
(
dns_gў_€nыl
);

422 
Л°_ok
 = 
dns_ok
;

424 
Тd
:

425 iа(
p№t
)

426 
	`evdns_юo£_£rvФ_p№t
(
p№t
);

427 iа(
sock
 >= 0)

428 
	`EVUTIL_CLOSESOCKET
(
sock
);

429 iа(
ba£
)

430 
	`evdns_ba£_дУ
(
ba£
, 0);

431 
	}
}

433 
	gn_їґЫs_Ћб
;

434 
evТt_ba£
 *
	gexЩ_ba£
;

436 
	sgТФic_dns_€ќback_їsu…
 {

437 
	mїsu…
;

438 
	mty≥
;

439 
	mcouЅ
;

440 
	mЙl
;

441 *
	maddrs
;

445 
	$gТФic_dns_€ќback
(
їsu…
, 
ty≥
, 
couЅ
, 
Йl
, *
addїs£s
,

446 *
ђg
)

448 
size_t
 
Ћn
;

449 
gТФic_dns_€ќback_їsu…
 *
їs
 = 
ђg
;

450 
їs
->
їsu…
 =Дesult;

451 
їs
->
ty≥
 =Бype;

452 
їs
->
couЅ
 = count;

453 
їs
->
Йl
 =Бtl;

455 iа(
ty≥
 =р
DNS_IPv4_A
)

456 
Ћn
 = 
couЅ
 * 4;

457 iа(
ty≥
 =р
DNS_IPv6_AAAA
)

458 
Ћn
 = 
couЅ
 * 16;

459 iа(
ty≥
 =р
DNS_PTR
)

460 
Ћn
 = 
	`°ЊТ
(
addїs£s
)+1;

462 
Ћn
 = 0;

463 
їs
->
addrs
 = 
NULL
;

465 iа(
Ћn
) {

466 
їs
->
addrs
 = 
	`mЃloc
(
Ћn
);

467 
	`memэy
(
їs
->
addrs
, 
addїs£s
, 
Ћn
);

470 iа(--
n_їґЫs_Ћб
 == 0)

471 
	`evТt_ba£_loЁexЩ
(
exЩ_ba£
, 
NULL
);

472 
	}
}

474 
їgїss_dns_£rvФ_ПbЋ
 
	g£ђch_ПbЋ
[] = {

485 { 
NULL
, NULL, NULL, 0 }

489 
	$dns_£ђch_Л°
(*
ђg
)

491 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

492 
evТt_ba£
 *
ba£
 = 
d©a
->base;

493 
evdns_ba£
 *
dns
 = 
NULL
;

494 
ev_uЪt16_t
 
p№Кum
 = 53900;

496 
gТФic_dns_€ќback_їsu…
 
r1
, 
r2
, 
r3
, 
r4
, 
r5
;

498 
	`Й_as£є
(
	`їgїss_dns£rvФ
(
ba£
, &
p№Кum
, 
£ђch_ПbЋ
));

500 
dns
 = 
	`evdns_ba£_√w
(
ba£
, 0);

501 
	`Й_as£є
(!
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, "127.0.0.1:53900"));

503 
	`evdns_ba£_£ђch_add
(
dns
, "a.example.com");

504 
	`evdns_ba£_£ђch_add
(
dns
, "b.example.com");

505 
	`evdns_ba£_£ђch_add
(
dns
, "c.example.com");

507 
n_їґЫs_Ћб
 = 5;

508 
exЩ_ba£
 = 
ba£
;

510 
	`evdns_ba£_їsёve_Эv4
(
dns
, "ho°", 0, 
gТФic_dns_€ќback
, &
r1
);

511 
	`evdns_ba£_їsёve_Эv4
(
dns
, "ho°2", 0, 
gТФic_dns_€ќback
, &
r2
);

512 
	`evdns_ba£_їsёve_Эv4
(
dns
, "ho°", 
DNS_NO_SEARCH
, 
gТФic_dns_€ќback
, &
r3
);

513 
	`evdns_ba£_їsёve_Эv4
(
dns
, "ho°2", 
DNS_NO_SEARCH
, 
gТФic_dns_€ќback
, &
r4
);

514 
	`evdns_ba£_їsёve_Эv4
(
dns
, "ho°3", 0, 
gТФic_dns_€ќback
, &
r5
);

516 
	`evТt_ba£_di•©ch
(
ba£
);

518 
	`Й_Ъt_Ё
(
r1
.
ty≥
, ==, 
DNS_IPv4_A
);

519 
	`Й_Ъt_Ё
(
r1
.
couЅ
, ==, 1);

520 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r1
.
addrs
)[0], ==, 
	`htЏl
(0x0b16212c));

521 
	`Й_Ъt_Ё
(
r2
.
ty≥
, ==, 
DNS_IPv4_A
);

522 
	`Й_Ъt_Ё
(
r2
.
couЅ
, ==, 1);

523 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r2
.
addrs
)[0], ==, 
	`htЏl
(0xc8640064));

524 
	`Й_Ъt_Ё
(
r3
.
їsu…
, ==, 
DNS_ERR_NOTEXIST
);

525 
	`Й_Ъt_Ё
(
r4
.
їsu…
, ==, 
DNS_ERR_NOTEXIST
);

526 
	`Й_Ъt_Ё
(
r5
.
їsu…
, ==, 
DNS_ERR_NOTEXIST
);

528 
Тd
:

529 iа(
dns
)

530 
	`evdns_ba£_дУ
(
dns
, 0);

532 
	`їgїss_юЧn_dns£rvФ
();

533 
	}
}

536 
	$зЮ_£rvФ_cb
(
evdns_£rvФ_їque°
 *
їq
, *
d©a
)

538 cЏ° *
que°iЏ
;

539 *
couЅ
 = 
d©a
;

540 
Ъ_addr
 
Ъ
;

543 iа(*
couЅ
 > 0) {

544 --*
couЅ
;

545 
	`Й_w™t
(! 
	`evdns_£rvФ_їque°_drЁ
(
їq
));

549 iа(
їq
->
nque°iЏs
 != 1)

550 
	`TT_DIE
(("Only handling one questionЗtЗБime; got %d",

551 
їq
->
nque°iЏs
));

553 
que°iЏ
 = 
їq
->
que°iЏs
[0]->
«me
;

555 iа(!
	`evutЮ_ascii_°r€£cmp
(
que°iЏ
, "google.com")) {

557 
	`evТt_ba£_loЁexЩ
(
exЩ_ba£
, 
NULL
);

560 
	`evutЮ_ЪС_±Џ
(
AF_INET
, "16.32.64.128", &
Ъ
);

561 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
que°iЏ
, 1, &
Ъ
.
s_addr
,

563 
	`Й_as£є
(! 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 0))

565 
Тd
:

566 
	`Й_w™t
(! 
	`evdns_£rvФ_їque°_drЁ
(
їq
));

567 
	}
}

570 
	$dns_їМy_Л°
(*
ђg
)

572 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

573 
evТt_ba£
 *
ba£
 = 
d©a
->base;

574 
evdns_£rvФ_p№t
 *
p№t
 = 
NULL
;

575 
evdns_ba£
 *
dns
 = 
NULL
;

576 
drЁ_couЅ
 = 2;

577 
ev_uЪt16_t
 
p№Кum
 = 53900;

579 
gТФic_dns_€ќback_їsu…
 
r1
;

581 
p№t
 = 
	`їgїss_gС_dns£rvФ
(
ba£
, &
p№Кum
, 
NULL
,

582 
зЮ_£rvФ_cb
, &
drЁ_couЅ
);

583 
	`Й_as£є
(
p№t
);

585 
dns
 = 
	`evdns_ba£_√w
(
ba£
, 0);

586 
	`Й_as£є
(!
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, "127.0.0.1:53900"));

587 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "timeout", "0.3"));

588 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "max-timeouts:", "10"));

589 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "initial-probe-timeout", "0.5"));

591 
	`evdns_ba£_їsёve_Эv4
(
dns
, "host.example.com", 0,

592 
gТФic_dns_€ќback
, &
r1
);

594 
n_їґЫs_Ћб
 = 1;

595 
exЩ_ba£
 = 
ba£
;

597 
	`evТt_ba£_di•©ch
(
ba£
);

599 
	`Й_Ъt_Ё
(
drЁ_couЅ
, ==, 0);

601 
	`Й_Ъt_Ё
(
r1
.
ty≥
, ==, 
DNS_IPv4_A
);

602 
	`Й_Ъt_Ё
(
r1
.
couЅ
, ==, 1);

603 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r1
.
addrs
)[0], ==, 
	`htЏl
(0x10204080));

607 
drЁ_couЅ
 = 4;

608 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "max-timeouts:", "3"));

609 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "attempts:", "4"));

610 
	`mem£t
(&
r1
, 0, (r1));

612 
	`evdns_ba£_їsёve_Эv4
(
dns
, "host.example.com", 0,

613 
gТФic_dns_€ќback
, &
r1
);

615 
n_їґЫs_Ћб
 = 2;

618 
	`evТt_ba£_di•©ch
(
ba£
);

621 
	`Й_Ъt_Ё
(
r1
.
їsu…
, ==, 
DNS_ERR_TIMEOUT
);

624 
	`Й_Ъt_Ё
(
drЁ_couЅ
, ==, 0);

625 
	`evdns_ba£_їsёve_Эv4
(
dns
, "host.example.com", 0,

626 
gТФic_dns_€ќback
, &
r1
);

628 
	`evТt_ba£_di•©ch
(
ba£
);

629 
	`Й_Ъt_Ё
(
r1
.
їsu…
, ==, 
DNS_ERR_NONE
);

630 
	`Й_Ъt_Ё
(
r1
.
ty≥
, ==, 
DNS_IPv4_A
);

631 
	`Й_Ъt_Ё
(
r1
.
couЅ
, ==, 1);

632 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r1
.
addrs
)[0], ==, 
	`htЏl
(0x10204080));

634 
Тd
:

635 iа(
dns
)

636 
	`evdns_ba£_дУ
(
dns
, 0);

637 iа(
p№t
)

638 
	`evdns_юo£_£rvФ_p№t
(
p№t
);

639 
	}
}

641 
їgїss_dns_£rvФ_ПbЋ
 
	gЪЛЇЃ_Фr№_ПbЋ
[] = {

648 { 
NULL
, NULL, NULL, 0 }

651 
їgїss_dns_£rvФ_ПbЋ
 
	gїissue_ПbЋ
[] = {

653 { 
NULL
, NULL, NULL, 0 }

657 
	$dns_їissue_Л°
(*
ђg
)

659 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

660 
evТt_ba£
 *
ba£
 = 
d©a
->base;

661 
evdns_£rvФ_p№t
 *
p№t1
 = 
NULL
, *
p№t2
 = NULL;

662 
evdns_ba£
 *
dns
 = 
NULL
;

663 
gТФic_dns_€ќback_їsu…
 
r1
;

664 
ev_uЪt16_t
 
p№Кum1
 = 53900, 
p№Кum2
=53901;

666 
p№t1
 = 
	`їgїss_gС_dns£rvФ
(
ba£
, &
p№Кum1
, 
NULL
,

667 
їgїss_dns_£rvФ_cb
, 
ЪЛЇЃ_Фr№_ПbЋ
);

668 
	`Й_as£є
(
p№t1
);

669 
p№t2
 = 
	`їgїss_gС_dns£rvФ
(
ba£
, &
p№Кum2
, 
NULL
,

670 
їgїss_dns_£rvФ_cb
, 
їissue_ПbЋ
);

671 
	`Й_as£є
(
p№t2
);

673 
dns
 = 
	`evdns_ba£_√w
(
ba£
, 0);

674 
	`Й_as£є
(!
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, "127.0.0.1:53900"));

675 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "timeout:", "0.3"));

676 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "max-timeouts:", "2"));

677 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "attempts:", "5"));

679 
	`mem£t
(&
r1
, 0, (r1));

680 
	`evdns_ba£_їsёve_Эv4
(
dns
, "foof.example.com", 0,

681 
gТФic_dns_€ќback
, &
r1
);

684 
	`Й_as£є
(!
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, "127.0.0.1:53901"));

686 
n_їґЫs_Ћб
 = 1;

687 
exЩ_ba£
 = 
ba£
;

689 
	`evТt_ba£_di•©ch
(
ba£
);

690 
	`Й_Ъt_Ё
(
r1
.
їsu…
, ==, 
DNS_ERR_NONE
);

691 
	`Й_Ъt_Ё
(
r1
.
ty≥
, ==, 
DNS_IPv4_A
);

692 
	`Й_Ъt_Ё
(
r1
.
couЅ
, ==, 1);

693 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r1
.
addrs
)[0], ==, 
	`htЏl
(0xf00ff00f));

696 
	`Й_Ъt_Ё
(
ЪЛЇЃ_Фr№_ПbЋ
[0].
£Т
, >, 0);

698 
Тd
:

699 iа(
dns
)

700 
	`evdns_ba£_дУ
(
dns
, 0);

701 iа(
p№t1
)

702 
	`evdns_юo£_£rvФ_p№t
(
p№t1
);

703 iа(
p№t2
)

704 
	`evdns_юo£_£rvФ_p№t
(
p№t2
);

705 
	}
}

709 
	$dumb_byЛs_в
(*
p
, 
size_t
 
n
)

711 
i
;

714 
i
=0;i<
n
;++i)

715 
p
[
i
] = ()(
	`њnd
() & 7);

716 
	}
}

720 
	$dns_Ъжight_Л°
(*
ђg
)

722 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

723 
evТt_ba£
 *
ba£
 = 
d©a
->base;

724 
evdns_ba£
 *
dns
 = 
NULL
;

725 
ev_uЪt16_t
 
p№Кum
 = 53900;

727 
gТФic_dns_€ќback_їsu…
 
r
[20];

728 
i
;

730 
	`Й_as£є
(
	`їgїss_dns£rvФ
(
ba£
, &
p№Кum
, 
їissue_ПbЋ
));

735 
	`evdns_£t_њndom_byЛs_в
(
dumb_byЛs_в
);

738 
dns
 = 
	`evdns_ba£_√w
(
ba£
, 0);

739 
	`Й_as£є
(!
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, "127.0.0.1:53900"));

740 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "max-inflight:", "3"));

741 
	`Й_as£є
(! 
	`evdns_ba£_£t_ЁtiЏ
(
dns
, "randomize-case:", "0"));

743 
i
=0;i<20;++i)

744 
	`evdns_ba£_їsёve_Эv4
(
dns
, "foof.examґe.com", 0, 
gТФic_dns_€ќback
, &
r
[
i
]);

746 
n_їґЫs_Ћб
 = 20;

747 
exЩ_ba£
 = 
ba£
;

749 
	`evТt_ba£_di•©ch
(
ba£
);

751 
i
=0;i<20;++i) {

752 
	`Й_Ъt_Ё
(
r
[
i
].
ty≥
, ==, 
DNS_IPv4_A
);

753 
	`Й_Ъt_Ё
(
r
[
i
].
couЅ
, ==, 1);

754 
	`Й_Ъt_Ё
(((
ev_uЪt32_t
*)
r
[
i
].
addrs
)[0], ==, 
	`htЏl
(0xf00ff00f));

757 
Тd
:

758 iа(
dns
)

759 
	`evdns_ba£_дУ
(
dns
, 0);

760 
	`їgїss_юЧn_dns£rvФ
();

761 
	}
}

765 
	gtўЃ_cЏ√щed_№_зЮed
 = 0;

766 
evТt_ba£
 *
	gbe_cЏ√щ_ho°«me_ba£
 = 
NULL
;

771 
	$be_gСaddrЪfo_£rvФ_cb
(
evdns_£rvФ_їque°
 *
їq
, *
d©a
)

773 
i
;

774 *
n_gў_p
=
d©a
;

775 
added_™y
=0;

776 ++*
n_gў_p
;

778 
i
=0;i<
їq
->
nque°iЏs
;++i) {

779 cЏ° 
qty≥
 = 
їq
->
que°iЏs
[
i
]->
ty≥
;

780 cЏ° 
qюass
 = 
їq
->
que°iЏs
[
i
]->
dns_que°iЏ_юass
;

781 cЏ° *
q«me
 = 
їq
->
que°iЏs
[
i
]->
«me
;

782 
Ъ_addr
 
™s
;

783 
Ъ6_addr
 
™s6
;

784 
	`mem£t
(&
™s6
, 0, (ans6));

786 iа(
qty≥
 =р
EVDNS_TYPE_A
 &&

787 
qюass
 =р
EVDNS_CLASS_INET
 &&

788 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "nobodaddy.example.com")) {

789 
™s
.
s_addr
 = 
	`htЏl
(0x7f000001);

790 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
q«me
,

791 1, &
™s
.
s_addr
, 2000);

792 
added_™y
 = 1;

793 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

796 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

798 iа(
qty≥
 =р
EVDNS_TYPE_A
) {

799 
™s
.
s_addr
 = 
	`htЏl
(0x50502020);

800 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
q«me
,

801 1, &
™s
.
s_addr
, 2000);

802 
added_™y
 = 1;

803 } iа(
qty≥
 =р
EVDNS_TYPE_AAAA
) {

804 
™s6
.
s6_addr
[0] = 0x80;

805 
™s6
.
s6_addr
[1] = 0xff;

806 
™s6
.
s6_addr
[14] = 0xbb;

807 
™s6
.
s6_addr
[15] = 0xbb;

808 
	`evdns_£rvФ_їque°_add_ѓѓ_їґy
(
їq
, 
q«me
,

809 1, &
™s6
.
s6_addr
, 2000);

810 
added_™y
 = 1;

812 
	`evdns_£rvФ_їque°_add_ъame_їґy
(
їq
, 
q«me
,

814 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

816 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "v4assert.example.com")) {

817 iа(
qty≥
 =р
EVDNS_TYPE_A
) {

818 
™s
.
s_addr
 = 
	`htЏl
(0x12345678);

819 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
q«me
,

820 1, &
™s
.
s_addr
, 2000);

821 
added_™y
 = 1;

822 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

824 
	`TT_FAIL
(("GotЗn AAAAДequest for v4assert"));

826 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

828 !
	`evutЮ_ascii_°r€£cmp
(
q«me
, "v6assert.example.com")) {

829 iа(
qty≥
 =р
EVDNS_TYPE_AAAA
) {

830 
™s6
.
s6_addr
[0] = 0x0b;

831 
™s6
.
s6_addr
[1] = 0x0b;

832 
™s6
.
s6_addr
[14] = 0xf0;

833 
™s6
.
s6_addr
[15] = 0x0d;

834 
	`evdns_£rvФ_їque°_add_ѓѓ_їґy
(
їq
, 
q«me
,

835 1, &
™s6
.
s6_addr
, 2000);

836 
added_™y
 = 1;

837 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

839 
	`TT_FAIL
(("GotЗ AДequest for v6assert"));

841 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

843 iа(
qty≥
 =р
EVDNS_TYPE_A
) {

844 
™s
.
s_addr
 = 
	`htЏl
(0xabcdef01);

845 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
q«me
,

846 1, &
™s
.
s_addr
, 2000);

847 
added_™y
 = 1;

848 } iа(
qty≥
 =р
EVDNS_TYPE_AAAA
) {

850 
	`evdns_£rvФ_їque°_drЁ
(
їq
);

853 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

855 iа(
qty≥
 =р
EVDNS_TYPE_AAAA
) {

856 
™s6
.
s6_addr
[0] = 0x0a;

857 
™s6
.
s6_addr
[1] = 0x0a;

858 
™s6
.
s6_addr
[14] = 0xff;

859 
™s6
.
s6_addr
[15] = 0x01;

860 
	`evdns_£rvФ_їque°_add_ѓѓ_їґy
(
їq
, 
q«me
,

861 1, &
™s6
.
s6_addr
, 2000);

862 
added_™y
 = 1;

863 } iа(
qty≥
 =р
EVDNS_TYPE_A
) {

865 
	`evdns_£rvФ_їque°_drЁ
(
їq
);

868 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

870 iа(
qty≥
 =р
EVDNS_TYPE_A
) {

872 } iа(
qty≥
 =р
EVDNS_TYPE_AAAA
) {

874 
	`evdns_£rvФ_їque°_drЁ
(
їq
);

877 } iа(!
	`evutЮ_ascii_°r€£cmp
(
q«me
,

880 
	`evdns_£rvФ_їque°_drЁ
(
їq
);

883 
	`TT_GRIPE
(("Gў weЬdДeque° f№ %s",
q«me
));

886 iа(
added_™y
)

887 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 0);

889 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 3);

890 
	}
}

894 
	$nЮ_acы±_cb
(
evcЏ∆i°ТФ
 *
l
, 
evutЮ_sockС_t
 
fd
, 
sockaddr
 *
s
,

895 
sockЋn
, *
ђg
)

897 *
p
 = 
ђg
;

898 (*
p
)++;

900 
	}
}

905 
	$be_cЏ√щ_ho°«me_evТt_cb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

907 *
gў
 = 
щx
;

908 iа(!*
gў
) {

909 
	`TT_BLATHER
(("GўЗ bufгїvТИevТИ%d", 
wh©
));

910 *
gў
 = 
wh©
;

912 iа((
wh©
 & 
BEV_EVENT_CONNECTED
и|| (wh© & 
BEV_EVENT_ERROR
)) {

913 ++
tўЃ_cЏ√щed_№_зЮed
;

914 
	`TT_BLATHER
(("Gў %d cЏ√щiЏ†№ГЉ№s.", 
tўЃ_cЏ√щed_№_зЮed
));

915 iа(
tўЃ_cЏ√щed_№_зЮed
 >= 5)

916 
	`evТt_ba£_loЁexЩ
(
be_cЏ√щ_ho°«me_ba£
,

917 
NULL
);

920 
	`TT_FAIL
(("TwoГvents on one bufferevent. %d,%d",

921 ()*
gў
, ()
wh©
));

923 
	}
}

926 
	$Л°_bufгїvТt_cЏ√щ_ho°«me
(*
ђg
)

928 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

929 
evcЏ∆i°ТФ
 *
li°ТФ
 = 
NULL
;

930 
bufгїvТt
 *
be1
=
NULL
, *
be2
=NULL, *
be3
=NULL, *
be4
=NULL, *
be5
=NULL;

931 
be1_outcome
=0, 
be2_outcome
=0, 
be3_outcome
=0, 
be4_outcome
=0,

932 
be5_outcome
=0;

933 
evdns_ba£
 *
dns
=
NULL
;

934 
evdns_£rvФ_p№t
 *
p№t
=
NULL
;

935 
evutЮ_sockС_t
 
£rvФ_fd
=-1;

936 
sockaddr_Ъ
 
sЪ
;

937 
li°ТФ_p№t
=-1;

938 
ev_uЪt16_t
 
dns_p№t
=0;

939 
n_acы±
=0, 
n_dns
=0;

940 
buf
[128];

942 
be_cЏ√щ_ho°«me_ba£
 = 
d©a
->
ba£
;

945 
	`mem£t
(&
sЪ
, 0, (sin));

946 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

947 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

948 
sЪ
.
sЪ_p№t
 = 0;

949 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
d©a
->
ba£
, 
nЮ_acы±_cb
,

950 &
n_acы±
,

951 
LEV_OPT_REUSEABLE
|
LEV_OPT_CLOSE_ON_EXEC
,

952 -1, (
sockaddr
 *)&
sЪ
, (sin));

953 
li°ТФ_p№t
 = 
	`їgїss_gС_sockС_p№t
(

954 
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ
));

956 
p№t
 = 
	`їgїss_gС_dns£rvФ
(
d©a
->
ba£
, &
dns_p№t
, 
NULL
,

957 
be_gСaddrЪfo_£rvФ_cb
, &
n_dns
);

958 
	`Й_as£є
(
p№t
);

959 
	`Й_Ъt_Ё
(
dns_p№t
, >=, 0);

962 
dns
 = 
	`evdns_ba£_√w
(
d©a
->
ba£
, 0);

963 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "127.0.0.1:%d", 
dns_p№t
);

964 
	`evdns_ba£_«me£rvФ_Э_add
(
dns
, 
buf
);

969 
be1
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
BEV_OPT_CLOSE_ON_FREE
);

970 
be2
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
BEV_OPT_CLOSE_ON_FREE
);

971 
be3
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
BEV_OPT_CLOSE_ON_FREE
);

972 
be4
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
BEV_OPT_CLOSE_ON_FREE
);

973 
be5
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, -1, 
BEV_OPT_CLOSE_ON_FREE
);

975 
	`bufгїvТt_£tcb
(
be1
, 
NULL
, NULL, 
be_cЏ√щ_ho°«me_evТt_cb
,

976 &
be1_outcome
);

977 
	`bufгїvТt_£tcb
(
be2
, 
NULL
, NULL, 
be_cЏ√щ_ho°«me_evТt_cb
,

978 &
be2_outcome
);

979 
	`bufгїvТt_£tcb
(
be3
, 
NULL
, NULL, 
be_cЏ√щ_ho°«me_evТt_cb
,

980 &
be3_outcome
);

981 
	`bufгїvТt_£tcb
(
be4
, 
NULL
, NULL, 
be_cЏ√щ_ho°«me_evТt_cb
,

982 &
be4_outcome
);

983 
	`bufгїvТt_£tcb
(
be5
, 
NULL
, NULL, 
be_cЏ√щ_ho°«me_evТt_cb
,

984 &
be5_outcome
);

987 
	`Й_as£є
(!
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
be1
, 
dns
, 
AF_INET
,

988 "nosuchґaы.examґe.com", 
li°ТФ_p№t
));

990 
	`Й_as£є
(!
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
be2
, 
dns
, 
AF_INET
,

991 "127.0.0.1", 
li°ТФ_p№t
));

993 
	`Й_as£є
(!
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
be3
, 
dns
, 
AF_INET
,

994 "nobodaddy.examґe.com", 
li°ТФ_p№t
));

997 
	`Й_as£є
(!
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
be4
, 
NULL
, 
AF_INET
,

998 "lo€lho°", 
li°ТФ_p№t
));

1000 
	`Й_as£є
(!
	`bufгїvТt_sockС_cЏ√щ_ho°«me
(
be5
, 
NULL
, 
AF_INET
,

1003 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

1005 
	`Й_Ъt_Ё
(
be1_outcome
, ==, 
BEV_EVENT_ERROR
);

1006 
	`Й_Ъt_Ё
(
be2_outcome
, ==, 
BEV_EVENT_CONNECTED
);

1007 
	`Й_Ъt_Ё
(
be3_outcome
, ==, 
BEV_EVENT_CONNECTED
);

1008 
	`Й_Ъt_Ё
(
be4_outcome
, ==, 
BEV_EVENT_CONNECTED
);

1009 
	`Й_Ъt_Ё
(
be5_outcome
, ==, 
BEV_EVENT_ERROR
);

1011 
	`Й_Ъt_Ё
(
n_acы±
, ==, 3);

1012 
	`Й_Ъt_Ё
(
n_dns
, ==, 2);

1014 
Тd
:

1015 iа(
li°ТФ
)

1016 
	`evcЏ∆i°ТФ_дУ
(
li°ТФ
);

1017 iа(
£rvФ_fd
>=0)

1018 
	`EVUTIL_CLOSESOCKET
(
£rvФ_fd
);

1019 iа(
p№t
)

1020 
	`evdns_юo£_£rvФ_p№t
(
p№t
);

1021 iа(
dns
)

1022 
	`evdns_ba£_дУ
(
dns
, 0);

1023 iа(
be1
)

1024 
	`bufгїvТt_дУ
(
be1
);

1025 iа(
be2
)

1026 
	`bufгїvТt_дУ
(
be2
);

1027 iа(
be3
)

1028 
	`bufгїvТt_дУ
(
be3
);

1029 iа(
be4
)

1030 
	`bufгїvТt_дУ
(
be4
);

1031 iа(
be5
)

1032 
	`bufгїvТt_дУ
(
be5
);

1033 
	}
}

1036 
	sgai_outcome
 {

1037 
	mФr
;

1038 
evutЮ_addrЪfo
 *
	mai
;

1041 
	gn_gai_їsu…s_≥ndЪg
 = 0;

1042 
evТt_ba£
 *
	gexЩ_ba£_Џ_no_≥ndЪg_їsu…s
 = 
NULL
;

1045 
	$gai_cb
(
Фr
, 
evutЮ_addrЪfo
 *
їs
, *
±r
)

1047 
gai_outcome
 *
go
 = 
±r
;

1048 
go
->
Фr
 =Гrr;

1049 
go
->
ai
 = 
їs
;

1050 iа(--
n_gai_їsu…s_≥ndЪg
 <р0 && 
exЩ_ba£_Џ_no_≥ndЪg_їsu…s
)

1051 
	`evТt_ba£_loЁexЩ
(
exЩ_ba£_Џ_no_≥ndЪg_їsu…s
, 
NULL
);

1052 iа(
n_gai_їsu…s_≥ndЪg
 < 900)

1053 
	`TT_BLATHER
(("GotЗnЗnswer;Гxpecting %d more.",

1054 
n_gai_їsu…s_≥ndЪg
));

1055 
	}
}

1058 
	$€nыl_gai_cb
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
±r
)

1060 
evdns_gСaddrЪfo_їque°
 *
r
 = 
±r
;

1061 
	`evdns_gСaddrЪfo_€nыl
(
r
);

1062 
	}
}

1065 
	$Л°_gСaddrЪfo_async
(*
ђg
)

1067 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

1068 
evutЮ_addrЪfo
 
hЪts
, *
a
;

1069 
gai_outcome
 
lo€l_outcome
;

1070 
gai_outcome
 
a_out
[12];

1071 
i
;

1072 
evdns_gСaddrЪfo_їque°
 *
r
;

1073 
buf
[128];

1074 
evdns_£rvФ_p№t
 *
p№t
 = 
NULL
;

1075 
ev_uЪt16_t
 
dns_p№t
 = 0;

1076 
n_dns_que°iЏs
 = 0;

1078 
evdns_ba£
 *
dns_ba£
 = 
	`evdns_ba£_√w
(
d©a
->
ba£
, 0);

1081 
	`evdns_ba£_lяd_ho°s
(
dns_ba£
, 
NULL
);

1083 
	`mem£t
(
a_out
, 0, (a_out));

1085 
n_gai_їsu…s_≥ndЪg
 = 10000;

1089 
	`mem£t
(&
hЪts
, 0, (hints));

1090 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1091 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1092 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1093 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "1.2.3.4", "http",

1094 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1095 
	`Й_Ъt_Ё
(
r
,==,0);

1096 iа(!
lo€l_outcome
.
Фr
) {

1097 
	`Й_±r_Ё
(
lo€l_outcome
.
ai
,!=,
NULL
);

1098 
	`Л°_ai_eq
(
lo€l_outcome
.
ai
, "1.2.3.4:80", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1099 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1100 
lo€l_outcome
.
ai
 = 
NULL
;

1102 
	`TT_BLATHER
(("Apparently we haveВo getservbyname."));

1106 
	`mem£t
(&
hЪts
, 0, (hints));

1107 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1108 
hЪts
.
ai_жags
 = 
EVUTIL_AI_NUMERICHOST
;

1109 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1110 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "www.google.com", "80",

1111 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1112 
	`Й_Ъt_Ё
(
r
,==,0);

1113 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,
EVUTIL_EAI_NONAME
);

1114 
	`Й_±r_Ё
(
lo€l_outcome
.
ai
,==,
NULL
);

1117 
	`mem£t
(&
hЪts
, 0, (hints));

1118 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1119 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1120 
hЪts
.
ai_іўocё
 = 
IPPROTO_TCP
;

1121 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "f::f", "8008",

1122 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1123 
	`Й_Ъt_Ё
(
r
,==,0);

1124 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1125 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1126 
	`Й_±r_Ё
(
lo€l_outcome
.
ai
->
ai_√xt
,==,
NULL
);

1127 
	`Л°_ai_eq
(
lo€l_outcome
.
ai
, "[f::f]:8008", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1128 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1129 
lo€l_outcome
.
ai
 = 
NULL
;

1132 
	`mem£t
(&
hЪts
, 0, (hints));

1133 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1134 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1135 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "5.6.7.8", 
NULL
,

1136 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1137 
	`Й_Ъt_Ё
(
r
,==,0);

1138 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1139 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1140 
a
 = 
	`ai_fЪd_by_іўocё
(
lo€l_outcome
.
ai
, 
IPPROTO_TCP
);

1141 
	`Й_as£є
(
a
);

1142 
	`Л°_ai_eq
(
a
, "5.6.7.8", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1143 
a
 = 
	`ai_fЪd_by_іўocё
(
lo€l_outcome
.
ai
, 
IPPROTO_UDP
);

1144 
	`Й_as£є
(
a
);

1145 
	`Л°_ai_eq
(
a
, "5.6.7.8", 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1146 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1147 
lo€l_outcome
.
ai
 = 
NULL
;

1150 
	`mem£t
(&
hЪts
, 0, (hints));

1151 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1152 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1153 
hЪts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1154 
hЪts
.
ai_жags
 = 
EVUTIL_AI_PASSIVE
;

1155 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, 
NULL
, "9090",

1156 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1157 
	`Й_Ъt_Ё
(
r
,==,0);

1158 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1159 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1161 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET
);

1162 
	`Й_as£є
(
a
);

1163 
	`Л°_ai_eq
(
a
, "0.0.0.0:9090", 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1165 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET6
);

1166 
	`Й_as£є
(
a
);

1167 
	`Л°_ai_eq
(
a
, "[::]:9090", 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1168 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1169 
lo€l_outcome
.
ai
 = 
NULL
;

1172 
	`mem£t
(&
hЪts
, 0, (hints));

1173 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1174 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1175 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1176 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, 
NULL
, "2",

1177 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1178 
	`Й_Ъt_Ё
(
r
,==,0);

1179 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1180 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1182 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET
);

1183 
	`Й_as£є
(
a
);

1184 
	`Л°_ai_eq
(
a
, "127.0.0.1:2", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1186 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET6
);

1187 
	`Й_as£є
(
a
);

1188 
	`Л°_ai_eq
(
a
, "[::1]:2", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1189 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1190 
lo€l_outcome
.
ai
 = 
NULL
;

1193 
	`mem£t
(&
hЪts
, 0, (hints));

1194 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1195 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1196 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1197 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "LOCALHOST", "80",

1198 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1199 
	`Й_Ъt_Ё
(
r
,==,0);

1200 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1201 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1203 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET
);

1204 
	`Й_as£є
(
a
);

1205 
	`Л°_ai_eq
(
a
, "127.0.0.1:80", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1207 
a
 = 
	`ai_fЪd_by_зmЮy
(
lo€l_outcome
.
ai
, 
PF_INET6
);

1208 
	`Й_as£є
(
a
);

1209 
	`Л°_ai_eq
(
a
, "[::1]:80", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1210 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1211 
lo€l_outcome
.
ai
 = 
NULL
;

1214 
	`mem£t
(&
hЪts
, 0, (hints));

1215 
	`mem£t
(&
lo€l_outcome
, 0, (local_outcome));

1216 
hЪts
.
ai_зmЮy
 = 
PF_INET6
;

1217 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1218 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "LOCALHOST", "9999",

1219 &
hЪts
, 
gai_cb
, &
lo€l_outcome
);

1220 
	`Й_Ъt_Ё
(
r
,==,0);

1221 
	`Й_Ъt_Ё
(
lo€l_outcome
.
Фr
,==,0);

1222 
	`Й_as£є
(
lo€l_outcome
.
ai
);

1223 
a
 = 
lo€l_outcome
.
ai
;

1224 
	`Л°_ai_eq
(
a
, "[::1]:9999", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1225 
	`Й_±r_Ё
(
a
->
ai_√xt
, ==, 
NULL
);

1226 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1227 
lo€l_outcome
.
ai
 = 
NULL
;

1231 
p№t
 = 
	`їgїss_gС_dns£rvФ
(
d©a
->
ba£
, &
dns_p№t
, 
NULL
,

1232 
be_gСaddrЪfo_£rvФ_cb
, &
n_dns_que°iЏs
);

1233 
	`Й_as£є
(
p№t
);

1234 
	`Й_Ъt_Ё
(
dns_p№t
, >=, 0);

1236 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "127.0.0.1:%d", 
dns_p№t
);

1237 
	`evdns_ba£_«me£rvФ_Э_add
(
dns_ba£
, 
buf
);

1239 
	`mem£t
(&
hЪts
, 0, (hints));

1240 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1241 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1242 
hЪts
.
ai_жags
 = 
EVUTIL_AI_CANONNAME
;

1244 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "both.example.com", "8000",

1245 &
hЪts
, 
gai_cb
, &
a_out
[0]);

1246 
	`Й_as£є
(
r
);

1249 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v4only.example.com", "8001",

1250 &
hЪts
, 
gai_cb
, &
a_out
[1]);

1251 
	`Й_as£є
(
r
);

1254 
hЪts
.
ai_жags
 = 0;

1255 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v6only.example.com", "8002",

1256 &
hЪts
, 
gai_cb
, &
a_out
[2]);

1257 
	`Й_as£є
(
r
);

1261 
hЪts
.
ai_зmЮy
 = 
PF_INET
;

1262 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v4assert.example.com", "8003",

1263 &
hЪts
, 
gai_cb
, &
a_out
[3]);

1264 
	`Й_as£є
(
r
);

1268 
hЪts
.
ai_зmЮy
 = 
PF_INET6
;

1269 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v6assert.example.com", "8004",

1270 &
hЪts
, 
gai_cb
, &
a_out
[4]);

1271 
	`Й_as£є
(
r
);

1274 
hЪts
.
ai_зmЮy
 = 
PF_INET
;

1275 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "nosuchplace.example.com", "8005",

1276 &
hЪts
, 
gai_cb
, &
a_out
[5]);

1277 
	`Й_as£є
(
r
);

1281 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1282 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "nosuchplace.example.com", "8006",

1283 &
hЪts
, 
gai_cb
, &
a_out
[6]);

1284 
	`Й_as£є
(
r
);

1288 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1289 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v6timeout.example.com", "8007",

1290 &
hЪts
, 
gai_cb
, &
a_out
[7]);

1291 
	`Й_as£є
(
r
);

1295 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1296 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v6timeout-nonexist.example.com",

1297 "8008", &
hЪts
, 
gai_cb
, &
a_out
[8]);

1298 
	`Й_as£є
(
r
);

1302 
hЪts
.
ai_жags
 |р
EVUTIL_AI_ADDRCONFIG
;

1303 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "both.example.com",

1304 "8009", &
hЪts
, 
gai_cb
, &
a_out
[9]);

1305 
	`Й_as£є
(
r
);

1309 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

1310 
hЪts
.
ai_жags
 = 0;

1311 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "v4timeout.example.com", "8010",

1312 &
hЪts
, 
gai_cb
, &
a_out
[10]);

1313 
	`Й_as£є
(
r
);

1316 
r
 = 
	`evdns_gСaddrЪfo
(
dns_ba£
, "all-timeout.example.com", "8011",

1317 &
hЪts
, 
gai_cb
, &
a_out
[11]);

1318 
	`Й_as£є
(
r
);

1320 
timevЃ
 
tv
;

1321 
tv
.
tv_£c
 = 0;

1322 
tv
.
tv_u£c
 = 100*1000;

1323 
	`evТt_ba£_Џы
(
d©a
->
ba£
, -1, 
EV_TIMEOUT
, 
€nыl_gai_cb
,

1324 
r
, &
tv
);

1333 
n_gai_їsu…s_≥ndЪg
 = 12;

1334 
exЩ_ba£_Џ_no_≥ndЪg_їsu…s
 = 
d©a
->
ba£
;

1336 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

1339 
	`Й_Ъt_Ё
(
a_out
[0].
Фr
, ==, 0);

1340 
	`Й_as£є
(
a_out
[0].
ai
);

1341 
	`Й_as£є
(
a_out
[0].
ai
->
ai_√xt
);

1342 
	`Й_as£є
(!
a_out
[0].
ai
->
ai_√xt
->ai_next);

1343 
a
 = 
	`ai_fЪd_by_зmЮy
(
a_out
[0].
ai
, 
PF_INET
);

1344 
	`Й_as£є
(
a
);

1345 
	`Л°_ai_eq
(
a
, "80.80.32.32:8000", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1346 
a
 = 
	`ai_fЪd_by_зmЮy
(
a_out
[0].
ai
, 
PF_INET6
);

1347 
	`Й_as£є
(
a
);

1348 
	`Л°_ai_eq
(
a
, "[80ff::bbbb]:8000", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1349 
	`Й_as£є
(
a_out
[0].
ai
->
ai_€nЏ«me
);

1350 
	`Й_°r_Ё
(
a_out
[0].
ai
->
ai_€nЏ«me
, ==, "both-canonical.example.com");

1353 
	`Й_Ъt_Ё
(
a_out
[1].
Фr
, ==, 0);

1354 
	`Й_as£є
(
a_out
[1].
ai
);

1355 
	`Й_as£є
(! 
a_out
[1].
ai
->
ai_√xt
);

1356 
	`Л°_ai_eq
(
a_out
[1].
ai
, "18.52.86.120:8001", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1357 
	`Й_as£є
(
a_out
[1].
ai
->
ai_€nЏ«me
 =р
NULL
);

1361 
	`Й_Ъt_Ё
(
a_out
[2].
Фr
, ==, 0);

1362 
	`Й_as£є
(
a_out
[2].
ai
);

1363 
	`Й_as£є
(! 
a_out
[2].
ai
->
ai_√xt
);

1364 
	`Л°_ai_eq
(
a_out
[2].
ai
, "[b0b::f00d]:8002", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1367 
	`Й_Ъt_Ё
(
a_out
[3].
Фr
, ==, 0);

1368 
	`Й_as£є
(
a_out
[3].
ai
);

1369 
	`Й_as£є
(! 
a_out
[3].
ai
->
ai_√xt
);

1370 
	`Л°_ai_eq
(
a_out
[3].
ai
, "18.52.86.120:8003", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1373 
	`Й_Ъt_Ё
(
a_out
[4].
Фr
, ==, 0);

1374 
	`Й_as£є
(
a_out
[4].
ai
);

1375 
	`Й_as£є
(! 
a_out
[4].
ai
->
ai_√xt
);

1376 
	`Л°_ai_eq
(
a_out
[4].
ai
, "[b0b::f00d]:8004", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1379 
	`Й_Ъt_Ё
(
a_out
[5].
Фr
, ==, 
EVUTIL_EAI_NONAME
);

1380 
	`Й_as£є
(! 
a_out
[5].
ai
);

1383 
	`Й_Ъt_Ё
(
a_out
[6].
Фr
, ==, 
EVUTIL_EAI_NONAME
);

1384 
	`Й_as£є
(! 
a_out
[6].
ai
);

1387 
	`Й_Ъt_Ё
(
a_out
[7].
Фr
, ==, 0);

1388 
	`Й_as£є
(
a_out
[7].
ai
);

1389 
	`Й_as£є
(! 
a_out
[7].
ai
->
ai_√xt
);

1390 
	`Л°_ai_eq
(
a_out
[7].
ai
, "171.205.239.1:8007", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1393 
	`Й_Ъt_Ё
(
a_out
[8].
Фr
, ==, 
EVUTIL_EAI_NONAME
);

1394 
	`Й_as£є
(! 
a_out
[8].
ai
);

1397 
	`Й_Ъt_Ё
(
a_out
[9].
Фr
, ==, 0);

1398 
	`Й_as£є
(
a_out
[9].
ai
);

1399 
a
 = 
	`ai_fЪd_by_зmЮy
(
a_out
[9].
ai
, 
PF_INET
);

1400 iа(
a
)

1401 
	`Л°_ai_eq
(
a
, "80.80.32.32:8009", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1403 
	`Й_as£є
(
	`ai_fЪd_by_зmЮy
(
a_out
[9].
ai
, 
PF_INET6
));

1404 
a
 = 
	`ai_fЪd_by_зmЮy
(
a_out
[9].
ai
, 
PF_INET6
);

1405 iа(
a
)

1406 
	`Л°_ai_eq
(
a
, "[80ff::bbbb]:8009", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1408 
	`Й_as£є
(
	`ai_fЪd_by_зmЮy
(
a_out
[9].
ai
, 
PF_INET
));

1411 
	`Й_Ъt_Ё
(
a_out
[10].
Фr
, ==, 0);

1412 
	`Й_as£є
(
a_out
[10].
ai
);

1413 
	`Й_as£є
(! 
a_out
[10].
ai
->
ai_√xt
);

1414 
	`Л°_ai_eq
(
a_out
[10].
ai
, "[a0a::ff01]:8010", 
SOCK_STREAM
, 
IPPROTO_TCP
);

1417 
	`Й_Ъt_Ё
(
a_out
[11].
Фr
, ==, 
EVUTIL_EAI_CANCEL
);

1418 
	`Й_as£є
(
a_out
[11].
ai
 =р
NULL
);

1420 
Тd
:

1421 iа(
lo€l_outcome
.
ai
)

1422 
	`evutЮ_дУaddrЪfo
(
lo€l_outcome
.
ai
);

1423 
i
=0;i<10;++i) {

1424 iа(
a_out
[
i
].
ai
)

1425 
	`evutЮ_дУaddrЪfo
(
a_out
[
i
].
ai
);

1427 iа(
p№t
)

1428 
	`evdns_юo£_£rvФ_p№t
(
p№t
);

1429 iа(
dns_ba£
)

1430 
	`evdns_ba£_дУ
(
dns_ba£
, 0);

1431 
	}
}

1434 
	#DNS_LEGACY
(
«me
, 
жags
) \

1435 { #«me, 
run_Ћgacy_Л°_в
, 
жags
|
TT_LEGACY
, &
Ћgacy_£tup
, \

1436 
dns_
##
«me
 }

	)

1438 
Л°€£_t
 
	gdns_Л°€£s
[] = {

1439 
DNS_LEGACY
(
£rvФ
, 
TT_FORK
|
TT_NEED_BASE
),

1440 
DNS_LEGACY
(
gСho°by«me
, 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_DNS
),

1441 
DNS_LEGACY
(
gСho°by«me6
, 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_DNS
),

1442 
DNS_LEGACY
(
gСho°byaddr
, 
TT_FORK
|
TT_NEED_BASE
|
TT_NEED_DNS
),

1443 { "їsёve_їvФ£", 
dns_їsёve_їvФ£
, 
TT_FORK
, 
NULL
, NULL },

1444 { "£ђch", 
dns_£ђch_Л°
, 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

1445 { "їМy", 
dns_їМy_Л°
, 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

1446 { "їissue", 
dns_їissue_Л°
, 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

1447 { "Ъжight", 
dns_Ъжight_Л°
, 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

1448 { "bufгїvТt_cЏ√щ_ho°«me", 
Л°_bufгїvТt_cЏ√щ_ho°«me
,

1449 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

1451 { "gСaddrЪfo_async", 
Л°_gСaddrЪfo_async
,

1452 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, (*)"" },

1454 
END_OF_TESTCASES


	@test/regress_et.c

27 
	~<evТt-cЏfig.h
>

29 #ifdeа
WIN32


30 
	~<wЪsock2.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/°©.h
>

34 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


35 
	~<sys/sockС.h
>

37 
	~<fъО.h
>

38 
	~<°dlib.h
>

39 
	~<°dio.h
>

40 
	~<°rЪg.h
>

41 #iвdeа
WIN32


42 
	~<sys/time.h
>

43 
	~<uni°d.h
>

45 
	~<ФЇo.h
>

47 
	~<evТt2/evТt.h
>

48 
	~<evТt2/utЮ.h
>

50 
	~"їgїss.h
"

52 
	gwas_С
 = 0;

55 
	$їad_cb
(
fd
, 
evТt
, *
ђg
)

57 
buf
;

58 
Ћn
;

60 
Ћn
 = 
	`їcv
(
fd
, &
buf
, (buf), 0);

66 
€ќed
++;

67 iа(
evТt
 & 
EV_ET
)

68 
was_С
 = 1;

70 iа(!
Ћn
)

71 
	`evТt_dЦ
(
ђg
);

72 
	}
}

74 #iвdeа
SHUT_WR


75 
	#SHUT_WR
 1

	)

78 #ifdeа
WIN32


79 
	#LOCAL_SOCKETPAIR_AF
 
AF_INET


	)

81 
	#LOCAL_SOCKETPAIR_AF
 
AF_UNIX


	)

85 
	$Л°_edgСriggФed
(*
С
)

87 
evТt
 *
ev
 = 
NULL
;

88 
evТt_ba£
 *
ba£
 = 
NULL
;

89 cЏ° *
Л°
 = "test string";

90 
evutЮ_sockС_t
 
ЈЬ
[2] = {-1,-1};

91 
suµ№ts_С
;

92 
sucыss
;

94 iа(
	`evutЮ_sockСЈЬ
(
LOCAL_SOCKETPAIR_AF
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1) {

95 
	`Й_ab№t_≥Љ№
("socketpair");

98 
€ќed
 = 
was_С
 = 0;

100 
	`£nd
(
ЈЬ
[0], 
Л°
, 
	`°ЊТ
(test)+1, 0);

101 
	`shutdown
(
ЈЬ
[0], 
SHUT_WR
);

104 
ba£
 = 
	`evТt_ba£_√w
();

106 iа(!
	`°rcmp
(
	`evТt_ba£_gС_mСhod
(
ba£
), "epoll") ||

107 !
	`°rcmp
(
	`evТt_ba£_gС_mСhod
(
ba£
), "kqueue"))

108 
suµ№ts_С
 = 1;

110 
suµ№ts_С
 = 0;

112 
	`TT_BLATHER
(("Checking forГdge-triggeredГvents with %s, which should %s"

113 "suµ№Иedge-МiggФЪg", 
	`evТt_ba£_gС_mСhod
(
ba£
),

114 
suµ№ts_С
?"":"not "));

117 
ev
 = 
	`evТt_√w
(
ba£
, 
ЈЬ
[1], 
EV_READ
|
EV_ET
|
EV_PERSIST
, 
їad_cb
, &ev);

119 
	`evТt_add
(
ev
, 
NULL
);

128 
	`evТt_ba£_loЁ
(
ba£
,
EVLOOP_NONBLOCK
|
EVLOOP_ONCE
);

129 
	`evТt_ba£_loЁ
(
ba£
,
EVLOOP_NONBLOCK
|
EVLOOP_ONCE
);

131 iа(
suµ№ts_С
) {

132 
	`Й_Ъt_Ё
(
€ќed
, ==, 1);

133 
	`Й_as£є
(
was_С
);

135 
	`Й_Ъt_Ё
(
€ќed
, ==, 2);

136 
	`Й_as£є
(!
was_С
);

137 
sucыss
 = (
€ќed
 =р2и&& !
was_С
;

141 
Тd
:

142 iа(
ev
) {

143 
	`evТt_dЦ
(
ev
);

144 
	`evТt_дУ
(
ev
);

146 iа(
ba£
)

147 
	`evТt_ba£_дУ
(
ba£
);

148 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[0]);

149 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[1]);

150 
	}
}

152 
Л°€£_t
 
	gedgСriggФed_Л°€£s
[] = {

153 { "С", 
Л°_edgСriggФed
, 
TT_FORK
, 
NULL
, NULL },

154 
END_OF_TESTCASES


	@test/regress_http.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sig«l.h
>

44 
	~<uni°d.h
>

45 
	~<√tdb.h
>

47 
	~<fъО.h
>

48 
	~<°dlib.h
>

49 
	~<°dio.h
>

50 
	~<°rЪg.h
>

51 
	~<ФЇo.h
>

53 
	~"evТt2/dns.h
"

55 
	~"evТt.h
"

56 
	~"evhЙp.h
"

57 
	~"log-ЪЛЇЃ.h
"

58 
	~"utЮ-ЪЛЇЃ.h
"

59 
	~"hЙp-ЪЛЇЃ.h
"

60 
	~"їgїss.h
"

61 
	~"їgїss_Л°utЮs.h
"

63 
evhЙp
 *
	ghЙp
;

65 
evТt_ba£
 *
	gba£
;

67 cЏ° 
	gBASIC_REQUEST_BODY
[] = "This is funny";

69 
hЙp_basic_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

70 
hЙp_chunked_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

71 
hЙp_po°_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

72 
hЙp_put_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

73 
hЙp_dЦСe_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

74 
hЙp_dЦay_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

75 
hЙp_ѕrge_dЦay_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

76 
hЙp_badїq_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

77 
hЙp_di•©chФ_cb
(
evhЙp_їque°
 *
їq
, *
ђg
);

78 
evhЙp
 *

79 
	$hЙp_£tup
(*
µ№t
, 
evТt_ba£
 *
ba£
)

81 
i
;

82 
evhЙp
 *
myhЙp
;

83 
p№t
 = -1;

86 
myhЙp
 = 
	`evhЙp_√w
(
ba£
);

87 
i
 = 0; i < 50; ++i) {

88 iа(
	`evhЙp_bЪd_sockС
(
myhЙp
, "127.0.0.1", 8080 + 
i
) != -1) {

89 
p№t
 = 8080 + 
i
;

94 iа(
p№t
 == -1)

95 
	`evТt_Фrx
(1, "CouldВot start web server");

98 
	`evhЙp_£t_cb
(
myhЙp
, "/Л°", 
hЙp_basic_cb
, 
NULL
);

99 
	`evhЙp_£t_cb
(
myhЙp
, "/chunked", 
hЙp_chunked_cb
, 
NULL
);

100 
	`evhЙp_£t_cb
(
myhЙp
, "/°їamed", 
hЙp_chunked_cb
, 
NULL
);

101 
	`evhЙp_£t_cb
(
myhЙp
, "/po°Щ", 
hЙp_po°_cb
, 
NULL
);

102 
	`evhЙp_£t_cb
(
myhЙp
, "/putЩ", 
hЙp_put_cb
, 
NULL
);

103 
	`evhЙp_£t_cb
(
myhЙp
, "/dЦСeЩ", 
hЙp_dЦСe_cb
, 
NULL
);

104 
	`evhЙp_£t_cb
(
myhЙp
, "/dЦay", 
hЙp_dЦay_cb
, 
NULL
);

105 
	`evhЙp_£t_cb
(
myhЙp
, "/ѕrgedЦay", 
hЙp_ѕrge_dЦay_cb
, 
NULL
);

106 
	`evhЙp_£t_cb
(
myhЙp
, "/badїque°", 
hЙp_badїq_cb
, 
NULL
);

107 
	`evhЙp_£t_cb
(
myhЙp
, "/", 
hЙp_di•©chФ_cb
, 
NULL
);

109 *
µ№t
 = 
p№t
;

110  (
myhЙp
);

111 
	}
}

113 #iвdeа
NI_MAXSERV


114 
	#NI_MAXSERV
 1024

	)

118 
	$hЙp_cЏ√щ
(cЏ° *
addїss
, 
u_sh№t
 
p№t
)

121 #ifdeа
WIN32


122 
ho°Тt
 *
he
;

123 
sockaddr_Ъ
 
sЪ
;

125 
addrЪfo
 
ai
, *
aЩЁ
;

126 
°љ№t
[
NI_MAXSERV
];

128 
sockaddr
 *
І
;

129 
¶Т
;

130 
fd
;

132 #ifdeа
WIN32


133 iа(!(
he
 = 
	`gСho°by«me
(
addїss
))) {

134 
	`evТt_wђn
("gethostbyname");

136 
	`memэy
(&
sЪ
.
sЪ_addr
, 
he
->
h_addr_li°
[0], he->
h_Ћngth
);

137 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

138 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
p№t
);

139 
¶Т
 = (
sockaddr_Ъ
);

140 
І
 = (
sockaddr
*)&
sЪ
;

142 
	`mem£t
(&
ai
, 0,  (ai));

143 
ai
.
ai_зmЮy
 = 
AF_INET
;

144 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

145 
	`evutЮ_ҐіЪtf
(
°љ№t
,  (°љ№t), "%d", 
p№t
);

146 iа(
	`gСaddrЪfo
(
addїss
, 
°љ№t
, &
ai
, &
aЩЁ
) != 0) {

147 
	`evТt_wђn
("getaddrinfo");

150 
І
 = 
aЩЁ
->
ai_addr
;

151 
¶Т
 = 
aЩЁ
->
ai_addЊТ
;

154 
fd
 = 
	`sockС
(
AF_INET
, 
SOCK_STREAM
, 0);

155 iа(
fd
 == -1)

156 
	`evТt_Фr
(1, "socket failed");

158 
	`evutЮ_make_sockС_nЏblockЪg
(
fd
);

159 iа(
	`cЏ√щ
(
fd
, 
І
, 
¶Т
) == -1) {

160 #ifdeа
WIN32


161 
tmp_Фr
 = 
	`WSAGСLa°EЉ№
();

162 iа(
tmp_Фr
 !р
WSAEINPROGRESS
 &&Бmp_ФЄ!р
WSAEINVAL
 &&

163 
tmp_Фr
 !р
WSAEWOULDBLOCK
)

164 
	`evТt_Фr
(1, "connect failed");

166 iа(
ФЇo
 !р
EINPROGRESS
)

167 
	`evТt_Фr
(1, "connect failed");

171 #iвdeа
WIN32


172 
	`дУaddrЪfo
(
aЩЁ
);

175  (
fd
);

176 
	}
}

179 
	$hЙp_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

181 cЏ° *
wh©
 = 
BASIC_REQUEST_BODY
;

183 
	`evТt_debug
(("%s: %s\n", 
__func__
, 
	`EVBUFFER_DATA
(
	`bufгїvТt_gС_Ъput
(
bev
))));

185 iа(
	`evbufгr_fЪd
(
	`bufгїvТt_gС_Ъput
(
bev
),

186 (cЏ° *и
wh©
, 
	`°ЊТ
(wh©)и!р
NULL
) {

187 
evhЙp_їque°
 *
їq
 = 
	`evhЙp_їque°_√w
(
NULL
, NULL);

188 
mesІge_їad_°©us
 
dЏe
;

190 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

191 
dЏe
 = 
	`evhЙp_Јr£_fЬ°lЪe
(
їq
, 
	`bufгїvТt_gС_Ъput
(
bev
));

192 iа(
dЏe
 !р
ALL_DATA_READ
)

193 
out
;

195 
dЏe
 = 
	`evhЙp_Јr£_hЧdФs
(
їq
, 
	`bufгїvТt_gС_Ъput
(
bev
));

196 iа(
dЏe
 !р
ALL_DATA_READ
)

197 
out
;

199 iа(
dЏe
 == 1 &&

200 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
,

201 "CЏЛЅ-Ty≥"и!р
NULL
)

202 
Л°_ok
++;

204 
out
:

205 
	`evhЙp_їque°_дУ
(
їq
);

206 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

207 iа(
ba£
)

208 
	`evТt_ba£_loЁexЩ
(
ba£
, 
NULL
);

210 
	`evТt_loЁexЩ
(
NULL
);

212 
	}
}

215 
	$hЙp_wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

217 iа(
	`EVBUFFER_LENGTH
(
	`bufгїvТt_gС_ouНut
(
bev
)) == 0) {

219 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

220 
Л°_ok
++;

222 
	}
}

225 
	$hЙp_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

227 
Л°_ok
 = -2;

228 
	`evТt_loЁexЩ
(
NULL
);

229 
	}
}

232 
	$hЙp_basic_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

234 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

235 
em±y
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Em±y"и!р
NULL
;

236 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

237 
	`evbufгr_add_іЪtf
(
evb
, 
BASIC_REQUEST_BODY
);

241 cЏ° *
mu…i
 =

242 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
,"X-multi");

243 iа(
mu…i
) {

244 iа(
	`°rcmp
("END", 
mu…i
 + 
	`°ЊТ
(multi) - 3) == 0)

245 
Л°_ok
++;

246 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Last"))

247 
Л°_ok
++;

252 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Negative"))

253 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
,

257 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "Everything is fine",

258 !
em±y
 ? 
evb
 : 
NULL
);

260 
	`evbufгr_дУ
(
evb
);

261 
	}
}

263 cЏ°* cЏ° 
	gCHUNKS
[] = {

269 
	schunk_їq_°©e
 {

270 
evhЙp_їque°
 *
	mїq
;

271 
	mi
;

275 
	$hЙp_chunked_МickЋ_cb
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
)

277 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

278 
chunk_їq_°©e
 *
°©e
 = 
ђg
;

279 
timevЃ
 
whТ
 = { 0, 0 };

281 
	`evbufгr_add_іЪtf
(
evb
, "%s", 
CHUNKS
[
°©e
->
i
]);

282 
	`evhЙp_£nd_їґy_chunk
(
°©e
->
їq
, 
evb
);

283 
	`evbufгr_дУ
(
evb
);

285 iа(++
°©e
->
i
 < (
CHUNKS
)/(CHUNKS[0])) {

286 
	`evТt_Џы
(-1, 
EV_TIMEOUT
,

287 
hЙp_chunked_МickЋ_cb
, 
°©e
, &
whТ
);

289 
	`evhЙp_£nd_їґy_Тd
(
°©e
->
їq
);

290 
	`дУ
(
°©e
);

292 
	}
}

295 
	$hЙp_chunked_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

297 
timevЃ
 
whТ
 = { 0, 0 };

298 
chunk_їq_°©e
 *
°©e
 = 
	`mЃloc
((chunk_req_state));

299 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

301 
	`mem£t
(
°©e
, 0, (
chunk_їq_°©e
));

302 
°©e
->
їq
 =Дeq;

304 iа(
	`°rcmp
(
	`evhЙp_їque°_uri
(
їq
), "/streamed") == 0) {

305 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Content-Length", "39");

309 
	`evhЙp_£nd_їґy_°ђt
(
їq
, 
HTTP_OK
, "Everything is fine");

313 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_chunked_МickЋ_cb
, 
°©e
, &
whТ
);

314 
	}
}

317 
	$hЙp_comґСe_wrЩe
(
fd
, 
wh©
, *
ђg
)

319 
bufгїvТt
 *
bev
 = 
ђg
;

320 cЏ° *
hЙp_їque°
 = "host\r\n"

323 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

324 
	}
}

327 
	$hЙp_basic_Л°
()

329 
timevЃ
 
tv
;

330 
bufгїvТt
 *
bev
;

331 
fd
;

332 cЏ° *
hЙp_їque°
;

333 
p№t
 = -1;

335 
Л°_ok
 = 0;

337 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

340 iа(
	`evhЙp_bЪd_sockС
(
hЙp
, "127.0.0.1", 
p№t
 + 1) == -1) {

341 
	`еrЪtf
(
°dout
, "FAILED (bind)\n");

342 
	`exЩ
(1);

345 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

348 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_їadcb
, 
hЙp_wrЩecb
,

349 
hЙp_Фr№cb
, 
NULL
);

352 
hЙp_їque°
 =

356 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

357 
	`evutЮ_timФюЧr
(&
tv
);

358 
tv
.
tv_u£c
 = 10000;

359 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_comґСe_wrЩe
, 
bev
, &
tv
);

361 
	`evТt_di•©ch
();

363 
	`Й_as£є
(
Л°_ok
 == 3);

366 
	`bufгїvТt_дУ
(
bev
);

367 
	`EVUTIL_CLOSESOCKET
(
fd
);

369 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
 + 1);

372 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_їadcb
, 
hЙp_wrЩecb
,

373 
hЙp_Фr№cb
, 
NULL
);

375 
hЙp_їque°
 =

381 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

383 
	`evТt_di•©ch
();

385 
	`bufгїvТt_дУ
(
bev
);

386 
	`EVUTIL_CLOSESOCKET
(
fd
);

388 
	`evhЙp_дУ
(
hЙp
);

390 
	`Й_as£є
(
Л°_ok
 == 5);

391 
Тd
:

393 
	}
}

396 
	$hЙp_dЦay_їґy
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

398 
evhЙp_їque°
 *
їq
 = 
ђg
;

400 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†fЪe", 
NULL
);

402 ++
Л°_ok
;

403 
	}
}

406 
	$hЙp_dЦay_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

408 
timevЃ
 
tv
;

409 
	`evutЮ_timФюЧr
(&
tv
);

410 
tv
.
tv_£c
 = 0;

411 
tv
.
tv_u£c
 = 200 * 1000;

413 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_dЦay_їґy
, 
їq
, &
tv
);

414 
	}
}

417 
	$hЙp_badїq_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

419 
evbufгr
 *
buf
 = 
	`evbufгr_√w
();

421 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Content-Type", "text/xml; charset=UTF-8");

422 
	`evbufгr_add_іЪtf
(
buf
, "Hello, %s!", "127.0.0.1");

424 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "OK", 
buf
);

425 
	`evbufгr_дУ
(
buf
);

426 
	}
}

429 
	$hЙp_badїq_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

431 
	`evТt_debug
(("%s: cЃЋd (wh©=%04x,Зrg=%p)", 
__func__
, 
wh©
, 
ђg
));

433 
	}
}

435 #iвdeа
SHUT_WR


436 #ifdeа
WIN32


437 
	#SHUT_WR
 
SD_SEND


	)

439 
	#SHUT_WR
 1

	)

444 
	$hЙp_badїq_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

446 cЏ° *
wh©
 = "Hello, 127.0.0.1";

447 cЏ° *
bad_їque°
 = "400 Bad Request";

449 
	`evТt_debug
(("%s: %s\n", 
__func__
, 
	`EVBUFFER_DATA
(
bev
->
Ъput
)));

451 iа(
	`evbufгr_fЪd
(
bev
->
Ъput
,

452 (cЏ° *и
bad_їque°
,

453 
	`°ЊТ
(
bad_їque°
)и!р
NULL
) {

454 
	`TT_FAIL
(("%s: badДeque° dСeщed", 
__func__
));

455 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

456 
	`evТt_loЁexЩ
(
NULL
);

460 iа(
	`evbufгr_fЪd
(
bev
->
Ъput
,

461 (cЏ° *и
wh©
, 
	`°ЊТ
(wh©)и!р
NULL
) {

462 
evhЙp_їque°
 *
їq
 = 
	`evhЙp_їque°_√w
(
NULL
, NULL);

463 
mesІge_їad_°©us
 
dЏe
;

465 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

466 
dЏe
 = 
	`evhЙp_Јr£_fЬ°lЪe
(
їq
, 
bev
->
Ъput
);

467 iа(
dЏe
 !р
ALL_DATA_READ
)

468 
out
;

470 
dЏe
 = 
	`evhЙp_Јr£_hЧdФs
(
їq
, 
bev
->
Ъput
);

471 iа(
dЏe
 !р
ALL_DATA_READ
)

472 
out
;

474 iа(
dЏe
 == 1 &&

475 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
,

476 "CЏЛЅ-Ty≥"и!р
NULL
)

477 
Л°_ok
++;

479 
out
:

480 
	`evhЙp_їque°_дУ
(
їq
);

481 
	`evbufгr_dњЪ
(
bev
->
Ъput
, 
	`EVBUFFER_LENGTH
(bev->input));

484 
	`shutdown
(
bev
->
ev_їad
.
ev_fd
, 
SHUT_WR
);

485 
	}
}

488 
	$hЙp_badїq_sucыsscb
(
fd
, 
wh©
, *
ђg
)

490 
	`evТt_debug
(("%s: cЃЋd (wh©=%04x,Зrg=%p)", 
__func__
, 
wh©
, 
ђg
));

491 
	`evТt_loЁexЩ
(
NULL
);

492 
	}
}

495 
	$hЙp_bad_їque°_Л°
()

497 
timevЃ
 
tv
;

498 
bufгїvТt
 *
bev
;

499 
fd
;

500 cЏ° *
hЙp_їque°
;

501 
p№t
 = -1;

503 
Л°_ok
 = 0;

507 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

510 iа(
	`evhЙp_bЪd_sockС
(
hЙp
, "127.0.0.1", 
p№t
 + 1) == -1)

511 
	`TT_DIE
(("Bind socket failed"));

514 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

517 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_badїq_їadcb
, 
hЙp_wrЩecb
,

518 
hЙp_badїq_Фr№cb
, 
NULL
);

519 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

522 
hЙp_їque°
 = "";

524 
	`shutdown
(
fd
, 
SHUT_WR
);

525 
	`timФюЧr
(&
tv
);

526 
tv
.
tv_u£c
 = 10000;

527 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_badїq_sucыsscb
, 
bev
, &
tv
);

529 
	`evТt_di•©ch
();

531 
	`bufгїvТt_дУ
(
bev
);

532 
	`EVUTIL_CLOSESOCKET
(
fd
);

534 iа(
Л°_ok
 != 0) {

535 
	`еrЪtf
(
°dout
, "FAILED\n");

536 
	`exЩ
(1);

542 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
 + 1);

545 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_badїq_їadcb
, 
hЙp_wrЩecb
,

546 
hЙp_badїq_Фr№cb
, 
NULL
);

547 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

550 
hЙp_їque°
 =

555 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

557 
	`timФюЧr
(&
tv
);

558 
tv
.
tv_u£c
 = 10000;

559 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_badїq_sucыsscb
, 
bev
, &
tv
);

561 
	`evТt_di•©ch
();

563 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

565 
Тd
:

566 
	`evhЙp_дУ
(
hЙp
);

567 
	}
}

569 
evhЙp_cЏ√щiЏ
 *
	gdЦayed_юЫЅ
;

572 
	$hЙp_ѕrge_dЦay_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

574 
timevЃ
 
tv
;

575 
	`evutЮ_timФюЧr
(&
tv
);

576 
tv
.
tv_£c
 = 3;

578 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_dЦay_їґy
, 
їq
, &
tv
);

579 
	`evhЙp_cЏ√щiЏ_зЮ
(
dЦayed_юЫЅ
, 
EVCON_HTTP_EOF
);

580 
	}
}

587 
	$hЙp_dЦСe_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

589 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

590 
em±y
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Em±y"и!р
NULL
;

593 iа(
їq
->
ty≥
 !р
EVHTTP_REQ_DELETE
) {

594 
	`еrЪtf
(
°dout
, "FAILED (deleteБype)\n");

595 
	`exЩ
(1);

598 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

599 
	`evbufгr_add_іЪtf
(
evb
, 
BASIC_REQUEST_BODY
);

602 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "Everything is fine",

603 !
em±y
 ? 
evb
 : 
NULL
);

605 
	`evbufгr_дУ
(
evb
);

606 
	}
}

609 
	$hЙp_dЦСe_Л°
()

611 
bufгїvТt
 *
bev
;

612 
fd
;

613 cЏ° *
hЙp_їque°
;

614 
p№t
 = -1;

616 
Л°_ok
 = 0;

618 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

620 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

623 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_їadcb
, 
hЙp_wrЩecb
,

624 
hЙp_Фr№cb
, 
NULL
);

626 
hЙp_їque°
 =

632 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

634 
	`evТt_di•©ch
();

636 
	`bufгїvТt_дУ
(
bev
);

637 
	`EVUTIL_CLOSESOCKET
(
fd
);

639 
	`evhЙp_дУ
(
hЙp
);

641 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

642 
Тd
:

644 
	}
}

646 
hЙp_їque°_dЏe
(
evhЙp_їque°
 *, *);

647 
hЙp_їque°_em±y_dЏe
(
evhЙp_їque°
 *, *);

650 
	$_hЙp_cЏ√щiЏ_Л°
(
≥rsi°Тt
)

652 
p№t
 = -1;

653 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

654 
evhЙp_їque°
 *
їq
 = 
NULL
;

656 
Л°_ok
 = 0;

658 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

660 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

661 
	`Й_as£є
(
evcЏ
);

668 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

671 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

674 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

675 
	`еrЪtf
(
°dout
, "FAILED\n");

676 
	`exЩ
(1);

679 
	`evТt_di•©ch
();

681 
	`Й_as£є
(
Л°_ok
);

684 
Л°_ok
 = 0;

686 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

689 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

695 iа(!
≥rsi°Тt
)

696 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection", "close");

699 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

700 
	`Й_ab№t_msg
("couldn't makeДequest");

703 
	`evТt_di•©ch
();

706 
Л°_ok
 = 0;

708 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_em±y_dЏe
, 
NULL
);

711 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Empty", "itis");

714 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

715 
	`Й_ab№t_msg
("Couldn't makeДequest");

716 
	`exЩ
(1);

719 
	`evТt_di•©ch
();

721 
Тd
:

722 iа(
evcЏ
)

723 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

724 iа(
hЙp
)

725 
	`evhЙp_дУ
(
hЙp
);

726 
	}
}

729 
	$hЙp_cЏ√щiЏ_Л°
()

731 
	`_hЙp_cЏ√щiЏ_Л°
(0);

732 
	}
}

734 
	$hЙp_≥rsi°_cЏ√щiЏ_Л°
()

736 
	`_hЙp_cЏ√щiЏ_Л°
(1);

737 
	}
}

739 
їgїss_dns_£rvФ_ПbЋ
 
	g£ђch_ПbЋ
[] = {

741 { 
NULL
, NULL, NULL, 0 }

745 
	$hЙp_cЏ√щiЏ_async_Л°
()

747 
p№t
 = -1;

748 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

749 
evhЙp_їque°
 *
їq
 = 
NULL
;

750 
evdns_ba£
 *
dns_ba£
 = 
NULL
;

751 
ev_uЪt16_t
 
p№Кum
 = 0;

752 
addїss
[64];

754 
	`Й_as£є
(
	`їgїss_dns£rvФ
(
ba£
, &
p№Кum
, 
£ђch_ПbЋ
));

756 
dns_ba£
 = 
	`evdns_ba£_√w
(
ba£
, 0 );

757 
	`Й_as£є
(
dns_ba£
);

761 
	`evutЮ_ҐіЪtf
(
addїss
,  (addїss), "127.0.0.1:%d", 
p№Кum
);

762 
	`evdns_ba£_«me£rvФ_Э_add
(
dns_ba£
, 
addїss
);

764 
Л°_ok
 = 0;

766 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

768 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_ba£_√w
(
ba£
, 
dns_ba£
, "127.0.0.1", 
p№t
);

769 
	`Й_as£є
(
evcЏ
);

776 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

779 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

782 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

783 
	`еrЪtf
(
°dout
, "FAILED\n");

784 
	`exЩ
(1);

787 
	`evТt_di•©ch
();

789 
	`Й_as£є
(
Л°_ok
);

792 
Л°_ok
 = 0;

794 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

797 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

803 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Connection", "close");

806 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

807 
	`Й_ab№t_msg
("couldn't makeДequest");

810 
	`evТt_di•©ch
();

813 
Л°_ok
 = 0;

815 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_em±y_dЏe
, 
NULL
);

818 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Empty", "itis");

821 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

822 
	`Й_ab№t_msg
("Couldn't makeДequest");

823 
	`exЩ
(1);

826 
	`evТt_di•©ch
();

828 
Тd
:

829 iа(
evcЏ
)

830 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

831 iа(
hЙp
)

832 
	`evhЙp_дУ
(
hЙp
);

833 iа(
dns_ba£
)

834 
	`evdns_ba£_дУ
(
dns_ba£
, 0);

835 
	`їgїss_юЧn_dns£rvФ
();

836 
	}
}

839 
	$hЙp_їque°_√vФ_€ќ
(
evhЙp_їque°
 *
їq
, *
ђg
)

841 
	`еrЪtf
(
°dout
, "FAILED\n");

842 
	`exЩ
(1);

843 
	}
}

846 
	$hЙp_do_€nыl
(
evutЮ_sockС_t
 
fd
, 
wh©
, *
ђg
)

848 
evhЙp_їque°
 *
їq
 = 
ђg
;

849 
timevЃ
 
tv
;

850 
	`evutЮ_timФюЧr
(&
tv
);

851 
tv
.
tv_£c
 = 0;

852 
tv
.
tv_u£c
 = 500 * 1000;

854 
	`evhЙp_€nыl_їque°
(
їq
);

856 
	`evТt_loЁexЩ
(&
tv
);

858 ++
Л°_ok
;

859 
	}
}

862 
	$hЙp_€nыl_Л°
()

864 
p№t
 = -1;

865 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

866 
evhЙp_їque°
 *
їq
 = 
NULL
;

867 
timevЃ
 
tv
;

869 
Л°_ok
 = 0;

871 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

873 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

874 
	`Й_as£є
(
evcЏ
);

881 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_√vФ_€ќ
, 
NULL
);

884 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

887 
	`Й_Ъt_Ё
(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/delay"),

890 
	`evutЮ_timФюЧr
(&
tv
);

891 
tv
.
tv_£c
 = 0;

892 
tv
.
tv_u£c
 = 100 * 1000;

894 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_do_€nыl
, 
їq
, &
tv
);

896 
	`evТt_di•©ch
();

898 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

901 
Л°_ok
 = 0;

903 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

906 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

909 
	`Й_Ъt_Ё
(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test"),

912 
	`evТt_di•©ch
();

915 
Л°_ok
 = 0;

917 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_em±y_dЏe
, 
NULL
);

920 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Empty", "itis");

923 
	`Й_Ъt_Ё
(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test"),

926 
	`evТt_di•©ch
();

928 
Тd
:

929 iа(
evcЏ
)

930 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

931 iа(
hЙp
)

932 
	`evhЙp_дУ
(
hЙp
);

933 
	}
}

936 
	$hЙp_їque°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

938 cЏ° *
wh©
 = 
ђg
;

940 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

941 
	`еrЪtf
(
°dФr
, "FAILED\n");

942 
	`exЩ
(1);

945 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-Ty≥"и=р
NULL
) {

946 
	`еrЪtf
(
°dФr
, "FAILED\n");

947 
	`exЩ
(1);

950 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
wh©
)) {

951 
	`еrЪtf
(
°dФr
, "FAILED\n");

952 
	`exЩ
(1);

955 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
wh©
, 
	`°ЊТ
(what)) != 0) {

956 
	`еrЪtf
(
°dФr
, "FAILED\n");

957 
	`exЩ
(1);

960 
Л°_ok
 = 1;

961 
	`evТt_loЁexЩ
(
NULL
);

962 
	}
}

965 
	$hЙp_їque°_ex≥щ_Фr№
(
evhЙp_їque°
 *
їq
, *
ђg
)

967 iа(
їq
->
ї•Џ£_code
 =р
HTTP_OK
) {

968 
	`еrЪtf
(
°dФr
, "FAILED\n");

969 
	`exЩ
(1);

972 
Л°_ok
 = 1;

973 
	`evТt_loЁexЩ
(
NULL
);

974 
	}
}

978 
	$hЙp_vЬtuЃ_ho°_Л°
()

980 
p№t
 = -1;

981 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

982 
evhЙp_їque°
 *
їq
 = 
NULL
;

983 
evhЙp
 *
£cЏd
 = 
NULL
, *
thЬd
 = NULL;

985 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

988 
£cЏd
 = 
	`evhЙp_√w
(
NULL
);

989 
	`evhЙp_£t_cb
(
£cЏd
, "/fu¬ybu¬y", 
hЙp_basic_cb
, 
NULL
);

990 
thЬd
 = 
	`evhЙp_√w
(
NULL
);

991 
	`evhЙp_£t_cb
(
thЬd
, "/bѕckcofгe", 
hЙp_basic_cb
, 
NULL
);

993 iа(
	`evhЙp_add_vЬtuЃ_ho°
(
hЙp
, "foo.com", 
£cЏd
) == -1) {

994 
	`Й_ab№t_msg
("Couldn'tЗdd vhost");

997 iа(
	`evhЙp_add_vЬtuЃ_ho°
(
hЙp
, "bђ.*.foo.com", 
thЬd
) == -1) {

998 
	`Й_ab№t_msg
("Couldn'tЗdd wildcarded vhost");

1001 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1002 
	`Й_as£є
(
evcЏ
);

1005 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_ex≥щ_Фr№
, 
NULL
);

1008 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

1011 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

1013 
	`Й_ab№t_msg
("Couldn't makeДequest");

1016 
	`evТt_di•©ch
();

1018 
	`Й_as£є
(
Л°_ok
 == 1);

1020 
Л°_ok
 = 0;

1023 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

1026 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "foo.com");

1029 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

1031 
	`еrЪtf
(
°dout
, "FAILED\n");

1032 
	`exЩ
(1);

1035 
	`evТt_di•©ch
();

1037 
	`Й_as£є
(
Л°_ok
 == 1);

1039 
Л°_ok
 = 0;

1042 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
, (*и
BASIC_REQUEST_BODY
);

1045 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "bar.magic.foo.com");

1048 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

1050 
	`Й_ab№t_msg
("Couldn't makeДequest");

1053 
	`evТt_di•©ch
();

1055 
	`Й_as£є
(
Л°_ok
 == 1)

1057 
Тd
:

1058 iа(
evcЏ
)

1059 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1060 iа(
hЙp
)

1061 
	`evhЙp_дУ
(
hЙp
);

1062 
	}
}

1068 
	$hЙp_їque°_em±y_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1070 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

1071 
	`еrЪtf
(
°dФr
, "FAILED\n");

1072 
	`exЩ
(1);

1075 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "D©e"и=р
NULL
) {

1076 
	`еrЪtf
(
°dФr
, "FAILED\n");

1077 
	`exЩ
(1);

1081 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-LТgth"и=р
NULL
) {

1082 
	`еrЪtf
(
°dФr
, "FAILED\n");

1083 
	`exЩ
(1);

1086 iа(
	`°rcmp
(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Content-Length"),

1088 
	`еrЪtf
(
°dФr
, "FAILED\n");

1089 
	`exЩ
(1);

1092 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
) != 0) {

1093 
	`еrЪtf
(
°dФr
, "FAILED\n");

1094 
	`exЩ
(1);

1097 
Л°_ok
 = 1;

1098 
	`evТt_loЁexЩ
(
NULL
);

1099 
	}
}

1106 
	$hЙp_di•©chФ_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

1109 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

1110 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

1111 
	`evbufгr_add_іЪtf
(
evb
, "DISPATCHER_TEST");

1113 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†fЪe", 
evb
);

1115 
	`evbufгr_дУ
(
evb
);

1116 
	}
}

1119 
	$hЙp_di•©chФ_Л°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1121 cЏ° *
wh©
 = "DISPATCHER_TEST";

1123 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

1124 
	`еrЪtf
(
°dФr
, "FAILED\n");

1125 
	`exЩ
(1);

1128 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-Ty≥"и=р
NULL
) {

1129 
	`еrЪtf
(
°dФr
, "FAILED (contentБype)\n");

1130 
	`exЩ
(1);

1133 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
wh©
)) {

1134 
	`еrЪtf
(
°dФr
, "FAILED (length %zu vs %zu)\n",

1135 
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), 
	`°ЊТ
(
wh©
));

1136 
	`exЩ
(1);

1139 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
wh©
, 
	`°ЊТ
(what)) != 0) {

1140 
	`еrЪtf
(
°dФr
, "FAILED (data)\n");

1141 
	`exЩ
(1);

1144 
Л°_ok
 = 1;

1145 
	`evТt_loЁexЩ
(
NULL
);

1146 
	}
}

1149 
	$hЙp_di•©chФ_Л°
()

1151 
p№t
 = -1;

1152 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1153 
evhЙp_їque°
 *
їq
 = 
NULL
;

1155 
Л°_ok
 = 0;

1157 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1159 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1160 
	`Й_as£є
(
evcЏ
);

1163 
	`evhЙp_cЏ√щiЏ_£t_lo€l_addїss
(
evcЏ
, "127.0.0.1");

1170 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_di•©chФ_Л°_dЏe
, 
NULL
);

1171 
	`Й_as£є
(
їq
);

1174 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

1176 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/?arg=val") == -1) {

1177 
	`Й_ab№t_msg
("Couldn't makeДequest");

1180 
	`evТt_di•©ch
();

1182 
Тd
:

1183 iа(
evcЏ
)

1184 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1185 iа(
hЙp
)

1186 
	`evhЙp_дУ
(
hЙp
);

1187 
	}
}

1193 
hЙp_po°їque°_dЏe
(
evhЙp_їque°
 *, *);

1195 
	#POST_DATA
 "Okay. NўДЧќyЕrЪtf"

	)

1198 
	$hЙp_po°_Л°
()

1200 
p№t
 = -1;

1201 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1202 
evhЙp_їque°
 *
їq
 = 
NULL
;

1204 
Л°_ok
 = 0;

1206 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1208 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1209 
	`Й_as£є
(
evcЏ
);

1216 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_po°їque°_dЏe
, 
NULL
);

1217 
	`Й_as£є
(
їq
);

1220 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

1221 
	`evbufгr_add_іЪtf
(
їq
->
ouНut_bufгr
, 
POST_DATA
);

1223 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_POST
, "/postit") == -1) {

1224 
	`Й_ab№t_msg
("Couldn't makeДequest");

1227 
	`evТt_di•©ch
();

1229 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1230 
	`evhЙp_дУ
(
hЙp
);

1232 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

1233 
Тd
:

1235 
	}
}

1238 
	$hЙp_po°_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

1240 
evbufгr
 *
evb
;

1241 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

1244 iа(
їq
->
ty≥
 !р
EVHTTP_REQ_POST
) {

1245 
	`еrЪtf
(
°dout
, "FAILED (postБype)\n");

1246 
	`exЩ
(1);

1249 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
POST_DATA
)) {

1250 
	`еrЪtf
(
°dout
, "FAILED (length: %zu vs %zu)\n",

1251 
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), 
	`°ЊТ
(
POST_DATA
));

1252 
	`exЩ
(1);

1255 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
POST_DATA
,

1256 
	`°ЊТ
(
POST_DATA
))) {

1257 
	`еrЪtf
(
°dout
, "FAILED (data)\n");

1258 
	`еrЪtf
(
°dout
, "Gў :%s\n", 
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
));

1259 
	`еrЪtf
(
°dout
, "W™t:%s\n", 
POST_DATA
);

1260 
	`exЩ
(1);

1263 
evb
 = 
	`evbufгr_√w
();

1264 
	`evbufгr_add_іЪtf
(
evb
, 
BASIC_REQUEST_BODY
);

1266 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†fЪe", 
evb
);

1268 
	`evbufгr_дУ
(
evb
);

1269 
	}
}

1272 
	$hЙp_po°їque°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1274 cЏ° *
wh©
 = 
BASIC_REQUEST_BODY
;

1276 iа(
їq
 =р
NULL
) {

1277 
	`еrЪtf
(
°dФr
, "FAILED (timeout)\n");

1278 
	`exЩ
(1);

1281 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

1283 
	`еrЪtf
(
°dФr
, "FAILED (response code)\n");

1284 
	`exЩ
(1);

1287 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-Ty≥"и=р
NULL
) {

1288 
	`еrЪtf
(
°dФr
, "FAILED (contentБype)\n");

1289 
	`exЩ
(1);

1292 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
wh©
)) {

1293 
	`еrЪtf
(
°dФr
, "FAILED (length %zu vs %zu)\n",

1294 
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), 
	`°ЊТ
(
wh©
));

1295 
	`exЩ
(1);

1298 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
wh©
, 
	`°ЊТ
(what)) != 0) {

1299 
	`еrЪtf
(
°dФr
, "FAILED (data)\n");

1300 
	`exЩ
(1);

1303 
Л°_ok
 = 1;

1304 
	`evТt_loЁexЩ
(
NULL
);

1305 
	}
}

1311 
hЙp_puМeque°_dЏe
(
evhЙp_їque°
 *, *);

1313 
	#PUT_DATA
 "Hi, I'm somРPUT d©a"

	)

1316 
	$hЙp_put_Л°
()

1318 
p№t
 = -1;

1319 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1320 
evhЙp_їque°
 *
їq
 = 
NULL
;

1322 
Л°_ok
 = 0;

1324 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1326 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1327 
	`Й_as£є
(
evcЏ
);

1333 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_puМeque°_dЏe
, 
NULL
);

1334 
	`Й_as£є
(
їq
);

1337 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "someotherhost");

1338 
	`evbufгr_add_іЪtf
(
їq
->
ouНut_bufгr
, 
PUT_DATA
);

1340 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_PUT
, "/putit") == -1) {

1341 
	`Й_ab№t_msg
("Couldn't makeДequest");

1344 
	`evТt_di•©ch
();

1346 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1347 
	`evhЙp_дУ
(
hЙp
);

1349 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

1350 
Тd
:

1352 
	}
}

1355 
	$hЙp_put_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

1357 
evbufгr
 *
evb
;

1358 
	`evТt_debug
(("%s: cЃЋd\n", 
__func__
));

1361 iа(
їq
->
ty≥
 !р
EVHTTP_REQ_PUT
) {

1362 
	`еrЪtf
(
°dout
, "FAILED (putБype)\n");

1363 
	`exЩ
(1);

1366 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
PUT_DATA
)) {

1367 
	`еrЪtf
(
°dout
, "FAILED (length: %zu vs %zu)\n",

1368 
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), 
	`°ЊТ
(
PUT_DATA
));

1369 
	`exЩ
(1);

1372 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
PUT_DATA
,

1373 
	`°ЊТ
(
PUT_DATA
))) {

1374 
	`еrЪtf
(
°dout
, "FAILED (data)\n");

1375 
	`еrЪtf
(
°dout
, "Gў :%s\n", 
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
));

1376 
	`еrЪtf
(
°dout
, "W™t:%s\n", 
PUT_DATA
);

1377 
	`exЩ
(1);

1380 
evb
 = 
	`evbufгr_√w
();

1381 
	`evbufгr_add_іЪtf
(
evb
, "ThatЗin't funny");

1383 
	`evhЙp_£nd_їґy
(
їq
, 
HTTP_OK
, "EvФythЪg i†gї©", 
evb
);

1385 
	`evbufгr_дУ
(
evb
);

1386 
	}
}

1389 
	$hЙp_puМeque°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1391 cЏ° *
wh©
 = "ThatЗin't funny";

1393 iа(
їq
 =р
NULL
) {

1394 
	`еrЪtf
(
°dФr
, "FAILED (timeout)\n");

1395 
	`exЩ
(1);

1398 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

1400 
	`еrЪtf
(
°dФr
, "FAILED (response code)\n");

1401 
	`exЩ
(1);

1404 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-Ty≥"и=р
NULL
) {

1405 
	`еrЪtf
(
°dФr
, "FAILED (contentБype)\n");

1406 
	`exЩ
(1);

1409 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
и!р
	`°ЊТ
(
wh©
)) {

1410 
	`еrЪtf
(
°dФr
, "FAILED (length %zu vs %zu)\n",

1411 
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), 
	`°ЊТ
(
wh©
));

1412 
	`exЩ
(1);

1415 iа(
	`memcmp
(
	`EVBUFFER_DATA
(
їq
->
Ъput_bufгr
), 
wh©
, 
	`°ЊТ
(what)) != 0) {

1416 
	`еrЪtf
(
°dФr
, "FAILED (data)\n");

1417 
	`exЩ
(1);

1420 
Л°_ok
 = 1;

1421 
	`evТt_loЁexЩ
(
NULL
);

1422 
	}
}

1425 
	$hЙp_зЮuї_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

1427 cЏ° *
wh©
 = "400 Bad Request";

1428 iа(
	`evbufгr_fЪd
(
	`bufгїvТt_gС_Ъput
(
bev
),

1429 (cЏ° *и
wh©
, 
	`°ЊТ
(wh©)и!р
NULL
) {

1430 
Л°_ok
 = 2;

1431 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

1432 
	`evТt_loЁexЩ
(
NULL
);

1434 
	}
}

1440 
	$hЙp_зЮuї_Л°
()

1442 
bufгїvТt
 *
bev
;

1443 
fd
;

1444 cЏ° *
hЙp_їque°
;

1445 
p№t
 = -1;

1447 
Л°_ok
 = 0;

1449 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1451 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

1454 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_зЮuї_їadcb
, 
hЙp_wrЩecb
,

1455 
hЙp_Фr№cb
, 
NULL
);

1457 
hЙp_їque°
 = "illegalДequest\r\n";

1459 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

1461 
	`evТt_di•©ch
();

1463 
	`bufгїvТt_дУ
(
bev
);

1464 
	`EVUTIL_CLOSESOCKET
(
fd
);

1466 
	`evhЙp_дУ
(
hЙp
);

1468 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

1469 
Тd
:

1471 
	}
}

1474 
	$юo£_dСeщ_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1476 
timevЃ
 
tv
;

1477 
	`Й_as£є
(
їq
);

1478 
	`Й_as£є
(
їq
->
ї•Џ£_code
 =р
HTTP_OK
);

1480 
Л°_ok
 = 1;

1482 
Тd
:

1483 
	`evutЮ_timФюЧr
(&
tv
);

1484 
tv
.
tv_£c
 = 3;

1485 
	`evТt_loЁexЩ
(&
tv
);

1486 
	}
}

1489 
	$юo£_dСeщ_ѕunch
(
fd
, 
wh©
, *
ђg
)

1491 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

1492 
evhЙp_їque°
 *
їq
;

1494 
їq
 = 
	`evhЙp_їque°_√w
(
юo£_dСeщ_dЏe
, 
NULL
);

1497 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

1500 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

1501 
	`Й_зЮ_msg
("Couldn't makeДequest");

1503 
	}
}

1506 
	$юo£_dСeщ_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

1508 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
ђg
;

1509 
timevЃ
 
tv
;

1511 iа(
їq
 !р
NULL
 &&Дeq->
ї•Џ£_code
 !р
HTTP_OK
) {

1512 
	`Й_ab№t_msg
("Failed");

1515 
	`evutЮ_timФюЧr
(&
tv
);

1516 
tv
.
tv_£c
 = 3;

1519 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
юo£_dСeщ_ѕunch
, 
evcЏ
, &
tv
);

1520 
Тd
:

1522 
	}
}

1526 
	$_hЙp_юo£_dСeщiЏ
(
wЩh_dЦay
)

1528 
p№t
 = -1;

1529 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1530 
evhЙp_їque°
 *
їq
 = 
NULL
;

1532 
Л°_ok
 = 0;

1533 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1536 
	`evhЙp_£t_timeout
(
hЙp
, 1);

1538 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1539 
	`Й_as£є
(
evcЏ
);

1540 
dЦayed_юЫЅ
 = 
evcЏ
;

1547 
їq
 = 
	`evhЙp_їque°_√w
(
юo£_dСeщ_cb
, 
evcЏ
);

1550 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

1553 iа(
	`evhЙp_make_їque°
(
evcЏ
,

1554 
їq
, 
EVHTTP_REQ_GET
, 
wЩh_dЦay
 ? "/largedelay" : "/test") == -1) {

1555 
	`Й_ab№t_msg
("couldn't makeДequest");

1556 
	`exЩ
(1);

1559 
	`evТt_di•©ch
();

1562 
	`Й_as£є
(
	`TAILQ_FIRST
(&
hЙp
->
cЏ√щiЏs
и=р
NULL
);

1564 
Тd
:

1565 iа(
evcЏ
)

1566 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

1567 iа(
hЙp
)

1568 
	`evhЙp_дУ
(
hЙp
);

1569 
	}
}

1571 
	$hЙp_юo£_dСeщiЏ_Л°
()

1573 
	`_hЙp_юo£_dСeщiЏ
(0);

1574 
	}
}

1576 
	$hЙp_юo£_dСeщiЏ_dЦay_Л°
()

1578 
	`_hЙp_юo£_dСeщiЏ
(1);

1579 
	}
}

1582 
	$hЙp_highp№t_Л°
()

1584 
i
 = -1;

1585 
evhЙp
 *
myhЙp
 = 
NULL
;

1588 
i
 = 0; i < 50; ++i) {

1589 
myhЙp
 = 
	`evhЙp_°ђt
("127.0.0.1", 65535 - 
i
);

1590 iа(
myhЙp
 !р
NULL
) {

1591 
Л°_ok
 = 1;

1592 
	`evhЙp_дУ
(
myhЙp
);

1597 
	`Й_зЮ_msg
("Couldn't getЗ highЕort");

1598 
	}
}

1601 
	$hЙp_bad_hЧdФ_Л°
(*
±r
)

1603 
evkeyvЃq
 
hЧdФs
;

1605 
	`TAILQ_INIT
(&
hЧdФs
);

1607 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One", "Two") == 0);

1608 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One", "Two\r\n Three") == 0);

1609 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One\r", "Two") == -1);

1610 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One\n", "Two") == -1);

1611 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One", "Two\r") == -1);

1612 
	`Й_w™t
(
	`evhЙp_add_hЧdФ
(&
hЧdФs
, "One", "Two\n") == -1);

1614 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1615 
	}
}

1617 
	$vЃid©e_hЧdФ
(

1618 cЏ° 
evkeyvЃq
* 
hЧdФs
,

1619 cЏ° *
key
, cЏ° *
vЃue
)

1621 cЏ° *
їЃ_vЃ
 = 
	`evhЙp_fЪd_hЧdФ
(
hЧdФs
, 
key
);

1622 
	`Й_as£є
(
їЃ_vЃ
 !р
NULL
);

1623 
	`Й_w™t
(
	`°rcmp
(
їЃ_vЃ
, 
vЃue
) == 0);

1624 
Тd
:

1626 
	}
}

1629 
	$hЙp_Јr£_quФy_Л°
(*
±r
)

1631 
evkeyvЃq
 
hЧdФs
;

1633 
	`TAILQ_INIT
(&
hЧdФs
);

1635 
	`evhЙp_Јr£_quФy
("hЙp://www.Л°.com/?qсe°", &
hЧdФs
);

1636 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "q", "test") == 0);

1637 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1639 
	`evhЙp_Јr£_quФy
("hЙp://www.Л°.com/?qсe°&foo=bђ", &
hЧdФs
);

1640 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "q", "test") == 0);

1641 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "foo", "bar") == 0);

1642 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1644 
	`evhЙp_Јr£_quФy
("hЙp://www.Л°.com/?qсe°+foo", &
hЧdФs
);

1645 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "q", "test foo") == 0);

1646 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1648 
	`evhЙp_Јr£_quФy
("hЙp://www.Л°.com/?qсe°%0Afoo", &
hЧdФs
);

1649 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "q", "test\nfoo") == 0);

1650 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1652 
	`evhЙp_Јr£_quФy
("hЙp://www.Л°.com/?qсe°%0Dfoo", &
hЧdФs
);

1653 
	`Й_w™t
(
	`vЃid©e_hЧdФ
(&
hЧdФs
, "q", "test\rfoo") == 0);

1654 
	`evhЙp_юЧr_hЧdФs
(&
hЧdФs
);

1655 
	}
}

1658 
	$hЙp_ba£_Л°
()

1660 
evТt_ba£
 *
tmp
;

1661 
bufгїvТt
 *
bev
;

1662 
fd
;

1663 cЏ° *
hЙp_їque°
;

1664 
p№t
 = -1;

1666 
ba£
 = 
	`evТt_ЪЩ
();

1672 
tmp
 = 
	`evТt_ЪЩ
();

1674 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
ba£
);

1676 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

1679 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_їadcb
, 
hЙp_wrЩecb
,

1680 
hЙp_Фr№cb
, 
NULL
);

1681 
	`bufгїvТt_ba£_£t
(
ba£
, 
bev
);

1683 
hЙp_їque°
 =

1689 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

1691 
	`evТt_ba£_di•©ch
(
ba£
);

1693 
	`bufгїvТt_дУ
(
bev
);

1694 
	`EVUTIL_CLOSESOCKET
(
fd
);

1696 
	`evhЙp_дУ
(
hЙp
);

1698 
	`evТt_ba£_дУ
(
ba£
);

1699 
ba£
 = 
tmp
;

1701 
Л°_ok
 = (test_ok == 2);

1702 
	}
}

1710 
	$hЙp_ЪcomґСe_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

1712 
Л°_ok
 = -1;

1713 
	`evТt_loЁexЩ
(
NULL
);

1714 
	}
}

1717 
	$hЙp_ЪcomґСe_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

1719 iа(
wh©
 =р(
EVBUFFER_READ
 | 
EVBUFFER_EOF
))

1720 
Л°_ok
++;

1722 
Л°_ok
 = -2;

1723 
	`evТt_loЁexЩ
(
NULL
);

1724 
	}
}

1727 
	$hЙp_ЪcomґСe_wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

1729 iа(
ђg
 !р
NULL
) {

1730 
fd
 = *(*)
ђg
;

1732 
	`shutdown
(
fd
, 
SHUT_WR
);

1734 iа(
	`EVBUFFER_LENGTH
(
	`bufгїvТt_gС_ouНut
(
bev
)) == 0) {

1736 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

1737 
Л°_ok
++;

1739 
	}
}

1742 
	$_hЙp_ЪcomґСe_Л°
(
u£_timeout
)

1744 
bufгїvТt
 *
bev
;

1745 
fd
;

1746 cЏ° *
hЙp_їque°
;

1747 
p№t
 = -1;

1748 
timevЃ
 
tv_°ђt
, 
tv_Тd
;

1750 
Л°_ok
 = 0;

1752 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1753 
	`evhЙp_£t_timeout
(
hЙp
, 1);

1755 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

1758 
bev
 = 
	`bufгїvТt_√w
(
fd
,

1759 
hЙp_ЪcomґСe_їadcb
, 
hЙp_ЪcomґСe_wrЩecb
,

1760 
hЙp_ЪcomґСe_Фr№cb
, 
u£_timeout
 ? 
NULL
 : &
fd
);

1762 
hЙp_їque°
 =

1766 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

1768 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

1770 
	`evТt_di•©ch
();

1772 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

1773 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

1775 
	`bufгїvТt_дУ
(
bev
);

1776 iа(
u£_timeout
) {

1777 
	`EVUTIL_CLOSESOCKET
(
fd
);

1780 
	`evhЙp_дУ
(
hЙp
);

1782 iа(
u£_timeout
 && 
tv_Тd
.
tv_£c
 >= 3) {

1783 
	`Й_ab№t_msg
("time");

1784 } iа(!
u£_timeout
 && 
tv_Тd
.
tv_£c
 >= 1) {

1786 
	`Й_ab№t_msg
("time");

1789 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

1790 
Тd
:

1792 
	}
}

1794 
	$hЙp_ЪcomґСe_Л°
()

1796 
	`_hЙp_ЪcomґСe_Л°
(0);

1797 
	}
}

1799 
	$hЙp_ЪcomґСe_timeout_Л°
()

1801 
	`_hЙp_ЪcomґСe_Л°
(1);

1802 
	}
}

1809 
	$hЙp_chunked_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

1812 
	}
}

1815 
	$hЙp_chunked_Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

1817 iа(!
Л°_ok
)

1818 
out
;

1820 
Л°_ok
 = -1;

1822 iа((
wh©
 & 
EVBUFFER_EOF
) != 0) {

1823 
evhЙp_їque°
 *
їq
 = 
	`evhЙp_їque°_√w
(
NULL
, NULL);

1824 cЏ° *
hЧdФ
;

1825 
mesІge_їad_°©us
 
dЏe
;

1827 
їq
->
kЪd
 = 
EVHTTP_RESPONSE
;

1828 
dЏe
 = 
	`evhЙp_Јr£_fЬ°lЪe
(
їq
, 
	`bufгїvТt_gС_Ъput
(
bev
));

1829 iа(
dЏe
 !р
ALL_DATA_READ
)

1830 
out
;

1832 
dЏe
 = 
	`evhЙp_Јr£_hЧdФs
(
їq
, 
	`bufгїvТt_gС_Ъput
(
bev
));

1833 iа(
dЏe
 !р
ALL_DATA_READ
)

1834 
out
;

1836 
hЧdФ
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Transfer-Encoding");

1837 iа(
hЧdФ
 =р
NULL
 || 
	`°rcmp
(header, "chunked"))

1838 
out
;

1840 
hЧdФ
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "Connection");

1841 iа(
hЧdФ
 =р
NULL
 || 
	`°rcmp
(header, "close"))

1842 
out
;

1844 
hЧdФ
 = 
	`evbufгr_їad 
(
	`bufгїvТt_gС_Ъput
(
bev
), 
NULL
, 
EVBUFFER_EOL_CRLF
);

1845 iа(
hЧdФ
 =р
NULL
)

1846 
out
;

1848 iа(
	`°rcmp
(
hЧdФ
, "d"))

1849 
out
;

1850 
	`дУ
((*)
hЧdФ
);

1852 iа(
	`°Їcmp
((*)
	`evbufгr_puќup
(
	`bufгїvТt_gС_Ъput
(
bev
), 13),

1854 
out
;

1856 
	`evbufгr_dњЪ
(
	`bufгїvТt_gС_Ъput
(
bev
), 13 + 2);

1858 
hЧdФ
 = 
	`evbufгr_їad 
(
	`bufгїvТt_gС_Ъput
(
bev
), 
NULL
, 
EVBUFFER_EOL_CRLF
);

1859 iа(
hЧdФ
 =р
NULL
)

1860 
out
;

1862 iа(
	`°rcmp
(
hЧdФ
, "12"))

1863 
out
;

1864 
	`дУ
((*)
hЧdФ
);

1866 iа(
	`°Їcmp
((*)
	`evbufгr_puќup
(
	`bufгїvТt_gС_Ъput
(
bev
), 18),

1868 
out
;

1870 
	`evbufгr_dњЪ
(
	`bufгїvТt_gС_Ъput
(
bev
), 18 + 2);

1872 
hЧdФ
 = 
	`evbufгr_їad 
(
	`bufгїvТt_gС_Ъput
(
bev
), 
NULL
, 
EVBUFFER_EOL_CRLF
);

1873 iа(
hЧdФ
 =р
NULL
)

1874 
out
;

1876 iа(
	`°rcmp
(
hЧdФ
, "8"))

1877 
out
;

1878 
	`дУ
((*)
hЧdФ
);

1880 iа(
	`°Їcmp
((*)
	`evbufгr_puќup
(
	`bufгїvТt_gС_Ъput
(
bev
), 8),

1882 
out
;

1884 
	`evbufгr_dњЪ
(
	`bufгїvТt_gС_Ъput
(
bev
), 8 + 2);

1886 
hЧdФ
 = 
	`evbufгr_їad 
(
	`bufгїvТt_gС_Ъput
(
bev
), 
NULL
, 
EVBUFFER_EOL_CRLF
);

1887 iа(
hЧdФ
 =р
NULL
)

1888 
out
;

1890 iа(
	`°rcmp
(
hЧdФ
, "0"))

1891 
out
;

1892 
	`дУ
((*)
hЧdФ
);

1894 
Л°_ok
 = 2;

1896 
	`evhЙp_їque°_дУ
(
їq
);

1899 
out
:

1900 
	`evТt_loЁexЩ
(
NULL
);

1901 
	}
}

1904 
	$hЙp_chunked_wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

1906 iа(
	`EVBUFFER_LENGTH
(
	`bufгїvТt_gС_ouНut
(
bev
)) == 0) {

1908 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
);

1909 
Л°_ok
++;

1911 
	}
}

1914 
	$hЙp_chunked_їque°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

1916 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

1917 
	`еrЪtf
(
°dФr
, "FAILED\n");

1918 
	`exЩ
(1);

1921 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
,

1922 "Tњnsгr-EncodЪg"и=р
NULL
) {

1923 
	`еrЪtf
(
°dФr
, "FAILED\n");

1924 
	`exЩ
(1);

1927 iа(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
) != 13 + 18 + 8) {

1928 
	`еrЪtf
(
°dФr
, "FAILED\n");

1929 
	`exЩ
(1);

1932 iа(
	`°Їcmp
((*)
	`evbufгr_puќup
(
їq
->
Ъput_bufгr
, 13 + 18 + 8),

1935 
	`еrЪtf
(
°dФr
, "FAILED\n");

1936 
	`exЩ
(1);

1939 
Л°_ok
 = 1;

1940 
	`evТt_loЁexЩ
(
NULL
);

1941 
	}
}

1944 
	$hЙp_chunk_out_Л°
()

1946 
bufгїvТt
 *
bev
;

1947 
fd
;

1948 cЏ° *
hЙp_їque°
;

1949 
p№t
 = -1;

1950 
timevЃ
 
tv_°ђt
, 
tv_Тd
;

1951 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

1952 
evhЙp_їque°
 *
їq
 = 
NULL
;

1953 
i
;

1955 
Л°_ok
 = 0;

1957 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

1959 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

1962 
bev
 = 
	`bufгїvТt_√w
(
fd
,

1963 
hЙp_chunked_їadcb
, 
hЙp_chunked_wrЩecb
,

1964 
hЙp_chunked_Фr№cb
, 
NULL
);

1966 
hЙp_їque°
 =

1972 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

1974 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

1976 
	`evТt_di•©ch
();

1978 
	`bufгїvТt_дУ
(
bev
);

1980 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

1981 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

1983 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, <, 1);

1985 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 2);

1988 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

1989 
	`Й_as£є
(
evcЏ
);

1992 
i
 = 0; i < 2; i++) {

1993 
Л°_ok
 = 0;

1994 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_chunked_їque°_dЏe
, 
NULL
);

1997 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2000 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
,

2001 
EVHTTP_REQ_GET
, "/chunked") == -1) {

2002 
	`Й_ab№t_msg
("Couldn't makeДequest");

2005 
	`evТt_di•©ch
();

2007 
	`Й_as£є
(
Л°_ok
 == 1);

2010 
Тd
:

2011 iа(
evcЏ
)

2012 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2013 iа(
hЙp
)

2014 
	`evhЙp_дУ
(
hЙp
);

2015 
	}
}

2018 
	$hЙp_°їam_out_Л°
()

2020 
p№t
 = -1;

2021 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

2022 
evhЙp_їque°
 *
їq
 = 
NULL
;

2024 
Л°_ok
 = 0;

2026 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2028 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2029 
	`Й_as£є
(
evcЏ
);

2036 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_dЏe
,

2040 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2043 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/streamed")

2045 
	`Й_ab№t_msg
("Couldn't makeДequest");

2048 
	`evТt_di•©ch
();

2050 
Тd
:

2051 iа(
evcЏ
)

2052 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2053 iа(
hЙp
)

2054 
	`evhЙp_дУ
(
hЙp
);

2055 
	}
}

2058 
	$hЙp_°їam_Ъ_chunk
(
evhЙp_їque°
 *
їq
, *
ђg
)

2060 
evbufгr
 *
їґy
 = 
ђg
;

2062 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

2063 
	`еrЪtf
(
°dФr
, "FAILED\n");

2064 
	`exЩ
(1);

2067 
	`evbufгr_add_bufгr
(
їґy
, 
їq
->
Ъput_bufгr
);

2068 
	}
}

2071 
	$hЙp_°їam_Ъ_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

2073 iа(
	`evbufгr_gС_Ћngth
(
їq
->
Ъput_bufгr
) != 0) {

2074 
	`еrЪtf
(
°dФr
, "FAILED\n");

2075 
	`exЩ
(1);

2078 
	`evТt_loЁexЩ
(
NULL
);

2079 
	}
}

2085 
	$_hЙp_°їam_Ъ_Л°
(cЏ° *
uЊ
,

2086 
size_t
 
ex≥щed_Ћn
, cЏ° *
ex≥щed
)

2088 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

2089 
evbufгr
 *
їґy
 = 
	`evbufгr_√w
();

2090 
evhЙp_їque°
 *
їq
 = 
NULL
;

2091 
p№t
 = -1;

2093 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2095 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2096 
	`Й_as£є
(
evcЏ
);

2098 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_°їam_Ъ_dЏe
, 
їґy
);

2099 
	`evhЙp_їque°_£t_chunked_cb
(
їq
, 
hЙp_°їam_Ъ_chunk
);

2102 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, 
uЊ
) == -1) {

2103 
	`Й_ab№t_msg
("Couldn't makeДequest");

2106 
	`evТt_di•©ch
();

2108 iа(
	`evbufгr_gС_Ћngth
(
їґy
и!р
ex≥щed_Ћn
) {

2109 
	`TT_DIE
(("replyЖength %zu;Гxpected %zu; FAILED (%s)\n",

2110 
	`EVBUFFER_LENGTH
(
їґy
), 
ex≥щed_Ћn
,

2111 
	`evbufгr_puќup
(
їґy
, -1)));

2114 iа(
	`memcmp
(
	`evbufгr_puќup
(
їґy
, -1), 
ex≥щed
, 
ex≥щed_Ћn
) != 0) {

2115 
	`Й_ab№t_msg
("Memory mismatch");

2118 
Л°_ok
 = 1;

2119 
Тd
:

2120 iа(
їґy
)

2121 
	`evbufгr_дУ
(
їґy
);

2122 iа(
evcЏ
)

2123 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2124 iа(
hЙp
)

2125 
	`evhЙp_дУ
(
hЙp
);

2126 
	}
}

2129 
	$hЙp_°їam_Ъ_Л°
()

2131 
	`_hЙp_°їam_Ъ_Л°
("/chunked", 13 + 18 + 8,

2134 
	`_hЙp_°їam_Ъ_Л°
("/Л°", 
	`°ЊТ
(
BASIC_REQUEST_BODY
),

2135 
BASIC_REQUEST_BODY
);

2136 
	}
}

2139 
	$hЙp_°їam_Ъ_€nыl_chunk
(
evhЙp_їque°
 *
їq
, *
ђg
)

2141 
	`Й_Ъt_Ё
(
їq
->
ї•Џ£_code
, ==, 
HTTP_OK
);

2143 
Тd
:

2144 
	`evhЙp_€nыl_їque°
(
їq
);

2145 
	`evТt_loЁexЩ
(
NULL
);

2146 
	}
}

2149 
	$hЙp_°їam_Ъ_€nыl_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

2152 
	`Й_зЮ_msg
("In cancel done");

2153 
	}
}

2156 
	$hЙp_°їam_Ъ_€nыl_Л°
()

2158 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

2159 
evhЙp_їque°
 *
їq
 = 
NULL
;

2160 
p№t
 = -1;

2162 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2164 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2165 
	`Й_as£є
(
evcЏ
);

2167 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_°їam_Ъ_€nыl_dЏe
, 
NULL
);

2168 
	`evhЙp_їque°_£t_chunked_cb
(
їq
, 
hЙp_°їam_Ъ_€nыl_chunk
);

2171 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/chunked") == -1) {

2172 
	`Й_ab№t_msg
("Couldn't makeДequest");

2175 
	`evТt_di•©ch
();

2177 
Л°_ok
 = 1;

2178 
Тd
:

2179 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2180 
	`evhЙp_дУ
(
hЙp
);

2182 
	}
}

2185 
	$hЙp_cЏ√щiЏ_їМy_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

2187 
	`Й_as£є
(
їq
);

2188 
	`Й_Ъt_Ё
(
їq
->
ї•Џ£_code
, !=, 
HTTP_OK
);

2189 iа(
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "CЏЛЅ-Ty≥"и!р
NULL
) {

2190 
	`Й_ab№t_msg
("(contentБype)\n");

2193 
	`Й_uЪt_Ё
(
	`EVBUFFER_LENGTH
(
їq
->
Ъput_bufгr
), ==, 0);

2195 
Л°_ok
 = 1;

2196 
Тd
:

2197 
	`evТt_loЁexЩ
(
NULL
);

2198 
	}
}

2201 
	$hЙp_make_web_£rvФ
(
fd
, 
wh©
, *
ђg
)

2203 
p№t
 = -1;

2204 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2205 
	}
}

2208 
	$hЙp_cЏ√щiЏ_їМy_Л°
()

2210 
p№t
 = -1;

2211 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

2212 
evhЙp_їque°
 *
їq
 = 
NULL
;

2213 
timevЃ
 
tv
, 
tv_°ђt
, 
tv_Тd
;

2215 
Л°_ok
 = 0;

2218 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2219 
	`evhЙp_дУ
(
hЙp
);

2221 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2222 
	`Й_as£є
(
evcЏ
);

2224 
	`evhЙp_cЏ√щiЏ_£t_timeout
(
evcЏ
, 1);

2226 
	`evhЙp_cЏ√щiЏ_£t_lo€l_addїss
(
evcЏ
, "127.0.0.1");

2233 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_cЏ√щiЏ_їМy_dЏe
, 
NULL
);

2234 
	`Й_as£є
(
їq
);

2237 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2239 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

2241 
	`Й_ab№t_msg
("Couldn't makeДequest");

2244 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

2245 
	`evТt_di•©ch
();

2246 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

2247 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

2248 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, <, 1);

2250 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

2255 
Л°_ok
 = 0;

2257 
	`evhЙp_cЏ√щiЏ_£t_timeout
(
evcЏ
, 1);

2258 
	`evhЙp_cЏ√щiЏ_£t_їМЫs
(
evcЏ
, 1);

2260 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_cЏ√щiЏ_їМy_dЏe
, 
NULL
);

2261 
	`Й_as£є
(
їq
);

2264 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2266 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

2268 
	`Й_ab№t_msg
("Couldn't makeДequest");

2271 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

2272 
	`evТt_di•©ch
();

2273 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

2274 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

2275 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, >, 1);

2276 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, <, 6);

2278 
	`Й_as£є
(
Л°_ok
 == 1);

2284 
Л°_ok
 = 0;

2286 
	`evhЙp_cЏ√щiЏ_£t_timeout
(
evcЏ
, 1);

2287 
	`evhЙp_cЏ√щiЏ_£t_їМЫs
(
evcЏ
, 3);

2289 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_di•©chФ_Л°_dЏe
, 
NULL
);

2290 
	`Й_as£є
(
їq
);

2293 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2295 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
,

2297 
	`Й_ab№t_msg
("Couldn't makeДequest");

2303 
	`evutЮ_timФюЧr
(&
tv
);

2304 
tv
.
tv_£c
 = 1;

2305 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
hЙp_make_web_£rvФ
, 
NULL
, &
tv
);

2307 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

2308 
	`evТt_di•©ch
();

2309 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

2311 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

2313 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, >, 1);

2314 
	`Й_Ъt_Ё
(
tv_Тd
.
tv_£c
, <, 6);

2316 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

2318 
Тd
:

2319 iа(
evcЏ
)

2320 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2321 iа(
hЙp
)

2322 
	`evhЙp_дУ
(
hЙp
);

2323 
	}
}

2326 
	$hЙp_іimЩives
(*
±r
)

2328 *
es€≥d
 = 
NULL
;

2329 
evhЙp
 *
hЙp
;

2331 
es€≥d
 = 
	`evhЙp_htmЋs€≥
("<script>");

2332 
	`Й_°r_Ё
(
es€≥d
, ==, "&lt;script&gt;");

2333 
	`дУ
(
es€≥d
);

2335 
es€≥d
 = 
	`evhЙp_htmЋs€≥
("\"\'&");

2336 
	`Й_°r_Ё
(
es€≥d
, ==, "&quot;&#039;&amp;");

2338 
hЙp
 = 
	`evhЙp_√w
(
NULL
);

2339 
	`Й_Ъt_Ё
(
	`evhЙp_£t_cb
(
hЙp
, "/Л°", 
hЙp_basic_cb
, 
NULL
), ==, 0);

2340 
	`Й_Ъt_Ё
(
	`evhЙp_£t_cb
(
hЙp
, "/Л°", 
hЙp_basic_cb
, 
NULL
), ==, -1);

2341 
	`Й_Ъt_Ё
(
	`evhЙp_dЦ_cb
(
hЙp
, "/test"), ==, 0);

2342 
	`Й_Ъt_Ё
(
	`evhЙp_dЦ_cb
(
hЙp
, "/test"), ==, -1);

2343 
	`Й_Ъt_Ё
(
	`evhЙp_£t_cb
(
hЙp
, "/Л°", 
hЙp_basic_cb
, 
NULL
), ==, 0);

2344 
	`evhЙp_дУ
(
hЙp
);

2346 
Тd
:

2347 iа(
es€≥d
)

2348 
	`дУ
(
es€≥d
);

2349 
	}
}

2352 
	$hЙp_mu…i_lЪe_hЧdФ_Л°
()

2354 
bufгїvТt
 *
bev
р
NULL
;

2355 
evutЮ_sockС_t
 
fd
 = -1;

2356 cЏ° *
hЙp_°ђt_їque°
;

2357 
p№t
 = -1;

2359 
Л°_ok
 = 0;

2361 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2363 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

2366 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
hЙp_їadcb
, 
hЙp_wrЩecb
,

2367 
hЙp_Фr№cb
, 
NULL
);

2369 
hЙp_°ђt_їque°
 =

2379 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_°ђt_їque°
, 
	`°ЊТ
(http_start_request));

2381 
	`evТt_di•©ch
();

2383 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 4);

2384 
Тd
:

2385 iа(
bev
)

2386 
	`bufгїvТt_дУ
(
bev
);

2387 iа(
fd
 >= 0)

2388 
	`EVUTIL_CLOSESOCKET
(
fd
);

2389 iа(
hЙp
)

2390 
	`evhЙp_дУ
(
hЙp
);

2391 
	}
}

2394 
	$hЙp_їque°_bad
(
evhЙp_їque°
 *
їq
, *
ђg
)

2396 iа(
їq
 !р
NULL
) {

2397 
	`еrЪtf
(
°dФr
, "FAILED\n");

2398 
	`exЩ
(1);

2401 
Л°_ok
 = 1;

2402 
	`evТt_loЁexЩ
(
NULL
);

2403 
	}
}

2406 
	$hЙp_√g©ive_cЏЛЅ_Ћngth_Л°
()

2408 
p№t
 = -1;

2409 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

2410 
evhЙp_їque°
 *
їq
 = 
NULL
;

2412 
Л°_ok
 = 0;

2414 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2416 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2417 
	`Й_as£є
(
evcЏ
);

2424 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_їque°_bad
, 
NULL
);

2427 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "X-Negative", "makeitso");

2430 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

2431 
	`Й_ab№t_msg
("Couldn't makeДequest");

2434 
	`evТt_di•©ch
();

2436 
Тd
:

2437 iа(
evcЏ
)

2438 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2439 iа(
hЙp
)

2440 
	`evhЙp_дУ
(
hЙp
);

2441 
	}
}

2445 
	$hЙp_d©a_Ћngth_cЏ°њЪts_Л°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

2447 
	`Й_as£є
(
їq
);

2448 
	`Й_Ъt_Ё
(
їq
->
ї•Џ£_code
, ==, 
HTTP_BADREQUEST
);

2449 
Тd
:

2450 
	`evТt_loЁexЩ
(
NULL
);

2451 
	}
}

2454 
	$hЙp_d©a_Ћngth_cЏ°њЪts_Л°
()

2456 
p№t
 = -1;

2457 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

2458 
evhЙp_їque°
 *
їq
 = 
NULL
;

2459 
lЏg_°r
[8192];

2461 
Л°_ok
 = 0;

2463 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2465 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

2466 
	`Й_as£є
(
evcЏ
);

2469 
	`evhЙp_cЏ√щiЏ_£t_lo€l_addїss
(
evcЏ
, "127.0.0.1");

2476 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_d©a_Ћngth_cЏ°њЪts_Л°_dЏe
, 
NULL
);

2477 
	`Й_as£є
(
їq
);

2479 
	`mem£t
(
lЏg_°r
, 'a', 8192);

2480 
lЏg_°r
[8191] = '\0';

2482 
	`evhЙp_£t_max_hЧdФs_size
(
hЙp
, 8191);

2483 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2484 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "LЏghЧdФ", 
lЏg_°r
);

2486 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, "/?arg=val") == -1) {

2487 
	`Й_ab№t_msg
("Couldn't makeДequest");

2489 
	`evТt_di•©ch
();

2491 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_d©a_Ћngth_cЏ°њЪts_Л°_dЏe
, 
NULL
);

2492 
	`Й_as£є
(
їq
);

2493 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2496 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_GET
, 
lЏg_°r
) == -1) {

2497 
	`Й_ab№t_msg
("Couldn't makeДequest");

2499 
	`evТt_di•©ch
();

2501 
	`evhЙp_£t_max_body_size
(
hЙp
, 8190);

2502 
їq
 = 
	`evhЙp_їque°_√w
(
hЙp_d©a_Ћngth_cЏ°њЪts_Л°_dЏe
, 
NULL
);

2503 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

2504 
	`evbufгr_add_іЪtf
(
їq
->
ouНut_bufгr
, "%s", 
lЏg_°r
);

2505 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
, 
EVHTTP_REQ_POST
, "/") == -1) {

2506 
	`Й_ab№t_msg
("Couldn't makeДequest");

2508 
	`evТt_di•©ch
();

2510 
Л°_ok
 = 1;

2511 
Тd
:

2512 iа(
evcЏ
)

2513 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

2514 iа(
hЙp
)

2515 
	`evhЙp_дУ
(
hЙp
);

2516 
	}
}

2522 
	sЛrmЪ©e_°©e
 {

2523 
evhЙp_їque°
 *
	mїq
;

2524 
bufгїvТt
 *
	mbev
;

2525 
	mfd
;

2526 
	mgўюo£cb
: 1;

2527 } 
	gЛrmЪ©e_°©e
;

2530 
	$ЛrmЪ©e_chunked_МickЋ_cb
(
evutЮ_sockС_t
 
fd
, 
evТts
, *
ђg
)

2532 
ЛrmЪ©e_°©e
 *
°©e
 = 
ђg
;

2533 
evbufгr
 *
evb
 = 
	`evbufгr_√w
();

2534 
timevЃ
 
tv
;

2536 iа(
	`evhЙp_їque°_gС_cЏ√щiЏ
(
°©e
->
їq
и=р
NULL
) {

2537 
Л°_ok
 = 1;

2538 
	`evhЙp_їque°_дУ
(
°©e
->
їq
);

2539 
	`evТt_loЁexЩ
(
NULL
);

2543 
	`evbufгr_add_іЪtf
(
evb
, "%p",Гvb);

2544 
	`evhЙp_£nd_їґy_chunk
(
°©e
->
їq
, 
evb
);

2545 
	`evbufгr_дУ
(
evb
);

2547 
tv
.
tv_£c
 = 0;

2548 
tv
.
tv_u£c
 = 3000;

2549 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
ЛrmЪ©e_chunked_МickЋ_cb
, 
ђg
, &
tv
);

2550 
	}
}

2553 
	$ЛrmЪ©e_chunked_юo£_cb
(
evhЙp_cЏ√щiЏ
 *
evcЏ
, *
ђg
)

2555 
ЛrmЪ©e_°©e
 *
°©e
 = 
ђg
;

2556 
°©e
->
gўюo£cb
 = 1;

2557 
	}
}

2560 
	$ЛrmЪ©e_chunked_cb
(
evhЙp_їque°
 *
їq
, *
ђg
)

2562 
ЛrmЪ©e_°©e
 *
°©e
 = 
ђg
;

2563 
timevЃ
 
tv
;

2566 
	`evhЙp_cЏ√щiЏ_£t_юo£cb
(

2567 
	`evhЙp_їque°_gС_cЏ√щiЏ
(
їq
),

2568 
ЛrmЪ©e_chunked_юo£_cb
, 
ђg
);

2570 
°©e
->
їq
 =Дeq;

2572 
	`evhЙp_£nd_їґy_°ђt
(
їq
, 
HTTP_OK
, "OK");

2574 
tv
.
tv_£c
 = 0;

2575 
tv
.
tv_u£c
 = 3000;

2576 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
ЛrmЪ©e_chunked_МickЋ_cb
, 
ђg
, &
tv
);

2577 
	}
}

2580 
	$ЛrmЪ©e_chunked_юЫЅ
(
fd
, 
evТt
, *
ђg
)

2582 
ЛrmЪ©e_°©e
 *
°©e
 = 
ђg
;

2583 
	`bufгїvТt_дУ
(
°©e
->
bev
);

2584 
	`EVUTIL_CLOSESOCKET
(
°©e
->
fd
);

2585 
	}
}

2588 
	$ЛrmЪ©e_їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

2591 
	`evbufгr_dњЪ
(
	`bufгїvТt_gС_Ъput
(
bev
), -1);

2592 
	}
}

2596 
	$hЙp_ЛrmЪ©e_chunked_Л°
()

2598 
bufгїvТt
 *
bev
 = 
NULL
;

2599 
timevЃ
 
tv
;

2600 cЏ° *
hЙp_їque°
;

2601 
p№t
 = -1;

2602 
fd
 = -1;

2604 
Л°_ok
 = 0;

2606 
hЙp
 = 
	`hЙp_£tup
(&
p№t
, 
NULL
);

2607 
	`evhЙp_dЦ_cb
(
hЙp
, "/test");

2608 
	`Й_as£є
(
	`evhЙp_£t_cb
(
hЙp
, "/test",

2609 
ЛrmЪ©e_chunked_cb
, &
ЛrmЪ©e_°©e
) == 0);

2611 
fd
 = 
	`hЙp_cЏ√щ
("127.0.0.1", 
p№t
);

2614 
bev
 = 
	`bufгїvТt_√w
(
fd
, 
ЛrmЪ©e_їadcb
, 
hЙp_wrЩecb
,

2615 
hЙp_Фr№cb
, 
NULL
);

2617 
ЛrmЪ©e_°©e
.
fd
 = fd;

2618 
ЛrmЪ©e_°©e
.
bev
 = bev;

2619 
ЛrmЪ©e_°©e
.
gўюo£cb
 = 0;

2622 
hЙp_їque°
 =

2626 
	`bufгїvТt_wrЩe
(
bev
, 
hЙp_їque°
, 
	`°ЊТ
(http_request));

2627 
	`evutЮ_timФюЧr
(&
tv
);

2628 
tv
.
tv_u£c
 = 10000;

2629 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
ЛrmЪ©e_chunked_юЫЅ
, &
ЛrmЪ©e_°©e
,

2630 &
tv
);

2632 
	`evТt_di•©ch
();

2634 iа(
ЛrmЪ©e_°©e
.
gўюo£cb
 == 0)

2635 
Л°_ok
 = 0;

2637 
Тd
:

2638 iа(
fd
 >= 0)

2639 
	`EVUTIL_CLOSESOCKET
(
fd
);

2640 iа(
hЙp
)

2641 
	`evhЙp_дУ
(
hЙp
);

2642 
	}
}

2644 
	#HTTP_LEGACY
(
«me
) \

2645 { #«me, 
run_Ћgacy_Л°_в
, 
TT_ISOLATED
|
TT_LEGACY
, &
Ћgacy_£tup
, \

2646 
hЙp_
##
«me
##
_Л°
 }

	)

2648 
Л°€£_t
 
	ghЙp_Л°€£s
[] = {

2649 { "іimЩives", 
hЙp_іimЩives
, 0, 
NULL
, NULL },

2650 
HTTP_LEGACY
(
ba£
),

2651 { "bad_hЧdФs", 
hЙp_bad_hЧdФ_Л°
, 0, 
NULL
, NULL },

2652 { "Јr£_quФy", 
hЙp_Јr£_quФy_Л°
, 0, 
NULL
, NULL },

2653 
HTTP_LEGACY
(
basic
),

2654 
HTTP_LEGACY
(
€nыl
),

2655 
HTTP_LEGACY
(
vЬtuЃ_ho°
),

2656 
HTTP_LEGACY
(
po°
),

2657 
HTTP_LEGACY
(
put
),

2658 
HTTP_LEGACY
(
dЦСe
),

2659 
HTTP_LEGACY
(
зЮuї
),

2660 
HTTP_LEGACY
(
cЏ√щiЏ
),

2661 
HTTP_LEGACY
(
≥rsi°_cЏ√щiЏ
),

2662 
HTTP_LEGACY
(
cЏ√щiЏ_async
),

2663 
HTTP_LEGACY
(
юo£_dСeщiЏ
),

2664 
HTTP_LEGACY
(
юo£_dСeщiЏ_dЦay
),

2665 
HTTP_LEGACY
(
bad_їque°
),

2666 
HTTP_LEGACY
(
ЪcomґСe
),

2667 
HTTP_LEGACY
(
ЪcomґСe_timeout
),

2668 { "ЛrmЪ©e_chunked", 
run_Ћgacy_Л°_в
,

2669 
TT_ISOLATED
|
TT_LEGACY
, &
Ћgacy_£tup
,

2670 
hЙp_ЛrmЪ©e_chunked_Л°
 },

2672 
HTTP_LEGACY
(
highp№t
),

2673 
HTTP_LEGACY
(
di•©chФ
),

2674 
HTTP_LEGACY
(
mu…i_lЪe_hЧdФ
),

2675 
HTTP_LEGACY
(
√g©ive_cЏЛЅ_Ћngth
),

2676 
HTTP_LEGACY
(
chunk_out
),

2677 
HTTP_LEGACY
(
°їam_out
),

2679 
HTTP_LEGACY
(
°їam_Ъ
),

2680 
HTTP_LEGACY
(
°їam_Ъ_€nыl
),

2682 
HTTP_LEGACY
(
cЏ√щiЏ_їМy
),

2683 
HTTP_LEGACY
(
d©a_Ћngth_cЏ°њЪts
),

2685 
END_OF_TESTCASES


	@test/regress_iocp.c

27 
	~<°dlib.h
>

28 
	~<°rЪg.h
>

29 
	~<evТt2/evТt.h
>

30 
	~<evТt2/thїad.h
>

31 
	~<evТt2/bufгr.h
>

32 
	~<evТt2/bufгїvТt.h
>

34 
	~<wЪsock2.h
>

35 
	~<ws2tэЭ.h
>

37 
	~"їgїss.h
"

38 
	~"tЪyЛ°.h
"

39 
	~"tЪyЛ°_maьos.h
"

41 
	#WIN32_LEAN_AND_MEAN


	)

42 
	~<wЪdows.h
>

43 
	~<wЪsock2.h
>

44 #undeа
WIN32_LEAN_AND_MEAN


46 
	~"ioэ-ЪЛЇЃ.h
"

47 
	~"evthїad-ЪЛЇЃ.h
"

50 
	~<sys/queue.h
>

51 
	~"evТt2/evТt_°ruщ.h
"

52 
	~"evТt-ЪЛЇЃ.h
"

54 
	#MAX_CALLS
 16

	)

55 
	sdummy_ovФѕµed
 {

56 
evТt_ovФѕµed
 
	meo
;

57 *
	mlock
;

58 
	m€ќ_couЅ
;

59 
uЪНМ_t
 
	mkeys
[
MAX_CALLS
];

60 
ev_ssize_t
 
	msizes
[
MAX_CALLS
];

64 
	$dummy_cb
(
evТt_ovФѕµed
 *
o
, 
uЪНМ_t
 
key
, 
ev_ssize_t
 
n
, 
ok
)

66 
dummy_ovФѕµed
 *
d_o
 =

67 
	`EVUTIL_UPCAST
(
o
, 
dummy_ovФѕµed
, 
eo
);

69 
	`EVLOCK_LOCK
(
d_o
->
lock
, 0);

70 iа(
d_o
->
€ќ_couЅ
 < 
MAX_CALLS
) {

71 
d_o
->
keys
[d_o->
€ќ_couЅ
] = 
key
;

72 
d_o
->
sizes
[d_o->
€ќ_couЅ
] = 
n
;

74 
d_o
->
€ќ_couЅ
++;

75 
	`EVLOCK_UNLOCK
(
d_o
->
lock
, 0);

76 
	}
}

79 
	$ЈЬ_is_Ъ
(
dummy_ovФѕµed
 *
o
, 
uЪНМ_t
 
key
, 
ev_ssize_t
 
n
)

81 
i
;

82 
їsu…
 = 0;

83 
	`EVLOCK_LOCK
(
o
->
lock
, 0);

84 
i
=0; i < 
o
->
€ќ_couЅ
; ++i) {

85 iа(
o
->
keys
[
i
] =р
key
 && o->
sizes
[i] =р
n
) {

86 
їsu…
 = 1;

90 
	`EVLOCK_UNLOCK
(
o
->
lock
, 0);

91  
їsu…
;

92 
	}
}

95 
	$Л°_ioэ_p№t
(*
±r
)

97 
evТt_ioэ_p№t
 *
p№t
 = 
NULL
;

98 
dummy_ovФѕµed
 
o1
, 
o2
;

100 
	`mem£t
(&
o1
, 0, (o1));

101 
	`mem£t
(&
o2
, 0, (o2));

103 
	`EVTHREAD_ALLOC_LOCK
(
o1
.
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

104 
	`EVTHREAD_ALLOC_LOCK
(
o2
.
lock
, 
EVTHREAD_LOCKTYPE_RECURSIVE
);

106 
	`Й_as£є
(
o1
.
lock
);

107 
	`Й_as£є
(
o2
.
lock
);

109 
	`evТt_ovФѕµed_ЪЩ
(&
o1
.
eo
, 
dummy_cb
);

110 
	`evТt_ovФѕµed_ЪЩ
(&
o2
.
eo
, 
dummy_cb
);

112 
p№t
 = 
	`evТt_ioэ_p№t_ѕunch
();

113 
	`Й_as£є
(
p№t
);

115 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o1
.
eo
, 10, 100));

116 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o2
.
eo
, 20, 200));

118 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o1
.
eo
, 11, 101));

119 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o2
.
eo
, 21, 201));

121 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o1
.
eo
, 12, 102));

122 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o2
.
eo
, 22, 202));

124 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o1
.
eo
, 13, 103));

125 
	`Й_as£є
(!
	`evТt_ioэ_aщiv©e_ovФѕµed
(
p№t
, &
o2
.
eo
, 23, 203));

127 #ifdeа
WIN32


129 
	`SЋХ
(1000);

132 
	`Й_w™t
(!
	`evТt_ioэ_shutdown
(
p№t
, 2000));

134 
	`Й_Ъt_Ё
(
o1
.
€ќ_couЅ
, ==, 4);

135 
	`Й_Ъt_Ё
(
o2
.
€ќ_couЅ
, ==, 4);

137 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o1
, 10, 100));

138 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o1
, 11, 101));

139 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o1
, 12, 102));

140 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o1
, 13, 103));

142 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o2
, 20, 200));

143 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o2
, 21, 201));

144 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o2
, 22, 202));

145 
	`Й_w™t
(
	`ЈЬ_is_Ъ
(&
o2
, 23, 203));

147 
Тd
:

150 
	}
}

152 
evbufгr
 *
	grbuf
 = 
NULL
, *
	gwbuf
 = NULL;

155 
	$їad_comґСe
(
evТt_ovФѕµed
 *
eo
, 
uЪНМ_t
 
key
,

156 
ev_ssize_t
 
nbyЛs
, 
ok
)

158 
	`Й_as£є
(
ok
);

159 
	`evbufгr_commЩ_їad
(
rbuf
, 
nbyЛs
);

160 
Тd
:

162 
	}
}

165 
	$wrЩe_comґСe
(
evТt_ovФѕµed
 *
eo
, 
uЪНМ_t
 
key
,

166 
ev_ssize_t
 
nbyЛs
, 
ok
)

168 
	`Й_as£є
(
ok
);

169 
	`evbufгr_commЩ_wrЩe
(
wbuf
, 
nbyЛs
);

170 
Тd
:

172 
	}
}

175 
	$Л°_ioэ_evbufгr
(*
±r
)

177 
evТt_ovФѕµed
 
rё
, 
wё
;

178 
basic_Л°_d©a
 *
d©a
 = 
±r
;

179 
evТt_ioэ_p№t
 *
p№t
 = 
NULL
;

180 
junk
[1024];

181 
i
;

183 
	`evТt_ovФѕµed_ЪЩ
(&
rё
, 
їad_comґСe
);

184 
	`evТt_ovФѕµed_ЪЩ
(&
wё
, 
wrЩe_comґСe
);

186 
i
 = 0; i < (
junk
); ++i)

187 
junk
[
i
] = ()(i);

189 
rbuf
 = 
	`evbufгr_ovФѕµed_√w
(
d©a
->
ЈЬ
[0]);

190 
wbuf
 = 
	`evbufгr_ovФѕµed_√w
(
d©a
->
ЈЬ
[1]);

191 
	`evbufгr_ТabЋ_lockЪg
(
rbuf
, 
NULL
);

192 
	`evbufгr_ТabЋ_lockЪg
(
wbuf
, 
NULL
);

194 
p№t
 = 
	`evТt_ioэ_p№t_ѕunch
();

195 
	`Й_as£є
(
p№t
);

196 
	`Й_as£є
(
rbuf
);

197 
	`Й_as£є
(
wbuf
);

199 
	`Й_as£є
(!
	`evТt_ioэ_p№t_assocЯЛ
(
p№t
, 
d©a
->
ЈЬ
[0], 100));

200 
	`Й_as£є
(!
	`evТt_ioэ_p№t_assocЯЛ
(
p№t
, 
d©a
->
ЈЬ
[1], 100));

202 
i
=0;i<10;++i)

203 
	`evbufгr_add
(
wbuf
, 
junk
, (junk));

205 
	`Й_as£є
(!
	`evbufгr_gС_Ћngth
(
rbuf
));

206 
	`Й_as£є
(!
	`evbufгr_ѕunch_wrЩe
(
wbuf
, 512, &
wё
));

207 
	`Й_as£є
(!
	`evbufгr_ѕunch_їad
(
rbuf
, 2048, &
rё
));

209 #ifdeа
WIN32


211 
	`SЋХ
(1000);

214 
	`Й_Ъt_Ё
(
	`evbufгr_gС_Ћngth
(
rbuf
),==,512);

218 
	`Й_w™t
(!
	`evТt_ioэ_shutdown
(
p№t
, 2000));

219 
Тd
:

220 
	`evbufгr_дУ
(
rbuf
);

221 
	`evbufгr_дУ
(
wbuf
);

222 
	}
}

225 
	$Л°_ioэ_bufгїvТt_async
(*
±r
)

227 
basic_Л°_d©a
 *
d©a
 = 
±r
;

228 
evТt_ioэ_p№t
 *
p№t
 = 
NULL
;

229 
bufгїvТt
 *
bЧ1
=
NULL
, *
bЧ2
=NULL;

230 
buf
[128];

231 
size_t
 
n
;

232 
timevЃ
 
Џe_£c
 = {1,0};

234 
	`evТt_ba£_°ђt_ioэ
(
d©a
->
ba£
);

235 
p№t
 = 
	`evТt_ba£_gС_ioэ
(
d©a
->
ba£
);

236 
	`Й_as£є
(
p№t
);

238 
bЧ1
 = 
	`bufгїvТt_async_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[0],

239 
BEV_OPT_DEFER_CALLBACKS
);

240 
bЧ2
 = 
	`bufгїvТt_async_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[1],

241 
BEV_OPT_DEFER_CALLBACKS
);

242 
	`Й_as£є
(
bЧ1
);

243 
	`Й_as£є
(
bЧ2
);

246 
	`bufгїvТt_ТabЋ
(
bЧ1
, 
EV_WRITE
);

247 
	`bufгїvТt_ТabЋ
(
bЧ2
, 
EV_READ
);

249 
	`bufгїvТt_wrЩe
(
bЧ1
, "HЦlЎw№ld", 
	`°ЊТ
("Hello world")+1);

251 
	`evТt_ba£_loЁexЩ
(
d©a
->
ba£
, &
Џe_£c
);

252 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

254 
n
 = 
	`bufгїvТt_їad
(
bЧ2
, 
buf
, (buf)-1);

255 
buf
[
n
]='\0';

256 
	`Й_°r_Ё
(
buf
, ==, "Hello world");

258 
	`Й_w™t
(!
	`evТt_ioэ_shutdown
(
p№t
, 2000));

259 
Тd
:

261 
	}
}

264 
Л°€£_t
 
	gioэ_Л°€£s
[] = {

265 { "p№t", 
Л°_ioэ_p№t
, 
TT_FORK
|
TT_NEED_THREADS
, 
NULL
, NULL },

266 { "evbufгr", 
Л°_ioэ_evbufгr
,

267 
TT_FORK
|
TT_NEED_SOCKETPAIR
|
TT_NEED_THREADS
,

268 &
basic_£tup
, 
NULL
 },

269 { "bufгїvТt_async", 
Л°_ioэ_bufгїvТt_async
,

270 
TT_FORK
|
TT_NEED_SOCKETPAIR
|
TT_NEED_THREADS
|
TT_NEED_BASE
,

271 &
basic_£tup
, 
NULL
 },

272 
END_OF_TESTCASES


	@test/regress_listener.c

27 #ifdeа
WIN32


28 
	~<wЪsock2.h
>

29 
	~<wЪdows.h
>

32 
	~<sys/ty≥s.h
>

34 #iвdeа
WIN32


35 
	~<sys/sockС.h
>

36 
	~<√tЪС/Ъ.h
>

37 
	~<uni°d.h
>

40 
	~<°rЪg.h
>

42 
	~<evТt2/li°ТФ.h
>

43 
	~<evТt2/evТt.h
>

44 
	~<evТt2/utЮ.h
>

46 
	~"їgїss.h
"

47 
	~"tЪyЛ°.h
"

48 
	~"tЪyЛ°_maьos.h
"

49 
	~"utЮ-ЪЛЇЃ.h
"

52 
	$acы±cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
fd
,

53 
sockaddr
 *
addr
, 
sockЋn
, *
ђg
)

55 *
±r
 = 
ђg
;

56 --*
±r
;

57 
	`TT_BLATHER
(("Gў o√ f№ %p", 
±r
));

58 
	`EVUTIL_CLOSESOCKET
(
fd
);

60 iа(! *
±r
)

61 
	`evcЏ∆i°ТФ_diІbЋ
(
li°ТФ
);

62 
	}
}

65 
	$їgїss_pick_a_p№t
(*
ђg
)

67 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

68 
evТt_ba£
 *
ba£
 = 
d©a
->base;

69 
evcЏ∆i°ТФ
 *
li°ТФ1
 = 
NULL
, *
li°ТФ2
 = NULL;

70 
sockaddr_Ъ
 
sЪ
;

71 
couЅ1
 = 2, 
couЅ2
 = 1;

72 
sockaddr_°№age
 
ss1
, 
ss2
;

73 
sockaddr_Ъ
 *
sЪ1
, *
sЪ2
;

74 
ev_sockЋn_t
 
¶Т1
 = (
ss1
), 
¶Т2
 = (
ss2
);

75 
жags
 =

76 
LEV_OPT_CLOSE_ON_FREE
|
LEV_OPT_REUSEABLE
|
LEV_OPT_CLOSE_ON_EXEC
;

78 
evutЮ_sockС_t
 
fd1
 = -1, 
fd2
 = -1, 
fd3
 = -1;

80 
	`mem£t
(&
sЪ
, 0, (sin));

81 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

82 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

83 
sЪ
.
sЪ_p№t
 = 0;

85 
li°ТФ1
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
acы±cb
, &
couЅ1
,

86 
жags
, -1, (
sockaddr
 *)&
sЪ
, (sin));

87 
	`Й_as£є
(
li°ТФ1
);

88 
li°ТФ2
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
acы±cb
, &
couЅ2
,

89 
жags
, -1, (
sockaddr
 *)&
sЪ
, (sin));

90 
	`Й_as£є
(
li°ТФ2
);

92 
	`Й_Ъt_Ё
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ1
), >=, 0);

93 
	`Й_Ъt_Ё
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ2
), >=, 0);

94 
	`Й_as£є
(
	`gСsock«me
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ1
),

95 (
sockaddr
*)&
ss1
, &
¶Т1
) == 0);

96 
	`Й_as£є
(
	`gСsock«me
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ2
),

97 (
sockaddr
*)&
ss2
, &
¶Т2
) == 0);

98 
	`Й_Ъt_Ё
(
ss1
.
ss_зmЮy
, ==, 
AF_INET
);

99 
	`Й_Ъt_Ё
(
ss2
.
ss_зmЮy
, ==, 
AF_INET
);

101 
sЪ1
 = (
sockaddr_Ъ
*)&
ss1
;

102 
sЪ2
 = (
sockaddr_Ъ
*)&
ss2
;

103 
	`Й_Ъt_Ё
(
	`Ѕohl
(
sЪ1
->
sЪ_addr
.
s_addr
), ==, 0x7f000001);

104 
	`Й_Ъt_Ё
(
	`Ѕohl
(
sЪ2
->
sЪ_addr
.
s_addr
), ==, 0x7f000001);

105 
	`Й_Ъt_Ё
(
sЪ1
->
sЪ_p№t
, !=, 
sЪ2
->sin_port);

107 
	`Й_±r_Ё
(
	`evcЏ∆i°ТФ_gС_ba£
(
li°ТФ1
), ==, 
ba£
);

108 
	`Й_±r_Ё
(
	`evcЏ∆i°ТФ_gС_ba£
(
li°ТФ2
), ==, 
ba£
);

110 
fd1
 = 
fd2
 = 
fd3
 = -1;

111 
	`evutЮ_sockС_cЏ√щ
(&
fd1
, (
sockaddr
*)&
ss1
, 
¶Т1
);

112 
	`evutЮ_sockС_cЏ√щ
(&
fd2
, (
sockaddr
*)&
ss1
, 
¶Т1
);

113 
	`evutЮ_sockС_cЏ√щ
(&
fd3
, (
sockaddr
*)&
ss2
, 
¶Т2
);

115 #ifdeа
WIN32


116 
	`SЋХ
(100);

118 
	`evТt_ba£_di•©ch
(
ba£
);

120 
	`Й_Ъt_Ё
(
couЅ1
, ==, 0);

121 
	`Й_Ъt_Ё
(
couЅ2
, ==, 0);

123 
Тd
:

124 iа(
fd1
>=0)

125 
	`EVUTIL_CLOSESOCKET
(
fd1
);

126 iа(
fd2
>=0)

127 
	`EVUTIL_CLOSESOCKET
(
fd2
);

128 iа(
fd3
>=0)

129 
	`EVUTIL_CLOSESOCKET
(
fd3
);

130 
	}
}

133 
Л°€£_t
 
	gli°ТФ_Л°€£s
[] = {

135 { "њndp№t", 
їgїss_pick_a_p№t
, 
TT_FORK
|
TT_NEED_BASE
,

136 &
basic_£tup
, 
NULL
},

138 
END_OF_TESTCASES
,

141 
Л°€£_t
 
	gli°ТФ_ioэ_Л°€£s
[] = {

142 { "њndp№t", 
їgїss_pick_a_p№t
,

143 
TT_FORK
|
TT_NEED_BASE
|
TT_ENABLE_IOCP
,

144 &
basic_£tup
, 
NULL
},

146 
END_OF_TESTCASES
,

	@test/regress_main.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 #ifdeа
_EVENT___func__


36 
	#__func__
 
_EVENT___func__


	)

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 #ifdeа
_EVENT_HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 
	~<sys/queue.h
>

46 
	~<fъО.h
>

47 
	~<sig«l.h
>

48 
	~<ФЇo.h
>

51 
	~<sys/ty≥s.h
>

53 #iвdeа
WIN32


54 
	~<sys/sockС.h
>

55 
	~<sys/waЩ.h
>

56 
	~<sig«l.h
>

57 
	~<uni°d.h
>

58 
	~<√tdb.h
>

61 
	~<°dlib.h
>

62 
	~<°dio.h
>

63 
	~<°rЪg.h
>

64 
	~<as£є.h
>

66 
	~<evТt2/utЮ.h
>

67 
	~<evТt2/evТt.h
>

68 
	~<evТt2/evТt_comЈt.h
>

69 
	~<evТt2/dns.h
>

70 
	~<evТt2/dns_comЈt.h
>

71 
	~<evТt2/thїad.h
>

73 
	~"evТt-cЏfig.h
"

74 
	~"їgїss.h
"

75 
	~"tЪyЛ°.h
"

76 
	~"tЪyЛ°_maьos.h
"

77 
	~"../ioэ-ЪЛЇЃ.h
"

80 
	$timevЃ_m£c_diff
(cЏ° 
timevЃ
 *
°ђt
, cЏ° timevЃ *
Тd
)

82 
ms
 = 
Тd
->
tv_£c
 - 
°ђt
->tv_sec;

83 
ms
 *= 1000;

84 
ms
 +р((
Тd
->
tv_u£c
 - 
°ђt
->tv_usec)+500) / 1000;

85  
ms
;

87 
	}
}

101 
	gЪ_Ћgacy_Л°_wњµФ
 = 0;

103 
	$dn¶ogcb
(
w
, cЏ° *
m
)

105 
	`TT_BLATHER
(("%s", 
m
));

106 
	}
}

109 
evutЮ_sockС_t


110 
	$їgїss_make_tmpfЮe
(cЏ° *
d©a
, 
size_t
 
d©ЃТ
)

112 #iвdeа
WIN32


113 
tmpfЮТame
[32];

114 
fd
;

115 
	`°rэy
(
tmpfЮТame
, "/tmp/eventtmp.XXXXXX");

116 
fd
 = 
	`mk°emp
(
tmpfЮТame
);

117 iа(
fd
 == -1)

119 iа(
	`wrЩe
(
fd
, 
d©a
, 
d©ЃТ
) != datalen) {

120 
	`юo£
(
fd
);

123 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

125 
	`u∆Ъk
(
tmpfЮТame
);

126  (
fd
);

131 
	}
}

134 
	$ign№e_log_cb
(
s
, cЏ° *
msg
)

136 
	}
}

139 
	$basic_Л°_£tup
(cЏ° 
Л°€£_t
 *
Л°€£
)

141 
evТt_ba£
 *
ba£
 = 
NULL
;

142 
•aЬ
[2] = { -1, -1 };

143 
basic_Л°_d©a
 *
d©a
 = 
NULL
;

145 #iвdeа
WIN32


146 iа(
Л°€£
->
жags
 & 
TT_ENABLE_IOCP_FLAG
)

147  (*)
TT_SKIP
;

150 iа(
Л°€£
->
жags
 & 
TT_NEED_THREADS
) {

151 iа(!(
Л°€£
->
жags
 & 
TT_FORK
))

152  
NULL
;

153 #iа
	`defЪed
(
EVTHREAD_USE_PTHREADS_IMPLEMENTED
)

154 iа(
	`evthїad_u£_±hїads
())

155 
	`exЩ
(1);

156 #Цiа
	`defЪed
(
EVTHREAD_USE_WINDOWS_THREADS_IMPLEMENTED
)

157 iа(
	`evthїad_u£_wЪdows_thїads
())

158 
	`exЩ
(1);

160  (*)
TT_SKIP
;

164 iа(
Л°€£
->
жags
 & 
TT_NEED_SOCKETPAIR
) {

165 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
•aЬ
) == -1) {

166 
	`еrЪtf
(
°dФr
, "%s: sockСЈЬ\n", 
__func__
);

167 
	`exЩ
(1);

170 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
•aЬ
[0]) == -1) {

171 
	`еrЪtf
(
°dФr
, "fcntl(O_NONBLOCK)");

172 
	`exЩ
(1);

175 iа(
	`evutЮ_make_sockС_nЏblockЪg
(
•aЬ
[1]) == -1) {

176 
	`еrЪtf
(
°dФr
, "fcntl(O_NONBLOCK)");

177 
	`exЩ
(1);

180 iа(
Л°€£
->
жags
 & 
TT_NEED_BASE
) {

181 iа(
Л°€£
->
жags
 & 
TT_LEGACY
)

182 
ba£
 = 
	`evТt_ЪЩ
();

184 
ba£
 = 
	`evТt_ba£_√w
();

185 iа(!
ba£
)

186 
	`exЩ
(1);

188 iа(
Л°€£
->
жags
 & 
TT_ENABLE_IOCP_FLAG
) {

189 iа(
	`evТt_ba£_°ђt_ioэ
(
ba£
)<0) {

190 
	`evТt_ba£_дУ
(
ba£
);

191  (*)
TT_SKIP
;

195 iа(
Л°€£
->
жags
 & 
TT_NEED_DNS
) {

196 
	`evdns_£t_log_в
(
dn¶ogcb
);

197 iа(
	`evdns_ЪЩ
())

198  
NULL
;

201 iа(
Л°€£
->
жags
 & 
TT_NO_LOGS
)

202 
	`evТt_£t_log_€ќback
(
ign№e_log_cb
);

204 
d©a
 = 
	`€ќoc
(1, (*data));

205 iа(!
d©a
)

206 
	`exЩ
(1);

207 
d©a
->
ba£
 = base;

208 
d©a
->
ЈЬ
[0] = 
•aЬ
[0];

209 
d©a
->
ЈЬ
[1] = 
•aЬ
[1];

210 
d©a
->
£tup_d©a
 = 
Л°€£
->setup_data;

211  
d©a
;

212 
	}
}

215 
	$basic_Л°_юЧnup
(cЏ° 
Л°€£_t
 *
Л°€£
, *
±r
)

217 
basic_Л°_d©a
 *
d©a
 = 
±r
;

219 iа(
Л°€£
->
жags
 & 
TT_NO_LOGS
)

220 
	`evТt_£t_log_€ќback
(
NULL
);

222 iа(
Л°€£
->
жags
 & 
TT_NEED_SOCKETPAIR
) {

223 iа(
d©a
->
ЈЬ
[0] != -1)

224 
	`EVUTIL_CLOSESOCKET
(
d©a
->
ЈЬ
[0]);

225 iа(
d©a
->
ЈЬ
[1] != -1)

226 
	`EVUTIL_CLOSESOCKET
(
d©a
->
ЈЬ
[1]);

229 iа(
Л°€£
->
жags
 & 
TT_NEED_DNS
) {

230 
	`evdns_shutdown
(0);

233 iа(
Л°€£
->
жags
 & 
TT_NEED_BASE
) {

234 iа(
d©a
->
ba£
)

235 
	`evТt_ba£_дУ
(
d©a
->
ba£
);

238 
	`дУ
(
d©a
);

241 
	}
}

243 cЏ° 
Л°€£_£tup_t
 
	gbasic_£tup
 = {

244 
basic_Л°_£tup
, 
basic_Л°_юЧnup


253 
	$Ћgacy_Л°_£tup
(cЏ° 
Л°€£_t
 *
Л°€£
)

255 
basic_Л°_d©a
 *
d©a
 = 
	`basic_Л°_£tup
(
Л°€£
);

256 iа(
d©a
 =р(*)
TT_SKIP
)

257  
d©a
;

258 
globЃ_ba£
 = 
d©a
->
ba£
;

259 
ЈЬ
[0] = 
d©a
->pair[0];

260 
ЈЬ
[1] = 
d©a
->pair[1];

261 
d©a
->
Ћgacy_Л°_в
 = 
Л°€£
->
£tup_d©a
;

262  
d©a
;

263 
	}
}

270 
	$run_Ћgacy_Л°_в
(*
±r
)

272 
basic_Л°_d©a
 *
d©a
 = 
±r
;

273 
Л°_ok
 = 
€ќed
 = 0;

275 
Ъ_Ћgacy_Л°_wњµФ
 = 1;

276 
d©a
->
	`Ћgacy_Л°_в
();

277 
Ъ_Ћgacy_Л°_wњµФ
 = 0;

279 iа(!
Л°_ok
)

280 
	`Й_ab№t_msg
("Legacy unitБest failed");

282 
Тd
:

283 
Л°_ok
 = 0;

284 
	}
}

291 
	$Ћgacy_Л°_юЧnup
(cЏ° 
Л°€£_t
 *
Л°€£
, *
±r
)

293 
r
 = 
	`basic_Л°_юЧnup
(
Л°€£
, 
±r
);

294 
ЈЬ
[0] =Еair[1] = -1;

295 
globЃ_ba£
 = 
NULL
;

296  
r
;

297 
	}
}

299 cЏ° 
Л°€£_£tup_t
 
	gЋgacy_£tup
 = {

300 
Ћgacy_Л°_£tup
, 
Ћgacy_Л°_юЧnup


306 
Л°€£_t
 
	gthїad_Л°€£s
[] = {

307 #iа
defЪed
(
_EVENT_HAVE_PTHREADS
и&& !defЪed(
_EVENT_DISABLE_THREAD_SUPPORT
)

308 { "±hїads", 
їgїss_thїads
, 
TT_FORK
, 
NULL
, NULL, },

310 { "±hїads", 
NULL
, 
TT_SKIP
, NULL, NULL },

312 
END_OF_TESTCASES


315 
Л°group_t
 
	gЛ°groups
[] = {

316 { "maЪ/", 
maЪ_Л°€£s
 },

317 { "hЧp/", 
mЪhЧp_Л°€£s
 },

318 { "С/", 
edgСriggФed_Л°€£s
 },

319 { "evbufгr/", 
evbufгr_Л°€£s
 },

320 { "sig«l/", 
sig«l_Л°€£s
 },

321 { "utЮ/", 
utЮ_Л°€£s
 },

322 { "bufгїvТt/", 
bufгїvТt_Л°€£s
 },

323 { "hЙp/", 
hЙp_Л°€£s
 },

324 { "dns/", 
dns_Л°€£s
 },

325 { "evПg/", 
evПg_Л°€£s
 },

326 { "љc/", 
љc_Л°€£s
 },

327 { "thїad/", 
thїad_Л°€£s
 },

328 { "li°ТФ/", 
li°ТФ_Л°€£s
 },

329 #ifdeа
WIN32


330 { "ioэ/", 
ioэ_Л°€£s
 },

331 { "ioэ/bufгїvТt/", 
bufгїvТt_ioэ_Л°€£s
 },

332 { "ioэ/li°ТФ/", 
li°ТФ_ioэ_Л°€£s
 },

334 #ifdeа
_EVENT_HAVE_OPENSSL


335 { "s¶/", 
s¶_Л°€£s
 },

337 
END_OF_GROUPS


341 
	$maЪ
(
ђgc
, cЏ° **
ђgv
)

343 #ifdeа
WIN32


344 
WORD
 
wVФsiЏReque°ed
;

345 
WSADATA
 
wІD©a
;

346 
Фr
;

348 
wVФsiЏReque°ed
 = 
	`MAKEWORD
(2, 2);

350 
Фr
 = 
	`WSASПєup
(
wVФsiЏReque°ed
, &
wІD©a
);

353 #iвdeа
WIN32


354 iа(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
и=р
SIG_ERR
)

358 #ifdeа
WIN32


359 
	`tЪyЛ°_skЭ
(
Л°groups
, "http/connection_retry");

362 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


363 iа(!
	`gСТv
("EVENT_NO_DEBUG_LOCKS"))

364 
	`evthїad_ТabЋ_lock_debugЪg
();

367 iа(
	`tЪyЛ°_maЪ
(
ђgc
,
ђgv
,
Л°groups
))

371 
	}
}

	@test/regress_minheap.c

27 
	~<°dlib.h
>

28 
	~<evТt2/evТt_°ruщ.h
>

30 
	~"tЪyЛ°.h
"

31 
	~"tЪyЛ°_maьos.h
"

32 
	~"../mЪhЧp-ЪЛЇЃ.h
"

35 
	$£t_њndom_timeout
(
evТt
 *
ev
)

37 
ev
->
ev_timeout
.
tv_£c
 = 
	`њnd
();

38 
ev
->
ev_timeout
.
tv_u£c
 = 
	`њnd
() & 0xfffff;

39 
ev
->
ev_timeout_pos
.
mЪ_hЧp_idx
 = -1;

40 
	}
}

43 
	$check_hЧp
(
mЪ_hЧp
 *
hЧp
)

45 
i
;

46 
i
 = 1; i < 
hЧp
->
n
; ++i) {

47 
ЈїЅ_idx
 = (
i
-1)/2;

48 
	`Й_w™t
(
	`evutЮ_timФcmp
(&
hЧp
->
p
[
i
]->
ev_timeout
,

49 &
hЧp
->
p
[
ЈїЅ_idx
]->
ev_timeout
, >=));

51 
	}
}

54 
	$Л°_hЧp_њndomized
(*
±r
)

56 
mЪ_hЧp
 
hЧp
;

57 
evТt
 *
Ъ£єed
[1024];

58 
evТt
 *
e
, *
ѕ°_e
;

59 
i
;

61 
	`mЪ_hЧp_щ№
(&
hЧp
);

63 
i
 = 0; i < 1024; ++i) {

64 
Ъ£єed
[
i
] = 
	`mЃloc
((
evТt
));

65 
	`£t_њndom_timeout
(
Ъ£єed
[
i
]);

66 
	`mЪ_hЧp_push
(&
hЧp
, 
Ъ£єed
[
i
]);

68 
	`check_hЧp
(&
hЧp
);

70 
	`Й_as£є
(
	`mЪ_hЧp_size
(&
hЧp
) == 1024);

72 
i
 = 0; i < 512; ++i) {

73 
	`mЪ_hЧp_Фa£
(&
hЧp
, 
Ъ£єed
[
i
]);

74 iа(0 =р(
i
 % 32))

75 
	`check_hЧp
(&
hЧp
);

77 
	`Й_as£є
(
	`mЪ_hЧp_size
(&
hЧp
) == 512);

79 
ѕ°_e
 = 
	`mЪ_hЧp_pЁ
(&
hЧp
);

81 
e
 = 
	`mЪ_hЧp_pЁ
(&
hЧp
);

82 iа(!
e
)

84 
	`Й_w™t
(
	`evutЮ_timФcmp
(&
ѕ°_e
->
ev_timeout
,

85 &
e
->
ev_timeout
, <=));

87 
	`Й_as£є
(
	`mЪ_hЧp_size
(&
hЧp
) == 0);

88 
Тd
:

89 
i
 = 0; i < 1024; ++i)

90 
	`дУ
(
Ъ£єed
[
i
]);

92 
	`mЪ_hЧp_dt№
(&
hЧp
);

93 
	}
}

95 
Л°€£_t
 
	gmЪhЧp_Л°€£s
[] = {

96 { "њndomized", 
Л°_hЧp_њndomized
, 0, 
NULL
, NULL },

97 
END_OF_TESTCASES


	@test/regress_pthread.c

27 
	~"evТt-cЏfig.h
"

29 
	~<sys/ty≥s.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

33 
	~<±hїad.h
>

34 
	~<as£є.h
>

36 
	~"evТt2/utЮ.h
"

37 
	~"evТt2/evТt.h
"

38 
	~"evТt2/evТt_°ruщ.h
"

39 
	~"evТt2/thїad.h
"

40 
	~"їgїss.h
"

41 
	~"tЪyЛ°_maьos.h
"

43 
	scЏd_waЩ
 {

44 
±hїad_muЛx_t
 
	mlock
;

45 
±hїad_cЏd_t
 
	mcЏd
;

49 
	$basic_timeout
(
fd
, 
wh©
, *
ђg
)

51 
cЏd_waЩ
 *
cw
 = 
ђg
;

52 
	`as£є
(
	`±hїad_muЛx_lock
(&
cw
->
lock
) == 0);

53 
	`as£є
(
	`±hїad_cЏd_brяd€°
(&
cw
->
cЏd
) == 0);

54 
	`as£є
(
	`±hїad_muЛx_u∆ock
(&
cw
->
lock
) == 0);

55 
	}
}

57 
	#NUM_THREADS
 100

	)

58 
±hїad_muЛx_t
 
	gcouЅ_lock
;

59 
	gcouЅ
;

62 
	$basic_thїad
(*
ђg
)

64 
cЏd_waЩ
 
cw
;

65 
evТt_ba£
 *
ba£
 = 
ђg
;

66 
evТt
 
ev
;

67 
i
 = 0;

69 
	`as£є
(
	`±hїad_muЛx_ЪЩ
(&
cw
.
lock
, 
NULL
) == 0);

70 
	`as£є
(
	`±hїad_cЏd_ЪЩ
(&
cw
.
cЏd
, 
NULL
) == 0);

72 
	`evtimФ_assign
(&
ev
, 
ba£
, 
basic_timeout
, &
cw
);

73 
i
 = 0; i < 100; i++) {

74 
timevЃ
 
tv
;

75 
	`evutЮ_timФюЧr
(&
tv
);

77 
	`as£є
(
	`±hїad_muЛx_lock
(&
cw
.
lock
) == 0);

80 
	`as£є
(
	`evtimФ_add
(&
ev
, &
tv
) == 0);

81 
	`as£є
(
	`±hїad_cЏd_waЩ
(&
cw
.
cЏd
, &cw.
lock
) == 0);

82 
	`as£є
(
	`±hїad_muЛx_u∆ock
(&
cw
.
lock
) == 0);

84 
	`as£є
(
	`±hїad_muЛx_lock
(&
couЅ_lock
) == 0);

85 ++
couЅ
;

86 
	`as£є
(
	`±hїad_muЛx_u∆ock
(&
couЅ_lock
) == 0);

90 
	`as£є
(
	`±hїad_muЛx_lock
(&
couЅ_lock
) == 0);

91 iа(
couЅ
 >р
NUM_THREADS
 * 100)

92 
	`evТt_ba£_loЁexЩ
(
ba£
, 
NULL
);

93 
	`as£є
(
	`±hїad_muЛx_u∆ock
(&
couЅ_lock
) == 0);

95 
	`as£є
(
	`±hїad_cЏd_de°roy
(&
cw
.
cЏd
) == 0);

96 
	`as£є
(
	`±hїad_muЛx_de°roy
(&
cw
.
lock
) == 0);

98  (
NULL
);

99 
	}
}

102 
	$±hїad_basic
(
evТt_ba£
 *
ba£
)

104 
±hїad_t
 
thїads
[
NUM_THREADS
];

105 
evТt
 
ev
;

106 
timevЃ
 
tv
;

107 
i
;

109 
i
 = 0; i < 
NUM_THREADS
; ++i)

110 
	`±hїad_ьЧЛ
(&
thїads
[
i
], 
NULL
, 
basic_thїad
, 
ba£
);

112 
	`evtimФ_assign
(&
ev
, 
ba£
, 
NULL
, NULL);

113 
	`evutЮ_timФюЧr
(&
tv
);

114 
tv
.
tv_£c
 = 1000;

115 
	`evТt_add
(&
ev
, &
tv
);

117 
	`evТt_ba£_di•©ch
(
ba£
);

119 
i
 = 0; i < 
NUM_THREADS
; ++i)

120 
	`±hїad_joЪ
(
thїads
[
i
], 
NULL
);

122 
	`evТt_dЦ
(&
ev
);

123 
	}
}

126 
	$їgїss_thїads
(*
ђg
)

128 
evТt_ba£
 *
ba£
;

129 (и
ђg
;

131 
	`±hїad_muЛx_ЪЩ
(&
couЅ_lock
, 
NULL
);

133 iа(
	`evthїad_u£_±hїads
()<0)

134 
	`Й_ab№t_msg
("Couldn't initializeЕthreads!");

136 
ba£
 = 
	`evТt_ba£_√w
();

137 iа(
	`evthїad_make_ba£_nўifЯbЋ
(
ba£
)<0) {

138 
	`Й_ab№t_msg
("Couldn't make baseВotifiable!");

141 
	`±hїad_basic
(
ba£
);

143 
	`±hїad_muЛx_de°roy
(&
couЅ_lock
);

145 
	`evТt_ba£_дУ
(
ba£
);

146 
Тd
:

148 
	}
}

	@test/regress_rpc.c

28 #ifdeа
WIN32


29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sig«l.h
>

44 
	~<uni°d.h
>

45 
	~<√tdb.h
>

47 
	~<fъО.h
>

48 
	~<°dlib.h
>

49 
	~<°dio.h
>

50 
	~<°rЪg.h
>

51 
	~<ФЇo.h
>

52 
	~<as£є.h
>

54 
	~"evТt2/evТt.h
"

55 
	~"evhЙp.h
"

56 
	~"log-ЪЛЇЃ.h
"

57 
	~"evТt2/љc.h
"

58 
	~"evТt2/љc_°ruщ.h
"

60 
	~"їgїss.gТ.h
"

62 
	~"їgїss.h
"

64 
evhЙp
 *

65 
	$hЙp_£tup
(*
µ№t
)

67 
i
;

68 
evhЙp
 *
myhЙp
;

69 
p№t
 = -1;

72 
i
 = 0; i < 50; ++i) {

73 
myhЙp
 = 
	`evhЙp_°ђt
("127.0.0.1", 8080 + 
i
);

74 iа(
myhЙp
 !р
NULL
) {

75 
p№t
 = 8080 + 
i
;

80 iа(
p№t
 == -1)

81 
	`evТt_Фrx
(1, "CouldВot start web server");

83 *
µ№t
 = 
p№t
;

84  (
myhЙp
);

85 
	}
}

87 
	$EVRPC_HEADER
(
MesІge
, 
msg
, 
kЮl
)

88 
	$EVRPC_HEADER
(
NevФRХly
, 
msg
, 
kЮl
)

90 
	$EVRPC_GENERATE
(
MesІge
, 
msg
, 
kЮl
)

91 
	$EVRPC_GENERATE
(
NevФRХly
, 
msg
, 
kЮl
)

93 
√ed_Ъput_hook
 = 0;

94 
√ed_ouНut_hook
 = 0;

97 
	`MesІgeCb
(
	`EVRPC_STRUCT
(
MesІge
)* 
љc
, *
ђg
)

99 
kЮl
* 
kЮl_їґy
 = 
љc
->
їґy
;

101 iа(
√ed_Ъput_hook
) {

102 
evhЙp_їque°
* 
їq
 = 
	`EVRPC_REQUEST_HTTP
(
љc
);

103 cЏ° *
hЧdФ
 = 
	`evhЙp_fЪd_hЧdФ
(

104 
їq
->
Ъput_hЧdФs
, "X-Hook");

105 
	`as£є
(
	`°rcmp
(
hЧdФ
, "input") == 0);

109 
	`EVTAG_ASSIGN
(
kЮl_їґy
, 
wЧpЏ
, "dagger");

110 
	`EVTAG_ASSIGN
(
kЮl_їґy
, 
aщiЏ
, "waveЗroundЖikeЗn idiot");

113 
	`EVRPC_REQUEST_DONE
(
љc
);

114 
	}
}

116 
EVRPC_STRUCT
(
NevФRХly
и*
	gІved_љc
;

119 
NevФRХlyCb
(
EVRPC_STRUCT
(
NevФRХly
)* 
љc
, *
ђg
)

121 
	gЛ°_ok
 += 1;

122 
	gІved_љc
 = 
љc
;

126 
	$љc_£tup
(
evhЙp
 **
phЙp
, *
µ№t
, 
evљc_ba£
 **
pba£
)

128 
p№t
;

129 
evhЙp
 *
hЙp
 = 
NULL
;

130 
evљc_ba£
 *
ba£
 = 
NULL
;

132 
hЙp
 = 
	`hЙp_£tup
(&
p№t
);

133 
ba£
 = 
	`evљc_ЪЩ
(
hЙp
);

135 
	`EVRPC_REGISTER
(
ba£
, 
MesІge
, 
msg
, 
kЮl
, 
MesІgeCb
, 
NULL
);

136 
	`EVRPC_REGISTER
(
ba£
, 
NevФRХly
, 
msg
, 
kЮl
, 
NevФRХlyCb
, 
NULL
);

138 *
phЙp
 = 
hЙp
;

139 *
µ№t
 = 
p№t
;

140 *
pba£
 = 
ba£
;

142 
√ed_Ъput_hook
 = 0;

143 
√ed_ouНut_hook
 = 0;

144 
	}
}

147 
	$љc_Лђdown
(
evљc_ba£
 *
ba£
)

149 
	`as£є
(
	`EVRPC_UNREGISTER
(
ba£
, 
MesІge
) == 0);

150 
	`as£є
(
	`EVRPC_UNREGISTER
(
ba£
, 
NevФRХly
) == 0);

152 
	`evљc_дУ
(
ba£
);

153 
	}
}

156 
	$љc_po°їque°_зЮuї
(
evhЙp_їque°
 *
їq
, *
ђg
)

158 iа(
їq
->
ї•Џ£_code
 !р
HTTP_SERVUNAVAIL
) {

160 
	`еrЪtf
(
°dФr
, "FAILED (response code)\n");

161 
	`exЩ
(1);

164 
Л°_ok
 = 1;

165 
	`evТt_loЁexЩ
(
NULL
);

166 
	}
}

173 
	$љc_basic_Л°
()

175 
p№t
;

176 
evhЙp
 *
hЙp
 = 
NULL
;

177 
evљc_ba£
 *
ba£
 = 
NULL
;

178 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

179 
evhЙp_їque°
 *
їq
 = 
NULL
;

181 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

183 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

184 
	`Й_as£є
(
evcЏ
);

191 
їq
 = 
	`evhЙp_їque°_√w
(
љc_po°їque°_зЮuї
, 
NULL
);

192 
	`Й_as£є
(
їq
);

195 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

196 
	`evbufгr_add_іЪtf
(
їq
->
ouНut_bufгr
, "Some Nonsense");

198 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
,

199 
EVHTTP_REQ_POST
,

201 
	`Й_ab№t
();

204 
Л°_ok
 = 0;

206 
	`evТt_di•©ch
();

208 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

210 
	`љc_Лђdown
(
ba£
);

212 
	`Й_as£є
(
Л°_ok
 == 1);

214 
Тd
:

215 
	`evhЙp_дУ
(
hЙp
);

216 
	}
}

219 
	$љc_po°їque°_dЏe
(
evhЙp_їque°
 *
їq
, *
ђg
)

221 
kЮl
* 
kЮl_їґy
 = 
NULL
;

223 iа(
їq
->
ї•Џ£_code
 !р
HTTP_OK
) {

224 
	`еrЪtf
(
°dФr
, "FAILED (response code)\n");

225 
	`exЩ
(1);

228 
kЮl_їґy
 = 
	`kЮl_√w
();

230 iа((
	`kЮl_unmђshЃ
(
kЮl_їґy
, 
їq
->
Ъput_bufгr
)) == -1) {

231 
	`еrЪtf
(
°dФr
, "FAILED (unmarshal)\n");

232 
	`exЩ
(1);

235 
	`kЮl_дУ
(
kЮl_їґy
);

237 
Л°_ok
 = 1;

238 
	`evТt_loЁexЩ
(
NULL
);

239 
	}
}

242 
	$љc_basic_mesІge
()

244 
p№t
;

245 
evhЙp
 *
hЙp
 = 
NULL
;

246 
evљc_ba£
 *
ba£
 = 
NULL
;

247 
evhЙp_cЏ√щiЏ
 *
evcЏ
 = 
NULL
;

248 
evhЙp_їque°
 *
їq
 = 
NULL
;

249 
msg
 *msg;

251 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

253 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

254 
	`Й_as£є
(
evcЏ
);

261 
їq
 = 
	`evhЙp_їque°_√w
(
љc_po°їque°_dЏe
, 
NULL
);

262 iа(
їq
 =р
NULL
) {

263 
	`еrЪtf
(
°dout
, "FAILED\n");

264 
	`exЩ
(1);

268 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "Host", "somehost");

271 
msg
 = 
	`msg_√w
();

272 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

273 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

274 
	`msg_mђshЃ
(
їq
->
ouНut_bufгr
, 
msg
);

275 
	`msg_дУ
(
msg
);

277 iа(
	`evhЙp_make_їque°
(
evcЏ
, 
їq
,

278 
EVHTTP_REQ_POST
,

280 
	`еrЪtf
(
°dout
, "FAILED\n");

281 
	`exЩ
(1);

284 
Л°_ok
 = 0;

286 
	`evТt_di•©ch
();

288 
	`evhЙp_cЏ√щiЏ_дУ
(
evcЏ
);

290 
	`љc_Лђdown
(
ba£
);

292 
Тd
:

293 
	`evhЙp_дУ
(
hЙp
);

294 
	}
}

296 
evљc_poё
 *

297 
	$љc_poё_wЩh_cЏ√щiЏ
(
p№t
)

299 
evhЙp_cЏ√щiЏ
 *
evcЏ
;

300 
evљc_poё
 *
poё
;

302 
poё
 = 
	`evљc_poё_√w
(
NULL
);

303 
	`as£є
(
poё
 !р
NULL
);

305 
evcЏ
 = 
	`evhЙp_cЏ√щiЏ_√w
("127.0.0.1", 
p№t
);

306 
	`as£є
(
evcЏ
 !р
NULL
);

308 
	`evљc_poё_add_cЏ√щiЏ
(
poё
, 
evcЏ
);

310  (
poё
);

311 
	}
}

314 
	$GўKЮlCb
(
evљc_°©us
 *
°©us
,

315 
msg
 *msg, 
kЮl
 *kЮl, *
ђg
)

317 *
wЧpЏ
;

318 *
aщiЏ
;

320 iа(
√ed_ouНut_hook
) {

321 
evhЙp_їque°
 *
їq
 = 
°©us
->
hЙp_їq
;

322 cЏ° *
hЧdФ
 = 
	`evhЙp_fЪd_hЧdФ
(

323 
їq
->
Ъput_hЧdФs
, "X-Pool-Hook");

324 
	`as£є
(
	`°rcmp
(
hЧdФ
, "ran") == 0);

327 iа(
°©us
->
Фr№
 !р
EVRPC_STATUS_ERR_NONE
)

328 
dЏe
;

330 iа(
	`EVTAG_GET
(
kЮl
, 
wЧpЏ
, &weapon) == -1) {

331 
	`еrЪtf
(
°dФr
, "get weapon\n");

332 
dЏe
;

334 iа(
	`EVTAG_GET
(
kЮl
, 
aщiЏ
, &action) == -1) {

335 
	`еrЪtf
(
°dФr
, "getЗction\n");

336 
dЏe
;

339 iа(
	`°rcmp
(
wЧpЏ
, "dagger"))

340 
dЏe
;

342 iа(
	`°rcmp
(
aщiЏ
, "waveЗroundЖikeЗn idiot"))

343 
dЏe
;

345 
Л°_ok
 += 1;

347 
dЏe
:

348 
	`evТt_loЁexЩ
(
NULL
);

349 
	}
}

352 
	$GўKЮlCbTwo
(
evљc_°©us
 *
°©us
,

353 
msg
 *msg, 
kЮl
 *kЮl, *
ђg
)

355 *
wЧpЏ
;

356 *
aщiЏ
;

358 iа(
°©us
->
Фr№
 !р
EVRPC_STATUS_ERR_NONE
)

359 
dЏe
;

361 iа(
	`EVTAG_GET
(
kЮl
, 
wЧpЏ
, &weapon) == -1) {

362 
	`еrЪtf
(
°dФr
, "get weapon\n");

363 
dЏe
;

365 iа(
	`EVTAG_GET
(
kЮl
, 
aщiЏ
, &action) == -1) {

366 
	`еrЪtf
(
°dФr
, "getЗction\n");

367 
dЏe
;

370 iа(
	`°rcmp
(
wЧpЏ
, "dagger"))

371 
dЏe
;

373 iа(
	`°rcmp
(
aщiЏ
, "waveЗroundЖikeЗn idiot"))

374 
dЏe
;

376 
Л°_ok
 += 1;

378 
dЏe
:

379 iа(
Л°_ok
 == 2)

380 
	`evТt_loЁexЩ
(
NULL
);

381 
	}
}

384 
	$љc_hook_add_hЧdФ
(*
щx
, 
evhЙp_їque°
 *
їq
,

385 
evbufгr
 *
evbuf
, *
ђg
)

387 cЏ° *
hook_ty≥
 = 
ђg
;

388 iа(
	`°rcmp
("Ъput", 
hook_ty≥
) == 0)

389 
	`evhЙp_add_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Hook", 
hook_ty≥
);

391 
	`evhЙp_add_hЧdФ
(
їq
->
ouНut_hЧdФs
, "X-Hook", 
hook_ty≥
);

393 
	`as£є
(
	`evљc_hook_gС_cЏ√щiЏ
(
щx
и!р
NULL
);

395  (
EVRPC_CONTINUE
);

396 
	}
}

399 
	$љc_hook_add_mСa
(*
щx
, 
evhЙp_їque°
 *
їq
,

400 
evbufгr
 *
evbuf
, *
ђg
)

402 
	`evљc_hook_add_mСa
(
щx
, "meta", "test", 5);

404 
	`as£є
(
	`evљc_hook_gС_cЏ√щiЏ
(
щx
и!р
NULL
);

406  (
EVRPC_CONTINUE
);

407 
	}
}

410 
	$љc_hook_їmove_hЧdФ
(*
щx
, 
evhЙp_їque°
 *
їq
,

411 
evbufгr
 *
evbuf
, *
ђg
)

413 cЏ° *
hЧdФ
 = 
	`evhЙp_fЪd_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Hook");

414 *
d©a
 = 
NULL
;

415 
size_t
 
d©a_Ћn
 = 0;

417 
	`as£є
(
hЧdФ
 !р
NULL
);

418 
	`as£є
(
	`°rcmp
(
hЧdФ
, 
ђg
) == 0);

420 
	`evhЙp_їmove_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Hook");

421 
	`evhЙp_add_hЧdФ
(
їq
->
Ъput_hЧdФs
, "X-Pool-Hook", "ran");

423 
	`as£є
(
	`evљc_hook_fЪd_mСa
(
щx
, "mСa", &
d©a
, &
d©a_Ћn
) == 0);

424 
	`as£є
(
d©a
 !р
NULL
);

425 
	`as£є
(
d©a_Ћn
 == 5);

427 
	`as£є
(
	`evљc_hook_gС_cЏ√щiЏ
(
щx
и!р
NULL
);

429  (
EVRPC_CONTINUE
);

430 
	}
}

433 
	$љc_basic_юЫЅ
()

435 
p№t
;

436 
evhЙp
 *
hЙp
 = 
NULL
;

437 
evљc_ba£
 *
ba£
 = 
NULL
;

438 
evљc_poё
 *
poё
 = 
NULL
;

439 
msg
 *msg = 
NULL
;

440 
kЮl
 *kЮ»р
NULL
;

442 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

444 
√ed_Ъput_hook
 = 1;

445 
√ed_ouНut_hook
 = 1;

447 
	`as£є
(
	`evљc_add_hook
(
ba£
, 
EVRPC_INPUT
, 
љc_hook_add_hЧdФ
, (*)"input")

448 !р
NULL
);

449 
	`as£є
(
	`evљc_add_hook
(
ba£
, 
EVRPC_OUTPUT
, 
љc_hook_add_hЧdФ
, (*)"output")

450 !р
NULL
);

452 
poё
 = 
	`љc_poё_wЩh_cЏ√щiЏ
(
p№t
);

454 
	`as£є
(
	`evљc_add_hook
(
poё
, 
EVRPC_OUTPUT
, 
љc_hook_add_mСa
, 
NULL
));

455 
	`as£є
(
	`evљc_add_hook
(
poё
, 
EVRPC_INPUT
, 
љc_hook_їmove_hЧdФ
, (*)"output"));

458 
msg
 = 
	`msg_√w
();

459 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

460 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

462 
kЮl
 = 
	`kЮl_√w
();

464 
	`EVRPC_MAKE_REQUEST
(
MesІge
, 
poё
, 
msg
, 
kЮl
, 
GўKЮlCb
, 
NULL
);

466 
Л°_ok
 = 0;

468 
	`evТt_di•©ch
();

470 
	`Й_as£є
(
Л°_ok
 == 1);

473 
	`kЮl_юЧr
(
kЮl
);

475 
	`EVRPC_MAKE_REQUEST
(
MesІge
, 
poё
, 
msg
, 
kЮl
, 
GўKЮlCb
, 
NULL
);

477 
	`evТt_di•©ch
();

479 
	`Й_as£є
(
Л°_ok
 == 2);

482 
	`kЮl_юЧr
(
kЮl
);

485 
evљc_їque°_wњµФ
 *
щx
 =

486 
	`EVRPC_MAKE_CTX
(
MesІge
, 
msg
, 
kЮl
,

487 
poё
, 
msg
, 
kЮl
, 
GўKЮlCb
, 
NULL
);

488 
	`evљc_make_їque°
(
щx
);

491 
	`evТt_di•©ch
();

493 
	`љc_Лђdown
(
ba£
);

495 
	`Й_as£є
(
Л°_ok
 == 3);

497 
Тd
:

498 iа(
msg
)

499 
	`msg_дУ
(
msg
);

500 iа(
kЮl
)

501 
	`kЮl_дУ
(
kЮl
);

503 iа(
poё
)

504 
	`evљc_poё_дУ
(
poё
);

505 iа(
hЙp
)

506 
	`evhЙp_дУ
(
hЙp
);

508 
√ed_Ъput_hook
 = 0;

509 
√ed_ouНut_hook
 = 0;

510 
	}
}

517 
	$љc_basic_queued_юЫЅ
()

519 
p№t
;

520 
evhЙp
 *
hЙp
 = 
NULL
;

521 
evљc_ba£
 *
ba£
 = 
NULL
;

522 
evљc_poё
 *
poё
 = 
NULL
;

523 
msg
 *msg=
NULL
;

524 
kЮl
 *
kЮl_Џe
=
NULL
, *
kЮl_two
=NULL;

526 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

528 
poё
 = 
	`љc_poё_wЩh_cЏ√щiЏ
(
p№t
);

531 
msg
 = 
	`msg_√w
();

532 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

533 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

535 
kЮl_Џe
 = 
	`kЮl_√w
();

536 
kЮl_two
 = 
	`kЮl_√w
();

538 
	`EVRPC_MAKE_REQUEST
(
MesІge
, 
poё
, 
msg
, 
kЮl_Џe
, 
GўKЮlCbTwo
, 
NULL
);

539 
	`EVRPC_MAKE_REQUEST
(
MesІge
, 
poё
, 
msg
, 
kЮl_two
, 
GўKЮlCb
, 
NULL
);

541 
Л°_ok
 = 0;

543 
	`evТt_di•©ch
();

545 
	`љc_Лђdown
(
ba£
);

547 
	`Й_as£є
(
Л°_ok
 == 2);

549 
Тd
:

550 iа(
msg
)

551 
	`msg_дУ
(
msg
);

552 iа(
kЮl_Џe
)

553 
	`kЮl_дУ
(
kЮl_Џe
);

554 iа(
kЮl_two
)

555 
	`kЮl_дУ
(
kЮl_two
);

557 iа(
poё
)

558 
	`evљc_poё_дУ
(
poё
);

559 iа(
hЙp
)

560 
	`evhЙp_дУ
(
hЙp
);

561 
	}
}

564 
	$GўEЉ№Cb
(
evљc_°©us
 *
°©us
,

565 
msg
 *msg, 
kЮl
 *kЮl, *
ђg
)

567 iа(
°©us
->
Фr№
 !р
EVRPC_STATUS_ERR_TIMEOUT
)

568 
dЏe
;

571 iа(
	`kЮl_comґСe
(
kЮl
) == 0)

572 
dЏe
;

574 
Л°_ok
 += 1;

576 
dЏe
:

577 
	`evТt_loЁexЩ
(
NULL
);

578 
	}
}

582 
	s_љc_hook_щx
 {

583 *
	mvba£
;

584 *
	mщx
;

587 
	ghook_Јu£_cb_€ќed
=0;

590 
	$љc_hook_Јu£_cb
(
fd
, 
wh©
, *
ђg
)

592 
_љc_hook_щx
 *
щx
 = 
ђg
;

593 ++
hook_Јu£_cb_€ќed
;

594 
	`evљc_їsume_їque°
(
щx
->
vba£
, ctx->щx, 
EVRPC_CONTINUE
);

595 
	}
}

598 
	$љc_hook_Јu£
(*
щx
, 
evhЙp_їque°
 *
їq
, 
evbufгr
 *
evbuf
,

599 *
ђg
)

601 
_љc_hook_щx
 *
tmp
 = 
	`mЃloc
((*tmp));

602 
timevЃ
 
tv
;

604 
	`as£є
(
tmp
 !р
NULL
);

605 
tmp
->
vba£
 = 
ђg
;

606 
tmp
->
щx
 = ctx;

608 
	`mem£t
(&
tv
, 0, (tv));

609 
	`evТt_Џы
(-1, 
EV_TIMEOUT
, 
љc_hook_Јu£_cb
, 
tmp
, &
tv
);

610  
EVRPC_PAUSE
;

611 
	}
}

614 
	$љc_basic_юЫЅ_wЩh_Јu£
()

616 
p№t
;

617 
evhЙp
 *
hЙp
 = 
NULL
;

618 
evљc_ba£
 *
ba£
 = 
NULL
;

619 
evљc_poё
 *
poё
 = 
NULL
;

620 
msg
 *msg = 
NULL
;

621 
kЮl
 *kЮlр
NULL
;

623 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

625 
	`as£є
(
	`evљc_add_hook
(
ba£
, 
EVRPC_INPUT
, 
љc_hook_Јu£
, base));

626 
	`as£є
(
	`evљc_add_hook
(
ba£
, 
EVRPC_OUTPUT
, 
љc_hook_Јu£
, base));

628 
poё
 = 
	`љc_poё_wЩh_cЏ√щiЏ
(
p№t
);

630 
	`as£є
(
	`evљc_add_hook
(
poё
, 
EVRPC_INPUT
, 
љc_hook_Јu£
,Еool));

631 
	`as£є
(
	`evљc_add_hook
(
poё
, 
EVRPC_OUTPUT
, 
љc_hook_Јu£
,Еool));

634 
msg
 = 
	`msg_√w
();

635 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

636 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

638 
kЮl
 = 
	`kЮl_√w
();

640 
	`EVRPC_MAKE_REQUEST
(
MesІge
, 
poё
, 
msg
, 
kЮl
, 
GўKЮlCb
, 
NULL
);

642 
Л°_ok
 = 0;

644 
	`evТt_di•©ch
();

646 
	`Й_Ъt_Ё
(
Л°_ok
, ==, 1);

647 
	`Й_Ъt_Ё
(
hook_Јu£_cb_€ќed
, ==, 4);

649 
Тd
:

650 iа(
ba£
)

651 
	`љc_Лђdown
(
ba£
);

653 iа(
msg
)

654 
	`msg_дУ
(
msg
);

655 iа(
kЮl
)

656 
	`kЮl_дУ
(
kЮl
);

658 iа(
poё
)

659 
	`evљc_poё_дУ
(
poё
);

660 iа(
hЙp
)

661 
	`evhЙp_дУ
(
hЙp
);

662 
	}
}

665 
	$љc_юЫЅ_timeout
()

667 
p№t
;

668 
evhЙp
 *
hЙp
 = 
NULL
;

669 
evљc_ba£
 *
ba£
 = 
NULL
;

670 
evљc_poё
 *
poё
 = 
NULL
;

671 
msg
 *msg = 
NULL
;

672 
kЮl
 *kЮ»р
NULL
;

674 
	`љc_£tup
(&
hЙp
, &
p№t
, &
ba£
);

676 
poё
 = 
	`љc_poё_wЩh_cЏ√щiЏ
(
p№t
);

679 
	`evљc_poё_£t_timeout
(
poё
, 5);

682 
msg
 = 
	`msg_√w
();

683 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

684 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

686 
kЮl
 = 
	`kЮl_√w
();

688 
	`EVRPC_MAKE_REQUEST
(
NevФRХly
, 
poё
, 
msg
, 
kЮl
, 
GўEЉ№Cb
, 
NULL
);

690 
Л°_ok
 = 0;

692 
	`evТt_di•©ch
();

695 
	`EVRPC_REQUEST_DONE
(
Іved_љc
);

697 
	`љc_Лђdown
(
ba£
);

699 
	`Й_as£є
(
Л°_ok
 == 2);

701 
Тd
:

702 iа(
msg
)

703 
	`msg_дУ
(
msg
);

704 iа(
kЮl
)

705 
	`kЮl_дУ
(
kЮl
);

707 iа(
poё
)

708 
	`evљc_poё_дУ
(
poё
);

709 iа(
hЙp
)

710 
	`evhЙp_дУ
(
hЙp
);

711 
	}
}

714 
	$љc_Л°
()

716 
msg
 *msg = 
NULL
, *
msg2
 = NULL;

717 
kЮl
 *
©Пck
 = 
NULL
;

718 
run
 *ruјр
NULL
;

719 
evbufгr
 *
tmp
 = 
	`evbufгr_√w
();

720 
timevЃ
 
tv_°ђt
, 
tv_Тd
;

721 
ev_uЪt32_t
 
Пg
;

722 
i
;

724 
msg
 = 
	`msg_√w
();

725 
	`EVTAG_ASSIGN
(
msg
, 
дom_«me
, "niels");

726 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "phoenix");

728 iа(
	`EVTAG_GET
(
msg
, 
©Пck
, &attack) == -1) {

729 
	`Й_ab№t_msg
("FailedБo set kill message.");

732 
	`EVTAG_ASSIGN
(
©Пck
, 
wЧpЏ
, "feather");

733 
	`EVTAG_ASSIGN
(
©Пck
, 
aщiЏ
, "tickle");

734 
i
 = 0; i < 3; ++i) {

735 iа(
	`EVTAG_ARRAY_ADD_VALUE
(
©Пck
, 
how_oбТ
, 
i
и=р
NULL
) {

736 
	`Й_ab№t_msg
("FailedБoЗdd how_often.");

740 
	`evutЮ_gСtimeofday
(&
tv_°ђt
, 
NULL
);

741 
i
 = 0; i < 1000; ++i) {

742 
run
 = 
	`EVTAG_ARRAY_ADD
(
msg
,Дun);

743 iа(
run
 =р
NULL
) {

744 
	`Й_ab№t_msg
("FailedБoЗddДun message.");

746 
	`EVTAG_ASSIGN
(
run
, 
how
, "very fast but with some data in it");

747 
	`EVTAG_ASSIGN
(
run
, 
fixed_byЛs
,

748 (
ev_uЪt8_t
*)"012345678901234567890123");

750 iа(
	`EVTAG_ARRAY_ADD_VALUE
(

751 
run
, 
nўes
, "thi†i†myВўe"и=р
NULL
) {

752 
	`Й_ab№t_msg
("FailedБoЗddВote.");

754 iа(
	`EVTAG_ARRAY_ADD_VALUE
(
run
, 
nўes
, "µs"и=р
NULL
) {

755 
	`Й_ab№t_msg
("FailedБoЗddВote");

758 
	`EVTAG_ASSIGN
(
run
, 
ѕrge_numbФ
, 0xdead0a0bcafebeefLL);

759 
	`EVTAG_ARRAY_ADD_VALUE
(
run
, 
ўhФ_numbФs
, 0xdead0a0b);

760 
	`EVTAG_ARRAY_ADD_VALUE
(
run
, 
ўhФ_numbФs
, 0xbeefcafe);

763 iа(
	`msg_comґСe
(
msg
) == -1)

764 
	`Й_ab№t_msg
("FailedБo make complete message.");

766 
	`evПg_mђshЃ_msg
(
tmp
, 0xdЧf, 
msg
);

768 iа(
	`evПg_≥ek
(
tmp
, &
Пg
) == -1)

769 
	`Й_ab№t_msg
("FailedБoЕeakБag.");

771 iа(
Пg
 != 0xdeaf)

772 
	`TT_DIE
(("Gў inc№їщБag: %0x.", ()
Пg
));

774 
msg2
 = 
	`msg_√w
();

775 iа(
	`evПg_unmђshЃ_msg
(
tmp
, 0xdЧf, 
msg2
) == -1)

776 
	`Й_ab№t_msg
("FailedБo unmarshal message.");

778 
	`evutЮ_gСtimeofday
(&
tv_Тd
, 
NULL
);

779 
	`evutЮ_timФsub
(&
tv_Тd
, &
tv_°ђt
, &tv_end);

780 
	`TT_BLATHER
(("(%.1f us/add) ",

781 ()
tv_Тd
.
tv_£c
/()
i
 * 1000000.0 +

782 
tv_Тd
.
tv_u£c
 / ()
i
));

784 iа(!
	`EVTAG_HAS
(
msg2
, 
дom_«me
) ||

785 !
	`EVTAG_HAS
(
msg2
, 
to_«me
) ||

786 !
	`EVTAG_HAS
(
msg2
, 
©Пck
)) {

787 
	`Й_ab№t_msg
("Missing data structures.");

790 iа(
	`EVTAG_GET
(
msg2
, 
©Пck
, &attack) == -1) {

791 
	`Й_ab№t_msg
("CouldВot getЗttack.");

794 iа(
	`EVTAG_ARRAY_LEN
(
msg2
, 
run
и!р
i
) {

795 
	`Й_ab№t_msg
("WrongВumber ofДun messages.");

799 iа(
	`EVTAG_ARRAY_GET
(
msg2
, 
run
, 0, &run) == -1) {

800 
	`Й_ab№t_msg
("FailedБo getДun msg.");

803 *
nўe_Џe
, *
nўe_two
;

804 
ev_uЪt64_t
 
ѕrge_numbФ
;

805 
ev_uЪt32_t
 
sh№t_numbФ
;

807 iа(
	`EVTAG_ARRAY_LEN
(
run
, 
nўes
) != 2) {

808 
	`Й_ab№t_msg
("WrongВumber ofВote strings.");

811 iа(
	`EVTAG_ARRAY_GET
(
run
, 
nўes
, 0, &
nўe_Џe
) == -1 ||

812 
	`EVTAG_ARRAY_GET
(
run
, 
nўes
, 1, &
nўe_two
) == -1) {

813 
	`Й_ab№t_msg
("CouldВot getВote strings.");

816 iа(
	`°rcmp
(
nўe_Џe
, "this is myВote") ||

817 
	`°rcmp
(
nўe_two
, "pps")) {

818 
	`Й_ab№t_msg
("IncorrectВote stringsГncoded.");

821 iа(
	`EVTAG_GET
(
run
, 
ѕrge_numbФ
, &large_number) == -1 ||

822 
ѕrge_numbФ
 != 0xdead0a0bcafebeefLL) {

823 
	`Й_ab№t_msg
("IncorrrectЖarge_number.");

826 iа(
	`EVTAG_ARRAY_LEN
(
run
, 
ўhФ_numbФs
) != 2) {

827 
	`Й_ab№t_msg
("WrongВumber of other_numbers.");

830 iа(
	`EVTAG_ARRAY_GET
(

831 
run
, 
ўhФ_numbФs
, 0, &
sh№t_numbФ
) == -1) {

832 
	`Й_ab№t_msg
("CouldВot get shortВumber.");

834 
	`Й_uЪt_Ё
(
sh№t_numbФ
, ==, 0xdead0a0b);

837 
	`Й_Ъt_Ё
(
	`EVTAG_ARRAY_LEN
(
©Пck
, 
how_oбТ
), ==, 3);

839 
i
 = 0; i < 3; ++i) {

840 
ev_uЪt32_t
 
їs
;

841 iа(
	`EVTAG_ARRAY_GET
(
©Пck
, 
how_oбТ
, 
i
, &
їs
) == -1) {

842 
	`TT_DIE
(("C™nў gС %dth how_oбТ msg.", 
i
));

844 iа(
їs
 !р
i
) {

845 
	`TT_DIE
(("WrЏg mesІgРТcoded %d !р%d", 
i
, 
їs
));

849 
Л°_ok
 = 1;

850 
Тd
:

851 iа(
msg
)

852 
	`msg_дУ
(
msg
);

853 iа(
msg2
)

854 
	`msg_дУ
(
msg2
);

855 iа(
tmp
)

856 
	`evbufгr_дУ
(
tmp
);

857 
	}
}

859 
	#RPC_LEGACY
(
«me
) \

860 { #«me, 
run_Ћgacy_Л°_в
, 
TT_FORK
|
TT_NEED_BASE
|
TT_LEGACY
, \

861 &
Ћgacy_£tup
, \

862 
љc_
##
«me
 }

	)

864 
Л°€£_t
 
	gљc_Л°€£s
[] = {

865 
RPC_LEGACY
(
basic_Л°
),

866 
RPC_LEGACY
(
basic_mesІge
),

867 
RPC_LEGACY
(
basic_юЫЅ
),

868 
RPC_LEGACY
(
basic_queued_юЫЅ
),

869 
RPC_LEGACY
(
basic_юЫЅ_wЩh_Јu£
),

870 
RPC_LEGACY
(
юЫЅ_timeout
),

871 
RPC_LEGACY
(
Л°
),

873 
END_OF_TESTCASES
,

	@test/regress_ssl.c

27 #ifdeа
WIN32


28 
	~<wЪsock2.h
>

29 
	~<wЪdows.h
>

32 #iвdeа
WIN32


33 
	~<sys/sockС.h
>

34 
	~<√tЪС/Ъ.h
>

37 
	~<evТt2/utЮ.h
>

38 
	~<evТt2/evТt.h
>

39 
	~<evТt2/bufгїvТt_s¶.h
>

40 
	~<evТt2/bufгr.h
>

41 
	~<evТt2/li°ТФ.h
>

43 
	~"їgїss.h
"

44 
	~"tЪyЛ°.h
"

45 
	~"tЪyЛ°_maьos.h
"

47 
	~<ЁТs¶/s¶.h
>

48 
	~<ЁТs¶/bio.h
>

49 
	~<ЁТs¶/Фr.h
>

50 
	~<ЁТs¶/≥m.h
>

52 
	~<°rЪg.h
>

58 cЏ° 
	gKEY
[] =

69 
EVP_PKEY
 *

70 
	$gСkey
()

72 
EVP_PKEY
 *
key
;

73 
BIO
 *
bio
;

76 
bio
 = 
	`BIO_√w_mem_buf
((*)
KEY
, -1);

77 
	`Й_as£є
(
bio
);

79 
key
 = 
	`PEM_їad_bio_Priv©eKey
(
bio
,
NULL
,NULL,NULL);

80 
	`BIO_дУ
(
bio
);

81 
	`Й_as£є
(
key
);

83  
key
;

84 
Тd
:

85  
NULL
;

86 
	}
}

88 
X509
 *

89 
	$gСыє
()

94 
X509
 *
x509
 = 
NULL
;

95 
X509_NAME
 *
«me
 = 
NULL
;

96 
EVP_PKEY
 *
key
 = 
	`gСkey
();

97 
nid
;

98 
time_t
 
now
 = 
	`time
(
NULL
);

100 
	`Й_as£є
(
key
);

102 
x509
 = 
	`X509_√w
();

103 
	`Й_as£є
(
x509
);

104 
	`Й_as£є
(0 !р
	`X509_£t_vФsiЏ
(
x509
, 2));

105 
	`Й_as£є
(0 !р
	`ASN1_INTEGER_£t
(
	`X509_gС_£rЯlNumbФ
(
x509
),

106 ()
now
));

108 
«me
 = 
	`X509_NAME_√w
();

109 
	`Й_as£є
(
«me
);

110 
	`Й_as£є
(
NID_undef
 !р(
nid
 = 
	`OBJ_txt2nid
("commonName")));

111 
	`Й_as£є
(0 !р
	`X509_NAME_add_ТМy_by_NID
(

112 
«me
, 
nid
, 
MBSTRING_ASC
, (*)"example.com",

115 
	`X509_£t_subjeщ_«me
(
x509
, 
«me
);

116 
	`X509_£t_issuФ_«me
(
x509
, 
«me
);

118 
	`X509_time_adj
(
	`X509_gС_nўBef№e
(
x509
), 0, &
now
);

119 
now
 += 3600;

120 
	`X509_time_adj
(
	`X509_gС_nўAбФ
(
x509
), 0, &
now
);

121 
	`X509_£t_pubkey
(
x509
, 
key
);

122 
	`Й_as£є
(0 !р
	`X509_sign
(
x509
, 
key
, 
	`EVP_sha1
()));

124  
x509
;

125 
Тd
:

126 
	`X509_дУ
(
x509
);

127  
NULL
;

128 
	}
}

130 
SSL_CTX
 *
	gthe_s¶_щx
 = 
NULL
;

132 
SSL_CTX
 *

133 
	$gС_s¶_щx
()

135 iа(
the_s¶_щx
)

136  
the_s¶_щx
;

137  (
the_s¶_щx
 = 
	`SSL_CTX_√w
(
	`SSLv23_mСhod
()));

138 
	}
}

141 
	$ЪЩ_s¶
()

143 
	`SSL_libњry_ЪЩ
();

144 
	`ERR_lяd_ьy±o_°rЪgs
();

145 
	`SSL_lяd_Фr№_°rЪgs
();

146 
	`O≥nSSL_add_Ѓl_Ѓg№Щhms
();

147 
	}
}

154 
	gЛ°_is_dЏe
 = 0;

155 
	gn_cЏ√щed
 = 0;

156 
	ggў_юo£
 = 0;

157 
	ggў_Фr№
 = 0;

158 
	gї√gўЯЛ_©
 = -1;

161 
	$ї•Џd_to_numbФ
(
bufгїvТt
 *
bev
, *
щx
)

163 
evbufгr
 *
b
 = 
	`bufгїvТt_gС_Ъput
(
bev
);

164 *
lЪe
;

165 
n
;

166 
lЪe
 = 
	`evbufгr_їad 
(
b
, 
NULL
, 
EVBUFFER_EOL_LF
);

167 iа(! 
lЪe
)

169 
n
 = 
	`©oi
(
lЪe
);

170 iа(
n
 <= 0)

171 
	`TT_FAIL
(("BadВumbФ: %s", 
lЪe
));

172 
	`TT_BLATHER
(("ThРnumbФ wa†%d", 
n
));

173 iа(
n
 == 1001) {

174 ++
Л°_is_dЏe
;

175 
	`bufгїvТt_дУ
(
bev
);

178 iа(!
	`°rcmp
(
щx
, "юЫЅ"и&& 
n
 =р
ї√gўЯЛ_©
) {

179 
	`SSL_ї√gўЯЛ
(
	`bufгїvТt_ЁТs¶_gС_s¶
(
bev
));

181 ++
n
;

182 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
bev
),

183 "%d\n", 
n
);

184 
	}
}

187 
	$evТtcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

189 
	`TT_BLATHER
(("GўГvТИ%d", ()
wh©
));

190 iа(
wh©
 & 
BEV_EVENT_CONNECTED
) {

191 
SSL
 *
s¶
;

192 
X509
 *
≥Ф_ыє
;

193 ++
n_cЏ√щed
;

194 
s¶
 = 
	`bufгїvТt_ЁТs¶_gС_s¶
(
bev
);

195 
	`Й_as£є
(
s¶
);

196 
≥Ф_ыє
 = 
	`SSL_gС_≥Ф_ыєifi€Л
(
s¶
);

197 iа(0==
	`°rcmp
(
щx
, "server")) {

198 
	`Й_as£є
(
≥Ф_ыє
 =р
NULL
);

200 
	`Й_as£є
(
≥Ф_ыє
 !р
NULL
);

202 } iа(
wh©
 & 
BEV_EVENT_EOF
) {

203 
	`TT_BLATHER
(("GotЗ good EOF"));

204 ++
gў_юo£
;

205 
	`bufгїvТt_дУ
(
bev
);

206 } iа(
wh©
 & 
BEV_EVENT_ERROR
) {

207 
	`TT_BLATHER
(("GotЗnГrror."));

208 ++
gў_Фr№
;

209 
	`bufгїvТt_дУ
(
bev
);

211 
Тd
:

213 
	}
}

216 
	$їgїss_bufгїvТt_ЁТs¶
(*
ђg
)

218 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

220 
bufгїvТt
 *
bev1
, *
bev2
;

221 
SSL
 *
s¶1
, *
s¶2
;

222 
X509
 *
ыє
 = 
	`gСыє
();

223 
EVP_PKEY
 *
key
 = 
	`gСkey
();

224 
	`Й_as£є
(
ыє
);

225 
	`Й_as£є
(
key
);

227 
	`ЪЩ_s¶
();

229 
s¶1
 = 
	`SSL_√w
(
	`gС_s¶_щx
());

230 
s¶2
 = 
	`SSL_√w
(
	`gС_s¶_щx
());

232 
	`SSL_u£_ыєifi€Л
(
s¶2
, 
ыє
);

233 
	`SSL_u£_Priv©eKey
(
s¶2
, 
key
);

235 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "renegotiate"))

236 
ї√gўЯЛ_©
 = 600;

238 iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "socketpair")) {

239 
bev1
 = 
	`bufгїvТt_ЁТs¶_sockС_√w
(

240 
d©a
->
ba£
,

241 
d©a
->
ЈЬ
[0],

242 
s¶1
,

243 
BUFFEREVENT_SSL_CONNECTING
,

244 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

245 
bev2
 = 
	`bufгїvТt_ЁТs¶_sockС_√w
(

246 
d©a
->
ba£
,

247 
d©a
->
ЈЬ
[1],

248 
s¶2
,

249 
BUFFEREVENT_SSL_ACCEPTING
,

250 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

252 
	`Й_Ъt_Ё
(
	`bufгїvТt_gСfd
(
bev1
), ==, 
d©a
->
ЈЬ
[0]);

253 } iа(
	`°r°r
((*)
d©a
->
£tup_d©a
, "filter")) {

254 
bufгїvТt
 *
bev_ќ1
, *
bev_ќ2
;

255 
bev_ќ1
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[0],

256 
BEV_OPT_CLOSE_ON_FREE
);

257 
bev_ќ2
 = 
	`bufгїvТt_sockС_√w
(
d©a
->
ba£
, d©a->
ЈЬ
[1],

258 
BEV_OPT_CLOSE_ON_FREE
);

259 
	`Й_as£є
(
bev_ќ1
);

260 
	`Й_as£є
(
bev_ќ2
);

261 
bev1
 = 
	`bufгїvТt_ЁТs¶_fЮЛr_√w
(

262 
d©a
->
ba£
,

263 
bev_ќ1
,

264 
s¶1
,

265 
BUFFEREVENT_SSL_CONNECTING
,

266 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

267 
bev2
 = 
	`bufгїvТt_ЁТs¶_fЮЛr_√w
(

268 
d©a
->
ba£
,

269 
bev_ќ2
,

270 
s¶2
,

271 
BUFFEREVENT_SSL_ACCEPTING
,

272 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

273 
	`Й_±r_Ё
(
	`bufгїvТt_gС_undФlyЪg
(
bev1
), ==, 
bev_ќ1
);

275 
	`TT_DIE
(("Bad sСu∞d©®%s", (*)
d©a
->
£tup_d©a
));

278 
	`bufгїvТt_ТabЋ
(
bev1
, 
EV_READ
|
EV_WRITE
);

279 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
|
EV_WRITE
);

281 
	`bufгїvТt_£tcb
(
bev1
, 
ї•Џd_to_numbФ
, 
NULL
, 
evТtcb
,

283 
	`bufгїvТt_£tcb
(
bev2
, 
ї•Џd_to_numbФ
, 
NULL
, 
evТtcb
,

286 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
bev1
), "1\n");

288 
	`evТt_ba£_di•©ch
(
d©a
->
ba£
);

290 
	`Й_as£є
(
Л°_is_dЏe
 == 1);

291 
	`Й_as£є
(
n_cЏ√щed
 == 2);

297 
Тd
:

299 
	}
}

302 
	$acы±cb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
fd
,

303 
sockaddr
 *
addr
, 
sockЋn
, *
ђg
)

305 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

306 
bufгїvТt
 *
bev
;

307 
SSL
 *
s¶
 = 
	`SSL_√w
(
	`gС_s¶_щx
());

309 
	`SSL_u£_ыєifi€Л
(
s¶
, 
	`gСыє
());

310 
	`SSL_u£_Priv©eKey
(
s¶
, 
	`gСkey
());

312 
bev
 = 
	`bufгїvТt_ЁТs¶_sockС_√w
(

313 
d©a
->
ba£
,

314 
fd
,

315 
s¶
,

316 
BUFFEREVENT_SSL_ACCEPTING
,

317 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

319 
	`bufгїvТt_£tcb
(
bev
, 
ї•Џd_to_numbФ
, 
NULL
, 
evТtcb
,

322 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
|
EV_WRITE
);

325 
	`evcЏ∆i°ТФ_diІbЋ
(
li°ТФ
);

326 
	}
}

329 
	$їgїss_bufгїvТt_ЁТs¶_cЏ√щ
(*
ђg
)

331 
basic_Л°_d©a
 *
d©a
 = 
ђg
;

333 
evТt_ba£
 *
ba£
 = 
d©a
->base;

335 
evcЏ∆i°ТФ
 *
li°ТФ
;

336 
bufгїvТt
 *
bev
;

337 
sockaddr_Ъ
 
sЪ
;

338 
sockaddr_°№age
 
ss
;

339 
ev_sockЋn_t
 
¶Т
;

341 
	`ЪЩ_s¶
();

343 
	`mem£t
(&
sЪ
, 0, (sin));

344 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

345 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

347 
	`mem£t
(&
ss
, 0, (ss));

348 
¶Т
 = (
ss
);

350 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
acы±cb
, 
d©a
,

351 
LEV_OPT_CLOSE_ON_FREE
|
LEV_OPT_REUSEABLE
,

352 -1, (
sockaddr
 *)&
sЪ
, (sin));

354 
	`Й_as£є
(
li°ТФ
);

355 
	`Й_as£є
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ
) >= 0);

357 
bev
 = 
	`bufгїvТt_ЁТs¶_sockС_√w
(

358 
d©a
->
ba£
, -1, 
	`SSL_√w
(
	`gС_s¶_щx
()),

359 
BUFFEREVENT_SSL_CONNECTING
,

360 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_DEFER_CALLBACKS
);

361 
	`Й_as£є
(
bev
);

363 
	`bufгїvТt_£tcb
(
bev
, 
ї•Џd_to_numbФ
, 
NULL
, 
evТtcb
,

366 
	`Й_as£є
(
	`gСsock«me
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ
),

367 (
sockaddr
*)&
ss
, &
¶Т
) == 0);

368 
	`Й_as£є
(
¶Т
 =р(
sockaddr_Ъ
));

369 
	`Й_Ъt_Ё
(((
sockaddr
*)&
ss
)->
І_зmЮy
, ==, 
AF_INET
);

370 
	`Й_Ъt_Ё
(((
sockaddr
*)&
ss
)->
І_зmЮy
, ==, 
AF_INET
);

372 
	`Й_as£є
(0 ==

373 
	`bufгїvТt_sockС_cЏ√щ
(
bev
, (
sockaddr
*)&
ss
, 
¶Т
));

374 
	`evbufгr_add_іЪtf
(
	`bufгїvТt_gС_ouНut
(
bev
), "1\n");

375 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
|
EV_WRITE
);

377 
	`evТt_ba£_di•©ch
(
ba£
);

378 
Тd
:

380 
	}
}

382 
Л°€£_t
 
	gs¶_Л°€£s
[] = {

384 { "bufгїvТt_sockСЈЬ", 
їgїss_bufгїvТt_ЁТs¶
, 
TT_ISOLATED
,

385 &
basic_£tup
, (*)"socketpair" },

386 { "bufгїvТt_fЮЛr", 
їgїss_bufгїvТt_ЁТs¶
,

387 
TT_ISOLATED
,

388 &
basic_£tup
, (*)"filter" },

389 { "bufгїvТt_ї√gўЯЛ_sockСЈЬ", 
їgїss_bufгїvТt_ЁТs¶
,

390 
TT_ISOLATED
,

391 &
basic_£tup
, (*)"socketpairДenegotiate" },

392 { "bufгїvТt_ї√gўЯЛ_fЮЛr", 
їgїss_bufгїvТt_ЁТs¶
,

393 
TT_ISOLATED
,

394 &
basic_£tup
, (*)"filterДenegotiate" },

396 { "bufгїvТt_cЏ√щ", 
їgїss_bufгїvТt_ЁТs¶_cЏ√щ
,

397 
TT_FORK
|
TT_NEED_BASE
, &
basic_£tup
, 
NULL
 },

399 
END_OF_TESTCASES
,

	@test/regress_testutils.c

27 #ifdeа
WIN32


28 
	~<wЪsock2.h
>

29 
	~<wЪdows.h
>

30 
	~<ws2tэЭ.h
>

33 
	~"evТt-cЏfig.h
"

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 #ifdeа
_EVENT_HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/queue.h
>

41 #iвdeа
WIN32


42 
	~<sys/sockС.h
>

43 
	~<sig«l.h
>

44 
	~<√tЪС/Ъ.h
>

45 
	~<ђЈ/ЪС.h
>

46 
	~<uni°d.h
>

48 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


49 
	~<√tЪС/Ъ6.h
>

51 #ifdeа
HAVE_NETDB_H


52 
	~<√tdb.h
>

54 
	~<fъО.h
>

55 
	~<°dlib.h
>

56 
	~<°dio.h
>

57 
	~<°rЪg.h
>

58 
	~<ФЇo.h
>

60 
	~"evТt2/evТt.h
"

61 
	~"evТt2/evТt_comЈt.h
"

62 
	~<evТt2/utЮ.h
>

63 
	~<evТt2/li°ТФ.h
>

64 
	~<evТt2/bufгїvТt.h
>

65 
	~"evdns.h
"

66 
	~"log-ЪЛЇЃ.h
"

67 
	~"їgїss.h
"

68 
	~"їgїss_Л°utЮs.h
"

71 
evdns_£rvФ_p№t
 *
	gdns_p№t
;

72 
evutЮ_sockС_t
 
	gdns_sock
 = -1;

76 
	$їgїss_gС_sockС_p№t
(
evutЮ_sockС_t
 
fd
)

78 
sockaddr_°№age
 
ss
;

79 
ev_sockЋn_t
 
sockЋn
 = (
ss
);

80 iа(
	`gСsock«me
(
fd
, (
sockaddr
*)&
ss
, &
sockЋn
) != 0)

82 iа(
ss
.
ss_зmЮy
 =р
AF_INET
)

83  
	`Ѕohs
–((
sockaddr_Ъ
*)&
ss
)->
sЪ_p№t
);

84 iа(
ss
.
ss_зmЮy
 =р
AF_INET6
)

85  
	`Ѕohs
–((
sockaddr_Ъ6
*)&
ss
)->
sЪ6_p№t
);

88 
	}
}

90 
evdns_£rvФ_p№t
 *

91 
	$їgїss_gС_dns£rvФ
(
evТt_ba£
 *
ba£
,

92 
ev_uЪt16_t
 *
p№Кum
,

93 
evutЮ_sockС_t
 *
psock
,

94 
evdns_їque°_€ќback_в_ty≥
 
cb
,

95 *
ђg
)

97 
evdns_£rvФ_p№t
 *
p№t
 = 
NULL
;

98 
evutЮ_sockС_t
 
sock
;

99 
sockaddr_Ъ
 
my_addr
;

101 
sock
 = 
	`sockС
(
AF_INET
, 
SOCK_DGRAM
, 0);

102 iа(
sock
 <= 0) {

103 
	`Й_ab№t_≥Љ№
("socket");

106 
	`evutЮ_make_sockС_nЏblockЪg
(
sock
);

108 
	`mem£t
(&
my_addr
, 0, (my_addr));

109 
my_addr
.
sЪ_зmЮy
 = 
AF_INET
;

110 
my_addr
.
sЪ_p№t
 = 
	`htЏs
(*
p№Кum
);

111 
my_addr
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001UL);

112 iа(
	`bЪd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr)) < 0) {

113 
	`Й_ab№t_≥Љ№
("bind");

115 
p№t
 = 
	`evdns_add_£rvФ_p№t_wЩh_ba£
(
ba£
, 
sock
, 0, 
cb
, 
ђg
);

116 iа(!*
p№Кum
)

117 *
p№Кum
 = 
	`їgїss_gС_sockС_p№t
(
sock
);

118 iа(
psock
)

119 *
psock
 = 
sock
;

121  
p№t
;

122 
Тd
:

123  
NULL
;

124 
	}
}

127 
	$їgїss_юЧn_dns£rvФ
()

129 iа(
dns_p№t
)

130 
	`evdns_юo£_£rvФ_p№t
(
dns_p№t
);

131 iа(
dns_sock
 >= 0)

132 
	`EVUTIL_CLOSESOCKET
(
dns_sock
);

133 
	}
}

136 
	$їgїss_dns_£rvФ_cb
(
evdns_£rvФ_їque°
 *
їq
, *
d©a
)

138 
їgїss_dns_£rvФ_ПbЋ
 *
Пb
 = 
d©a
;

139 cЏ° *
que°iЏ
;

141 iа(
їq
->
nque°iЏs
 != 1)

142 
	`TT_DIE
(("Only handling one questionЗtЗБime; got %d",

143 
їq
->
nque°iЏs
));

145 
que°iЏ
 = 
їq
->
que°iЏs
[0]->
«me
;

147 
Пb
->
q
 && 
	`evutЮ_ascii_°r€£cmp
(
que°iЏ
,Бab->q) &&

148 
	`°rcmp
("*", 
Пb
->
q
))

149 ++
Пb
;

150 iа(
Пb
->
q
 =р
NULL
)

151 
	`TT_DIE
(("U√x≥щed que°iЏ: '%s'", 
que°iЏ
));

153 ++
Пb
->
£Т
;

155 iа(!
	`°rcmp
(
Пb
->
™°y≥
, "err")) {

156 
Фr
 = 
	`©oi
(
Пb
->
™s
);

157 
	`Й_as£є
(! 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 
Фr
));

159 } iа(!
	`°rcmp
(
Пb
->
™°y≥
, "A")) {

160 
Ъ_addr
 
Ъ
;

161 
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
Пb
->
™s
, &
Ъ
);

162 
	`evdns_£rvФ_їque°_add_a_їґy
(
їq
, 
que°iЏ
, 1, &
Ъ
.
s_addr
,

164 } iа(!
	`°rcmp
(
Пb
->
™°y≥
, "AAAA")) {

165 
Ъ6_addr
 
Ъ6
;

166 
	`evutЮ_ЪС_±Џ
(
AF_INET6
, 
Пb
->
™s
, &
Ъ6
);

167 
	`evdns_£rvФ_їque°_add_ѓѓ_їґy
(
їq
,

168 
que°iЏ
, 1, &
Ъ6
.
s6_addr
, 100);

170 
	`TT_DIE
(("WeЬdБabЋГЅry wЩhБy≥ '%s'", 
Пb
->
™°y≥
));

172 
	`Й_as£є
(! 
	`evdns_£rvФ_їque°_ї•Џd
(
їq
, 0))

174 
Тd
:

175 
	`Й_w™t
(! 
	`evdns_£rvФ_їque°_drЁ
(
їq
));

176 
	}
}

179 
	$їgїss_dns£rvФ
(
evТt_ba£
 *
ba£
, 
ev_uЪt16_t
 *
p№t
,

180 
їgїss_dns_£rvФ_ПbЋ
 *
£ђch_ПbЋ
)

182 
dns_p№t
 = 
	`їgїss_gС_dns£rvФ
(
ba£
, 
p№t
, &
dns_sock
,

183 
їgїss_dns_£rvФ_cb
, 
£ђch_ПbЋ
);

184  
dns_p№t
 !р
NULL
;

185 
	}
}

	@test/regress_testutils.h

27 #iвdeа
_TESTUTILS_H


28 
	#_TESTUTILS_H


	)

30 
	sїgїss_dns_£rvФ_ПbЋ
 {

31 cЏ° *
	mq
;

32 cЏ° *
	m™°y≥
;

33 cЏ° *
	m™s
;

34 
	m£Т
;

37 
evdns_£rvФ_p№t
 *

38 
їgїss_gС_dns£rvФ
(
evТt_ba£
 *
ba£
,

39 
ev_uЪt16_t
 *
p№Кum
,

40 
evutЮ_sockС_t
 *
psock
,

41 
evdns_їque°_€ќback_в_ty≥
 
cb
,

42 *
ђg
);

45 
їgїss_gС_sockС_p№t
(
evutЮ_sockС_t
 
fd
);

48 
їgїss_dns_£rvФ_cb
(

49 
evdns_£rvФ_їque°
 *
їq
, *
d©a
);

52 
їgїss_dns£rvФ
(
evТt_ba£
 *
ba£
, 
ev_uЪt16_t
 *
p№t
,

53 
їgїss_dns_£rvФ_ПbЋ
 *
£ach_ПbЋ
);

56 
їgїss_юЧn_dns£rvФ
();

	@test/regress_util.c

26 #ifdeа
WIN32


27 
	~<wЪsock2.h
>

28 
	~<wЪdows.h
>

29 
	~<ws2tэЭ.h
>

32 
	~"evТt-cЏfig.h
"

34 
	~<sys/ty≥s.h
>

36 #iвdeа
WIN32


37 
	~<sys/sockС.h
>

38 
	~<√tЪС/Ъ.h
>

39 
	~<ђЈ/ЪС.h
>

40 
	~<uni°d.h
>

42 #ifdeа
_EVENT_HAVE_NETINET_IN6_H


43 
	~<√tЪС/Ъ6.h
>

45 
	~<sig«l.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rЪg.h
>

49 
	~<as£є.h
>

51 
	~"evТt2/evТt.h
"

52 
	~"evТt2/utЮ.h
"

53 
	~"../Эv6-ЪЛЇЃ.h
"

54 
	~"../utЮ-ЪЛЇЃ.h
"

55 
	~"../log-ЪЛЇЃ.h
"

56 
	~"../°Њэy-ЪЛЇЃ.h
"

58 
	~"їgїss.h
"

60 
	eТМy_°©us
 { 
	mNORMAL
, 
	mCANONICAL
, 
	mBAD
 };

63 
	sЭv4_ТМy
 {

64 cЏ° *
	maddr
;

65 
ev_uЪt32_t
 
	mїs
;

66 
ТМy_°©us
 
	m°©us
;

67 } 
	gЭv4_ТМЫs
[] = {

68 { "1.2.3.4", 0x01020304u, 
CANONICAL
 },

69 { "255.255.255.255", 0xffffffffu, 
CANONICAL
 },

70 { "256.0.0.0", 0, 
BAD
 },

71 { "ABC", 0, 
BAD
 },

72 { "1.2.3.4.5", 0, 
BAD
 },

73 { "176.192.208.244", 0xb0c0d0f4, 
CANONICAL
 },

74 { 
NULL
, 0, 
BAD
 },

77 
	sЭv6_ТМy
 {

78 cЏ° *
	maddr
;

79 
ev_uЪt32_t
 
	mїs
[4];

80 
ТМy_°©us
 
	m°©us
;

81 } 
	gЭv6_ТМЫs
[] = {

82 { "::", { 0, 0, 0, 0, }, 
CANONICAL
 },

83 { "0:0:0:0:0:0:0:0", { 0, 0, 0, 0, }, 
NORMAL
 },

84 { "::1", { 0, 0, 0, 1, }, 
CANONICAL
 },

85 { "::1.2.3.4", { 0, 0, 0, 0x01020304, }, 
CANONICAL
 },

86 { "ffff:1::", { 0xffff0001u, 0, 0, 0, }, 
CANONICAL
 },

87 { "ffff:0000::", { 0xffff0000u, 0, 0, 0, }, 
NORMAL
 },

88 { "ffff::1234", { 0xffff0000u, 0, 0, 0x1234, }, 
CANONICAL
 },

89 { "0102::1.2.3.4", {0x01020000u, 0, 0, 0x01020304u }, 
NORMAL
 },

90 { "::9:c0a8:1:1", { 0, 0, 0x0009c0a8u, 0x00010001u }, 
CANONICAL
 },

91 { "::ffff:1.2.3.4", { 0, 0, 0x000ffffu, 0x01020304u }, 
CANONICAL
 },

92 { "FFFF::", { 0xffff0000u, 0, 0, 0 }, 
NORMAL
 },

93 { "foobђ.", { 0, 0, 0, 0 }, 
BAD
 },

94 { "foobђ", { 0, 0, 0, 0 }, 
BAD
 },

95 { "fo:obђ", { 0, 0, 0, 0 }, 
BAD
 },

96 { "ffff", { 0, 0, 0, 0 }, 
BAD
 },

97 { "fffff::", { 0, 0, 0, 0 }, 
BAD
 },

98 { "fffff::", { 0, 0, 0, 0 }, 
BAD
 },

99 { "::1.0.1.1000", { 0, 0, 0, 0 }, 
BAD
 },

100 { "1:2:33333:4::", { 0, 0, 0, 0 }, 
BAD
 },

101 { "1:2:3:4:5:6:7:8:9", { 0, 0, 0, 0 }, 
BAD
 },

102 { "1::2::3", { 0, 0, 0, 0 }, 
BAD
 },

103 { ":::1", { 0, 0, 0, 0 }, 
BAD
 },

104 { 
NULL
, { 0, 0, 0, 0, }, 
BAD
 },

108 
	$їgїss_Эv4_Јr£
(*
±r
)

110 
i
;

111 
i
 = 0; 
Эv4_ТМЫs
[i].
addr
; ++i) {

112 
wrЩЛn
[128];

113 
Эv4_ТМy
 *
Тt
 = &
Эv4_ТМЫs
[
i
];

114 
Ъ_addr
 
Ъ
;

115 
r
;

116 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
Тt
->
addr
, &
Ъ
);

117 iа(
r
 == 0) {

118 iа(
Тt
->
°©us
 !р
BAD
) {

119 
	`TT_FAIL
(("%s didВotЕarse, but it'sЗ goodЗddress!",

120 
Тt
->
addr
));

124 iа(
Тt
->
°©us
 =р
BAD
) {

125 
	`TT_FAIL
(("%†Јr£d, buИwРex≥щedЗјФr№", 
Тt
->
addr
));

128 iа(
	`Ѕohl
(
Ъ
.
s_addr
и!р
Тt
->
їs
) {

129 
	`TT_FAIL
(("%†Јr£dБЎ%lx, buИwРex≥щed %lx", 
Тt
->
addr
,

130 ()
	`Ѕohl
(
Ъ
.
s_addr
),

131 ()
Тt
->
їs
));

134 iа(
Тt
->
°©us
 =р
CANONICAL
) {

135 cЏ° *
w
 = 
	`evutЮ_ЪС_ЅЁ
(
AF_INET
, &
Ъ
, 
wrЩЛn
,

136 (
wrЩЛn
));

137 iа(!
w
) {

138 
	`TT_FAIL
(("TrЫdБЎwrЩРouИ%s; gў NULL.", 
Тt
->
addr
));

141 iа(
	`°rcmp
(
wrЩЛn
, 
Тt
->
addr
)) {

142 
	`TT_FAIL
(("TriedБo write out %s; got %s",

143 
Тt
->
addr
, 
wrЩЛn
));

150 
	}
}

153 
	$їgїss_Эv6_Јr£
(*
±r
)

155 #ifdeа
AF_INET6


156 
i
, 
j
;

158 
i
 = 0; 
Эv6_ТМЫs
[i].
addr
; ++i) {

159 
wrЩЛn
[128];

160 
Эv6_ТМy
 *
Тt
 = &
Эv6_ТМЫs
[
i
];

161 
Ъ6_addr
 
Ъ6
;

162 
r
;

163 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET6
, 
Тt
->
addr
, &
Ъ6
);

164 iа(
r
 == 0) {

165 iа(
Тt
->
°©us
 !р
BAD
)

166 
	`TT_FAIL
(("%s didВotЕarse, but it'sЗ goodЗddress!",

167 
Тt
->
addr
));

170 iа(
Тt
->
°©us
 =р
BAD
) {

171 
	`TT_FAIL
(("%†Јr£d, buИwРex≥щedЗјФr№", 
Тt
->
addr
));

174 
j
 = 0; j < 4; ++j) {

176 
ev_uЪt32_t
 
u
 =

177 (
Ъ6
.
s6_addr
[
j
*4 ] << 24) |

178 (
Ъ6
.
s6_addr
[
j
*4+1] << 16) |

179 (
Ъ6
.
s6_addr
[
j
*4+2] << 8) |

180 (
Ъ6
.
s6_addr
[
j
*4+3]);

181 iа(
u
 !р
Тt
->
їs
[
j
]) {

182 
	`TT_FAIL
(("%†didВўЕђ£З†ex≥щed.", 
Тt
->
addr
));

186 iа(
Тt
->
°©us
 =р
CANONICAL
) {

187 cЏ° *
w
 = 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
Ъ6
, 
wrЩЛn
,

188 (
wrЩЛn
));

189 iа(!
w
) {

190 
	`TT_FAIL
(("TrЫdБЎwrЩРouИ%s; gў NULL.", 
Тt
->
addr
));

193 iа(
	`°rcmp
(
wrЩЛn
, 
Тt
->
addr
)) {

194 
	`TT_FAIL
(("TrЫdБЎwrЩРouИ%s; gў %s", 
Тt
->
addr
, 
wrЩЛn
));

201 
	`TT_BLATHER
(("Skipping IPv6ЗddressЕarsing."));

203 
	}
}

205 
	sІ_p№t_Тt
 {

206 cЏ° *
	mЈr£
;

207 
	mІ_зmЮy
;

208 cЏ° *
	maddr
;

209 
	mp№t
;

210 } 
	gІ_p№t_Тts
[] = {

211 { "[ffff::1]:1000", 
AF_INET6
, "ffff::1", 1000 },

212 { "[ffff::1]", 
AF_INET6
, "ffff::1", 0 },

213 { "[ffff::1", 0, 
NULL
, 0 },

214 { "[ffff::1]:65599", 0, 
NULL
, 0 },

215 { "[ffff::1]:0", 0, 
NULL
, 0 },

216 { "[ffff::1]:-1", 0, 
NULL
, 0 },

217 { "::1", 
AF_INET6
, "::1", 0 },

218 { "1:2::1", 
AF_INET6
, "1:2::1", 0 },

219 { "192.168.0.1:50", 
AF_INET
, "192.168.0.1", 50 },

220 { "1.2.3.4", 
AF_INET
, "1.2.3.4", 0 },

221 { 
NULL
, 0, NULL, 0 },

225 
	$їgїss_sockaddr_p№t_Јr£
(*
±r
)

227 
sockaddr_°№age
 
ss
;

228 
i
, 
r
;

230 
i
 = 0; 
І_p№t_Тts
[i].
Јr£
; ++i) {

231 
І_p№t_Тt
 *
Тt
 = &
І_p№t_Тts
[
i
];

232 
Ћn
 = (
ss
);

233 
	`mem£t
(&
ss
, 0, (ss));

234 
r
 = 
	`evutЮ_Јr£_sockaddr_p№t
(
Тt
->
Јr£
, (
sockaddr
*)&
ss
, &
Ћn
);

235 iа(
r
 < 0) {

236 iа(
Тt
->
І_зmЮy
)

237 
	`TT_FAIL
(("Couldn'ИЈr£ %s!", 
Тt
->
Јr£
));

239 } iа(! 
Тt
->
І_зmЮy
) {

240 
	`TT_FAIL
(("Shouldn'ИhavРbУјabЋБЎЈr£ %s!", 
Тt
->
Јr£
));

243 iа(
Тt
->
І_зmЮy
 =р
AF_INET
) {

244 
sockaddr_Ъ
 
sЪ
;

245 
	`mem£t
(&
sЪ
, 0, (sin));

246 #ifdeа
_EVENT_HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


247 
sЪ
.
sЪ_Ћn
 = (sin);

249 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

250 
sЪ
.
sЪ_p№t
 = 
	`htЏs
(
Тt
->
p№t
);

251 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET
, 
Тt
->
addr
, &
sЪ
.
sЪ_addr
);

252 iа(1 !р
r
) {

253 
	`TT_FAIL
(("Couldn'ИЈr£ ipv4БђgС %s.", 
Тt
->
addr
));

254 } iа(
	`memcmp
(&
sЪ
, &
ss
, (sin))) {

255 
	`TT_FAIL
(("Pђ£ f№ %†wa†nўЗ†ex≥щed.", 
Тt
->
Јr£
));

256 } iа(
Ћn
 !р(
sЪ
)) {

257 
	`TT_FAIL
(("LТgth f№ %†nўЗ†ex≥щed.",
Тt
->
Јr£
));

260 
sockaddr_Ъ6
 
sЪ6
;

261 
	`mem£t
(&
sЪ6
, 0, (sin6));

262 #ifdeа
_EVENT_HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN


263 
sЪ6
.
sЪ6_Ћn
 = (sin6);

265 
sЪ6
.
sЪ6_зmЮy
 = 
AF_INET6
;

266 
sЪ6
.
sЪ6_p№t
 = 
	`htЏs
(
Тt
->
p№t
);

267 
r
 = 
	`evutЮ_ЪС_±Џ
(
AF_INET6
, 
Тt
->
addr
, &
sЪ6
.
sЪ6_addr
);

268 iа(1 !р
r
) {

269 
	`TT_FAIL
(("Couldn'ИЈr£ ipv6БђgС %s.", 
Тt
->
addr
));

270 } iа(
	`memcmp
(&
sЪ6
, &
ss
, (sin6))) {

271 
	`TT_FAIL
(("Pђ£ f№ %†wa†nўЗ†ex≥щed.", 
Тt
->
Јr£
));

272 } iа(
Ћn
 !р(
sЪ6
)) {

273 
	`TT_FAIL
(("LТgth f№ %†nўЗ†ex≥щed.",
Тt
->
Јr£
));

277 
	}
}

279 
	sІ_іed_Тt
 {

280 cЏ° *
	mЈr£
;

282 
	mis_loЁback
;

283 } 
	gІ_іed_ТМЫs
[] = {

294 { 
NULL
, 0 },

299 
	$Л°_evutЮ_sockaddr_іedi€Лs
(*
±r
)

301 
sockaddr_°№age
 
ss
;

302 
r
, 
i
;

304 
i
=0; 
І_іed_ТМЫs
[i].
Јr£
; ++i) {

305 
І_іed_Тt
 *
Тt
 = &
І_іed_ТМЫs
[
i
];

306 
Ћn
 = (
ss
);

308 
r
 = 
	`evutЮ_Јr£_sockaddr_p№t
(
Тt
->
Јr£
, (
sockaddr
*)&
ss
, &
Ћn
);

310 iа(
r
<0) {

311 
	`TT_FAIL
(("Couldn'ИЈr£ %s!", 
Тt
->
Јr£
));

316 iа(
Тt
->
is_loЁback
 !р
	`evutЮ_sockaddr_is_loЁback
((
sockaddr
*)&
ss
)) {

317 
	`TT_FAIL
(("evutil_sockaddr_loopback(%s)ВotЗsГxpected",

318 
Тt
->
Јr£
));

321 
	}
}

324 
	$Л°_evutЮ_°єёl
(*
±r
)

326 cЏ° *
s
;

327 *
Тd±r
;

329 
	`Й_w™t
(
	`evutЮ_°єёl
("5000000000", 
NULL
, 10) ==

330 ((
ev_Ъt64_t
)5000000)*1000);

331 
	`Й_w™t
(
	`evutЮ_°єёl
("-5000000000", 
NULL
, 10) ==

332 ((
ev_Ъt64_t
)5000000)*-1000);

333 
s
 = " 99999stuff";

334 
	`Й_w™t
(
	`evutЮ_°єёl
(
s
, &
Тd±r
, 10и=р(
ev_Ъt64_t
)99999);

335 
	`Й_w™t
(
Тd±r
 =р
s
+6);

336 
	`Й_w™t
(
	`evutЮ_°єёl
("foo", 
NULL
, 10) == 0);

337 
	}
}

340 
	$Л°_evutЮ_ҐіЪtf
(*
±r
)

342 
buf
[16];

343 
r
;

344 
r
 = 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "%d %d", 50, 100);

345 
	`Й_°r_Ё
(
buf
, ==, "50 100");

346 
	`Й_Ъt_Ё
(
r
, ==, 6);

348 
r
 = 
	`evutЮ_ҐіЪtf
(
buf
, (buf), "longish %d", 1234567890);

349 
	`Й_°r_Ё
(
buf
, ==, "longish 1234567");

350 
	`Й_Ъt_Ё
(
r
, ==, 18);

352 
Тd
:

354 
	}
}

357 
	$Л°_evutЮ_€£cmp
(*
±r
)

359 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°r€£cmp
("ABC", "ABC"), ==, 0);

360 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°r€£cmp
("ABC", "abc"), ==, 0);

361 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°r€£cmp
("ABC", "abcd"), <, 0);

362 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°r€£cmp
("ABC", "abb"), >, 0);

363 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°r€£cmp
("ABCd", "abc"), >, 0);

365 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Libevent", "LibEvEnT", 100), ==, 0);

366 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Libevent", "LibEvEnT", 4), ==, 0);

367 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Libevent", "LibEXXXX", 4), ==, 0);

368 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Libevent", "LibE", 4), ==, 0);

369 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Libe", "LibEvEnT", 4), ==, 0);

370 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Lib", "LibEvEnT", 4), <, 0);

371 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("abc", "def", 99), <, 0);

372 
	`Й_Ъt_Ё
(
	`evutЮ_ascii_°Ї€£cmp
("Z", "qrst", 1), >, 0);

373 
Тd
:

375 
	}
}

377 
	glog£v
 = 0;

378 *
	glogmsg
 = 
NULL
;

381 
	$logв
(
£vФЩy
, cЏ° *
msg
)

383 
log£v
 = 
£vФЩy
;

384 
	`Й_w™t
(
msg
);

385 iа(
msg
)

386 
logmsg
 = 
	`°rdup
(
msg
);

387 
	}
}

389 
	gexЩed
 = 0;

390 
	gexЩcode
 = 0;

392 
	$зПlв
(
c
)

394 
exЩed
 = 1;

395 
exЩcode
 = 
c
;

396 
	}
}

399 
	$Л°_evutЮ_log
(*
±r
)

401 
evutЮ_sockС_t
 
fd
 = -1;

402 
buf
[128];

404 
	`evТt_£t_log_€ќback
(
logв
);

405 
	`evТt_£t_зПl_€ќback
(
зПlв
);

406 
	#RESET
() do { \

407 
log£v
 = 
exЩed
 = 
exЩcode
 = 0; \

408 iа(
logmsg
и
	`дУ
(logmsg); \

409 
logmsg
 = 
NULL
; \

410 } 0)

	)

411 
	#LOGEQ
(
£v
,
msg
) do { \

412 
	`Й_Ъt_Ё
(
log£v
,==,
£v
); \

413 
	`Й_as£є
(
logmsg
 !р
NULL
); \

414 
	`Й_°r_Ё
(
logmsg
,==,
msg
); \

415 } 0)

	)

417 
	`evТt_Фrx
(2, "FatalГrror;Бoo many kumquats (%d)", 5);

418 
	`LOGEQ
(
_EVENT_LOG_ERR
, "FatalГrror;Бoo many kumquats (5)");

419 
	`Й_Ъt_Ё
(
exЩcode
,==,2);

420 
	`RESET
();

422 
	`evТt_wђnx
("FarБoo many %s (%d)", "wombats", 99);

423 
	`LOGEQ
(
_EVENT_LOG_WARN
, "FarБoo many wombats (99)");

424 
	`Й_Ъt_Ё
(
exЩed
,==,0);

425 
	`RESET
();

427 
	`evТt_msgx
("ConnectingЖimeБo coconut");

428 
	`LOGEQ
(
_EVENT_LOG_MSG
, "ConnectingЖimeБo coconut");

429 
	`Й_Ъt_Ё
(
exЩed
,==,0);

430 
	`RESET
();

432 
	`evТt_debug
(("A millisecondЕassed! We shouldЖogБhat!"));

433 #ifdeа
USE_DEBUG


434 
	`LOGEQ
(
_EVENT_LOG_DEBUG
, "A millisecondЕassed! We shouldЖogБhat!");

436 
	`Й_Ъt_Ё
(
log£v
,==,0);

437 
	`Й_±r_Ё
(
logmsg
,==,
NULL
);

439 
	`RESET
();

442 
ФЇo
 = 
ENOENT
;

443 
	`evТt_wђn
("Couldn't open %s", "/bad/file");

444 
	`evutЮ_ҐіЪtf
(
buf
, (buf),

445 "Couldn'ИЁТ /bad/fЮe: %s",
	`°їЉ№
(
ENOENT
));

446 
	`LOGEQ
(
_EVENT_LOG_WARN
,
buf
);

447 
	`Й_Ъt_Ё
(
exЩed
, ==, 0);

448 
	`RESET
();

450 
ФЇo
 = 
ENOENT
;

451 
	`evТt_Фr
(5,"Couldn't open %s", "/very/bad/file");

452 
	`evutЮ_ҐіЪtf
(
buf
, (buf),

453 "Couldn'ИЁТ /vФy/bad/fЮe: %s",
	`°їЉ№
(
ENOENT
));

454 
	`LOGEQ
(
_EVENT_LOG_ERR
,
buf
);

455 
	`Й_Ъt_Ё
(
exЩcode
, ==, 5);

456 
	`RESET
();

459 
fd
 = 
	`sockС
(
AF_INET
, 
SOCK_STREAM
, 0);

460 #ifdeа
WIN32


461 
	`evutЮ_ҐіЪtf
(
buf
, (buf),

463 
	`evutЮ_sockС_Фr№_to_°rЪg
(
WSAEWOULDBLOCK
));

464 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEWOULDBLOCK
);

466 
	`evutЮ_ҐіЪtf
(
buf
, (buf),

467 "Unh≠py sockС: %s", 
	`°їЉ№
(
EAGAIN
));

468 
ФЇo
 = 
EAGAIN
;

470 
	`evТt_sock_wђn
(
fd
, "Unhappy socket");

471 
	`LOGEQ
(
_EVENT_LOG_WARN
, 
buf
);

472 
	`Й_Ъt_Ё
(
exЩed
,==,0);

473 
	`RESET
();

475 #ifdeа
WIN32


476 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEWOULDBLOCK
);

478 
ФЇo
 = 
EAGAIN
;

480 
	`evТt_sock_Фr
(200, 
fd
, "Unhappy socket");

481 
	`LOGEQ
(
_EVENT_LOG_ERR
, 
buf
);

482 
	`Й_Ъt_Ё
(
exЩcode
,==,200);

483 
	`RESET
();

485 #undeа
RESET


486 #undeа
LOGEQ


487 
Тd
:

488 iа(
logmsg
)

489 
	`дУ
(
logmsg
);

490 iа(
fd
 >= 0)

491 
	`EVUTIL_CLOSESOCKET
(
fd
);

492 
	}
}

495 
	$Л°_evutЮ_°Њэy
(*
ђg
)

497 
buf
[8];

500 
	`Й_Ъt_Ё
(5, ==, 
	`°Њэy
(
buf
, "Hello", (buf)));

501 
	`Й_°r_Ё
(
buf
, ==, "Hello");

504 
	`Й_Ъt_Ё
(13, ==, 
	`°Њэy
(
buf
, "pentasyllabic", (buf)));

505 
	`Й_°r_Ё
(
buf
, ==, "pentasy");

508 
	`Й_Ъt_Ё
(8, ==, 
	`°Њэy
(
buf
, "overlong", (buf)));

509 
	`Й_°r_Ё
(
buf
, ==, "overlon");

510 
Тd
:

512 
	}
}

514 
	sexamґe_°ruщ
 {

515 
	ma
;

516 cЏ° *
	mb
;

517 
	mc
;

521 
	$Л°_evutЮ_up€°
(*
ђg
)

523 
examґe_°ruщ
 
es1
;

524 cЏ° **
э
;

525 
es1
.
a
 = 5;

526 
es1
.
b
 = "Hello";

527 
es1
.
c
 = -99;

529 
	`Й_Ъt_Ё
(
	`evutЮ_off£tof
(
examґe_°ruщ
, 
b
), ==, ());

531 
э
 = &
es1
.
b
;

532 
	`Й_±r_Ё
(
	`EVUTIL_UPCAST
(
э
, 
examґe_°ruщ
, 
b
), ==, &
es1
);

534 
Тd
:

536 
	}
}

539 
	$Л°_evutЮ_ЪЛgФs
(*
ђg
)

541 
ev_Ъt64_t
 
i64
;

542 
ev_uЪt64_t
 
u64
;

543 
ev_Ъt32_t
 
i32
;

544 
ev_uЪt32_t
 
u32
;

545 
ev_Ъt16_t
 
i16
;

546 
ev_uЪt16_t
 
u16
;

547 
ev_Ъt8_t
 
i8
;

548 
ev_uЪt8_t
 
u8
;

550 *
±r
;

551 
ev_ЪНМ_t
 
ЭМ
;

552 
ev_uЪНМ_t
 
u±r
;

554 
ev_ssize_t
 
ssize
;

556 
	`Й_Ъt_Ё
((
u64
), ==, 8);

557 
	`Й_Ъt_Ё
((
i64
), ==, 8);

558 
	`Й_Ъt_Ё
((
u32
), ==, 4);

559 
	`Й_Ъt_Ё
((
i32
), ==, 4);

560 
	`Й_Ъt_Ё
((
u16
), ==, 2);

561 
	`Й_Ъt_Ё
((
i16
), ==, 2);

562 
	`Й_Ъt_Ё
((
u8
), ==, 1);

563 
	`Й_Ъt_Ё
((
i8
), ==, 1);

565 
	`Й_Ъt_Ё
((
ev_ssize_t
), ==, (
size_t
));

566 
	`Й_Ъt_Ё
((
ev_ЪНМ_t
), >=, (*));

567 
	`Й_Ъt_Ё
((
ev_uЪНМ_t
), ==, (
ЪНМ_t
));

569 
u64
 = 1000000000;

570 
u64
 *= 1000000000;

571 
	`Й_as£є
(
u64
 / 1000000000 == 1000000000);

572 
i64
 = -1000000000;

573 
i64
 *= 1000000000;

574 
	`Й_as£є
(
i64
 / 1000000000 == -1000000000);

576 
u64
 = 
EV_UINT64_MAX
;

577 
i64
 = 
EV_INT64_MAX
;

578 
	`Й_as£є
(
u64
 > 0);

579 
	`Й_as£є
(
i64
 > 0);

580 
u64
++;

581 
i64
++;

582 
	`Й_as£є
(
u64
 == 0);

583 
	`Й_as£є
(
i64
 =р
EV_INT64_MIN
);

584 
	`Й_as£є
(
i64
 < 0);

586 
u32
 = 
EV_UINT32_MAX
;

587 
i32
 = 
EV_INT32_MAX
;

588 
	`Й_as£є
(
u32
 > 0);

589 
	`Й_as£є
(
i32
 > 0);

590 
u32
++;

591 
i32
++;

592 
	`Й_as£є
(
u32
 == 0);

593 
	`Й_as£є
(
i32
 =р
EV_INT32_MIN
);

594 
	`Й_as£є
(
i32
 < 0);

596 
u16
 = 
EV_UINT16_MAX
;

597 
i16
 = 
EV_INT16_MAX
;

598 
	`Й_as£є
(
u16
 > 0);

599 
	`Й_as£є
(
i16
 > 0);

600 
u16
++;

601 
i16
++;

602 
	`Й_as£є
(
u16
 == 0);

603 
	`Й_as£є
(
i16
 =р
EV_INT16_MIN
);

604 
	`Й_as£є
(
i16
 < 0);

606 
u8
 = 
EV_UINT8_MAX
;

607 
i8
 = 
EV_INT8_MAX
;

608 
	`Й_as£є
(
u8
 > 0);

609 
	`Й_as£є
(
i8
 > 0);

610 
u8
++;

611 
i8
++;

612 
	`Й_as£є
(
u8
 == 0);

613 
	`Й_as£є
(
i8
 =р
EV_INT8_MIN
);

614 
	`Й_as£є
(
i8
 < 0);

616 
ssize
 = 
EV_SSIZE_MAX
;

617 
	`Й_as£є
(
ssize
 > 0);

618 
ssize
++;

619 
	`Й_as£є
(
ssize
 < 0);

620 
	`Й_as£є
(
ssize
 =р
EV_SSIZE_MIN
);

622 
±r
 = &
ssize
;

623 
ЭМ
 = (
ev_ЪНМ_t
)
±r
;

624 
u±r
 = (
ev_uЪНМ_t
)
±r
;

625 
±r
 = (*)
ЭМ
;

626 
	`Й_as£є
(
±r
 =р&
ssize
);

627 
±r
 = (*)
u±r
;

628 
	`Й_as£є
(
±r
 =р&
ssize
);

630 
ЭМ
 = -1;

631 
	`Й_as£є
(
ЭМ
 < 0);

632 
Тd
:

634 
	}
}

636 
evutЮ_addrЪfo
 *

637 
	$ai_fЪd_by_зmЮy
(
evutЮ_addrЪfo
 *
ai
, 
зmЮy
)

639 
ai
) {

640 iа(
ai
->
ai_зmЮy
 =р
зmЮy
)

641  
ai
;

642 
ai
 =Зi->
ai_√xt
;

644  
NULL
;

645 
	}
}

647 
evutЮ_addrЪfo
 *

648 
	$ai_fЪd_by_іўocё
(
evutЮ_addrЪfo
 *
ai
, 
іўocё
)

650 
ai
) {

651 iа(
ai
->
ai_іўocё
 =р
іўocё
)

652  
ai
;

653 
ai
 =Зi->
ai_√xt
;

655  
NULL
;

656 
	}
}

660 
	$_Л°_ai_eq
(cЏ° 
evutЮ_addrЪfo
 *
ai
, cЏ° *
sockaddr_p№t
,

661 
sockty≥
, 
іўocё
, 
lЪe
)

663 
sockaddr_°№age
 
ss
;

664 
¶Т
 = (
ss
);

665 
gўp№t
;

666 
buf
[128];

667 
	`mem£t
(&
ss
, 0, (ss));

668 iа(
sockty≥
 > 0)

669 
	`Й_Ъt_Ё
(
ai
->
ai_sockty≥
, ==, 
sockty≥
);

670 iа(
іўocё
 > 0)

671 
	`Й_Ъt_Ё
(
ai
->
ai_іўocё
, ==, 
іўocё
);

673 iа(
	`evutЮ_Јr£_sockaddr_p№t
(

674 
sockaddr_p№t
, (
sockaddr
*)&
ss
, &
¶Т
)<0) {

675 
	`TT_FAIL
(("Couldn'tЕarseГxpectedЗddress %s onЖine %d",

676 
sockaddr_p№t
, 
lЪe
));

679 iа(
ai
->
ai_зmЮy
 !р
ss
.
ss_зmЮy
) {

680 
	`TT_FAIL
(("Address family %d didВot match %d onЖine %d",

681 
ai
->
ai_зmЮy
, 
ss
.
ss_зmЮy
, 
lЪe
));

684 iа(
ai
->
ai_addr
->
І_зmЮy
 =р
AF_INET
) {

685 
sockaddr_Ъ
 *
sЪ
 = (sockaddr_Ъ*)
ai
->
ai_addr
;

686 
	`evutЮ_ЪС_ЅЁ
(
AF_INET
, &
sЪ
->
sЪ_addr
, 
buf
, (buf));

687 
gўp№t
 = 
	`Ѕohs
(
sЪ
->
sЪ_p№t
);

688 iа(
ai
->
ai_addЊТ
 !р(
sockaddr_Ъ
)) {

689 
	`TT_FAIL
(("AddЄsizРmism©ch oјlЪР%d", 
lЪe
));

693 
sockaddr_Ъ6
 *
sЪ6
 = (sockaddr_Ъ6*)
ai
->
ai_addr
;

694 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
sЪ6
->
sЪ6_addr
, 
buf
, (buf));

695 
gўp№t
 = 
	`Ѕohs
(
sЪ6
->
sЪ6_p№t
);

696 iа(
ai
->
ai_addЊТ
 !р(
sockaddr_Ъ6
)) {

697 
	`TT_FAIL
(("AddЄsizРmism©ch oјlЪР%d", 
lЪe
));

701 iа(
	`evutЮ_sockaddr_cmp
(
ai
->
ai_addr
, (
sockaddr
*)&
ss
, 1)) {

702 
	`TT_FAIL
(("W™Лd %s, gў %s:%d oјlЪР%d", 
sockaddr_p№t
,

703 
buf
, 
gўp№t
, 
lЪe
));

706 
	`TT_BLATHER
(("W™Лd %s, gў %s:%d oјlЪР%d", 
sockaddr_p№t
,

707 
buf
, 
gўp№t
, 
lЪe
));

710 
Тd
:

711 
	`TT_FAIL
(("Te° faЮed oјlЪР%d", 
lЪe
));

713 
	}
}

716 
	$Л°_evutЮ_њnd
(*
ђg
)

718 
buf1
[32];

719 
buf2
[32];

720 
couЅs
[256];

721 
i
, 
j
, 
k
, 
n
=0;

723 
	`mem£t
(
buf2
, 0, (buf2));

724 
	`mem£t
(
couЅs
, 0, (counts));

726 
k
=0;k<32;++k) {

729 
°ђНoЪt
 = 
	`_evutЮ_wЧkњnd
() % 4;

730 
ТdpoЪt
 = 32 - (
	`_evutЮ_wЧkњnd
() % 4);

732 
	`mem£t
(
buf2
, 0, (buf2));

737 
i
=0;i<8;++i) {

738 
	`mem£t
(
buf1
, 0, (buf1));

739 
	`evutЮ_£cuї_Їg_gС_byЛs
(
buf1
 + 
°ђНoЪt
,

740 
ТdpoЪt
-
°ђНoЪt
);

741 
n
 +р
ТdpoЪt
 - 
°ђНoЪt
;

742 
j
=0; j<32; ++j) {

743 iа(
j
 >р
°ђНoЪt
 && j < 
ТdpoЪt
) {

744 
buf2
[
j
] |р
buf1
[j];

745 ++
couЅs
[()
buf1
[
j
]];

747 
	`as£є
(
buf1
[
j
] == 0);

748 
	`Й_Ъt_Ё
(
buf1
[
j
], ==, 0);

756 
j
=
°ђНoЪt
;j<
ТdpoЪt
;++j) {

757 
	`Й_Ъt_Ё
(
buf2
[
j
], !=, 0);

762 
Тd
:

764 
	}
}

767 
	$Л°_evutЮ_gСaddrЪfo
(*
ђg
)

769 
evutЮ_addrЪfo
 *
ai
 = 
NULL
, *
a
;

770 
evutЮ_addrЪfo
 
hЪts
;

772 
sockaddr_Ъ6
 *
sЪ6
;

773 
sockaddr_Ъ
 *
sЪ
;

774 
buf
[128];

775 cЏ° *
э
;

776 
r
;

779 
	`mem£t
(&
hЪts
, 0, (hints));

780 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

781 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

782 
r
 = 
	`evutЮ_gСaddrЪfo
("1.2.3.4", "8080", &
hЪts
, &
ai
);

783 
	`Й_Ъt_Ё
(
r
, ==, 0);

784 
	`Й_as£є
(
ai
);

785 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

786 
	`Л°_ai_eq
(
ai
, "1.2.3.4:8080", 
SOCK_STREAM
, 
IPPROTO_TCP
);

787 
	`evutЮ_дУaddrЪfo
(
ai
);

788 
ai
 = 
NULL
;

790 
	`mem£t
(&
hЪts
, 0, (hints));

791 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

792 
hЪts
.
ai_іўocё
 = 
IPPROTO_UDP
;

793 
r
 = 
	`evutЮ_gСaddrЪfo
("1001:b0b::f00f", "4321", &
hЪts
, &
ai
);

794 
	`Й_Ъt_Ё
(
r
, ==, 0);

795 
	`Й_as£є
(
ai
);

796 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

797 
	`Л°_ai_eq
(
ai
, "[1001:b0b::f00f]:4321", 
SOCK_DGRAM
, 
IPPROTO_UDP
);

798 
	`evutЮ_дУaddrЪfo
(
ai
);

799 
ai
 = 
NULL
;

802 
	`mem£t
(&
hЪts
, 0, (hints));

803 
hЪts
.
ai_зmЮy
 = 
PF_INET
;

804 
hЪts
.
ai_іўocё
 = 
IPPROTO_TCP
;

805 
hЪts
.
ai_жags
 = 
EVUTIL_AI_PASSIVE
;

806 
r
 = 
	`evutЮ_gСaddrЪfo
(
NULL
, "9999", &
hЪts
, &
ai
);

807 
	`Й_Ъt_Ё
(
r
,==,0);

808 
	`Й_as£є
(
ai
);

809 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

810 
	`Л°_ai_eq
(
ai
, "0.0.0.0:9999", 
SOCK_STREAM
, 
IPPROTO_TCP
);

811 
	`evutЮ_дУaddrЪfo
(
ai
);

812 
ai
 = 
NULL
;

813 
hЪts
.
ai_жags
 = 0;

814 
r
 = 
	`evutЮ_gСaddrЪfo
(
NULL
, "9998", &
hЪts
, &
ai
);

815 
	`Й_as£є
(
ai
);

816 
	`Й_Ъt_Ё
(
r
,==,0);

817 
	`Л°_ai_eq
(
ai
, "127.0.0.1:9998", 
SOCK_STREAM
, 
IPPROTO_TCP
);

818 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

819 
	`evutЮ_дУaddrЪfo
(
ai
);

820 
ai
 = 
NULL
;

822 
hЪts
.
ai_жags
 = 0;

823 
hЪts
.
ai_зmЮy
 = 
PF_INET6
;

824 
r
 = 
	`evutЮ_gСaddrЪfo
(
NULL
, "9997", &
hЪts
, &
ai
);

825 
	`Й_as£є
(
ai
);

826 
	`Й_Ъt_Ё
(
r
,==,0);

827 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

828 
	`Л°_ai_eq
(
ai
, "[::1]:9997", 
SOCK_STREAM
, 
IPPROTO_TCP
);

829 
	`evutЮ_дУaddrЪfo
(
ai
);

830 
ai
 = 
NULL
;

832 
hЪts
.
ai_жags
 = 
EVUTIL_AI_PASSIVE
;

833 
hЪts
.
ai_зmЮy
 = 
PF_INET6
;

834 
r
 = 
	`evutЮ_gСaddrЪfo
(
NULL
, "9996", &
hЪts
, &
ai
);

835 
	`Й_as£є
(
ai
);

836 
	`Й_Ъt_Ё
(
r
,==,0);

837 
	`Й_±r_Ё
(
ai
->
ai_√xt
, ==, 
NULL
);

838 
	`Л°_ai_eq
(
ai
, "[::]:9996", 
SOCK_STREAM
, 
IPPROTO_TCP
);

839 
	`evutЮ_дУaddrЪfo
(
ai
);

840 
ai
 = 
NULL
;

843 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

844 
r
 = 
	`evutЮ_gСaddrЪfo
(
NULL
, "9996", &
hЪts
, &
ai
);

845 
	`Й_as£є
(
ai
);

846 
	`Й_Ъt_Ё
(
r
,==,0);

847 
a
 = 
	`ai_fЪd_by_зmЮy
(
ai
, 
PF_INET6
);

848 
	`Й_as£є
(
a
);

849 
	`Л°_ai_eq
(
a
, "[::]:9996", 
SOCK_STREAM
, 
IPPROTO_TCP
);

850 
a
 = 
	`ai_fЪd_by_зmЮy
(
ai
, 
PF_INET
);

851 
	`Й_as£є
(
a
);

852 
	`Л°_ai_eq
(
a
, "0.0.0.0:9996", 
SOCK_STREAM
, 
IPPROTO_TCP
);

853 
	`evutЮ_дУaddrЪfo
(
ai
);

854 
ai
 = 
NULL
;

858 
	`mem£t
(&
hЪts
, 0, (hints));

859 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

860 
hЪts
.
ai_жags
 = 
EVUTIL_AI_NUMERICHOST
;

861 
r
 = 
	`evutЮ_gСaddrЪfo
("1.2.3.4", 
NULL
, &
hЪts
, &
ai
);

862 
	`Й_Ъt_Ё
(
r
, ==, 0);

863 
a
 = 
	`ai_fЪd_by_іўocё
(
ai
, 
IPPROTO_TCP
);

864 
	`Й_as£є
(
a
);

865 
	`Л°_ai_eq
(
a
, "1.2.3.4", 
SOCK_STREAM
, 
IPPROTO_TCP
);

866 
a
 = 
	`ai_fЪd_by_іўocё
(
ai
, 
IPPROTO_UDP
);

867 
	`Й_as£є
(
a
);

868 
	`Л°_ai_eq
(
a
, "1.2.3.4", 
SOCK_DGRAM
, 
IPPROTO_UDP
);

869 
	`evutЮ_дУaddrЪfo
(
ai
);

870 
ai
 = 
NULL
;

873 
	`mem£t
(&
hЪts
, 0, (hints));

874 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

875 
hЪts
.
ai_жags
 = 
EVUTIL_AI_NUMERICHOST
;

876 
r
 = 
	`evutЮ_gСaddrЪfo
("www.googЋ.com", "80", &
hЪts
, &
ai
);

877 
	`Й_Ъt_Ё
(
r
, ==, 
EVUTIL_EAI_NONAME
);

878 
	`Й_Ъt_Ё
(
ai
, ==, 
NULL
);

881 
	`mem£t
(&
hЪts
, 0, (hints));

882 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

883 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

884 
hЪts
.
ai_жags
 = 
EVUTIL_AI_NUMERICSERV
;

885 
r
 = 
	`evutЮ_gСaddrЪfo
("1.2.3.4", "hЙp", &
hЪts
, &
ai
);

886 
	`Й_Ъt_Ё
(
r
,==,
EVUTIL_EAI_NONAME
);

889 
	`mem£t
(&
hЪts
, 0, (hints));

890 
hЪts
.
ai_зmЮy
 = 
PF_UNSPEC
;

891 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

892 
r
 = 
	`evutЮ_gСaddrЪfo
("1.2.3.4", "hЙp", &
hЪts
, &
ai
);

893 iа(
r
!=0) {

894 
	`TT_GRIPE
(("Symbolic serviceВames seem broken."));

896 
	`Й_as£є
(
ai
);

897 
	`Л°_ai_eq
(
ai
, "1.2.3.4:80", 
SOCK_STREAM
, 
IPPROTO_TCP
);

898 
	`evutЮ_дУaddrЪfo
(
ai
);

899 
ai
 = 
NULL
;

903 
	`mem£t
(&
hЪts
, 0, (hints));

904 
hЪts
.
ai_зmЮy
 = 
PF_INET
;

905 
hЪts
.
ai_іўocё
 = 
IPPROTO_TCP
;

906 
hЪts
.
ai_sockty≥
 = 
SOCK_STREAM
;

907 
r
 = 
	`evutЮ_gСaddrЪfo
("www.googЋ.com", "80", &
hЪts
, &
ai
);

908 iа(
r
 != 0) {

909 
	`TT_GRIPE
(("Couldn'tДesolve www.google.com"));

911 
	`Й_as£є
(
ai
);

912 
	`Й_Ъt_Ё
(
ai
->
ai_зmЮy
, ==, 
PF_INET
);

913 
	`Й_Ъt_Ё
(
ai
->
ai_іўocё
, ==, 
IPPROTO_TCP
);

914 
	`Й_Ъt_Ё
(
ai
->
ai_sockty≥
, ==, 
SOCK_STREAM
);

915 
	`Й_Ъt_Ё
(
ai
->
ai_addЊТ
, ==, (
sockaddr_Ъ
));

916 
sЪ
 = (
sockaddr_Ъ
*)
ai
->
ai_addr
;

917 
	`Й_Ъt_Ё
(
sЪ
->
sЪ_зmЮy
, ==, 
AF_INET
);

918 
	`Й_Ъt_Ё
(
sЪ
->
sЪ_p№t
, ==, 
	`htЏs
(80));

919 
	`Й_Ъt_Ё
(
sЪ
->
sЪ_addr
.
s_addr
, !=, 0xffffffff);

921 
э
 = 
	`evutЮ_ЪС_ЅЁ
(
AF_INET
, &
sЪ
->
sЪ_addr
, 
buf
, (buf));

922 
	`TT_BLATHER
(("www.google.comДesolvedБo %s",

923 
э
?cp:"<unwriteable>"));

924 
	`evutЮ_дУaddrЪfo
(
ai
);

925 
ai
 = 
NULL
;

928 
hЪts
.
ai_зmЮy
 = 
PF_INET6
;

929 
r
 = 
	`evutЮ_gСaddrЪfo
("Эv6.googЋ.com", "80", &
hЪts
, &
ai
);

930 iа(
r
 != 0) {

931 
	`TT_BLATHER
(("Couldn't doЗn ipv6Жookup for ipv6.google.com"));

933 
	`Й_as£є
(
ai
);

934 
	`Й_Ъt_Ё
(
ai
->
ai_зmЮy
, ==, 
PF_INET6
);

935 
	`Й_Ъt_Ё
(
ai
->
ai_addЊТ
, ==, (
sockaddr_Ъ6
));

936 
sЪ6
 = (
sockaddr_Ъ6
*)
ai
->
ai_addr
;

937 
	`Й_Ъt_Ё
(
sЪ6
->
sЪ6_p№t
, ==, 
	`htЏs
(80));

939 
э
 = 
	`evutЮ_ЪС_ЅЁ
(
AF_INET6
, &
sЪ6
->
sЪ6_addr
, 
buf
,

940 (
buf
));

941 
	`TT_BLATHER
(("ipv6.google.comДesolvedБo %s",

942 
э
?cp:"<unwriteable>"));

945 
Тd
:

946 iа(
ai
)

947 
	`evutЮ_дУaddrЪfo
(
ai
);

948 
	}
}

950 
Л°€£_t
 
	gutЮ_Л°€£s
[] = {

951 { "Эv4_Јr£", 
їgїss_Эv4_Јr£
, 0, 
NULL
, NULL },

952 { "Эv6_Јr£", 
їgїss_Эv6_Јr£
, 0, 
NULL
, NULL },

953 { "sockaddr_p№t_Јr£", 
їgїss_sockaddr_p№t_Јr£
, 0, 
NULL
, NULL },

954 { "sockaddr_іedi€Лs", 
Л°_evutЮ_sockaddr_іedi€Лs
, 0,
NULL
,NULL },

955 { "evutЮ_ҐіЪtf", 
Л°_evutЮ_ҐіЪtf
, 0, 
NULL
, NULL },

956 { "evutЮ_°єёl", 
Л°_evutЮ_°єёl
, 0, 
NULL
, NULL },

957 { "evutЮ_€£cmp", 
Л°_evutЮ_€£cmp
, 0, 
NULL
, NULL },

958 { "°Њэy", 
Л°_evutЮ_°Њэy
, 0, 
NULL
, NULL },

959 { "log", 
Л°_evutЮ_log
, 
TT_FORK
, 
NULL
, NULL },

960 { "up€°", 
Л°_evutЮ_up€°
, 0, 
NULL
, NULL },

961 { "ЪЛgФs", 
Л°_evutЮ_ЪЛgФs
, 0, 
NULL
, NULL },

962 { "њnd", 
Л°_evutЮ_њnd
, 
TT_FORK
, 
NULL
, NULL },

963 { "gСaddrЪfo", 
Л°_evutЮ_gСaddrЪfo
, 
TT_FORK
, 
NULL
, NULL },

964 
END_OF_TESTCASES
,

	@test/regress_zlib.c

27 #ifdeа
WIN32


28 
	~<wЪsock2.h
>

29 
	~<wЪdows.h
>

32 
	~"evТt-cЏfig.h
"

34 
	~<sys/ty≥s.h
>

35 #iвdeа
WIN32


36 
	~<sys/sockС.h
>

37 
	~<sys/waЩ.h
>

38 
	~<uni°d.h
>

39 
	~<√tdb.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rЪg.h
>

46 
	~<zlib.h
>

47 
	~<as£є.h
>

48 
	~<ФЇo.h
>

50 
	~"evТt2/utЮ.h
"

51 
	~"evТt2/evТt.h
"

52 
	~"evТt2/evТt_comЈt.h
"

53 
	~"evТt2/bufгr.h
"

54 
	~"evТt2/bufгїvТt.h
"

56 
	~"їgїss.h
"

58 
	gЪfЮЛr_€ќs
;

59 
	goutfЮЛr_€ќs
;

60 
	gїadcb_fЪished
;

61 
	gwrЩecb_fЪished
;

62 
	gФr№cb_Ъvoked
;

69 
	$zlib_deж©e_дУ
(*
щx
)

71 
z_°їamp
 
p
 = 
щx
;

73 
	`as£є
(
	`deж©eEnd
(
p
и=р
Z_OK
);

74 
	}
}

77 
	$zlib_Ъж©e_дУ
(*
щx
)

79 
z_°їamp
 
p
 = 
щx
;

81 
	`as£є
(
	`Ъж©eEnd
(
p
и=р
Z_OK
);

82 
	}
}

85 
	$gС°©e
(
bufгїvТt_жush_mode
 
°©e
)

87 
°©e
) {

88 
BEV_FINISHED
:

89  
Z_FINISH
;

90 
BEV_FLUSH
:

91  
Z_SYNC_FLUSH
;

92 
BEV_NORMAL
:

94  
Z_NO_FLUSH
;

96 
	}
}

103 
bufгїvТt_fЮЛr_їsu…


104 
	$zlib_Ъput_fЮЛr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

105 
ev_ssize_t
 
lim
, 
bufгїvТt_жush_mode
 
°©e
, *
щx
)

107 
evbufгr_iovec
 
v_Ъ
[1];

108 
evbufгr_iovec
 
v_out
[1];

109 
ƒЧd
, 
nwrЩe
;

110 
їs
, 
n
;

112 
z_°їamp
 
p
 = 
щx
;

116 
n
 = 
	`evbufгr_≥ek
(
§c
, -1, 
NULL
, 
v_Ъ
, 1);

117 iа(
n
) {

118 
p
->
avaЮ_Ъ
 = 
v_Ъ
[0].
iov_Ћn
;

119 
p
->
√xt_Ъ
 = 
v_Ъ
[0].
iov_ba£
;

121 
p
->
avaЮ_Ъ
 = 0;

122 
p
->
√xt_Ъ
 = 0;

125 
	`evbufгr_ї£rve_•aы
(
d°
, 4096, 
v_out
, 1);

126 
p
->
√xt_out
 = 
v_out
[0].
iov_ba£
;

127 
p
->
avaЮ_out
 = 
v_out
[0].
iov_Ћn
;

130 
їs
 = 
	`Ъж©e
(
p
, 
	`gС°©e
(
°©e
));

133 
ƒЧd
 = 
v_Ъ
[0].
iov_Ћn
 - 
p
->
avaЮ_Ъ
;

134 
nwrЩe
 = 
v_out
[0].
iov_Ћn
 - 
p
->
avaЮ_out
;

136 
	`evbufгr_dњЪ
(
§c
, 
ƒЧd
);

137 
v_out
[0].
iov_Ћn
 = 
nwrЩe
;

138 
	`evbufгr_commЩ_•aы
(
d°
, 
v_out
, 1);

140 iа(
їs
==
Z_BUF_ERROR
) {

144 iа(
nwrЩe
 == 0)

145  
BEV_NEED_MORE
;

147 
	`as£є
(
їs
 =р
Z_OK
 ||Дe†=р
Z_STREAM_END
);

150 } 
	`evbufгr_gС_Ћngth
(
§c
) > 0);

152 ++
ЪfЮЛr_€ќs
;

154  (
BEV_OK
);

155 
	}
}

157 
bufгїvТt_fЮЛr_їsu…


158 
	$zlib_ouНut_fЮЛr
(
evbufгr
 *
§c
, evbufгЄ*
d°
,

159 
ev_ssize_t
 
lim
, 
bufгїvТt_жush_mode
 
°©e
, *
щx
)

161 
evbufгr_iovec
 
v_Ъ
[1];

162 
evbufгr_iovec
 
v_out
[1];

163 
ƒЧd
, 
nwrЩe
;

164 
їs
, 
n
;

166 
z_°їamp
 
p
 = 
щx
;

170 
n
 = 
	`evbufгr_≥ek
(
§c
, -1, 
NULL
, 
v_Ъ
, 1);

171 iа(
n
) {

172 
p
->
avaЮ_Ъ
 = 
v_Ъ
[0].
iov_Ћn
;

173 
p
->
√xt_Ъ
 = 
v_Ъ
[0].
iov_ba£
;

175 
p
->
avaЮ_Ъ
 = 0;

176 
p
->
√xt_Ъ
 = 0;

179 
	`evbufгr_ї£rve_•aы
(
d°
, 4096, 
v_out
, 1);

180 
p
->
√xt_out
 = 
v_out
[0].
iov_ba£
;

181 
p
->
avaЮ_out
 = 
v_out
[0].
iov_Ћn
;

184 
їs
 = 
	`deж©e
(
p
, 
	`gС°©e
(
°©e
));

187 
ƒЧd
 = 
v_Ъ
[0].
iov_Ћn
 - 
p
->
avaЮ_Ъ
;

188 
nwrЩe
 = 
v_out
[0].
iov_Ћn
 - 
p
->
avaЮ_out
;

190 
	`evbufгr_dњЪ
(
§c
, 
ƒЧd
);

191 
v_out
[0].
iov_Ћn
 = 
nwrЩe
;

192 
	`evbufгr_commЩ_•aы
(
d°
, 
v_out
, 1);

194 iа(
їs
==
Z_BUF_ERROR
) {

198 iа(
nwrЩe
 == 0)

199  
BEV_NEED_MORE
;

201 
	`as£є
(
їs
 =р
Z_OK
 ||Дe†=р
Z_STREAM_END
);

204 } 
	`evbufгr_gС_Ћngth
(
§c
) > 0);

206 ++
outfЮЛr_€ќs
;

208  (
BEV_OK
);

209 
	}
}

216 
	$їadcb
(
bufгїvТt
 *
bev
, *
ђg
)

218 iа(
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_Ъput
(
bev
)) == 8333) {

219 
evbufгr
 *
evbuf
 = 
	`evbufгr_√w
();

220 
	`as£є
(
evbuf
 !р
NULL
);

223 
	`bufгїvТt_їad_bufгr
(
bev
, 
evbuf
);

225 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

227 iа(
	`evbufгr_gС_Ћngth
(
evbuf
) == 8333) {

228 ++
їadcb_fЪished
;

231 
	`evbufгr_дУ
(
evbuf
);

233 
	}
}

236 
	$wrЩecb
(
bufгїvТt
 *
bev
, *
ђg
)

238 iа(
	`evbufгr_gС_Ћngth
(
	`bufгїvТt_gС_ouНut
(
bev
)) == 0) {

239 ++
wrЩecb_fЪished
;

241 
	}
}

244 
	$Фr№cb
(
bufгїvТt
 *
bev
, 
wh©
, *
ђg
)

246 
Фr№cb_Ъvoked
 = 1;

247 
	}
}

250 
	$Л°_bufгїvТt_zlib
(*
ђg
)

252 
bufгїvТt
 *
bev1
=
NULL
, *
bev2
=NULL, *
bev1_№ig
, *
bev2_№ig
;

253 
bufгr
[8333];

254 
z_°їam
 
z_Ъput
, 
z_ouНut
;

255 
i
, 
ЈЬ
[2]={-1,-1}, 
r
;

256 ()
ђg
;

258 
ЪfЮЛr_€ќs
 = 
outfЮЛr_€ќs
 = 
їadcb_fЪished
 = 
wrЩecb_fЪished


259 р
Фr№cb_Ъvoked
 = 0;

261 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1) {

262 
	`Й_ab№t_≥Љ№
("socketpair");

265 
	`evutЮ_make_sockС_nЏblockЪg
(
ЈЬ
[0]);

266 
	`evutЮ_make_sockС_nЏblockЪg
(
ЈЬ
[1]);

268 
bev1_№ig
 = 
bev1
 = 
	`bufгїvТt_sockС_√w
(
NULL
, 
ЈЬ
[0], 0);

269 
bev2_№ig
 = 
bev2
 = 
	`bufгїvТt_sockС_√w
(
NULL
, 
ЈЬ
[1], 0);

271 
	`mem£t
(&
z_ouНut
, 0, (z_output));

272 
r
 = 
	`deж©eInЩ
(&
z_ouНut
, 
Z_DEFAULT_COMPRESSION
);

273 
	`Й_Ъt_Ё
(
r
, ==, 
Z_OK
);

274 
	`mem£t
(&
z_Ъput
, 0, (z_input));

275 
r
 = 
	`Ъж©eInЩ
(&
z_Ъput
);

278 
bev1
 = 
	`bufгїvТt_fЮЛr_√w
(bev1, 
NULL
, 
zlib_ouНut_fЮЛr
, 0,

279 
zlib_deж©e_дУ
, &
z_ouНut
);

280 
bev2
 = 
	`bufгїvТt_fЮЛr_√w
(bev2, 
zlib_Ъput_fЮЛr
,

281 
NULL
, 0, 
zlib_Ъж©e_дУ
, &
z_Ъput
);

282 
	`bufгїvТt_£tcb
(
bev1
, 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

283 
	`bufгїvТt_£tcb
(
bev2
, 
їadcb
, 
wrЩecb
, 
Фr№cb
, 
NULL
);

285 
	`bufгїvТt_diІbЋ
(
bev1
, 
EV_READ
);

286 
	`bufгїvТt_ТabЋ
(
bev1
, 
EV_WRITE
);

288 
	`bufгїvТt_ТabЋ
(
bev2
, 
EV_READ
);

290 
i
 = 0; i < (
bufгr
); i++)

291 
bufгr
[
i
] = i;

294 
	`bufгїvТt_wrЩe
(
bev1
, 
bufгr
, 1800);

295 
	`bufгїvТt_wrЩe
(
bev1
, 
bufгr
 + 1800, (buffer) - 1800);

298 
	`bufгїvТt_жush
(
bev1
, 
EV_WRITE
, 
BEV_FINISHED
);

300 
	`evТt_di•©ch
();

302 
	`Й_w™t
(
ЪfЮЛr_€ќs
);

303 
	`Й_w™t
(
outfЮЛr_€ќs
);

304 
	`Й_w™t
(
їadcb_fЪished
);

305 
	`Й_w™t
(
wrЩecb_fЪished
);

306 
	`Й_w™t
(!
Фr№cb_Ъvoked
);

308 
Л°_ok
 = 1;

309 
Тd
:

310 iа(
bev1
)

311 
	`bufгїvТt_дУ
(
bev1
);

312 iа(
bev2
)

313 
	`bufгїvТt_дУ
(
bev2
);

315 iа(
ЈЬ
[0] >= 0)

316 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[0]);

317 iа(
ЈЬ
[1] >= 0)

318 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[1]);

319 
	}
}

	@test/test-eof.c

5 
	~"evТt-cЏfig.h
"

7 #ifdeа
WIN32


8 
	~<wЪsock2.h
>

10 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 #ifdeа
_EVENT_HAVE_SYS_TIME_H


15 
	~<sys/time.h
>

17 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


18 
	~<sys/sockС.h
>

20 
	~<fъО.h
>

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~<°rЪg.h
>

24 
	~<ФЇo.h
>

26 
	~<evТt.h
>

27 
	~<evutЮ.h
>

29 #ifdeа
_EVENT___func__


30 
	#__func__
 
_EVENT___func__


	)

33 
	gЛ°_okay
 = 1;

34 
	g€ќed
 = 0;

37 
	$їad_cb
(
fd
, 
evТt
, *
ђg
)

39 
buf
[256];

40 
Ћn
;

42 
Ћn
 = 
	`їcv
(
fd
, 
buf
, (buf), 0);

44 
	`іЪtf
("%s:ДЧd %d%s\n", 
__func__
,

45 
Ћn
,Жen ? "" : " - means EOF");

47 iа(
Ћn
) {

48 iа(!
€ќed
)

49 
	`evТt_add
(
ђg
, 
NULL
);

50 } iа(
€ќed
 == 1)

51 
Л°_okay
 = 0;

53 
€ќed
++;

54 
	}
}

56 #iвdeа
SHUT_WR


57 
	#SHUT_WR
 1

	)

61 
	$maЪ
(
ђgc
, **
ђgv
)

63 
evТt
 
ev
;

64 cЏ° *
Л°
 = "test string";

65 
ЈЬ
[2];

67 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1)

71 
	`£nd
(
ЈЬ
[0], 
Л°
, 
	`°ЊТ
(test)+1, 0);

72 
	`shutdown
(
ЈЬ
[0], 
SHUT_WR
);

75 
	`evТt_ЪЩ
();

78 
	`evТt_£t
(&
ev
, 
ЈЬ
[1], 
EV_READ
, 
їad_cb
, &ev);

80 
	`evТt_add
(&
ev
, 
NULL
);

82 
	`evТt_di•©ch
();

84  (
Л°_okay
);

85 
	}
}

	@test/test-init.c

5 
	~"evТt-cЏfig.h
"

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 #ifdeа
_EVENT_HAVE_SYS_TIME_H


10 
	~<sys/time.h
>

12 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


13 
	~<sys/sockС.h
>

15 
	~<fъО.h
>

16 
	~<°dlib.h
>

17 
	~<°dio.h
>

18 
	~<°rЪg.h
>

19 #iвdeа
WIN32


20 
	~<uni°d.h
>

22 
	~<ФЇo.h
>

24 
	~<evТt.h
>

27 
	$maЪ
(
ђgc
, **
ђgv
)

30 
	`evТt_ЪЩ
();

33 
	}
}

	@test/test-ratelim.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rЪg.h
>

30 
	~<as£є.h
>

31 
	~<m©h.h
>

33 #ifdeа
WIN32


34 
	~<wЪsock2.h
>

35 
	~<ws2tэЭ.h
>

37 
	~<sys/sockС.h
>

38 
	~<√tЪС/Ъ.h
>

41 
	~<evТt2/bufгїvТt.h
>

42 
	~<evТt2/bufгr.h
>

43 
	~<evТt2/evТt.h
>

44 
	~<evТt2/utЮ.h
>

45 
	~<evТt2/li°ТФ.h
>

46 
	~<evТt2/thїad.h
>

48 
	gcfg_vФbo£
 = 0;

49 
	gcfg_hЦp
 = 0;

51 
	gcfg_n_cЏ√щiЏs
 = 30;

52 
	gcfg_duњtiЏ
 = 5;

53 
	gcfg_cЏ∆imЩ
 = 0;

54 
	gcfg_grouґimЩ
 = 0;

55 
	gcfg_tick_m£c
 = 1000;

57 
timevЃ
 
	gcfg_tick
 = { 0, 500*1000 };

59 
ev_tokТ_buckС_cfg
 *
	gcЏn_buckС_cfg
 = 
NULL
;

60 
ev_tokТ_buckС_cfg
 *
	ggroup_buckС_cfg
 = 
NULL
;

61 
bufгїvТt_њЛ_limЩ_group
 *
	gњЛlim_group
 = 
NULL
;

63 
	sюЫЅ_°©e
 {

64 
size_t
 
	mqueued
;

65 
ev_uЪt64_t
 
	mїыived
;

69 
	$loud_wrЩecb
(
bufгїvТt
 *
bev
, *
щx
)

71 
юЫЅ_°©e
 *
cs
 = 
щx
;

72 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
bev
);

73 
buf
[1024];

74 #ifdeа
WIN32


75 
r
 = 
	`њnd
() % 256;

77 
r
 = 
	`њndom
() % 256;

79 
	`mem£t
(
buf
, 
r
, (buf));

80 
	`evbufгr_gС_Ћngth
(
ouНut
) < 8192) {

81 
	`evbufгr_add
(
ouНut
, 
buf
, (buf));

82 
cs
->
queued
 +р(
buf
);

84 
	}
}

87 
	$dis€rd_їadcb
(
bufгїvТt
 *
bev
, *
щx
)

89 
юЫЅ_°©e
 *
cs
 = 
щx
;

90 
evbufгr
 *
Ъput
 = 
	`bufгїvТt_gС_Ъput
(
bev
);

91 
size_t
 
Ћn
 = 
	`evbufгr_gС_Ћngth
(
Ъput
);

92 
	`evbufгr_dњЪ
(
Ъput
, 
Ћn
);

93 
cs
->
їыived
 +р
Ћn
;

94 
	}
}

97 
	$wrЩe_Џ_cЏ√щedcb
(
bufгїvТt
 *
bev
, 
wh©
, *
щx
)

99 iа(
wh©
 & 
BEV_EVENT_CONNECTED
) {

100 
	`loud_wrЩecb
(
bev
, 
щx
);

102 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
|
EV_WRITE
);

104 
	}
}

107 
	$echo_їadcb
(
bufгїvТt
 *
bev
, *
щx
)

109 
evbufгr
 *
Ъput
 = 
	`bufгїvТt_gС_Ъput
(
bev
);

110 
evbufгr
 *
ouНut
 = 
	`bufгїvТt_gС_ouНut
(
bev
);

112 
	`evbufгr_add_bufгr
(
ouНut
, 
Ъput
);

113 iа(
	`evbufгr_gС_Ћngth
(
ouНut
) > 1024000)

114 
	`bufгїvТt_diІbЋ
(
bev
, 
EV_READ
);

115 
	}
}

118 
	$echo_li°ТФcb
(
evcЏ∆i°ТФ
 *
li°ТФ
, 
evutЮ_sockС_t
 
√wsock
,

119 
sockaddr
 *
sourыaddr
, 
sockЋn
, *
щx
)

121 
evТt_ba£
 *
ba£
 = 
щx
;

122 
жags
 = 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_THREADSAFE
;

123 
bufгїvТt
 *
bev
;

125 
bev
 = 
	`bufгїvТt_sockС_√w
(
ba£
, 
√wsock
, 
жags
);

126 
	`bufгїvТt_£tcb
(
bev
, 
echo_їadcb
, 
NULL
, NULL, NULL);

127 iа(
cЏn_buckС_cfg
)

128 
	`bufгїvТt_£t_њЛ_limЩ
(
bev
, 
cЏn_buckС_cfg
);

129 iа(
њЛlim_group
)

130 
	`bufгїvТt_add_to_њЛ_limЩ_group
(
bev
, 
њЛlim_group
);

131 
	`bufгїvТt_ТabЋ
(
bev
, 
EV_READ
|
EV_WRITE
);

132 
	}
}

135 
	$Л°_њЛlimЩЪg
()

137 
evТt_ba£
 *
ba£
;

138 
sockaddr_Ъ
 
sЪ
;

139 
evcЏ∆i°ТФ
 *
li°ТФ
;

141 
sockaddr_°№age
 
ss
;

142 
ev_sockЋn_t
 
¶Т
;

144 
bufгїvТt
 **
bevs
;

145 
юЫЅ_°©e
 *
°©es
;

147 
i
;

149 
timevЃ
 
tv
;

151 
ev_uЪt64_t
 
tўЃ_їыived
;

152 
tўЃ_sq_≥r£c
, 
tўЃ_≥r£c
;

153 
vђЯnы
;

155 
	`mem£t
(&
sЪ
, 0, (sin));

156 
sЪ
.
sЪ_зmЮy
 = 
AF_INET
;

157 
sЪ
.
sЪ_addr
.
s_addr
 = 
	`htЏl
(0x7f000001);

158 
sЪ
.
sЪ_p№t
 = 0;

160 
ba£
 = 
	`evТt_ba£_√w
();

161 
li°ТФ
 = 
	`evcЏ∆i°ТФ_√w_bЪd
(
ba£
, 
echo_li°ТФcb
, base,

162 
LEV_OPT_CLOSE_ON_FREE
|
LEV_OPT_REUSEABLE
, -1,

163 (
sockaddr
 *)&
sЪ
, (sin));

165 
¶Т
 = (
ss
);

166 iа(
	`gСsock«me
(
	`evcЏ∆i°ТФ_gС_fd
(
li°ТФ
), (
sockaddr
 *)&
ss
,

167 &
¶Т
) < 0) {

168 
	`≥Љ№
("getsockname");

172 iа(
cfg_cЏ∆imЩ
 > 0) {

173 
cЏn_buckС_cfg
 = 
	`ev_tokТ_buckС_cfg_√w
(

174 
cfg_cЏ∆imЩ
, cfg_connlimit * 4,

175 
cfg_cЏ∆imЩ
, cfg_connlimit * 4,

176 &
cfg_tick
);

177 
	`as£є
(
cЏn_buckС_cfg
);

180 iа(
cfg_grouґimЩ
 > 0) {

181 
group_buckС_cfg
 = 
	`ev_tokТ_buckС_cfg_√w
(

182 
cfg_grouґimЩ
, cfg_grouplimit * 4,

183 
cfg_grouґimЩ
, cfg_grouplimit * 4,

184 &
cfg_tick
);

185 
њЛlim_group
 = 
	`bufгїvТt_њЛ_limЩ_group_√w
(

186 
ba£
, 
group_buckС_cfg
);

189 
bevs
 = 
	`€ќoc
(
cfg_n_cЏ√щiЏs
, (
bufгїvТt
 *));

190 
°©es
 = 
	`€ќoc
(
cfg_n_cЏ√щiЏs
, (
юЫЅ_°©e
));

192 
i
 = 0; i < 
cfg_n_cЏ√щiЏs
; ++i) {

193 
bevs
[
i
] = 
	`bufгїvТt_sockС_√w
(
ba£
, -1,

194 
BEV_OPT_CLOSE_ON_FREE
|
BEV_OPT_THREADSAFE
);

195 
	`as£є
(
bevs
[
i
]);

196 
	`bufгїvТt_£tcb
(
bevs
[
i
], 
dis€rd_їadcb
, 
loud_wrЩecb
,

197 
wrЩe_Џ_cЏ√щedcb
, &
°©es
[
i
]);

198 
	`bufгїvТt_ТabЋ
(
bevs
[
i
], 
EV_READ
|
EV_WRITE
);

199 
	`bufгїvТt_sockС_cЏ√щ
(
bevs
[
i
], (
sockaddr
 *)&
ss
,

200 
¶Т
);

203 
tv
.
tv_£c
 = 
cfg_duњtiЏ
;

204 
tv
.
tv_u£c
 = 0;

206 
	`evТt_ba£_loЁexЩ
(
ba£
, &
tv
);

208 
	`evТt_ba£_di•©ch
(
ba£
);

210 
tўЃ_їыived
 = 0;

211 
tўЃ_≥r£c
 = 0.0;

212 
tўЃ_sq_≥r£c
 = 0.0;

213 
i
=0; i < 
cfg_n_cЏ√щiЏs
; ++i) {

214 
≥r£c
 = 
°©es
[
i
].
їыived
;

215 
≥r£c
 /р
cfg_duњtiЏ
;

216 
tўЃ_їыived
 +р
°©es
[
i
].
їыived
;

217 
tўЃ_≥r£c
 +р
≥r£c
;

218 
tўЃ_sq_≥r£c
 +р
≥r£c
*persec;

219 
	`іЪtf
("%d: %а≥Є£cЏd\n", 
i
, 
≥r£c
);

221 
	`іЪtf
("Бotal: %fЕer second\n",

222 (()
tўЃ_їыived
)/
cfg_duњtiЏ
);

223 
	`іЪtf
("Зverage: %fЕer second\n",

224 ((()
tўЃ_їыived
)/
cfg_duњtiЏ
)/
cfg_n_cЏ√щiЏs
);

226 
vђЯnы
 = 
tўЃ_sq_≥r£c
/
cfg_n_cЏ√щiЏs
 - 
tўЃ_≥r£c
*total_persec/(cfg_n_connections*cfg_n_connections);

228 
	`іЪtf
(" stddev: %а≥Є£cЏd\n", 
	`sqє
(
vђЯnы
));

229 
	}
}

231 
	sЁtiЏ
 {

232 cЏ° *
	m«me
; *
	m±r
; 
	mmЪ
; 
	misboё
;

233 } 
	gЁtiЏs
[] = {

234 { "-v", &
cfg_vФbo£
, 0, 1 },

235 { "-h", &
cfg_hЦp
, 0, 1 },

236 { "-n", &
cfg_n_cЏ√щiЏs
, 1, 0 },

237 { "-d", &
cfg_duњtiЏ
, 1, 0 },

238 { "-c", &
cfg_cЏ∆imЩ
, 0, 0 },

239 { "-g", &
cfg_grouґimЩ
, 0, 0 },

240 { "-t", &
cfg_tick_m£c
, 10, 0 },

241 { 
NULL
, NULL, -1, 0 },

245 
	$h™dЋ_ЁtiЏ
(
ђgc
, **
ђgv
, *
i
, cЏ° 
ЁtiЏ
 *
Ёt
)

247 
vЃ
;

248 *
Тd±r
 = 
NULL
;

249 iа(
Ёt
->
isboё
) {

250 *
Ёt
->
±r
 = 1;

253 iа(*
i
 + 1 =р
ђgc
) {

254 
	`еrЪtf
(
°dФr
, "ToЎгwЗrgumТt†tЎ'%s'\n",
ђgv
[*
i
]);

257 
vЃ
 = 
	`°єё
(
ђgv
[*
i
+1], &
Тd±r
, 10);

258 iа(*
ђgv
[*
i
+1] =р'\0' || !
Тd±r
 || *endptr != '\0') {

259 
	`еrЪtf
(
°dФr
, "Couldn'tЕarseВumeric value '%s'\n",

260 
ђgv
[*
i
+1]);

263 iа(
vЃ
 < 
Ёt
->
mЪ
 || val > 0x7fffffff) {

264 
	`еrЪtf
(
°dФr
, "Value '%s' is out-of-range'\n",

265 
ђgv
[*
i
+1]);

268 *
Ёt
->
±r
 = ()
vЃ
;

269 ++*
i
;

271 
	}
}

274 
	$uІge
()

276 
	`еrЪtf
(
°dФr
,

282 
	`еrЪtf
(
°dФr
,

288 
	}
}

291 
	$maЪ
(
ђgc
, **
ђgv
)

293 
i
,
j
;

294 
њtio
;

296 #ifdeа
WIN32


297 
WORD
 
wVФsiЏReque°ed
 = 
	`MAKEWORD
(2,2);

298 
WSADATA
 
wІD©a
;

299 
Фr
;

301 
Фr
 = 
	`WSASПєup
(
wVФsiЏReque°ed
, &
wІD©a
);

305 
i
 = 1; i < 
ђgc
; ++i) {

306 
j
 = 0; 
ЁtiЏs
[j].
«me
; ++j) {

307 iа(!
	`°rcmp
(
ђgv
[
i
],
ЁtiЏs
[
j
].
«me
)) {

308 iа(
	`h™dЋ_ЁtiЏ
(
ђgc
,
ђgv
,&
i
,&
ЁtiЏs
[
j
])<0)

310 
agaЪ
;

313 
	`еrЪtf
(
°dФr
, "UnknowјЁtiЏ '%s'\n", 
ђgv
[
i
]);

314 
	`uІge
();

316 
agaЪ
:

319 iа(
cfg_hЦp
) {

320 
	`uІge
();

324 
cfg_tick
.
tv_£c
 = 
cfg_tick_m£c
 / 1000;

325 
cfg_tick
.
tv_u£c
 = (
cfg_tick_m£c
 % 1000)*1000;

327 
њtio
 = 
cfg_tick_m£c
 / 1000.0;

329 
cfg_cЏ∆imЩ
 *р
њtio
;

330 
cfg_grouґimЩ
 *р
њtio
;

333 
timevЃ
 
tv
;

334 
	`evutЮ_gСtimeofday
(&
tv
, 
NULL
);

335 #ifdeа
WIN32


336 
	`§™d
(
tv
.
tv_u£c
);

338 
	`§™dom
(
tv
.
tv_u£c
);

342 #iвdeа
_EVENT_DISABLE_THREAD_SUPPORT


343 
	`evthїad_ТabЋ_lock_debugЪg
();

346 
	`Л°_њЛlimЩЪg
();

349 
	}
}

	@test/test-time.c

5 
	~"evТt-cЏfig.h
"

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<fъО.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<°rЪg.h
>

13 #iвdeа
WIN32


14 
	~<uni°d.h
>

15 
	~<sys/time.h
>

17 
	~<ФЇo.h
>

19 
	~<evТt2/evТt.h
>

20 
	~<evТt2/evТt_comЈt.h
>

21 
	~<evТt2/evТt_°ruщ.h
>

23 
	g€ќed
 = 0;

25 
	#NEVENT
 20000

	)

27 
evТt
 *
	gev
[
NEVENT
];

30 
	$њnd_Ъt
(
n
)

32 #ifdeа
WIN32


33  ()(
	`њnd
(и* 
n
);

35  ()(
	`њndom
(и% 
n
);

37 
	}
}

40 
	$time_cb
(
fd
, 
evТt
, *
ђg
)

42 
timevЃ
 
tv
;

43 
i
, 
j
;

45 
€ќed
++;

47 iа(
€ќed
 < 10*
NEVENT
) {

48 
i
 = 0; i < 10; i++) {

49 
j
 = 
	`њnd_Ъt
(
NEVENT
);

50 
tv
.
tv_£c
 = 0;

51 
tv
.
tv_u£c
 = 
	`њnd_Ъt
(50000);

52 iа(
tv
.
tv_u£c
 % 2)

53 
	`evtimФ_add
(
ev
[
j
], &
tv
);

55 
	`evtimФ_dЦ
(
ev
[
j
]);

58 
	}
}

61 
	$maЪ
(
ђgc
, **
ђgv
)

63 
timevЃ
 
tv
;

64 
i
;

67 
	`evТt_ЪЩ
();

69 
i
 = 0; i < 
NEVENT
; i++) {

70 
ev
[
i
] = 
	`mЃloc
((
evТt
));

73 
	`evtimФ_£t
(
ev
[
i
], 
time_cb
,Гv[i]);

74 
tv
.
tv_£c
 = 0;

75 
tv
.
tv_u£c
 = 
	`њnd_Ъt
(50000);

76 
	`evtimФ_add
(
ev
[
i
], &
tv
);

79 
	`evТt_di•©ch
();

81  (
€ќed
 < 
NEVENT
);

82 
	}
}

	@test/test-weof.c

5 
	~"evТt-cЏfig.h
"

7 #ifdeа
WIN32


8 
	~<wЪsock2.h
>

10 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 #ifdeа
_EVENT_HAVE_SYS_TIME_H


15 
	~<sys/time.h
>

17 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


18 
	~<sys/sockС.h
>

20 
	~<fъО.h
>

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~<°rЪg.h
>

24 
	~<sig«l.h
>

25 
	~<ФЇo.h
>

27 
	~<evТt2/evТt.h
>

28 
	~<evТt2/evТt_°ruщ.h
>

29 
	~<evТt2/evТt_comЈt.h
>

30 
	~<evТt2/utЮ.h
>

32 #ifdeа
_EVENT___func__


33 
	#__func__
 
_EVENT___func__


	)

36 
	gЈЬ
[2];

37 
	gЛ°_okay
 = 1;

38 
	g€ќed
 = 0;

41 
	$wrЩe_cb
(
fd
, 
evТt
, *
ђg
)

43 cЏ° *
Л°
 = "test string";

44 
Ћn
;

46 
Ћn
 = 
	`£nd
(
fd
, 
Л°
, 
	`°ЊТ
(test) + 1, 0);

48 
	`іЪtf
("%s: wrЩР%d%s\n", 
__func__
,

49 
Ћn
,Жen ? "" : " - means EOF");

51 iа(
Ћn
 > 0) {

52 iа(!
€ќed
)

53 
	`evТt_add
(
ђg
, 
NULL
);

54 
	`EVUTIL_CLOSESOCKET
(
ЈЬ
[0]);

55 } iа(
€ќed
 == 1)

56 
Л°_okay
 = 0;

58 
€ќed
++;

59 
	}
}

62 
	$maЪ
(
ђgc
, **
ђgv
)

64 
evТt
 
ev
;

66 #iвdeа
WIN32


67 iа(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
и=р
SIG_ERR
)

71 iа(
	`evutЮ_sockСЈЬ
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ЈЬ
) == -1)

75 
	`evТt_ЪЩ
();

78 
	`evТt_£t
(&
ev
, 
ЈЬ
[1], 
EV_WRITE
, 
wrЩe_cb
, &ev);

80 
	`evТt_add
(&
ev
, 
NULL
);

82 
	`evТt_di•©ch
();

84  (
Л°_okay
);

85 
	}
}

	@test/tinytest.c

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rЪg.h
>

29 
	~<as£є.h
>

31 #ifdeа
WIN32


32 
	~<wЪsock2.h
>

33 
	~<wЪdows.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<sys/waЩ.h
>

37 
	~<uni°d.h
>

40 
	~<evТt2/utЮ.h
>

42 
	~"tЪyЛ°.h
"

43 
	~"tЪyЛ°_maьos.h
"

45 
	#LONGEST_TEST_NAME
 16384

	)

47 
	gЪ_tЪyЛ°_maЪ
 = 0;

48 
	gn_ok
 = 0;

49 
	gn_bad
 = 0;

50 
	gn_skЭ≥d
 = 0;

52 
	gЁt_f№ked
 = 0;

53 
	gЁt_nof№k
 = 0;

54 
	gЁt_vФbosЩy
 = 1;

55 cЏ° *
	gvФbosЩy_жag
 = "";

57 
	eoutcome
 { 
	mSKIP
=2, 
	mOK
=1, 
	mFAIL
=0 };

58 
outcome
 
	gcur_Л°_outcome
 = 0;

59 cЏ° *
	gcur_Л°_іefix
 = 
NULL
;

61 cЏ° *
	gcur_Л°_«me
 = 
NULL
;

63 #ifdeа
WIN32


65 cЏ° *
	gcomm™d«me
 = 
NULL
;

68 
outcome


69 
	$_Л°€£_run_bђe
(cЏ° 
Л°€£_t
 *
Л°€£
)

71 *
Тv
 = 
NULL
;

72 
outcome
;

73 iа(
Л°€£
->
£tup
) {

74 
Тv
 = 
Л°€£
->
£tup
->
	`£tup_в
(testcase);

75 iа(!
Тv
)

76  
FAIL
;

77 iа(
Тv
 =р(*)
TT_SKIP
)

78  
SKIP
;

81 
cur_Л°_outcome
 = 
OK
;

82 
Л°€£
->
	`в
(
Тv
);

83 
outcome
 = 
cur_Л°_outcome
;

85 iа(
Л°€£
->
£tup
) {

86 iа(
Л°€£
->
£tup
->
	`юЧnup_в
—e°€£, 
Тv
) == 0)

87 
outcome
 = 
FAIL
;

90  
outcome
;

91 
	}
}

93 
	#MAGIC_EXITCODE
 42

	)

95 
outcome


96 
	$_Л°€£_run_f№ked
(cЏ° 
Л°group_t
 *
group
,

97 cЏ° 
Л°€£_t
 *
Л°€£
)

99 #ifdeа
WIN32


108 
ok
;

109 
bufгr
[
LONGEST_TEST_NAME
+256];

110 
STARTUPINFOA
 
si
;

111 
PROCESS_INFORMATION
 
Ъfo
;

112 
DWORD
 
exЩcode
;

114 iа(!
Ъ_tЪyЛ°_maЪ
) {

115 
	`іЪtf
("\nERROR. On Windows, _testcase_run_forked must be"

117 
	`ab№t
();

119 iа(
Ёt_vФbosЩy
>0)

120 
	`іЪtf
("[forking] ");

122 
	`evutЮ_ҐіЪtf
(
bufгr
, (buffer), "%s --RUNNING-FORKED %s %s%s",

123 
comm™d«me
, 
vФbosЩy_жag
, 
group
->
іefix
, 
Л°€£
->
«me
);

125 
	`mem£t
(&
si
, 0, (si));

126 
	`mem£t
(&
Ъfo
, 0, (info));

127 
si
.
cb
 = (si);

129 
ok
 = 
	`Cї©eProыssA
(
comm™d«me
, 
bufгr
, 
NULL
, NULL, 0,

130 0, 
NULL
, NULL, &
si
, &
Ъfo
);

131 iа(!
ok
) {

132 
	`іЪtf
("CreateProcess failed!\n");

135 
	`WaЩF№SЪgЋObjeщ
(
Ъfo
.
hProыss
, 
INFINITE
);

136 
	`GСExЩCodeProыss
(
Ъfo
.
hProыss
, &
exЩcode
);

137 
	`Clo£H™dЋ
(
Ъfo
.
hProыss
);

138 
	`Clo£H™dЋ
(
Ъfo
.
hThїad
);

139 iа(
exЩcode
 == 0)

140  
OK
;

141 iа(
exЩcode
 =р
MAGIC_EXITCODE
)

142  
SKIP
;

144  
FAIL
;

146 
outcome_pЭe
[2];

147 
pid_t
 
pid
;

148 ()
group
;

150 iа(
	`pЭe
(
outcome_pЭe
))

151 
	`≥Љ№
("openingЕipe");

153 iа(
Ёt_vФbosЩy
>0)

154 
	`іЪtf
("[forking] ");

155 
pid
 = 
	`f№k
();

156 iа(!
pid
) {

158 
Л°_r
, 
wrЩe_r
;

159 
b
[1];

160 
	`юo£
(
outcome_pЭe
[0]);

161 
Л°_r
 = 
	`_Л°€£_run_bђe
(
Л°€£
);

162 
	`as£є
(0<=()
Л°_r
 && ()test_r<=2);

163 
b
[0] = "NYS"[
Л°_r
];

164 
wrЩe_r
 = 
	`wrЩe
(
outcome_pЭe
[1], 
b
, 1);

165 iа(
wrЩe_r
 != 1) {

166 
	`≥Љ№
("write outcomeБoЕipe");

167 
	`exЩ
(1);

169 
	`exЩ
(0);

172 
°©us
, 
r
;

173 
b
[1];

176 
	`юo£
(
outcome_pЭe
[1]);

177 
r
 = 
	`їad
(
outcome_pЭe
[0], 
b
, 1);

178 iа(
r
 == 0) {

179 
	`іЪtf
("[Lost connection!] ");

181 } iа(
r
 != 1) {

182 
	`≥Љ№
("read outcome fromЕipe");

184 
	`waЩpid
(
pid
, &
°©us
, 0);

185 
	`юo£
(
outcome_pЭe
[0]);

186  
b
[0]=='Y' ? 
OK
 : (b[0]=='S' ? 
SKIP
 : 
FAIL
);

189 
	}
}

192 
	$Л°€£_run_Џe
(cЏ° 
Л°group_t
 *
group
,

193 cЏ° 
Л°€£_t
 *
Л°€£
)

195 
outcome
 outcome;

197 iа(
Л°€£
->
жags
 & 
TT_SKIP
) {

198 iа(
Ёt_vФbosЩy
>0)

199 
	`іЪtf
("%s%s: SKIPPED\n",

200 
group
->
іefix
, 
Л°€£
->
«me
);

201 ++
n_skЭ≥d
;

202  
SKIP
;

205 iа(
Ёt_vФbosЩy
>0 && !
Ёt_f№ked
) {

206 
	`іЪtf
("%s%s: ", 
group
->
іefix
, 
Л°€£
->
«me
);

208 iа(
Ёt_vФbosЩy
==0и
	`іЪtf
(".");

209 
cur_Л°_іefix
 = 
group
->
іefix
;

210 
cur_Л°_«me
 = 
Л°€£
->
«me
;

213 iа((
Л°€£
->
жags
 & 
TT_FORK
и&& !(
Ёt_f№ked
||
Ёt_nof№k
)) {

214 
outcome
 = 
	`_Л°€£_run_f№ked
(
group
, 
Л°€£
);

216 
outcome
 = 
	`_Л°€£_run_bђe
(
Л°€£
);

219 iа(
outcome
 =р
OK
) {

220 ++
n_ok
;

221 iа(
Ёt_vФbosЩy
>0 && !
Ёt_f№ked
)

222 
	`puts
(
Ёt_vФbosЩy
==1?"OK":"");

223 } iа(
outcome
 =р
SKIP
) {

224 ++
n_skЭ≥d
;

225 iа(
Ёt_vФbosЩy
>0 && !
Ёt_f№ked
)

226 
	`puts
("SKIPPED");

228 ++
n_bad
;

229 iа(!
Ёt_f№ked
)

230 
	`іЪtf
("\ј [%†FAILED]\n", 
Л°€£
->
«me
);

233 iа(
Ёt_f№ked
) {

234 
	`exЩ
(
outcome
==
OK
 ? 0 : (outcome==
SKIP
?
MAGIC_EXITCODE
 : 1));

236  ()
outcome
;

238 
	}
}

241 
	$_tЪyЛ°_£t_жag
(
Л°group_t
 *
groups
, cЏ° *
ђg
, 
жag
)

243 
i
, 
j
;

244 
Ћngth
 = 
LONGEST_TEST_NAME
;

245 
fuќ«me
[
LONGEST_TEST_NAME
];

246 
found
=0;

247 iа(
	`°r°r
(
ђg
, ".."))

248 
Ћngth
 = 
	`°r°r
(
ђg
,"..")-arg;

249 
i
=0; 
groups
[i].
іefix
; ++i) {

250 
j
=0; 
groups
[
i
].
€£s
[j].
«me
; ++j) {

251 
	`evutЮ_ҐіЪtf
(
fuќ«me
, (fullname), "%s%s",

252 
groups
[
i
].
іefix
, groups[i].
€£s
[
j
].
«me
);

253 iа(!
жag
)

254 
	`іЪtf
(" %s\n", 
fuќ«me
);

255 iа(!
	`°Їcmp
(
fuќ«me
, 
ђg
, 
Ћngth
)) {

256 
groups
[
i
].
€£s
[
j
].
жags
 |р
жag
;

257 ++
found
;

261  
found
;

262 
	}
}

265 
	$uІge
(
Л°group_t
 *
groups
, 
li°_groups
)

267 
	`puts
("OptionsЗre: [--verbose|--quiet|--terse] [--no-fork]");

268 
	`puts
(" SpecifyБests byВame, or usingЗЕrefixГnding with '..'");

269 
	`puts
(" Use --list-tests forЗЖist ofБests.");

270 iа(
li°_groups
) {

271 
	`puts
("KnownБestsЗre:");

272 
	`_tЪyЛ°_£t_жag
(
groups
, "..", 0);

274 
	`exЩ
(0);

275 
	}
}

278 
	$tЪyЛ°_maЪ
(
c
, cЏ° **
v
, 
Л°group_t
 *
groups
)

280 
i
, 
j
, 
n
=0;

282 #ifdeа
WIN32


283 
comm™d«me
 = 
v
[0];

285 
i
=1; i<
c
; ++i) {

286 iа(
v
[
i
][0] == '-') {

287 iа(!
	`°rcmp
(
v
[
i
], "--RUNNING-FORKED")) {

288 
Ёt_f№ked
 = 1;

289 } iа(!
	`°rcmp
(
v
[
i
], "--no-fork")) {

290 
Ёt_nof№k
 = 1;

291 } iа(!
	`°rcmp
(
v
[
i
], "--quiet")) {

292 
Ёt_vФbosЩy
 = -1;

293 
vФbosЩy_жag
 = "--quiet";

294 } iа(!
	`°rcmp
(
v
[
i
], "--verbose")) {

295 
Ёt_vФbosЩy
 = 2;

296 
vФbosЩy_жag
 = "--verbose";

297 } iа(!
	`°rcmp
(
v
[
i
], "--terse")) {

298 
Ёt_vФbosЩy
 = 0;

299 
vФbosЩy_жag
 = "--terse";

300 } iа(!
	`°rcmp
(
v
[
i
], "--help")) {

301 
	`uІge
(
groups
, 0);

302 } iа(!
	`°rcmp
(
v
[
i
], "--list-tests")) {

303 
	`uІge
(
groups
, 1);

305 
	`іЪtf
("UnknowјЁtiЏ %s. Try --hЦp\n",
v
[
i
]);

309 ++
n
;

310 iа(!
	`_tЪyЛ°_£t_жag
(
groups
, 
v
[
i
], 
_TT_ENABLED
)) {

311 
	`іЪtf
("NЎsuchБe°З†%s!\n", 
v
[
i
]);

316 iа(!
n
)

317 
	`_tЪyЛ°_£t_жag
(
groups
, "..", 
_TT_ENABLED
);

319 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

321 ++
Ъ_tЪyЛ°_maЪ
;

322 
i
=0; 
groups
[i].
іefix
; ++i)

323 
j
=0; 
groups
[
i
].
€£s
[j].
«me
; ++j)

324 iа(
groups
[
i
].
€£s
[
j
].
жags
 & 
_TT_ENABLED
)

325 
	`Л°€£_run_Џe
(&
groups
[
i
],

326 &
groups
[
i
].
€£s
[
j
]);

328 --
Ъ_tЪyЛ°_maЪ
;

330 iа(
Ёt_vФbosЩy
==0)

331 
	`puts
("");

333 iа(
n_bad
)

334 
	`іЪtf
("%d/%d TESTS FAILED. (%d skЭ≥d)\n", 
n_bad
,

335 
n_bad
+
n_ok
,
n_skЭ≥d
);

336 iа(
Ёt_vФbosЩy
 >= 1)

337 
	`іЪtf
("%dБe°†ok. (%d skЭ≥d)\n", 
n_ok
, 
n_skЭ≥d
);

339  (
n_bad
 == 0) ? 0 : 1;

340 
	}
}

343 
	$_tЪyЛ°_gС_vФbosЩy
()

345  
Ёt_vФbosЩy
;

346 
	}
}

349 
	$_tЪyЛ°_£t_Л°_зЮed
()

351 iа(
Ёt_vФbosЩy
 <р0 && 
cur_Л°_«me
) {

352 iа(
Ёt_vФbosЩy
==0и
	`puts
("");

353 
	`іЪtf
("%s%s: ", 
cur_Л°_іefix
, 
cur_Л°_«me
);

354 
cur_Л°_«me
 = 
NULL
;

356 
cur_Л°_outcome
 = 0;

357 
	}
}

360 
	$_tЪyЛ°_£t_Л°_skЭ≥d
()

362 iа(
cur_Л°_outcome
==
OK
)

363 
cur_Л°_outcome
 = 
SKIP
;

364 
	}
}

	@test/tinytest.h

26 #iвdeа
_TINYTEST_H


27 
	#_TINYTEST_H


	)

30 
	#TT_FORK
 (1<<0)

	)

32 
	#TT_SKIP
 (1<<1)

	)

34 
	#_TT_ENABLED
 (1<<2)

	)

36 
	#TT_FIRST_USER_FLAG
 (1<<3)

	)

38 (*
	tЛ°€£_в
)(*);

40 
Л°€£_t
;

43 
	sЛ°€£_£tup_t
 {

45 *(*
£tup_в
)(cЏ° 
Л°€£_t
 *);

47 (*
юЧnup_в
)(cЏ° 
Л°€£_t
 *, *);

51 
	sЛ°€£_t
 {

52 cЏ° *
«me
;

53 
Л°€£_в
 
в
;

54 
жags
;

55 cЏ° 
Л°€£_£tup_t
 *
£tup
;

56 *
£tup_d©a
;

58 
	#END_OF_TESTCASES
 { 
NULL
, NULL, 0, NULL, NULL 
	}

	)
}

61 
	sЛ°group_t
 {

62 cЏ° *
	mіefix
;

63 
Л°€£_t
 *
	m€£s
;

65 
	#END_OF_GROUPS
 { 
NULL
, NULL}

	)

68 
_tЪyЛ°_£t_Л°_зЮed
();

70 
_tЪyЛ°_£t_Л°_skЭ≥d
();

72 
_tЪyЛ°_gС_vФbosЩy
();

75 
_tЪyЛ°_£t_жag
(
Л°group_t
 *, const *, );

78 
	#tЪyЛ°_skЭ
(
groups
, 
«med
) \

79 
	`_tЪyЛ°_£t_жag
(
groups
, 
«med
, 
TT_SKIP
)

	)

82 
Л°€£_run_Џe
(cЏ° 
Л°group_t
 *,cЏ° 
Л°€£_t
 *);

85 
tЪyЛ°_maЪ
(
ђgc
, cЏ° **
ђgv
, 
Л°group_t
 *
groups
);

	@test/tinytest_macros.h

26 #iвdeа
_TINYTEST_MACROS_H


27 
	#_TINYTEST_MACROS_H


	)

30 
	#TT_STMT_BEGIN
 dЎ{

	)

31 
	#TT_STMT_END
 } 0)

	)

35 #iвdeа
TT_EXIT_TEST_FUNCTION


36 
	#TT_EXIT_TEST_FUNCTION
 
TT_STMT_BEGIN
 
Тd
; 
TT_STMT_END


	)

40 #iвdeа
TT_DECLARE


41 
	#TT_DECLARE
(
іefix
, 
ђgs
) \

42 
TT_STMT_BEGIN
 \

43 
	`іЪtf
("\ј %†%s:%d: ",
іefix
,
__FILE__
,
__LINE__
); \

44 
іЪtf
 
ђgs
 ; \

45 
TT_STMT_END


	)

49 
	#TT_GRIPE
(
ђgs
и
	`TT_DECLARE
("FAIL",Зrgs)

	)

52 
	#TT_BLATHER
(
ђgs
) \

53 
TT_STMT_BEGIN
 \

54 iа(
	`_tЪyЛ°_gС_vФbosЩy
()>1и
	`TT_DECLARE
(" OK", 
ђgs
); \

55 
TT_STMT_END


	)

57 
	#TT_DIE
(
ђgs
) \

58 
TT_STMT_BEGIN
 \

59 
	`_tЪyЛ°_£t_Л°_зЮed
(); \

60 
	`TT_GRIPE
(
ђgs
); \

61 
TT_EXIT_TEST_FUNCTION
; \

62 
TT_STMT_END


	)

64 
	#TT_FAIL
(
ђgs
) \

65 
TT_STMT_BEGIN
 \

66 
	`_tЪyЛ°_£t_Л°_зЮed
(); \

67 
	`TT_GRIPE
(
ђgs
); \

68 
TT_STMT_END


	)

71 
	#Й_ab№t_іЪtf
(
msg
и
	`TT_DIE
(msg)

	)

72 
	#Й_ab№t_≥Љ№
(
Ё
и
	`TT_DIE
(("%s: %†[%d]",(Ё),
	`°їЉ№
(
ФЇo
),ГЉno))

	)

73 
	#Й_ab№t_msg
(
msg
и
	`TT_DIE
(("%s", msg))

	)

74 
	#Й_ab№t
(и
	`TT_DIE
(("%s", "(FaЮed.)"))

	)

77 
	#Й_зЮ_іЪtf
(
msg
и
	`TT_FAIL
(msg)

	)

78 
	#Й_зЮ_≥Љ№
(
Ё
и
	`TT_FAIL
(("%s: %†[%d]",(Ё),
	`°їЉ№
(
ФЇo
),ГЉno))

	)

79 
	#Й_зЮ_msg
(
msg
и
	`TT_FAIL
(("%s", msg))

	)

80 
	#Й_зЮ
(и
	`TT_FAIL
(("%s", "(FaЮed.)"))

	)

83 
	#Й_skЭ
() \

84 
TT_STMT_BEGIN
 \

85 
	`_tЪyЛ°_£t_Л°_skЭ≥d
(); \

86 
TT_EXIT_TEST_FUNCTION
; \

87 
TT_STMT_END


	)

89 
	#_Й_w™t
(
b
, 
msg
, 
зЮ
) \

90 
TT_STMT_BEGIN
 \

91 iа(!(
b
)) { \

92 
	`_tЪyЛ°_£t_Л°_зЮed
(); \

93 
	`TT_GRIPE
((
msg
)); \

94 
зЮ
; \

96 
	`TT_BLATHER
((
msg
)); \

98 
TT_STMT_END


	)

101 
	#Й_w™t_msg
(
b
, 
msg
) \

102 
	`_Й_w™t
(
b
, 
msg
, );

	)

105 
	#Й_as£є_msg
(
b
, 
msg
) \

106 
	`_Й_w™t
(
b
, 
msg
, 
TT_EXIT_TEST_FUNCTION
);

	)

109 
	#Й_w™t
(
b
и
	`Й_w™t_msg
–(b), "w™t("#b")")

	)

111 
	#Й_as£є
(
b
и
	`Й_as£є_msg
((b), "as£є("#b")")

	)

113 
	#Й_as£є_Л°_ty≥
(
a
,
b
,
°r_Л°
,
ty≥
,
Л°
,
fmt
) \

114 
TT_STMT_BEGIN
 \

115 
ty≥
 
_vЃ1
 = (ty≥)(
a
); \

116 
ty≥
 
_vЃ2
 = (ty≥)(
b
); \

117 iа(!(
Л°
)) { \

118 
	`TT_DIE
(("as£є(%s): "
fmt
" vs "fmt, \

119 
°r_Л°
, 
_vЃ1
, 
_vЃ2
)); \

121 
	`TT_BLATHER
(("as£є(%s): "
fmt
" vs "fmt, \

122 
°r_Л°
, 
_vЃ1
, 
_vЃ2
)); \

124 
TT_STMT_END


	)

128 
	#Й_as£є_Ё_ty≥
(
a
,
Ё
,
b
,
ty≥
,
fmt
) \

129 
	`Й_as£є_Л°_ty≥
(
a
,
b
,#a" "#Ё" "#b,
ty≥
,(
_vЃ1
 
Ё
 
_vЃ2
),
fmt
)

	)

131 
	#Й_Ъt_Ё
(
a
,
Ё
,
b
) \

132 
	`Й_as£є_Л°_ty≥
(
a
,
b
,#a" "#Ё" "#b,,(
_vЃ1
 
Ё
 
_vЃ2
),"%ld")

	)

134 
	#Й_uЪt_Ё
(
a
,
Ё
,
b
) \

135 
	`Й_as£є_Л°_ty≥
(
a
,
b
,#a" "#op" "#b,, \

136 (
_vЃ1
 
Ё
 
_vЃ2
),"%lu")

	)

137 
	#Й_±r_Ё
(
a
,
Ё
,
b
) \

138 
	`Й_as£є_Л°_ty≥
(
a
,
b
,#a" "#op" "#b,*, \

139 (
_vЃ1
 
Ё
 
_vЃ2
),"%p")

	)

141 
	#Й_°r_Ё
(
a
,
Ё
,
b
) \

142 
	`Й_as£є_Л°_ty≥
(
a
,
b
,#a" "#op" "#b,const *, \

143 (
	`°rcmp
(
_vЃ1
,
_vЃ2
и
Ё
 0),"<%s>")

	)

	@util-internal.h

26 #iвdeа
_EVENT_UTIL_INTERNAL_H


27 
	#_EVENT_UTIL_INTERNAL_H


	)

29 
	~"evТt-cЏfig.h
"

30 
	~<ФЇo.h
>

33 
	~"log-ЪЛЇЃ.h
"

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 #ifdeа
_EVENT_HAVE_SYS_SOCKET_H


37 
	~<sys/sockС.h
>

39 
	~"evТt2/utЮ.h
"

41 #ifdeа
__эlu•lus


46 #ifdeа
_EVENT_ЪlЪe


47 
	#ЪlЪe
 
_EVENT_ЪlЪe


	)

49 #ifdeа
_EVENT___func__


50 
	#__func__
 
_EVENT___func__


	)

54 
	#_EVUTIL_NIL_STMT
 (()0)

	)

64 #iвdeа
WIN32


67 
	#EVUTIL_ERR_RW_RETRIABLE
(
e
) \

68 ((
e
и=р
EINTR
 || (eи=р
EAGAIN
)

	)

70 
	#EVUTIL_ERR_CONNECT_RETRIABLE
(
e
) \

71 ((
e
и=р
EINTR
 || (eи=р
EINPROGRESS
)

	)

73 
	#EVUTIL_ERR_ACCEPT_RETRIABLE
(
e
) \

74 ((
e
и=р
EINTR
 || (eи=р
EAGAIN
 || (eи=р
ECONNABORTED
)

	)

77 
	#EVUTIL_ERR_CONNECT_REFUSED
(
e
) \

78 ((
e
и=р
ECONNREFUSED
)

	)

82 
	#EVUTIL_ERR_RW_RETRIABLE
(
e
) \

83 ((
e
и=р
WSAEWOULDBLOCK
 || \

84 (
e
и=р
WSAEINTR
)

	)

86 
	#EVUTIL_ERR_CONNECT_RETRIABLE
(
e
) \

87 ((
e
и=р
WSAEWOULDBLOCK
 || \

88 (
e
и=р
WSAEINTR
 || \

89 (
e
и=р
WSAEINPROGRESS
 || \

90 (
e
и=р
WSAEINVAL
)

	)

92 
	#EVUTIL_ERR_ACCEPT_RETRIABLE
(
e
) \

93 
	`EVUTIL_ERR_RW_RETRIABLE
(
e
)

	)

95 
	#EVUTIL_ERR_CONNECT_REFUSED
(
e
) \

96 ((
e
и=р
WSAECONNREFUSED
)

	)

100 #ifdeа
_EVENT_sockЋn_t


101 
	#sockЋn_t
 
_EVENT_sockЋn_t


	)

108 
	#DECLARE_CTYPE_FN
(
«me
) \

109 
EVUTIL_
##
	`«me
(
c
); \

110 cЏ° 
ev_uЪt32_t
 
EVUTIL_
##
«me
##
_TABLE
[]; \

111 
ЪlЪe
 
EVUTIL_
##
	`«me
(
c
) { \

112 
ev_uЪt8_t
 
u
 = 
c
; \

113  !!(
EVUTIL_
##
«me
##
_TABLE
[(
u
 >> 5) & 7] & (1 << (u & 31))); \

114 }

	)

115 
DECLARE_CTYPE_FN
(
ISALPHA
)

116 
DECLARE_CTYPE_FN
(
ISALNUM
)

117 
DECLARE_CTYPE_FN
(
ISSPACE
)

118 
DECLARE_CTYPE_FN
(
ISDIGIT
)

119 
DECLARE_CTYPE_FN
(
ISXDIGIT
)

120 
DECLARE_CTYPE_FN
(
ISPRINT
)

121 
DECLARE_CTYPE_FN
(
ISLOWER
)

122 
DECLARE_CTYPE_FN
(
ISUPPER
)

123 cЏ° 
EVUTIL_TOUPPER_TABLE
[];

124 cЏ° 
EVUTIL_TOLOWER_TABLE
[];

125 
	#EVUTIL_TOLOWER
(
c
и(()
EVUTIL_TOLOWER_TABLE
[(
ev_uЪt8_t
)c])

	)

126 
	#EVUTIL_TOUPPER
(
c
и(()
EVUTIL_TOUPPER_TABLE
[(
ev_uЪt8_t
)c])

	)

143 
	#EVUTIL_UPCAST
(
±r
, 
ty≥
, 
fЫld
) \

144 ((
ty≥
 *)(((*)(
±r
)и- 
	`evutЮ_off£tof
—y≥, 
fЫld
)))

	)

146 
evutЮ_їad_fЮe
(cЏ° *
fЮТame
, **
cЏЛЅ_out
, 
size_t
 *
Ћn_out
,

147 
is_bЪђy
);

149 
evutЮ_sockС_cЏ√щ
(
evutЮ_sockС_t
 *
fd_±r
, 
sockaddr
 *
І
, 
sockЋn
);

151 
evutЮ_sockС_fЪished_cЏ√щЪg
(
evutЮ_sockС_t
 
fd
);

153 
evutЮ_їsёve
(
зmЮy
, cЏ° *
ho°«me
, 
sockaddr
 *
І
,

154 
ev_sockЋn_t
 *
sockЋn
, 
p№t
);

156 cЏ° *
evutЮ_gСТv
(cЏ° *
«me
);

158 
_evutЮ_wЧkњnd
();

162 #ifdeа
__GNUC__


163 
	#EVUTIL_UNLIKELY
(
p
и
	`__buЮtЪ_ex≥щ
(!!’),0)

	)

165 
	#EVUTIL_UNLIKELY
(
p
и’)

	)

169 
	#EVUTIL_ASSERT
(
cЏd
) \

171 iа(
	`EVUTIL_UNLIKELY
(!(
cЏd
))) { \

172 
	`evТt_Фrx
(
_EVENT_ERR_ABORT
, \

174 
__FILE__
,
__LINE__
,#cЏd,
__func__
); \

177 ()
	`еrЪtf
(
°dФr
, \

179 
__FILE__
,
__LINE__
,#cЏd,
__func__
); \

180 
	`ab№t
(); \

182 } 0)

	)

187 
	#EVUTIL_EAI_NEED_RESOLVE
 -90002

	)

189 
	gevdns_ba£
;

190 
	gevdns_gСaddrЪfo_їque°
;

191 
	gevdns_gСaddrЪfo_їque°
* (*
	tevdns_gСaddrЪfo_в
)(

192 
	tevdns_ba£
 *
	tba£
,

193 cЏ° *
	tnodТame
, cЏ° *
	t£rv«me
,

194 cЏ° 
	tevutЮ_addrЪfo
 *
	thЪts_Ъ
,

195 (*
	tcb
)(, 
	tevutЮ_addrЪfo
 *, *), *
	tђg
);

197 
evutЮ_£t_evdns_gСaddrЪfo_в
(
evdns_gСaddrЪfo_в
 
в
);

199 
evutЮ_addrЪfo
 *
evutЮ_√w_addrЪfo
(
sockaddr
 *
І
,

200 
ev_sockЋn_t
 
sockЋn
, cЏ° 
evutЮ_addrЪfo
 *
hЪts
);

201 
evutЮ_addrЪfo
 *
evutЮ_addrЪfo_≠≥nd
(evutЮ_addrЪfЎ*
fЬ°
,

202 
evutЮ_addrЪfo
 *
≠≥nd
);

203 
evutЮ_adju°_hЪts_f№_addrcЏfig
(
evutЮ_addrЪfo
 *
hЪts
);

204 
evutЮ_gСaddrЪfo_commЏ
(cЏ° *
nodТame
, cЏ° *
£rv«me
,

205 
evutЮ_addrЪfo
 *
hЪts
, evutЮ_addrЪfЎ**
їs
, *
p№Кum
);

207 
evutЮ_gСaddrЪfo_async
(
evdns_ba£
 *
dns_ba£
,

208 cЏ° *
nodТame
, cЏ° *
£rv«me
,

209 cЏ° 
evutЮ_addrЪfo
 *
hЪts_Ъ
,

210 (*
cb
)(, 
evutЮ_addrЪfo
 *, *), *
ђg
);

214 
evutЮ_sockaddr_is_loЁback
(cЏ° 
sockaddr
 *
І
);

216 #ifdeа
__эlu•lus


	@win32select.c

29 
	~<wЪsock2.h
>

30 
	~<wЪdows.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/queue.h
>

33 
	~<sig«l.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rЪg.h
>

37 
	~<ФЇo.h
>

39 
	~"evТt2/utЮ.h
"

40 
	~"evТt-cЏfig.h
"

41 
	~"utЮ-ЪЛЇЃ.h
"

42 
	~"log-ЪЛЇЃ.h
"

43 
	~"evТt2/evТt.h
"

44 
	~"evТt-ЪЛЇЃ.h
"

45 
	~"evm≠-ЪЛЇЃ.h
"

46 
	~"evТt2/thїad.h
"

47 
	~"evthїad-ЪЛЇЃ.h
"

49 
	#XFREE
(
±r
иdЎ{ iа’Ми
	`mm_дУ
’М); } 0)

	)

51 
evТt_li°
 
timequeue
;

52 
evТt_li°
 
addqueue
;

54 
	swЪ_fd_£t
 {

55 
u_Ъt
 
	mfd_couЅ
;

56 
SOCKET
 
	mfd_ђњy
[1];

60 vё©ЮР
	gSIGFPE_REQ
 = 0.0f;

62 
	sidx_Ъfo
 {

63 
	mїad_pos_ґus1
;

64 
	mwrЩe_pos_ґus1
;

67 
	swЪ32Ё
 {

68 
	mfd_£tsz
;

69 
	mїsize_out_£ts
;

70 
wЪ_fd_£t
 *
	mїad£t_Ъ
;

71 
wЪ_fd_£t
 *
	mwrЩe£t_Ъ
;

72 
wЪ_fd_£t
 *
	mїad£t_out
;

73 
wЪ_fd_£t
 *
	mwrЩe£t_out
;

74 
wЪ_fd_£t
 *
	mex£t_out
;

75 
	msig«ls_ђe_brokТ
 : 1;

78 *
wЪ32_ЪЩ
 (
evТt_ba£
 *);

79 
wЪ32_add
(
evТt_ba£
 *, 
evutЮ_sockС_t
, 
ёd
, 
evТts
, *
_idx
);

80 
wЪ32_dЦ
(
evТt_ba£
 *, 
evutЮ_sockС_t
, 
ёd
, 
evТts
, *
_idx
);

81 
wЪ32_di•©ch
 (
evТt_ba£
 *
ba£
, 
timevЃ
 *);

82 
wЪ32_dЧќoc
 (
evТt_ba£
 *);

84 
evТtЁ
 
	gwЪ32Ёs
 = {

86 
wЪ32_ЪЩ
,

87 
wЪ32_add
,

88 
wЪ32_dЦ
,

89 
wЪ32_di•©ch
,

90 
wЪ32_dЧќoc
,

93 (
idx_Ъfo
),

96 
	#FD_SET_ALLOC_SIZE
(
n
и(((
wЪ_fd_£t
и+ (“)-1)*(
SOCKET
)))

	)

99 
	$їЃloc_fd_£ts
(
wЪ32Ё
 *
Ё
, 
size_t
 
√w_size
)

101 
size_t
 
size
;

103 
	`EVUTIL_ASSERT
(
√w_size
 >р
Ё
->
їad£t_Ъ
->
fd_couЅ
 &&

104 
√w_size
 >р
Ё
->
wrЩe£t_Ъ
->
fd_couЅ
);

105 
	`EVUTIL_ASSERT
(
√w_size
 >= 1);

107 
size
 = 
	`FD_SET_ALLOC_SIZE
(
√w_size
);

108 iа(!(
Ё
->
їad£t_Ъ
 = 
	`mm_їЃloc
(Ё->їad£t_Ъ, 
size
)))

110 iа(!(
Ё
->
wrЩe£t_Ъ
 = 
	`mm_їЃloc
(Ё->wrЩe£t_Ъ, 
size
)))

112 
Ё
->
їsize_out_£ts
 = 1;

113 
Ё
->
fd_£tsz
 = 
√w_size
;

115 
	}
}

118 
	$timevЃ_to_ms
(
timevЃ
 *
tv
)

120  ((
tv
->
tv_£c
 * 1000и+ (tv->
tv_u£c
 / 1000));

121 
	}
}

124 
	$do_fd_£t
(
wЪ32Ё
 *
Ё
, 
idx_Ъfo
 *
Тt
, 
evutЮ_sockС_t
 
s
, 
їad
)

126 
wЪ_fd_£t
 *
£t
 = 
їad
 ? 
Ё
->
їad£t_Ъ
 : op->
wrЩe£t_Ъ
;

127 iа(
їad
) {

128 iа(
Тt
->
їad_pos_ґus1
 > 0)

131 iа(
Тt
->
wrЩe_pos_ґus1
 > 0)

134 iа(
£t
->
fd_couЅ
 =р
Ё
->
fd_£tsz
) {

135 iа(
	`їЃloc_fd_£ts
(
Ё
, op->
fd_£tsz
*2))

138 
£t
 = 
їad
 ? 
Ё
->
їad£t_Ъ
 : op->
wrЩe£t_Ъ
;

140 
£t
->
fd_ђњy
[£t->
fd_couЅ
] = 
s
;

141 iа(
їad
)

142 
Тt
->
їad_pos_ґus1
 = 
£t
->
fd_couЅ
+1;

144 
Тt
->
wrЩe_pos_ґus1
 = 
£t
->
fd_couЅ
+1;

145  (
£t
->
fd_couЅ
++);

146 
	}
}

149 
	$do_fd_юЧr
(
evТt_ba£
 *
ba£
,

150 
wЪ32Ё
 *
Ё
, 
idx_Ъfo
 *
Тt
, 
їad
)

152 
i
;

153 
wЪ_fd_£t
 *
£t
 = 
їad
 ? 
Ё
->
їad£t_Ъ
 : op->
wrЩe£t_Ъ
;

154 iа(
їad
) {

155 
i
 = 
Тt
->
їad_pos_ґus1
 - 1;

156 
Тt
->
їad_pos_ґus1
 = 0;

158 
i
 = 
Тt
->
wrЩe_pos_ґus1
 - 1;

159 
Тt
->
wrЩe_pos_ґus1
 = 0;

161 iа(
i
 < 0)

163 iа(--
£t
->
fd_couЅ
 !р
i
) {

164 
idx_Ъfo
 *
Тt2
;

165 
SOCKET
 
s2
;

166 
s2
 = 
£t
->
fd_ђњy
[
i
] = sС->fd_ђњy[£t->
fd_couЅ
];

168 
Тt2
 = 
	`evm≠_io_gС_fdЪfo
(&
ba£
->
io
, 
s2
);

170 iа(!
Тt2
)

172 iа(
їad
)

173 
Тt2
->
їad_pos_ґus1
 = 
i
+1;

175 
Тt2
->
wrЩe_pos_ґus1
 = 
i
+1;

178 
	}
}

180 
	#NEVENT
 32

	)

182 
	$wЪ32_ЪЩ
(
evТt_ba£
 *
_ba£
)

184 
wЪ32Ё
 *
wЪЁ
;

185 
size_t
 
size
;

186 iа(!(
wЪЁ
 = 
	`mm_€ќoc
(1, (
wЪ32Ё
))))

187  
NULL
;

188 
wЪЁ
->
fd_£tsz
 = 
NEVENT
;

189 
size
 = 
	`FD_SET_ALLOC_SIZE
(
NEVENT
);

190 iа(!(
wЪЁ
->
їad£t_Ъ
 = 
	`mm_mЃloc
(
size
)))

191 
Фr
;

192 iа(!(
wЪЁ
->
wrЩe£t_Ъ
 = 
	`mm_mЃloc
(
size
)))

193 
Фr
;

194 iа(!(
wЪЁ
->
їad£t_out
 = 
	`mm_mЃloc
(
size
)))

195 
Фr
;

196 iа(!(
wЪЁ
->
wrЩe£t_out
 = 
	`mm_mЃloc
(
size
)))

197 
Фr
;

198 iа(!(
wЪЁ
->
ex£t_out
 = 
	`mm_mЃloc
(
size
)))

199 
Фr
;

200 
wЪЁ
->
їad£t_Ъ
->
fd_couЅ
 = wЪЁ->
wrЩe£t_Ъ
->fd_count = 0;

201 
wЪЁ
->
їad£t_out
->
fd_couЅ
 = wЪЁ->
wrЩe£t_out
->fd_count

202 р
wЪЁ
->
ex£t_out
->
fd_couЅ
 = 0;

204 iа(
	`evsig_ЪЩ
(
_ba£
) < 0)

205 
wЪЁ
->
sig«ls_ђe_brokТ
 = 1;

207  (
wЪЁ
);

208 
Фr
:

209 
	`XFREE
(
wЪЁ
->
їad£t_Ъ
);

210 
	`XFREE
(
wЪЁ
->
wrЩe£t_Ъ
);

211 
	`XFREE
(
wЪЁ
->
їad£t_out
);

212 
	`XFREE
(
wЪЁ
->
wrЩe£t_out
);

213 
	`XFREE
(
wЪЁ
->
ex£t_out
);

214 
	`XFREE
(
wЪЁ
);

215  (
NULL
);

216 
	}
}

219 
	$wЪ32_add
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
,

220 
ёd
, 
evТts
, *
_idx
)

222 
wЪ32Ё
 *wЪ32Ё = 
ba£
->
evba£
;

223 
idx_Ъfo
 *
idx
 = 
_idx
;

225 iа((
evТts
 & 
EV_SIGNAL
и&& 
wЪ32Ё
->
sig«ls_ђe_brokТ
)

228 iа(!(
evТts
 & (
EV_READ
|
EV_WRITE
)))

231 
	`evТt_debug
(("%s:ЗddЪgГvТИf№ %d", 
__func__
, ()
fd
));

232 iа(
evТts
 & 
EV_READ
) {

233 iа(
	`do_fd_£t
(
wЪ32Ё
, 
idx
, 
fd
, 1)<0)

236 iа(
evТts
 & 
EV_WRITE
) {

237 iа(
	`do_fd_£t
(
wЪ32Ё
, 
idx
, 
fd
, 0)<0)

241 
	}
}

244 
	$wЪ32_dЦ
(
evТt_ba£
 *
ba£
, 
evutЮ_sockС_t
 
fd
, 
ёd
, 
evТts
,

245 *
_idx
)

247 
wЪ32Ё
 *wЪ32Ё = 
ba£
->
evba£
;

248 
idx_Ъfo
 *
idx
 = 
_idx
;

250 
	`evТt_debug
(("%s: RemovЪgГvТИf№ %d", 
__func__
, 
fd
));

251 iа(
evТts
 & 
EV_READ
)

252 
	`do_fd_юЧr
(
ba£
, 
wЪ32Ё
, 
idx
, 1);

253 iа(
evТts
 & 
EV_WRITE
)

254 
	`do_fd_юЧr
(
ba£
, 
wЪ32Ё
, 
idx
, 0);

257 
	}
}

260 
	$fd_£t_cЁy
(
wЪ_fd_£t
 *
out
, cЏ° wЪ_fd_£И*
Ъ
)

262 
out
->
fd_couЅ
 = 
Ъ
->fd_count;

263 
	`memэy
(
out
->
fd_ђњy
, 
Ъ
->fd_ђњy, in->
fd_couЅ
 * ((
SOCKET
)));

264 
	}
}

278 
	$wЪ32_di•©ch
(
evТt_ba£
 *
ba£
, 
timevЃ
 *
tv
)

280 
wЪ32Ё
 *wЪ32Ё = 
ba£
->
evba£
;

281 
їs
 = 0;

282 
j
, 
i
;

283 
fd_couЅ
;

284 
SOCKET
 
s
;

286 iа(
wЪ32Ё
->
їsize_out_£ts
) {

287 
size_t
 
size
 = 
	`FD_SET_ALLOC_SIZE
(
wЪ32Ё
->
fd_£tsz
);

288 iа(!(
wЪ32Ё
->
їad£t_out
 = 
	`mm_їЃloc
(wЪ32Ё->їad£t_out, 
size
)))

290 iа(!(
wЪ32Ё
->
ex£t_out
 = 
	`mm_їЃloc
(wЪ32Ё->ex£t_out, 
size
)))

292 iа(!(
wЪ32Ё
->
wrЩe£t_out
 = 
	`mm_їЃloc
(wЪ32Ё->wrЩe£t_out, 
size
)))

294 
wЪ32Ё
->
їsize_out_£ts
 = 0;

297 
	`fd_£t_cЁy
(
wЪ32Ё
->
їad£t_out
, wЪ32Ё->
їad£t_Ъ
);

298 
	`fd_£t_cЁy
(
wЪ32Ё
->
ex£t_out
, wЪ32Ё->
wrЩe£t_Ъ
);

299 
	`fd_£t_cЁy
(
wЪ32Ё
->
wrЩe£t_out
, wЪ32Ё->
wrЩe£t_Ъ
);

301 
fd_couЅ
 =

302 (
wЪ32Ё
->
їad£t_out
->
fd_couЅ
 > wЪ32Ё->
wrЩe£t_out
->fd_count) ?

303 
wЪ32Ё
->
їad£t_out
->
fd_couЅ
 : wЪ32Ё->
wrЩe£t_out
->fd_count;

305 iа(!
fd_couЅ
) {

307 
	`SЋХ
(
	`timevЃ_to_ms
(
tv
));

308 
	`evsig_іoыss
(
ba£
);

312 
	`EVBASE_RELEASE_LOCK
(
ba£
, 
th_ba£_lock
);

314 
їs
 = 
	`£Ћщ
(
fd_couЅ
,

315 (
fd_£t
*)
wЪ32Ё
->
їad£t_out
,

316 (
fd_£t
*)
wЪ32Ё
->
wrЩe£t_out
,

317 (
fd_£t
*)
wЪ32Ё
->
ex£t_out
, 
tv
);

319 
	`EVBASE_ACQUIRE_LOCK
(
ba£
, 
th_ba£_lock
);

321 
	`evТt_debug
(("%s: sЦeщДСuЇed %d", 
__func__
, 
їs
));

323 iа(
їs
 <= 0) {

324 
	`evsig_іoыss
(
ba£
);

325  
їs
;

326 } iа(
ba£
->
sig
.
evsig_€ught
) {

327 
	`evsig_іoыss
(
ba£
);

330 iа(
wЪ32Ё
->
їad£t_out
->
fd_couЅ
) {

331 
i
 = 
	`њnd
(и% 
wЪ32Ё
->
їad£t_out
->
fd_couЅ
;

332 
j
=0; j<
wЪ32Ё
->
їad£t_out
->
fd_couЅ
; ++j) {

333 iа(++
i
 >р
wЪ32Ё
->
їad£t_out
->
fd_couЅ
)

334 
i
 = 0;

335 
s
 = 
wЪ32Ё
->
їad£t_out
->
fd_ђњy
[
i
];

336 
	`evm≠_io_aщive
(
ba£
, 
s
, 
EV_READ
);

339 iа(
wЪ32Ё
->
ex£t_out
->
fd_couЅ
) {

340 
i
 = 
	`њnd
(и% 
wЪ32Ё
->
ex£t_out
->
fd_couЅ
;

341 
j
=0; j<
wЪ32Ё
->
ex£t_out
->
fd_couЅ
; ++j) {

342 iа(++
i
 >р
wЪ32Ё
->
ex£t_out
->
fd_couЅ
)

343 
i
 = 0;

344 
s
 = 
wЪ32Ё
->
ex£t_out
->
fd_ђњy
[
i
];

345 
	`evm≠_io_aщive
(
ba£
, 
s
, 
EV_WRITE
);

348 iа(
wЪ32Ё
->
wrЩe£t_out
->
fd_couЅ
) {

349 
SOCKET
 
s
;

350 
i
 = 
	`њnd
(и% 
wЪ32Ё
->
wrЩe£t_out
->
fd_couЅ
;

351 
j
=0; j<
wЪ32Ё
->
wrЩe£t_out
->
fd_couЅ
; ++j) {

352 iа(++
i
 >р
wЪ32Ё
->
wrЩe£t_out
->
fd_couЅ
)

353 
i
 = 0;

354 
s
 = 
wЪ32Ё
->
wrЩe£t_out
->
fd_ђњy
[
i
];

355 
	`evm≠_io_aщive
(
ba£
, 
s
, 
EV_WRITE
);

359 
	}
}

362 
	$wЪ32_dЧќoc
(
evТt_ba£
 *
_ba£
)

364 
wЪ32Ё
 *wЪ32Ё = 
_ba£
->
evba£
;

366 
	`evsig_dЧќoc
(
_ba£
);

367 iа(
wЪ32Ё
->
їad£t_Ъ
)

368 
	`mm_дУ
(
wЪ32Ё
->
їad£t_Ъ
);

369 iа(
wЪ32Ё
->
wrЩe£t_Ъ
)

370 
	`mm_дУ
(
wЪ32Ё
->
wrЩe£t_Ъ
);

371 iа(
wЪ32Ё
->
їad£t_out
)

372 
	`mm_дУ
(
wЪ32Ё
->
їad£t_out
);

373 iа(
wЪ32Ё
->
wrЩe£t_out
)

374 
	`mm_дУ
(
wЪ32Ё
->
wrЩe£t_out
);

375 iа(
wЪ32Ё
->
ex£t_out
)

376 
	`mm_дУ
(
wЪ32Ё
->
ex£t_out
);

379 
	`mem£t
(
wЪ32Ё
, 0, (win32op));

380 
	`mm_дУ
(
wЪ32Ё
);

381 
	}
}

	@/usr/include/arpa/inet.h

19 #iвdeа
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<г©uїs.h
>

23 
	~<√tЪС/Ъ.h
>

26 #iвdeа
__sockЋn_t_defЪed


27 
__sockЋn_t
 
	tsockЋn_t
;

28 
	#__sockЋn_t_defЪed


	)

31 
__BEGIN_DECLS


35 
Ъ_addr_t
 
	$ЪС_addr
 (
__cЏ°
 *
__э
и
__THROW
;

38 
Ъ_addr_t
 
	$ЪС_ aof
 (
Ъ_addr
 
__Ъ
и
__THROW
;

42 
Ъ_addr
 
	$ЪС_makЧddr
 (
Ъ_addr_t
 
__√t
, in_addr_И
__ho°
)

43 
__THROW
;

46 
Ъ_addr_t
 
	$ЪС_√tof
 (
Ъ_addr
 
__Ъ
и
__THROW
;

50 
Ъ_addr_t
 
	$ЪС_√tw№k
 (
__cЏ°
 *
__э
и
__THROW
;

54 *
	$ЪС_Ѕя
 (
Ъ_addr
 
__Ъ
и
__THROW
;

59 
	$ЪС_±Џ
 (
__af
, 
__cЏ°
 *
__ї°riщ
 
__э
,

60 *
__ї°riщ
 
__buf
и
__THROW
;

65 
__cЏ°
 *
	$ЪС_ЅЁ
 (
__af
, 
__cЏ°
 *
__ї°riщ
 
__э
,

66 *
__ї°riщ
 
__buf
, 
sockЋn_t
 
__Ћn
)

67 
__THROW
;

71 #ifdeа
__USE_MISC


74 
	$ЪС_©Џ
 (
__cЏ°
 *
__э
, 
Ъ_addr
 *
__Ъp
и
__THROW
;

78 *
	$ЪС_√П
 (
Ъ_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Ћn
и
__THROW
;

83 *
	$ЪС_√t_ЅЁ
 (
__af
, 
__cЏ°
 *
__э
, 
__bЩs
,

84 *
__buf
, 
size_t
 
__Ћn
и
__THROW
;

89 
	$ЪС_√t_±Џ
 (
__af
, 
__cЏ°
 *
__э
,

90 *
__buf
, 
size_t
 
__Ћn
и
__THROW
;

95 
	$ЪС_nІp_addr
 (
__cЏ°
 *
__э
,

96 *
__buf
, 
__Ћn
и
__THROW
;

100 *
	$ЪС_nІp_Ѕя
 (
__Ћn
, 
__cЏ°
 *
__э
,

101 *
__buf
и
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #undeа
_ASSERT_H


27 #undeа
as£є


28 #undeа
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #undeа
as£є_≥Љ№


36 
	#_ASSERT_H
 1

	)

37 
	~<г©uїs.h
>

39 #iа
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_€°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£є
(
exі
и(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£є_≥Љ№
(
ФЇum
и(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #iвdeа
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£є_зЮ
 (
__cЏ°
 *
__as£єiЏ
, __cЏ° *
__fЮe
,

72 
__lЪe
, 
__cЏ°
 *
__funщiЏ
)

73 
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

76 
	$__as£є_≥Љ№_зЮ
 (
__ФЇum
, 
__cЏ°
 *
__fЮe
,

77 
__lЪe
,

78 
__cЏ°
 *
__funщiЏ
)

79 
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

84 
	$__as£є
 (cЏ° *
__as£єiЏ
, cЏ° *
__fЮe
, 
__lЪe
)

85 
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

88 
__END_DECLS


91 
	#as£є
(
exі
) \

92 ((
exі
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£є_зЮ
 (
	`__STRING
(
exі
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£є_≥Љ№
(
ФЇum
) \

98 (!(
ФЇum
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£є_≥Љ№_зЮ
 ((
ФЇum
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #iа
defЪed
 
__эlu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #iа
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__cЏ°
 *и0)

	)

	@/usr/include/ctype.h

24 #iвdef 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<г©uїs.h
>

28 
	~<bЩs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #iвdeа
_ISbЩ


41 
	~<ТdЯn.h
>

42 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


43 
	#_ISbЩ
(
bЩ
и(1 << (bЩ))

	)

45 
	#_ISbЩ
(
bЩ
и((bЩи< 8 ? ((1 << (bЩ)и<< 8и: ((1 << (bЩ)и>> 8))

	)

50 
	m_ISuµФ
 = 
_ISbЩ
 (0),

51 
	m_ISlowФ
 = 
_ISbЩ
 (1),

52 
	m_ISЃpha
 = 
_ISbЩ
 (2),

53 
	m_ISdigЩ
 = 
_ISbЩ
 (3),

54 
	m_ISxdigЩ
 = 
_ISbЩ
 (4),

55 
	m_IS•aы
 = 
_ISbЩ
 (5),

56 
	m_ISіЪt
 = 
_ISbЩ
 (6),

57 
	m_ISgњph
 = 
_ISbЩ
 (7),

58 
	m_ISbѕnk
 = 
_ISbЩ
 (8),

59 
	m_ISъМl
 = 
_ISbЩ
 (9),

60 
	m_ISpunщ
 = 
_ISbЩ
 (10),

61 
	m_ISЃnum
 = 
_ISbЩ
 (11)

81 
__cЏ°
 **
	$__щy≥_b_loc
 ()

82 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°
));

83 
__cЏ°
 
__Ъt32_t
 **
	$__щy≥_tёowФ_loc
 ()

84 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°
));

85 
__cЏ°
 
__Ъt32_t
 **
	$__щy≥_touµФ_loc
 ()

86 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°
));

88 
	#__isщy≥
(
c
, 
ty≥
) \

89 ((*
	`__щy≥_b_loc
 ())[(и(
c
)] & (и
ty≥
)

	)

91 
	#__iІscii
(
c
и(((cи& ~0x7fи=р0и

	)

92 
	#__tяscii
(
c
и((cи& 0x7fи

	)

94 
	#__exщy≥
(
«me
и
	`«me
 (и
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__exщy≥
 (
iІ um
);

103 
	`__exщy≥
 (
iІЌha
);

104 
	`__exщy≥
 (
isъМl
);

105 
	`__exщy≥
 (
isdigЩ
);

106 
	`__exщy≥
 (
i¶owФ
);

107 
	`__exщy≥
 (
isgњph
);

108 
	`__exщy≥
 (
i•rЪt
);

109 
	`__exщy≥
 (
i•unщ
);

110 
	`__exщy≥
 (
is•aы
);

111 
	`__exщy≥
 (
isuµФ
);

112 
	`__exщy≥
 (
isxdigЩ
);

116 
	$tёowФ
 (
__c
и
__THROW
;

119 
	$touµФ
 (
__c
и
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__exщy≥
 (
isbѕnk
);

130 
__END_NAMESPACE_C99


133 #ifdeа
__USE_GNU


135 
	$isщy≥
 (
__c
, 
__mask
и
__THROW
;

138 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_MISC
 || defЪed 
__USE_XOPEN


142 
	$iІscii
 (
__c
и
__THROW
;

146 
	$tяscii
 (
__c
и
__THROW
;

150 
	`__exщy≥
 (
_touµФ
);

151 
	`__exщy≥
 (
_tёowФ
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
ђgs
) \

156 (
__exЛnsiЏ__
 \

157 ({ 
__їs
; \

158 iа( (
c
) > 1) \

160 iа(
	`__buЮtЪ_cЏ°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__їs
 = 
__c
 < -128 || __ш> 255 ? __ш: (
a
)[__c]; \

166 
__їs
 = 
f
 
ђgs
; \

169 
__їs
 = (
a
)[(и(
c
)]; \

170 
__їs
; 
	}
}))

	)

172 #iа!
defЪed
 
__NO_CTYPE
 && !defЪed 
__эlu•lus


173 
	#iІ um
(
c
и
	`__isщy≥
((c), 
_ISЃnum
)

	)

174 
	#iІЌha
(
c
и
	`__isщy≥
((c), 
_ISЃpha
)

	)

175 
	#isъМl
(
c
и
	`__isщy≥
((c), 
_ISъМl
)

	)

176 
	#isdigЩ
(
c
и
	`__isщy≥
((c), 
_ISdigЩ
)

	)

177 
	#i¶owФ
(
c
и
	`__isщy≥
((c), 
_ISlowФ
)

	)

178 
	#isgњph
(
c
и
	`__isщy≥
((c), 
_ISgњph
)

	)

179 
	#i•rЪt
(
c
и
	`__isщy≥
((c), 
_ISіЪt
)

	)

180 
	#i•unщ
(
c
и
	`__isщy≥
((c), 
_ISpunщ
)

	)

181 
	#is•aы
(
c
и
	`__isщy≥
((c), 
_IS•aы
)

	)

182 
	#isuµФ
(
c
и
	`__isщy≥
((c), 
_ISuµФ
)

	)

183 
	#isxdigЩ
(
c
и
	`__isщy≥
((c), 
_ISxdigЩ
)

	)

185 #ifdeа
__USE_ISOC99


186 
	#isbѕnk
(
c
и
	`__isщy≥
((c), 
_ISbѕnk
)

	)

189 #ifdeа
__USE_EXTERN_INLINES


190 
__exЛЇ_ЪlЪe
 

191 
__NTH
 (
	$tёowФ
 (
__c
))

193  
__c
 >р-128 && __ш< 256 ? (*
	`__щy≥_tёowФ_loc
 ())[__c] : __c;

194 
	}
}

196 
__exЛЇ_ЪlЪe
 

197 
__NTH
 (
	$touµФ
 (
__c
))

199  
__c
 >р-128 && __ш< 256 ? (*
	`__щy≥_touµФ_loc
 ())[__c] : __c;

200 
	}
}

203 #iа
__GNUC__
 >р2 && 
defЪed
 
__OPTIMIZE__
 && !defЪed 
__эlu•lus


204 
	#tёowФ
(
c
и
	`__tobody
 (c, 
tёowФ
, *
	`__щy≥_tёowФ_loc
 (), (c))

	)

205 
	#touµФ
(
c
и
	`__tobody
 (c, 
touµФ
, *
	`__щy≥_touµФ_loc
 (), (c))

	)

208 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_MISC
 || defЪed 
__USE_XOPEN


209 
	#iІscii
(
c
и
	`__iІscii
 (c)

	)

210 
	#tяscii
(
c
и
	`__tяscii
 (c)

	)

212 
	#_tёowФ
(
c
и((и(*
	`__щy≥_tёowФ_loc
 ())[(и(c)])

	)

213 
	#_touµФ
(
c
и((и(*
	`__щy≥_touµФ_loc
 ())[(и(c)])

	)

219 #ifdeа
__USE_XOPEN2K8


233 
	~<xlo€Ћ.h
>

237 
	#__isщy≥_l
(
c
, 
ty≥
, 
lo€Ћ
) \

238 ((
lo€Ћ
)->
__щy≥_b
[(и(
c
)] & (и
ty≥
)

	)

240 
	#__exщy≥_l
(
«me
) \

241 
	`«me
 (, 
__lo€Ћ_t
и
__THROW


	)

247 
__exщy≥_l
 (
iІ um_l
);

248 
__exщy≥_l
 (
iІЌha_l
);

249 
__exщy≥_l
 (
isъМl_l
);

250 
__exщy≥_l
 (
isdigЩ_l
);

251 
__exщy≥_l
 (
i¶owФ_l
);

252 
__exщy≥_l
 (
isgњph_l
);

253 
__exщy≥_l
 (
i•rЪt_l
);

254 
__exщy≥_l
 (
i•unщ_l
);

255 
__exщy≥_l
 (
is•aы_l
);

256 
__exщy≥_l
 (
isuµФ_l
);

257 
__exщy≥_l
 (
isxdigЩ_l
);

259 
__exщy≥_l
 (
isbѕnk_l
);

263 
	$__tёowФ_l
 (
__c
, 
__lo€Ћ_t
 
__l
и
__THROW
;

264 
	$tёowФ_l
 (
__c
, 
__lo€Ћ_t
 
__l
и
__THROW
;

267 
	$__touµФ_l
 (
__c
, 
__lo€Ћ_t
 
__l
и
__THROW
;

268 
	$touµФ_l
 (
__c
, 
__lo€Ћ_t
 
__l
и
__THROW
;

270 #iа
__GNUC__
 >р2 && 
defЪed
 
__OPTIMIZE__
 && !defЪed 
__эlu•lus


271 
	#__tёowФ_l
(
c
, 
lo€Ћ
) \

272 
	`__tobody
 (
c
, 
__tёowФ_l
, (
lo€Ћ
)->
__щy≥_tёowФ
, (c,Жo€Ћ))

	)

273 
	#__touµФ_l
(
c
, 
lo€Ћ
) \

274 
	`__tobody
 (
c
, 
__touµФ_l
, (
lo€Ћ
)->
__щy≥_touµФ
, (c,Жo€Ћ))

	)

275 
	#tёowФ_l
(
c
, 
lo€Ћ
и
	`__tёowФ_l
 ((c), (lo€Ћ))

	)

276 
	#touµФ_l
(
c
, 
lo€Ћ
и
	`__touµФ_l
 ((c), (lo€Ћ))

	)

280 #iвdeа
__NO_CTYPE


281 
	#__iІ um_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISЃnum
, (l))

	)

282 
	#__iІЌha_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISЃpha
, (l))

	)

283 
	#__isъМl_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISъМl
, (l))

	)

284 
	#__isdigЩ_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISdigЩ
, (l))

	)

285 
	#__i¶owФ_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISlowФ
, (l))

	)

286 
	#__isgњph_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISgњph
, (l))

	)

287 
	#__i•rЪt_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISіЪt
, (l))

	)

288 
	#__i•unщ_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISpunщ
, (l))

	)

289 
	#__is•aы_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_IS•aы
, (l))

	)

290 
	#__isuµФ_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISuµФ
, (l))

	)

291 
	#__isxdigЩ_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISxdigЩ
, (l))

	)

293 
	#__isbѕnk_l
(
c
,
l
и
	`__isщy≥_l
((c), 
_ISbѕnk
, (l))

	)

295 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_MISC


296 
	#__iІscii_l
(
c
,
l
и(÷), 
	`__iІscii
 (c))

	)

297 
	#__tяscii_l
(
c
,
l
и(÷), 
	`__tяscii
 (c))

	)

300 
	#iІ um_l
(
c
,
l
и
	`__iІ um_l
 ((c), (l))

	)

301 
	#iІЌha_l
(
c
,
l
и
	`__iІЌha_l
 ((c), (l))

	)

302 
	#isъМl_l
(
c
,
l
и
	`__isъМl_l
 ((c), (l))

	)

303 
	#isdigЩ_l
(
c
,
l
и
	`__isdigЩ_l
 ((c), (l))

	)

304 
	#i¶owФ_l
(
c
,
l
и
	`__i¶owФ_l
 ((c), (l))

	)

305 
	#isgњph_l
(
c
,
l
и
	`__isgњph_l
 ((c), (l))

	)

306 
	#i•rЪt_l
(
c
,
l
и
	`__i•rЪt_l
 ((c), (l))

	)

307 
	#i•unщ_l
(
c
,
l
и
	`__i•unщ_l
 ((c), (l))

	)

308 
	#is•aы_l
(
c
,
l
и
	`__is•aы_l
 ((c), (l))

	)

309 
	#isuµФ_l
(
c
,
l
и
	`__isuµФ_l
 ((c), (l))

	)

310 
	#isxdigЩ_l
(
c
,
l
и
	`__isxdigЩ_l
 ((c), (l))

	)

312 
	#isbѕnk_l
(
c
,
l
и
	`__isbѕnk_l
 ((c), (l))

	)

314 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_MISC


315 
	#iІscii_l
(
c
,
l
и
	`__iІscii_l
 ((c), (l))

	)

316 
	#tяscii_l
(
c
,
l
и
	`__tяscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #iвdef 
_ERRNO_H


27 #iвdef 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<г©uїs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bЩs/ФЇo.h
>

37 #undeа
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #iвdef 
ФЇo


47 
ФЇo
;

50 #ifdeа
__USE_GNU


55 *
іogњm_Ъvo€tiЏ_«me
, *
іogњm_Ъvo€tiЏ_sh№t_«me
;

59 
	g__END_DECLS


67 #iа
defЪed
 
__USE_GNU
 || defЪed 
__√ed_Фr№_t


68 #iвdeа
__Фr№_t_defЪed


69 
	tФr№_t
;

70 
	#__Фr№_t_defЪed
 1

	)

72 #undeа
__√ed_Фr№_t


	@/usr/include/fcntl.h

24 #iвdef 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<г©uїs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bЩs/fъО.h
>

37 #ifdeа
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #iвdeа
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifdeа
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifdeа
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
fъО
 (
__fd
, 
__cmd
, ...);

84 #iвdeа
__USE_FILE_OFFSET64


85 
	$ЁТ
 (
__cЏ°
 *
__fЮe
, 
__oжag
, ...и
	`__nЏnuќ
 ((1));

87 #ifdeа
__REDIRECT


88 
	`__REDIRECT
 (
ЁТ
, (
__cЏ°
 *
__fЮe
, 
__oжag
, ...), 
ЁТ64
)

89 
	`__nЏnuќ
 ((1));

91 
	#ЁТ
 
ЁТ64


	)

94 #ifdeа
__USE_LARGEFILE64


95 
	$ЁТ64
 (
__cЏ°
 *
__fЮe
, 
__oжag
, ...и
	`__nЏnuќ
 ((1));

98 #ifdeа
__USE_ATFILE


108 #iвdeа
__USE_FILE_OFFSET64


109 
	$ЁТ©
 (
__fd
, 
__cЏ°
 *
__fЮe
, 
__oжag
, ...)

110 
	`__nЏnuќ
 ((2));

112 #ifdeа
__REDIRECT


113 
	`__REDIRECT
 (
ЁТ©
, (
__fd
, 
__cЏ°
 *
__fЮe
, 
__oжag
,

114 ...), 
ЁТ©64
и
	`__nЏnuќ
 ((2));

116 
	#ЁТ©
 
ЁТ©64


	)

120 
	$ЁТ©64
 (
__fd
, 
__cЏ°
 *
__fЮe
, 
__oжag
, ...)

121 
	`__nЏnuќ
 ((2));

129 #iвdeа
__USE_FILE_OFFSET64


130 
	$ьЧt
 (
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
и
	`__nЏnuќ
 ((1));

132 #ifdeа
__REDIRECT


133 
	`__REDIRECT
 (
ьЧt
, (
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
),

134 
ьЧt64
и
	`__nЏnuќ
 ((1));

136 
	#ьЧt
 
ьЧt64


	)

139 #ifdeа
__USE_LARGEFILE64


140 
	$ьЧt64
 (
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
и
	`__nЏnuќ
 ((1));

143 #iа!
defЪed
 
F_LOCK
 && (defЪed 
__USE_MISC
 || (defЪed 
__USE_XOPEN_EXTENDED
 \

144 && !
defЪed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #iвdeа
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Ћn
);

161 #ifdeа
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Ћn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifdeа
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Ћn
);

172 #ifdeа
__USE_XOPEN2K


175 #iвdeа
__USE_FILE_OFFSET64


176 
	$posix_зdvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_И
__Ћn
,

177 
__advi£
и
__THROW
;

179 #ifdeа
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_зdvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Ћn
, 
__advi£
),

182 
posix_зdvi£64
);

184 
	#posix_зdvi£
 
posix_зdvi£64


	)

187 #ifdeа
__USE_LARGEFILE64


188 
	$posix_зdvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_И
__Ћn
,

189 
__advi£
и
__THROW
;

197 #iвdeа
__USE_FILE_OFFSET64


198 
	`posix_зќo€Л
 (
__fd
, 
__off_t
 
__off£t
, __off_И
__Ћn
);

200 #ifdeа
__REDIRECT


201 
	`__REDIRECT
 (
posix_зќo€Л
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Ћn
),

203 
posix_зќo€Л64
);

205 
	#posix_зќo€Л
 
posix_зќo€Л64


	)

208 #ifdeа
__USE_LARGEFILE64


209 
	`posix_зќo€Л64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_И
__Ћn
);

215 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe
 \

216 && 
defЪed
 
__va_ђg_Јck_Ћn


217 
	~<bЩs/fъО2.h
>

220 
__END_DECLS


	@/usr/include/inttypes.h

23 #iвdeа
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<г©uїs.h
>

28 
	~<°dЪt.h
>

31 #iвdeа
____gwchђ_t_defЪed


32 #ifdeа
__эlu•lus


33 
	#__gwchђ_t
 
wchђ_t


	)

34 #Цiа
defЪed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwchђ_t
;

37 
	#__√ed_wchђ_t


	)

38 
	~<°ddef.h
>

39 
wchђ_t
 
	t__gwchђ_t
;

41 
	#____gwchђ_t_defЪed
 1

	)

47 #iа!
defЪed
 
__эlu•lus
 || defЪed 
__STDC_FORMAT_MACROS


49 #iа
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "ќ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #iа
__WORDSIZE
 == 64

281 
	mquў
;

282 
	mїm
;

283 } 
	timaxdiv_t
;

290 
	mquў
;

291 
	mїm
;

292 } 
	timaxdiv_t
;

298 
Ъtmax_t
 
	$imaxabs
 (
Ъtmax_t
 
__n
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
Ъtmax_t
 
__numФ
, iЅmax_И
__dТom
)

302 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

305 
Ъtmax_t
 
	$°єoimax
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

306 **
__ї°riщ
 
__Тd±r
, 
__ba£
и
__THROW
;

309 
uЪtmax_t
 
	$°єoumax
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

310 ** 
__ї°riщ
 
__Тd±r
, 
__ba£
и
__THROW
;

313 
Ъtmax_t
 
	$wc°oimax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
__≈М
,

314 
__gwchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

315 
__THROW
;

318 
uЪtmax_t
 
	$wc°oumax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
__≈М
,

319 
__gwchђ_t
 ** 
__ї°riщ
 
__Тd±r
, 
__ba£
)

320 
__THROW
;

322 #ifdeа
__USE_EXTERN_INLINES


324 #iа
__WORDSIZE
 == 64

326 
	$__°єё_ЪЛЇЃ
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

327 **
__ї°riщ
 
__Тd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

331 
__exЛЇ_ЪlЪe
 
Ъtmax_t


332 
	`__NTH
 (
	$°єoimax
 (
__cЏ°
 *
__ї°riщ
 
≈М
, **__ї°riщ 
Тd±r
,

333 
ba£
))

335  
	`__°єё_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°єoul_ЪЛЇЃ
 (
__cЏ°
 *

339 
__ї°riщ
 
__≈М
,

340 ** 
__ї°riщ
 
__Тd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

344 
__exЛЇ_ЪlЪe
 
uЪtmax_t


345 
	`__NTH
 (
	$°єoumax
 (
__cЏ°
 *
__ї°riщ
 
≈М
, **__ї°riщ 
Тd±r
,

346 
ba£
))

348  
	`__°єoul_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ё_ЪЛЇЃ
 (
__cЏ°
 
__gwchђ_t
 * 
__ї°riщ
 
__≈М
,

352 
__gwchђ_t
 **
__ї°riщ
 
__Тd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

356 
__exЛЇ_ЪlЪe
 
Ъtmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
≈М
,

358 
__gwchђ_t
 **
__ї°riщ
 
Тd±r
, 
ba£
))

360  
	`__wc°ё_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_ЪЛЇЃ
 (
__cЏ°
 
__gwchђ_t
 *

364 
__ї°riщ
 
__≈М
,

365 
__gwchђ_t
 **

366 
__ї°riщ
 
__Тd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

370 
__exЛЇ_ЪlЪe
 
uЪtmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
≈М
,

372 
__gwchђ_t
 **
__ї°riщ
 
Тd±r
, 
ba£
))

374  
	`__wc°oul_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

375 
	}
}

379 
__exЛnsiЏ__


380 
	$__°єёl_ЪЛЇЃ
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

381 **
__ї°riщ
 
__Тd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

385 
__exЛЇ_ЪlЪe
 
Ъtmax_t


386 
	`__NTH
 (
	$°єoimax
 (
__cЏ°
 *
__ї°riщ
 
≈М
, **__ї°riщ 
Тd±r
,

387 
ba£
))

389  
	`__°єёl_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

390 
	}
}

392 
__exЛnsiЏ__


393 
	$__°єouќ_ЪЛЇЃ
 (
__cЏ°
 *

394 
__ї°riщ
 
__≈М
,

396 
__ї°riщ
 
__Тd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

401 
__exЛЇ_ЪlЪe
 
uЪtmax_t


402 
	`__NTH
 (
	$°єoumax
 (
__cЏ°
 *
__ї°riщ
 
≈М
, **__ї°riщ 
Тd±r
,

403 
ba£
))

405  
	`__°єouќ_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

406 
	}
}

408 
__exЛnsiЏ__


409 
	$__wc°ёl_ЪЛЇЃ
 (
__cЏ°
 
__gwchђ_t
 *

410 
__ї°riщ
 
__≈М
,

411 
__gwchђ_t
 **
__ї°riщ
 
__Тd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

415 
__exЛЇ_ЪlЪe
 
Ъtmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
≈М
,

417 
__gwchђ_t
 **
__ї°riщ
 
Тd±r
, 
ba£
))

419  
	`__wc°ёl_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

420 
	}
}

423 
__exЛnsiЏ__


424 
	$__wc°ouќ_ЪЛЇЃ
 (
__cЏ°
 
__gwchђ_t
 *

425 
__ї°riщ
 
__≈М
,

426 
__gwchђ_t
 **

427 
__ї°riщ
 
__Тd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

432 
__exЛЇ_ЪlЪe
 
uЪtmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__cЏ°
 
__gwchђ_t
 *
__ї°riщ
 
≈М
,

434 
__gwchђ_t
 **
__ї°riщ
 
Тd±r
, 
ba£
))

436  
	`__wc°ouќ_ЪЛЇЃ
 (
≈М
, 
Тd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #iвdeа
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<г©uїs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #iа!
defЪed
 
__GNUC__
 || __GNUC__ < 2

43 #iвdeа
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bЩs/w№dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifdeа
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #iа
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #iа
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifdeа
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #iа
defЪed
 
__GNUC__
 && !defЪed 
_GCC_LIMITS_H_


125 #Ъюude_√xИ<
limЩs
.
h
>

131 #iа
defЪed
 
__USE_ISOC99
 && defЪed 
__GNUC__


132 #iвdeа
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #iвdeа
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #iвdeа
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bЩs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bЩs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bЩs/xЁТ_lim.h
>

	@/usr/include/math.h

25 #iвdef 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<г©uїs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bЩs/huge_vЃ.h
>

35 #ifdeа
__USE_ISOC99


36 
	~<bЩs/huge_vЃf.h
>

37 
	~<bЩs/huge_vЃl.h
>

40 
	~<bЩs/Ъf.h
>

43 
	~<bЩs/«n.h
>

47 
	~<bЩs/m©hdef.h
>

54 
	#__MATHCALL
(
funщiЏ
,
suffix
, 
ђgs
) \

55 
	`__MATHDECL
 (
_MdoubЋ_
,
funщiЏ
,
suffix
, 
ђgs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
funщiЏ
),
suffix
, 
ђgs
)

	)

59 
	#__MATHCALLX
(
funщiЏ
,
suffix
, 
ђgs
, 
©Мib
) \

60 
	`__MATHDECLX
 (
_MdoubЋ_
,
funщiЏ
,
suffix
, 
ђgs
, 
©Мib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
, 
©Мib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
и
	`__©МibuЛ__
 (
©Мib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
funщiЏ
),
suffix
, 
ђgs
и
	`__©МibuЛ__
 (
©Мib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
funщiЏ
,
suffix
и
ђgs
 
__THROW


	)

67 
	#_MdoubЋ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
и
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubЋ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubЋ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bЩs/m©h€ќs.h
>

72 #undeа
_MdoubЋ_


73 #undeа
_MdoubЋ_BEGIN_NAMESPACE


74 #undeа
_MdoubЋ_END_NAMESPACE


75 #undeа
__MATH_PRECNAME


77 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_ISOC99


83 #iвdeа
_Mжяt_


84 
	#_Mжяt_
 

	)

86 
	#_MdoubЋ_
 
_Mжяt_


	)

87 #ifdeа
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
и«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
и«mР
f
 
	)
r

92 
	#_MdoubЋ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubЋ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bЩs/m©h€ќs.h
>

95 #undeа
_MdoubЋ_


96 #undeа
_MdoubЋ_BEGIN_NAMESPACE


97 #undeа
_MdoubЋ_END_NAMESPACE


98 #undeа
__MATH_PRECNAME


100 #iа(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
defЪed
 
__NO_LONG_DOUBLE_MATH
 || defЪed 
__LDBL_COMPAT
)

102 #ifdeа
__LDBL_COMPAT


104 #ifdeа
__USE_ISOC99


105 
	$__∆dbl_√xЙowђdf
 (
__x
, 
__y
)

106 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

107 #ifdeа
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xЙowђdf
, (
__x
, 
__y
),

109 
__∆dbl_√xЙowђdf
)

110 
	`__©МibuЛ__
 ((
__cЏ°__
));

111 
	`__REDIRECT_NTH
 (
√xЙowђd
, (
__x
, 
__y
),

112 
√xПбФ
и
	`__©МibuЛ__
 ((
__cЏ°__
));

113 
	`__REDIRECT_NTH
 (
√xЙowђdl
,

114 (
__x
, 
__y
),

115 
√xПбФ
и
	`__©МibuЛ__
 ((
__cЏ°__
));

122 #undeа
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
, 
ЃЯs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
funщiЏ
,
suffix
), \

125 
ђgs
, 
ЃЯs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
funщiЏ
,
suffix
, 
ђgs
, 
	`__CONCAT
(funщiЏ,suffix))

	)

130 #iвdeа
_MlЏg_doubЋ_


131 
	#_MlЏg_doubЋ_
 

	)

133 
	#_MdoubЋ_
 
_MlЏg_doubЋ_


	)

134 #ifdeа
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
и«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
и«mР
l
 
	)
r

139 
	#_MdoubЋ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubЋ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bЩs/m©h€ќs.h
>

142 #undeа
_MdoubЋ_


143 #undeа
_MdoubЋ_BEGIN_NAMESPACE


144 #undeа
_MdoubЋ_END_NAMESPACE


145 #undeа
__MATH_PRECNAME


150 #undeа
__MATHDECL_1


151 #undeа
__MATHDECL


152 #undeа
__MATHCALL


155 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN


157 
signgam
;

162 #ifdeа
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifdeа
__NO_LONG_DOUBLE_MATH


214 
	#еюassify
(
x
) \

215 ( (
x
и=р (и? 
	`__еюassifyf
 (xи: 
	`__еюassify
 (x))

	)

217 
	#еюassify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__еюassifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__еюassify
 (
x
и: 
	`__еюassifyl
 (x))

	)

225 #ifdeа
__NO_LONG_DOUBLE_MATH


226 
	#signbЩ
(
x
) \

227 ( (
x
и=р (и? 
	`__signbЩf
 (xи: 
	`__signbЩ
 (x))

	)

229 
	#signbЩ
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbЩf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbЩ
 (
x
и: 
	`__signbЩl
 (x))

	)

237 #ifdeа
__NO_LONG_DOUBLE_MATH


238 
	#isfЪЩe
(
x
) \

239 ( (
x
и=р (и? 
	`__fЪЩef
 (xи: 
	`__fЪЩe
 (x))

	)

241 
	#isfЪЩe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__fЪЩef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__fЪЩe
 (
x
и: 
	`__fЪЩЦ
 (x))

	)

249 
	#iҐ№mЃ
(
x
и(
	`еюassify
 (xи=р
FP_NORMAL
)

	)

253 #ifdeа
__NO_LONG_DOUBLE_MATH


254 
	#iҐ™
(
x
) \

255 ( (
x
и=р (и? 
	`__iҐ™f
 (xи: 
	`__iҐ™
 (x))

	)

257 
	#iҐ™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__iҐ™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__iҐ™
 (
x
и: 
	`__iҐ™l
 (x))

	)

265 #ifdeа
__NO_LONG_DOUBLE_MATH


266 
	#isЪf
(
x
) \

267 ( (
x
и=р (и? 
	`__isЪff
 (xи: 
	`__isЪf
 (x))

	)

269 
	#isЪf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isЪff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isЪf
 (
x
и: 
	`__isЪж
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

282 #ifdef 
__USE_MISC


286 
_IEEE_
 = -1,

287 
_SVID_
,

288 
_XOPEN_
,

289 
_POSIX_
,

290 
_ISOC_


291 } 
	t_LIB_VERSION_TYPE
;

296 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

300 #ifdeа
__USE_SVID


306 #ifdeа
__эlu•lus


307 
__exы±iЏ


309 
exы±iЏ


312 
ty≥
;

313 *
«me
;

314 
ђg1
;

315 
ђg2
;

316 
їtvЃ
;

317 
	}
};

319 #ifdeа
__эlu•lus


320 
	$m©hФr
 (
__exы±iЏ
 *
__exc
и
	`throw
 ();

322 
	`m©hФr
 (
exы±iЏ
 *
__exc
);

325 
	#X_TLOSS
 1.41484755040568800000e+16

	)

328 
	#DOMAIN
 1

	)

329 
	#SING
 2

	)

330 
	#OVERFLOW
 3

	)

331 
	#UNDERFLOW
 4

	)

332 
	#TLOSS
 5

	)

333 
	#PLOSS
 6

	)

336 
	#HUGE
 3.40282347e+38F

	)

340 #ifdeа
__USE_XOPEN


342 
	#MAXFLOAT
 3.40282347e+38F

	)

349 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN


350 
	#M_E
 2.7182818284590452354

	)

351 
	#M_LOG2E
 1.4426950408889634074

	)

352 
	#M_LOG10E
 0.43429448190325182765

	)

353 
	#M_LN2
 0.69314718055994530942

	)

354 
	#M_LN10
 2.30258509299404568402

	)

355 
	#M_PI
 3.14159265358979323846

	)

356 
	#M_PI_2
 1.57079632679489661923

	)

357 
	#M_PI_4
 0.78539816339744830962

	)

358 
	#M_1_PI
 0.31830988618379067154

	)

359 
	#M_2_PI
 0.63661977236758134308

	)

360 
	#M_2_SQRTPI
 1.12837916709551257390

	)

361 
	#M_SQRT2
 1.41421356237309504880

	)

362 
	#M_SQRT1_2
 0.70710678118654752440

	)

368 #ifdeа
__USE_GNU


369 
	#M_El
 2.7182818284590452353602874713526625L

	)

370 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

371 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

372 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

373 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

374 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

375 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

376 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

377 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

378 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

379 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

380 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

381 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

388 #iа
defЪed
 
__STRICT_ANSI__
 && !defЪed 
__NO_MATH_INLINES


389 
	#__NO_MATH_INLINES
 1

	)

392 #iа
defЪed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

399 
	#isgї©Ф
(
x
, 
y
и
	`__buЮtЪ_isgї©Ф
(x, y)

	)

400 
	#isgї©ФequЃ
(
x
, 
y
и
	`__buЮtЪ_isgї©ФequЃ
(x, y)

	)

401 
	#i¶ess
(
x
, 
y
и
	`__buЮtЪ_i¶ess
(x, y)

	)

402 
	#i¶es£quЃ
(
x
, 
y
и
	`__buЮtЪ_i¶es£quЃ
(x, y)

	)

403 
	#i¶essgї©Ф
(
x
, 
y
и
	`__buЮtЪ_i¶essgї©Ф
(x, y)

	)

404 
	#isun№dФed
(
u
, 
v
и
	`__buЮtЪ_isun№dФed
(u, v)

	)

408 #ifdeа
__USE_EXTERN_INLINES


409 
	~<bЩs/m©hЪlЪe.h
>

412 #ifdeа
__USE_ISOC99


416 #iвdeа
isgї©Ф


417 
	#isgї©Ф
(
x
, 
y
) \

418 (
__exЛnsiЏ__
 \

419 ({ 
	`__ty≥of__
(
x
и
__x
 = (x); __ty≥of__(
y
и
__y
 = (y); \

420 !
	`isun№dФed
 (
__x
, 
__y
и&& __x > __y; 
	}
}))

	)

424 #iвdeа
isgї©ФequЃ


425 
	#isgї©ФequЃ
(
x
, 
y
) \

426 (
__exЛnsiЏ__
 \

427 ({ 
	`__ty≥of__
(
x
и
__x
 = (x); __ty≥of__(
y
и
__y
 = (y); \

428 !
	`isun№dФed
 (
__x
, 
__y
и&& __x >р__y; }))

	)

432 #iвdeа
i¶ess


433 
	#i¶ess
(
x
, 
y
) \

434 (
__exЛnsiЏ__
 \

435 ({ 
	`__ty≥of__
(
x
и
__x
 = (x); __ty≥of__(
y
и
__y
 = (y); \

436 !
	`isun№dФed
 (
__x
, 
__y
и&& __x < __y; }))

	)

440 #iвdeа
i¶es£quЃ


441 
	#i¶es£quЃ
(
x
, 
y
) \

442 (
__exЛnsiЏ__
 \

443 ({ 
	`__ty≥of__
(
x
и
__x
 = (x); __ty≥of__(
y
и
__y
 = (y); \

444 !
	`isun№dФed
 (
__x
, 
__y
и&& __x <р__y; }))

	)

448 #iвdeа
i¶essgї©Ф


449 
	#i¶essgї©Ф
(
x
, 
y
) \

450 (
__exЛnsiЏ__
 \

451 ({ 
	`__ty≥of__
(
x
и
__x
 = (x); __ty≥of__(
y
и
__y
 = (y); \

452 !
	`isun№dФed
 (
__x
, 
__y
и&& (__x < __y || __y < __x); }))

	)

456 #iвdeа
isun№dФed


457 
	#isun№dФed
(
u
, 
v
) \

458 (
__exЛnsiЏ__
 \

459 ({ 
	`__ty≥of__
(
u
и
__u
 = (u); __ty≥of__(
v
и
__v
 = (v); \

460 
	`еюassify
 (
__u
и=р
FP_NAN
 || fpюassify (
__v
и=рFP_NAN; }))

	)

465 
	g__END_DECLS


	@/usr/include/netdb.h

23 #iвdef 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<г©uїs.h
>

28 
	~<√tЪС/Ъ.h
>

29 
	~<°dЪt.h
>

30 #ifdeа
__USE_MISC


33 
	~<љc/√tdb.h
>

36 #ifdeа
__USE_GNU


37 
	#__√ed_sigevТt_t


	)

38 
	~<bЩs/sigЪfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bЩs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/Сc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/Сc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/Сc/√tw№ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/Сc/nsswЩch.cЏf"

	)

50 
	#_PATH_PROTOCOLS
 "/Сc/іўocёs"

	)

51 
	#_PATH_SERVICES
 "/Сc/£rviыs"

	)

54 
	g__BEGIN_DECLS


58 
	#h_ФЇo
 (*
	`__h_ФЇo_lo€tiЏ
 ())

	)

61 *
	$__h_ФЇo_lo€tiЏ
 (и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

72 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


73 
	#NETDB_INTERNAL
 -1

	)

74 
	#NETDB_SUCCESS
 0

	)

75 
	#NO_ADDRESS
 
NO_DATA


	)

78 #ifdeа
__USE_XOPEN2K


80 
	#IPPORT_RESERVED
 1024

	)

83 #ifdeа
__USE_GNU


85 
	#SCOPE_DELIMITER
 '%'

	)

88 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


91 
	$hФr№
 (
__cЏ°
 *
__°r
и
__THROW
;

94 
__cЏ°
 *
	$h°їЉ№
 (
__Фr_num
и
__THROW
;

99 
	sho°Тt


101 *
h_«me
;

102 **
h_ЃЯ£s
;

103 
h_addєy≥
;

104 
h_Ћngth
;

105 **
h_addr_li°
;

106 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


107 
	#h_addr
 
h_addr_li°
[0]

	)

116 
	`£tho°Тt
 (
__°ay_ЁТ
);

122 
	`Тdho°Тt
 ();

129 
ho°Тt
 *
	`gСho°Тt
 ();

136 
ho°Тt
 *
	`gСho°byaddr
 (
__cЏ°
 *
__addr
, 
__sockЋn_t
 
__Ћn
,

137 
__ty≥
);

143 
ho°Тt
 *
	`gСho°by«me
 (
__cЏ°
 *
__«me
);

145 #ifdeа
__USE_MISC


154 
ho°Тt
 *
	`gСho°by«me2
 (
__cЏ°
 *
__«me
, 
__af
);

166 
	`gСho°Тt_r
 (
ho°Тt
 *
__ї°riщ
 
__їsu…_buf
,

167 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

168 
ho°Тt
 **
__ї°riщ
 
__їsu…
,

169 *
__ї°riщ
 
__h_ФЇЁ
);

171 
	`gСho°byaddr_r
 (
__cЏ°
 *
__ї°riщ
 
__addr
, 
__sockЋn_t
 
__Ћn
,

172 
__ty≥
,

173 
ho°Тt
 *
__ї°riщ
 
__їsu…_buf
,

174 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

175 
ho°Тt
 **
__ї°riщ
 
__їsu…
,

176 *
__ї°riщ
 
__h_ФЇЁ
);

178 
	`gСho°by«me_r
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

179 
ho°Тt
 *
__ї°riщ
 
__їsu…_buf
,

180 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

181 
ho°Тt
 **
__ї°riщ
 
__їsu…
,

182 *
__ї°riщ
 
__h_ФЇЁ
);

184 
	`gСho°by«me2_r
 (
__cЏ°
 *
__ї°riщ
 
__«me
, 
__af
,

185 
ho°Тt
 *
__ї°riщ
 
__їsu…_buf
,

186 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

187 
ho°Тt
 **
__ї°riщ
 
__їsu…
,

188 *
__ї°riщ
 
__h_ФЇЁ
);

197 
	`£КСТt
 (
__°ay_ЁТ
);

203 
	`Тd√ЛЅ
 ();

210 
√ЛЅ
 *
	`gС√ЛЅ
 ();

217 
√ЛЅ
 *
	`gС√tbyaddr
 (
uЪt32_t
 
__√t
, 
__ty≥
);

223 
√ЛЅ
 *
	`gС√tby«me
 (
__cЏ°
 *
__«me
);

225 #ifdef 
__USE_MISC


236 
	`gС√ЛЅ_r
 (
√ЛЅ
 *
__ї°riщ
 
__їsu…_buf
,

237 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

238 
√ЛЅ
 **
__ї°riщ
 
__їsu…
,

239 *
__ї°riщ
 
__h_ФЇЁ
);

241 
	`gС√tbyaddr_r
 (
uЪt32_t
 
__√t
, 
__ty≥
,

242 
√ЛЅ
 *
__ї°riщ
 
__їsu…_buf
,

243 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

244 
√ЛЅ
 **
__ї°riщ
 
__їsu…
,

245 *
__ї°riщ
 
__h_ФЇЁ
);

247 
	`gС√tby«me_r
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

248 
√ЛЅ
 *
__ї°riщ
 
__їsu…_buf
,

249 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

250 
√ЛЅ
 **
__ї°riщ
 
__їsu…
,

251 *
__ї°riщ
 
__h_ФЇЁ
);

256 
	s£rvТt


258 *
s_«me
;

259 **
s_ЃЯ£s
;

260 
s_p№t
;

261 *
s_іўo
;

269 
	`£t£rvТt
 (
__°ay_ЁТ
);

275 
	`Тd£rvТt
 ();

282 
£rvТt
 *
	`gС£rvТt
 ();

289 
£rvТt
 *
	`gС£rvby«me
 (
__cЏ°
 *
__«me
,

290 
__cЏ°
 *
__іўo
);

297 
£rvТt
 *
	`gС£rvbyp№t
 (
__p№t
, 
__cЏ°
 *
__іўo
);

300 #ifdef 
__USE_MISC


308 
	`gС£rvТt_r
 (
£rvТt
 *
__ї°riщ
 
__їsu…_buf
,

309 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

310 
£rvТt
 **
__ї°riщ
 
__їsu…
);

312 
	`gС£rvby«me_r
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

313 
__cЏ°
 *
__ї°riщ
 
__іўo
,

314 
£rvТt
 *
__ї°riщ
 
__їsu…_buf
,

315 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

316 
£rvТt
 **
__ї°riщ
 
__їsu…
);

318 
	`gС£rvbyp№t_r
 (
__p№t
, 
__cЏ°
 *
__ї°riщ
 
__іўo
,

319 
£rvТt
 *
__ї°riщ
 
__їsu…_buf
,

320 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

321 
£rvТt
 **
__ї°riщ
 
__їsu…
);

326 
	sіўџЅ


328 *
p_«me
;

329 **
p_ЃЯ£s
;

330 
p_іўo
;

338 
	`£НrўџЅ
 (
__°ay_ЁТ
);

344 
	`ТdіўџЅ
 ();

351 
іўџЅ
 *
	`gСіўџЅ
 ();

357 
іўџЅ
 *
	`gСіўoby«me
 (
__cЏ°
 *
__«me
);

363 
іўџЅ
 *
	`gСіўobynumbФ
 (
__іўo
);

366 #ifdef 
__USE_MISC


374 
	`gСіўџЅ_r
 (
іўџЅ
 *
__ї°riщ
 
__їsu…_buf
,

375 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

376 
іўџЅ
 **
__ї°riщ
 
__їsu…
);

378 
	`gСіўoby«me_r
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

379 
іўџЅ
 *
__ї°riщ
 
__їsu…_buf
,

380 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

381 
іўџЅ
 **
__ї°riщ
 
__їsu…
);

383 
	`gСіўobynumbФ_r
 (
__іўo
,

384 
іўџЅ
 *
__ї°riщ
 
__їsu…_buf
,

385 *
__ї°riщ
 
__buf
, 
size_t
 
__buжТ
,

386 
іўџЅ
 **
__ї°riщ
 
__їsu…
);

395 
	`£КСgїЅ
 (
__cЏ°
 *
__√tgroup
);

403 
	`Тd√tgїЅ
 ();

412 
	`gС√tgїЅ
 (**
__ї°riщ
 
__ho°p
,

413 **
__ї°riщ
 
__u£љ
,

414 **
__ї°riщ
 
__domaЪp
);

423 
	`Ъ√tgr
 (
__cЏ°
 *
__√tgroup
, __cЏ° *
__ho°
,

424 
__cЏ°
 *
__u£r
, __cЏ° *
__domaЪ
);

432 
	`gС√tgїЅ_r
 (**
__ї°riщ
 
__ho°p
,

433 **
__ї°riщ
 
__u£љ
,

434 **
__ї°riщ
 
__domaЪp
,

435 *
__ї°riщ
 
__bufгr
, 
size_t
 
__buжТ
);

439 #ifdeа
__USE_BSD


451 
	`rcmd
 (**
__ї°riщ
 
__aho°
, 
__љ№t
,

452 
__cЏ°
 *
__ї°riщ
 
__locu£r
,

453 
__cЏ°
 *
__ї°riщ
 
__їmu£r
,

454 
__cЏ°
 *
__ї°riщ
 
__cmd
, *__ї°riщ 
__fd2p
);

463 
	`rcmd_af
 (**
__ї°riщ
 
__aho°
, 
__љ№t
,

464 
__cЏ°
 *
__ї°riщ
 
__locu£r
,

465 
__cЏ°
 *
__ї°riщ
 
__їmu£r
,

466 
__cЏ°
 *
__ї°riщ
 
__cmd
, *__ї°riщ 
__fd2p
,

467 
І_зmЮy_t
 
__af
);

479 
	`їxec
 (**
__ї°riщ
 
__aho°
, 
__љ№t
,

480 
__cЏ°
 *
__ї°riщ
 
__«me
,

481 
__cЏ°
 *
__ї°riщ
 
__Јss
,

482 
__cЏ°
 *
__ї°riщ
 
__cmd
, *__ї°riщ 
__fd2p
);

491 
	`їxec_af
 (**
__ї°riщ
 
__aho°
, 
__љ№t
,

492 
__cЏ°
 *
__ї°riщ
 
__«me
,

493 
__cЏ°
 *
__ї°riщ
 
__Јss
,

494 
__cЏ°
 *
__ї°riщ
 
__cmd
, *__ї°riщ 
__fd2p
,

495 
І_зmЮy_t
 
__af
);

505 
	`ru£rok
 (
__cЏ°
 *
__rho°
, 
__su£r
,

506 
__cЏ°
 *
__їmu£r
, __cЏ° *
__locu£r
);

515 
	`ru£rok_af
 (
__cЏ°
 *
__rho°
, 
__su£r
,

516 
__cЏ°
 *
__їmu£r
, __cЏ° *
__locu£r
,

517 
І_зmЮy_t
 
__af
);

527 
	`Љesvp№t
 (*
__Ѓp№t
);

536 
	`Љesvp№t_af
 (*
__Ѓp№t
, 
І_зmЮy_t
 
__af
);

541 #ifdef 
__USE_POSIX


543 
	saddrЪfo


545 
ai_жags
;

546 
ai_зmЮy
;

547 
ai_sockty≥
;

548 
ai_іўocё
;

549 
sockЋn_t
 
ai_addЊТ
;

550 
sockaddr
 *
ai_addr
;

551 *
ai_€nЏ«me
;

552 
addrЪfo
 *
ai_√xt
;

555 #ifdeа
__USE_GNU


557 
	sgaicb


559 cЏ° *
ђ_«me
;

560 cЏ° *
ђ_£rviы
;

561 cЏ° 
addrЪfo
 *
ђ_їque°
;

562 
addrЪfo
 *
ђ_їsu…
;

564 
__їtuЇ
;

565 
__unu£d
[5];

569 
	#GAI_WAIT
 0

	)

570 
	#GAI_NOWAIT
 1

	)

574 
	#AI_PASSIVE
 0x0001

	)

575 
	#AI_CANONNAME
 0x0002

	)

576 
	#AI_NUMERICHOST
 0x0004

	)

577 
	#AI_V4MAPPED
 0x0008

	)

578 
	#AI_ALL
 0x0010

	)

579 
	#AI_ADDRCONFIG
 0x0020

	)

581 #ifdeа
__USE_GNU


582 
	#AI_IDN
 0x0040

	)

585 
	#AI_CANONIDN
 0x0080

	)

586 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

588 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

591 
	#AI_NUMERICSERV
 0x0400

	)

594 
	#EAI_BADFLAGS
 -1

	)

595 
	#EAI_NONAME
 -2

	)

596 
	#EAI_AGAIN
 -3

	)

597 
	#EAI_FAIL
 -4

	)

598 
	#EAI_FAMILY
 -6

	)

599 
	#EAI_SOCKTYPE
 -7

	)

600 
	#EAI_SERVICE
 -8

	)

601 
	#EAI_MEMORY
 -10

	)

602 
	#EAI_SYSTEM
 -11

	)

603 
	#EAI_OVERFLOW
 -12

	)

604 #ifdeа
__USE_GNU


605 
	#EAI_NODATA
 -5

	)

606 
	#EAI_ADDRFAMILY
 -9

	)

607 
	#EAI_INPROGRESS
 -100

	)

608 
	#EAI_CANCELED
 -101

	)

609 
	#EAI_NOTCANCELED
 -102

	)

610 
	#EAI_ALLDONE
 -103

	)

611 
	#EAI_INTR
 -104

	)

612 
	#EAI_IDN_ENCODE
 -105

	)

615 #ifdeа
__USE_MISC


616 
	#NI_MAXHOST
 1025

	)

617 
	#NI_MAXSERV
 32

	)

620 
	#NI_NUMERICHOST
 1

	)

621 
	#NI_NUMERICSERV
 2

	)

622 
	#NI_NOFQDN
 4

	)

623 
	#NI_NAMEREQD
 8

	)

624 
	#NI_DGRAM
 16

	)

625 #ifdeа
__USE_GNU


626 
	#NI_IDN
 32

	)

627 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

629 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

638 
	`gСaddrЪfo
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

639 
__cЏ°
 *
__ї°riщ
 
__£rviы
,

640 
__cЏ°
 
addrЪfo
 *
__ї°riщ
 
__їq
,

641 
addrЪfo
 **
__ї°riщ
 
__Јi
);

644 
	$дУaddrЪfo
 (
addrЪfo
 *
__ai
и
__THROW
;

647 
__cЏ°
 *
	$gai_°їЉ№
 (
__ecode
и
__THROW
;

653 
	`gС«meЪfo
 (
__cЏ°
 
sockaddr
 *
__ї°riщ
 
__І
,

654 
sockЋn_t
 
__ІЋn
, *
__ї°riщ
 
__ho°
,

655 
sockЋn_t
 
__ho°Ћn
, *
__ї°riщ
 
__£rv
,

656 
sockЋn_t
 
__£rvЋn
, 
__жags
);

659 #ifdeа
__USE_GNU


668 
	`gСaddrЪfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ї°riщ_ђr
],

669 
__Тt
, 
sigevТt
 *
__ї°riщ
 
__sig
);

679 
	`gai_su•Тd
 (
__cЏ°
 
gaicb
 *__cЏ° 
__li°
[], 
__Тt
,

680 
__cЏ°
 
time•ec
 *
__timeout
);

683 
	$gai_Фr№
 (
gaicb
 *
__їq
и
__THROW
;

686 
	$gai_€nыl
 (
gaicb
 *
__gaicbp
и
__THROW
;

689 
__END_DECLS


	@/usr/include/netinet/in.h

20 #iвdef 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<г©uїs.h
>

24 
	~<°dЪt.h
>

25 
	~<sys/sockС.h
>

26 
	~<bЩs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uЪt16_t
 
	tЪ_p№t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uЪt32_t
 
	tЪ_addr_t
;

142 
	sЪ_addr


144 
Ъ_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
и((((
Ъ_addr_t
)„)и& 0x80000000и=р0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffffа& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
и((((
Ъ_addr_t
)„)и& 0xc0000000и=р0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffffа& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
и((((
Ъ_addr_t
)„)и& 0xe0000000и=р0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffffа& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
и((((
Ъ_addr_t
)„)и& 0xf0000000и=р0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
и
	`IN_CLASSD
„)

	)

173 
	#IN_EXPERIMENTAL
(
a
и((((
Ъ_addr_t
)„)и& 0xe0000000и=р0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
и((((
Ъ_addr_t
)„)и& 0xf0000000и=р0xf0000000)

	)

177 
	#INADDR_ANY
 ((
Ъ_addr_t
и0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
Ъ_addr_t
и0xffffffff)

	)

181 
	#INADDR_NONE
 ((
Ъ_addr_t
и0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #iвdeа
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
Ъ_addr_t
и0x7f000001и

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
Ъ_addr_t
и0xe0000000и

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
Ъ_addr_t
и0xe0000001и

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
Ъ_addr_t
и0xe0000002и

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
Ъ_addr_t
и0xe00000ffи

	)

198 
	sЪ6_addr


202 
uЪt8_t
 
	m__u6_addr8
[16];

203 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


204 
uЪt16_t
 
	m__u6_addr16
[8];

205 
uЪt32_t
 
	m__u6_addr32
[4];

207 } 
	m__Ъ6_u
;

208 
	#s6_addr
 
__Ъ6_u
.
__u6_addr8


	)

209 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


210 
	#s6_addr16
 
__Ъ6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__Ъ6_u
.
__u6_addr32


	)

215 cЏ° 
Ъ6_addr
 
Ъ6addr_™y
;

216 cЏ° 
Ъ6_addr
 
Ъ6addr_loЁback
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_Ъ


227 
__SOCKADDR_COMMON
 (
sЪ_
);

228 
Ъ_p№t_t
 
	msЪ_p№t
;

229 
Ъ_addr
 
	msЪ_addr
;

232 
	msЪ_zФo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
Ъ_p№t_t
) -

235  (
Ъ_addr
)];

239 
	ssockaddr_Ъ6


241 
__SOCKADDR_COMMON
 (
sЪ6_
);

242 
Ъ_p№t_t
 
	msЪ6_p№t
;

243 
uЪt32_t
 
	msЪ6_жowЪfo
;

244 
Ъ6_addr
 
	msЪ6_addr
;

245 
uЪt32_t
 
	msЪ6_scЁe_id
;

249 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


251 
	sЭ_mїq


254 
Ъ_addr
 
	mimr_mu…Яddr
;

257 
Ъ_addr
 
	mimr_ЪЛrзы
;

260 
	sЭ_mїq_sourы


263 
Ъ_addr
 
	mimr_mu…Яddr
;

266 
Ъ_addr
 
	mimr_ЪЛrзы
;

269 
Ъ_addr
 
	mimr_sourыaddr
;

275 
	sЭv6_mїq


278 
Ъ6_addr
 
	mЭv6mr_mu…Яddr
;

281 
	mЭv6mr_ЪЛrзы
;

285 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


287 
	sgroup_їq


290 
uЪt32_t
 
	mgr_ЪЛrзы
;

293 
sockaddr_°№age
 
	mgr_group
;

296 
	sgroup_sourы_їq


299 
uЪt32_t
 
	mg§_ЪЛrзы
;

302 
sockaddr_°№age
 
	mg§_group
;

305 
sockaddr_°№age
 
	mg§_sourы
;

310 
	sЭ_msfЮЛr


313 
Ъ_addr
 
	mimsf_mu…Яddr
;

316 
Ъ_addr
 
	mimsf_ЪЛrзы
;

319 
uЪt32_t
 
	mimsf_fmode
;

322 
uЪt32_t
 
	mimsf_num§c
;

324 
Ъ_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
и( (
Э_msfЮЛr
) \

328 -  (
Ъ_addr
) \

329 + (
num§c
и*  (
Ъ_addr
))

	)

331 
	sgroup_fЮЛr


334 
uЪt32_t
 
	mgf_ЪЛrзы
;

337 
sockaddr_°№age
 
	mgf_group
;

340 
uЪt32_t
 
	mgf_fmode
;

343 
uЪt32_t
 
	mgf_num§c
;

345 
sockaddr_°№age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
и( (
group_fЮЛr
) \

349 -  (
sockaddr_°№age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°№age
)))

	)

356 
	~<bЩs/Ъ.h
>

365 
uЪt32_t
 
	$Ѕohl
 (
uЪt32_t
 
__√ОЏg
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

366 
uЪt16_t
 
	$Ѕohs
 (
uЪt16_t
 
__√tsh№t
)

367 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

368 
uЪt32_t
 
	$htЏl
 (
uЪt32_t
 
__ho°lЏg
)

369 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

370 
uЪt16_t
 
	$htЏs
 (
uЪt16_t
 
__ho°sh№t
)

371 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

373 
	~<ТdЯn.h
>

376 
	~<bЩs/byЛsw≠.h
>

378 #ifdeа
__OPTIMIZE__


382 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


385 
	#Ѕohl
(
x
и(x)

	)

386 
	#Ѕohs
(
x
и(x)

	)

387 
	#htЏl
(
x
и(x)

	)

388 
	#htЏs
(
x
и(x)

	)

390 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


391 
	#Ѕohl
(
x
и
	`__bsw≠_32
 (x)

	)

392 
	#Ѕohs
(
x
и
	`__bsw≠_16
 (x)

	)

393 
	#htЏl
(
x
и
	`__bsw≠_32
 (x)

	)

394 
	#htЏs
(
x
и
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] == 0 \

401 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[1] == 0 \

402 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[2] == 0 \

403 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[3] =р0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] == 0 \

407 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[1] == 0 \

408 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[2] == 0 \

409 && ((
__cЏ°
 
uЪt32_t
 *и(
a
))[3] =р
	`htЏl
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
и(((
__cЏ°
 
uЪt8_t
 *и„))[0] =р0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] & 
	`htЏl
 (0xffc00000)) \

415 =р
	`htЏl
 (0xг800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] & 
	`htЏl
 (0xffc00000)) \

419 =р
	`htЏl
 (0xгc00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] == 0) \

423 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[1] == 0) \

424 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[2] =р
	`htЏl
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] == 0) \

428 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[1] == 0) \

429 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[2] == 0) \

430 && (
	`Ѕohl
 (((
__cЏ°
 
uЪt32_t
 *и(
a
))[3]и> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__cЏ°
 
uЪt32_t
 *и(
a
))[0] =р((__cЏ° uЪt32_И*и(
b
))[0]) \

434 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[1] =р((__cЏ° uЪt32_И*и(
b
))[1]) \

435 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[2] =р((__cЏ° uЪt32_И*и(
b
))[2]) \

436 && (((
__cЏ°
 
uЪt32_t
 *и(
a
))[3] =р((__cЏ° uЪt32_И*и(
b
))[3]))

	)

438 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


440 
	$bЪdїsvp№t
 (
__sockfd
, 
sockaddr_Ъ
 *
__sock_Ъ
и
__THROW
;

443 
	$bЪdїsvp№t6
 (
__sockfd
, 
sockaddr_Ъ6
 *
__sock_Ъ
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__cЏ°
 
uЪt8_t
 *и(
a
))[1] & 0xfи=р0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__cЏ°
 
uЪt8_t
 *и(
a
))[1] & 0xfи=р0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__cЏ°
 
uЪt8_t
 *и(
a
))[1] & 0xfи=р0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__cЏ°
 
uЪt8_t
 *и(
a
))[1] & 0xfи=р0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__cЏ°
 
uЪt8_t
 *и(
a
))[1] & 0xfи=р0xe))

	)

469 #ifdeа
__USE_GNU


471 
	sЪ6_pktЪfo


473 
Ъ6_addr
 
Эi6_addr
;

474 
Эi6_ifЪdex
;

478 
	sЭ6_mtuЪfo


480 
sockaddr_Ъ6
 
Э6m_addr
;

481 
uЪt32_t
 
Э6m_mtu
;

486 
	$ЪС6_ЁtiЏ_•aы
 (
__nbyЛs
)

487 
__THROW
 
__©МibuЛ_dХї€Лd__
;

488 
	$ЪС6_ЁtiЏ_ЪЩ
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
и
__THROW
 
__©МibuЛ_dХї€Лd__
;

490 
	$ЪС6_ЁtiЏ_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__cЏ°
 
uЪt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__ґusy
и
__THROW
 
__©МibuЛ_dХї€Лd__
;

493 
uЪt8_t
 *
	$ЪС6_ЁtiЏ_Ѓloc
 (
cmsghdr
 *
__cmsg
, 
__d©ЃТ
,

494 
__mu…x
, 
__ґusy
)

495 
__THROW
 
__©МibuЛ_dХї€Лd__
;

496 
	$ЪС6_ЁtiЏ_√xt
 (
__cЏ°
 
cmsghdr
 *
__cmsg
,

497 
uЪt8_t
 **
__НМp
)

498 
__THROW
 
__©МibuЛ_dХї€Лd__
;

499 
	$ЪС6_ЁtiЏ_fЪd
 (
__cЏ°
 
cmsghdr
 *
__cmsg
,

500 
uЪt8_t
 **
__НМp
, 
__ty≥
)

501 
__THROW
 
__©МibuЛ_dХї€Лd__
;

505 
	$ЪС6_Ёt_ЪЩ
 (*
__extbuf
, 
sockЋn_t
 
__exОТ
и
__THROW
;

506 
	$ЪС6_Ёt_≠≥nd
 (*
__extbuf
, 
sockЋn_t
 
__exОТ
, 
__off£t
,

507 
uЪt8_t
 
__ty≥
, 
sockЋn_t
 
__Ћn
, uЪt8_И
__Ѓign
,

508 **
__d©abuе
и
__THROW
;

509 
	$ЪС6_Ёt_fЪish
 (*
__extbuf
, 
sockЋn_t
 
__exОТ
, 
__off£t
)

510 
__THROW
;

511 
	$ЪС6_Ёt_£t_vЃ
 (*
__d©abuf
, 
__off£t
, *
__vЃ
,

512 
sockЋn_t
 
__vЃЋn
и
__THROW
;

513 
	$ЪС6_Ёt_√xt
 (*
__extbuf
, 
sockЋn_t
 
__exОТ
, 
__off£t
,

514 
uЪt8_t
 *
__ty≥p
, 
sockЋn_t
 *
__Ћ≈
,

515 **
__d©abuе
и
__THROW
;

516 
	$ЪС6_Ёt_fЪd
 (*
__extbuf
, 
sockЋn_t
 
__exОТ
, 
__off£t
,

517 
uЪt8_t
 
__ty≥
, 
sockЋn_t
 *
__Ћ≈
,

518 **
__d©abuе
и
__THROW
;

519 
	$ЪС6_Ёt_gС_vЃ
 (*
__d©abuf
, 
__off£t
, *
__vЃ
,

520 
sockЋn_t
 
__vЃЋn
и
__THROW
;

524 
sockЋn_t
 
	$ЪС6_єh_•aы
 (
__ty≥
, 
__£gmТts
и
__THROW
;

525 *
	$ЪС6_єh_ЪЩ
 (*
__bp
, 
sockЋn_t
 
__bp_Ћn
, 
__ty≥
,

526 
__£gmТts
и
__THROW
;

527 
	$ЪС6_єh_add
 (*
__bp
, 
__cЏ°
 
Ъ6_addr
 *
__addr
и
__THROW
;

528 
	$ЪС6_єh_їvФ£
 (
__cЏ°
 *
__Ъ
, *
__out
и
__THROW
;

529 
	$ЪС6_єh_£gmТts
 (
__cЏ°
 *
__bp
и
__THROW
;

530 
Ъ6_addr
 *
	$ЪС6_єh_gСaddr
 (
__cЏ°
 *
__bp
, 
__Ъdex
)

531 
__THROW
;

537 
	$gСЭv4sourыfЮЛr
 (
__s
, 
Ъ_addr
 
__ЪЛrзы_addr
,

538 
Ъ_addr
 
__group
, 
uЪt32_t
 *
__fmode
,

539 
uЪt32_t
 *
__num§c
, 
Ъ_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tЭv4sourыfЮЛr
 (
__s
, 
Ъ_addr
 
__ЪЛrзы_addr
,

544 
Ъ_addr
 
__group
, 
uЪt32_t
 
__fmode
,

545 
uЪt32_t
 
__num§c
,

546 
__cЏ°
 
Ъ_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gСsourыfЮЛr
 (
__s
, 
uЪt32_t
 
__ЪЛrзы_addr
,

552 
__cЏ°
 
sockaddr
 *
__group
,

553 
sockЋn_t
 
__grouґТ
, 
uЪt32_t
 *
__fmode
,

554 
uЪt32_t
 *
__num§c
,

555 
sockaddr_°№age
 *
__¶i°
и
__THROW
;

558 
	$£tsourыfЮЛr
 (
__s
, 
uЪt32_t
 
__ЪЛrзы_addr
,

559 
__cЏ°
 
sockaddr
 *
__group
,

560 
sockЋn_t
 
__grouґТ
, 
uЪt32_t
 
__fmode
,

561 
uЪt32_t
 
__num§c
,

562 
__cЏ°
 
sockaddr_°№age
 *
__¶i°
и
__THROW
;

565 
__END_DECLS


	@/usr/include/openssl/bio.h

59 #iвdeа
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<ЁТs¶/e_os2.h
>

64 #iвdeа
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°dђg.h
>

69 
	~<ЁТs¶/ьy±o.h
>

71 #ifdeа 
__эlu•lus


76 
	#BIO_TYPE_NONE
 0

	)

77 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

78 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

80 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

81 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

82 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

83 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

84 
	#BIO_TYPE_MD
 (8|0x0200и

	)

85 
	#BIO_TYPE_BUFFER
 (9|0x0200и

	)

86 
	#BIO_TYPE_CIPHER
 (10|0x0200и

	)

87 
	#BIO_TYPE_BASE64
 (11|0x0200и

	)

88 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100и

	)

89 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100и

	)

90 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200и

	)

91 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200и

	)

92 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200и

	)

93 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

94 
	#BIO_TYPE_BER
 (18|0x0200и

	)

95 
	#BIO_TYPE_BIO
 (19|0x0400и

	)

96 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200и

	)

97 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

99 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

100 
	#BIO_TYPE_FILTER
 0x0200

	)

101 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

105 
	#BIO_NOCLOSE
 0x00

	)

106 
	#BIO_CLOSE
 0x01

	)

110 
	#BIO_CTRL_RESET
 1

	)

111 
	#BIO_CTRL_EOF
 2

	)

112 
	#BIO_CTRL_INFO
 3

	)

113 
	#BIO_CTRL_SET
 4

	)

114 
	#BIO_CTRL_GET
 5

	)

115 
	#BIO_CTRL_PUSH
 6

	)

116 
	#BIO_CTRL_POP
 7

	)

117 
	#BIO_CTRL_GET_CLOSE
 8

	)

118 
	#BIO_CTRL_SET_CLOSE
 9

	)

119 
	#BIO_CTRL_PENDING
 10

	)

120 
	#BIO_CTRL_FLUSH
 11

	)

121 
	#BIO_CTRL_DUP
 12

	)

122 
	#BIO_CTRL_WPENDING
 13

	)

124 
	#BIO_CTRL_SET_CALLBACK
 14

	)

125 
	#BIO_CTRL_GET_CALLBACK
 15

	)

127 
	#BIO_CTRL_SET_FILENAME
 30

	)

130 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

131 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

134 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

135 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

136 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

137 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

139 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

140 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

143 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

146 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

147 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

148 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

153 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

158 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

162 
	#BIO_FP_READ
 0x02

	)

163 
	#BIO_FP_WRITE
 0x04

	)

164 
	#BIO_FP_APPEND
 0x08

	)

165 
	#BIO_FP_TEXT
 0x10

	)

167 
	#BIO_FLAGS_READ
 0x01

	)

168 
	#BIO_FLAGS_WRITE
 0x02

	)

169 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

170 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

171 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

172 #iвdef 
BIO_FLAGS_UPLINK


175 
	#BIO_FLAGS_UPLINK
 0

	)

179 
	#BIO_GHBN_CTRL_HITS
 1

	)

180 
	#BIO_GHBN_CTRL_MISSES
 2

	)

181 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

182 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

183 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

192 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

197 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

199 
bio_°
 
	tBIO
;

201 
BIO_£t_жags
(
BIO
 *
b
, 
жags
);

202 
BIO_Л°_жags
(cЏ° 
BIO
 *
b
, 
жags
);

203 
BIO_юЧr_жags
(
BIO
 *
b
, 
жags
);

205 
	#BIO_gС_жags
(
b
и
	`BIO_Л°_жags
(b, ~(0x0))

	)

206 
	#BIO_£t_їМy_•ecЯl
(
b
) \

207 
	`BIO_£t_жags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

208 
	#BIO_£t_їМy_їad
(
b
) \

209 
	`BIO_£t_жags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

210 
	#BIO_£t_їМy_wrЩe
(
b
) \

211 
	`BIO_£t_жags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

214 
	#BIO_юЧr_їМy_жags
(
b
) \

215 
	`BIO_юЧr_жags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

216 
	#BIO_gС_їМy_жags
(
b
) \

217 
	`BIO_Л°_жags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

220 
	#BIO_should_їad
(
a
и
	`BIO_Л°_жags
„, 
BIO_FLAGS_READ
)

	)

221 
	#BIO_should_wrЩe
(
a
и
	`BIO_Л°_жags
„, 
BIO_FLAGS_WRITE
)

	)

222 
	#BIO_should_io_•ecЯl
(
a
и
	`BIO_Л°_жags
„, 
BIO_FLAGS_IO_SPECIAL
)

	)

223 
	#BIO_їМy_ty≥
(
a
и
	`BIO_Л°_жags
„, 
BIO_FLAGS_RWS
)

	)

224 
	#BIO_should_їМy
(
a
и
	`BIO_Л°_жags
„, 
BIO_FLAGS_SHOULD_RETRY
)

	)

232 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

234 
	#BIO_RR_CONNECT
 0x02

	)

236 
	#BIO_RR_ACCEPT
 0x03

	)

239 
	#BIO_CB_FREE
 0x01

	)

240 
	#BIO_CB_READ
 0x02

	)

241 
	#BIO_CB_WRITE
 0x03

	)

242 
	#BIO_CB_PUTS
 0x04

	)

243 
	#BIO_CB_GETS
 0x05

	)

244 
	#BIO_CB_CTRL
 0x06

	)

248 
	#BIO_CB_RETURN
 0x80

	)

249 
	#BIO_CB_їtuЇ
(
a
и(„)|
BIO_CB_RETURN
))

	)

250 
	#BIO_cb_іe
(
a
и(!(„)&
BIO_CB_RETURN
))

	)

251 
	#BIO_cb_po°
(
a
и(„)&
BIO_CB_RETURN
)

	)

253 (*
BIO_gС_€ќback
(cЏ° 
BIO
 *
b
)и(
bio_°
 *,,const *,, ,);

254 
BIO_£t_€ќback
(
BIO
 *
b
,

255 (*
€ќback
)(
bio_°
 *,,const *,, ,));

256 *
BIO_gС_€ќback_ђg
(cЏ° 
BIO
 *
b
);

257 
BIO_£t_€ќback_ђg
(
BIO
 *
b
, *
ђg
);

259 cЏ° * 
BIO_mСhod_«me
(cЏ° 
BIO
 *
b
);

260 
BIO_mСhod_ty≥
(cЏ° 
BIO
 *
b
);

262 
	tbio_Ъfo_cb
(
	tbio_°
 *, , const *, , , );

264 #iвdeа
OPENSSL_SYS_WIN16


265 
	sbio_mСhod_°


267 
ty≥
;

268 cЏ° *
«me
;

269 (*
bwrЩe
)(
BIO
 *, const *, );

270 (*
bїad
)(
BIO
 *, *, );

271 (*
bputs
)(
BIO
 *, const *);

272 (*
bgСs
)(
BIO
 *, *, );

273 (*
щЊ
)(
BIO
 *, , , *);

274 (*
ьЧЛ
)(
BIO
 *);

275 (*
de°roy
)(
BIO
 *);

276 (*
€ќback_щЊ
)(
BIO
 *, , 
bio_Ъfo_cb
 *);

277 } 
	tBIO_METHOD
;

279 
	sbio_mСhod_°


281 
ty≥
;

282 cЏ° *
«me
;

283 (
_зr
 *
bwrЩe
)();

284 (
_зr
 *
bїad
)();

285 (
_зr
 *
bputs
)();

286 (
_зr
 *
bgСs
)();

287 (
_зr
 *
щЊ
)();

288 (
_зr
 *
ьЧЛ
)();

289 (
_зr
 *
de°roy
)();

290 (
_зr
 *
€ќback_щЊ
)();

291 } 
	tBIO_METHOD
;

294 
	sbio_°


296 
BIO_METHOD
 *
mСhod
;

298 (*
€ќback
)(
bio_°
 *,,const *,, ,);

299 *
cb_ђg
;

301 
ЪЩ
;

302 
shutdown
;

303 
жags
;

304 
їМy_їasЏ
;

305 
num
;

306 *
±r
;

307 
bio_°
 *
√xt_bio
;

308 
bio_°
 *
іev_bio
;

309 
їгїnыs
;

310 
num_їad
;

311 
num_wrЩe
;

313 
CRYPTO_EX_DATA
 
ex_d©a
;

316 
DECLARE_STACK_OF
(
BIO
)

318 
	sbio_f_bufгr_щx_°ruщ


321 
ibuf_size
;

322 
obuf_size
;

324 *
ibuf
;

325 
ibuf_Ћn
;

326 
ibuf_off
;

328 *
obuf
;

329 
obuf_Ћn
;

330 
obuf_off
;

331 } 
	tBIO_F_BUFFER_CTX
;

334 
	#BIO_CONN_S_BEFORE
 1

	)

335 
	#BIO_CONN_S_GET_IP
 2

	)

336 
	#BIO_CONN_S_GET_PORT
 3

	)

337 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

338 
	#BIO_CONN_S_CONNECT
 5

	)

339 
	#BIO_CONN_S_OK
 6

	)

340 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

341 
	#BIO_CONN_S_NBIO
 8

	)

344 
	#BIO_C_SET_CONNECT
 100

	)

345 
	#BIO_C_DO_STATE_MACHINE
 101

	)

346 
	#BIO_C_SET_NBIO
 102

	)

347 
	#BIO_C_SET_PROXY_PARAM
 103

	)

348 
	#BIO_C_SET_FD
 104

	)

349 
	#BIO_C_GET_FD
 105

	)

350 
	#BIO_C_SET_FILE_PTR
 106

	)

351 
	#BIO_C_GET_FILE_PTR
 107

	)

352 
	#BIO_C_SET_FILENAME
 108

	)

353 
	#BIO_C_SET_SSL
 109

	)

354 
	#BIO_C_GET_SSL
 110

	)

355 
	#BIO_C_SET_MD
 111

	)

356 
	#BIO_C_GET_MD
 112

	)

357 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

358 
	#BIO_C_SET_BUF_MEM
 114

	)

359 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

360 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

361 
	#BIO_C_SET_BUFF_SIZE
 117

	)

362 
	#BIO_C_SET_ACCEPT
 118

	)

363 
	#BIO_C_SSL_MODE
 119

	)

364 
	#BIO_C_GET_MD_CTX
 120

	)

365 
	#BIO_C_GET_PROXY_PARAM
 121

	)

366 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

367 
	#BIO_C_GET_CONNECT
 123

	)

368 
	#BIO_C_GET_ACCEPT
 124

	)

369 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

370 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

371 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

372 
	#BIO_C_FILE_SEEK
 128

	)

373 
	#BIO_C_GET_CIPHER_CTX
 129

	)

374 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

375 
	#BIO_C_SET_BIND_MODE
 131

	)

376 
	#BIO_C_GET_BIND_MODE
 132

	)

377 
	#BIO_C_FILE_TELL
 133

	)

378 
	#BIO_C_GET_SOCKS
 134

	)

379 
	#BIO_C_SET_SOCKS
 135

	)

381 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

382 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

383 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

384 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

385 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

386 
	#BIO_C_GET_READ_REQUEST
 141

	)

387 
	#BIO_C_SHUTDOWN_WR
 142

	)

388 
	#BIO_C_NREAD0
 143

	)

389 
	#BIO_C_NREAD
 144

	)

390 
	#BIO_C_NWRITE0
 145

	)

391 
	#BIO_C_NWRITE
 146

	)

392 
	#BIO_C_RESET_READ_REQUEST
 147

	)

393 
	#BIO_C_SET_MD_CTX
 148

	)

396 
	#BIO_£t_≠p_d©a
(
s
,
ђg
и
	`BIO_£t_ex_d©a
(s,0,ђg)

	)

397 
	#BIO_gС_≠p_d©a
(
s
и
	`BIO_gС_ex_d©a
(s,0)

	)

400 
	#BIO_£t_cЏn_ho°«me
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_CONNECT
,0,(*кame)

	)

401 
	#BIO_£t_cЏn_p№t
(
b
,
p№t
и
	`BIO_щЊ
(b,
BIO_C_SET_CONNECT
,1,(*н№t)

	)

402 
	#BIO_£t_cЏn_Э
(
b
,
Э
и
	`BIO_щЊ
(b,
BIO_C_SET_CONNECT
,2,(*)Э)

	)

403 
	#BIO_£t_cЏn_Ъt_p№t
(
b
,
p№t
и
	`BIO_щЊ
(b,
BIO_C_SET_CONNECT
,3,(*н№t)

	)

404 
	#BIO_gС_cЏn_ho°«me
(
b
и
	`BIO_±r_щЊ
(b,
BIO_C_GET_CONNECT
,0)

	)

405 
	#BIO_gС_cЏn_p№t
(
b
и
	`BIO_±r_щЊ
(b,
BIO_C_GET_CONNECT
,1)

	)

406 
	#BIO_gС_cЏn_Э
(
b
и
	`BIO_±r_щЊ
(b,
BIO_C_GET_CONNECT
,2)

	)

407 
	#BIO_gС_cЏn_Ъt_p№t
(
b
и
	`BIO_Ъt_щЊ
(b,
BIO_C_GET_CONNECT
,3)

	)

410 
	#BIO_£t_nbio
(
b
,
n
и
	`BIO_щЊ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

413 
	#BIO_£t_acы±_p№t
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_ACCEPT
,0,(*кame)

	)

414 
	#BIO_gС_acы±_p№t
(
b
и
	`BIO_±r_щЊ
(b,
BIO_C_GET_ACCEPT
,0)

	)

416 
	#BIO_£t_nbio_acы±
(
b
,
n
и
	`BIO_щЊ
(b,
BIO_C_SET_ACCEPT
,1,“)?"a":
NULL
)

	)

417 
	#BIO_£t_acы±_bios
(
b
,
bio
и
	`BIO_щЊ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

419 
	#BIO_BIND_NORMAL
 0

	)

420 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

421 
	#BIO_BIND_REUSEADDR
 2

	)

422 
	#BIO_£t_bЪd_mode
(
b
,
mode
и
	`BIO_щЊ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

423 
	#BIO_gС_bЪd_mode
(
b
,
mode
и
	`BIO_щЊ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

425 
	#BIO_do_cЏ√щ
(
b
и
	`BIO_do_h™dshake
(b)

	)

426 
	#BIO_do_acы±
(
b
и
	`BIO_do_h™dshake
(b)

	)

427 
	#BIO_do_h™dshake
(
b
и
	`BIO_щЊ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

430 
	#BIO_£t_uЊ
(
b
,
uЊ
и
	`BIO_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uЊ))

	)

431 
	#BIO_£t_іoxЫs
(
b
,
p
и
	`BIO_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

433 
	#BIO_£t_fЮЛr_bio
(
b
,
s
и
	`BIO_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

435 
	#BIO_£t_іoxy_cb
(
b
,
cb
и
	`BIO_€ќback_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

436 
	#BIO_£t_іoxy_hЧdФ
(
b
,
sk
и
	`BIO_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

437 
	#BIO_£t_no_cЏ√щ_їtuЇ
(
b
,
boё
и
	`BIO_Ъt_щЊ
(b,
BIO_C_SET_PROXY_PARAM
,5,boё)

	)

439 
	#BIO_gС_іoxy_hЧdФ
(
b
,
skp
и
	`BIO_щЊ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

440 
	#BIO_gС_іoxЫs
(
b
,
pxy_p
и
	`BIO_щЊ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

441 
	#BIO_gС_uЊ
(
b
,
uЊ
и
	`BIO_щЊ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uЊ))

	)

442 
	#BIO_gС_no_cЏ√щ_їtuЇ
(
b
и
	`BIO_щЊ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

444 
	#BIO_£t_fd
(
b
,
fd
,
c
и
	`BIO_Ъt_щЊ
(b,
BIO_C_SET_FD
,c,fd)

	)

445 
	#BIO_gС_fd
(
b
,
c
и
	`BIO_щЊ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

447 
	#BIO_£t_е
(
b
,
е
,
c
и
	`BIO_щЊ
(b,
BIO_C_SET_FILE_PTR
,c,(*)е)

	)

448 
	#BIO_gС_е
(
b
,
еp
и
	`BIO_щЊ
(b,
BIO_C_GET_FILE_PTR
,0,(*)еp)

	)

450 
	#BIO_£ek
(
b
,
ofs
и()
	`BIO_щЊ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

451 
	#BIO_Лќ
(
b
и()
	`BIO_щЊ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

455 #ifdeа
CONST_STRICT


459 
BIO_їad_fЮТame
(
BIO
 *
b
,cЏ° *
«me
);

461 
	#BIO_їad_fЮТame
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_FILENAME
, \

462 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

464 
	#BIO_wrЩe_fЮТame
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_FILENAME
, \

465 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

466 
	#BIO_≠≥nd_fЮТame
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_FILENAME
, \

467 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

468 
	#BIO_rw_fЮТame
(
b
,
«me
и
	`BIO_щЊ
(b,
BIO_C_SET_FILENAME
, \

469 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

475 
	#BIO_£t_s¶
(
b
,
s¶
,
c
и
	`BIO_щЊ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

476 
	#BIO_gС_s¶
(
b
,
s¶p
и
	`BIO_щЊ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

477 
	#BIO_£t_s¶_mode
(
b
,
юЫЅ
и
	`BIO_щЊ
(b,
BIO_C_SSL_MODE
,юЫЅ,
NULL
)

	)

478 
	#BIO_£t_s¶_ї√gўЯЛ_byЛs
(
b
,
num
) \

479 
	`BIO_щЊ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

480 
	#BIO_gС_num_ї√gўЯЛs
(
b
) \

481 
	`BIO_щЊ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

482 
	#BIO_£t_s¶_ї√gўЯЛ_timeout
(
b
,
£cЏds
) \

483 
	`BIO_щЊ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£cЏds
,
NULL
);

	)

488 
	#BIO_gС_mem_d©a
(
b
,
µ
и
	`BIO_щЊ
(b,
BIO_CTRL_INFO
,0,(*нp)

	)

489 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
и
	`BIO_щЊ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

490 
	#BIO_gС_mem_±r
(
b
,
µ
и
	`BIO_щЊ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*нp)

	)

491 
	#BIO_£t_mem_eof_їtuЇ
(
b
,
v
) \

492 
	`BIO_щЊ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

495 
	#BIO_gС_bufгr_num_lЪes
(
b
и
	`BIO_щЊ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

496 
	#BIO_£t_bufгr_size
(
b
,
size
и
	`BIO_щЊ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

497 
	#BIO_£t_їad_bufгr_size
(
b
,
size
и
	`BIO_Ъt_щЊ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

498 
	#BIO_£t_wrЩe_bufгr_size
(
b
,
size
и
	`BIO_Ъt_щЊ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

499 
	#BIO_£t_bufгr_їad_d©a
(
b
,
buf
,
num
и
	`BIO_щЊ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

502 
	#BIO_dup_°©e
(
b
,
їt
и
	`BIO_щЊ
(b,
BIO_CTRL_DUP
,0,(*)‘С))

	)

504 
	#BIO_ї£t
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

505 
	#BIO_eof
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

506 
	#BIO_£t_юo£
(
b
,
c
и()
	`BIO_щЊ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

507 
	#BIO_gС_юo£
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

508 
	#BIO_≥ndЪg
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

509 
	#BIO_w≥ndЪg
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

511 
size_t
 
BIO_щЊ_≥ndЪg
(
BIO
 *
b
);

512 
size_t
 
BIO_щЊ_w≥ndЪg
(
BIO
 *
b
);

513 
	#BIO_жush
(
b
и()
	`BIO_щЊ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

514 
	#BIO_gС_Ъfo_€ќback
(
b
,
cbp
и()
	`BIO_щЊ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

515 
cbp
)

	)

516 
	#BIO_£t_Ъfo_€ќback
(
b
,
cb
и()
	`BIO_€ќback_щЊ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

519 
	#BIO_bufгr_gС_num_lЪes
(
b
и
	`BIO_щЊ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

522 
	#BIO_£t_wrЩe_buf_size
(
b
,
size
и()
	`BIO_щЊ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

523 
	#BIO_gС_wrЩe_buf_size
(
b
,
size
и(
size_t
)
	`BIO_щЊ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

524 
	#BIO_make_bio_ЈЬ
(
b1
,
b2
и()
	`BIO_щЊ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

525 
	#BIO_de°roy_bio_ЈЬ
(
b
и()
	`BIO_щЊ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

526 
	#BIO_shutdown_wr
(
b
и()
	`BIO_щЊ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

528 
	#BIO_gС_wrЩe_guђ™Лe
(
b
и()
	`BIO_щЊ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

529 
	#BIO_gС_їad_їque°
(
b
и()
	`BIO_щЊ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

530 
size_t
 
BIO_щЊ_gС_wrЩe_guђ™Лe
(
BIO
 *
b
);

531 
size_t
 
BIO_щЊ_gС_їad_їque°
(
BIO
 *
b
);

532 
BIO_щЊ_ї£t_їad_їque°
(
BIO
 *
b
);

535 
	#BIO_щЊ_dgњm_cЏ√щ
(
b
,
≥Ф
) \

536 ()
	`BIO_щЊ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥Ф
)

	)

537 
	#BIO_щЊ_£t_cЏ√щed
(
b
, 
°©e
, 
≥Ф
) \

538 ()
	`BIO_щЊ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥Ф
)

	)

539 
	#BIO_dgњm_їcv_timedout
(
b
) \

540 ()
	`BIO_щЊ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

541 
	#BIO_dgњm_£nd_timedout
(
b
) \

542 ()
	`BIO_щЊ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

543 
	#BIO_dgњm_£t_≥Ф
(
b
,
≥Ф
) \

544 ()
	`BIO_щЊ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥Ф
)

	)

549 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

550 *
BIO_gС_ex_d©a
(
BIO
 *
bio
,
idx
);

551 
BIO_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

552 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

553 
BIO_numbФ_їad
(
BIO
 *
bio
);

554 
BIO_numbФ_wrЩЛn
(
BIO
 *
bio
);

556 #iвdeа
OPENSSL_NO_FP_API


557 #iа
defЪed
(
OPENSSL_SYS_WIN16
и&& defЪed(
_WINDLL
)

558 
BIO_METHOD
 *
BIO_s_fЮe_ЪЛЇЃ
();

559 
BIO
 *
BIO_√w_fЮe_ЪЛЇЃ
(*
fЮТame
, *
mode
);

560 
BIO
 *
BIO_√w_е_ЪЛЇЃ
(
FILE
 *
°їam
, 
юo£_жag
);

561 
	#BIO_s_fЮe
 
BIO_s_fЮe_ЪЛЇЃ


	)

562 
	#BIO_√w_fЮe
 
BIO_√w_fЮe_ЪЛЇЃ


	)

563 
	#BIO_√w_е
 
BIO_√w_е_ЪЛЇЃ


	)

565 
BIO_METHOD
 *
BIO_s_fЮe
();

566 
BIO
 *
BIO_√w_fЮe
(cЏ° *
fЮТame
, cЏ° *
mode
);

567 
BIO
 *
BIO_√w_е
(
FILE
 *
°їam
, 
юo£_жag
);

568 
	#BIO_s_fЮe_ЪЛЇЃ
 
BIO_s_fЮe


	)

569 
	#BIO_√w_fЮe_ЪЛЇЃ
 
BIO_√w_fЮe


	)

570 
	#BIO_√w_е_ЪЛЇЃ
 
BIO_s_fЮe


	)

573 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

574 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

575 
BIO_дУ
(
BIO
 *
a
);

576 
BIO_vдУ
(
BIO
 *
a
);

577 
BIO_їad
(
BIO
 *
b
, *
d©a
, 
Ћn
);

578 
BIO_gСs
(
BIO
 *
bp
,*
buf
, 
size
);

579 
BIO_wrЩe
(
BIO
 *
b
, cЏ° *
d©a
, 
Ћn
);

580 
BIO_puts
(
BIO
 *
bp
,cЏ° *
buf
);

581 
BIO_ЪdТt
(
BIO
 *
b
,
ЪdТt
,
max
);

582 
BIO_щЊ
(
BIO
 *
bp
,
cmd
,
ѕrg
,*
Јrg
);

583 
BIO_€ќback_щЊ
(
BIO
 *
b
, 
cmd
, (*
е
)(
bio_°
 *, , const *, , , ));

584 * 
BIO_±r_щЊ
(
BIO
 *
bp
,
cmd
,
ѕrg
);

585 
BIO_Ъt_щЊ
(
BIO
 *
bp
,
cmd
,
ѕrg
,
Яrg
);

586 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

587 
BIO
 * 
BIO_pЁ
(BIO *
b
);

588 
BIO_дУ_Ѓl
(
BIO
 *
a
);

589 
BIO
 * 
BIO_fЪd_ty≥
(BIO *
b
,
bio_ty≥
);

590 
BIO
 * 
BIO_√xt
(BIO *
b
);

591 
BIO
 * 
BIO_gС_їМy_BIO
(BIO *
bio
, *
їasЏ
);

592 
BIO_gС_їМy_їasЏ
(
BIO
 *
bio
);

593 
BIO
 * 
BIO_dup_chaЪ
(BIO *
Ъ
);

595 
BIO_ƒЧd0
(
BIO
 *
bio
, **
buf
);

596 
BIO_ƒЧd
(
BIO
 *
bio
, **
buf
, 
num
);

597 
BIO_nwrЩe0
(
BIO
 *
bio
, **
buf
);

598 
BIO_nwrЩe
(
BIO
 *
bio
, **
buf
, 
num
);

600 #iвdeа
OPENSSL_SYS_WIN16


601 
BIO_debug_€ќback
(
BIO
 *
bio
,
cmd
,cЏ° *
ђgp
,
ђgi
,

602 
ђgl
,
їt
);

604 
_зr
 
_lяdds
 
BIO_debug_€ќback
(
BIO
 *
bio
,
cmd
,cЏ° *
ђgp
,
ђgi
,

605 
ђgl
,
їt
);

608 
BIO_METHOD
 *
BIO_s_mem
();

609 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Ћn
);

610 
BIO_METHOD
 *
BIO_s_sockС
();

611 
BIO_METHOD
 *
BIO_s_cЏ√щ
();

612 
BIO_METHOD
 *
BIO_s_acы±
();

613 
BIO_METHOD
 *
BIO_s_fd
();

614 #iвdeа
OPENSSL_SYS_OS2


615 
BIO_METHOD
 *
BIO_s_log
();

617 
BIO_METHOD
 *
BIO_s_bio
();

618 
BIO_METHOD
 *
BIO_s_nuќ
();

619 
BIO_METHOD
 *
BIO_f_nuќ
();

620 
BIO_METHOD
 *
BIO_f_bufгr
();

621 #ifdeа
OPENSSL_SYS_VMS


622 
BIO_METHOD
 *
BIO_f_lЪebufгr
();

624 
BIO_METHOD
 *
BIO_f_nbio_Л°
();

625 #iвdeа
OPENSSL_NO_DGRAM


626 
BIO_METHOD
 *
BIO_s_d©agњm
();

631 
BIO_sock_should_їМy
(
i
);

632 
BIO_sock_nЏ_зПl_Фr№
(
Фr№
);

633 
BIO_dgњm_nЏ_зПl_Фr№
(
Фr№
);

635 
BIO_fd_should_їМy
(
i
);

636 
BIO_fd_nЏ_зПl_Фr№
(
Фr№
);

637 
BIO_dump_cb
((*
cb
)(cЏ° *
d©a
, 
size_t
 
Ћn
, *
u
),

638 *
u
, cЏ° *
s
, 
Ћn
);

639 
BIO_dump_ЪdТt_cb
((*
cb
)(cЏ° *
d©a
, 
size_t
 
Ћn
, *
u
),

640 *
u
, cЏ° *
s
, 
Ћn
, 
ЪdТt
);

641 
BIO_dump
(
BIO
 *
b
,cЏ° *
byЛs
,
Ћn
);

642 
BIO_dump_ЪdТt
(
BIO
 *
b
,cЏ° *
byЛs
,
Ћn
,
ЪdТt
);

643 #iвdeа
OPENSSL_NO_FP_API


644 
BIO_dump_е
(
FILE
 *
е
, cЏ° *
s
, 
Ћn
);

645 
BIO_dump_ЪdТt_е
(
FILE
 *
е
, cЏ° *
s
, 
Ћn
, 
ЪdТt
);

647 
ho°Тt
 *
BIO_gСho°by«me
(cЏ° *
«me
);

656 
BIO_sock_Фr№
(
sock
);

657 
BIO_sockС_ioщl
(
fd
, 
ty≥
, *
ђg
);

658 
BIO_sockС_nbio
(
fd
,
mode
);

659 
BIO_gС_p№t
(cЏ° *
°r
, *
p№t_±r
);

660 
BIO_gС_ho°_Э
(cЏ° *
°r
, *
Э
);

661 
BIO_gС_acы±_sockС
(*
ho°_p№t
,
mode
);

662 
BIO_acы±
(
sock
,**
Э_p№t
);

663 
BIO_sock_ЪЩ
();

664 
BIO_sock_юЧnup
();

665 
BIO_£t_tэ_ndЦay
(
sock
,
tuЇ_Џ
);

667 
BIO
 *
BIO_√w_sockС
(
sock
, 
юo£_жag
);

668 
BIO
 *
BIO_√w_dgњm
(
fd
, 
юo£_жag
);

669 
BIO
 *
BIO_√w_fd
(
fd
, 
юo£_жag
);

670 
BIO
 *
BIO_√w_cЏ√щ
(*
ho°_p№t
);

671 
BIO
 *
BIO_√w_acы±
(*
ho°_p№t
);

673 
BIO_√w_bio_ЈЬ
(
BIO
 **
bio1
, 
size_t
 
wrЩebuf1
,

674 
BIO
 **
bio2
, 
size_t
 
wrЩebuf2
);

680 
BIO_cЁy_√xt_їМy
(
BIO
 *
b
);

684 #ifdeа
__GNUC__


685 
	#__bio_h__©М__
 
__©МibuЛ__


	)

687 
	#__bio_h__©М__
(
x
)

	)

689 
BIO_іЪtf
(
BIO
 *
bio
, cЏ° *
f№m©
, ...)

690 
__bio_h__©М__
((
__f№m©__
(
__іЪtf__
,2,3)));

691 
BIO_vіЪtf
(
BIO
 *
bio
, cЏ° *
f№m©
, 
va_li°
 
ђgs
)

692 
__bio_h__©М__
((
__f№m©__
(
__іЪtf__
,2,0)));

693 
BIO_ҐіЪtf
(*
buf
, 
size_t
 
n
, cЏ° *
f№m©
, ...)

694 
__bio_h__©М__
((
__f№m©__
(
__іЪtf__
,3,4)));

695 
BIO_vҐіЪtf
(*
buf
, 
size_t
 
n
, cЏ° *
f№m©
, 
va_li°
 
ђgs
)

696 
__bio_h__©М__
((
__f№m©__
(
__іЪtf__
,3,0)));

697 #undeа
__bio_h__©М__


703 
ERR_lяd_BIO_°rЪgs
();

708 
	#BIO_F_ACPT_STATE
 100

	)

709 
	#BIO_F_BIO_ACCEPT
 101

	)

710 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

711 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

712 
	#BIO_F_BIO_CTRL
 103

	)

713 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

714 
	#BIO_F_BIO_GETS
 104

	)

715 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

716 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

717 
	#BIO_F_BIO_GET_PORT
 107

	)

718 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

719 
	#BIO_F_BIO_NEW
 108

	)

720 
	#BIO_F_BIO_NEW_FILE
 109

	)

721 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

722 
	#BIO_F_BIO_NREAD
 123

	)

723 
	#BIO_F_BIO_NREAD0
 124

	)

724 
	#BIO_F_BIO_NWRITE
 125

	)

725 
	#BIO_F_BIO_NWRITE0
 122

	)

726 
	#BIO_F_BIO_PUTS
 110

	)

727 
	#BIO_F_BIO_READ
 111

	)

728 
	#BIO_F_BIO_SOCK_INIT
 112

	)

729 
	#BIO_F_BIO_WRITE
 113

	)

730 
	#BIO_F_BUFFER_CTRL
 114

	)

731 
	#BIO_F_CONN_CTRL
 127

	)

732 
	#BIO_F_CONN_STATE
 115

	)

733 
	#BIO_F_FILE_CTRL
 116

	)

734 
	#BIO_F_FILE_READ
 130

	)

735 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

736 
	#BIO_F_MEM_READ
 128

	)

737 
	#BIO_F_MEM_WRITE
 117

	)

738 
	#BIO_F_SSL_NEW
 118

	)

739 
	#BIO_F_WSASTARTUP
 119

	)

742 
	#BIO_R_ACCEPT_ERROR
 100

	)

743 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

744 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

745 
	#BIO_R_BROKEN_PIPE
 124

	)

746 
	#BIO_R_CONNECT_ERROR
 103

	)

747 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

748 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

749 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

750 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

751 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

752 
	#BIO_R_INVALID_ARGUMENT
 125

	)

753 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

754 
	#BIO_R_IN_USE
 123

	)

755 
	#BIO_R_KEEPALIVE
 109

	)

756 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

757 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

758 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

759 
	#BIO_R_NO_PORT_DEFINED
 113

	)

760 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

761 
	#BIO_R_NO_SUCH_FILE
 128

	)

762 
	#BIO_R_NULL_PARAMETER
 115

	)

763 
	#BIO_R_TAG_MISMATCH
 116

	)

764 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

765 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

766 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

767 
	#BIO_R_UNINITIALIZED
 120

	)

768 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

769 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

770 
	#BIO_R_WSASTARTUP
 122

	)

772 #ifdeа 
__эlu•lus


	@/usr/include/openssl/err.h

59 #iвdeа
HEADER_ERR_H


60 
	#HEADER_ERR_H


	)

62 
	~<ЁТs¶/e_os2.h
>

64 #iвdeа
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

66 
	~<°dlib.h
>

69 
	~<ЁТs¶/os¶_typ.h
>

70 #iвdeа
OPENSSL_NO_BIO


71 
	~<ЁТs¶/bio.h
>

73 #iвdeа
OPENSSL_NO_LHASH


74 
	~<ЁТs¶/lhash.h
>

77 #ifdef 
__эlu•lus


81 #iвdeа
OPENSSL_NO_ERR


82 
	#ERR_PUT_Фr№
(
a
,
b
,
c
,
d
,
e
и
	`ERR_put_Фr№
„,b,c,d,e)

	)

84 
	#ERR_PUT_Фr№
(
a
,
b
,
c
,
d
,
e
и
	`ERR_put_Фr№
„,b,c,
NULL
,0)

	)

87 
	~<ФЇo.h
>

89 
	#ERR_TXT_MALLOCED
 0x01

	)

90 
	#ERR_TXT_STRING
 0x02

	)

92 
	#ERR_FLAG_MARK
 0x01

	)

94 
	#ERR_NUM_ERRORS
 16

	)

95 
	sФr_°©e_°


97 
pid
;

98 
Фr_жags
[
ERR_NUM_ERRORS
];

99 
Фr_bufгr
[
ERR_NUM_ERRORS
];

100 *
Фr_d©a
[
ERR_NUM_ERRORS
];

101 
Фr_d©a_жags
[
ERR_NUM_ERRORS
];

102 cЏ° *
Фr_fЮe
[
ERR_NUM_ERRORS
];

103 
Фr_lЪe
[
ERR_NUM_ERRORS
];

104 
tЁ
,
bўtom
;

105 } 
	tERR_STATE
;

108 
	#ERR_LIB_NONE
 1

	)

109 
	#ERR_LIB_SYS
 2

	)

110 
	#ERR_LIB_BN
 3

	)

111 
	#ERR_LIB_RSA
 4

	)

112 
	#ERR_LIB_DH
 5

	)

113 
	#ERR_LIB_EVP
 6

	)

114 
	#ERR_LIB_BUF
 7

	)

115 
	#ERR_LIB_OBJ
 8

	)

116 
	#ERR_LIB_PEM
 9

	)

117 
	#ERR_LIB_DSA
 10

	)

118 
	#ERR_LIB_X509
 11

	)

120 
	#ERR_LIB_ASN1
 13

	)

121 
	#ERR_LIB_CONF
 14

	)

122 
	#ERR_LIB_CRYPTO
 15

	)

123 
	#ERR_LIB_EC
 16

	)

124 
	#ERR_LIB_SSL
 20

	)

130 
	#ERR_LIB_BIO
 32

	)

131 
	#ERR_LIB_PKCS7
 33

	)

132 
	#ERR_LIB_X509V3
 34

	)

133 
	#ERR_LIB_PKCS12
 35

	)

134 
	#ERR_LIB_RAND
 36

	)

135 
	#ERR_LIB_DSO
 37

	)

136 
	#ERR_LIB_ENGINE
 38

	)

137 
	#ERR_LIB_OCSP
 39

	)

138 
	#ERR_LIB_UI
 40

	)

139 
	#ERR_LIB_COMP
 41

	)

140 
	#ERR_LIB_ECDSA
 42

	)

141 
	#ERR_LIB_ECDH
 43

	)

142 
	#ERR_LIB_STORE
 44

	)

144 
	#ERR_LIB_USER
 128

	)

146 
	#SYSФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

147 
	#BNФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

148 
	#RSAФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

149 
	#DHФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

150 
	#EVPФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

151 
	#BUFФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

152 
	#OBJФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

153 
	#PEMФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

154 
	#DSAФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

155 
	#X509Фr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

156 
	#ASN1Фr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

157 
	#CONFФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

158 
	#CRYPTOФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

159 
	#ECФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

160 
	#SSLФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

161 
	#BIOФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

162 
	#PKCS7Фr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

163 
	#X509V3Фr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

164 
	#PKCS12Фr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

165 
	#RANDФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

166 
	#DSOФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

167 
	#ENGINEФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

168 
	#OCSPФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

169 
	#UIФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

170 
	#COMPФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

171 
	#ECDSAФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

172 
	#ECDHФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

173 
	#STOREФr
(
f
,
r
и
	`ERR_PUT_Фr№
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

177 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

178 (((()
f
)&0xfffL)*0x1000)| \

179 (((()
r
)&0xfffL)))

	)

180 
	#ERR_GET_LIB
(
l
и()((((о)>>24L)&0xffL)

	)

181 
	#ERR_GET_FUNC
(
l
и()((((о)>>12L)&0xfffL)

	)

182 
	#ERR_GET_REASON
(
l
и()(÷)&0xfffL)

	)

183 
	#ERR_FATAL_ERROR
(
l
и()(÷)&
ERR_R_FATAL
)

	)

187 
	#SYS_F_FOPEN
 1

	)

188 
	#SYS_F_CONNECT
 2

	)

189 
	#SYS_F_GETSERVBYNAME
 3

	)

190 
	#SYS_F_SOCKET
 4

	)

191 
	#SYS_F_IOCTLSOCKET
 5

	)

192 
	#SYS_F_BIND
 6

	)

193 
	#SYS_F_LISTEN
 7

	)

194 
	#SYS_F_ACCEPT
 8

	)

195 
	#SYS_F_WSASTARTUP
 9

	)

196 
	#SYS_F_OPENDIR
 10

	)

197 
	#SYS_F_FREAD
 11

	)

201 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

202 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

203 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

204 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

205 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

206 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

207 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

208 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

209 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

210 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

211 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

212 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

213 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

214 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

215 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

216 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

217 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

218 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

219 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

220 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

221 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

222 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

223 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

224 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

225 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

226 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

227 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

228 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

230 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

231 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

232 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

233 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

234 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

235 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

238 
	#ERR_R_FATAL
 64

	)

239 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

240 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

241 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

242 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

243 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

249 
	sERR_°rЪg_d©a_°


251 
Фr№
;

252 cЏ° *
°rЪg
;

253 } 
	tERR_STRING_DATA
;

255 
ERR_put_Фr№
(
lib
, 
func
,
їasЏ
,cЏ° *
fЮe
,
lЪe
);

256 
ERR_£t_Фr№_d©a
(*
d©a
,
жags
);

258 
ERR_gС_Фr№
();

259 
ERR_gС_Фr№_lЪe
(cЏ° **
fЮe
,*
lЪe
);

260 
ERR_gС_Фr№_lЪe_d©a
(cЏ° **
fЮe
,*
lЪe
,

261 cЏ° **
d©a
, *
жags
);

262 
ERR_≥ek_Фr№
();

263 
ERR_≥ek_Фr№_lЪe
(cЏ° **
fЮe
,*
lЪe
);

264 
ERR_≥ek_Фr№_lЪe_d©a
(cЏ° **
fЮe
,*
lЪe
,

265 cЏ° **
d©a
,*
жags
);

266 
ERR_≥ek_ѕ°_Фr№
();

267 
ERR_≥ek_ѕ°_Фr№_lЪe
(cЏ° **
fЮe
,*
lЪe
);

268 
ERR_≥ek_ѕ°_Фr№_lЪe_d©a
(cЏ° **
fЮe
,*
lЪe
,

269 cЏ° **
d©a
,*
жags
);

270 
ERR_юЧr_Фr№
();

271 *
ERR_Фr№_°rЪg
(
e
,*
buf
);

272 
ERR_Фr№_°rЪg_n
(
e
, *
buf
, 
size_t
 
Ћn
);

273 cЏ° *
ERR_lib_Фr№_°rЪg
(
e
);

274 cЏ° *
ERR_func_Фr№_°rЪg
(
e
);

275 cЏ° *
ERR_їasЏ_Фr№_°rЪg
(
e
);

276 
ERR_іЪt_Фr№s_cb
((*
cb
)(cЏ° *
°r
, 
size_t
 
Ћn
, *
u
),

277 *
u
);

278 #iвdeа
OPENSSL_NO_FP_API


279 
ERR_іЪt_Фr№s_е
(
FILE
 *
е
);

281 #iвdeа
OPENSSL_NO_BIO


282 
ERR_іЪt_Фr№s
(
BIO
 *
bp
);

283 
ERR_add_Фr№_d©a
(
num
, ...);

285 
ERR_lяd_°rЪgs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

286 
ERR_u∆яd_°rЪgs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

287 
ERR_lяd_ERR_°rЪgs
();

288 
ERR_lяd_ьy±o_°rЪgs
();

289 
ERR_дУ_°rЪgs
();

291 
ERR_їmove_°©e
(
pid
);

292 
ERR_STATE
 *
ERR_gС_°©e
();

294 #iвdeа
OPENSSL_NO_LHASH


295 
LHASH
 *
ERR_gС_°rЪg_ПbЋ
();

296 
LHASH
 *
ERR_gС_Фr_°©e_ПbЋ
();

297 
ERR_їЋa£_Фr_°©e_ПbЋ
(
LHASH
 **
hash
);

300 
ERR_gС_√xt_Фr№_libњry
();

302 
ERR_£t_mђk
();

303 
ERR_pЁ_to_mђk
();

309 cЏ° 
ERR_FNS
 *
ERR_gС_imґemТПtiЏ
();

312 
ERR_£t_imґemТПtiЏ
(cЏ° 
ERR_FNS
 *
вs
);

314 #ifdef 
__эlu•lus


	@/usr/include/openssl/pem.h

59 #iвdeа
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<ЁТs¶/e_os2.h
>

63 #iвdeа
OPENSSL_NO_BIO


64 
	~<ЁТs¶/bio.h
>

66 #iвdeа
OPENSSL_NO_STACK


67 
	~<ЁТs¶/°ack.h
>

69 
	~<ЁТs¶/evp.h
>

70 
	~<ЁТs¶/x509.h
>

71 
	~<ЁТs¶/≥m2.h
>

73 #ifdeа 
__эlu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WЩhRSAEnьy±iЏ


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WЩhRSAEnьy±iЏ


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WЩhRSAEnьy±iЏ


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

129 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

130 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

131 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

132 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

133 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

134 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

135 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

139 
	sPEM_Encode_SЧl_°


141 
EVP_ENCODE_CTX
 
Тcode
;

142 
EVP_MD_CTX
 
md
;

143 
EVP_CIPHER_CTX
 
cЭhФ
;

144 } 
	tPEM_ENCODE_SEAL_CTX
;

147 
	#PEM_TYPE_ENCRYPTED
 10

	)

148 
	#PEM_TYPE_MIC_ONLY
 20

	)

149 
	#PEM_TYPE_MIC_CLEAR
 30

	)

150 
	#PEM_TYPE_CLEAR
 40

	)

152 
	s≥m_їcЭ_°


154 *
«me
;

155 
X509_NAME
 *
dn
;

157 
cЭhФ
;

158 
key_Тc
;

160 } 
	tPEM_USER
;

162 
	s≥m_щx_°


164 
ty≥
;

167 
vФsiЏ
;

168 
mode
;

169 } 
іoc_ty≥
;

171 *
domaЪ
;

174 
cЭhФ
;

177 } 
DEK_Ъfo
;

179 
PEM_USER
 *
№igЪ©№
;

181 
num_їcЭЫЅ
;

182 
PEM_USER
 **
їcЭЫЅ
;

184 #iвdeа
OPENSSL_NO_STACK


185 
STACK
 *
x509_chaЪ
;

187 *
x509_chaЪ
;

189 
EVP_MD
 *
md
;

191 
md_Тc
;

192 
md_Ћn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Ћn
;

197 *
key
;

202 
d©a_Тc
;

203 
d©a_Ћn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifdeа
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_їad_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
и

	)

215 
	#IMPLEMENT_PEM_wrЩe_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
и

	)

216 
	#IMPLEMENT_PEM_wrЩe_cb_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
и

	)

220 
	#IMPLEMENT_PEM_їad_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

221 
ty≥
 *
PEM_їad_
##
	`«me
(
FILE
 *
е
,Бy≥ **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
)\

223  (
ty≥
*)
	`PEM_ASN1_їad
(
	`CHECKED_D2I_OF
—y≥, 
d2i_
##
aҐ1
), \

224 
°r
, 
е
, \

225 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

226 
cb
, 
u
); \

227 }

	)

229 
	#IMPLEMENT_PEM_wrЩe_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

230 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, 
ty≥
 *
x
) \

232  
	`PEM_ASN1_wrЩe
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
aҐ1
), \

233 
°r
, 
е
, \

234 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

235 
NULL
, NULL, 0, NULL, NULL); \

236 }

	)

238 
	#IMPLEMENT_PEM_wrЩe_е_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

239 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, cЏ° 
ty≥
 *
x
) \

241  
	`PEM_ASN1_wrЩe
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d_
##
aҐ1
), \

242 
°r
, 
е
, \

243 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
), \

244 
NULL
, NULL, 0, NULL, NULL); \

245 }

	)

247 
	#IMPLEMENT_PEM_wrЩe_cb_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

248 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

249 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, \

250 *
u
) \

252  
	`PEM_ASN1_wrЩe
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
aҐ1
), \

253 
°r
, 
е
, \

254 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

255 
Тc
, 
k°r
, 
kЋn
, 
cb
, 
u
); \

256 }

	)

258 
	#IMPLEMENT_PEM_wrЩe_cb_е_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

259 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

260 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, \

261 *
u
) \

263  
	`PEM_ASN1_wrЩe
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d_
##
aҐ1
), \

264 
°r
, 
е
, \

265 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
), \

266 
Тc
, 
k°r
, 
kЋn
, 
cb
, 
u
); \

267 }

	)

271 
	#IMPLEMENT_PEM_їad_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

272 
ty≥
 *
PEM_їad_bio_
##
	`«me
(
BIO
 *
bp
,Бy≥ **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
)\

274  (
ty≥
*)
	`PEM_ASN1_їad_bio
(
	`CHECKED_D2I_OF
—y≥, 
d2i_
##
aҐ1
), \

275 
°r
, 
bp
, \

276 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

277 
cb
, 
u
); \

278 }

	)

280 
	#IMPLEMENT_PEM_wrЩe_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

281 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

283  
	`PEM_ASN1_wrЩe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
aҐ1
), \

284 
°r
, 
bp
, \

285 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

286 
NULL
, NULL, 0, NULL, NULL); \

287 }

	)

289 
	#IMPLEMENT_PEM_wrЩe_bio_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

290 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, cЏ° 
ty≥
 *
x
) \

292  
	`PEM_ASN1_wrЩe_bio
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d_
##
aҐ1
), \

293 
°r
, 
bp
, \

294 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
), \

295 
NULL
, NULL, 0, NULL, NULL); \

296 }

	)

298 
	#IMPLEMENT_PEM_wrЩe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

299 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

300 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, *
u
) \

302  
	`PEM_ASN1_wrЩe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
aҐ1
), \

303 
°r
, 
bp
, \

304 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

305 
Тc
, 
k°r
, 
kЋn
, 
cb
, 
u
); \

306 }

	)

308 
	#IMPLEMENT_PEM_wrЩe_cb_bio_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

309 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

310 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, *
u
) \

312  
	`PEM_ASN1_wrЩe_bio
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d_
##
aҐ1
), \

313 
°r
, 
bp
, \

314 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
), \

315 
Тc
, 
k°r
, 
kЋn
, 
cb
, 
u
); \

316 }

	)

318 
	#IMPLEMENT_PEM_wrЩe
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

319 
	`IMPLEMENT_PEM_wrЩe_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

320 
	`IMPLEMENT_PEM_wrЩe_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

322 
	#IMPLEMENT_PEM_wrЩe_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

323 
	`IMPLEMENT_PEM_wrЩe_bio_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

324 
	`IMPLEMENT_PEM_wrЩe_е_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

326 
	#IMPLEMENT_PEM_wrЩe_cb
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

327 
	`IMPLEMENT_PEM_wrЩe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

328 
	`IMPLEMENT_PEM_wrЩe_cb_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

330 
	#IMPLEMENT_PEM_wrЩe_cb_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

331 
	`IMPLEMENT_PEM_wrЩe_cb_bio_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

332 
	`IMPLEMENT_PEM_wrЩe_cb_е_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

334 
	#IMPLEMENT_PEM_їad
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

335 
	`IMPLEMENT_PEM_їad_bio
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

336 
	`IMPLEMENT_PEM_їad_е
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

338 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

339 
	`IMPLEMENT_PEM_їad
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

340 
	`IMPLEMENT_PEM_wrЩe
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

342 
	#IMPLEMENT_PEM_rw_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

343 
	`IMPLEMENT_PEM_їad
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

344 
	`IMPLEMENT_PEM_wrЩe_cЏ°
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

346 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

347 
	`IMPLEMENT_PEM_їad
(
«me
, 
ty≥
, 
°r
, 
aҐ1
) \

348 
	`IMPLEMENT_PEM_wrЩe_cb
(
«me
, 
ty≥
, 
°r
, 
aҐ1
)

	)

352 #iа
defЪed
(
OPENSSL_SYS_WIN16
и|| defЪed(
OPENSSL_NO_FP_API
)

354 
	#DECLARE_PEM_їad_е
(
«me
, 
ty≥
и

	)

355 
	#DECLARE_PEM_wrЩe_е
(
«me
, 
ty≥
и

	)

356 
	#DECLARE_PEM_wrЩe_cb_е
(
«me
, 
ty≥
и

	)

360 
	#DECLARE_PEM_їad_е
(
«me
, 
ty≥
) \

361 
ty≥
 *
PEM_їad_
##
	`«me
(
FILE
 *
е
,Бy≥ **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_wrЩe_е
(
«me
, 
ty≥
) \

364 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, 
ty≥
 *
x
);

	)

366 
	#DECLARE_PEM_wrЩe_е_cЏ°
(
«me
, 
ty≥
) \

367 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, cЏ° 
ty≥
 *
x
);

	)

369 
	#DECLARE_PEM_wrЩe_cb_е
(
«me
, 
ty≥
) \

370 
PEM_wrЩe_
##
	`«me
(
FILE
 *
е
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

371 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

	)

375 #iвdeа
OPENSSL_NO_BIO


376 
	#DECLARE_PEM_їad_bio
(
«me
, 
ty≥
) \

377 
ty≥
 *
PEM_їad_bio_
##
	`«me
(
BIO
 *
bp
,Бy≥ **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

	)

379 
	#DECLARE_PEM_wrЩe_bio
(
«me
, 
ty≥
) \

380 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

382 
	#DECLARE_PEM_wrЩe_bio_cЏ°
(
«me
, 
ty≥
) \

383 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, cЏ° 
ty≥
 *
x
);

	)

385 
	#DECLARE_PEM_wrЩe_cb_bio
(
«me
, 
ty≥
) \

386 
PEM_wrЩe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
, \

387 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

	)

391 
	#DECLARE_PEM_їad_bio
(
«me
, 
ty≥
и

	)

392 
	#DECLARE_PEM_wrЩe_bio
(
«me
, 
ty≥
и

	)

393 
	#DECLARE_PEM_wrЩe_cb_bio
(
«me
, 
ty≥
и

	)

397 
	#DECLARE_PEM_wrЩe
(
«me
, 
ty≥
) \

398 
	`DECLARE_PEM_wrЩe_bio
(
«me
, 
ty≥
) \

399 
	`DECLARE_PEM_wrЩe_е
(
«me
, 
ty≥
)

	)

401 
	#DECLARE_PEM_wrЩe_cЏ°
(
«me
, 
ty≥
) \

402 
	`DECLARE_PEM_wrЩe_bio_cЏ°
(
«me
, 
ty≥
) \

403 
	`DECLARE_PEM_wrЩe_е_cЏ°
(
«me
, 
ty≥
)

	)

405 
	#DECLARE_PEM_wrЩe_cb
(
«me
, 
ty≥
) \

406 
	`DECLARE_PEM_wrЩe_cb_bio
(
«me
, 
ty≥
) \

407 
	`DECLARE_PEM_wrЩe_cb_е
(
«me
, 
ty≥
)

	)

409 
	#DECLARE_PEM_їad
(
«me
, 
ty≥
) \

410 
	`DECLARE_PEM_їad_bio
(
«me
, 
ty≥
) \

411 
	`DECLARE_PEM_їad_е
(
«me
, 
ty≥
)

	)

413 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

414 
	`DECLARE_PEM_їad
(
«me
, 
ty≥
) \

415 
	`DECLARE_PEM_wrЩe
(
«me
, 
ty≥
)

	)

417 
	#DECLARE_PEM_rw_cЏ°
(
«me
, 
ty≥
) \

418 
	`DECLARE_PEM_їad
(
«me
, 
ty≥
) \

419 
	`DECLARE_PEM_wrЩe_cЏ°
(
«me
, 
ty≥
)

	)

421 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

422 
	`DECLARE_PEM_їad
(
«me
, 
ty≥
) \

423 
	`DECLARE_PEM_wrЩe_cb
(
«me
, 
ty≥
)

	)

425 #ifdeа
SSLEAY_MACROS


427 
	#PEM_wrЩe_SSL_SESSION
(
е
,
x
) \

428 
	`PEM_ASN1_wrЩe
(((*)())
i2d_SSL_SESSION
, \

429 
PEM_STRING_SSL_SESSION
,
е
, (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

430 
	#PEM_wrЩe_X509
(
е
,
x
) \

431 
	`PEM_ASN1_wrЩe
(((*)())
i2d_X509
,
PEM_STRING_X509
,
е
, \

432 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

433 
	#PEM_wrЩe_X509_REQ
(
е
,
x
и
	`PEM_ASN1_wrЩe
( \

434 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
е
,(*)
x
, \

435 
NULL
,NULL,0,NULL,NULL)

	)

436 
	#PEM_wrЩe_X509_CRL
(
е
,
x
) \

437 
	`PEM_ASN1_wrЩe
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
, \

438 
е
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

439 
	#PEM_wrЩe_RSAPriv©eKey
(
е
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

440 
	`PEM_ASN1_wrЩe
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,
е
,\

441 (*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

442 
	#PEM_wrЩe_RSAPublicKey
(
е
,
x
) \

443 
	`PEM_ASN1_wrЩe
(((*)())
i2d_RSAPublicKey
,\

444 
PEM_STRING_RSA_PUBLIC
,
е
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

445 
	#PEM_wrЩe_DSAPriv©eKey
(
е
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

446 
	`PEM_ASN1_wrЩe
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,
е
,\

447 (*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

448 
	#PEM_wrЩe_Priv©eKey
(
bp
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

449 
	`PEM_ASN1_wrЩe
(((*)())
i2d_Priv©eKey
,\

450 (((
x
)->
ty≥
 =р
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

451 
bp
,(*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

452 
	#PEM_wrЩe_PKCS7
(
е
,
x
) \

453 
	`PEM_ASN1_wrЩe
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
е
, \

454 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

455 
	#PEM_wrЩe_DHЈњms
(
е
,
x
) \

456 
	`PEM_ASN1_wrЩe
(((*)())
i2d_DHЈњms
,
PEM_STRING_DHPARAMS
,
е
,\

457 (*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

459 
	#PEM_wrЩe_NETSCAPE_CERT_SEQUENCE
(
е
,
x
) \

460 
	`PEM_ASN1_wrЩe
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

461 
PEM_STRING_X509
,
е
, \

462 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

464 
	#PEM_їad_SSL_SESSION
(
е
,
x
,
cb
,
u
и(
SSL_SESSION
 *)
	`PEM_ASN1_їad
( \

465 (*(*)())
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
е
,(**)
x
,
cb
,
u
)

	)

466 
	#PEM_їad_X509
(
е
,
x
,
cb
,
u
и(
X509
 *)
	`PEM_ASN1_їad
( \

467 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
е
,(**)
x
,
cb
,
u
)

	)

468 
	#PEM_їad_X509_REQ
(
е
,
x
,
cb
,
u
и(
X509_REQ
 *)
	`PEM_ASN1_їad
( \

469 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
е
,(**)
x
,
cb
,
u
)

	)

470 
	#PEM_їad_X509_CRL
(
е
,
x
,
cb
,
u
и(
X509_CRL
 *)
	`PEM_ASN1_їad
( \

471 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
е
,(**)
x
,
cb
,
u
)

	)

472 
	#PEM_їad_RSAPriv©eKey
(
е
,
x
,
cb
,
u
и(
RSA
 *)
	`PEM_ASN1_їad
( \

473 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
е
,(**)
x
,
cb
,
u
)

	)

474 
	#PEM_їad_RSAPublicKey
(
е
,
x
,
cb
,
u
и(
RSA
 *)
	`PEM_ASN1_їad
( \

475 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
е
,(**)
x
,
cb
,
u
)

	)

476 
	#PEM_їad_DSAPriv©eKey
(
е
,
x
,
cb
,
u
и(
DSA
 *)
	`PEM_ASN1_їad
( \

477 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
е
,(**)
x
,
cb
,
u
)

	)

478 
	#PEM_їad_Priv©eKey
(
е
,
x
,
cb
,
u
и(
EVP_PKEY
 *)
	`PEM_ASN1_їad
( \

479 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
е
,(**)
x
,
cb
,
u
)

	)

480 
	#PEM_їad_PKCS7
(
е
,
x
,
cb
,
u
и(
PKCS7
 *)
	`PEM_ASN1_їad
( \

481 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
е
,(**)
x
,
cb
,
u
)

	)

482 
	#PEM_їad_DHЈњms
(
е
,
x
,
cb
,
u
и(
DH
 *)
	`PEM_ASN1_їad
( \

483 (*(*)())
d2i_DHЈњms
,
PEM_STRING_DHPARAMS
,
е
,(**)
x
,
cb
,
u
)

	)

485 
	#PEM_їad_NETSCAPE_CERT_SEQUENCE
(
е
,
x
,
cb
,
u
) \

486 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_їad
( \

487 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
е
,\

488 (**)
x
,
cb
,
u
)

	)

490 
	#PEM_wrЩe_bio_X509
(
bp
,
x
) \

491 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_X509
,
PEM_STRING_X509
,
bp
, \

492 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

493 
	#PEM_wrЩe_bio_X509_REQ
(
bp
,
x
и
	`PEM_ASN1_wrЩe_bio
( \

494 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(*)
x
, \

495 
NULL
,NULL,0,NULL,NULL)

	)

496 
	#PEM_wrЩe_bio_X509_CRL
(
bp
,
x
) \

497 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
,\

498 
bp
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

499 
	#PEM_wrЩe_bio_RSAPriv©eKey
(
bp
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

500 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,\

501 
bp
,(*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

502 
	#PEM_wrЩe_bio_RSAPublicKey
(
bp
,
x
) \

503 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_RSAPublicKey
, \

504 
PEM_STRING_RSA_PUBLIC
,\

505 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

506 
	#PEM_wrЩe_bio_DSAPriv©eKey
(
bp
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

507 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,\

508 
bp
,(*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

509 
	#PEM_wrЩe_bio_Priv©eKey
(
bp
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

510 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_Priv©eKey
,\

511 (((
x
)->
ty≥
 =р
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

512 
bp
,(*)
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
)

	)

513 
	#PEM_wrЩe_bio_PKCS7
(
bp
,
x
) \

514 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
bp
, \

515 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

516 
	#PEM_wrЩe_bio_DHЈњms
(
bp
,
x
) \

517 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_DHЈњms
,
PEM_STRING_DHPARAMS
,\

518 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

519 
	#PEM_wrЩe_bio_DSAЈњms
(
bp
,
x
) \

520 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_DSAЈњms
, \

521 
PEM_STRING_DSAPARAMS
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

523 
	#PEM_wrЩe_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
) \

524 
	`PEM_ASN1_wrЩe_bio
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

525 
PEM_STRING_X509
,
bp
, \

526 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

528 
	#PEM_їad_bio_X509
(
bp
,
x
,
cb
,
u
и(
X509
 *)
	`PEM_ASN1_їad_bio
( \

529 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
bp
,(**)
x
,
cb
,
u
)

	)

530 
	#PEM_їad_bio_X509_REQ
(
bp
,
x
,
cb
,
u
и(
X509_REQ
 *)
	`PEM_ASN1_їad_bio
( \

531 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(**)
x
,
cb
,
u
)

	)

532 
	#PEM_їad_bio_X509_CRL
(
bp
,
x
,
cb
,
u
и(
X509_CRL
 *)
	`PEM_ASN1_їad_bio
( \

533 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
bp
,(**)
x
,
cb
,
u
)

	)

534 
	#PEM_їad_bio_RSAPriv©eKey
(
bp
,
x
,
cb
,
u
и(
RSA
 *)
	`PEM_ASN1_їad_bio
( \

535 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
bp
,(**)
x
,
cb
,
u
)

	)

536 
	#PEM_їad_bio_RSAPublicKey
(
bp
,
x
,
cb
,
u
и(
RSA
 *)
	`PEM_ASN1_їad_bio
( \

537 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
bp
,(**)
x
,
cb
,
u
)

	)

538 
	#PEM_їad_bio_DSAPriv©eKey
(
bp
,
x
,
cb
,
u
и(
DSA
 *)
	`PEM_ASN1_їad_bio
( \

539 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
bp
,(**)
x
,
cb
,
u
)

	)

540 
	#PEM_їad_bio_Priv©eKey
(
bp
,
x
,
cb
,
u
и(
EVP_PKEY
 *)
	`PEM_ASN1_їad_bio
( \

541 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
bp
,(**)
x
,
cb
,
u
)

	)

543 
	#PEM_їad_bio_PKCS7
(
bp
,
x
,
cb
,
u
и(
PKCS7
 *)
	`PEM_ASN1_їad_bio
( \

544 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
bp
,(**)
x
,
cb
,
u
)

	)

545 
	#PEM_їad_bio_DHЈњms
(
bp
,
x
,
cb
,
u
и(
DH
 *)
	`PEM_ASN1_їad_bio
( \

546 (*(*)())
d2i_DHЈњms
,
PEM_STRING_DHPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

547 
	#PEM_їad_bio_DSAЈњms
(
bp
,
x
,
cb
,
u
и(
DSA
 *)
	`PEM_ASN1_їad_bio
( \

548 (*(*)())
d2i_DSAЈњms
,
PEM_STRING_DSAPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

550 
	#PEM_їad_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
,
cb
,
u
) \

551 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_їad_bio
( \

552 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
bp
,\

553 (**)
x
,
cb
,
u
)

	)

559 
	t≥m_Јssw№d_cb
(*
	tbuf
, 
	tsize
, 
	trwжag
, *
	tu£rd©a
);

562 
	t≥m_Јssw№d_cb
(*
	tbuf
, 
	tsize
, 
	trwжag
);

565 
PEM_gС_EVP_CIPHER_INFO
(*
hЧdФ
, 
EVP_CIPHER_INFO
 *
cЭhФ
);

566 
PEM_do_hЧdФ
 (
EVP_CIPHER_INFO
 *
cЭhФ
, *
d©a
,*
Ћn
,

567 
≥m_Јssw№d_cb
 *
€ќback
,*
u
);

569 #iвdeа
OPENSSL_NO_BIO


570 
PEM_їad_bio
(
BIO
 *
bp
, **
«me
, **
hЧdФ
,

571 **
d©a
,*
Ћn
);

572 
PEM_wrЩe_bio
(
BIO
 *
bp
,cЏ° *
«me
,*
hdr
,*
d©a
,

573 
Ћn
);

574 
PEM_byЛs_їad_bio
(**
pd©a
, *
ґТ
, **
≤m
, cЏ° *
«me
, 
BIO
 *
bp
,

575 
≥m_Јssw№d_cb
 *
cb
, *
u
);

576 * 
PEM_ASN1_їad_bio
(
d2i_of_void
 *
d2i
, cЏ° *
«me
, 
BIO
 *
bp
,

577 **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

579 
	#PEM_ASN1_їad_bio_of
(
ty≥
,
d2i
,
«me
,
bp
,
x
,
cb
,
u
) \

580 ((
ty≥
*)
	`PEM_ASN1_їad_bio
(
	`CHECKED_D2I_OF
—y≥, 
d2i
), \

581 
«me
, 
bp
, \

582 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

583 
cb
, 
u
))

	)

585 
PEM_ASN1_wrЩe_bio
(
i2d_of_void
 *
i2d
,cЏ° *
«me
,
BIO
 *
bp
,*
x
,

586 cЏ° 
EVP_CIPHER
 *
Тc
,*
k°r
,
kЋn
,

587 
≥m_Јssw№d_cb
 *
cb
, *
u
);

589 
	#PEM_ASN1_wrЩe_bio_of
(
ty≥
,
i2d
,
«me
,
bp
,
x
,
Тc
,
k°r
,
kЋn
,
cb
,
u
) \

590 (
	`PEM_ASN1_wrЩe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

591 
«me
, 
bp
, \

592 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

593 
Тc
, 
k°r
, 
kЋn
, 
cb
, 
u
))

	)

595 
STACK_OF
(
X509_INFO
и* 
PEM_X509_INFO_їad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOи*
sk
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

596 
PEM_X509_INFO_wrЩe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
Тc
,

597 *
k°r
, 
kЋn
, 
≥m_Јssw№d_cb
 *
cd
, *
u
);

600 #iвdeа
OPENSSL_SYS_WIN16


601 
PEM_їad
(
FILE
 *
е
, **
«me
, **
hЧdФ
,

602 **
d©a
,*
Ћn
);

603 
PEM_wrЩe
(
FILE
 *
е
,*
«me
,*
hdr
,*
d©a
,
Ћn
);

604 * 
PEM_ASN1_їad
(
d2i_of_void
 *
d2i
, cЏ° *
«me
, 
FILE
 *
е
, **
x
,

605 
≥m_Јssw№d_cb
 *
cb
, *
u
);

606 
PEM_ASN1_wrЩe
(
i2d_of_void
 *
i2d
,cЏ° *
«me
,
FILE
 *
е
,

607 *
x
,cЏ° 
EVP_CIPHER
 *
Тc
,*
k°r
,

608 
kЋn
,
≥m_Јssw№d_cb
 *
€ќback
, *
u
);

609 
STACK_OF
(
X509_INFO
и* 
PEM_X509_INFO_їad
(
FILE
 *
е
, STACK_OF(X509_INFOи*
sk
,

610 
≥m_Јssw№d_cb
 *
cb
, *
u
);

613 
PEM_SЧlInЩ
(
PEM_ENCODE_SEAL_CTX
 *
щx
, 
EVP_CIPHER
 *
ty≥
,

614 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

615 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

616 
PEM_SЧlUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
щx
, *
out
, *
ouО
,

617 *
Ъ
, 
Ъl
);

618 
PEM_SЧlFЪЃ
(
PEM_ENCODE_SEAL_CTX
 *
щx
, *
sig
,*
sigl
,

619 *
out
, *
ouО
, 
EVP_PKEY
 *
іiv
);

621 
PEM_SignInЩ
(
EVP_MD_CTX
 *
щx
, 
EVP_MD
 *
ty≥
);

622 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
щx
,*
d
,
ъt
);

623 
PEM_SignFЪЃ
(
EVP_MD_CTX
 *
щx
, *
sigїt
,

624 *
sigЋn
, 
EVP_PKEY
 *
pkey
);

626 
PEM_def_€ќback
(*
buf
, 
num
, 
w
, *
key
);

627 
PEM_іoc_ty≥
(*
buf
, 
ty≥
);

628 
PEM_dek_Ъfo
(*
buf
, cЏ° *
ty≥
, 
Ћn
, *
°r
);

630 #iвdeа
SSLEAY_MACROS


632 
	~<ЁТs¶/symhacks.h
>

634 
DECLARE_PEM_rw
(
X509
, X509)

636 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

638 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

640 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

641 
DECLARE_PEM_wrЩe
(
X509_REQ_NEW
, 
X509_REQ
)

643 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

645 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

647 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

649 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

651 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

653 #iвdeа
OPENSSL_NO_RSA


655 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

657 
DECLARE_PEM_rw_cЏ°
(
RSAPublicKey
, 
RSA
)

658 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

662 #iвdeа
OPENSSL_NO_DSA


664 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

666 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

668 
DECLARE_PEM_rw_cЏ°
(
DSAЈњms
, 
DSA
)

672 #iвdeа
OPENSSL_NO_EC


673 
DECLARE_PEM_rw_cЏ°
(
ECPKPђamСФs
, 
EC_GROUP
)

674 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

675 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

678 #iвdeа
OPENSSL_NO_DH


680 
DECLARE_PEM_rw_cЏ°
(
DHЈњms
, 
DH
)

684 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

686 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

688 
PEM_wrЩe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

689 *
k°r
, 
kЋn
,

690 
≥m_Јssw№d_cb
 *
cb
, *
u
);

691 
PEM_wrЩe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, cЏ° 
EVP_CIPHER
 *,

692 *, , 
≥m_Јssw№d_cb
 *, *);

693 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
,

694 *
k°r
, 
kЋn
,

695 
≥m_Јssw№d_cb
 *
cb
, *
u
);

696 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

697 *
k°r
, 
kЋn
,

698 
≥m_Јssw№d_cb
 *
cb
, *
u
);

699 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

701 
i2d_PKCS8Priv©eKey_е
(
FILE
 *
е
, 
EVP_PKEY
 *
x
, cЏ° 
EVP_CIPHER
 *
Тc
,

702 *
k°r
, 
kЋn
,

703 
≥m_Јssw№d_cb
 *
cb
, *
u
);

704 
i2d_PKCS8Priv©eKey_nid_е
(
FILE
 *
е
, 
EVP_PKEY
 *
x
, 
nid
,

705 *
k°r
, 
kЋn
,

706 
≥m_Јssw№d_cb
 *
cb
, *
u
);

707 
PEM_wrЩe_PKCS8Priv©eKey_nid
(
FILE
 *
е
, 
EVP_PKEY
 *
x
, 
nid
,

708 *
k°r
, 
kЋn
,

709 
≥m_Јssw№d_cb
 *
cb
, *
u
);

711 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_е
(
FILE
 *
е
, EVP_PKEY **
x
, 
≥m_Јssw№d_cb
 *
cb
, *
u
);

713 
PEM_wrЩe_PKCS8Priv©eKey
(
FILE
 *
е
,
EVP_PKEY
 *
x
,cЏ° 
EVP_CIPHER
 *
Тc
,

714 *
k°r
,
kЋn
, 
≥m_Јssw№d_cb
 *
cd
, *
u
);

723 
ERR_lяd_PEM_°rЪgs
();

728 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

729 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

730 
	#PEM_F_DO_PK8PKEY
 126

	)

731 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

732 
	#PEM_F_LOAD_IV
 101

	)

733 
	#PEM_F_PEM_ASN1_READ
 102

	)

734 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

735 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

736 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

737 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

738 
	#PEM_F_PEM_DO_HEADER
 106

	)

739 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

740 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

741 
	#PEM_F_PEM_PK8PKEY
 119

	)

742 
	#PEM_F_PEM_READ
 108

	)

743 
	#PEM_F_PEM_READ_BIO
 109

	)

744 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

745 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

746 
	#PEM_F_PEM_SEALFINAL
 110

	)

747 
	#PEM_F_PEM_SEALINIT
 111

	)

748 
	#PEM_F_PEM_SIGNFINAL
 112

	)

749 
	#PEM_F_PEM_WRITE
 113

	)

750 
	#PEM_F_PEM_WRITE_BIO
 114

	)

751 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

752 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

753 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

756 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

757 
	#PEM_R_BAD_DECRYPT
 101

	)

758 
	#PEM_R_BAD_END_LINE
 102

	)

759 
	#PEM_R_BAD_IV_CHARS
 103

	)

760 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

761 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

762 
	#PEM_R_NOT_DEK_INFO
 105

	)

763 
	#PEM_R_NOT_ENCRYPTED
 106

	)

764 
	#PEM_R_NOT_PROC_TYPE
 107

	)

765 
	#PEM_R_NO_START_LINE
 108

	)

766 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

767 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

768 
	#PEM_R_READ_KEY
 111

	)

769 
	#PEM_R_SHORT_HEADER
 112

	)

770 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

771 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

773 #ifdeа 
__эlu•lus


	@/usr/include/openssl/rand.h

59 #iвdeа
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<ЁТs¶/os¶_typ.h
>

64 
	~<ЁТs¶/e_os2.h
>

66 #iа
defЪed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wЪdows.h
>

70 #ifdeа 
__эlu•lus


74 #iа
defЪed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sњnd_mСh_°


83 (*
£ed
)(cЏ° *
buf
, 
num
);

84 (*
byЛs
)(*
buf
, 
num
);

85 (*
юЧnup
)();

86 (*
add
)(cЏ° *
buf
, 
num
, 
ТМЁy
);

87 (*
p£ud№™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifdeа
BN_DEBUG


92 
њnd_іediщabЋ
;

95 
RAND_£t_њnd_mСhod
(cЏ° 
RAND_METHOD
 *
mСh
);

96 cЏ° 
RAND_METHOD
 *
RAND_gС_њnd_mСhod
();

97 #iвdeа
OPENSSL_NO_ENGINE


98 
RAND_£t_њnd_ТgЪe
(
ENGINE
 *
ТgЪe
);

100 
RAND_METHOD
 *
RAND_SSLЧy
();

101 
RAND_юЧnup
();

102 
RAND_byЛs
(*
buf
,
num
);

103 
RAND_p£udo_byЛs
(*
buf
,
num
);

104 
RAND_£ed
(cЏ° *
buf
,
num
);

105 
RAND_add
(cЏ° *
buf
,
num
,
ТМЁy
);

106 
RAND_lяd_fЮe
(cЏ° *
fЮe
,
max_byЛs
);

107 
RAND_wrЩe_fЮe
(cЏ° *
fЮe
);

108 cЏ° *
RAND_fЮe_«me
(*
fЮe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quФy_egd_byЛs
(cЏ° *
Јth
, *
buf
, 
byЛs
);

111 
RAND_egd
(cЏ° *
Јth
);

112 
RAND_egd_byЛs
(cЏ° *
Јth
,
byЛs
);

113 
RAND_pёl
();

115 #iа
defЪed
(
OPENSSL_SYS_WINDOWS
и|| defЪed(
OPENSSL_SYS_WIN32
)

117 
RAND_sьУn
();

118 
RAND_evТt
(
UINT
, 
WPARAM
, 
LPARAM
);

126 
ERR_lяd_RAND_°rЪgs
();

131 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

132 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

135 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

137 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ssl.h

170 #iвdeа
HEADER_SSL_H


171 
	#HEADER_SSL_H


	)

173 
	~<ЁТs¶/e_os2.h
>

175 #iвdeа
OPENSSL_NO_COMP


176 
	~<ЁТs¶/comp.h
>

178 #iвdeа
OPENSSL_NO_BIO


179 
	~<ЁТs¶/bio.h
>

181 #iвdeа
OPENSSL_NO_DEPRECATED


182 #iвdeа
OPENSSL_NO_X509


183 
	~<ЁТs¶/x509.h
>

185 
	~<ЁТs¶/ьy±o.h
>

186 
	~<ЁТs¶/lhash.h
>

187 
	~<ЁТs¶/bufгr.h
>

189 
	~<ЁТs¶/≥m.h
>

191 
	~<ЁТs¶/ks¶.h
>

192 
	~<ЁТs¶/Іг°ack.h
>

193 
	~<ЁТs¶/symhacks.h
>

195 #ifdeа 
__эlu•lus


203 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

206 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

207 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

208 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

209 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

210 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

211 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

212 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

213 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

214 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

215 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

219 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

220 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

221 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

222 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

223 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

224 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

225 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

226 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

228 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

229 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

230 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

231 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

232 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

233 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

235 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

236 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

237 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

238 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

239 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

240 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

241 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

243 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

244 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

246 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

247 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

248 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

251 
	#SSL_TXT_LOW
 "LOW"

	)

252 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

253 
	#SSL_TXT_HIGH
 "HIGH"

	)

254 
	#SSL_TXT_kFZA
 "kFZA"

	)

255 
	#SSL_TXT_aFZA
 "aFZA"

	)

256 
	#SSL_TXT_eFZA
 "eFZA"

	)

257 
	#SSL_TXT_FZA
 "FZA"

	)

259 
	#SSL_TXT_aNULL
 "aNULL"

	)

260 
	#SSL_TXT_eNULL
 "eNULL"

	)

261 
	#SSL_TXT_NULL
 "NULL"

	)

263 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

264 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

265 
	#SSL_TXT_KRB5
 "KRB5"

	)

267 
	#SSL_TXT_kRSA
 "kRSA"

	)

268 
	#SSL_TXT_kDHr
 "kDHr"

	)

269 
	#SSL_TXT_kDHd
 "kDHd"

	)

270 
	#SSL_TXT_kEDH
 "kEDH"

	)

271 
	#SSL_TXT_aRSA
 "aRSA"

	)

272 
	#SSL_TXT_aDSS
 "aDSS"

	)

273 
	#SSL_TXT_aDH
 "aDH"

	)

274 
	#SSL_TXT_DSS
 "DSS"

	)

275 
	#SSL_TXT_DH
 "DH"

	)

276 
	#SSL_TXT_EDH
 "EDH"

	)

277 
	#SSL_TXT_ADH
 "ADH"

	)

278 
	#SSL_TXT_RSA
 "RSA"

	)

279 
	#SSL_TXT_DES
 "DES"

	)

280 
	#SSL_TXT_3DES
 "3DES"

	)

281 
	#SSL_TXT_RC4
 "RC4"

	)

282 
	#SSL_TXT_RC2
 "RC2"

	)

283 
	#SSL_TXT_IDEA
 "IDEA"

	)

284 
	#SSL_TXT_SEED
 "SEED"

	)

285 
	#SSL_TXT_AES
 "AES"

	)

286 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

287 
	#SSL_TXT_MD5
 "MD5"

	)

288 
	#SSL_TXT_SHA1
 "SHA1"

	)

289 
	#SSL_TXT_SHA
 "SHA"

	)

290 
	#SSL_TXT_EXP
 "EXP"

	)

291 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

292 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

293 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

294 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

295 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

296 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

297 
	#SSL_TXT_ALL
 "ALL"

	)

298 
	#SSL_TXT_ECC
 "ECCdњб"

	)

314 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

315 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

320 
	#SSL_DEFAULT_CIPHER_LIST
 "AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH"

	)

323 
	#SSL_SENT_SHUTDOWN
 1

	)

324 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

326 #ifdeа
__эlu•lus


330 #ifdeа 
__эlu•lus


334 #iа(
defЪed
(
OPENSSL_NO_RSA
и|| defЪed(
OPENSSL_NO_MD5
)и&& !defЪed(
OPENSSL_NO_SSL2
)

335 
	#OPENSSL_NO_SSL2


	)

338 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

339 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

344 
s¶_°
 *
	ts¶_ьock_°
;

347 
	ss¶_cЭhФ_°


349 
vЃid
;

350 cЏ° *
«me
;

351 
id
;

352 
Ѓg№Щhms
;

353 
Ѓgo_°їngth
;

354 
Ѓg№Щhm2
;

355 
°їngth_bЩs
;

356 
Ѓg_bЩs
;

357 
mask
;

358 
mask_°їngth
;

359 } 
	tSSL_CIPHER
;

361 
DECLARE_STACK_OF
(
SSL_CIPHER
)

363 
s¶_°
 
	tSSL
;

364 
s¶_щx_°
 
	tSSL_CTX
;

367 
	ss¶_mСhod_°


369 
vФsiЏ
;

370 (*
s¶_√w
)(
SSL
 *
s
);

371 (*
s¶_юЧr
)(
SSL
 *
s
);

372 (*
s¶_дУ
)(
SSL
 *
s
);

373 (*
s¶_acы±
)(
SSL
 *
s
);

374 (*
s¶_cЏ√щ
)(
SSL
 *
s
);

375 (*
s¶_їad
)(
SSL
 *
s
,*
buf
,
Ћn
);

376 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Ћn
);

377 (*
s¶_wrЩe
)(
SSL
 *
s
,cЏ° *
buf
,
Ћn
);

378 (*
s¶_shutdown
)(
SSL
 *
s
);

379 (*
s¶_ї√gўЯЛ
)(
SSL
 *
s
);

380 (*
s¶_ї√gўЯЛ_check
)(
SSL
 *
s
);

381 (*
s¶_gС_mesІge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

382 
max
, *
ok
);

383 (*
s¶_їad_byЛs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Ћn
,

384 
≥ek
);

385 (*
s¶_wrЩe_byЛs
)(
SSL
 *
s
, 
ty≥
, cЏ° *
buf_
, 
Ћn
);

386 (*
s¶_di•©ch_ЃФt
)(
SSL
 *
s
);

387 (*
s¶_щЊ
)(
SSL
 *
s
,
cmd
,
ѕrg
,*
Јrg
);

388 (*
s¶_щx_щЊ
)(
SSL_CTX
 *
щx
,
cmd
,
ѕrg
,*
Јrg
);

389 
SSL_CIPHER
 *(*
gС_cЭhФ_by_chђ
)(cЏ° *
±r
);

390 (*
put_cЭhФ_by_chђ
)(cЏ° 
SSL_CIPHER
 *
cЭhФ
,*
±r
);

391 (*
s¶_≥ndЪg
)(cЏ° 
SSL
 *
s
);

392 (*
num_cЭhФs
)();

393 
SSL_CIPHER
 *(*
gС_cЭhФ
)(
ncЭhФ
);

394 
s¶_mСhod_°
 *(*
gС_s¶_mСhod
)(
vФsiЏ
);

395 (*
gС_timeout
)();

396 
s¶3_Тc_mСhod
 *
s¶3_Тc
;

397 (*
s¶_vФsiЏ
)();

398 (*
s¶_€ќback_щЊ
)(
SSL
 *
s
, 
cb_id
, (*
е
)());

399 (*
s¶_щx_€ќback_щЊ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
е
)());

400 } 
	tSSL_METHOD
;

421 
	ss¶_£ssiЏ_°


423 
s¶_vФsiЏ
;

427 
key_ђg_Ћngth
;

428 
key_ђg
[
SSL_MAX_KEY_ARG_LENGTH
];

429 
ma°Ф_key_Ћngth
;

430 
ma°Ф_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

432 
£ssiЏ_id_Ћngth
;

433 
£ssiЏ_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

437 
sid_щx_Ћngth
;

438 
sid_щx
[
SSL_MAX_SID_CTX_LENGTH
];

440 #iвdeа
OPENSSL_NO_KRB5


441 
krb5_юЫЅ_іЪc_Ћn
;

442 
krb5_юЫЅ_іЪc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

445 
nў_їsumabЋ
;

448 
£ss_ыє_°
 *
£ss_ыє
;

454 
X509
 *
≥Ф
;

457 
vФify_їsu…
;

459 
їгїnыs
;

460 
timeout
;

461 
time
;

463 
comіess_mСh
;

465 
SSL_CIPHER
 *
cЭhФ
;

466 
cЭhФ_id
;

470 
STACK_OF
(
SSL_CIPHER
и*
cЭhФs
;

472 
CRYPTO_EX_DATA
 
ex_d©a
;

476 
s¶_£ssiЏ_°
 *
іev
,*
√xt
;

477 #iвdeа
OPENSSL_NO_TLSEXT


478 *
О£xt_ho°«me
;

480 *
О£xt_tick
;

481 
size_t
 
О£xt_tickЋn
;

482 
О£xt_tick_liгtime_hЪt
;

484 } 
	tSSL_SESSION
;

487 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

488 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

489 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

490 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

491 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

492 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

493 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

494 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

495 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

502 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

506 
	#SSL_OP_ALL
 0x00000FFFL

	)

509 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

511 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

513 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

516 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

518 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

520 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

523 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

526 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

531 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

533 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

534 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

535 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

539 
	#SSL_OP_PKCS1_CHECK_1
 0x08000000L

	)

540 
	#SSL_OP_PKCS1_CHECK_2
 0x10000000L

	)

541 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

542 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

547 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

552 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

555 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

557 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

563 
	#SSL_CTX_£t_ЁtiЏs
(
щx
,
Ё
) \

564 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_OPTIONS
,(
Ё
),
NULL
)

	)

565 
	#SSL_CTX_gС_ЁtiЏs
(
щx
) \

566 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

567 
	#SSL_£t_ЁtiЏs
(
s¶
,
Ё
) \

568 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_OPTIONS
,(
Ё
),
NULL
)

	)

569 
	#SSL_gС_ЁtiЏs
(
s¶
) \

570 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

572 
	#SSL_CTX_£t_mode
(
щx
,
Ё
) \

573 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_MODE
,(
Ё
),
NULL
)

	)

574 
	#SSL_CTX_gС_mode
(
щx
) \

575 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_MODE
,0,
NULL
)

	)

576 
	#SSL_£t_mode
(
s¶
,
Ё
) \

577 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_MODE
,(
Ё
),
NULL
)

	)

578 
	#SSL_gС_mode
(
s¶
) \

579 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

580 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

581 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

584 
SSL_CTX_£t_msg_€ќback
(
SSL_CTX
 *
щx
, (*
cb
)(
wrЩe_p
, 
vФsiЏ
, 
cЏЛЅ_ty≥
, cЏ° *
buf
, 
size_t
 
Ћn
, 
SSL
 *
s¶
, *
ђg
));

585 
SSL_£t_msg_€ќback
(
SSL
 *
s¶
, (*
cb
)(
wrЩe_p
, 
vФsiЏ
, 
cЏЛЅ_ty≥
, cЏ° *
buf
, 
size_t
 
Ћn
, SSL *s¶, *
ђg
));

586 
	#SSL_CTX_£t_msg_€ќback_ђg
(
щx
, 
ђg
и
	`SSL_CTX_щЊ
((щx), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (ђg))

	)

587 
	#SSL_£t_msg_€ќback_ђg
(
s¶
, 
ђg
и
	`SSL_щЊ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (ђg))

	)

591 #iа
defЪed
(
OPENSSL_SYS_MSDOS
и&& !defЪed(
OPENSSL_SYS_WIN32
)

592 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

594 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

597 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

612 (*
GEN_SESSION_CB
)(cЏ° 
	tSSL
 *
	ts¶
, *
	tid
,

613 *
	tid_Ћn
);

615 
	ss¶_comp_°


617 
id
;

618 cЏ° *
«me
;

619 #iвdeа
OPENSSL_NO_COMP


620 
COMP_METHOD
 *
mСhod
;

622 *
mСhod
;

624 } 
	tSSL_COMP
;

626 
DECLARE_STACK_OF
(
SSL_COMP
)

628 
	ss¶_щx_°


630 
SSL_METHOD
 *
mСhod
;

632 
STACK_OF
(
SSL_CIPHER
и*
cЭhФ_li°
;

634 
STACK_OF
(
SSL_CIPHER
и*
cЭhФ_li°_by_id
;

636 
x509_°№e_°
 *
ыє_°№e
;

637 
lhash_°
 *
£ssiЏs
;

640 
£ssiЏ_€che_size
;

641 
s¶_£ssiЏ_°
 *
£ssiЏ_€che_hЧd
;

642 
s¶_£ssiЏ_°
 *
£ssiЏ_€che_ПЮ
;

649 
£ssiЏ_€che_mode
;

654 
£ssiЏ_timeout
;

664 (*
√w_£ssiЏ_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

665 (*
їmove_£ssiЏ_cb
)(
s¶_щx_°
 *
щx
,
SSL_SESSION
 *
£ss
);

666 
SSL_SESSION
 *(*
gС_£ssiЏ_cb
)(
s¶_°
 *
s¶
,

667 *
d©a
,
Ћn
,*
cЁy
);

671 
£ss_cЏ√щ
;

672 
£ss_cЏ√щ_ї√gўЯЛ
;

673 
£ss_cЏ√щ_good
;

674 
£ss_acы±
;

675 
£ss_acы±_ї√gўЯЛ
;

676 
£ss_acы±_good
;

677 
£ss_miss
;

678 
£ss_timeout
;

679 
£ss_€che_fuќ
;

680 
£ss_hЩ
;

681 
£ss_cb_hЩ
;

687 } 
°©s
;

689 
їгїnыs
;

692 (*
≠p_vФify_€ќback
)(
X509_STORE_CTX
 *, *);

693 *
≠p_vФify_ђg
;

698 
≥m_Јssw№d_cb
 *
deзu…_Јsswd_€ќback
;

701 *
deзu…_Јsswd_€ќback_u£rd©a
;

704 (*
юЫЅ_ыє_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

707 (*
≠p_gТ_cookЫ_cb
)(
SSL
 *
s¶
, *
cookЫ
,

708 *
cookЫ_Ћn
);

711 (*
≠p_vФify_cookЫ_cb
)(
SSL
 *
s¶
, *
cookЫ
,

712 
cookЫ_Ћn
);

714 
CRYPTO_EX_DATA
 
ex_d©a
;

716 cЏ° 
EVP_MD
 *
rІ_md5
;

717 cЏ° 
EVP_MD
 *
md5
;

718 cЏ° 
EVP_MD
 *
sha1
;

720 
STACK_OF
(
X509
и*
exМa_ыєs
;

721 
STACK_OF
(
SSL_COMP
и*
comp_mСhods
;

726 (*
Ъfo_€ќback
)(cЏ° 
SSL
 *
s¶
,
ty≥
,
vЃ
);

729 
STACK_OF
(
X509_NAME
и*
юЫЅ_CA
;

734 
ЁtiЏs
;

735 
mode
;

736 
max_ыє_li°
;

738 
ыє_°
 *
ыє
;

739 
їad_ahЧd
;

742 (*
msg_€ќback
)(
wrЩe_p
, 
vФsiЏ
, 
cЏЛЅ_ty≥
, cЏ° *
buf
, 
size_t
 
Ћn
, 
SSL
 *
s¶
, *
ђg
);

743 *
msg_€ќback_ђg
;

745 
vФify_mode
;

746 
sid_щx_Ћngth
;

747 
sid_щx
[
SSL_MAX_SID_CTX_LENGTH
];

748 (*
deзu…_vФify_€ќback
)(
ok
,
X509_STORE_CTX
 *
щx
);

751 
GEN_SESSION_CB
 
gТФ©e_£ssiЏ_id
;

753 
X509_VERIFY_PARAM
 *
Јњm
;

756 
puљo£
;

757 
Мu°
;

760 
quЫt_shutdown
;

762 #iвdeа
OPENSSL_NO_TLSEXT


764 (*
О£xt_£rvФ«me_€ќback
)(
SSL
*, *, *);

765 *
О£xt_£rvФ«me_ђg
;

767 
О£xt_tick_key_«me
[16];

768 
О£xt_tick_hmac_key
[16];

769 
О£xt_tick_Ђs_key
[16];

774 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

775 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

776 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

777 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

778 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

780 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

781 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

782 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

783 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

785 
lhash_°
 *
SSL_CTX_£ssiЏs
(
SSL_CTX
 *
щx
);

786 
	#SSL_CTX_£ss_numbФ
(
щx
) \

787 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

788 
	#SSL_CTX_£ss_cЏ√щ
(
щx
) \

789 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

790 
	#SSL_CTX_£ss_cЏ√щ_good
(
щx
) \

791 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

792 
	#SSL_CTX_£ss_cЏ√щ_ї√gўЯЛ
(
щx
) \

793 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

794 
	#SSL_CTX_£ss_acы±
(
щx
) \

795 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

796 
	#SSL_CTX_£ss_acы±_ї√gўЯЛ
(
щx
) \

797 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

798 
	#SSL_CTX_£ss_acы±_good
(
щx
) \

799 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

800 
	#SSL_CTX_£ss_hЩs
(
щx
) \

801 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

802 
	#SSL_CTX_£ss_cb_hЩs
(
щx
) \

803 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

804 
	#SSL_CTX_£ss_mis£s
(
щx
) \

805 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

806 
	#SSL_CTX_£ss_timeouts
(
щx
) \

807 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

808 
	#SSL_CTX_£ss_€che_fuќ
(
щx
) \

809 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

811 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
щx
, (*
√w_£ssiЏ_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

812 (*
SSL_CTX_£ss_gС_√w_cb
(
SSL_CTX
 *
щx
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

813 
SSL_CTX_£ss_£t_їmove_cb
(
SSL_CTX
 *
щx
, (*
їmove_£ssiЏ_cb
)(
s¶_щx_°
 *щx,
SSL_SESSION
 *
£ss
));

814 (*
SSL_CTX_£ss_gС_їmove_cb
(
SSL_CTX
 *
щx
))(
s¶_щx_°
 *щx, 
SSL_SESSION
 *
£ss
);

815 
SSL_CTX_£ss_£t_gС_cb
(
SSL_CTX
 *
щx
, 
SSL_SESSION
 *(*
gС_£ssiЏ_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Ћn
,*
cЁy
));

816 
SSL_SESSION
 *(*
SSL_CTX_£ss_gС_gС_cb
(
SSL_CTX
 *
щx
))(
s¶_°
 *
s¶
, *
D©a
, 
Ћn
, *
cЁy
);

817 
SSL_CTX_£t_Ъfo_€ќback
(
SSL_CTX
 *
щx
, (*
cb
)(cЏ° 
SSL
 *
s¶
,
ty≥
,
vЃ
));

818 (*
SSL_CTX_gС_Ъfo_€ќback
(
SSL_CTX
 *
щx
))(cЏ° 
SSL
 *
s¶
,
ty≥
,
vЃ
);

819 
SSL_CTX_£t_юЫЅ_ыє_cb
(
SSL_CTX
 *
щx
, (*
юЫЅ_ыє_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

820 (*
SSL_CTX_gС_юЫЅ_ыє_cb
(
SSL_CTX
 *
щx
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

821 
SSL_CTX_£t_cookЫ_gТФ©e_cb
(
SSL_CTX
 *
щx
, (*
≠p_gТ_cookЫ_cb
)(
SSL
 *
s¶
, *
cookЫ
, *
cookЫ_Ћn
));

822 
SSL_CTX_£t_cookЫ_vФify_cb
(
SSL_CTX
 *
щx
, (*
≠p_vФify_cookЫ_cb
)(
SSL
 *
s¶
, *
cookЫ
, 
cookЫ_Ћn
));

824 
	#SSL_NOTHING
 1

	)

825 
	#SSL_WRITING
 2

	)

826 
	#SSL_READING
 3

	)

827 
	#SSL_X509_LOOKUP
 4

	)

830 
	#SSL_w™t_nўhЪg
(
s
и(
	`SSL_w™t
(sи=р
SSL_NOTHING
)

	)

831 
	#SSL_w™t_їad
(
s
и(
	`SSL_w™t
(sи=р
SSL_READING
)

	)

832 
	#SSL_w™t_wrЩe
(
s
и(
	`SSL_w™t
(sи=р
SSL_WRITING
)

	)

833 
	#SSL_w™t_x509_lookup
(
s
и(
	`SSL_w™t
(sи=р
SSL_X509_LOOKUP
)

	)

835 
	ss¶_°


840 
vФsiЏ
;

841 
ty≥
;

843 
SSL_METHOD
 *
mСhod
;

849 #iвdeа
OPENSSL_NO_BIO


850 
BIO
 *
rbio
;

851 
BIO
 *
wbio
;

852 
BIO
 *
bbio
;

855 *
rbio
;

856 *
wbio
;

857 *
bbio
;

863 
rw°©e
;

866 
Ъ_h™dshake
;

867 (*
h™dshake_func
)(
SSL
 *);

877 
£rvФ
;

879 
√w_£ssiЏ
;

885 
quЫt_shutdown
;

886 
shutdown
;

888 
°©e
;

889 
r°©e
;

891 
BUF_MEM
 *
ЪЩ_buf
;

892 *
ЪЩ_msg
;

893 
ЪЩ_num
;

894 
ЪЩ_off
;

897 *
ЈckС
;

898 
ЈckС_Ћngth
;

900 
s¶2_°©e_°
 *
s2
;

901 
s¶3_°©e_°
 *
s3
;

902 
dОs1_°©e_°
 *
d1
;

904 
їad_ahЧd
;

908 (*
msg_€ќback
)(
wrЩe_p
, 
vФsiЏ
, 
cЏЛЅ_ty≥
, cЏ° *
buf
, 
size_t
 
Ћn
, 
SSL
 *
s¶
, *
ђg
);

909 *
msg_€ќback_ђg
;

911 
hЩ
;

913 
X509_VERIFY_PARAM
 *
Јњm
;

916 
puљo£
;

917 
Мu°
;

921 
STACK_OF
(
SSL_CIPHER
и*
cЭhФ_li°
;

922 
STACK_OF
(
SSL_CIPHER
и*
cЭhФ_li°_by_id
;

927 
EVP_CIPHER_CTX
 *
Тc_їad_щx
;

928 cЏ° 
EVP_MD
 *
їad_hash
;

929 #iвdeа
OPENSSL_NO_COMP


930 
COMP_CTX
 *
exЈnd
;

932 *
exЈnd
;

935 
EVP_CIPHER_CTX
 *
Тc_wrЩe_щx
;

936 cЏ° 
EVP_MD
 *
wrЩe_hash
;

937 #iвdeа
OPENSSL_NO_COMP


938 
COMP_CTX
 *
comіess
;

940 *
comіess
;

947 
ыє_°
 *
ыє
;

951 
sid_щx_Ћngth
;

952 
sid_щx
[
SSL_MAX_SID_CTX_LENGTH
];

955 
SSL_SESSION
 *
£ssiЏ
;

958 
GEN_SESSION_CB
 
gТФ©e_£ssiЏ_id
;

961 
vФify_mode
;

963 (*
vФify_€ќback
)(
ok
,
X509_STORE_CTX
 *
щx
);

965 (*
Ъfo_€ќback
)(cЏ° 
SSL
 *
s¶
,
ty≥
,
vЃ
);

967 
Фr№
;

968 
Фr№_code
;

970 #iвdeа
OPENSSL_NO_KRB5


971 
KSSL_CTX
 *
ks¶_щx
;

974 
SSL_CTX
 *
щx
;

977 
debug
;

980 
vФify_їsu…
;

981 
CRYPTO_EX_DATA
 
ex_d©a
;

984 
STACK_OF
(
X509_NAME
и*
юЫЅ_CA
;

986 
їгїnыs
;

987 
ЁtiЏs
;

988 
mode
;

989 
max_ыє_li°
;

990 
fЬ°_ЈckС
;

991 
юЫЅ_vФsiЏ
;

993 #iвdeа
OPENSSL_NO_TLSEXT


995 (*
О£xt_debug_cb
)(
SSL
 *
s
, 
юЫЅ_£rvФ
, 
ty≥
,

996 *
d©a
, 
Ћn
,

997 *
ђg
);

998 *
О£xt_debug_ђg
;

999 *
О£xt_ho°«me
;

1000 
£rvФ«me_dЏe
;

1006 
О£xt_tickС_ex≥щed
;

1007 
SSL_CTX
 * 
ЪЩЯl_щx
;

1008 
	#£ssiЏ_щx
 
ЪЩЯl_щx


	)

1010 
	#£ssiЏ_щx
 
щx


	)

1014 #ifdeа
__эlu•lus


1018 
	~<ЁТs¶/s¶2.h
>

1019 
	~<ЁТs¶/s¶3.h
>

1020 
	~<ЁТs¶/Оs1.h
>

1021 
	~<ЁТs¶/dОs1.h
>

1022 
	~<ЁТs¶/s¶23.h
>

1024 #ifdeа 
__эlu•lus


1029 
	#SSL_£t_≠p_d©a
(
s
,
ђg
и(
	`SSL_£t_ex_d©a
(s,0,(*пrg))

	)

1030 
	#SSL_gС_≠p_d©a
(
s
и(
	`SSL_gС_ex_d©a
(s,0))

	)

1031 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
и(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*п))

	)

1032 
	#SSL_SESSION_gС_≠p_d©a
(
s
и(
	`SSL_SESSION_gС_ex_d©a
(s,0))

	)

1033 
	#SSL_CTX_gС_≠p_d©a
(
щx
и(
	`SSL_CTX_gС_ex_d©a
(щx,0))

	)

1034 
	#SSL_CTX_£t_≠p_d©a
(
щx
,
ђg
и(
	`SSL_CTX_£t_ex_d©a
(щx,0,(*пrg))

	)

1043 
	#SSL_ST_CONNECT
 0x1000

	)

1044 
	#SSL_ST_ACCEPT
 0x2000

	)

1045 
	#SSL_ST_MASK
 0x0FFF

	)

1046 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1047 
	#SSL_ST_BEFORE
 0x4000

	)

1048 
	#SSL_ST_OK
 0x03

	)

1049 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1051 
	#SSL_CB_LOOP
 0x01

	)

1052 
	#SSL_CB_EXIT
 0x02

	)

1053 
	#SSL_CB_READ
 0x04

	)

1054 
	#SSL_CB_WRITE
 0x08

	)

1055 
	#SSL_CB_ALERT
 0x4000

	)

1056 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1057 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1058 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1059 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1060 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1061 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1062 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1063 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1066 
	#SSL_gС_°©e
(
a
и
	`SSL_°©e
„)

	)

1067 
	#SSL_is_ЪЩ_fЪished
(
a
и(
	`SSL_°©e
„и=р
SSL_ST_OK
)

	)

1068 
	#SSL_Ъ_ЪЩ
(
a
и(
	`SSL_°©e
„)&
SSL_ST_INIT
)

	)

1069 
	#SSL_Ъ_bef№e
(
a
и(
	`SSL_°©e
„)&
SSL_ST_BEFORE
)

	)

1070 
	#SSL_Ъ_cЏ√щ_ЪЩ
(
a
и(
	`SSL_°©e
„)&
SSL_ST_CONNECT
)

	)

1071 
	#SSL_Ъ_acы±_ЪЩ
(
a
и(
	`SSL_°©e
„)&
SSL_ST_ACCEPT
)

	)

1075 
	#SSL_ST_READ_HEADER
 0xF0

	)

1076 
	#SSL_ST_READ_BODY
 0xF1

	)

1077 
	#SSL_ST_READ_DONE
 0xF2

	)

1083 
size_t
 
SSL_gС_fЪished
(cЏ° 
SSL
 *
s
, *
buf
, size_И
couЅ
);

1084 
size_t
 
SSL_gС_≥Ф_fЪished
(cЏ° 
SSL
 *
s
, *
buf
, size_И
couЅ
);

1088 
	#SSL_VERIFY_NONE
 0x00

	)

1089 
	#SSL_VERIFY_PEER
 0x01

	)

1090 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1091 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1093 
	#O≥nSSL_add_s¶_Ѓg№Щhms
(и
	`SSL_libњry_ЪЩ
()

	)

1094 
	#SSLЧy_add_s¶_Ѓg№Щhms
(и
	`SSL_libњry_ЪЩ
()

	)

1098 
	#SSL_CTX_£t_deзu…_vФify
(
a
,
b
,
c
и
	`SSL_CTX_£t_vФify
„,b,c)

	)

1099 
	#SSL_£t_іef_cЭhФ
(
c
,
n
и
	`SSL_£t_cЭhФ_li°
(c,n)

	)

1100 
	#SSL_add_£ssiЏ
(
a
,
b
и
	`SSL_CTX_add_£ssiЏ
(„),(b))

	)

1101 
	#SSL_їmove_£ssiЏ
(
a
,
b
и
	`SSL_CTX_їmove_£ssiЏ
(„),(b))

	)

1102 
	#SSL_жush_£ssiЏs
(
a
,
b
и
	`SSL_CTX_жush_£ssiЏs
(„),(b))

	)

1105 
	#SSL_gС_cЭhФ
(
s
) \

1106 
	`SSL_CIPHER_gС_«me
(
	`SSL_gС_cuЉТt_cЭhФ
(
s
))

	)

1107 
	#SSL_gС_cЭhФ_bЩs
(
s
,
≈
) \

1108 
	`SSL_CIPHER_gС_bЩs
(
	`SSL_gС_cuЉТt_cЭhФ
(
s
),
≈
)

	)

1109 
	#SSL_gС_cЭhФ_vФsiЏ
(
s
) \

1110 
	`SSL_CIPHER_gС_vФsiЏ
(
	`SSL_gС_cuЉТt_cЭhФ
(
s
))

	)

1111 
	#SSL_gС_cЭhФ_«me
(
s
) \

1112 
	`SSL_CIPHER_gС_«me
(
	`SSL_gС_cuЉТt_cЭhФ
(
s
))

	)

1113 
	#SSL_gС_time
(
a
и
	`SSL_SESSION_gС_time
„)

	)

1114 
	#SSL_£t_time
(
a
,
b
и
	`SSL_SESSION_£t_time
(„),(b))

	)

1115 
	#SSL_gС_timeout
(
a
и
	`SSL_SESSION_gС_timeout
„)

	)

1116 
	#SSL_£t_timeout
(
a
,
b
и
	`SSL_SESSION_£t_timeout
(„),(b))

	)

1119 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
и
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1120 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
и
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1121 
	#PEM_їad_SSL_SESSION
(
е
,
x
,
cb
,
u
и(
SSL_SESSION
 *)
	`PEM_ASN1_їad
( \

1122 (*(*)())
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
е
,(**)
x
,
cb
,
u
)

	)

1123 
	#PEM_їad_bio_SSL_SESSION
(
bp
,
x
,
cb
,
u
и
	`PEM_ASN1_їad_bio_of
(
SSL_SESSION
,
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,bp,x,cb,u)

	)

1124 
	#PEM_wrЩe_SSL_SESSION
(
е
,
x
) \

1125 
	`PEM_ASN1_wrЩe
(((*)())
i2d_SSL_SESSION
, \

1126 
PEM_STRING_SSL_SESSION
,
е
, (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

1127 
	#PEM_wrЩe_bio_SSL_SESSION
(
bp
,
x
) \

1128 
	`PEM_ASN1_wrЩe_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL)

	)

1131 
	#SSL_AD_REASON_OFFSET
 1000

	)

1133 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1134 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1135 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1136 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1137 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1138 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1139 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1140 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1141 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1142 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1143 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1144 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1145 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1146 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1147 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1148 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1149 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1150 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1151 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1152 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1153 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1154 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1155 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1156 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1157 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1158 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1159 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1161 
	#SSL_ERROR_NONE
 0

	)

1162 
	#SSL_ERROR_SSL
 1

	)

1163 
	#SSL_ERROR_WANT_READ
 2

	)

1164 
	#SSL_ERROR_WANT_WRITE
 3

	)

1165 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1166 
	#SSL_ERROR_SYSCALL
 5

	)

1167 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1168 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1169 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1171 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1172 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1173 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1174 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1175 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1176 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1177 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1179 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1180 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1181 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1182 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1183 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1184 
	#SSL_CTRL_GET_FLAGS
 13

	)

1185 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1187 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1188 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1191 
	#SSL_CTRL_SET_MTU
 17

	)

1193 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1194 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1195 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1196 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1197 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1198 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1199 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1200 
	#SSL_CTRL_SESS_HIT
 27

	)

1201 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1202 
	#SSL_CTRL_SESS_MISSES
 29

	)

1203 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1204 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1205 
	#SSL_CTRL_OPTIONS
 32

	)

1206 
	#SSL_CTRL_MODE
 33

	)

1208 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1209 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1210 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1211 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1212 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1213 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1215 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1216 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1219 #iвdeа
OPENSSL_NO_TLSEXT


1220 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1221 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1222 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1223 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1224 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1225 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1226 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1229 
	#SSL_£ssiЏ_їu£d
(
s¶
) \

1230 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1231 
	#SSL_num_ї√gўЯtiЏs
(
s¶
) \

1232 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1233 
	#SSL_юЧr_num_ї√gўЯtiЏs
(
s¶
) \

1234 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1235 
	#SSL_tўЃ_ї√gўЯtiЏs
(
s¶
) \

1236 
	`SSL_щЊ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1238 
	#SSL_CTX_√ed_tmp_RSA
(
щx
) \

1239 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1240 
	#SSL_CTX_£t_tmp_rІ
(
щx
,
rІ
) \

1241 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rІ
)

	)

1242 
	#SSL_CTX_£t_tmp_dh
(
щx
,
dh
) \

1243 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1244 
	#SSL_CTX_£t_tmp_ecdh
(
щx
,
ecdh
) \

1245 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1247 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1248 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1249 
	#SSL_£t_tmp_rІ
(
s¶
,
rІ
) \

1250 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rІ
)

	)

1251 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1252 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1253 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1254 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1256 
	#SSL_CTX_add_exМa_chaЪ_ыє
(
щx
,
x509
) \

1257 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1259 #iвdeа
OPENSSL_NO_BIO


1260 
BIO_METHOD
 *
BIO_f_s¶
();

1261 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
щx
,
юЫЅ
);

1262 
BIO
 *
BIO_√w_s¶_cЏ√щ
(
SSL_CTX
 *
щx
);

1263 
BIO
 *
BIO_√w_bufгr_s¶_cЏ√щ
(
SSL_CTX
 *
щx
);

1264 
BIO_s¶_cЁy_£ssiЏ_id
(
BIO
 *
to
,BIO *
дom
);

1265 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1269 
SSL_CTX_£t_cЭhФ_li°
(
SSL_CTX
 *,cЏ° *
°r
);

1270 
SSL_CTX
 *
SSL_CTX_√w
(
SSL_METHOD
 *
mСh
);

1271 
SSL_CTX_дУ
(
SSL_CTX
 *);

1272 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
щx
,
t
);

1273 
SSL_CTX_gС_timeout
(cЏ° 
SSL_CTX
 *
щx
);

1274 
X509_STORE
 *
SSL_CTX_gС_ыє_°№e
(cЏ° 
SSL_CTX
 *);

1275 
SSL_CTX_£t_ыє_°№e
(
SSL_CTX
 *,
X509_STORE
 *);

1276 
SSL_w™t
(cЏ° 
SSL
 *
s
);

1277 
SSL_юЧr
(
SSL
 *
s
);

1279 
SSL_CTX_жush_£ssiЏs
(
SSL_CTX
 *
щx
,
tm
);

1281 
SSL_CIPHER
 *
SSL_gС_cuЉТt_cЭhФ
(cЏ° 
SSL
 *
s
);

1282 
SSL_CIPHER_gС_bЩs
(cЏ° 
SSL_CIPHER
 *
c
,*
Ѓg_bЩs
);

1283 * 
SSL_CIPHER_gС_vФsiЏ
(cЏ° 
SSL_CIPHER
 *
c
);

1284 cЏ° * 
SSL_CIPHER_gС_«me
(cЏ° 
SSL_CIPHER
 *
c
);

1286 
SSL_gС_fd
(cЏ° 
SSL
 *
s
);

1287 
SSL_gС_rfd
(cЏ° 
SSL
 *
s
);

1288 
SSL_gС_wfd
(cЏ° 
SSL
 *
s
);

1289 cЏ° * 
SSL_gС_cЭhФ_li°
(cЏ° 
SSL
 *
s
,
n
);

1290 * 
SSL_gС_shђed_cЭhФs
(cЏ° 
SSL
 *
s
, *
buf
, 
Ћn
);

1291 
SSL_gС_їad_ahЧd
(cЏ° 
SSL
 * 
s
);

1292 
SSL_≥ndЪg
(cЏ° 
SSL
 *
s
);

1293 #iвdeа
OPENSSL_NO_SOCK


1294 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1295 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1296 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1298 #iвdeа
OPENSSL_NO_BIO


1299 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1300 
BIO
 * 
SSL_gС_rbio
(cЏ° 
SSL
 *
s
);

1301 
BIO
 * 
SSL_gС_wbio
(cЏ° 
SSL
 *
s
);

1303 
SSL_£t_cЭhФ_li°
(
SSL
 *
s
, cЏ° *
°r
);

1304 
SSL_£t_їad_ahЧd
(
SSL
 *
s
, 
yes
);

1305 
SSL_gС_vФify_mode
(cЏ° 
SSL
 *
s
);

1306 
SSL_gС_vФify_dХth
(cЏ° 
SSL
 *
s
);

1307 (*
SSL_gС_vФify_€ќback
(cЏ° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1308 
SSL_£t_vФify
(
SSL
 *
s
, 
mode
,

1309 (*
€ќback
)(
ok
,
X509_STORE_CTX
 *
щx
));

1310 
SSL_£t_vФify_dХth
(
SSL
 *
s
, 
dХth
);

1311 #iвdeа
OPENSSL_NO_RSA


1312 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rІ
);

1314 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Ћn
);

1315 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1316 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, cЏ° *
d
, 
Ћn
);

1317 
SSL_u£_ыєifi€Л
(
SSL
 *
s¶
, 
X509
 *
x
);

1318 
SSL_u£_ыєifi€Л_ASN1
(
SSL
 *
s¶
, cЏ° *
d
, 
Ћn
);

1320 #iвdeа
OPENSSL_NO_STDIO


1321 
SSL_u£_RSAPriv©eKey_fЮe
(
SSL
 *
s¶
, cЏ° *
fЮe
, 
ty≥
);

1322 
SSL_u£_Priv©eKey_fЮe
(
SSL
 *
s¶
, cЏ° *
fЮe
, 
ty≥
);

1323 
SSL_u£_ыєifi€Л_fЮe
(
SSL
 *
s¶
, cЏ° *
fЮe
, 
ty≥
);

1324 
SSL_CTX_u£_RSAPriv©eKey_fЮe
(
SSL_CTX
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

1325 
SSL_CTX_u£_Priv©eKey_fЮe
(
SSL_CTX
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

1326 
SSL_CTX_u£_ыєifi€Л_fЮe
(
SSL_CTX
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

1327 
SSL_CTX_u£_ыєifi€Л_chaЪ_fЮe
(
SSL_CTX
 *
щx
, cЏ° *
fЮe
);

1328 
STACK_OF
(
X509_NAME
и*
SSL_lяd_юЫЅ_CA_fЮe
(cЏ° *
fЮe
);

1329 
SSL_add_fЮe_ыє_subjeщs_to_°ack
(
STACK_OF
(
X509_NAME
и*
°ackCAs
,

1330 cЏ° *
fЮe
);

1331 #iвdeа
OPENSSL_SYS_VMS


1332 #iвdeа
OPENSSL_SYS_MACINTOSH_CLASSIC


1333 
SSL_add_dЬ_ыє_subjeщs_to_°ack
(
STACK_OF
(
X509_NAME
и*
°ackCAs
,

1334 cЏ° *
dЬ
);

1340 
SSL_lяd_Фr№_°rЪgs
();

1341 cЏ° *
SSL_°©e_°rЪg
(cЏ° 
SSL
 *
s
);

1342 cЏ° *
SSL_r°©e_°rЪg
(cЏ° 
SSL
 *
s
);

1343 cЏ° *
SSL_°©e_°rЪg_lЏg
(cЏ° 
SSL
 *
s
);

1344 cЏ° *
SSL_r°©e_°rЪg_lЏg
(cЏ° 
SSL
 *
s
);

1345 
SSL_SESSION_gС_time
(cЏ° 
SSL_SESSION
 *
s
);

1346 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1347 
SSL_SESSION_gС_timeout
(cЏ° 
SSL_SESSION
 *
s
);

1348 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1349 
SSL_cЁy_£ssiЏ_id
(
SSL
 *
to
,cЏ° SSL *
дom
);

1351 
SSL_SESSION
 *
SSL_SESSION_√w
();

1352 
SSL_SESSION_hash
(cЏ° 
SSL_SESSION
 *
a
);

1353 
SSL_SESSION_cmp
(cЏ° 
SSL_SESSION
 *
a
,cЏ° SSL_SESSION *
b
);

1354 cЏ° *
SSL_SESSION_gС_id
(cЏ° 
SSL_SESSION
 *
s
, *
Ћn
);

1355 #iвdeа
OPENSSL_NO_FP_API


1356 
SSL_SESSION_іЪt_е
(
FILE
 *
е
,cЏ° 
SSL_SESSION
 *
£s
);

1358 #iвdeа
OPENSSL_NO_BIO


1359 
SSL_SESSION_іЪt
(
BIO
 *
е
,cЏ° 
SSL_SESSION
 *
£s
);

1361 
SSL_SESSION_дУ
(
SSL_SESSION
 *
£s
);

1362 
i2d_SSL_SESSION
(
SSL_SESSION
 *
Ъ
,**
µ
);

1363 
SSL_£t_£ssiЏ
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssiЏ
);

1364 
SSL_CTX_add_£ssiЏ
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1365 
SSL_CTX_їmove_£ssiЏ
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1366 
SSL_CTX_£t_gТФ©e_£ssiЏ_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1367 
SSL_£t_gТФ©e_£ssiЏ_id
(
SSL
 *, 
GEN_SESSION_CB
);

1368 
SSL_has_m©chЪg_£ssiЏ_id
(cЏ° 
SSL
 *
s¶
, cЏ° *
id
,

1369 
id_Ћn
);

1370 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,cЏ° **
µ
,

1371 
Ћngth
);

1373 #ifdeа
HEADER_X509_H


1374 
X509
 * 
SSL_gС_≥Ф_ыєifi€Л
(cЏ° 
SSL
 *
s
);

1377 
STACK_OF
(
X509
и*
SSL_gС_≥Ф_ыє_chaЪ
(cЏ° 
SSL
 *
s
);

1379 
SSL_CTX_gС_vФify_mode
(cЏ° 
SSL_CTX
 *
щx
);

1380 
SSL_CTX_gС_vФify_dХth
(cЏ° 
SSL_CTX
 *
щx
);

1381 (*
SSL_CTX_gС_vФify_€ќback
(cЏ° 
SSL_CTX
 *
щx
))(,
X509_STORE_CTX
 *);

1382 
SSL_CTX_£t_vФify
(
SSL_CTX
 *
щx
,
mode
,

1383 (*
€ќback
)(, 
X509_STORE_CTX
 *));

1384 
SSL_CTX_£t_vФify_dХth
(
SSL_CTX
 *
щx
,
dХth
);

1385 
SSL_CTX_£t_ыє_vФify_€ќback
(
SSL_CTX
 *
щx
, (*
cb
)(
X509_STORE_CTX
 *,*), *
ђg
);

1386 #iвdeа
OPENSSL_NO_RSA


1387 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
щx
, 
RSA
 *
rІ
);

1389 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
щx
, cЏ° *
d
, 
Ћn
);

1390 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
щx
, 
EVP_PKEY
 *
pkey
);

1391 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
щx
,

1392 cЏ° *
d
, 
Ћn
);

1393 
SSL_CTX_u£_ыєifi€Л
(
SSL_CTX
 *
щx
, 
X509
 *
x
);

1394 
SSL_CTX_u£_ыєifi€Л_ASN1
(
SSL_CTX
 *
щx
, 
Ћn
, cЏ° *
d
);

1396 
SSL_CTX_£t_deзu…_Јsswd_cb
(
SSL_CTX
 *
щx
, 
≥m_Јssw№d_cb
 *
cb
);

1397 
SSL_CTX_£t_deзu…_Јsswd_cb_u£rd©a
(
SSL_CTX
 *
щx
, *
u
);

1399 
SSL_CTX_check_іiv©e_key
(cЏ° 
SSL_CTX
 *
щx
);

1400 
SSL_check_іiv©e_key
(cЏ° 
SSL
 *
щx
);

1402 
SSL_CTX_£t_£ssiЏ_id_cЏЛxt
(
SSL_CTX
 *
щx
,cЏ° *
sid_щx
,

1403 
sid_щx_Ћn
);

1405 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
щx
);

1406 
SSL_£t_£ssiЏ_id_cЏЛxt
(
SSL
 *
s¶
,cЏ° *
sid_щx
,

1407 
sid_щx_Ћn
);

1409 
SSL_CTX_£t_puљo£
(
SSL_CTX
 *
s
, 
puљo£
);

1410 
SSL_£t_puљo£
(
SSL
 *
s
, 
puљo£
);

1411 
SSL_CTX_£t_Мu°
(
SSL_CTX
 *
s
, 
Мu°
);

1412 
SSL_£t_Мu°
(
SSL
 *
s
, 
Мu°
);

1414 
SSL_дУ
(
SSL
 *
s¶
);

1415 
SSL_acы±
(
SSL
 *
s¶
);

1416 
SSL_cЏ√щ
(
SSL
 *
s¶
);

1417 
SSL_їad
(
SSL
 *
s¶
,*
buf
,
num
);

1418 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1419 
SSL_wrЩe
(
SSL
 *
s¶
,cЏ° *
buf
,
num
);

1420 
SSL_щЊ
(
SSL
 *
s¶
,
cmd
, 
ѕrg
, *
Јrg
);

1421 
SSL_€ќback_щЊ
(
SSL
 *, , (*)());

1422 
SSL_CTX_щЊ
(
SSL_CTX
 *
щx
,
cmd
, 
ѕrg
, *
Јrg
);

1423 
SSL_CTX_€ќback_щЊ
(
SSL_CTX
 *, , (*)());

1425 
SSL_gС_Фr№
(cЏ° 
SSL
 *
s
,
їt_code
);

1426 cЏ° *
SSL_gС_vФsiЏ
(cЏ° 
SSL
 *
s
);

1429 
SSL_CTX_£t_s¶_vФsiЏ
(
SSL_CTX
 *
щx
,
SSL_METHOD
 *
mСh
);

1431 
SSL_METHOD
 *
SSLv2_mСhod
();

1432 
SSL_METHOD
 *
SSLv2_£rvФ_mСhod
();

1433 
SSL_METHOD
 *
SSLv2_юЫЅ_mСhod
();

1435 
SSL_METHOD
 *
SSLv3_mСhod
();

1436 
SSL_METHOD
 *
SSLv3_£rvФ_mСhod
();

1437 
SSL_METHOD
 *
SSLv3_юЫЅ_mСhod
();

1439 
SSL_METHOD
 *
SSLv23_mСhod
();

1440 
SSL_METHOD
 *
SSLv23_£rvФ_mСhod
();

1441 
SSL_METHOD
 *
SSLv23_юЫЅ_mСhod
();

1443 
SSL_METHOD
 *
TLSv1_mСhod
();

1444 
SSL_METHOD
 *
TLSv1_£rvФ_mСhod
();

1445 
SSL_METHOD
 *
TLSv1_юЫЅ_mСhod
();

1447 
SSL_METHOD
 *
DTLSv1_mСhod
();

1448 
SSL_METHOD
 *
DTLSv1_£rvФ_mСhod
();

1449 
SSL_METHOD
 *
DTLSv1_юЫЅ_mСhod
();

1451 
STACK_OF
(
SSL_CIPHER
и*
SSL_gС_cЭhФs
(cЏ° 
SSL
 *
s
);

1453 
SSL_do_h™dshake
(
SSL
 *
s
);

1454 
SSL_ї√gўЯЛ
(
SSL
 *
s
);

1455 
SSL_ї√gўЯЛ_≥ndЪg
(
SSL
 *
s
);

1456 
SSL_shutdown
(
SSL
 *
s
);

1458 
SSL_METHOD
 *
SSL_gС_s¶_mСhod
(
SSL
 *
s
);

1459 
SSL_£t_s¶_mСhod
(
SSL
 *
s
,
SSL_METHOD
 *
mСhod
);

1460 cЏ° *
SSL_ЃФt_ty≥_°rЪg_lЏg
(
vЃue
);

1461 cЏ° *
SSL_ЃФt_ty≥_°rЪg
(
vЃue
);

1462 cЏ° *
SSL_ЃФt_desc_°rЪg_lЏg
(
vЃue
);

1463 cЏ° *
SSL_ЃФt_desc_°rЪg
(
vЃue
);

1465 
SSL_£t_юЫЅ_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
и*
«me_li°
);

1466 
SSL_CTX_£t_юЫЅ_CA_li°
(
SSL_CTX
 *
щx
, 
STACK_OF
(
X509_NAME
и*
«me_li°
);

1467 
STACK_OF
(
X509_NAME
и*
SSL_gС_юЫЅ_CA_li°
(cЏ° 
SSL
 *
s
);

1468 
STACK_OF
(
X509_NAME
и*
SSL_CTX_gС_юЫЅ_CA_li°
(cЏ° 
SSL_CTX
 *
s
);

1469 
SSL_add_юЫЅ_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1470 
SSL_CTX_add_юЫЅ_CA
(
SSL_CTX
 *
щx
,
X509
 *
x
);

1472 
SSL_£t_cЏ√щ_°©e
(
SSL
 *
s
);

1473 
SSL_£t_acы±_°©e
(
SSL
 *
s
);

1475 
SSL_gС_deзu…_timeout
(cЏ° 
SSL
 *
s
);

1477 
SSL_libњry_ЪЩ
();

1479 *
SSL_CIPHER_desьЭtiЏ
(
SSL_CIPHER
 *,*
buf
,
size
);

1480 
STACK_OF
(
X509_NAME
и*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEи*
sk
);

1482 
SSL
 *
SSL_dup
(SSL *
s¶
);

1484 
X509
 *
SSL_gС_ыєifi€Л
(cЏ° 
SSL
 *
s¶
);

1485  
evp_pkey_°
 *
SSL_gС_іiv©ekey
(
SSL
 *
s¶
);

1487 
SSL_CTX_£t_quЫt_shutdown
(
SSL_CTX
 *
щx
,
mode
);

1488 
SSL_CTX_gС_quЫt_shutdown
(cЏ° 
SSL_CTX
 *
щx
);

1489 
SSL_£t_quЫt_shutdown
(
SSL
 *
s¶
,
mode
);

1490 
SSL_gС_quЫt_shutdown
(cЏ° 
SSL
 *
s¶
);

1491 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1492 
SSL_gС_shutdown
(cЏ° 
SSL
 *
s¶
);

1493 
SSL_vФsiЏ
(cЏ° 
SSL
 *
s¶
);

1494 
SSL_CTX_£t_deзu…_vФify_Јths
(
SSL_CTX
 *
щx
);

1495 
SSL_CTX_lяd_vФify_lo€tiЏs
(
SSL_CTX
 *
щx
, cЏ° *
CAfЮe
,

1496 cЏ° *
CAЈth
);

1497 
	#SSL_gС0_£ssiЏ
 
SSL_gС_£ssiЏ


	)

1498 
SSL_SESSION
 *
SSL_gС_£ssiЏ
(cЏ° 
SSL
 *
s¶
);

1499 
SSL_SESSION
 *
SSL_gС1_£ssiЏ
(
SSL
 *
s¶
);

1500 
SSL_CTX
 *
SSL_gС_SSL_CTX
(cЏ° 
SSL
 *
s¶
);

1501 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
щx
);

1502 
SSL_£t_Ъfo_€ќback
(
SSL
 *
s¶
,

1503 (*
cb
)(cЏ° 
SSL
 *
s¶
,
ty≥
,
vЃ
));

1504 (*
SSL_gС_Ъfo_€ќback
(cЏ° 
SSL
 *
s¶
))(cЏ° SSL *s¶,
ty≥
,
vЃ
);

1505 
SSL_°©e
(cЏ° 
SSL
 *
s¶
);

1507 
SSL_£t_vФify_їsu…
(
SSL
 *
s¶
,
v
);

1508 
SSL_gС_vФify_їsu…
(cЏ° 
SSL
 *
s¶
);

1510 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1511 *
SSL_gС_ex_d©a
(cЏ° 
SSL
 *
s¶
,
idx
);

1512 
SSL_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

1513 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

1515 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1516 *
SSL_SESSION_gС_ex_d©a
(cЏ° 
SSL_SESSION
 *
ss
,
idx
);

1517 
SSL_SESSION_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

1518 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

1520 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1521 *
SSL_CTX_gС_ex_d©a
(cЏ° 
SSL_CTX
 *
s¶
,
idx
);

1522 
SSL_CTX_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

1523 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

1525 
SSL_gС_ex_d©a_X509_STORE_CTX_idx
();

1527 
	#SSL_CTX_£ss_£t_€che_size
(
щx
,
t
) \

1528 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1529 
	#SSL_CTX_£ss_gС_€che_size
(
щx
) \

1530 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1531 
	#SSL_CTX_£t_£ssiЏ_€che_mode
(
щx
,
m
) \

1532 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1533 
	#SSL_CTX_gС_£ssiЏ_€che_mode
(
щx
) \

1534 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1536 
	#SSL_CTX_gС_deзu…_їad_ahЧd
(
щx
и
	`SSL_CTX_gС_їad_ahЧd
(щx)

	)

1537 
	#SSL_CTX_£t_deзu…_їad_ahЧd
(
щx
,
m
и
	`SSL_CTX_£t_їad_ahЧd
(щx,m)

	)

1538 
	#SSL_CTX_gС_їad_ahЧd
(
щx
) \

1539 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1540 
	#SSL_CTX_£t_їad_ahЧd
(
щx
,
m
) \

1541 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1542 
	#SSL_CTX_gС_max_ыє_li°
(
щx
) \

1543 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1544 
	#SSL_CTX_£t_max_ыє_li°
(
щx
,
m
) \

1545 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1546 
	#SSL_gС_max_ыє_li°
(
s¶
) \

1547 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1548 
	#SSL_£t_max_ыє_li°
(
s¶
,
m
) \

1549 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1552 #iвdeа
OPENSSL_NO_RSA


1553 
SSL_CTX_£t_tmp_rІ_€ќback
(
SSL_CTX
 *
щx
,

1554 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp№t
,

1555 
keyЋngth
));

1557 
SSL_£t_tmp_rІ_€ќback
(
SSL
 *
s¶
,

1558 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp№t
,

1559 
keyЋngth
));

1561 #iвdeа
OPENSSL_NO_DH


1562 
SSL_CTX_£t_tmp_dh_€ќback
(
SSL_CTX
 *
щx
,

1563 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp№t
,

1564 
keyЋngth
));

1565 
SSL_£t_tmp_dh_€ќback
(
SSL
 *
s¶
,

1566 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp№t
,

1567 
keyЋngth
));

1569 #iвdeа
OPENSSL_NO_ECDH


1570 
SSL_CTX_£t_tmp_ecdh_€ќback
(
SSL_CTX
 *
щx
,

1571 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp№t
,

1572 
keyЋngth
));

1573 
SSL_£t_tmp_ecdh_€ќback
(
SSL
 *
s¶
,

1574 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp№t
,

1575 
keyЋngth
));

1578 #iвdeа
OPENSSL_NO_COMP


1579 cЏ° 
COMP_METHOD
 *
SSL_gС_cuЉТt_comіessiЏ
(
SSL
 *
s
);

1580 cЏ° 
COMP_METHOD
 *
SSL_gС_cuЉТt_exЈnsiЏ
(
SSL
 *
s
);

1581 cЏ° *
SSL_COMP_gС_«me
(cЏ° 
COMP_METHOD
 *
comp
);

1582 
STACK_OF
(
SSL_COMP
и*
SSL_COMP_gС_comіessiЏ_mСhods
();

1583 
SSL_COMP_add_comіessiЏ_mСhod
(
id
,
COMP_METHOD
 *
cm
);

1585 cЏ° *
SSL_gС_cuЉТt_comіessiЏ
(
SSL
 *
s
);

1586 cЏ° *
SSL_gС_cuЉТt_exЈnsiЏ
(
SSL
 *
s
);

1587 cЏ° *
SSL_COMP_gС_«me
(cЏ° *
comp
);

1588 *
SSL_COMP_gС_comіessiЏ_mСhods
();

1589 
SSL_COMP_add_comіessiЏ_mСhod
(
id
,*
cm
);

1596 
ERR_lяd_SSL_°rЪgs
();

1601 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

1602 
	#SSL_F_CLIENT_FINISHED
 167

	)

1603 
	#SSL_F_CLIENT_HELLO
 101

	)

1604 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

1605 
	#SSL_F_D2I_SSL_SESSION
 103

	)

1606 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

1607 
	#SSL_F_DO_SSL3_WRITE
 104

	)

1608 
	#SSL_F_DTLS1_ACCEPT
 246

	)

1609 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

1610 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

1611 
	#SSL_F_DTLS1_CONNECT
 249

	)

1612 
	#SSL_F_DTLS1_ENC
 250

	)

1613 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

1614 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

1615 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

1616 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

1617 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

1618 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 277

	)

1619 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

1620 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

1621 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

1622 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

1623 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

1624 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

1625 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

1626 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

1627 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

1628 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

1629 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

1630 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

1631 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

1632 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

1633 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

1634 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

1635 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

1636 
	#SSL_F_GET_SERVER_HELLO
 109

	)

1637 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

1638 
	#SSL_F_I2D_SSL_SESSION
 111

	)

1639 
	#SSL_F_READ_N
 112

	)

1640 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

1641 
	#SSL_F_SERVER_FINISH
 239

	)

1642 
	#SSL_F_SERVER_HELLO
 114

	)

1643 
	#SSL_F_SERVER_VERIFY
 240

	)

1644 
	#SSL_F_SSL23_ACCEPT
 115

	)

1645 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

1646 
	#SSL_F_SSL23_CONNECT
 117

	)

1647 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

1648 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

1649 
	#SSL_F_SSL23_PEEK
 237

	)

1650 
	#SSL_F_SSL23_READ
 120

	)

1651 
	#SSL_F_SSL23_WRITE
 121

	)

1652 
	#SSL_F_SSL2_ACCEPT
 122

	)

1653 
	#SSL_F_SSL2_CONNECT
 123

	)

1654 
	#SSL_F_SSL2_ENC_INIT
 124

	)

1655 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

1656 
	#SSL_F_SSL2_PEEK
 234

	)

1657 
	#SSL_F_SSL2_READ
 125

	)

1658 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

1659 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

1660 
	#SSL_F_SSL2_WRITE
 127

	)

1661 
	#SSL_F_SSL3_ACCEPT
 128

	)

1662 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

1663 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

1664 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

1665 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

1666 
	#SSL_F_SSL3_CONNECT
 132

	)

1667 
	#SSL_F_SSL3_CTRL
 213

	)

1668 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

1669 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

1670 
	#SSL_F_SSL3_ENC
 134

	)

1671 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

1672 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

1673 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

1674 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

1675 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

1676 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

1677 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

1678 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

1679 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

1680 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

1681 
	#SSL_F_SSL3_GET_RECORD
 143

	)

1682 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

1683 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

1684 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

1685 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 284

	)

1686 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

1687 
	#SSL_F_SSL3_PEEK
 235

	)

1688 
	#SSL_F_SSL3_READ_BYTES
 148

	)

1689 
	#SSL_F_SSL3_READ_N
 149

	)

1690 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

1691 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

1692 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

1693 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

1694 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

1695 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

1696 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

1697 
	#SSL_F_SSL3_SETUP_BUFFERS
 156

	)

1698 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

1699 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

1700 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

1701 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 272

	)

1702 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

1703 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

1704 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 273

	)

1705 
	#SSL_F_SSL_BAD_METHOD
 160

	)

1706 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

1707 
	#SSL_F_SSL_CERT_DUP
 221

	)

1708 
	#SSL_F_SSL_CERT_INST
 222

	)

1709 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

1710 
	#SSL_F_SSL_CERT_NEW
 162

	)

1711 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

1712 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 274

	)

1713 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

1714 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

1715 
	#SSL_F_SSL_CLEAR
 164

	)

1716 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

1717 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

1718 
	#SSL_F_SSL_CTRL
 232

	)

1719 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

1720 
	#SSL_F_SSL_CTX_NEW
 169

	)

1721 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

1722 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

1723 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

1724 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

1725 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

1726 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

1727 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

1728 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

1729 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

1730 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

1731 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

1732 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

1733 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

1734 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

1735 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

1736 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

1737 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

1738 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

1739 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

1740 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

1741 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

1742 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

1743 
	#SSL_F_SSL_NEW
 186

	)

1744 
	#SSL_F_SSL_PEEK
 270

	)

1745 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

1746 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 276

	)

1747 
	#SSL_F_SSL_READ
 223

	)

1748 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

1749 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

1750 
	#SSL_F_SSL_SESSION_NEW
 189

	)

1751 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

1752 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

1753 
	#SSL_F_SSL_SET_CERT
 191

	)

1754 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

1755 
	#SSL_F_SSL_SET_FD
 192

	)

1756 
	#SSL_F_SSL_SET_PKEY
 193

	)

1757 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

1758 
	#SSL_F_SSL_SET_RFD
 194

	)

1759 
	#SSL_F_SSL_SET_SESSION
 195

	)

1760 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

1761 
	#SSL_F_SSL_SET_TRUST
 228

	)

1762 
	#SSL_F_SSL_SET_WFD
 196

	)

1763 
	#SSL_F_SSL_SHUTDOWN
 224

	)

1764 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

1765 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

1766 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

1767 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

1768 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

1769 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

1770 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

1771 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

1772 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

1773 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

1774 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

1775 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

1776 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

1777 
	#SSL_F_SSL_WRITE
 208

	)

1778 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

1779 
	#SSL_F_TLS1_ENC
 210

	)

1780 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

1781 
	#SSL_F_WRITE_PENDING
 212

	)

1784 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

1785 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

1786 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

1787 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

1788 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

1789 
	#SSL_R_BAD_CHECKSUM
 104

	)

1790 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

1791 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

1792 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

1793 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

1794 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

1795 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

1796 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

1797 
	#SSL_R_BAD_ECC_CERT
 304

	)

1798 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

1799 
	#SSL_R_BAD_ECPOINT
 306

	)

1800 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

1801 
	#SSL_R_BAD_LENGTH
 271

	)

1802 
	#SSL_R_BAD_MAC_DECODE
 113

	)

1803 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

1804 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

1805 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

1806 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

1807 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

1808 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

1809 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

1810 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

1811 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

1812 
	#SSL_R_BAD_SIGNATURE
 123

	)

1813 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

1814 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

1815 
	#SSL_R_BAD_STATE
 126

	)

1816 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

1817 
	#SSL_R_BIO_NOT_SET
 128

	)

1818 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

1819 
	#SSL_R_BN_LIB
 130

	)

1820 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

1821 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

1822 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

1823 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

1824 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

1825 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

1826 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

1827 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

1828 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

1829 
	#SSL_R_CLIENTHELLO_TLSEXT
 157

	)

1830 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

1831 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

1832 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

1833 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

1834 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

1835 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

1836 
	#SSL_R_COOKIE_MISMATCH
 308

	)

1837 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

1838 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

1839 
	#SSL_R_DECRYPTION_FAILED
 147

	)

1840 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

1841 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

1842 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

1843 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

1844 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

1845 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

1846 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

1847 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

1848 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

1849 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

1850 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

1851 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

1852 
	#SSL_R_HTTP_REQUEST
 156

	)

1853 
	#SSL_R_ILLEGAL_PADDING
 283

	)

1854 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

1855 
	#SSL_R_INVALID_COMMAND
 280

	)

1856 
	#SSL_R_INVALID_PURPOSE
 278

	)

1857 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 275

	)

1858 
	#SSL_R_INVALID_TRUST
 279

	)

1859 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

1860 
	#SSL_R_KRB5
 285

	)

1861 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

1862 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

1863 
	#SSL_R_KRB5_C_INIT
 288

	)

1864 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

1865 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

1866 
	#SSL_R_KRB5_S_INIT
 291

	)

1867 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

1868 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

1869 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

1870 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

1871 
	#SSL_R_LENGTH_MISMATCH
 159

	)

1872 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

1873 
	#SSL_R_LIBRARY_BUG
 274

	)

1874 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

1875 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

1876 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

1877 
	#SSL_R_MISSING_DH_KEY
 163

	)

1878 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

1879 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

1880 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

1881 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

1882 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

1883 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

1884 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

1885 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

1886 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

1887 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

1888 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

1889 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

1890 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

1891 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

1892 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

1893 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

1894 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

1895 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

1896 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

1897 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

1898 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

1899 
	#SSL_R_NO_CIPHER_LIST
 184

	)

1900 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

1901 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

1902 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

1903 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

1904 
	#SSL_R_NO_PRIVATEKEY
 189

	)

1905 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

1906 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

1907 
	#SSL_R_NO_PUBLICKEY
 192

	)

1908 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

1909 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

1910 
	#SSL_R_NULL_SSL_CTX
 195

	)

1911 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

1912 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

1913 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

1914 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

1915 
	#SSL_R_PARSE_TLSEXT
 223

	)

1916 
	#SSL_R_PATH_TOO_LONG
 270

	)

1917 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

1918 
	#SSL_R_PEER_ERROR
 200

	)

1919 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

1920 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

1921 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

1922 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

1923 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

1924 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

1925 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

1926 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

1927 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

1928 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

1929 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

1930 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

1931 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

1932 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

1933 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

1934 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

1935 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

1936 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

1937 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

1938 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

1939 
	#SSL_R_SERVERHELLO_TLSEXT
 224

	)

1940 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

1941 
	#SSL_R_SHORT_READ
 219

	)

1942 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

1943 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

1944 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

1945 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 225

	)

1946 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 226

	)

1947 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

1948 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

1949 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

1950 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

1951 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

1952 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

1953 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

1954 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

1955 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

1956 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

1957 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

1958 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

1959 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

1960 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

1961 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

1962 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

1963 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

1964 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

1965 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

1966 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

1967 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

1968 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

1969 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

1970 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

1971 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

1972 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

1973 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

1974 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

1975 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

1976 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

1977 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

1978 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

1979 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

1980 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

1981 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 227

	)

1982 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

1983 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

1984 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

1985 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

1986 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

1987 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

1988 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

1989 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

1990 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

1991 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

1992 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

1993 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

1994 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

1995 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

1996 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

1997 
	#SSL_R_UNINITIALIZED
 276

	)

1998 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

1999 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2000 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2001 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2002 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2003 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2004 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2005 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2006 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2007 
	#SSL_R_UNKNOWN_STATE
 255

	)

2008 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2009 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2010 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2011 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2012 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2013 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2014 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2015 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2016 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2017 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2018 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2019 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2020 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2021 
	#SSL_R_X509_LIB
 268

	)

2022 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2024 #ifdeа 
__эlu•lus


	@/usr/include/poll.h

1 
	~<sys/pёl.h
>

	@/usr/include/pthread.h

20 #iвdeа
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<г©uїs.h
>

24 
	~<ТdЯn.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bЩs/±hїadty≥s.h
>

31 
	~<bЩs/£tjmp.h
>

32 
	~<bЩs/w№dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifdeа
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifdeа
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifdeа
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifdeа
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #iа
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifdeа
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifdeа
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #iа
defЪed
 
__USE_UNIX98
 || defЪed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifdeа
__USE_GNU


129 #iа
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*и0, 0, 0 } }

	)

184 
	s_±hїad_юЧnup_bufгr


186 (*
	m__routЪe
) (*);

187 *
	m__ђg
;

188 
	m__€nы…y≥
;

189 
_±hїad_юЧnup_bufгr
 *
	m__іev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*и-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifdeа
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hїad_ьЧЛ
 (
±hїad_t
 *
__ї°riщ
 
__√wthїad
,

228 
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ
 
__©М
,

229 *(*
__°ђt_routЪe
) (*),

230 *
__ї°riщ
 
__ђg
и
__THROW
 
__nЏnuќ
 ((1, 3));

236 
	$±hїad_exЩ
 (*
__їtvЃ
и
	`__©МibuЛ__
 ((
__n№СuЇ__
));

244 
	`±hїad_joЪ
 (
±hїad_t
 
__th
, **
__thїad_їtuЇ
);

246 #ifdeа
__USE_GNU


249 
	$±hїad_МyjoЪ_≈
 (
±hїad_t
 
__th
, **
__thїad_їtuЇ
и
__THROW
;

257 
	`±hїad_timedjoЪ_≈
 (
±hїad_t
 
__th
, **
__thїad_їtuЇ
,

258 
__cЏ°
 
time•ec
 *
__ab°ime
);

265 
	$±hїad_dСach
 (
±hїad_t
 
__th
и
__THROW
;

269 
±hїad_t
 
	$±hїad_£lf
 (и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

272 
	$±hїad_equЃ
 (
±hїad_t
 
__thїad1
,Еthїad_И
__thїad2
и
__THROW
;

280 
	$±hїad_©М_ЪЩ
 (
±hїad_©М_t
 *
__©М
и
__THROW
 
	`__nЏnuќ
 ((1));

283 
	$±hїad_©М_de°roy
 (
±hїad_©М_t
 *
__©М
)

284 
__THROW
 
	`__nЏnuќ
 ((1));

287 
	$±hїad_©М_gСdСach°©e
 (
__cЏ°
 
±hїad_©М_t
 *
__©М
,

288 *
__dСach°©e
)

289 
__THROW
 
	`__nЏnuќ
 ((1, 2));

292 
	$±hїad_©М_£tdСach°©e
 (
±hїad_©М_t
 *
__©М
,

293 
__dСach°©e
)

294 
__THROW
 
	`__nЏnuќ
 ((1));

298 
	$±hїad_©М_gСguђdsize
 (
__cЏ°
 
±hїad_©М_t
 *
__©М
,

299 
size_t
 *
__guђdsize
)

300 
__THROW
 
	`__nЏnuќ
 ((1, 2));

303 
	$±hїad_©М_£tguђdsize
 (
±hїad_©М_t
 *
__©М
,

304 
size_t
 
__guђdsize
)

305 
__THROW
 
	`__nЏnuќ
 ((1));

309 
	$±hїad_©М_gСschedЈњm
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ


310 
__©М
,

311 
sched_Јњm
 *
__ї°riщ
 
__Јњm
)

312 
__THROW
 
	`__nЏnuќ
 ((1, 2));

315 
	$±hїad_©М_£tschedЈњm
 (
±hїad_©М_t
 *
__ї°riщ
 
__©М
,

316 
__cЏ°
 
sched_Јњm
 *
__ї°riщ


317 
__Јњm
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

320 
	$±hїad_©М_gСschedpёicy
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ


321 
__©М
, *
__ї°riщ
 
__pёicy
)

322 
__THROW
 
	`__nЏnuќ
 ((1, 2));

325 
	$±hїad_©М_£tschedpёicy
 (
±hїad_©М_t
 *
__©М
, 
__pёicy
)

326 
__THROW
 
	`__nЏnuќ
 ((1));

329 
	$±hїad_©М_gСЪhФЩsched
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ


330 
__©М
, *
__ї°riщ
 
__ЪhФЩ
)

331 
__THROW
 
	`__nЏnuќ
 ((1, 2));

334 
	$±hїad_©М_£tЪhФЩsched
 (
±hїad_©М_t
 *
__©М
,

335 
__ЪhФЩ
)

336 
__THROW
 
	`__nЏnuќ
 ((1));

340 
	$±hїad_©М_gСscЁe
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ
 
__©М
,

341 *
__ї°riщ
 
__scЁe
)

342 
__THROW
 
	`__nЏnuќ
 ((1, 2));

345 
	$±hїad_©М_£tscЁe
 (
±hїad_©М_t
 *
__©М
, 
__scЁe
)

346 
__THROW
 
	`__nЏnuќ
 ((1));

349 
	$±hїad_©М_gС°ackaddr
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ


350 
__©М
, **
__ї°riщ
 
__°ackaddr
)

351 
__THROW
 
	`__nЏnuќ
 ((1, 2)и
__©МibuЛ_dХї€Лd__
;

357 
	$±hїad_©М_£t°ackaddr
 (
±hїad_©М_t
 *
__©М
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__nЏnuќ
 ((1)и
__©МibuЛ_dХї€Лd__
;

362 
	$±hїad_©М_gС°acksize
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ


363 
__©М
, 
size_t
 *
__ї°riщ
 
__°acksize
)

364 
__THROW
 
	`__nЏnuќ
 ((1, 2));

369 
	$±hїad_©М_£t°acksize
 (
±hїad_©М_t
 *
__©М
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__nЏnuќ
 ((1));

373 #ifdeа
__USE_XOPEN2K


375 
	$±hїad_©М_gС°ack
 (
__cЏ°
 
±hїad_©М_t
 *
__ї°riщ
 
__©М
,

376 **
__ї°riщ
 
__°ackaddr
,

377 
size_t
 *
__ї°riщ
 
__°acksize
)

378 
__THROW
 
	`__nЏnuќ
 ((1, 2, 3));

383 
	$±hїad_©М_£t°ack
 (
±hїad_©М_t
 *
__©М
, *
__°ackaddr
,

384 
size_t
 
__°acksize
и
__THROW
 
	`__nЏnuќ
 ((1));

387 #ifdeа
__USE_GNU


390 
	$±hїad_©М_£ПffЪЩy_≈
 (
±hїad_©М_t
 *
__©М
,

391 
size_t
 
__эu£tsize
,

392 
__cЏ°
 
эu_£t_t
 *
__эu£t
)

393 
__THROW
 
	`__nЏnuќ
 ((1, 3));

397 
	$±hїad_©М_gСaffЪЩy_≈
 (
__cЏ°
 
±hїad_©М_t
 *
__©М
,

398 
size_t
 
__эu£tsize
,

399 
эu_£t_t
 *
__эu£t
)

400 
__THROW
 
	`__nЏnuќ
 ((1, 3));

406 
	$±hїad_gС©М_≈
 (
±hїad_t
 
__th
, 
±hїad_©М_t
 *
__©М
)

407 
__THROW
 
	`__nЏnuќ
 ((2));

415 
	$±hїad_£tschedЈњm
 (
±hїad_t
 
__ПrgС_thїad
, 
__pёicy
,

416 
__cЏ°
 
sched_Јњm
 *
__Јњm
)

417 
__THROW
 
	`__nЏnuќ
 ((3));

420 
	$±hїad_gСschedЈњm
 (
±hїad_t
 
__ПrgС_thїad
,

421 *
__ї°riщ
 
__pёicy
,

422 
sched_Јњm
 *
__ї°riщ
 
__Јњm
)

423 
__THROW
 
	`__nЏnuќ
 ((2, 3));

426 
	$±hїad_£tschedіio
 (
±hїad_t
 
__ПrgС_thїad
, 
__іio
)

427 
__THROW
;

430 #ifdeа
__USE_UNIX98


432 
	$±hїad_gСcЏcuЉТcy
 (и
__THROW
;

435 
	$±hїad_£tcЏcuЉТcy
 (
__ЋvЦ
и
__THROW
;

438 #ifdeа
__USE_GNU


443 
	$±hїad_yЫld
 (и
__THROW
;

448 
	$±hїad_£ПffЪЩy_≈
 (
±hїad_t
 
__th
, 
size_t
 
__эu£tsize
,

449 
__cЏ°
 
эu_£t_t
 *
__эu£t
)

450 
__THROW
 
	`__nЏnuќ
 ((3));

453 
	$±hїad_gСaffЪЩy_≈
 (
±hїad_t
 
__th
, 
size_t
 
__эu£tsize
,

454 
эu_£t_t
 *
__эu£t
)

455 
__THROW
 
	`__nЏnuќ
 ((3));

468 
	`±hїad_Џы
 (
±hїad_Џы_t
 *
__Џы_cЏМё
,

469 (*
__ЪЩ_routЪe
и()и
	`__nЏnuќ
 ((1, 2));

480 
	`±hїad_£t€nыl°©e
 (
__°©e
, *
__ёd°©e
);

484 
	`±hїad_£t€nы…y≥
 (
__ty≥
, *
__ёdty≥
);

487 
	`±hїad_€nыl
 (
±hїad_t
 
__th
);

492 
	`±hїad_Л°€nыl
 ();

501 
__jmp_buf
 
__€nыl_jmp_buf
;

502 
__mask_was_Іved
;

503 } 
__€nыl_jmp_buf
[1];

504 *
__Јd
[4];

505 } 
	t__±hїad_unwЪd_buf_t
 
	t__©МibuЛ__
 ((
	t__Ѓig√d__
));

508 #iвdeа
__юЧnup_fщ_©МibuЛ


509 
	#__юЧnup_fщ_©МibuЛ


	)

514 
	s__±hїad_юЧnup_дame


516 (*
__€nыl_routЪe
) (*);

517 *
__€nыl_ђg
;

518 
__do_Щ
;

519 
__€nыl_ty≥
;

522 #iа
defЪed
 
__GNUC__
 && defЪed 
__EXCEPTIONS


523 #ifdeа
__эlu•lus


525 юas†
	c__±hїad_юЧnup_юass


527 (*
__€nыl_routЪe
) (*);

528 *
__€nыl_ђg
;

529 
__do_Щ
;

530 
__€nыl_ty≥
;

532 
public
:

533 
	`__±hїad_юЧnup_юass
 ((*
__fщ
и(*), *
__ђg
)

534 : 
	`__€nыl_routЪe
 (
__fщ
), 
	`__€nыl_ђg
 (
__ђg
), 
	$__do_Щ
 (1) { }

535 ~
	$__±hїad_юЧnup_юass
 (и{ iа(
__do_Щ
и
	`__€nыl_routЪe
 (
__€nыl_ђg
); 
	}
}

536 
	$__£tdoЩ
 (
__√wvЃ
и{ 
__do_Щ
 = __√wvЃ; 
	}
}

537 
	$__deгr
 (и{ 
	`±hїad_£t€nы…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__€nыl_ty≥
); 
	}
}

539 
	$__ї°№e
 (иcЏ° { 
	`±hїad_£t€nы…y≥
 (
__€nыl_ty≥
, 0); 
	}
}

549 
	#±hїad_юЧnup_push
(
routЪe
, 
ђg
) \

551 
__±hїad_юЧnup_юass
 
	`__юдame
 (
routЪe
, 
ђg
)

	)

555 
	#±hїad_юЧnup_pЁ
(
execuЛ
) \

556 
__юдame
.
	`__£tdoЩ
 (
execuЛ
); \

557 } 0)

	)

559 #ifdeа
__USE_GNU


563 
	#±hїad_юЧnup_push_deгr_≈
(
routЪe
, 
ђg
) \

565 
__±hїad_юЧnup_юass
 
	`__юдame
 (
routЪe
, 
ђg
); \

566 
__юдame
.
	`__deгr
 ()

	)

571 
	#±hїad_юЧnup_pЁ_ї°№e_≈
(
execuЛ
) \

572 
__юдame
.
	`__ї°№e
 (); \

573 
__юдame
.
	`__£tdoЩ
 (
execuЛ
); \

574 } 0)

	)

581 
__exЛЇ_ЪlЪe
 

582 
	$__±hїad_юЧnup_routЪe
 (
__±hїad_юЧnup_дame
 *
__дame
)

584 iа(
__дame
->
__do_Щ
)

585 
__дame
->
	`__€nыl_routЪe
 (__дame->
__€nыl_ђg
);

586 
	}
}

595 
	#±hїad_юЧnup_push
(
routЪe
, 
ђg
) \

597 
__±hїad_юЧnup_дame
 
__юдame
 \

598 
	`__©МibuЛ__
 ((
	`__юЧnup__
 (
__±hїad_юЧnup_routЪe
))) \

599 р{ .
__€nыl_routЪe
 = (
routЪe
), .
__€nыl_ђg
 = (
ђg
), \

600 .
__do_Щ
 = 1 };

	)

604 
	#±hїad_юЧnup_pЁ
(
execuЛ
) \

605 
__юдame
.
__do_Щ
 = (
execuЛ
); \

606 } 0)

	)

608 #ifdeа
__USE_GNU


612 
	#±hїad_юЧnup_push_deгr_≈
(
routЪe
, 
ђg
) \

614 
__±hїad_юЧnup_дame
 
__юдame
 \

615 
	`__©МibuЛ__
 ((
	`__юЧnup__
 (
__±hїad_юЧnup_routЪe
))) \

616 р{ .
__€nыl_routЪe
 = (
routЪe
), .
__€nыl_ђg
 = (
ђg
), \

617 .
__do_Щ
 = 1 }; \

618 (и
	`±hїad_£t€nы…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__юдame
.
__€nыl_ty≥
)

	)

624 
	#±hїad_юЧnup_pЁ_ї°№e_≈
(
execuЛ
) \

625 (и
	`±hїad_£t€nы…y≥
 (
__юдame
.
__€nыl_ty≥
, 
NULL
); \

626 
__юдame
.
__do_Щ
 = (
execuЛ
); \

627 } 0)

	)

638 
	#±hїad_юЧnup_push
(
routЪe
, 
ђg
) \

640 
__±hїad_unwЪd_buf_t
 
__€nыl_buf
; \

641 (*
__€nыl_routЪe
и(*ир(
routЪe
); \

642 *
__€nыl_ђg
 = (
ђg
); \

643 
nў_fЬ°_€ќ
 = 
	`__sig£tjmp
 ((
__jmp_buf_Пg
 *) (*) \

644 
__€nыl_buf
.
__€nыl_jmp_buf
, 0); \

645 iа(
	`__buЮtЪ_ex≥щ
 (
nў_fЬ°_€ќ
, 0)) \

647 
	`__€nыl_routЪe
 (
__€nыl_ђg
); \

648 
	`__±hїad_unwЪd_√xt
 (&
__€nыl_buf
); \

652 
	`__±hїad_їgi°Ф_€nыl
 (&
__€nыl_buf
); \

653 dЎ{

	)

654 
__±hїad_їgi°Ф_€nыl
 (
__±hїad_unwЪd_buf_t
 *
__buf
)

655 
__юЧnup_fщ_©МibuЛ
;

659 
	#±hїad_юЧnup_pЁ
(
execuЛ
) \

662 
	`__±hїad_uƒegi°Ф_€nыl
 (&
__€nыl_buf
); \

663 iа(
execuЛ
) \

664 
	`__€nыl_routЪe
 (
__€nыl_ђg
); \

665 } 0)

	)

666 
	$__±hїad_uƒegi°Ф_€nыl
 (
__±hїad_unwЪd_buf_t
 *
__buf
)

667 
__юЧnup_fщ_©МibuЛ
;

669 #ifdeа
__USE_GNU


673 
	#±hїad_юЧnup_push_deгr_≈
(
routЪe
, 
ђg
) \

675 
__±hїad_unwЪd_buf_t
 
__€nыl_buf
; \

676 (*
__€nыl_routЪe
и(*ир(
routЪe
); \

677 *
__€nыl_ђg
 = (
ђg
); \

678 
nў_fЬ°_€ќ
 = 
	`__sig£tjmp
 ((
__jmp_buf_Пg
 *) (*) \

679 
__€nыl_buf
.
__€nыl_jmp_buf
, 0); \

680 iа(
	`__buЮtЪ_ex≥щ
 (
nў_fЬ°_€ќ
, 0)) \

682 
	`__€nыl_routЪe
 (
__€nыl_ђg
); \

683 
	`__±hїad_unwЪd_√xt
 (&
__€nыl_buf
); \

687 
	`__±hїad_їgi°Ф_€nыl_deгr
 (&
__€nыl_buf
); \

688 dЎ{

	)

689 
	`__±hїad_їgi°Ф_€nыl_deгr
 (
__±hїad_unwЪd_buf_t
 *
__buf
)

690 
__юЧnup_fщ_©МibuЛ
;

695 
	#±hїad_юЧnup_pЁ_ї°№e_≈
(
execuЛ
) \

698 
	`__±hїad_uƒegi°Ф_€nыl_ї°№e
 (&
__€nыl_buf
); \

699 iа(
execuЛ
) \

700 
	`__€nыl_routЪe
 (
__€nыl_ђg
); \

701 
	}
} 0)

	)

702 
	$__±hїad_uƒegi°Ф_€nыl_ї°№e
 (
__±hїad_unwЪd_buf_t
 *
__buf
)

703 
__юЧnup_fщ_©МibuЛ
;

707 
	$__±hїad_unwЪd_√xt
 (
__±hїad_unwЪd_buf_t
 *
__buf
)

708 
__юЧnup_fщ_©МibuЛ
 
	`__©МibuЛ__
 ((
__n№СuЇ__
))

709 #iвdeа
SHARED


710 
	`__©МibuЛ__
 ((
__wЧk__
))

716 
__jmp_buf_Пg
;

717 
	$__sig£tjmp
 (
__jmp_buf_Пg
 *
__Тv
, 
__Іvemask
и
__THROW
;

723 
	$±hїad_muЛx_ЪЩ
 (
±hїad_muЛx_t
 *
__muЛx
,

724 
__cЏ°
 
±hїad_muЛx©М_t
 *
__muЛx©М
)

725 
__THROW
 
	`__nЏnuќ
 ((1));

728 
	$±hїad_muЛx_de°roy
 (
±hїad_muЛx_t
 *
__muЛx
)

729 
__THROW
 
	`__nЏnuќ
 ((1));

732 
	$±hїad_muЛx_Мylock
 (
±hїad_muЛx_t
 *
__muЛx
)

733 
__THROW
 
	`__nЏnuќ
 ((1));

736 
	$±hїad_muЛx_lock
 (
±hїad_muЛx_t
 *
__muЛx
)

737 
__THROW
 
	`__nЏnuќ
 ((1));

739 #ifdeа
__USE_XOPEN2K


741 
	$±hїad_muЛx_timedlock
 (
±hїad_muЛx_t
 *
__ї°riщ
 
__muЛx
,

742 
__cЏ°
 
time•ec
 *
__ї°riщ


743 
__ab°ime
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

747 
	$±hїad_muЛx_u∆ock
 (
±hїad_muЛx_t
 *
__muЛx
)

748 
__THROW
 
	`__nЏnuќ
 ((1));

751 #ifdeа
__USE_UNIX98


753 
	$±hїad_muЛx_gСіioыЮЪg
 (
__cЏ°
 
±hїad_muЛx_t
 *

754 
__ї°riщ
 
__muЛx
,

755 *
__ї°riщ
 
__іioыЮЪg
)

756 
__THROW
 
	`__nЏnuќ
 ((1, 2));

760 
	$±hїad_muЛx_£НrioыЮЪg
 (
±hїad_muЛx_t
 *
__ї°riщ
 
__muЛx
,

761 
__іioыЮЪg
,

762 *
__ї°riщ
 
__ёd_ыЮЪg
)

763 
__THROW
 
	`__nЏnuќ
 ((1, 3));

767 #ifdeа
__USE_XOPEN2K8


769 
	$±hїad_muЛx_cЏsi°Тt_≈
 (
±hїad_muЛx_t
 *
__muЛx
)

770 
__THROW
 
	`__nЏnuќ
 ((1));

771 #ifdeа
__USE_GNU


772 
	$±hїad_muЛx_cЏsi°Тt_≈
 (
±hїad_muЛx_t
 *
__muЛx
)

773 
__THROW
 
	`__nЏnuќ
 ((1));

782 
	$±hїad_muЛx©М_ЪЩ
 (
±hїad_muЛx©М_t
 *
__©М
)

783 
__THROW
 
	`__nЏnuќ
 ((1));

786 
	$±hїad_muЛx©М_de°roy
 (
±hїad_muЛx©М_t
 *
__©М
)

787 
__THROW
 
	`__nЏnuќ
 ((1));

790 
	$±hїad_muЛx©М_gСpshђed
 (
__cЏ°
 
±hїad_muЛx©М_t
 *

791 
__ї°riщ
 
__©М
,

792 *
__ї°riщ
 
__pshђed
)

793 
__THROW
 
	`__nЏnuќ
 ((1, 2));

796 
	$±hїad_muЛx©М_£Нshђed
 (
±hїad_muЛx©М_t
 *
__©М
,

797 
__pshђed
)

798 
__THROW
 
	`__nЏnuќ
 ((1));

800 #ifdeа
__USE_UNIX98


802 
	$±hїad_muЛx©М_gСty≥
 (
__cЏ°
 
±hїad_muЛx©М_t
 *
__ї°riщ


803 
__©М
, *
__ї°riщ
 
__kЪd
)

804 
__THROW
 
	`__nЏnuќ
 ((1, 2));

809 
	$±hїad_muЛx©М_£Йy≥
 (
±hїad_muЛx©М_t
 *
__©М
, 
__kЪd
)

810 
__THROW
 
	`__nЏnuќ
 ((1));

813 
	$±hїad_muЛx©М_gСіўocё
 (
__cЏ°
 
±hїad_muЛx©М_t
 *

814 
__ї°riщ
 
__©М
,

815 *
__ї°riщ
 
__іўocё
)

816 
__THROW
 
	`__nЏnuќ
 ((1, 2));

820 
	$±hїad_muЛx©М_£Нrўocё
 (
±hїad_muЛx©М_t
 *
__©М
,

821 
__іўocё
)

822 
__THROW
 
	`__nЏnuќ
 ((1));

825 
	$±hїad_muЛx©М_gСіioыЮЪg
 (
__cЏ°
 
±hїad_muЛx©М_t
 *

826 
__ї°riщ
 
__©М
,

827 *
__ї°riщ
 
__іioыЮЪg
)

828 
__THROW
 
	`__nЏnuќ
 ((1, 2));

831 
	$±hїad_muЛx©М_£НrioыЮЪg
 (
±hїad_muЛx©М_t
 *
__©М
,

832 
__іioыЮЪg
)

833 
__THROW
 
	`__nЏnuќ
 ((1));

836 #ifdeа
__USE_XOPEN2K


838 
	$±hїad_muЛx©М_gСrobu°
 (
__cЏ°
 
±hїad_muЛx©М_t
 *
__©М
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__nЏnuќ
 ((1, 2));

841 #ifdeа
__USE_GNU


842 
	$±hїad_muЛx©М_gСrobu°_≈
 (
__cЏ°
 
±hїad_muЛx©М_t
 *
__©М
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__nЏnuќ
 ((1, 2));

848 
	$±hїad_muЛx©М_£Мobu°
 (
±hїad_muЛx©М_t
 *
__©М
,

849 
__robu°√ss
)

850 
__THROW
 
	`__nЏnuќ
 ((1));

851 #ifdeа
__USE_GNU


852 
	$±hїad_muЛx©М_£Мobu°_≈
 (
±hїad_muЛx©М_t
 *
__©М
,

853 
__robu°√ss
)

854 
__THROW
 
	`__nЏnuќ
 ((1));

859 #iа
defЪed
 
__USE_UNIX98
 || defЪed 
__USE_XOPEN2K


864 
	$±hїad_rwlock_ЪЩ
 (
±hїad_rwlock_t
 *
__ї°riщ
 
__rwlock
,

865 
__cЏ°
 
±hїad_rwlock©М_t
 *
__ї°riщ


866 
__©М
и
__THROW
 
	`__nЏnuќ
 ((1));

869 
	$±hїad_rwlock_de°roy
 (
±hїad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__nЏnuќ
 ((1));

873 
	$±hїad_rwlock_rdlock
 (
±hїad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__nЏnuќ
 ((1));

877 
	$±hїad_rwlock_Мyrdlock
 (
±hїad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__nЏnuќ
 ((1));

880 #ifdeа
__USE_XOPEN2K


882 
	$±hїad_rwlock_timedrdlock
 (
±hїad_rwlock_t
 *
__ї°riщ
 
__rwlock
,

883 
__cЏ°
 
time•ec
 *
__ї°riщ


884 
__ab°ime
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

888 
	$±hїad_rwlock_wЊock
 (
±hїad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__nЏnuќ
 ((1));

892 
	$±hїad_rwlock_МywЊock
 (
±hїad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__nЏnuќ
 ((1));

895 #ifdeа
__USE_XOPEN2K


897 
	$±hїad_rwlock_timedwЊock
 (
±hїad_rwlock_t
 *
__ї°riщ
 
__rwlock
,

898 
__cЏ°
 
time•ec
 *
__ї°riщ


899 
__ab°ime
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

903 
	$±hїad_rwlock_u∆ock
 (
±hїad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__nЏnuќ
 ((1));

910 
	$±hїad_rwlock©М_ЪЩ
 (
±hїad_rwlock©М_t
 *
__©М
)

911 
__THROW
 
	`__nЏnuќ
 ((1));

914 
	$±hїad_rwlock©М_de°roy
 (
±hїad_rwlock©М_t
 *
__©М
)

915 
__THROW
 
	`__nЏnuќ
 ((1));

918 
	$±hїad_rwlock©М_gСpshђed
 (
__cЏ°
 
±hїad_rwlock©М_t
 *

919 
__ї°riщ
 
__©М
,

920 *
__ї°riщ
 
__pshђed
)

921 
__THROW
 
	`__nЏnuќ
 ((1, 2));

924 
	$±hїad_rwlock©М_£Нshђed
 (
±hїad_rwlock©М_t
 *
__©М
,

925 
__pshђed
)

926 
__THROW
 
	`__nЏnuќ
 ((1));

929 
	$±hїad_rwlock©М_gСkЪd_≈
 (
__cЏ°
 
±hїad_rwlock©М_t
 *

930 
__ї°riщ
 
__©М
,

931 *
__ї°riщ
 
__іef
)

932 
__THROW
 
	`__nЏnuќ
 ((1, 2));

935 
	$±hїad_rwlock©М_£tkЪd_≈
 (
±hїad_rwlock©М_t
 *
__©М
,

936 
__іef
и
__THROW
 
	`__nЏnuќ
 ((1));

944 
	$±hїad_cЏd_ЪЩ
 (
±hїad_cЏd_t
 *
__ї°riщ
 
__cЏd
,

945 
__cЏ°
 
±hїad_cЏd©М_t
 *
__ї°riщ


946 
__cЏd_©М
и
__THROW
 
	`__nЏnuќ
 ((1));

949 
	$±hїad_cЏd_de°roy
 (
±hїad_cЏd_t
 *
__cЏd
)

950 
__THROW
 
	`__nЏnuќ
 ((1));

953 
	$±hїad_cЏd_sig«l
 (
±hїad_cЏd_t
 *
__cЏd
)

954 
__THROW
 
	`__nЏnuќ
 ((1));

957 
	$±hїad_cЏd_brяd€°
 (
±hїad_cЏd_t
 *
__cЏd
)

958 
__THROW
 
	`__nЏnuќ
 ((1));

965 
	$±hїad_cЏd_waЩ
 (
±hїad_cЏd_t
 *
__ї°riщ
 
__cЏd
,

966 
±hїad_muЛx_t
 *
__ї°riщ
 
__muЛx
)

967 
	`__nЏnuќ
 ((1, 2));

976 
	$±hїad_cЏd_timedwaЩ
 (
±hїad_cЏd_t
 *
__ї°riщ
 
__cЏd
,

977 
±hїad_muЛx_t
 *
__ї°riщ
 
__muЛx
,

978 
__cЏ°
 
time•ec
 *
__ї°riщ


979 
__ab°ime
и
	`__nЏnuќ
 ((1, 2, 3));

984 
	$±hїad_cЏd©М_ЪЩ
 (
±hїad_cЏd©М_t
 *
__©М
)

985 
__THROW
 
	`__nЏnuќ
 ((1));

988 
	$±hїad_cЏd©М_de°roy
 (
±hїad_cЏd©М_t
 *
__©М
)

989 
__THROW
 
	`__nЏnuќ
 ((1));

992 
	$±hїad_cЏd©М_gСpshђed
 (
__cЏ°
 
±hїad_cЏd©М_t
 *

993 
__ї°riщ
 
__©М
,

994 *
__ї°riщ
 
__pshђed
)

995 
__THROW
 
	`__nЏnuќ
 ((1, 2));

998 
	$±hїad_cЏd©М_£Нshђed
 (
±hїad_cЏd©М_t
 *
__©М
,

999 
__pshђed
и
__THROW
 
	`__nЏnuќ
 ((1));

1001 #ifdeа
__USE_XOPEN2K


1003 
	$±hїad_cЏd©М_gСюock
 (
__cЏ°
 
±hїad_cЏd©М_t
 *

1004 
__ї°riщ
 
__©М
,

1005 
__юockid_t
 *
__ї°riщ
 
__юock_id
)

1006 
__THROW
 
	`__nЏnuќ
 ((1, 2));

1009 
	$±hїad_cЏd©М_£tюock
 (
±hїad_cЏd©М_t
 *
__©М
,

1010 
__юockid_t
 
__юock_id
)

1011 
__THROW
 
	`__nЏnuќ
 ((1));

1015 #ifdeа
__USE_XOPEN2K


1020 
	$±hїad_•Ъ_ЪЩ
 (
±hїad_•Ъlock_t
 *
__lock
, 
__pshђed
)

1021 
__THROW
 
	`__nЏnuќ
 ((1));

1024 
	$±hїad_•Ъ_de°roy
 (
±hїad_•Ъlock_t
 *
__lock
)

1025 
__THROW
 
	`__nЏnuќ
 ((1));

1028 
	$±hїad_•Ъ_lock
 (
±hїad_•Ъlock_t
 *
__lock
)

1029 
__THROW
 
	`__nЏnuќ
 ((1));

1032 
	$±hїad_•Ъ_Мylock
 (
±hїad_•Ъlock_t
 *
__lock
)

1033 
__THROW
 
	`__nЏnuќ
 ((1));

1036 
	$±hїad_•Ъ_u∆ock
 (
±hїad_•Ъlock_t
 *
__lock
)

1037 
__THROW
 
	`__nЏnuќ
 ((1));

1044 
	$±hїad_bђrЫr_ЪЩ
 (
±hїad_bђrЫr_t
 *
__ї°riщ
 
__bђrЫr
,

1045 
__cЏ°
 
±hїad_bђrЫњЙr_t
 *
__ї°riщ


1046 
__©М
, 
__couЅ
)

1047 
__THROW
 
	`__nЏnuќ
 ((1));

1050 
	$±hїad_bђrЫr_de°roy
 (
±hїad_bђrЫr_t
 *
__bђrЫr
)

1051 
__THROW
 
	`__nЏnuќ
 ((1));

1054 
	$±hїad_bђrЫr_waЩ
 (
±hїad_bђrЫr_t
 *
__bђrЫr
)

1055 
__THROW
 
	`__nЏnuќ
 ((1));

1059 
	$±hїad_bђrЫњЙr_ЪЩ
 (
±hїad_bђrЫњЙr_t
 *
__©М
)

1060 
__THROW
 
	`__nЏnuќ
 ((1));

1063 
	$±hїad_bђrЫњЙr_de°roy
 (
±hїad_bђrЫњЙr_t
 *
__©М
)

1064 
__THROW
 
	`__nЏnuќ
 ((1));

1067 
	$±hїad_bђrЫњЙr_gСpshђed
 (
__cЏ°
 
±hїad_bђrЫњЙr_t
 *

1068 
__ї°riщ
 
__©М
,

1069 *
__ї°riщ
 
__pshђed
)

1070 
__THROW
 
	`__nЏnuќ
 ((1, 2));

1073 
	$±hїad_bђrЫњЙr_£Нshђed
 (
±hїad_bђrЫњЙr_t
 *
__©М
,

1074 
__pshђed
)

1075 
__THROW
 
	`__nЏnuќ
 ((1));

1087 
	`±hїad_key_ьЧЛ
 (
±hїad_key_t
 *
__key
,

1088 (*
__de°r_funщiЏ
) (*))

1089 
__THROW
 
	`__nЏnuќ
 ((1));

1092 
	$±hїad_key_dЦСe
 (
±hїad_key_t
 
__key
и
__THROW
;

1095 *
	$±hїad_gС•ecific
 (
±hїad_key_t
 
__key
и
__THROW
;

1098 
	$±hїad_£t•ecific
 (
±hїad_key_t
 
__key
,

1099 
__cЏ°
 *
__poЪЛr
и
__THROW
 ;

1102 #ifdeа
__USE_XOPEN2K


1104 
	$±hїad_gСэuюockid
 (
±hїad_t
 
__thїad_id
,

1105 
__юockid_t
 *
__юock_id
)

1106 
__THROW
 
	`__nЏnuќ
 ((2));

1121 
	`±hїad_©f№k
 ((*
__іХђe
) (),

1122 (*
__ЈїЅ
) (),

1123 (*
__chЮd
и()и
__THROW
;

1126 #ifdeа
__USE_EXTERN_INLINES


1128 
__exЛЇ_ЪlЪe
 

1129 
	`__NTH
 (
	$±hїad_equЃ
 (
±hїad_t
 
__thїad1
,Еthїad_И
__thїad2
))

1131  
__thїad1
 =р
__thїad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/signal.h

23 #iвdef 
_SIGNAL_H


25 #iа!
defЪed
 
__√ed_sig_©omic_t
 && !defЪed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<г©uїs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bЩs/sig£t.h
>

37 #iа
defЪed
 
__√ed_sig_©omic_t
 || defЪed 
_SIGNAL_H


38 #iвdeа
__sig_©omic_t_defЪed


39 
	#__sig_©omic_t_defЪed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #undeа
__√ed_sig_©omic_t


47 #iа
defЪed
 
__√ed_sig£t_t
 || (defЪed 
_SIGNAL_H
 && defЪed 
__USE_POSIX
)

48 #iвdeа
__sig£t_t_defЪed


49 
	#__sig£t_t_defЪed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #undeа
__√ed_sig£t_t


55 #ifdeа
_SIGNAL_H


57 
	~<bЩs/ty≥s.h
>

58 
	~<bЩs/signum.h
>

60 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K


61 #iвdeа
__pid_t_defЪed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_defЪed


	)

65 #ifdeа
__USE_XOPEN


67 #iвdeа
__uid_t_defЪed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_defЪed


	)

73 #ifdeа
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bЩs/sigЪfo.h
>

84 (*
	t__sigh™dЋr_t
) ();

89 
__sigh™dЋr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
)

90 
__THROW
;

91 #ifdeа
__USE_GNU


92 
__sigh™dЋr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifdeа
__USE_BSD


101 
__sigh™dЋr_t
 
	$sig«l
 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
)

102 
__THROW
;

105 #ifdeа
__REDIRECT_NTH


106 
__sigh™dЋr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifdeа
__USE_XOPEN


118 
__sigh™dЋr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
)

119 
__THROW
;

125 #ifdeа
__USE_POSIX


126 
	$kЮl
 (
__pid_t
 
__pid
, 
__sig
и
__THROW
;

129 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


133 
	$kЮЌg
 (
__pid_t
 
__pgљ
, 
__sig
и
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$њi£
 (
__sig
и
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifdeа
__USE_SVID


143 
__sigh™dЋr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dЋr_t
 
__h™dЋr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
и
__THROW
;

148 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__cЏ°
 *
__s
);

153 #ifdeа
__USE_XOPEN2K


155 
	`psigЪfo
 (
__cЏ°
 
sigЪfo_t
 *
__pЪfo
, __cЏ° *
__s
);

168 
	`__sigЈu£
 (
__sig_№_mask
, 
__is_sig
);

170 #ifdeа
__FAVOR_BSD


173 
	$sigЈu£
 (
__mask
и
__THROW
 
__©МibuЛ_dХї€Лd__
;

175 #ifdeа
__USE_XOPEN


176 #ifdeа
__GNUC__


177 
	$sigЈu£
 (
__sig
и
	`__asm__
 ("__xpg_sigpause");

180 
	#sigЈu£
(
sig
и
	`__sigЈu£
 ((sig), 1)

	)

186 #ifdeа
__USE_BSD


193 
	#sigmask
(
sig
и
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
и
__THROW
 
__©МibuЛ_dХї€Лd__
;

199 
	$sig£tmask
 (
__mask
и
__THROW
 
__©МibuЛ_dХї€Лd__
;

202 
	$siggСmask
 (и
__THROW
 
__©МibuЛ_dХї€Лd__
;

206 #ifdeа
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifdeа
__USE_GNU


211 
__sigh™dЋr_t
 
	tsigh™dЋr_t
;

215 #ifdeа
__USE_BSD


216 
__sigh™dЋr_t
 
	tsig_t
;

219 #ifdeа
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
и
__THROW
 
	`__nЏnuќ
 ((1));

225 
	$sigfЮl£t
 (
sig£t_t
 *
__£t
и
__THROW
 
	`__nЏnuќ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
и
__THROW
 
	`__nЏnuќ
 ((1));

231 
	$sigdЦ£t
 (
sig£t_t
 *
__£t
, 
__signo
и
__THROW
 
	`__nЏnuќ
 ((1));

234 
	$sigismembФ
 (
__cЏ°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__nЏnuќ
 ((1));

237 #ifdeа
__USE_GNU


239 
	$sigi£m±y£t
 (
__cЏ°
 
sig£t_t
 *
__£t
и
__THROW
 
	`__nЏnuќ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__cЏ°
 sig£t_И*
__Ћб
,

243 
__cЏ°
 
sig£t_t
 *
__right
и
__THROW
 
	`__nЏnuќ
 ((1, 2, 3));

246 
	$sig№£t
 (
sig£t_t
 *
__£t
, 
__cЏ°
 sig£t_И*
__Ћб
,

247 
__cЏ°
 
sig£t_t
 *
__right
и
__THROW
 
	`__nЏnuќ
 ((1, 2, 3));

252 
	~<bЩs/sigaщiЏ.h
>

255 
	$sigіocmask
 (
__how
, 
__cЏ°
 
sig£t_t
 *
__ї°riщ
 
__£t
,

256 
sig£t_t
 *
__ї°riщ
 
__o£t
и
__THROW
;

263 
	$sigsu•Тd
 (
__cЏ°
 
sig£t_t
 *
__£t
и
	`__nЏnuќ
 ((1));

266 
	$sigaщiЏ
 (
__sig
, 
__cЏ°
 
sigaщiЏ
 *
__ї°riщ
 
__aщ
,

267 
sigaщiЏ
 *
__ї°riщ
 
__ящ
и
__THROW
;

270 
	$sig≥ndЪg
 (
sig£t_t
 *
__£t
и
__THROW
 
	`__nЏnuќ
 ((1));

277 
	$sigwaЩ
 (
__cЏ°
 
sig£t_t
 *
__ї°riщ
 
__£t
, *__ї°riщ 
__sig
)

278 
	`__nЏnuќ
 ((1, 2));

280 #ifdeа
__USE_POSIX199309


285 
	$sigwaЩЪfo
 (
__cЏ°
 
sig£t_t
 *
__ї°riщ
 
__£t
,

286 
sigЪfo_t
 *
__ї°riщ
 
__Ъfo
и
	`__nЏnuќ
 ((1));

293 
	$sigtimedwaЩ
 (
__cЏ°
 
sig£t_t
 *
__ї°riщ
 
__£t
,

294 
sigЪfo_t
 *
__ї°riщ
 
__Ъfo
,

295 
__cЏ°
 
time•ec
 *
__ї°riщ
 
__timeout
)

296 
	`__nЏnuќ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__cЏ°
 
sigvЃ
 
__vЃ
)

301 
__THROW
;

306 #ifdeа
__USE_BSD


310 
__cЏ°
 *__cЏ° 
_sys_sigli°
[
_NSIG
];

311 
__cЏ°
 *__cЏ° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dЋr_t
 
sv_h™dЋr
;

317 
sv_mask
;

319 
sv_жags
;

320 
	#sv_Џ°ack
 
sv_жags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__cЏ°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
и
__THROW
;

339 
	~<bЩs/sigcЏЛxt.h
>

342 
	$sigїtuЇ
 (
sigcЏЛxt
 *
__sэ
и
__THROW
;

347 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigЪЛЉu±
 (
__sig
, 
__ЪЛЉu±
и
__THROW
;

356 
	~<bЩs/sig°ack.h
>

357 #ifdeа
__USE_XOPEN


359 
	~<sys/ucЏЛxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©МibuЛ_dХї€Лd__
;

370 
	$sigЃt°ack
 (
__cЏ°
 
sigЃt°ack
 *
__ї°riщ
 
__ss
,

371 
sigЃt°ack
 *
__ї°riщ
 
__oss
и
__THROW
;

375 #ifdeа
__USE_XOPEN_EXTENDED


379 
	$sighёd
 (
__sig
и
__THROW
;

382 
	$sigїl£
 (
__sig
и
__THROW
;

385 
	$sigign№e
 (
__sig
и
__THROW
;

388 
__sigh™dЋr_t
 
	$sig£t
 (
__sig
, 
__sigh™dЋr_t
 
__di•
и
__THROW
;

391 #iа
defЪed
 
__USE_POSIX199506
 || defЪed 
__USE_UNIX98


394 
	~<bЩs/±hїadty≥s.h
>

395 
	~<bЩs/sigthїad.h
>

402 
	$__libc_cuЉТt_sigєmЪ
 (и
__THROW
;

404 
	$__libc_cuЉТt_sigєmax
 (и
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #iвdeа
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<г©uїs.h
>

27 
	~<bЩs/wchђ.h
>

28 
	~<bЩs/w№dsize.h
>

35 #iвdeа
__Ъt8_t_defЪed


36 
	#__Ъt8_t_defЪed


	)

37 sig√d 
	tЪt8_t
;

38 
	tЪt16_t
;

39 
	tЪt32_t
;

40 #iа
__WORDSIZE
 == 64

41 
	tЪt64_t
;

43 
__exЛnsiЏ__


44 
	tЪt64_t
;

49 
	tuЪt8_t
;

50 
	tuЪt16_t
;

51 #iвdeа
__uЪt32_t_defЪed


52 
	tuЪt32_t
;

53 
	#__uЪt32_t_defЪed


	)

55 #iа
__WORDSIZE
 == 64

56 
	tuЪt64_t
;

58 
__exЛnsiЏ__


59 
	tuЪt64_t
;

66 sig√d 
	tЪt_Ћa°8_t
;

67 
	tЪt_Ћa°16_t
;

68 
	tЪt_Ћa°32_t
;

69 #iа
__WORDSIZE
 == 64

70 
	tЪt_Ћa°64_t
;

72 
__exЛnsiЏ__


73 
	tЪt_Ћa°64_t
;

77 
	tuЪt_Ћa°8_t
;

78 
	tuЪt_Ћa°16_t
;

79 
	tuЪt_Ћa°32_t
;

80 #iа
__WORDSIZE
 == 64

81 
	tuЪt_Ћa°64_t
;

83 
__exЛnsiЏ__


84 
	tuЪt_Ћa°64_t
;

91 sig√d 
	tЪt_з°8_t
;

92 #iа
__WORDSIZE
 == 64

93 
	tЪt_з°16_t
;

94 
	tЪt_з°32_t
;

95 
	tЪt_з°64_t
;

97 
	tЪt_з°16_t
;

98 
	tЪt_з°32_t
;

99 
__exЛnsiЏ__


100 
	tЪt_з°64_t
;

104 
	tuЪt_з°8_t
;

105 #iа
__WORDSIZE
 == 64

106 
	tuЪt_з°16_t
;

107 
	tuЪt_з°32_t
;

108 
	tuЪt_з°64_t
;

110 
	tuЪt_з°16_t
;

111 
	tuЪt_з°32_t
;

112 
__exЛnsiЏ__


113 
	tuЪt_з°64_t
;

118 #iа
__WORDSIZE
 == 64

119 #iвdeа
__ЪНМ_t_defЪed


120 
	tЪНМ_t
;

121 
	#__ЪНМ_t_defЪed


	)

123 
	tuЪНМ_t
;

125 #iвdeа
__ЪНМ_t_defЪed


126 
	tЪНМ_t
;

127 
	#__ЪНМ_t_defЪed


	)

129 
	tuЪНМ_t
;

134 #iа
__WORDSIZE
 == 64

135 
	tЪtmax_t
;

136 
	tuЪtmax_t
;

138 
__exЛnsiЏ__


139 
	tЪtmax_t
;

140 
__exЛnsiЏ__


141 
	tuЪtmax_t
;

147 #iа!
defЪed
 
__эlu•lus
 || defЪed 
__STDC_LIMIT_MACROS


149 #iа
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
иш## 
L


	)

151 
	#__UINT64_C
(
c
иш## 
UL


	)

153 
	#__INT64_C
(
c
иш## 
LL


	)

154 
	#__UINT64_C
(
c
иш## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #iа
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #iа
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #iа
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #iа
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #iа
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #iа
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #iвdeа
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #iа!
defЪed
 
__эlu•lus
 || defЪed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
и
	)
c

291 
	#INT16_C
(
c
и
	)
c

292 
	#INT32_C
(
c
и
	)
c

293 #iа
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
иш## 
L


	)

296 
	#INT64_C
(
c
иш## 
LL


	)

300 
	#UINT8_C
(
c
и
	)
c

301 
	#UINT16_C
(
c
и
	)
c

302 
	#UINT32_C
(
c
иш## 
U


	)

303 #iа
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
иш## 
UL


	)

306 
	#UINT64_C
(
c
иш## 
ULL


	)

310 #iа
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
иш## 
L


	)

312 
	#UINTMAX_C
(
c
иш## 
UL


	)

314 
	#INTMAX_C
(
c
иш## 
LL


	)

315 
	#UINTMAX_C
(
c
иш## 
ULL


	)

	@/usr/include/stdio.h

24 #iвdeа
_STDIO_H


26 #iа!
defЪed
 
__√ed_FILE
 && !defЪed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<г©uїs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bЩs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #iа!
defЪed
 
__FILE_defЪed
 && defЪed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #iа
defЪed
 
__USE_LARGEFILE64
 || defЪed 
__USE_SVID
 || defЪed 
__USE_POSIX
 \

52 || 
defЪed
 
	g__USE_BSD
 || defЪed 
	g__USE_ISOC99
 || defЪed 
	g__USE_XOPEN
 \

53 || 
defЪed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_defЪed
 1

	)

59 #undeа
__√ed_FILE


62 #iа!
defЪed
 
____FILE_defЪed
 && defЪed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_defЪed
 1

	)

69 #undeа
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifdeа
__USE_XOPEN


78 #ifdeа
__GNUC__


79 #iвdeа
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°dђg.h
>

89 
__BEGIN_NAMESPACE_STD


90 #iвdeа
__USE_FILE_OFFSET64


91 
_G_еos_t
 
	tеos_t
;

93 
_G_еos64_t
 
	tеos_t
;

95 
__END_NAMESPACE_STD


96 #ifdeа
__USE_LARGEFILE64


97 
_G_еos64_t
 
	tеos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #iвdeа
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #iвdeа
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


128 
	#P_tmpdЬ
 "/tmp"

	)

141 
	~<bЩs/°dio_lim.h
>

145 
_IO_FILE
 *
°dЪ
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dФr
;

149 
	#°dЪ
 
°dЪ


	)

150 
	#°dout
 
°dout


	)

151 
	#°dФr
 
°dФr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$їmove
 (
__cЏ°
 *
__fЮТame
и
__THROW
;

157 
	$ї«me
 (
__cЏ°
 *
__ёd
, __cЏ° *
__√w
и
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifdeа
__USE_ATFILE


162 
	$ї«mЧt
 (
__ёdfd
, 
__cЏ°
 *
__ёd
, 
__√wfd
,

163 
__cЏ°
 *
__√w
и
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #iвdeа
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfЮe
 (и
__wur
;

174 #ifdeа
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfЮe
, (), 
tmpfЮe64
и
__wur
;

177 
	#tmpfЮe
 
tmpfЮe64


	)

181 #ifdeа
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfЮe64
 (и
__wur
;

186 *
	$tm≤am
 (*
__s
и
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifdeа
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
и
__THROW
 
__wur
;

196 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


204 *
	$Лm≤am
 (
__cЏ°
 *
__dЬ
, __cЏ° *
__pfx
)

205 
__THROW
 
__©МibuЛ_mЃloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`fюo£
 (
FILE
 *
__°їam
);

219 
	`fжush
 (
FILE
 *
__°їam
);

220 
__END_NAMESPACE_STD


222 #ifdeа
__USE_MISC


229 
	`fжush_u∆ocked
 (
FILE
 *
__°їam
);

232 #ifdeа
__USE_GNU


239 
	`fюo£Ѓl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #iвdeа
__USE_FILE_OFFSET64


249 
FILE
 *
	$fЁТ
 (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

250 
__cЏ°
 *
__ї°riщ
 
__modes
и
__wur
;

255 
FILE
 *
	$дeЁТ
 (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

256 
__cЏ°
 *
__ї°riщ
 
__modes
,

257 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

259 #ifdeа
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
fЁТ
, (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

261 
__cЏ°
 *
__ї°riщ
 
__modes
), 
fЁТ64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
дeЁТ
, (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

264 
__cЏ°
 *
__ї°riщ
 
__modes
,

265 
FILE
 *
__ї°riщ
 
__°їam
), 
дeЁТ64
)

266 
__wur
;

268 
	#fЁТ
 
fЁТ64


	)

269 
	#дeЁТ
 
дeЁТ64


	)

272 
__END_NAMESPACE_STD


273 #ifdeа
__USE_LARGEFILE64


274 
FILE
 *
	$fЁТ64
 (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

275 
__cЏ°
 *
__ї°riщ
 
__modes
и
__wur
;

276 
FILE
 *
	$дeЁТ64
 (
__cЏ°
 *
__ї°riщ
 
__fЮТame
,

277 
__cЏ°
 *
__ї°riщ
 
__modes
,

278 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fdЁТ
 (
__fd
, 
__cЏ°
 *
__modes
и
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$fЁТcookЫ
 (*
__ї°riщ
 
__magic_cookЫ
,

290 
__cЏ°
 *
__ї°riщ
 
__modes
,

291 
_IO_cookЫ_io_funщiЏs_t
 
__io_funcs
и
__THROW
 
__wur
;

294 #ifdeа
__USE_XOPEN2K8


296 
FILE
 *
	$fmemЁТ
 (*
__s
, 
size_t
 
__Ћn
, 
__cЏ°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$ЁТ_mem°їam
 (**
__buжoc
, 
size_t
 *
__sizЦoc
и
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ї°riщ
 
__°їam
, *__ї°riщ 
__buf
и
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ї°riщ
 
__°їam
, *__ї°riщ 
__buf
,

314 
__modes
, 
size_t
 
__n
и
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbufгr
 (
FILE
 *
__ї°riщ
 
__°їam
, *__ї°riщ 
__buf
,

321 
size_t
 
__size
и
__THROW
;

324 
	$£ОЪebuf
 (
FILE
 *
__°їam
и
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`еrЪtf
 (
FILE
 *
__ї°riщ
 
__°їam
,

334 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...);

339 
	`іЪtf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...);

341 
	$•rЪtf
 (*
__ї°riщ
 
__s
,

342 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__THROW
;

348 
	`vеrЪtf
 (
FILE
 *
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__f№m©
,

349 
_G_va_li°
 
__ђg
);

354 
	`vіЪtf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
);

356 
	$v•rЪtf
 (*
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__f№m©
,

357 
_G_va_li°
 
__ђg
и
__THROW
;

358 
__END_NAMESPACE_STD


360 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_ISOC99
 || defЪed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$ҐіЪtf
 (*
__ї°riщ
 
__s
, 
size_t
 
__maxЋn
,

364 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...)

365 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 4)));

367 
	$vҐіЪtf
 (*
__ї°riщ
 
__s
, 
size_t
 
__maxЋn
,

368 
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
)

369 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifdeа
__USE_GNU


376 
	$va•rЪtf
 (**
__ї°riщ
 
__±r
, 
__cЏ°
 *__ї°riщ 
__f
,

377 
_G_va_li°
 
__ђg
)

378 
__THROW
 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__іЪtf__
, 2, 0))и
__wur
;

379 
	$__a•rЪtf
 (**
__ї°riщ
 
__±r
,

380 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

381 
__THROW
 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__іЪtf__
, 2, 3))и
__wur
;

382 
	$a•rЪtf
 (**
__ї°riщ
 
__±r
,

383 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

384 
__THROW
 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__іЪtf__
, 2, 3))и
__wur
;

387 #ifdeа
__USE_XOPEN2K8


394 
	$vdіЪtf
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fmt
,

395 
_G_va_li°
 
__ђg
)

396 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 0)));

397 
	$dіЪtf
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

398 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fs€nf
 (
FILE
 *
__ї°riщ
 
__°їam
,

408 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__wur
;

413 
	$s€nf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__wur
;

415 
	$ss€nf
 (
__cЏ°
 *
__ї°riщ
 
__s
,

416 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__THROW
;

418 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__USE_GNU
 \

419 && (!
defЪed
 
__LDBL_COMPAT
 || !defЪed 
__REDIRECT
) \

420 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

421 #ifdeа
__REDIRECT


425 
	`__REDIRECT
 (
fs€nf
, (
FILE
 *
__ї°riщ
 
__°їam
,

426 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...),

427 
__isoc99_fs€nf
и
__wur
;

428 
	`__REDIRECT
 (
s€nf
, (
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...),

429 
__isoc99_s€nf
и
__wur
;

430 
	`__REDIRECT
 (
ss€nf
, (
__cЏ°
 *
__ї°riщ
 
__s
,

431 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...),

432 
__isoc99_ss€nf
и
__THROW
;

434 
	$__isoc99_fs€nf
 (
FILE
 *
__ї°riщ
 
__°їam
,

435 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__wur
;

436 
	$__isoc99_s€nf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__wur
;

437 
	$__isoc99_ss€nf
 (
__cЏ°
 *
__ї°riщ
 
__s
,

438 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__THROW
;

439 
	#fs€nf
 
__isoc99_fs€nf


	)

440 
	#s€nf
 
__isoc99_s€nf


	)

441 
	#ss€nf
 
__isoc99_ss€nf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfs€nf
 (
FILE
 *
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__f№m©
,

454 
_G_va_li°
 
__ђg
)

455 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__s€nf__
, 2, 0))и
__wur
;

461 
	$vs€nf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
)

462 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__s€nf__
, 1, 0))и
__wur
;

465 
	$vss€nf
 (
__cЏ°
 *
__ї°riщ
 
__s
,

466 
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
)

467 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__s€nf__
, 2, 0)));

469 #iа!
defЪed
 
__USE_GNU
 \

470 && (!
defЪed
 
__LDBL_COMPAT
 || !defЪed 
__REDIRECT
) \

471 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

472 #ifdeа
__REDIRECT


476 
	`__REDIRECT
 (
vfs€nf
,

477 (
FILE
 *
__ї°riщ
 
__s
,

478 
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
),

479 
__isoc99_vfs€nf
)

480 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__s€nf__
, 2, 0))и
__wur
;

481 
	`__REDIRECT
 (
vs€nf
, (
__cЏ°
 *
__ї°riщ
 
__f№m©
,

482 
_G_va_li°
 
__ђg
), 
__isoc99_vs€nf
)

483 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__s€nf__
, 1, 0))и
__wur
;

484 
	`__REDIRECT
 (
vss€nf
,

485 (
__cЏ°
 *
__ї°riщ
 
__s
,

486 
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__ђg
),

487 
__isoc99_vss€nf
)

488 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__s€nf__
, 2, 0)));

490 
	$__isoc99_vfs€nf
 (
FILE
 *
__ї°riщ
 
__s
,

491 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

492 
_G_va_li°
 
__ђg
и
__wur
;

493 
	$__isoc99_vs€nf
 (
__cЏ°
 *
__ї°riщ
 
__f№m©
,

494 
_G_va_li°
 
__ђg
и
__wur
;

495 
	$__isoc99_vss€nf
 (
__cЏ°
 *
__ї°riщ
 
__s
,

496 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

497 
_G_va_li°
 
__ђg
и
__THROW
;

498 
	#vfs€nf
 
__isoc99_vfs€nf


	)

499 
	#vs€nf
 
__isoc99_vs€nf


	)

500 
	#vss€nf
 
__isoc99_vss€nf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgСc
 (
FILE
 *
__°їam
);

514 
	`gСc
 (
FILE
 *
__°їam
);

520 
	`gСchђ
 ();

521 
__END_NAMESPACE_STD


525 
	#gСc
(
_е
и
	`_IO_gСc
 (_е)

	)

527 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


532 
	`gСc_u∆ocked
 (
FILE
 *
__°їam
);

533 
	`gСchђ_u∆ocked
 ();

536 #ifdeа
__USE_MISC


543 
	`fgСc_u∆ocked
 (
FILE
 *
__°їam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`еutc
 (
__c
, 
FILE
 *
__°їam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°їam
);

562 
	`putchђ
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_е
и
	`_IO_putc
 (_ch, _е)

	)

569 #ifdeа
__USE_MISC


576 
	`еutc_u∆ocked
 (
__c
, 
FILE
 *
__°їam
);

579 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°їam
);

585 
	`putchђ_u∆ocked
 (
__c
);

589 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_MISC
 \

590 || (
defЪed
 
__USE_XOPEN
 && !defЪed 
__USE_XOPEN2K
)

592 
	`gСw
 (
FILE
 *
__°їam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°їam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgСs
 (*
__ї°riщ
 
__s
, 
__n
, 
FILE
 *__ї°riщ 
__°їam
)

605 
__wur
;

612 *
	$gСs
 (*
__s
и
__wur
;

613 
__END_NAMESPACE_STD


615 #ifdeа
__USE_GNU


622 *
	$fgСs_u∆ocked
 (*
__ї°riщ
 
__s
, 
__n
,

623 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gСdЦim
 (**
__ї°riщ
 
__lЪХМ
,

639 
size_t
 *
__ї°riщ
 
__n
, 
__dЦimЩФ
,

640 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

641 
_IO_ssize_t
 
	$gСdЦim
 (**
__ї°riщ
 
__lЪХМ
,

642 
size_t
 *
__ї°riщ
 
__n
, 
__dЦimЩФ
,

643 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

651 
_IO_ssize_t
 
	$gСlЪe
 (**
__ї°riщ
 
__lЪХМ
,

652 
size_t
 *
__ї°riщ
 
__n
,

653 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`еuts
 (
__cЏ°
 *
__ї°riщ
 
__s
, 
FILE
 *__ї°riщ 
__°їam
);

668 
	`puts
 (
__cЏ°
 *
__s
);

675 
	`ungСc
 (
__c
, 
FILE
 *
__°їam
);

682 
size_t
 
	$дЧd
 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

688 
size_t
 
	`fwrЩe
 (
__cЏ°
 *
__ї°riщ
 
__±r
, size_И
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifdeа
__USE_GNU


699 
	`еuts_u∆ocked
 (
__cЏ°
 *
__ї°riщ
 
__s
,

700 
FILE
 *
__ї°riщ
 
__°їam
);

703 #ifdeа
__USE_MISC


710 
size_t
 
	$дЧd_u∆ocked
 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

712 
size_t
 
	`fwrЩe_u∆ocked
 (
__cЏ°
 *
__ї°riщ
 
__±r
, size_И
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°їam
, 
__off
, 
__whТы
);

727 
	$бЦl
 (
FILE
 *
__°їam
и
__wur
;

732 
	`їwЪd
 (
FILE
 *
__°їam
);

733 
__END_NAMESPACE_STD


740 #iа
defЪed
 
__USE_LARGEFILE
 || defЪed 
__USE_XOPEN2K


741 #iвdeа
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°їam
, 
__off_t
 
__off
, 
__whТы
);

751 
__off_t
 
	$бЦlo
 (
FILE
 *
__°їam
и
__wur
;

753 #ifdeа
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°їam
, 
__off64_t
 
__off
, 
__whТы
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
бЦlo
, (
FILE
 *
__°їam
), 
бЦlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#бЦlo
 
бЦlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #iвdeа
__USE_FILE_OFFSET64


771 
	`fgСpos
 (
FILE
 *
__ї°riщ
 
__°їam
, 
еos_t
 *__ї°riщ 
__pos
);

776 
	`f£Нos
 (
FILE
 *
__°їam
, 
__cЏ°
 
еos_t
 *
__pos
);

778 #ifdeа
__REDIRECT


779 
	`__REDIRECT
 (
fgСpos
, (
FILE
 *
__ї°riщ
 
__°їam
,

780 
еos_t
 *
__ї°riщ
 
__pos
), 
fgСpos64
);

781 
	`__REDIRECT
 (
f£Нos
,

782 (
FILE
 *
__°їam
, 
__cЏ°
 
еos_t
 *
__pos
), 
f£Нos64
);

784 
	#fgСpos
 
fgСpos64


	)

785 
	#f£Нos
 
f£Нos64


	)

788 
__END_NAMESPACE_STD


790 #ifdeа
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°їam
, 
__off64_t
 
__off
, 
__whТы
);

792 
__off64_t
 
	$бЦlo64
 (
FILE
 *
__°їam
и
__wur
;

793 
	`fgСpos64
 (
FILE
 *
__ї°riщ
 
__°їam
, 
еos64_t
 *__ї°riщ 
__pos
);

794 
	`f£Нos64
 (
FILE
 *
__°їam
, 
__cЏ°
 
еos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$юЧїЉ
 (
FILE
 *
__°їam
и
__THROW
;

801 
	$гof
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

803 
	$гЉ№
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifdeа
__USE_MISC


808 
	$юЧїЉ_u∆ocked
 (
FILE
 *
__°їam
и
__THROW
;

809 
	$гof_u∆ocked
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

810 
	$гЉ№_u∆ocked
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥Љ№
 (
__cЏ°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bЩs/sys_ФЊi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fЮТo
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

834 #ifdeа
__USE_MISC


836 
	$fЮТo_u∆ocked
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

840 #iа(
defЪed
 
__USE_POSIX2
 || defЪed 
__USE_SVID
 || defЪed 
__USE_BSD
 || \

841 
defЪed
 
__USE_MISC
)

846 
FILE
 *
	$pЁТ
 (
__cЏ°
 *
__comm™d
, __cЏ° *
__modes
и
__wur
;

852 
	`pюo£
 (
FILE
 *
__°їam
);

856 #ifdef 
__USE_POSIX


858 *
	$щФmid
 (*
__s
и
__THROW
;

862 #ifdeа
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_іЪtf
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

873 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...)

874 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 3)));

875 
	$ob°ack_vіЪtf
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

876 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

877 
_G_va_li°
 
__ђgs
)

878 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 0)));

882 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


886 
	$жockfЮe
 (
FILE
 *
__°їam
и
__THROW
;

890 
	$бrylockfЮe
 (
FILE
 *
__°їam
и
__THROW
 
__wur
;

893 
	$fu∆ockfЮe
 (
FILE
 *
__°їam
и
__THROW
;

896 #iа
defЪed
 
__USE_XOPEN
 && !defЪed 
__USE_XOPEN2K
 && !defЪed 
__USE_GNU


900 
	#__√ed_gСЁt


	)

901 
	~<gСЁt.h
>

906 #ifdeа
__USE_EXTERN_INLINES


907 
	~<bЩs/°dio.h
>

909 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


910 
	~<bЩs/°dio2.h
>

912 #ifdeа
__LDBL_COMPAT


913 
	~<bЩs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #iвdef 
_STDLIB_H


25 
	~<г©uїs.h
>

28 
	#__√ed_size_t


	)

29 #iвdeа
__√ed_mЃloc_™d_€ќoc


30 
	#__√ed_wchђ_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #iвdeа
__√ed_mЃloc_™d_€ќoc


38 
	#_STDLIB_H
 1

	)

40 #iа
defЪed
 
__USE_XOPEN
 && !defЪed 
_SYS_WAIT_H


42 
	~<bЩs/waЩжags.h
>

43 
	~<bЩs/waЩ°©us.h
>

45 #ifdeа
__USE_BSD


50 #iа
defЪed
 
__GNUC__
 && !defЪed 
__эlu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exЛnsiЏ__
 (((uniЏ { 
	`__ty≥of
(
°©us
и
__Ъ
; 
__i
; }) \

53 { .
__Ъ
 = (
°©us
и}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
и(*(*и&(°©us))

	)

63 #iа!
defЪed
 
__GNUC__
 || __GNUC__ < 2 || defЪed 
__эlu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waЩ
 *
	m__u±r
;

71 *
	m__ЭМ
;

72 } 
	t__WAIT_STATUS
 
	t__©МibuЛ__
 ((
	t__М™•ђТt_uniЏ__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
и(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
и
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
и
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
и
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
и
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
и
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
и
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifdeа
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
и
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquў
;

101 
	mїm
;

102 } 
	tdiv_t
;

105 #iвdeа
__ldiv_t_defЪed


108 
	mquў
;

109 
	mїm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_defЪed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__ќdiv_t_defЪed


116 
__BEGIN_NAMESPACE_C99


118 
__exЛnsiЏ__
 struct

120 
	mquў
;

121 
	mїm
;

122 } 
	tќdiv_t
;

123 
	#__ќdiv_t_defЪed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__щy≥_gС_mb_cur_max
 ())

	)

140 
size_t
 
	$__щy≥_gС_mb_cur_max
 (и
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__cЏ°
 *
__≈М
)

146 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1)и
__wur
;

148 
	$©oi
 (
__cЏ°
 *
__≈М
)

149 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1)и
__wur
;

151 
	$©ё
 (
__cЏ°
 *
__≈М
)

152 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1)и
__wur
;

153 
__END_NAMESPACE_STD


155 #iа
defЪed
 
__USE_ISOC99
 || (defЪed 
__GLIBC_HAVE_LONG_LONG
 && defЪed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exЛnsiЏ__
 
	$©ёl
 (
__cЏ°
 *
__≈М
)

159 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1)и
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°єod
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

166 **
__ї°riщ
 
__Тd±r
)

167 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°єof
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

174 **
__ї°riщ
 
__Тd±r
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

176 
	$°єёd
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

177 **
__ї°riщ
 
__Тd±r
)

178 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°єё
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

185 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

186 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

188 
	$°єoul
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

189 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

190 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

191 
__END_NAMESPACE_STD


193 #iа
defЪed
 
__GLIBC_HAVE_LONG_LONG
 && defЪed 
__USE_BSD


195 
__exЛnsiЏ__


196 
	$°єoq
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

197 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

198 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

200 
__exЛnsiЏ__


201 
	$°єouq
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

202 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

203 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

206 #iа
defЪed
 
__USE_ISOC99
 || (defЪed 
__GLIBC_HAVE_LONG_LONG
 && defЪed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exЛnsiЏ__


210 
	$°єёl
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

211 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

212 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

214 
__exЛnsiЏ__


215 
	$°єouќ
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

216 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

217 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

218 
__END_NAMESPACE_C99


222 #ifdeа
__USE_GNU


236 
	~<xlo€Ћ.h
>

240 
	$°єё_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

241 **
__ї°riщ
 
__Тd±r
, 
__ba£
,

242 
__lo€Ћ_t
 
__loc
и
__THROW
 
	`__nЏnuќ
 ((1, 4)и
__wur
;

244 
	$°єoul_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

245 **
__ї°riщ
 
__Тd±r
,

246 
__ba£
, 
__lo€Ћ_t
 
__loc
)

247 
__THROW
 
	`__nЏnuќ
 ((1, 4)и
__wur
;

249 
__exЛnsiЏ__


250 
	$°єёl_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

251 **
__ї°riщ
 
__Тd±r
, 
__ba£
,

252 
__lo€Ћ_t
 
__loc
)

253 
__THROW
 
	`__nЏnuќ
 ((1, 4)и
__wur
;

255 
__exЛnsiЏ__


256 
	$°єouќ_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

257 **
__ї°riщ
 
__Тd±r
,

258 
__ba£
, 
__lo€Ћ_t
 
__loc
)

259 
__THROW
 
	`__nЏnuќ
 ((1, 4)и
__wur
;

261 
	$°єod_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

262 **
__ї°riщ
 
__Тd±r
, 
__lo€Ћ_t
 
__loc
)

263 
__THROW
 
	`__nЏnuќ
 ((1, 3)и
__wur
;

265 
	$°єof_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

266 **
__ї°riщ
 
__Тd±r
, 
__lo€Ћ_t
 
__loc
)

267 
__THROW
 
	`__nЏnuќ
 ((1, 3)и
__wur
;

269 
	$°єёd_l
 (
__cЏ°
 *
__ї°riщ
 
__≈М
,

270 **
__ї°riщ
 
__Тd±r
,

271 
__lo€Ћ_t
 
__loc
)

272 
__THROW
 
	`__nЏnuќ
 ((1, 3)и
__wur
;

276 #ifdeа
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exЛЇ_ЪlЪe
 

279 
	`__NTH
 (
	$©of
 (
__cЏ°
 *
__≈М
))

281  
	`°єod
 (
__≈М
, (**и
NULL
);

282 
	}
}

283 
__exЛЇ_ЪlЪe
 

284 
__NTH
 (
	$©oi
 (
__cЏ°
 *
__≈М
))

286  (и
	`°єё
 (
__≈М
, (**и
NULL
, 10);

287 
	}
}

288 
__exЛЇ_ЪlЪe
 

289 
__NTH
 (
	$©ё
 (
__cЏ°
 *
__≈М
))

291  
	`°єё
 (
__≈М
, (**и
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exЛnsiЏ__
 
__exЛЇ_ЪlЪe
 

298 
__NTH
 (
	$©ёl
 (
__cЏ°
 *
__≈М
))

300  
	`°єёl
 (
__≈М
, (**и
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
и
__THROW
 
__wur
;

314 
	$a64l
 (
__cЏ°
 *
__s
)

315 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1)и
__wur
;

319 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$њndom
 (и
__THROW
;

330 
	$§™dom
 (
__£ed
и
__THROW
;

336 *
	$ЪЩ°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ЦТ
и
__THROW
 
	`__nЏnuќ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
и
__THROW
 
	`__nЏnuќ
 ((1));

344 #ifdeа
__USE_MISC


349 
	sњndom_d©a


351 
Ъt32_t
 *
еМ
;

352 
Ъt32_t
 *
љМ
;

353 
Ъt32_t
 *
°©e
;

354 
њnd_ty≥
;

355 
њnd_deg
;

356 
њnd_£p
;

357 
Ъt32_t
 *
Тd_±r
;

360 
	$њndom_r
 (
њndom_d©a
 *
__ї°riщ
 
__buf
,

361 
Ъt32_t
 *
__ї°riщ
 
__їsu…
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
њndom_d©a
 *
__buf
)

364 
__THROW
 
	`__nЏnuќ
 ((2));

366 
	$ЪЩ°©e_r
 (
__£ed
, *
__ї°riщ
 
__°©ebuf
,

367 
size_t
 
__°©ЦТ
,

368 
њndom_d©a
 *
__ї°riщ
 
__buf
)

369 
__THROW
 
	`__nЏnuќ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ї°riщ
 
__°©ebuf
,

372 
њndom_d©a
 *
__ї°riщ
 
__buf
)

373 
__THROW
 
	`__nЏnuќ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$њnd
 (и
__THROW
;

382 
	$§™d
 (
__£ed
и
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifdeа
__USE_POSIX


387 
	$њnd_r
 (*
__£ed
и
__THROW
;

391 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


395 
	$dњnd48
 (и
__THROW
;

396 
	$Ф™d48
 (
__xsubi
[3]и
__THROW
 
	`__nЏnuќ
 ((1));

399 
	$ћ™d48
 (и
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__nЏnuќ
 ((1));

404 
	$mњnd48
 (и
__THROW
;

405 
	$jњnd48
 (
__xsubi
[3])

406 
__THROW
 
	`__nЏnuќ
 ((1));

409 
	$§™d48
 (
__£edvЃ
и
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__nЏnuќ
 ((1));

412 
	$lcЏg48
 (
__Јњm
[7]и
__THROW
 
	`__nЏnuќ
 ((1));

414 #ifdeа
__USE_MISC


418 
	sdњnd48_d©a


420 
__x
[3];

421 
__ёd_x
[3];

422 
__c
;

423 
__ЪЩ
;

424 
__a
;

428 
	$dњnd48_r
 (
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

429 *
__ї°riщ
 
__їsu…
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

430 
	$Ф™d48_r
 (
__xsubi
[3],

431 
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

432 *
__ї°riщ
 
__їsu…
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

435 
	$ћ™d48_r
 (
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

436 *
__ї°riщ
 
__їsu…
)

437 
__THROW
 
	`__nЏnuќ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

440 *
__ї°riщ
 
__їsu…
)

441 
__THROW
 
	`__nЏnuќ
 ((1, 2));

444 
	$mњnd48_r
 (
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

445 *
__ї°riщ
 
__їsu…
)

446 
__THROW
 
	`__nЏnuќ
 ((1, 2));

447 
	$jњnd48_r
 (
__xsubi
[3],

448 
dњnd48_d©a
 *
__ї°riщ
 
__bufгr
,

449 *
__ї°riщ
 
__їsu…
)

450 
__THROW
 
	`__nЏnuќ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvЃ
, 
dњnd48_d©a
 *
__bufгr
)

454 
__THROW
 
	`__nЏnuќ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dњnd48_d©a
 *
__bufгr
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

459 
	$lcЏg48_r
 (
__Јњm
[7],

460 
dњnd48_d©a
 *
__bufгr
)

461 
__THROW
 
	`__nЏnuќ
 ((1, 2));

467 #iвdeа
__mЃloc_™d_€ќoc_defЪed


468 
	#__mЃloc_™d_€ќoc_defЪed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mЃloc
 (
size_t
 
__size
и
__THROW
 
__©МibuЛ_mЃloc__
 
__wur
;

473 *
	$€ќoc
 (
size_t
 
__nmemb
, size_И
__size
)

474 
__THROW
 
__©МibuЛ_mЃloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #iвdeа
__√ed_mЃloc_™d_€ќoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$їЃloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©МibuЛ_wђn_unu£d_їsu…__
;

488 
	$дУ
 (*
__±r
и
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$cдУ
 (*
__±r
и
__THROW
;

496 #iа
defЪed
 
__USE_GNU
 || defЪed 
__USE_BSD
 || defЪed 
__USE_MISC


497 
	~<Ѓlo€.h
>

500 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


502 *
	$vЃloc
 (
size_t
 
__size
и
__THROW
 
__©МibuЛ_mЃloc__
 
__wur
;

505 #ifdeа
__USE_XOPEN2K


507 
	$posix_memЃign
 (**
__mem±r
, 
size_t
 
__ЃignmТt
, size_И
__size
)

508 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab№t
 (и
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

517 
	`©exЩ
 ((*
__func
и()и
__THROW
 
	`__nЏnuќ
 ((1));

519 #ifdeа
__USE_GNU


523 #ifdeа
__эlu•lus


524 "C++" 
	`©_quick_exЩ
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exЩ"и
	`__nЏnuќ
 ((1));

527 
	`©_quick_exЩ
 ((*
__func
и()и
__THROW
 
	`__nЏnuќ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`Џ_exЩ
 ((*
__func
и(
__°©us
, *
__ђg
), *__arg)

536 
__THROW
 
	`__nЏnuќ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exЩ
 (
__°©us
и
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

545 #ifdeа
__USE_GNU


551 
	$quick_exЩ
 (
__°©us
и
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

553 
__END_NAMESPACE_STD


555 #ifdeа
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_ExЩ
 (
__°©us
и
__THROW
 
	`__©МibuЛ__
 ((
__n№СuЇ__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gСТv
 (
__cЏ°
 *
__«me
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuї_gСТv
 (
__cЏ°
 *
__«me
)

572 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

574 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


578 
	$puЛnv
 (*
__°rЪg
и
__THROW
 
	`__nЏnuќ
 ((1));

581 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN2K


584 
	$£Лnv
 (
__cЏ°
 *
__«me
, __cЏ° *
__vЃue
, 
__їґaы
)

585 
__THROW
 
	`__nЏnuќ
 ((2));

588 
	$un£Лnv
 (
__cЏ°
 *
__«me
и
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$юЧїnv
 (и
__THROW
;

599 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED


604 *
	$mkЛmp
 (*
__Лmґ©e
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

614 #iвdeа
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__Лmґ©e
и
	`__nЏnuќ
 ((1)и
__wur
;

617 #ifdeа
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__Лmґ©e
), 
mk°emp64
)

619 
	`__nЏnuќ
 ((1)и
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifdeа
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__Лmґ©e
и
	`__nЏnuќ
 ((1)и
__wur
;

629 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN2K8


635 *
	$mkdЛmp
 (*
__Лmґ©e
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

638 #ifdeа
__USE_GNU


645 #iвdeа
__USE_FILE_OFFSET64


646 
	$mko°emp
 (*
__Лmґ©e
, 
__жags
и
	`__nЏnuќ
 ((1)и
__wur
;

648 #ifdeа
__REDIRECT


649 
	`__REDIRECT
 (
mko°emp
, (*
__Лmґ©e
, 
__жags
), 
mko°emp64
)

650 
	`__nЏnuќ
 ((1)и
__wur
;

652 
	#mko°emp
 
mko°emp64


	)

655 #ifdeа
__USE_LARGEFILE64


656 
	$mko°emp64
 (*
__Лmґ©e
, 
__жags
и
	`__nЏnuќ
 ((1)и
__wur
;

661 
__BEGIN_NAMESPACE_STD


666 
	$sy°em
 (
__cЏ°
 *
__comm™d
и
__wur
;

667 
__END_NAMESPACE_STD


670 #ifdef 
__USE_GNU


673 *
	$€nЏi€lize_fЮe_«me
 (
__cЏ°
 *
__«me
)

674 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

677 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


683 *
	$їЃЈth
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

684 *
__ї°riщ
 
__їsёved
и
__THROW
 
__wur
;

689 #iвdeа
__COMPAR_FN_T


690 
	#__COMPAR_FN_T


	)

691 (*
	t__comЈr_в_t
и(
	t__cЏ°
 *, __const *);

693 #ifdef 
__USE_GNU


694 
__comЈr_в_t
 
	tcomЈrisЏ_в_t
;

697 #ifdeа
__USE_GNU


698 (*
	t__comЈr_d_в_t
и(
	t__cЏ°
 *, __const *, *);

701 
__BEGIN_NAMESPACE_STD


704 *
	$b£ђch
 (
__cЏ°
 *
__key
, __cЏ° *
__ba£
,

705 
size_t
 
__nmemb
, size_И
__size
, 
__comЈr_в_t
 
__comЈr
)

706 
	`__nЏnuќ
 ((1, 2, 5)и
__wur
;

710 
	$qs№t
 (*
__ba£
, 
size_t
 
__nmemb
, size_И
__size
,

711 
__comЈr_в_t
 
__comЈr
и
	`__nЏnuќ
 ((1, 4));

712 #ifdeа
__USE_GNU


713 
	$qs№t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_И
__size
,

714 
__comЈr_d_в_t
 
__comЈr
, *
__ђg
)

715 
	`__nЏnuќ
 ((1, 4));

720 
	$abs
 (
__x
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

721 
	$ѕbs
 (
__x
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

722 
__END_NAMESPACE_STD


724 #ifdeа
__USE_ISOC99


725 
__exЛnsiЏ__
 
	$ќabs
 (
__x
)

726 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

730 
__BEGIN_NAMESPACE_STD


734 
div_t
 
	$div
 (
__numФ
, 
__dТom
)

735 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

736 
ldiv_t
 
	$ldiv
 (
__numФ
, 
__dТom
)

737 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

738 
__END_NAMESPACE_STD


740 #ifdeа
__USE_ISOC99


741 
__BEGIN_NAMESPACE_C99


742 
__exЛnsiЏ__
 
ќdiv_t
 
	$ќdiv
 (
__numФ
,

743 
__dТom
)

744 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
)и
__wur
;

745 
__END_NAMESPACE_C99


749 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN_EXTENDED


756 *
	$ecvt
 (
__vЃue
, 
__ndigЩ
, *
__ї°riщ
 
__deэt
,

757 *
__ї°riщ
 
__sign
и
__THROW
 
	`__nЏnuќ
 ((3, 4)и
__wur
;

762 *
	$fcvt
 (
__vЃue
, 
__ndigЩ
, *
__ї°riщ
 
__deэt
,

763 *
__ї°riщ
 
__sign
и
__THROW
 
	`__nЏnuќ
 ((3, 4)и
__wur
;

768 *
	$gcvt
 (
__vЃue
, 
__ndigЩ
, *
__buf
)

769 
__THROW
 
	`__nЏnuќ
 ((3)и
__wur
;

772 #ifdeа
__USE_MISC


774 *
	$qecvt
 (
__vЃue
, 
__ndigЩ
,

775 *
__ї°riщ
 
__deэt
, *__ї°riщ 
__sign
)

776 
__THROW
 
	`__nЏnuќ
 ((3, 4)и
__wur
;

777 *
	$qfcvt
 (
__vЃue
, 
__ndigЩ
,

778 *
__ї°riщ
 
__deэt
, *__ї°riщ 
__sign
)

779 
__THROW
 
	`__nЏnuќ
 ((3, 4)и
__wur
;

780 *
	$qgcvt
 (
__vЃue
, 
__ndigЩ
, *
__buf
)

781 
__THROW
 
	`__nЏnuќ
 ((3)и
__wur
;

786 
	$ecvt_r
 (
__vЃue
, 
__ndigЩ
, *
__ї°riщ
 
__deэt
,

787 *
__ї°riщ
 
__sign
, *__ї°riщ 
__buf
,

788 
size_t
 
__Ћn
и
__THROW
 
	`__nЏnuќ
 ((3, 4, 5));

789 
	$fcvt_r
 (
__vЃue
, 
__ndigЩ
, *
__ї°riщ
 
__deэt
,

790 *
__ї°riщ
 
__sign
, *__ї°riщ 
__buf
,

791 
size_t
 
__Ћn
и
__THROW
 
	`__nЏnuќ
 ((3, 4, 5));

793 
	$qecvt_r
 (
__vЃue
, 
__ndigЩ
,

794 *
__ї°riщ
 
__deэt
, *__ї°riщ 
__sign
,

795 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
)

796 
__THROW
 
	`__nЏnuќ
 ((3, 4, 5));

797 
	$qfcvt_r
 (
__vЃue
, 
__ndigЩ
,

798 *
__ї°riщ
 
__deэt
, *__ї°riщ 
__sign
,

799 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
)

800 
__THROW
 
	`__nЏnuќ
 ((3, 4, 5));

805 
__BEGIN_NAMESPACE_STD


808 
	$mbЋn
 (
__cЏ°
 *
__s
, 
size_t
 
__n
и
__THROW
 
__wur
;

811 
	$mbtowc
 (
wchђ_t
 *
__ї°riщ
 
__pwc
,

812 
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
и
__THROW
 
__wur
;

815 
	$wщomb
 (*
__s
, 
wchђ_t
 
__wchђ
и
__THROW
 
__wur
;

819 
size_t
 
	$mb°owcs
 (
wchђ_t
 *
__ї°riщ
 
__pwcs
,

820 
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
и
__THROW
;

822 
size_t
 
	$wc°ombs
 (*
__ї°riщ
 
__s
,

823 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__pwcs
, 
size_t
 
__n
)

824 
__THROW
;

825 
__END_NAMESPACE_STD


828 #ifdeа
__USE_SVID


833 
	$љm©ch
 (
__cЏ°
 *
__ї•Џ£
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

837 #ifdeа
__USE_XOPEN_EXTENDED


844 
	$gСsubЁt
 (**
__ї°riщ
 
__ЁtiЏp
,

845 *
__cЏ°
 *
__ї°riщ
 
__tokТs
,

846 **
__ї°riщ
 
__vЃuХ
)

847 
__THROW
 
	`__nЏnuќ
 ((1, 2, 3)и
__wur
;

851 #ifdeа
__USE_XOPEN


853 
	$£tkey
 (
__cЏ°
 *
__key
и
__THROW
 
	`__nЏnuќ
 ((1));

859 #ifdeа
__USE_XOPEN2K


861 
	$posix_ЁТ±
 (
__oжag
и
__wur
;

864 #ifdeа
__USE_XOPEN


869 
	$gњЅ±
 (
__fd
и
__THROW
;

873 
	$u∆ock±
 (
__fd
и
__THROW
;

878 *
	$±Ґame
 (
__fd
и
__THROW
 
__wur
;

881 #ifdeа
__USE_GNU


885 
	$±Ґame_r
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
)

886 
__THROW
 
	`__nЏnuќ
 ((2));

889 
	`gС±
 ();

892 #ifdeа
__USE_BSD


896 
	$gСlяdavg
 (
__lяdavg
[], 
__√Ћm
)

897 
__THROW
 
	`__nЏnuќ
 ((1));

902 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


903 
	~<bЩs/°dlib.h
>

905 #ifdeа
__LDBL_COMPAT


906 
	~<bЩs/°dlib-ldbl.h
>

910 #undeа
__√ed_mЃloc_™d_€ќoc


912 
__END_DECLS


	@/usr/include/string.h

23 #iвdef 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<г©uїs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #iа
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$memэy
 (*
__ї°riщ
 
__de°
,

44 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__nЏnuќ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__cЏ°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__nЏnuќ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_BSD
 || defЪed 
__USE_XOPEN


56 *
	$memcэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__nЏnuќ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1));

67 
	$memcmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

71 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

76 
__cЏ°
 *
	`memchr
 (__cЏ° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

79 #ifdeа
__OPTIMIZE__


80 
__exЛЇ_Ѓways_ЪlЪe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
и
__THROW


83  
	`__buЮtЪ_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

87 
	`memchr
 (
__cЏ°
 *
__s
, 
__c
, 
size_t
 
__n
и
__THROW


89  
	`__buЮtЪ_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__cЏ°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifdeа
__USE_GNU


102 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$њwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("њwmemchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

105 "C++" 
__cЏ°
 *
	$њwmemchr
 (
__cЏ°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("њwmemchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

108 *
	$њwmemchr
 (
__cЏ°
 *
__s
, 
__c
)

109 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

113 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

116 "C++" 
__cЏ°
 *
	$memrchr
 (
__cЏ°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

119 *
	$memrchr
 (
__cЏ°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°rэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
)

128 
__THROW
 
	`__nЏnuќ
 ((1, 2));

130 *
	$°Їэy
 (*
__ї°riщ
 
__de°
,

131 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__nЏnuќ
 ((1, 2));

135 *
	$°r€t
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
)

136 
__THROW
 
	`__nЏnuќ
 ((1, 2));

138 *
	$°Ї€t
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

139 
size_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

142 
	$°rcmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
)

143 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

145 
	$°Їcmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

149 
	$°rcёl
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
)

150 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

152 
size_t
 
	$°rxдm
 (*
__ї°riщ
 
__de°
,

153 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__nЏnuќ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifdeа
__USE_XOPEN2K8


161 
	~<xlo€Ћ.h
>

164 
	$°rcёl_l
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
, 
__lo€Ћ_t
 
__l
)

165 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2, 3));

167 
size_t
 
	$°rxдm_l
 (*
__de°
, 
__cЏ°
 *
__§c
, 
size_t
 
__n
,

168 
__lo€Ћ_t
 
__l
и
__THROW
 
	`__nЏnuќ
 ((2, 4));

171 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__cЏ°
 *
__s
)

174 
__THROW
 
__©МibuЛ_mЃloc__
 
	`__nЏnuќ
 ((1));

180 #iа
defЪed
 
__USE_XOPEN2K8


181 *
	$°Їdup
 (
__cЏ°
 *
__°rЪg
, 
size_t
 
__n
)

182 
__THROW
 
__©МibuЛ_mЃloc__
 
	`__nЏnuќ
 ((1));

185 #iа
defЪed
 
__USE_GNU
 && defЪed 
__GNUC__


187 
	#°rduЈ
(
s
) \

188 (
__exЛnsiЏ__
 \

190 
__cЏ°
 *
__ёd
 = (
s
); \

191 
size_t
 
__Ћn
 = 
	`°ЊТ
 (
__ёd
) + 1; \

192 *
__√w
 = (*и
	`__buЮtЪ_Ѓlo€
 (
__Ћn
); \

193 (*и
	`memэy
 (
__√w
, 
__ёd
, 
__Ћn
); \

194 
	}
}))

	)

197 
	#°ЇduЈ
(
s
, 
n
) \

198 (
__exЛnsiЏ__
 \

200 
__cЏ°
 *
__ёd
 = (
s
); \

201 
size_t
 
__Ћn
 = 
	`°ЇЋn
 (
__ёd
, (
n
)); \

202 *
__√w
 = (*и
	`__buЮtЪ_Ѓlo€
 (
__Ћn
 + 1); \

203 
__√w
[
__Ћn
] = '\0'; \

204 (*и
	`memэy
 (
__√w
, 
__ёd
, 
__Ћn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"и
__©МibuЛ_puї__
 
__nЏnuќ
 ((1));

215 
__cЏ°
 *
°rchr
 (__cЏ° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"и
__©МibuЛ_puї__
 
__nЏnuќ
 ((1));

218 #ifdeа
__OPTIMIZE__


219 
__exЛЇ_Ѓways_ЪlЪe
 *

220 
°rchr
 (*
__s
, 
__c
и
	g__THROW


222  
__buЮtЪ_°rchr
 (
__s
, 
__c
);

225 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

226 
°rchr
 (
__cЏ°
 *
__s
, 
__c
и
	g__THROW


228  
__buЮtЪ_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__cЏ°
 *
__s
, 
__c
)

234 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

237 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°Љchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°Љchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

242 
__cЏ°
 *
	`°Љchr
 (__cЏ° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°Љchr"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

245 #ifdeа
__OPTIMIZE__


246 
__exЛЇ_Ѓways_ЪlЪe
 *

247 
	`°Љchr
 (*
__s
, 
__c
и
__THROW


249  
	`__buЮtЪ_°Љchr
 (
__s
, 
__c
);

252 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

253 
	`°Љchr
 (
__cЏ°
 *
__s
, 
__c
и
__THROW


255  
	`__buЮtЪ_°Љchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°Љchr
 (
__cЏ°
 *
__s
, 
__c
)

261 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifdeа
__USE_GNU


268 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rchЇul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rchЇul"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

271 "C++" 
__cЏ°
 *
	$°rchЇul
 (
__cЏ°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rchЇul"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

274 *
	$°rchЇul
 (
__cЏ°
 *
__s
, 
__c
)

275 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__cЏ°
 *
__s
, __cЏ° *
__їjeщ
)

283 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__cЏ°
 *
__s
, __cЏ° *
__acы±
)

287 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

289 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°љbrk
 (*
__s
, 
__cЏ°
 *
__acы±
)

293 
__THROW
 
	`__asm
 ("°љbrk"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

294 
__cЏ°
 *
	`°љbrk
 (__cЏ° *
__s
, __cЏ° *
__acы±
)

295 
__THROW
 
	`__asm
 ("°љbrk"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

297 #ifdeа
__OPTIMIZE__


298 
__exЛЇ_Ѓways_ЪlЪe
 *

299 
	`°љbrk
 (*
__s
, 
__cЏ°
 *
__acы±
и
__THROW


301  
	`__buЮtЪ_°љbrk
 (
__s
, 
__acы±
);

304 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

305 
	`°љbrk
 (
__cЏ°
 *
__s
, __cЏ° *
__acы±
и
__THROW


307  
	`__buЮtЪ_°љbrk
 (
__s
, 
__acы±
);

310 
	}
}

312 *
	$°љbrk
 (
__cЏ°
 *
__s
, __cЏ° *
__acы±
)

313 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

316 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__cЏ°
 *
__√edЋ
)

320 
__THROW
 
	`__asm
 ("°r°r"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

321 
__cЏ°
 *
	`°r°r
 (__cЏ° *
__hay°ack
,

322 
__cЏ°
 *
__√edЋ
)

323 
__THROW
 
	`__asm
 ("°r°r"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

325 #ifdeа
__OPTIMIZE__


326 
__exЛЇ_Ѓways_ЪlЪe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__cЏ°
 *
__√edЋ
и
__THROW


329  
	`__buЮtЪ_°r°r
 (
__hay°ack
, 
__√edЋ
);

332 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

333 
	`°r°r
 (
__cЏ°
 *
__hay°ack
, __cЏ° *
__√edЋ
и
__THROW


335  
	`__buЮtЪ_°r°r
 (
__hay°ack
, 
__√edЋ
);

338 
	}
}

340 *
	$°r°r
 (
__cЏ°
 *
__hay°ack
, __cЏ° *
__√edЋ
)

341 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

346 *
	$°єok
 (*
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__dЦim
)

347 
__THROW
 
	`__nЏnuќ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°єok_r
 (*
__ї°riщ
 
__s
,

353 
__cЏ°
 *
__ї°riщ
 
__dЦim
,

354 **
__ї°riщ
 
__Іve_±r
)

355 
__THROW
 
	`__nЏnuќ
 ((2, 3));

356 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


357 *
	$°єok_r
 (*
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__dЦim
,

358 **
__ї°riщ
 
__Іve_±r
)

359 
__THROW
 
	`__nЏnuќ
 ((2, 3));

362 #ifdeа
__USE_GNU


364 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°r€£°r
 (*
__hay°ack
, 
__cЏ°
 *
__√edЋ
)

366 
__THROW
 
	`__asm
 ("°r€£°r"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

367 "C++" 
__cЏ°
 *
	$°r€£°r
 (
__cЏ°
 *
__hay°ack
,

368 
__cЏ°
 *
__√edЋ
)

369 
__THROW
 
	`__asm
 ("°r€£°r"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

371 *
	$°r€£°r
 (
__cЏ°
 *
__hay°ack
, __cЏ° *
__√edЋ
)

372 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

376 #ifdeа
__USE_GNU


380 *
	$memmem
 (
__cЏ°
 *
__hay°ack
, 
size_t
 
__hay°ackЋn
,

381 
__cЏ°
 *
__√edЋ
, 
size_t
 
__√edЋЋn
)

382 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 3));

386 *
	$__mempэy
 (*
__ї°riщ
 
__de°
,

387 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__nЏnuќ
 ((1, 2));

389 *
	$mempэy
 (*
__ї°riщ
 
__de°
,

390 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__nЏnuќ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°ЊТ
 (
__cЏ°
 *
__s
)

398 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°ЇЋn
 (
__cЏ°
 *
__°rЪg
, 
size_t
 
__maxЋn
)

405 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°їЉ№
 (
__ФЇum
и
__THROW
;

412 
__END_NAMESPACE_STD


413 #iа
defЪed
 
__USE_XOPEN2K
 || defЪed 
__USE_MISC


421 #iа
defЪed
 
__USE_XOPEN2K
 && !defЪed 
__USE_GNU


424 #ifdeа
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°їЉ№_r
,

426 (
__ФЇum
, *
__buf
, 
size_t
 
__buжТ
),

427 
__xpg_°їЉ№_r
и
	`__nЏnuќ
 ((2));

429 
	$__xpg_°їЉ№_r
 (
__ФЇum
, *
__buf
, 
size_t
 
__buжТ
)

430 
__THROW
 
	`__nЏnuќ
 ((2));

431 
	#°їЉ№_r
 
__xpg_°їЉ№_r


	)

436 *
	$°їЉ№_r
 (
__ФЇum
, *
__buf
, 
size_t
 
__buжТ
)

437 
__THROW
 
	`__nЏnuќ
 ((2));

441 #ifdeа
__USE_XOPEN2K8


443 *
	$°їЉ№_l
 (
__ФЇum
, 
__lo€Ћ_t
 
__l
и
__THROW
;

449 
	$__bzФo
 (*
__s
, 
size_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1));

451 #ifdeа
__USE_BSD


453 
	$bcЁy
 (
__cЏ°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__nЏnuќ
 ((1, 2));

457 
	$bzФo
 (*
__s
, 
size_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1));

460 
	$bcmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

464 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`Ъdex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("Ъdex"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

469 
__cЏ°
 *
	`Ъdex
 (__cЏ° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("Ъdex"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

472 #iа
defЪed
 
__OPTIMIZE__
 && !defЪed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exЛЇ_Ѓways_ЪlЪe
 *

474 
	`Ъdex
 (*
__s
, 
__c
и
__THROW


476  
	`__buЮtЪ_Ъdex
 (
__s
, 
__c
);

479 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

480 
	`Ъdex
 (
__cЏ°
 *
__s
, 
__c
и
__THROW


482  
	`__buЮtЪ_Ъdex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$Ъdex
 (
__cЏ°
 *
__s
, 
__c
)

488 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

492 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rЪdex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rЪdex"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

497 
__cЏ°
 *
	`rЪdex
 (__cЏ° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rЪdex"и
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

500 #iа
defЪed
 
__OPTIMIZE__
 && !defЪed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exЛЇ_Ѓways_ЪlЪe
 *

502 
	`rЪdex
 (*
__s
, 
__c
и
__THROW


504  
	`__buЮtЪ_rЪdex
 (
__s
, 
__c
);

507 
__exЛЇ_Ѓways_ЪlЪe
 
__cЏ°
 *

508 
	`rЪdex
 (
__cЏ°
 *
__s
, 
__c
и
__THROW


510  
	`__buЮtЪ_rЪdex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rЪdex
 (
__cЏ°
 *
__s
, 
__c
)

516 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1));

521 
	$ffs
 (
__i
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

527 #ifdeа
__GNUC__


528 
__exЛnsiЏ__
 
	$ff¶l
 (
__ќ
)

529 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

534 
	$°r€£cmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
)

535 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

538 
	$°Ї€£cmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°r€£cmp_l
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
,

546 
__lo€Ћ_t
 
__loc
)

547 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2, 3));

549 
	$°Ї€£cmp_l
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
,

550 
size_t
 
__n
, 
__lo€Ћ_t
 
__loc
)

551 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ї°riщ
 
__°rЪgp
,

558 
__cЏ°
 *
__ї°riщ
 
__dЦim
)

559 
__THROW
 
	`__nЏnuќ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
и
__THROW
;

567 *
	$__°pэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
)

568 
__THROW
 
	`__nЏnuќ
 ((1, 2));

569 *
	$°pэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
)

570 
__THROW
 
	`__nЏnuќ
 ((1, 2));

574 *
	$__°≤эy
 (*
__ї°riщ
 
__de°
,

575 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__nЏnuќ
 ((1, 2));

577 *
	$°≤эy
 (*
__ї°riщ
 
__de°
,

578 
__cЏ°
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__nЏnuќ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvФscmp
 (
__cЏ°
 *
__s1
, __cЏ° *
__s2
)

585 
__THROW
 
__©МibuЛ_puї__
 
	`__nЏnuќ
 ((1, 2));

588 *
	$°rдy
 (*
__°rЪg
и
__THROW
 
	`__nЏnuќ
 ((1));

591 *
	$memдob
 (*
__s
, 
size_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1));

593 #iвdeа
ba£«me


598 #ifdeа
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fЮТame
)

600 
__THROW
 
	`__asm
 ("ba£«me"и
	`__nЏnuќ
 ((1));

601 "C++" 
__cЏ°
 *
	$ba£«me
 (
__cЏ°
 *
__fЮТame
)

602 
__THROW
 
	`__asm
 ("ba£«me"и
	`__nЏnuќ
 ((1));

604 *
	$ba£«me
 (
__cЏ°
 *
__fЮТame
и
__THROW
 
	`__nЏnuќ
 ((1));

610 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

611 #iа
defЪed
 
__OPTIMIZE__
 && !defЪed 
__OPTIMIZE_SIZE__
 \

612 && !
defЪed
 
__NO_INLINE__
 && !defЪed 
__эlu•lus


632 
	~<bЩs/°rЪg.h
>

635 
	~<bЩs/°rЪg2.h
>

638 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


640 
	~<bЩs/°rЪg3.h
>

644 
__END_DECLS


	@/usr/include/sys/epoll.h

19 #iвdef 
_SYS_EPOLL_H


20 
	#_SYS_EPOLL_H
 1

	)

22 
	~<°dЪt.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<bЩs/sig£t.h
>

28 #iвdeа
__sig£t_t_defЪed


29 
	#__sig£t_t_defЪed


	)

30 
__sig£t_t
 
	tsig£t_t
;

37 
	mEPOLL_CLOEXEC
 = 02000000,

38 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

39 
	mEPOLL_NONBLOCK
 = 04000

40 
	#EPOLL_NONBLOCK
 
EPOLL_NONBLOCK


	)

44 
	eEPOLL_EVENTS


46 
	mEPOLLIN
 = 0x001,

47 
	#EPOLLIN
 
EPOLLIN


	)

48 
	mEPOLLPRI
 = 0x002,

49 
	#EPOLLPRI
 
EPOLLPRI


	)

50 
	mEPOLLOUT
 = 0x004,

51 
	#EPOLLOUT
 
EPOLLOUT


	)

52 
	mEPOLLRDNORM
 = 0x040,

53 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

54 
	mEPOLLRDBAND
 = 0x080,

55 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

56 
	mEPOLLWRNORM
 = 0x100,

57 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

58 
	mEPOLLWRBAND
 = 0x200,

59 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

60 
	mEPOLLMSG
 = 0x400,

61 
	#EPOLLMSG
 
EPOLLMSG


	)

62 
	mEPOLLERR
 = 0x008,

63 
	#EPOLLERR
 
EPOLLERR


	)

64 
	mEPOLLHUP
 = 0x010,

65 
	#EPOLLHUP
 
EPOLLHUP


	)

66 
	mEPOLLRDHUP
 = 0x2000,

67 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

68 
	mEPOLLONESHOT
 = (1 << 30),

69 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

70 
	mEPOLLET
 = (1 << 31)

71 
	#EPOLLET
 
EPOLLET


	)

76 
	#EPOLL_CTL_ADD
 1

	)

77 
	#EPOLL_CTL_DEL
 2

	)

78 
	#EPOLL_CTL_MOD
 3

	)

81 
	uХёl_d©a


83 *
	m±r
;

84 
	mfd
;

85 
uЪt32_t
 
	mu32
;

86 
uЪt64_t
 
	mu64
;

87 } 
	tХёl_d©a_t
;

89 
	sХёl_evТt


91 
uЪt32_t
 
	mevТts
;

92 
Хёl_d©a_t
 
	md©a
;

93 } 
__©МibuЛ__
 ((
__Јcked__
));

96 
__BEGIN_DECLS


102 
	$Хёl_ьЧЛ
 (
__size
и
__THROW
;

106 
	$Хёl_ьЧЛ1
 (
__жags
и
__THROW
;

115 
	$Хёl_щl
 (
__Хfd
, 
__Ё
, 
__fd
,

116 
Хёl_evТt
 *
__evТt
и
__THROW
;

129 
	`Хёl_waЩ
 (
__Хfd
, 
Хёl_evТt
 *
__evТts
,

130 
__maxevТts
, 
__timeout
);

138 
	`Хёl_pwaЩ
 (
__Хfd
, 
Хёl_evТt
 *
__evТts
,

139 
__maxevТts
, 
__timeout
,

140 
__cЏ°
 
__sig£t_t
 *
__ss
);

142 
__END_DECLS


	@/usr/include/sys/eventfd.h

19 #iвdef 
_SYS_EVENTFD_H


20 
	#_SYS_EVENTFD_H
 1

	)

22 
	~<°dЪt.h
>

26 
uЪt64_t
 
	tevТtfd_t
;

31 
	mEFD_SEMAPHORE
 = 1,

32 
	#EFD_SEMAPHORE
 
EFD_SEMAPHORE


	)

33 
	mEFD_CLOEXEC
 = 02000000,

34 
	#EFD_CLOEXEC
 
EFD_CLOEXEC


	)

35 
	mEFD_NONBLOCK
 = 04000

36 
	#EFD_NONBLOCK
 
EFD_NONBLOCK


	)

40 
__BEGIN_DECLS


44 
	$evТtfd
 (
__couЅ
, 
__жags
и
__THROW
;

47 
	`evТtfd_їad
 (
__fd
, 
evТtfd_t
 *
__vЃue
);

50 
	`evТtfd_wrЩe
 (
__fd
, 
evТtfd_t
 
__vЃue
);

52 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #iвdef 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<г©uїs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bЩs/ioщls.h
>

30 
	~<bЩs/ioщl-ty≥s.h
>

37 
	~<sys/Йydeзu…s.h
>

42 
	$ioщl
 (
__fd
, 
__їque°
, ...и
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #iвdef 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<г©uїs.h
>

24 
	~<bЩs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #iвdeа
__off_t_defЪed


29 #iвdeа
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_defЪed


	)

37 #iвdeа
__mode_t_defЪed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_defЪed


	)

42 
	~<bЩs/mm™.h
>

45 
	#MAP_FAILED
 ((*и-1)

	)

47 
	g__BEGIN_DECLS


57 #iвdeа
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Ћn
, 
__іў
,

59 
__жags
, 
__fd
, 
__off_t
 
__off£t
и
__THROW
;

61 #ifdeа
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Ћn
, 
__іў
,

64 
__жags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifdeа
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Ћn
, 
__іў
,

72 
__жags
, 
__fd
, 
__off64_t
 
__off£t
и
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Ћn
и
__THROW
;

82 
	$mіўeщ
 (*
__addr
, 
size_t
 
__Ћn
, 
__іў
и
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Ћn
, 
__жags
);

92 #ifdeа
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Ћn
, 
__adviы
и
__THROW
;

97 #ifdeа
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Ћn
, 
__adviы
и
__THROW
;

104 
	$mlock
 (
__cЏ°
 *
__addr
, 
size_t
 
__Ћn
и
__THROW
;

107 
	$mu∆ock
 (
__cЏ°
 *
__addr
, 
size_t
 
__Ћn
и
__THROW
;

112 
	$mlockЃl
 (
__жags
и
__THROW
;

116 
	$mu∆ockЃl
 (и
__THROW
;

118 #ifdeа
__USE_MISC


124 
	$mЪc№e
 (*
__°ђt
, 
size_t
 
__Ћn
, *
__vec
)

125 
__THROW
;

128 #ifdeа
__USE_GNU


134 *
	$mїm≠
 (*
__addr
, 
size_t
 
__ёd_Ћn
, size_И
__√w_Ћn
,

135 
__жags
, ...и
__THROW
;

139 
	$їm≠_fЮe_Јges
 (*
__°ђt
, 
size_t
 
__size
, 
__іў
,

140 
size_t
 
__pgoff
, 
__жags
и
__THROW
;

145 
	`shm_ЁТ
 (
__cЏ°
 *
__«me
, 
__oжag
, 
mode_t
 
__mode
);

148 
	`shm_u∆Ъk
 (
__cЏ°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/param.h

19 #iвdeа
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #iвdeа
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limЩs.h
>

27 
	~<lЪux/limЩs.h
>

28 
	~<lЪux/Јњm.h
>

31 #iвdeа
__undef_ARG_MAX


32 #undeа
ARG_MAX


33 #undeа
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #iвdef 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbЩ
(
a
,
i
и(„)[(i)/
NBBY
] |р1<<((i)%NBBY))

	)

56 
	#юrbЩ
(
a
,
i
и(„)[(i)/
NBBY
] &р~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
и(„)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#isюr
(
a
,
i
и((„)[(i)/
NBBY
] & (1<<((i)%NBBY))и=р0)

	)

61 #iвdeа
howm™y


62 
	#howm™y
(
x
, 
y
и(((xи+ ((yи- 1)и/ (y))

	)

64 #ifdeа
__GNUC__


65 
	#roundup
(
x
, 
y
и(
	`__buЮtЪ_cЏ°™t_p
 (yи&& 
	`powФof2
 (y) \

66 ? (((
x
и+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
и+ ((
y
и- 1)и/ (y)и* (y)))

	)

69 
	#roundup
(
x
, 
y
и((((xи+ ((yи- 1)и/ (y)и* (y))

	)

71 
	#powФof2
(
x
и((((xи- 1и& (x)и=р0)

	)

74 
	#MIN
(
a
,
b
и((„)<(b))?„):(b))

	)

75 
	#MAX
(
a
,
b
и((„)>(b))?„):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/queue.h

32 #iвdef 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fЬ°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hЧd
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
Ћ_√xt
; \

95 
ty≥
 **
Ћ_іev
; \

96 }

	)

101 
	#LIST_INIT
(
hЧd
) do { \

102 (
hЧd
)->
lh_fЬ°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°Цm
, 
Цm
, 
fЫld
) do { \

106 iа(((
Цm
)->
fЫld
.
Ћ_√xt
 = (
li°Цm
)->fЫld.Ћ_√xtи!р
NULL
) \

107 (
li°Цm
)->
fЫld
.
Ћ_√xt
->fЫld.
Ћ_іev
 = \

108 &(
Цm
)->
fЫld
.
Ћ_√xt
; \

109 (
li°Цm
)->
fЫld
.
Ћ_√xt
 = (
Цm
); \

110 (
Цm
)->
fЫld
.
Ћ_іev
 = &(
li°Цm
)->fЫld.
Ћ_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°Цm
, 
Цm
, 
fЫld
) do { \

114 (
Цm
)->
fЫld
.
Ћ_іev
 = (
li°Цm
)->field.le_prev; \

115 (
Цm
)->
fЫld
.
Ћ_√xt
 = (
li°Цm
); \

116 *(
li°Цm
)->
fЫld
.
Ћ_іev
 = (
Цm
); \

117 (
li°Цm
)->
fЫld
.
Ћ_іev
 = &(
Цm
)->fЫld.
Ћ_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

121 iа(((
Цm
)->
fЫld
.
Ћ_√xt
 = (
hЧd
)->
lh_fЬ°
и!р
NULL
) \

122 (
hЧd
)->
lh_fЬ°
->
fЫld
.
Ћ_іev
 = &(
Цm
)->fЫld.
Ћ_√xt
;\

123 (
hЧd
)->
lh_fЬ°
 = (
Цm
); \

124 (
Цm
)->
fЫld
.
Ћ_іev
 = &(
hЧd
)->
lh_fЬ°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
Цm
, 
fЫld
) do { \

128 iа((
Цm
)->
fЫld
.
Ћ_√xt
 !р
NULL
) \

129 (
Цm
)->
fЫld
.
Ћ_√xt
->fЫld.
Ћ_іev
 = \

130 (
Цm
)->
fЫld
.
Ћ_іev
; \

131 *(
Цm
)->
fЫld
.
Ћ_іev
 = (Цm)->fЫld.
Ћ_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

135 (
vђ
ир((
hЧd
)->
lh_fЬ°
); \

136 (
vђ
); \

137 (
vђ
ир((vђ)->
fЫld
.
Ћ_√xt
))

	)

142 
	#LIST_EMPTY
(
hЧd
и((hЧd)->
lh_fЬ°
 =р
NULL
)

	)

143 
	#LIST_FIRST
(
hЧd
и((hЧd)->
lh_fЬ°
)

	)

144 
	#LIST_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
Ћ_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fЬ°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hЧd
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hЧd
) do { \

167 (
hЧd
)->
¶h_fЬ°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°Цm
, 
Цm
, 
fЫld
) do { \

171 (
Цm
)->
fЫld
.
¶e_√xt
 = (
¶i°Цm
)->field.sle_next; \

172 (
¶i°Цm
)->
fЫld
.
¶e_√xt
 = (
Цm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

176 (
Цm
)->
fЫld
.
¶e_√xt
 = (
hЧd
)->
¶h_fЬ°
; \

177 (
hЧd
)->
¶h_fЬ°
 = (
Цm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hЧd
, 
fЫld
) do { \

181 (
hЧd
)->
¶h_fЬ°
 = (hЧd)->¶h_fЬ°->
fЫld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hЧd
, 
Цm
, 
ty≥
, 
fЫld
) do { \

185 iа((
hЧd
)->
¶h_fЬ°
 =р(
Цm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hЧd
), 
fЫld
); \

189 
ty≥
 *
cuїlm
 = (
hЧd
)->
¶h_fЬ°
; \

190 
cuїlm
->
fЫld
.
¶e_√xt
 !р(
Цm
)) \

191 
cuїlm
 = cuїlm->
fЫld
.
¶e_√xt
; \

192 
cuїlm
->
fЫld
.
¶e_√xt
 = \

193 
cuїlm
->
fЫld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

198 (
vђ
ир(
hЧd
)->
¶h_fЬ°
; (vђ); (vђир(vђ)->
fЫld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hЧd
и((hЧd)->
¶h_fЬ°
 =р
NULL
)

	)

204 
	#SLIST_FIRST
(
hЧd
и((hЧd)->
¶h_fЬ°
)

	)

205 
	#SLIST_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fЬ°
; \

214 
ty≥
 **
°qh_ѕ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hЧd
) \

218 { 
NULL
, &(
hЧd
).
°qh_fЬ°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hЧd
) do { \

229 (
hЧd
)->
°qh_fЬ°
 = 
NULL
; \

230 (
hЧd
)->
°qh_ѕ°
 = &(hЧd)->
°qh_fЬ°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

234 iа(((
Цm
)->
fЫld
.
°qe_√xt
 = (
hЧd
)->
°qh_fЬ°
и=р
NULL
) \

235 (
hЧd
)->
°qh_ѕ°
 = &(
Цm
)->
fЫld
.
°qe_√xt
; \

236 (
hЧd
)->
°qh_fЬ°
 = (
Цm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

240 (
Цm
)->
fЫld
.
°qe_√xt
 = 
NULL
; \

241 *(
hЧd
)->
°qh_ѕ°
 = (
Цm
); \

242 (
hЧd
)->
°qh_ѕ°
 = &(
Цm
)->
fЫld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

246 iа(((
Цm
)->
fЫld
.
°qe_√xt
 = (
li°Цm
)->fЫld.°qe_√xtи=р
NULL
)\

247 (
hЧd
)->
°qh_ѕ°
 = &(
Цm
)->
fЫld
.
°qe_√xt
; \

248 (
li°Цm
)->
fЫld
.
°qe_√xt
 = (
Цm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hЧd
, 
fЫld
) do { \

252 iа(((
hЧd
)->
°qh_fЬ°
 = (hЧd)->°qh_fЬ°->
fЫld
.
°qe_√xt
и=р
NULL
) \

253 (
hЧd
)->
°qh_ѕ°
 = &(hЧd)->
°qh_fЬ°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hЧd
, 
Цm
, 
ty≥
, 
fЫld
) do { \

257 iа((
hЧd
)->
°qh_fЬ°
 =р(
Цm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hЧd
), 
fЫld
); \

260 
ty≥
 *
cuїlm
 = (
hЧd
)->
°qh_fЬ°
; \

261 
cuїlm
->
fЫld
.
°qe_√xt
 !р(
Цm
)) \

262 
cuїlm
 = cuїlm->
fЫld
.
°qe_√xt
; \

263 iа((
cuїlm
->
fЫld
.
°qe_√xt
 = \

264 
cuїlm
->
fЫld
.
°qe_√xt
->fЫld.°qe_√xtи=р
NULL
) \

265 (
hЧd
)->
°qh_ѕ°
 = &(
cuїlm
)->
fЫld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

270 (
vђ
ир((
hЧd
)->
°qh_fЬ°
); \

271 (
vђ
); \

272 (
vђ
ир((vђ)->
fЫld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hЧd1
, 
hЧd2
) do { \

275 iа(!
	`STAILQ_EMPTY
((
hЧd2
))) { \

276 *(
hЧd1
)->
°qh_ѕ°
 = (
hЧd2
)->
°qh_fЬ°
; \

277 (
hЧd1
)->
°qh_ѕ°
 = (
hЧd2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hЧd2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hЧd
и((hЧd)->
°qh_fЬ°
 =р
NULL
)

	)

286 
	#STAILQ_FIRST
(
hЧd
и((hЧd)->
°qh_fЬ°
)

	)

287 
	#STAILQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fЬ°
; \

296 
ty≥
 **
sqh_ѕ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hЧd
) \

300 { 
NULL
, &(
hЧd
).
sqh_fЬ°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hЧd
) do { \

311 (
hЧd
)->
sqh_fЬ°
 = 
NULL
; \

312 (
hЧd
)->
sqh_ѕ°
 = &(hЧd)->
sqh_fЬ°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

316 iа(((
Цm
)->
fЫld
.
sqe_√xt
 = (
hЧd
)->
sqh_fЬ°
и=р
NULL
) \

317 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

318 (
hЧd
)->
sqh_fЬ°
 = (
Цm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

322 (
Цm
)->
fЫld
.
sqe_√xt
 = 
NULL
; \

323 *(
hЧd
)->
sqh_ѕ°
 = (
Цm
); \

324 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

328 iа(((
Цm
)->
fЫld
.
sqe_√xt
 = (
li°Цm
)->fЫld.sqe_√xtи=р
NULL
)\

329 (
hЧd
)->
sqh_ѕ°
 = &(
Цm
)->
fЫld
.
sqe_√xt
; \

330 (
li°Цm
)->
fЫld
.
sqe_√xt
 = (
Цm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hЧd
, 
fЫld
) do { \

334 iа(((
hЧd
)->
sqh_fЬ°
 = (hЧd)->sqh_fЬ°->
fЫld
.
sqe_√xt
и=р
NULL
) \

335 (
hЧd
)->
sqh_ѕ°
 = &(hЧd)->
sqh_fЬ°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hЧd
, 
Цm
, 
ty≥
, 
fЫld
) do { \

339 iа((
hЧd
)->
sqh_fЬ°
 =р(
Цm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hЧd
), 
fЫld
); \

342 
ty≥
 *
cuїlm
 = (
hЧd
)->
sqh_fЬ°
; \

343 
cuїlm
->
fЫld
.
sqe_√xt
 !р(
Цm
)) \

344 
cuїlm
 = cuїlm->
fЫld
.
sqe_√xt
; \

345 iа((
cuїlm
->
fЫld
.
sqe_√xt
 = \

346 
cuїlm
->
fЫld
.
sqe_√xt
->fЫld.sqe_√xtи=р
NULL
) \

347 (
hЧd
)->
sqh_ѕ°
 = &(
cuїlm
)->
fЫld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

352 (
vђ
ир((
hЧd
)->
sqh_fЬ°
); \

353 (
vђ
); \

354 (
vђ
ир((vђ)->
fЫld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hЧd
и((hЧd)->
sqh_fЬ°
 =р
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hЧd
и((hЧd)->
sqh_fЬ°
)

	)

361 
	#SIMPLEQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quЃ
) \

368 
	s«me
 { \

369 
quЃ
 
ty≥
 *
tqh_fЬ°
; \

370 
quЃ
 
ty≥
 *quЃ *
tqh_ѕ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
и
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hЧd
) \

375 { 
NULL
, &(
hЧd
).
tqh_fЬ°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quЃ
) \

379 
quЃ
 
ty≥
 *
tqe_√xt
; \

380 
quЃ
 
ty≥
 *quЃ *
tqe_іev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
и
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hЧd
) do { \

388 (
hЧd
)->
tqh_fЬ°
 = 
NULL
; \

389 (
hЧd
)->
tqh_ѕ°
 = &(hЧd)->
tqh_fЬ°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

393 iа(((
Цm
)->
fЫld
.
tqe_√xt
 = (
hЧd
)->
tqh_fЬ°
и!р
NULL
) \

394 (
hЧd
)->
tqh_fЬ°
->
fЫld
.
tqe_іev
 = \

395 &(
Цm
)->
fЫld
.
tqe_√xt
; \

397 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

398 (
hЧd
)->
tqh_fЬ°
 = (
Цm
); \

399 (
Цm
)->
fЫld
.
tqe_іev
 = &(
hЧd
)->
tqh_fЬ°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

403 (
Цm
)->
fЫld
.
tqe_√xt
 = 
NULL
; \

404 (
Цm
)->
fЫld
.
tqe_іev
 = (
hЧd
)->
tqh_ѕ°
; \

405 *(
hЧd
)->
tqh_ѕ°
 = (
Цm
); \

406 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

410 iа(((
Цm
)->
fЫld
.
tqe_√xt
 = (
li°Цm
)->fЫld.tqe_√xtи!р
NULL
)\

411 (
Цm
)->
fЫld
.
tqe_√xt
->fЫld.
tqe_іev
 = \

412 &(
Цm
)->
fЫld
.
tqe_√xt
; \

414 (
hЧd
)->
tqh_ѕ°
 = &(
Цm
)->
fЫld
.
tqe_√xt
; \

415 (
li°Цm
)->
fЫld
.
tqe_√xt
 = (
Цm
); \

416 (
Цm
)->
fЫld
.
tqe_іev
 = &(
li°Цm
)->fЫld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°Цm
, 
Цm
, 
fЫld
) do { \

420 (
Цm
)->
fЫld
.
tqe_іev
 = (
li°Цm
)->field.tqe_prev; \

421 (
Цm
)->
fЫld
.
tqe_√xt
 = (
li°Цm
); \

422 *(
li°Цm
)->
fЫld
.
tqe_іev
 = (
Цm
); \

423 (
li°Цm
)->
fЫld
.
tqe_іev
 = &(
Цm
)->fЫld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hЧd
, 
Цm
, 
fЫld
) do { \

427 iа(((
Цm
)->
fЫld
.
tqe_√xt
и!р
NULL
) \

428 (
Цm
)->
fЫld
.
tqe_√xt
->fЫld.
tqe_іev
 = \

429 (
Цm
)->
fЫld
.
tqe_іev
; \

431 (
hЧd
)->
tqh_ѕ°
 = (
Цm
)->
fЫld
.
tqe_іev
; \

432 *(
Цm
)->
fЫld
.
tqe_іev
 = (Цm)->fЫld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

436 (
vђ
ир((
hЧd
)->
tqh_fЬ°
); \

437 (
vђ
); \

438 (
vђ
ир((vђ)->
fЫld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
vђ
, 
hЧd
, 
hЧd«me
, 
fЫld
) \

441 (
vђ
ир(*(((
hЧd«me
 *)((
hЧd
)->
tqh_ѕ°
))->tqh_last)); \

442 (
vђ
); \

443 (
vђ
ир(*(((
hЧd«me
 *)((vђ)->
fЫld
.
tqe_іev
))->
tqh_ѕ°
)))

	)

445 
	#TAILQ_CONCAT
(
hЧd1
, 
hЧd2
, 
fЫld
) do { \

446 iа(!
	`TAILQ_EMPTY
(
hЧd2
)) { \

447 *(
hЧd1
)->
tqh_ѕ°
 = (
hЧd2
)->
tqh_fЬ°
; \

448 (
hЧd2
)->
tqh_fЬ°
->
fЫld
.
tqe_іev
 = (
hЧd1
)->
tqh_ѕ°
; \

449 (
hЧd1
)->
tqh_ѕ°
 = (
hЧd2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hЧd2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hЧd
и((hЧd)->
tqh_fЬ°
 =р
NULL
)

	)

458 
	#TAILQ_FIRST
(
hЧd
и((hЧd)->
tqh_fЬ°
)

	)

459 
	#TAILQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hЧd
, 
hЧd«me
) \

462 (*(((
hЧd«me
 *)((
hЧd
)->
tqh_ѕ°
))->tqh_ѕ°))

	)

463 
	#TAILQ_PREV
(
Цm
, 
hЧd«me
, 
fЫld
) \

464 (*(((
hЧd«me
 *)((
Цm
)->
fЫld
.
tqe_іev
))->
tqh_ѕ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fЬ°
; \

473 
ty≥
 *
cqh_ѕ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hЧd
) \

477 { (*)&
hЧd
, (*)&hЧd }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_іev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hЧd
) do { \

489 (
hЧd
)->
cqh_fЬ°
 = (*)(head); \

490 (
hЧd
)->
cqh_ѕ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

494 (
Цm
)->
fЫld
.
cqe_√xt
 = (
li°Цm
)->field.cqe_next; \

495 (
Цm
)->
fЫld
.
cqe_іev
 = (
li°Цm
); \

496 iа((
li°Цm
)->
fЫld
.
cqe_√xt
 =р(*)(
hЧd
)) \

497 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

499 (
li°Цm
)->
fЫld
.
cqe_√xt
->fЫld.
cqe_іev
 = (
Цm
); \

500 (
li°Цm
)->
fЫld
.
cqe_√xt
 = (
Цm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hЧd
, 
li°Цm
, 
Цm
, 
fЫld
) do { \

504 (
Цm
)->
fЫld
.
cqe_√xt
 = (
li°Цm
); \

505 (
Цm
)->
fЫld
.
cqe_іev
 = (
li°Цm
)->field.cqe_prev; \

506 iа((
li°Цm
)->
fЫld
.
cqe_іev
 =р(*)(
hЧd
)) \

507 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

509 (
li°Цm
)->
fЫld
.
cqe_іev
->fЫld.
cqe_√xt
 = (
Цm
); \

510 (
li°Цm
)->
fЫld
.
cqe_іev
 = (
Цm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hЧd
, 
Цm
, 
fЫld
) do { \

514 (
Цm
)->
fЫld
.
cqe_√xt
 = (
hЧd
)->
cqh_fЬ°
; \

515 (
Цm
)->
fЫld
.
cqe_іev
 = (*)(
hЧd
); \

516 iа((
hЧd
)->
cqh_ѕ°
 == (*)(head)) \

517 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

519 (
hЧd
)->
cqh_fЬ°
->
fЫld
.
cqe_іev
 = (
Цm
); \

520 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hЧd
, 
Цm
, 
fЫld
) do { \

524 (
Цm
)->
fЫld
.
cqe_√xt
 = (*)(
hЧd
); \

525 (
Цm
)->
fЫld
.
cqe_іev
 = (
hЧd
)->
cqh_ѕ°
; \

526 iа((
hЧd
)->
cqh_fЬ°
 == (*)(head)) \

527 (
hЧd
)->
cqh_fЬ°
 = (
Цm
); \

529 (
hЧd
)->
cqh_ѕ°
->
fЫld
.
cqe_√xt
 = (
Цm
); \

530 (
hЧd
)->
cqh_ѕ°
 = (
Цm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hЧd
, 
Цm
, 
fЫld
) do { \

534 iа((
Цm
)->
fЫld
.
cqe_√xt
 =р(*)(
hЧd
)) \

535 (
hЧd
)->
cqh_ѕ°
 = (
Цm
)->
fЫld
.
cqe_іev
; \

537 (
Цm
)->
fЫld
.
cqe_√xt
->fЫld.
cqe_іev
 = \

538 (
Цm
)->
fЫld
.
cqe_іev
; \

539 iа((
Цm
)->
fЫld
.
cqe_іev
 =р(*)(
hЧd
)) \

540 (
hЧd
)->
cqh_fЬ°
 = (
Цm
)->
fЫld
.
cqe_√xt
; \

542 (
Цm
)->
fЫld
.
cqe_іev
->fЫld.
cqe_√xt
 = \

543 (
Цm
)->
fЫld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
vђ
, 
hЧd
, 
fЫld
) \

547 (
vђ
ир((
hЧd
)->
cqh_fЬ°
); \

548 (
vђ
и!р(cЏ° *)(
hЧd
); \

549 (
vђ
ир((vђ)->
fЫld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
vђ
, 
hЧd
, 
fЫld
) \

552 (
vђ
ир((
hЧd
)->
cqh_ѕ°
); \

553 (
vђ
и!р(cЏ° *)(
hЧd
); \

554 (
vђ
ир((vђ)->
fЫld
.
cqe_іev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hЧd
и((hЧd)->
cqh_fЬ°
 =р(*)(hЧd))

	)

560 
	#CIRCLEQ_FIRST
(
hЧd
и((hЧd)->
cqh_fЬ°
)

	)

561 
	#CIRCLEQ_LAST
(
hЧd
и((hЧd)->
cqh_ѕ°
)

	)

562 
	#CIRCLEQ_NEXT
(
Цm
, 
fЫld
и(”lm)->fЫld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
Цm
, 
fЫld
и(”lm)->fЫld.
cqe_іev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hЧd
, 
Цm
, 
fЫld
) \

566 (((
Цm
)->
fЫld
.
cqe_√xt
 =р(*)(
hЧd
)) \

567 ? ((
hЧd
)->
cqh_fЬ°
) \

568 : (
Цm
->
fЫld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hЧd
, 
Цm
, 
fЫld
) \

570 (((
Цm
)->
fЫld
.
cqe_іev
 =р(*)(
hЧd
)) \

571 ? ((
hЧd
)->
cqh_ѕ°
) \

572 : (
Цm
->
fЫld
.
cqe_іev
))

	)

	@/usr/include/sys/resource.h

19 #iвdef 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<г©uїs.h
>

25 
	~<bЩs/їsourы.h
>

27 #iвdeа
__id_t_defЪed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_defЪed


	)

32 
	g__BEGIN_DECLS


38 #iа
defЪed
 
__USE_GNU
 && !defЪed 
__эlu•lus


39 
__ЊimЩ_їsourы
 
	t__ЊimЩ_їsourы_t
;

40 
__ruІge_who
 
	t__ruІge_who_t
;

41 
__іi№Щy_which
 
	t__іi№Щy_which_t
;

43 
	t__ЊimЩ_їsourы_t
;

44 
	t__ruІge_who_t
;

45 
	t__іi№Щy_which_t
;

50 #iвdeа
__USE_FILE_OFFSET64


51 
	$gСЊimЩ
 (
__ЊimЩ_їsourы_t
 
__їsourы
,

52 
ЊimЩ
 *
__ЊimЩs
и
__THROW
;

54 #ifdeа
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gСЊimЩ
, (
__ЊimЩ_їsourы_t
 
__їsourы
,

56 
ЊimЩ
 *
__ЊimЩs
), 
gСЊimЩ64
);

58 
	#gСЊimЩ
 
gСЊimЩ64


	)

61 #ifdeа
__USE_LARGEFILE64


62 
	$gСЊimЩ64
 (
__ЊimЩ_їsourы_t
 
__їsourы
,

63 
ЊimЩ64
 *
__ЊimЩs
и
__THROW
;

69 #iвdeа
__USE_FILE_OFFSET64


70 
	$£МlimЩ
 (
__ЊimЩ_їsourы_t
 
__їsourы
,

71 
__cЏ°
 
ЊimЩ
 *
__ЊimЩs
и
__THROW
;

73 #ifdeа
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£МlimЩ
, (
__ЊimЩ_їsourы_t
 
__їsourы
,

75 
__cЏ°
 
ЊimЩ
 *
__ЊimЩs
),

76 
£МlimЩ64
);

78 
	#£МlimЩ
 
£МlimЩ64


	)

81 #ifdeа
__USE_LARGEFILE64


82 
	$£МlimЩ64
 (
__ЊimЩ_їsourы_t
 
__їsourы
,

83 
__cЏ°
 
ЊimЩ64
 *
__ЊimЩs
и
__THROW
;

88 
	$gСruІge
 (
__ruІge_who_t
 
__who
, 
ruІge
 *
__uІge
и
__THROW
;

94 
	$gСіi№Щy
 (
__іi№Щy_which_t
 
__which
, 
id_t
 
__who
и
__THROW
;

98 
	$£Нri№Щy
 (
__іi№Щy_which_t
 
__which
, 
id_t
 
__who
, 
__іio
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #iвdeа
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<г©uїs.h
>

28 
	~<bЩs/ty≥s.h
>

31 
	~<bЩs/£Ћщ.h
>

34 
	~<bЩs/sig£t.h
>

36 #iвdeа
__sig£t_t_defЪed


37 
	#__sig£t_t_defЪed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevЃ


	)

46 
	~<bЩs/time.h
>

48 #iвdeа
__su£cЏds_t_defЪed


49 
__su£cЏds_t
 
	tsu£cЏds_t
;

50 
	#__su£cЏds_t_defЪed


	)

55 
	t__fd_mask
;

58 #undeа
__NFDBITS


59 #undeа
__FDELT


60 #undeа
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
и((dи/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
и((
__fd_mask
и1 << ((dи% 
__NFDBITS
))

	)

71 #ifdeа
__USE_XOPEN


72 
__fd_mask
 
	mfds_bЩs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
и((£t)->
fds_bЩs
)

	)

75 
__fd_mask
 
	m__fds_bЩs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
и((£t)->
__fds_bЩs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifdeа
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£Н
и
	`__FD_SET
 (fd, fd£Н)

	)

94 
	#FD_CLR
(
fd
, 
fd£Н
и
	`__FD_CLR
 (fd, fd£Н)

	)

95 
	#FD_ISSET
(
fd
, 
fd£Н
и
	`__FD_ISSET
 (fd, fd£Н)

	)

96 
	#FD_ZERO
(
fd£Н
и
	`__FD_ZERO
 (fd£Н)

	)

99 
__BEGIN_DECLS


109 
£Ћщ
 (
__nfds
, 
fd_£t
 *
__ї°riщ
 
__їadfds
,

110 
fd_£t
 *
__ї°riщ
 
__wrЩefds
,

111 
fd_£t
 *
__ї°riщ
 
__exы±fds
,

112 
timevЃ
 *
__ї°riщ
 
__timeout
);

114 #ifdeа
__USE_XOPEN2K


121 
p£Ћщ
 (
__nfds
, 
fd_£t
 *
__ї°riщ
 
__їadfds
,

122 
fd_£t
 *
__ї°riщ
 
__wrЩefds
,

123 
fd_£t
 *
__ї°riщ
 
__exы±fds
,

124 cЏ° 
time•ec
 *
__ї°riщ
 
__timeout
,

125 cЏ° 
__sig£t_t
 *
__ї°riщ
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sendfile.h

20 #iвdeа
_SYS_SENDFILE_H


21 
	#_SYS_SENDFILE_H
 1

	)

23 
	~<г©uїs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


33 #iвdeа
__USE_FILE_OFFSET64


34 
ssize_t
 
	$£ndfЮe
 (
__out_fd
, 
__Ъ_fd
, 
off_t
 *
__off£t
,

35 
size_t
 
__couЅ
и
__THROW
;

37 #ifdeа
__REDIRECT_NTH


38 
ssize_t
 
	`__REDIRECT_NTH
 (
£ndfЮe
,

39 (
__out_fd
, 
__Ъ_fd
, 
__off64_t
 *
__off£t
,

40 
size_t
 
__couЅ
), 
£ndfЮe64
);

42 
	#£ndfЮe
 
£ndfЮe64


	)

45 #ifdeа
__USE_LARGEFILE64


46 
ssize_t
 
	$£ndfЮe64
 (
__out_fd
, 
__Ъ_fd
, 
__off64_t
 *
__off£t
,

47 
size_t
 
__couЅ
и
__THROW
;

50 
__END_DECLS


	@/usr/include/sys/socket.h

21 #iвdef 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<г©uїs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifdeа
__USE_GNU


33 
	~<bЩs/sig£t.h
>

40 
	~<bЩs/sockС.h
>

42 #ifdeа
__USE_BSD


45 
	sosockaddr


47 
	mІ_зmЮy
;

48 
	mІ_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #iа
defЪed
 
__эlu•lus
 || !
__GNUC_PREREQ
 (2, 7и|| !defЪed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ї°riщ


	)

72 
	#__CONST_SOCKADDR_ARG
 
__cЏ°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_eЏ
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_Ъ
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_Ъ6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_Ъђp
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_Эx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
иty≥ *
__ї°riщ
 
__
##ty≥##__;

	)

92 uniЏ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©МibuЛ__
 ((
	t__М™•ђТt_uniЏ__
));

94 #undeа
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
и
__cЏ°
 ty≥ *
__ї°riщ
 
__
##ty≥##__;

	)

96 uniЏ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©МibuЛ__
 ((
	t__М™•ђТt_uniЏ__
));

98 #undeа
__SOCKADDR_ONETYPE


105 
	$sockС
 (
__domaЪ
, 
__ty≥
, 
__іўocё
и
__THROW
;

111 
	$sockСЈЬ
 (
__domaЪ
, 
__ty≥
, 
__іўocё
,

112 
__fds
[2]и
__THROW
;

115 
	$bЪd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockЋn_t
 
__Ћn
)

116 
__THROW
;

119 
	$gСsock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockЋn_t
 *
__ї°riщ
 
__Ћn
и
__THROW
;

129 
	`cЏ√щ
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockЋn_t
 
__Ћn
);

133 
	$gС≥Ф«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockЋn_t
 *
__ї°riщ
 
__Ћn
и
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__cЏ°
 *
__buf
, 
size_t
 
__n
, 
__жags
);

148 
ssize_t
 
	`їcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__жags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__cЏ°
 *
__buf
, 
size_t
 
__n
,

156 
__жags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockЋn_t
 
__addr_Ћn
);

166 
ssize_t
 
	`їcvдom
 (
__fd
, *
__ї°riщ
 
__buf
, 
size_t
 
__n
,

167 
__жags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__cЏ°
 
msghdr
 *
__mesІge
,

177 
__жags
);

184 
ssize_t
 
	`їcvmsg
 (
__fd
, 
msghdr
 *
__mesІge
, 
__жags
);

190 
	$gСsockЁt
 (
__fd
, 
__ЋvЦ
, 
__ЁКame
,

191 *
__ї°riщ
 
__ЁtvЃ
,

192 
sockЋn_t
 *
__ї°riщ
 
__ЁОТ
и
__THROW
;

197 
	$£tsockЁt
 (
__fd
, 
__ЋvЦ
, 
__ЁКame
,

198 
__cЏ°
 *
__ЁtvЃ
, 
sockЋn_t
 
__ЁОТ
и
__THROW
;

204 
	$li°Т
 (
__fd
, 
__n
и
__THROW
;

214 
	`acы±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
);

217 #ifdeа
__USE_GNU


222 
	`acы±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
, 
__жags
);

232 
	$shutdown
 (
__fd
, 
__how
и
__THROW
;

235 #ifdeа
__USE_XOPEN2K


237 
	$sock©mђk
 (
__fd
и
__THROW
;

241 #ifdeа
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
и
__THROW
;

250 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


251 
	~<bЩs/sockС2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #iвdef 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<г©uїs.h
>

29 
	~<bЩs/ty≥s.h
>

31 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K
 || defЪed 
__USE_MISC
 \

32 || 
defЪed
 
	g__USE_ATFILE


33 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K


45 #iвdeа
__dev_t_defЪed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_defЪed


	)

50 #iвdeа
__gid_t_defЪed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_defЪed


	)

55 #iвdeа
__Ъo_t_defЪed


56 #iвdeа
__USE_FILE_OFFSET64


57 
__Ъo_t
 
	tЪo_t
;

59 
__Ъo64_t
 
	tЪo_t
;

61 
	#__Ъo_t_defЪed


	)

64 #iвdeа
__mode_t_defЪed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_defЪed


	)

69 #iвdeа
__∆Ъk_t_defЪed


70 
__∆Ъk_t
 
	t∆Ъk_t
;

71 
	#__∆Ъk_t_defЪed


	)

74 #iвdeа
__off_t_defЪed


75 #iвdeа
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_defЪed


	)

83 #iвdeа
__uid_t_defЪed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_defЪed


	)

89 #ifdeа
__USE_UNIX98


90 #iвdeа
__blkъt_t_defЪed


91 #iвdeа
__USE_FILE_OFFSET64


92 
__blkъt_t
 
	tblkъt_t
;

94 
__blkъt64_t
 
	tblkъt_t
;

96 
	#__blkъt_t_defЪed


	)

99 #iвdeа
__blksize_t_defЪed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_defЪed


	)

105 
	g__BEGIN_DECLS


107 
	~<bЩs/°©.h
>

109 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_MISC
 || defЪed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifdeа
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifdeа
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #iа(
defЪed
 
__USE_BSD
 || defЪed 
__USE_MISC
 || defЪed 
__USE_UNIX98
) \

122 && 
defЪed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
и(((modeи& 
__S_IFMT
и=р(mask))

	)

131 
	#S_ISDIR
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifdeа
__S_IFIFO


136 
	#S_ISFIFO
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifdeа
__S_IFLNK


139 
	#S_ISLNK
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #iа
defЪed
 
__USE_BSD
 && !defЪed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
и0

	)

146 #iа(
defЪed
 
__USE_BSD
 || defЪed 
__USE_UNIX98
) \

147 && 
defЪed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
и
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
и
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
и
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
и
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_MISC
 || defЪed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #iа
defЪed
 
__USE_MISC
 && defЪed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3и

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3и

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3и

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3и

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3и

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3и

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
и

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #iвdeа
__USE_FILE_OFFSET64


209 
	$°©
 (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

210 
°©
 *
__ї°riщ
 
__buf
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
и
__THROW
 
	`__nЏnuќ
 ((2));

216 #ifdeа
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

218 
°©
 *
__ї°riщ
 
__buf
), 
°©64
)

219 
	`__nЏnuќ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__nЏnuќ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifdeа
__USE_LARGEFILE64


228 
	$°©64
 (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

229 
°©64
 *
__ї°riщ
 
__buf
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
и
__THROW
 
	`__nЏnuќ
 ((2));

233 #ifdeа
__USE_ATFILE


237 #iвdeа
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fЮe
,

239 
°©
 *
__ї°riщ
 
__buf
, 
__жag
)

240 
__THROW
 
	`__nЏnuќ
 ((2, 3));

242 #ifdeа
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fЮe
,

244 
°©
 *
__ї°riщ
 
__buf
,

245 
__жag
),

246 
f°©©64
и
	`__nЏnuќ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifdeа
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fЮe
,

254 
°©64
 *
__ї°riщ
 
__buf
, 
__жag
)

255 
__THROW
 
	`__nЏnuќ
 ((2, 3));

259 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_XOPEN2K


260 #iвdeа
__USE_FILE_OFFSET64


263 
	$l°©
 (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

264 
°©
 *
__ї°riщ
 
__buf
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

266 #ifdeа
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

269 
°©
 *
__ї°riщ
 
__buf
), 
l°©64
)

270 
	`__nЏnuќ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifdeа
__USE_LARGEFILE64


276 
	$l°©64
 (
__cЏ°
 *
__ї°riщ
 
__fЮe
,

277 
°©64
 *
__ї°riщ
 
__buf
)

278 
__THROW
 
	`__nЏnuќ
 ((1, 2));

284 
	$chmod
 (
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__nЏnuќ
 ((1));

287 #ifdeа
__USE_BSD


291 
	$lchmod
 (
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__nЏnuќ
 ((1));

296 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
и
__THROW
;

300 #ifdeа
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__cЏ°
 *
__fЮe
, 
__mode_t
 
__mode
,

304 
__жag
)

305 
__THROW
 
	`__nЏnuќ
 ((2)и
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
и
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gСumask
 (и
__THROW
;

321 
	$mkdЬ
 (
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__nЏnuќ
 ((1));

324 #ifdeа
__USE_ATFILE


328 
	$mkdЬ©
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__nЏnuќ
 ((2));

335 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__nЏnuќ
 ((1));

339 #ifdeа
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
и
__THROW
 
	`__nЏnuќ
 ((2));

350 
	$mkfifo
 (
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__nЏnuќ
 ((1));

353 #ifdeа
__USE_ATFILE


357 
	$mkfifяt
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__nЏnuќ
 ((2));

361 #ifdeа
__USE_ATFILE


364 
	$utimТІt
 (
__fd
, 
__cЏ°
 *
__Јth
,

365 
__cЏ°
 
time•ec
 
__times
[2],

366 
__жags
)

367 
__THROW
 
	`__nЏnuќ
 ((2));

370 #ifdeа
__USE_XOPEN2K8


372 
	$futimТs
 (
__fd
, 
__cЏ°
 
time•ec
 
__times
[2]и
__THROW
;

390 #iвdeа
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #iвdeа
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #iвdeа
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vФ
, 
__fЮdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__nЏnuќ
 ((3));

401 
	$__x°©
 (
__vФ
, 
__cЏ°
 *
__fЮТame
,

402 
°©
 *
__°©_buf
и
__THROW
 
	`__nЏnuќ
 ((2, 3));

403 
	$__lx°©
 (
__vФ
, 
__cЏ°
 *
__fЮТame
,

404 
°©
 *
__°©_buf
и
__THROW
 
	`__nЏnuќ
 ((2, 3));

405 
	$__fx°©©
 (
__vФ
, 
__fЮdes
, 
__cЏ°
 *
__fЮТame
,

406 
°©
 *
__°©_buf
, 
__жag
)

407 
__THROW
 
	`__nЏnuќ
 ((3, 4));

409 #ifdeа
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vФ
, 
__fЮdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__nЏnuќ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vФ
, 
__cЏ°
 *
__fЮТame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__nЏnuќ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vФ
, 
__cЏ°
 *
__fЮТame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__nЏnuќ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vФ
, 
__fЮdes
,

420 
__cЏ°
 *
__fЮТame
,

421 
°©
 *
__°©_buf
, 
__жag
),

422 
__fx°©©64
и
	`__nЏnuќ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifdeа
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vФ
, 
__fЮdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__nЏnuќ
 ((3));

434 
	$__x°©64
 (
__vФ
, 
__cЏ°
 *
__fЮТame
,

435 
°©64
 *
__°©_buf
и
__THROW
 
	`__nЏnuќ
 ((2, 3));

436 
	$__lx°©64
 (
__vФ
, 
__cЏ°
 *
__fЮТame
,

437 
°©64
 *
__°©_buf
и
__THROW
 
	`__nЏnuќ
 ((2, 3));

438 
	$__fx°©©64
 (
__vФ
, 
__fЮdes
, 
__cЏ°
 *
__fЮТame
,

439 
°©64
 *
__°©_buf
, 
__жag
)

440 
__THROW
 
	`__nЏnuќ
 ((3, 4));

442 
	$__xmknod
 (
__vФ
, 
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
и
__THROW
 
	`__nЏnuќ
 ((2, 4));

445 
	$__xmknod©
 (
__vФ
, 
__fd
, 
__cЏ°
 *
__Јth
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__nЏnuќ
 ((3, 5));

449 #iа
defЪed
 
__GNUC__
 && __GNUC__ >р2 && defЪed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exЛЇ_ЪlЪe
 

453 
	`__NTH
 (
	$°©
 (
__cЏ°
 *
__Јth
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__Јth
, 
__°©buf
);

456 
	}
}

458 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


459 
__exЛЇ_ЪlЪe
 

460 
__NTH
 (
	$l°©
 (
__cЏ°
 *
__Јth
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__Јth
, 
__°©buf
);

463 
	}
}

466 
__exЛЇ_ЪlЪe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifdeа
__USE_ATFILE


473 
__exЛЇ_ЪlЪe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__cЏ°
 *
__fЮТame
, 
°©
 *
__°©buf
,

475 
__жag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fЮТame
, 
__°©buf
, 
__жag
);

478 
	}
}

481 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_BSD


482 
__exЛЇ_ЪlЪe
 

483 
__NTH
 (
	$mknod
 (
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__Јth
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifdeа
__USE_ATFILE


490 
__exЛЇ_ЪlЪe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__Јth
, 
__mode
, &
__dev
);

495 
	}
}

498 #iа
defЪed
 
__USE_LARGEFILE64
 \

499 && (! 
defЪed
 
	g__USE_FILE_OFFSET64
 \

500 || (
defЪed
 
	g__REDIRECT_NTH
 && defЪed 
	g__OPTIMIZE__
))

501 
__exЛЇ_ЪlЪe
 

502 
__NTH
 (
	$°©64
 (
__cЏ°
 *
__Јth
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__Јth
, 
__°©buf
);

505 
	}
}

507 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


508 
__exЛЇ_ЪlЪe
 

509 
__NTH
 (
	$l°©64
 (
__cЏ°
 *
__Јth
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__Јth
, 
__°©buf
);

512 
	}
}

515 
__exЛЇ_ЪlЪe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifdeа
__USE_ATFILE


522 
__exЛЇ_ЪlЪe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__cЏ°
 *
__fЮТame
, 
°©64
 *
__°©buf
,

524 
__жag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fЮТame
, 
__°©buf
, 
__жag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #iвdeа
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #iвdeа
_LIBC


32 
	~<bЩs/sys€ќ.h
>

	@/usr/include/sys/time.h

20 #iвdeа
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<г©uїs.h
>

25 
	~<bЩs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevЃ


	)

29 
	~<bЩs/time.h
>

31 
	~<sys/£Ћщ.h
>

33 #iвdeа
__su£cЏds_t_defЪed


34 
__su£cЏds_t
 
	tsu£cЏds_t
;

35 
	#__su£cЏds_t_defЪed


	)

39 
	g__BEGIN_DECLS


41 #ifdeа
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifdeа
__USE_BSD


57 
	stimezЏe


59 
	mtz_mЪuЛswe°
;

60 
	mtz_d°time
;

63 
timezЏe
 *
	t__ї°riщ
 
	t__timezЏe_±r_t
;

65 *
	t__ї°riщ
 
	t__timezЏe_±r_t
;

73 
	$gСtimeofday
 (
timevЃ
 *
__ї°riщ
 
__tv
,

74 
__timezЏe_±r_t
 
__tz
и
__THROW
 
	`__nЏnuќ
 ((1));

76 #ifdeа
__USE_BSD


79 
	$£Йimeofday
 (
__cЏ°
 
timevЃ
 *
__tv
,

80 
__cЏ°
 
timezЏe
 *
__tz
)

81 
__THROW
 
	`__nЏnuќ
 ((1));

87 
	$adjtime
 (
__cЏ°
 
timevЃ
 *
__dЦП
,

88 
timevЃ
 *
__ёddЦП
и
__THROW
;

93 
	e__ЩimФ_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sЩimФvЃ


112 
timevЃ
 
Щ_ЪЛrvЃ
;

114 
timevЃ
 
Щ_vЃue
;

117 #iа
defЪed
 
__USE_GNU
 && !defЪed 
__эlu•lus


120 
__ЩimФ_which
 
	t__ЩimФ_which_t
;

122 
	t__ЩimФ_which_t
;

127 
	$gСЩimФ
 (
__ЩimФ_which_t
 
__which
,

128 
ЩimФvЃ
 *
__vЃue
и
__THROW
;

133 
	$£tЩimФ
 (
__ЩimФ_which_t
 
__which
,

134 
__cЏ°
 
ЩimФvЃ
 *
__ї°riщ
 
__√w
,

135 
ЩimФvЃ
 *
__ї°riщ
 
__ёd
и
__THROW
;

140 
	$utimes
 (
__cЏ°
 *
__fЮe
, __cЏ° 
timevЃ
 
__tvp
[2])

141 
__THROW
 
	`__nЏnuќ
 ((1));

143 #ifdeа
__USE_BSD


145 
	$lutimes
 (
__cЏ°
 *
__fЮe
, __cЏ° 
timevЃ
 
__tvp
[2])

146 
__THROW
 
	`__nЏnuќ
 ((1));

149 
	$futimes
 (
__fd
, 
__cЏ°
 
timevЃ
 
__tvp
[2]и
__THROW
;

152 #ifdeа
__USE_GNU


156 
	$futimeІt
 (
__fd
, 
__cЏ°
 *
__fЮe
,

157 
__cЏ°
 
timevЃ
 
__tvp
[2]и
__THROW
;

161 #ifdeа
__USE_BSD


164 
	#timФis£t
(
tvp
и(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timФюЧr
(
tvp
и(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timФcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =р(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timФadd
(
a
, 
b
, 
їsu…
) \

172 (
їsu…
)->
tv_£c
 = (
a
)->tv_£ш+ (
b
)->tv_sec; \

173 (
їsu…
)->
tv_u£c
 = (
a
)->tv_u£ш+ (
b
)->tv_usec; \

174 iа((
їsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
їsu…
)->
tv_£c
; \

177 (
їsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timФsub
(
a
, 
b
, 
їsu…
) \

182 (
їsu…
)->
tv_£c
 = (
a
)->tv_£ш- (
b
)->tv_sec; \

183 (
їsu…
)->
tv_u£c
 = (
a
)->tv_u£ш- (
b
)->tv_usec; \

184 iа((
їsu…
)->
tv_u£c
 < 0) { \

185 --(
їsu…
)->
tv_£c
; \

186 (
їsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/timeb.h

19 #iвdeа
_SYS_TIMEB_H


20 
	#_SYS_TIMEB_H
 1

	)

22 
	~<г©uїs.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

28 
__BEGIN_DECLS


32 
	stimeb


34 
time_t
 
	mtime
;

35 
	mmЮlЩm
;

36 
	mtimezЏe
;

37 
	md°жag
;

42 
бime
 (
timeb
 *
__timebuf
);

44 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #iвdef 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<г©uїs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bЩs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #iвdeа
__u_chђ_defЪed


35 
__u_chђ
 
	tu_chђ
;

36 
__u_sh№t
 
	tu_sh№t
;

37 
__u_Ъt
 
	tu_Ъt
;

38 
__u_lЏg
 
	tu_lЏg
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_chђ_defЪed


	)

46 
__loff_t
 
	tloff_t
;

48 #iвdeа
__Ъo_t_defЪed


49 #iвdeа
__USE_FILE_OFFSET64


50 
__Ъo_t
 
	tЪo_t
;

52 
__Ъo64_t
 
	tЪo_t
;

54 
	#__Ъo_t_defЪed


	)

56 #iа
defЪed
 
__USE_LARGEFILE64
 && !defЪed 
__Ъo64_t_defЪed


57 
__Ъo64_t
 
	tЪo64_t
;

58 
	#__Ъo64_t_defЪed


	)

61 #iвdeа
__dev_t_defЪed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_defЪed


	)

66 #iвdeа
__gid_t_defЪed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_defЪed


	)

71 #iвdeа
__mode_t_defЪed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_defЪed


	)

76 #iвdeа
__∆Ъk_t_defЪed


77 
__∆Ъk_t
 
	t∆Ъk_t
;

78 
	#__∆Ъk_t_defЪed


	)

81 #iвdeа
__uid_t_defЪed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_defЪed


	)

86 #iвdeа
__off_t_defЪed


87 #iвdeа
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_defЪed


	)

94 #iа
defЪed
 
__USE_LARGEFILE64
 && !defЪed 
__off64_t_defЪed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_defЪed


	)

99 #iвdeа
__pid_t_defЪed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_defЪed


	)

104 #iа(
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN
и&& !defЪed 
__id_t_defЪed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_defЪed


	)

109 #iвdeа
__ssize_t_defЪed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_defЪed


	)

114 #ifdef 
__USE_BSD


115 #iвdeа
__daddr_t_defЪed


116 
__daddr_t
 
	tdaddr_t
;

117 
__€ddr_t
 
	t€ddr_t
;

118 
	#__daddr_t_defЪed


	)

122 #iа(
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN
и&& !defЪed 
__key_t_defЪed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_defЪed


	)

127 #ifdeа
__USE_XOPEN


128 
	#__√ed_юock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timФ_t


	)

132 
	#__√ed_юockid_t


	)

133 
	~<time.h
>

135 #ifdeа
__USE_XOPEN


136 #iвdeа
__u£cЏds_t_defЪed


137 
__u£cЏds_t
 
	tu£cЏds_t
;

138 
	#__u£cЏds_t_defЪed


	)

140 #iвdeа
__su£cЏds_t_defЪed


141 
__su£cЏds_t
 
	tsu£cЏds_t
;

142 
	#__su£cЏds_t_defЪed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifdeа
__USE_MISC


151 
	tulЏg
;

152 
	tush№t
;

153 
	tuЪt
;

158 #iа!
__GNUC_PREREQ
 (2, 7)

161 #iвdeа
__Ъt8_t_defЪed


162 
	#__Ъt8_t_defЪed


	)

163 
	tЪt8_t
;

164 
	tЪt16_t
;

165 
	tЪt32_t
;

166 #iа
__WORDSIZE
 == 64

167 
	tЪt64_t
;

168 #Цiа
__GLIBC_HAVE_LONG_LONG


169 
__exЛnsiЏ__
 
	tЪt64_t
;

174 
	tu_Ъt8_t
;

175 
	tu_Ъt16_t
;

176 
	tu_Ъt32_t
;

177 #iа
__WORDSIZE
 == 64

178 
	tu_Ъt64_t
;

179 #Цiа
__GLIBC_HAVE_LONG_LONG


180 
__exЛnsiЏ__
 
	tu_Ъt64_t
;

183 
	tїgi°Ф_t
;

188 
	#__ЪtN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ЪtN_t
(
	tN
, 
	tMODE
) \

191 
	tu_Ъt
##
	tN
##
	t_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #iвdeа
	t__Ъt8_t_defЪed


194 
	t__Ъt8_t_defЪed


	)

195 
	t__ЪtN_t
 (8, 
	t__QI__
);

196 
__ЪtN_t
 (16, 
__HI__
);

197 
__ЪtN_t
 (32, 
__SI__
);

198 
__ЪtN_t
 (64, 
__DI__
);

201 
__u_ЪtN_t
 (8, 
__QI__
);

202 
__u_ЪtN_t
 (16, 
__HI__
);

203 
__u_ЪtN_t
 (32, 
__SI__
);

204 
__u_ЪtN_t
 (64, 
__DI__
);

206 
	tїgi°Ф_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	t__w№d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ТdЯn.h
>

220 
	~<sys/£Ћщ.h
>

223 
	~<sys/sysmaьos.h
>

227 #iа
defЪed
 
__USE_UNIX98
 && !defЪed 
__blksize_t_defЪed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_defЪed


	)

233 #iвdeа
__USE_FILE_OFFSET64


234 #iвdeа
__blkъt_t_defЪed


235 
__blkъt_t
 
	tblkъt_t
;

236 
	#__blkъt_t_defЪed


	)

238 #iвdeа
__fsblkъt_t_defЪed


239 
__fsblkъt_t
 
	tfsblkъt_t
;

240 
	#__fsblkъt_t_defЪed


	)

242 #iвdeа
__fsfЮъt_t_defЪed


243 
__fsfЮъt_t
 
	tfsfЮъt_t
;

244 
	#__fsfЮъt_t_defЪed


	)

247 #iвdeа
__blkъt_t_defЪed


248 
__blkъt64_t
 
	tblkъt_t
;

249 
	#__blkъt_t_defЪed


	)

251 #iвdeа
__fsblkъt_t_defЪed


252 
__fsblkъt64_t
 
	tfsblkъt_t
;

253 
	#__fsblkъt_t_defЪed


	)

255 #iвdeа
__fsfЮъt_t_defЪed


256 
__fsfЮъt64_t
 
	tfsfЮъt_t
;

257 
	#__fsfЮъt_t_defЪed


	)

261 #ifdeа
__USE_LARGEFILE64


262 
__blkъt64_t
 
	tblkъt64_t
;

263 
__fsblkъt64_t
 
	tfsblkъt64_t
;

264 
__fsfЮъt64_t
 
	tfsfЮъt64_t
;

269 #iа
defЪed
 
__USE_POSIX199506
 || defЪed 
__USE_UNIX98


270 
	~<bЩs/±hїadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #iвdeа
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<г©uїs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bЩs/uio.h
>

40 
ssize_t
 
	$їadv
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
)

41 
__wur
;

51 
ssize_t
 
	$wrЩev
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
)

52 
__wur
;

55 #ifdeа
__USE_BSD


56 #iвdeа
__USE_FILE_OFFSET64


66 
ssize_t
 
	$іЧdv
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
,

67 
__off_t
 
__off£t
и
__wur
;

78 
ssize_t
 
	$pwrЩev
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
,

79 
__off_t
 
__off£t
и
__wur
;

81 #ifdeа
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
іЧdv
, (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
,

83 
__couЅ
, 
__off_t
 
__off£t
),

84 
іЧdv64
и
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrЩev
, (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
,

86 
__couЅ
, 
__off_t
 
__off£t
),

87 
pwrЩev64
и
__wur
;

89 
	#іЧdv
 
іЧdv64


	)

90 
	#pwrЩev
 
pwrЩev64


	)

94 #ifdeа
__USE_LARGEFILE64


104 
ssize_t
 
	$іЧdv64
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
,

105 
__off64_t
 
__off£t
и
__wur
;

116 
ssize_t
 
	$pwrЩev64
 (
__fd
, 
__cЏ°
 
iovec
 *
__iovec
, 
__couЅ
,

117 
__off64_t
 
__off£t
и
__wur
;

121 
__END_DECLS


	@/usr/include/sys/wait.h

24 #iвdef 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<г©uїs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/їsourы.h
>

35 #iа!
defЪed
 
_STDLIB_H
 || !defЪed 
__USE_XOPEN


38 
	~<bЩs/waЩжags.h
>

40 #ifdef 
__USE_BSD


45 #iа
defЪed
 
__GNUC__
 && !defЪed 
__эlu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exЛnsiЏ__
 (((uniЏ { 
	`__ty≥of
(
°©us
и
__Ъ
; 
__i
; }) \

48 { .
__Ъ
 = (
°©us
и}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
и(*(
__cЏ°
 *и&(°©us))

	)

58 #iа!
defЪed
 
__GNUC__
 || __GNUC__ < 2 || defЪed 
__эlu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waЩ
 *
	m__u±r
;

66 *
	m__ЭМ
;

67 } 
	t__WAIT_STATUS
 
	t__©МibuЛ__
 ((
	t__М™•ђТt_uniЏ__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
и(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bЩs/waЩ°©us.h
>

82 
	#WEXITSTATUS
(
°©us
и
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

83 
	#WTERMSIG
(
°©us
и
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WSTOPSIG
(
°©us
и
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFEXITED
(
°©us
и
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSIGNALED
(
°©us
и
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

87 
	#WIFSTOPPED
(
°©us
и
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

88 #ifdeа
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
и
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
и
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

96 
	#W_EXITCODE
(
їt
, 
sig
и
	`__W_EXITCODE
‘С, sig)

	)

97 
	#W_STOPCODE
(
sig
и
	`__W_STOPCODE
(sig)

	)

101 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waЩ
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1и

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waЩpid
 (__pid_И
__pid
, *
__°©_loc
, 
__ЁtiЏs
);

141 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


142 
	#__√ed_sigЪfo_t


	)

143 
	~<bЩs/sigЪfo.h
>

155 
waЩid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigЪfo_t
 *
__ЪfЁ
,

156 
__ЁtiЏs
);

159 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


162 
	gruІge
;

169 
__pid_t
 
	$waЩ3
 (
__WAIT_STATUS
 
__°©_loc
, 
__ЁtiЏs
,

170 
ruІge
 * 
__uІge
и
__THROW
;

173 #ifdeа
__USE_BSD


175 
__pid_t
 
	$waЩ4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__ЁtiЏs
,

176 
ruІge
 *
__uІge
и
__THROW
;

180 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #iвdef 
_TIME_H


25 #iа(! 
defЪed
 
__√ed_time_t
 && !defЪed 
__√ed_юock_t
 && \

26 ! 
defЪed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<г©uїs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bЩs/time.h
>

45 #iа!
defЪed
 
__STRICT_ANSI__
 && !defЪed 
__USE_XOPEN2K


46 #iвdeа
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #iа!
defЪed
 
__юock_t_defЪed
 && (defЪed 
_TIME_H
 || defЪed 
__√ed_юock_t
)

54 
	#__юock_t_defЪed
 1

	)

56 
	~<bЩs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__юock_t
 
	tюock_t
;

61 
	g__END_NAMESPACE_STD


62 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_POSIX
 || defЪed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
юock_t
)

67 #undeа
__√ed_юock_t


69 #iа!
defЪed
 
__time_t_defЪed
 && (defЪed 
_TIME_H
 || defЪed 
__√ed_time_t
)

70 
	#__time_t_defЪed
 1

	)

72 
	~<bЩs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC
 || defЪed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #undeа
__√ed_time_t


85 #iа!
defЪed
 
__юockid_t_defЪed
 && \

86 ((
defЪed
 
_TIME_H
 && defЪed 
__USE_POSIX199309
и|| defЪed 
__√ed_юockid_t
)

87 
	#__юockid_t_defЪed
 1

	)

89 
	~<bЩs/ty≥s.h
>

92 
__юockid_t
 
	tюockid_t
;

95 #undeа
__юockid_time_t


97 #iа!
defЪed
 
__timФ_t_defЪed
 && \

98 ((
defЪed
 
_TIME_H
 && defЪed 
__USE_POSIX199309
и|| defЪed 
__√ed_timФ_t
)

99 
	#__timФ_t_defЪed
 1

	)

101 
	~<bЩs/ty≥s.h
>

104 
__timФ_t
 
	ttimФ_t
;

107 #undeа
__√ed_timФ_t


110 #iа!
defЪed
 
__time•ec_defЪed
 && \

111 ((
defЪed
 
_TIME_H
 && \

112 (
defЪed
 
__USE_POSIX199309
 || defЪed 
__USE_MISC
)) || \

113 
defЪed
 
__√ed_time•ec
)

114 
	#__time•ec_defЪed
 1

	)

116 
	~<bЩs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #undeа
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mЪ
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_mЏ
;

140 
tm_yЧr
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__cЏ°
 *
tm_zЏe
;

149 
__tm_gmtoff
;

150 
__cЏ°
 *
__tm_zЏe
;

153 
__END_NAMESPACE_STD


154 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_POSIX
 || defЪed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdeа
__USE_POSIX199309


161 
	sЩimФ•ec


163 
time•ec
 
Щ_ЪЛrvЃ
;

164 
time•ec
 
Щ_vЃue
;

168 
sigevТt
;

172 #ifdeа
__USE_XOPEN2K


173 #iвdeа
__pid_t_defЪed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_defЪed


	)

180 
__BEGIN_NAMESPACE_STD


183 
юock_t
 
	$юock
 (и
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timФ
и
__THROW
;

189 
	$difбime
 (
time_t
 
__time1
,Бime_И
__time0
)

190 
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__Н
и
__THROW
;

199 
size_t
 
	$°rбime
 (*
__ї°riщ
 
__s
, 
size_t
 
__maxsize
,

200 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

201 
__cЏ°
 
tm
 *
__ї°riщ
 
__Н
и
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifdeа
__USE_XOPEN


207 *
	$°љtime
 (
__cЏ°
 *
__ї°riщ
 
__s
,

208 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
tm
 *
__Н
)

209 
__THROW
;

212 #ifdeа
__USE_XOPEN2K8


215 
	~<xlo€Ћ.h
>

217 
size_t
 
	$°rбime_l
 (*
__ї°riщ
 
__s
, 
size_t
 
__maxsize
,

218 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

219 
__cЏ°
 
tm
 *
__ї°riщ
 
__Н
,

220 
__lo€Ћ_t
 
__loc
и
__THROW
;

223 #ifdeа
__USE_GNU


224 *
	$°љtime_l
 (
__cЏ°
 *
__ї°riщ
 
__s
,

225 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
tm
 *
__Н
,

226 
__lo€Ћ_t
 
__loc
и
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__cЏ°
 
time_t
 *
__timФ
и
__THROW
;

237 
tm
 *
	$lo€…ime
 (
__cЏ°
 
time_t
 *
__timФ
и
__THROW
;

238 
__END_NAMESPACE_STD


240 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__cЏ°
 
time_t
 *
__ї°riщ
 
__timФ
,

244 
tm
 *
__ї°riщ
 
__Н
и
__THROW
;

248 
tm
 *
	$lo€…ime_r
 (
__cЏ°
 
time_t
 *
__ї°riщ
 
__timФ
,

249 
tm
 *
__ї°riщ
 
__Н
и
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$asщime
 (
__cЏ°
 
tm
 *
__Н
и
__THROW
;

258 *
	$щime
 (
__cЏ°
 
time_t
 *
__timФ
и
__THROW
;

259 
__END_NAMESPACE_STD


261 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


266 *
	$asщime_r
 (
__cЏ°
 
tm
 *
__ї°riщ
 
__Н
,

267 *
__ї°riщ
 
__buf
и
__THROW
;

270 *
	$щime_r
 (
__cЏ°
 
time_t
 *
__ї°riщ
 
__timФ
,

271 *
__ї°riщ
 
__buf
и
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timezЏe
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (и
__THROW
;

290 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN


291 
daylight
;

292 
timezЏe
;

295 #ifdeа
__USE_SVID


298 
	$°ime
 (
__cЏ°
 
time_t
 *
__whТ
и
__THROW
;

304 
	#__i¶Чp
(
yЧr
) \

305 ((
yЧr
и% 4 =р0 && ((yЧrи% 100 !р0 || (yЧrи% 400 =р0))

	)

308 #ifdeа
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__Н
и
__THROW
;

316 
time_t
 
	$timЦo€l
 (
tm
 *
__Н
и
__THROW
;

319 
	$dysize
 (
__yЧr
и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

323 #ifdeа
__USE_POSIX199309


328 
	`«no¶Уp
 (
__cЏ°
 
time•ec
 *
__їque°ed_time
,

329 
time•ec
 *
__їmaЪЪg
);

333 
	$юock_gСїs
 (
юockid_t
 
__юock_id
, 
time•ec
 *
__їs
и
__THROW
;

336 
	$юock_gСtime
 (
юockid_t
 
__юock_id
, 
time•ec
 *
__Н
и
__THROW
;

339 
	$юock_£Йime
 (
юockid_t
 
__юock_id
, 
__cЏ°
 
time•ec
 *
__Н
)

340 
__THROW
;

342 #ifdeа
__USE_XOPEN2K


347 
	`юock_«no¶Уp
 (
юockid_t
 
__юock_id
, 
__жags
,

348 
__cЏ°
 
time•ec
 *
__їq
,

349 
time•ec
 *
__їm
);

352 
	$юock_gСэuюockid
 (
pid_t
 
__pid
, 
юockid_t
 *
__юock_id
и
__THROW
;

357 
	$timФ_ьЧЛ
 (
юockid_t
 
__юock_id
,

358 
sigevТt
 *
__ї°riщ
 
__evp
,

359 
timФ_t
 *
__ї°riщ
 
__timФid
и
__THROW
;

362 
	$timФ_dЦСe
 (
timФ_t
 
__timФid
и
__THROW
;

365 
	$timФ_£Йime
 (
timФ_t
 
__timФid
, 
__жags
,

366 
__cЏ°
 
ЩimФ•ec
 *
__ї°riщ
 
__vЃue
,

367 
ЩimФ•ec
 *
__ї°riщ
 
__ovЃue
и
__THROW
;

370 
	$timФ_gСtime
 (
timФ_t
 
__timФid
, 
ЩimФ•ec
 *
__vЃue
)

371 
__THROW
;

374 
	$timФ_gСovФrun
 (
timФ_t
 
__timФid
и
__THROW
;

378 #ifdeа
__USE_XOPEN_EXTENDED


390 
gСd©e_Фr
;

399 
tm
 *
	`gСd©e
 (
__cЏ°
 *
__°rЪg
);

402 #ifdeа
__USE_GNU


413 
	`gСd©e_r
 (
__cЏ°
 *
__ї°riщ
 
__°rЪg
,

414 
tm
 *
__ї°riщ
 
__їsbuе
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #iвdef 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<г©uїs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200809L

	)

40 
	#_POSIX2_VERSION
 200809L

	)

44 
	#_POSIX2_C_BIND
 200809L

	)

48 
	#_POSIX2_C_DEV
 200809L

	)

52 
	#_POSIX2_SW_DEV
 200809L

	)

56 
	#_POSIX2_LOCALEDEF
 200809L

	)

59 #ifdeа
__USE_XOPEN2K8


60 
	#_XOPEN_VERSION
 700

	)

61 #Цiа
defЪed
 
__USE_XOPEN2K


62 
	#_XOPEN_VERSION
 600

	)

63 #Цiа
defЪed
 
__USE_UNIX98


64 
	#_XOPEN_VERSION
 500

	)

66 
	#_XOPEN_VERSION
 4

	)

70 
	#_XOPEN_XCU_VERSION
 4

	)

73 
	#_XOPEN_XPG2
 1

	)

74 
	#_XOPEN_XPG3
 1

	)

75 
	#_XOPEN_XPG4
 1

	)

78 
	#_XOPEN_UNIX
 1

	)

81 
	#_XOPEN_CRYPT
 1

	)

85 
	#_XOPEN_ENH_I18N
 1

	)

88 
	#_XOPEN_LEGACY
 1

	)

175 
	~<bЩs/posix_Ёt.h
>

178 #ifdeа
__USE_UNIX98


179 
	~<bЩs/ТvЬЏmТts.h
>

183 
	#STDIN_FILENO
 0

	)

184 
	#STDOUT_FILENO
 1

	)

185 
	#STDERR_FILENO
 2

	)

190 
	~<bЩs/ty≥s.h
>

192 #iвdef 
__ssize_t_defЪed


193 
__ssize_t
 
	tssize_t
;

194 
	#__ssize_t_defЪed


	)

197 
	#__√ed_size_t


	)

198 
	#__√ed_NULL


	)

199 
	~<°ddef.h
>

201 #iа
defЪed
 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K


204 #iвdeа
__gid_t_defЪed


205 
__gid_t
 
	tgid_t
;

206 
	#__gid_t_defЪed


	)

209 #iвdeа
__uid_t_defЪed


210 
__uid_t
 
	tuid_t
;

211 
	#__uid_t_defЪed


	)

214 #iвdeа
__off_t_defЪed


215 #iвdeа
__USE_FILE_OFFSET64


216 
__off_t
 
	toff_t
;

218 
__off64_t
 
	toff_t
;

220 
	#__off_t_defЪed


	)

222 #iа
defЪed
 
__USE_LARGEFILE64
 && !defЪed 
__off64_t_defЪed


223 
__off64_t
 
	toff64_t
;

224 
	#__off64_t_defЪed


	)

227 #iвdeа
__u£cЏds_t_defЪed


228 
__u£cЏds_t
 
	tu£cЏds_t
;

229 
	#__u£cЏds_t_defЪed


	)

232 #iвdeа
__pid_t_defЪed


233 
__pid_t
 
	tpid_t
;

234 
	#__pid_t_defЪed


	)

238 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED


239 #iвdeа
__ЪНМ_t_defЪed


240 
__ЪНМ_t
 
	tЪНМ_t
;

241 
	#__ЪНМ_t_defЪed


	)

245 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN


246 #iвdeа
__sockЋn_t_defЪed


247 
__sockЋn_t
 
	tsockЋn_t
;

248 
	#__sockЋn_t_defЪed


	)

254 
	#R_OK
 4

	)

255 
	#W_OK
 2

	)

256 
	#X_OK
 1

	)

257 
	#F_OK
 0

	)

260 
	$acыss
 (
__cЏ°
 *
__«me
, 
__ty≥
и
__THROW
 
	`__nЏnuќ
 ((1));

262 #ifdeа
__USE_GNU


265 
	$euidacыss
 (
__cЏ°
 *
__«me
, 
__ty≥
)

266 
__THROW
 
	`__nЏnuќ
 ((1));

269 
	$Чcыss
 (
__cЏ°
 *
__«me
, 
__ty≥
)

270 
__THROW
 
	`__nЏnuќ
 ((1));

273 #ifdeа
__USE_ATFILE


277 
	$зcыsІt
 (
__fd
, 
__cЏ°
 *
__fЮe
, 
__ty≥
, 
__жag
)

278 
__THROW
 
	`__nЏnuќ
 ((2)и
__wur
;

283 #iвdef 
_STDIO_H


284 
	#SEEK_SET
 0

	)

285 
	#SEEK_CUR
 1

	)

286 
	#SEEK_END
 2

	)

289 #iа
defЪed
 
__USE_BSD
 && !defЪed 
L_SET


291 
	#L_SET
 
SEEK_SET


	)

292 
	#L_INCR
 
SEEK_CUR


	)

293 
	#L_XTND
 
SEEK_END


	)

302 #iвdeа
__USE_FILE_OFFSET64


303 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whТы
и
__THROW
;

305 #ifdeа
__REDIRECT_NTH


306 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

307 (
__fd
, 
__off64_t
 
__off£t
, 
__whТы
),

308 
l£ek64
);

310 
	#l£ek
 
l£ek64


	)

313 #ifdeа
__USE_LARGEFILE64


314 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whТы
)

315 
__THROW
;

322 
	`юo£
 (
__fd
);

329 
ssize_t
 
	$їad
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
и
__wur
;

335 
ssize_t
 
	$wrЩe
 (
__fd
, 
__cЏ°
 *
__buf
, 
size_t
 
__n
и
__wur
;

337 #ifdeа
__USE_UNIX98


338 #iвdeа
__USE_FILE_OFFSET64


345 
ssize_t
 
	$іЧd
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

346 
__off_t
 
__off£t
и
__wur
;

353 
ssize_t
 
	$pwrЩe
 (
__fd
, 
__cЏ°
 *
__buf
, 
size_t
 
__n
,

354 
__off_t
 
__off£t
и
__wur
;

356 #ifdeа
__REDIRECT


357 
ssize_t
 
	`__REDIRECT
 (
іЧd
, (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

358 
__off64_t
 
__off£t
),

359 
іЧd64
и
__wur
;

360 
ssize_t
 
	`__REDIRECT
 (
pwrЩe
, (
__fd
, 
__cЏ°
 *
__buf
,

361 
size_t
 
__nbyЛs
, 
__off64_t
 
__off£t
),

362 
pwrЩe64
и
__wur
;

364 
	#іЧd
 
іЧd64


	)

365 
	#pwrЩe
 
pwrЩe64


	)

369 #ifdeа
__USE_LARGEFILE64


373 
ssize_t
 
	$іЧd64
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

374 
__off64_t
 
__off£t
и
__wur
;

377 
ssize_t
 
	$pwrЩe64
 (
__fd
, 
__cЏ°
 *
__buf
, 
size_t
 
__n
,

378 
__off64_t
 
__off£t
и
__wur
;

386 
	$pЭe
 (
__pЭedes
[2]и
__THROW
 
__wur
;

388 #ifdeа
__USE_GNU


391 
	$pЭe2
 (
__pЭedes
[2], 
__жags
и
__THROW
 
__wur
;

401 
	$Ѓђm
 (
__£cЏds
и
__THROW
;

413 
	`¶Уp
 (
__£cЏds
);

415 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


420 
__u£cЏds_t
 
	$uЃђm
 (
__u£cЏds_t
 
__vЃue
, __u£cЏds_И
__ЪЛrvЃ
)

421 
__THROW
;

428 
	`u¶Уp
 (
__u£cЏds_t
 
__u£cЏds
);

437 
	`Јu£
 ();

441 
	$chown
 (
__cЏ°
 *
__fЮe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

442 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

444 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


446 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
и
__THROW
 
__wur
;

451 
	$lchown
 (
__cЏ°
 *
__fЮe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

452 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

456 #ifdeа
__USE_ATFILE


459 
	$fchow«t
 (
__fd
, 
__cЏ°
 *
__fЮe
, 
__uid_t
 
__ow√r
,

460 
__gid_t
 
__group
, 
__жag
)

461 
__THROW
 
	`__nЏnuќ
 ((2)и
__wur
;

465 
	$chdЬ
 (
__cЏ°
 *
__Јth
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

467 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


469 
	$fchdЬ
 (
__fd
и
__THROW
 
__wur
;

479 *
	$gСcwd
 (*
__buf
, 
size_t
 
__size
и
__THROW
 
__wur
;

481 #ifdef 
__USE_GNU


485 *
	$gС_cuЉТt_dЬ_«me
 (и
__THROW
;

488 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


492 *
	$gСwd
 (*
__buf
)

493 
__THROW
 
	`__nЏnuќ
 ((1)и
__©МibuЛ_dХї€Лd__
 
__wur
;

498 
	$dup
 (
__fd
и
__THROW
 
__wur
;

501 
	$dup2
 (
__fd
, 
__fd2
и
__THROW
;

503 #ifdeа
__USE_GNU


506 
	$dup3
 (
__fd
, 
__fd2
, 
__жags
и
__THROW
;

510 **
__ТvЬЏ
;

511 #ifdeа
__USE_GNU


512 **
ТvЬЏ
;

518 
	$execve
 (
__cЏ°
 *
__Јth
, *__cЏ° 
__ђgv
[],

519 *
__cЏ°
 
__Тvp
[]и
__THROW
 
	`__nЏnuќ
 ((1));

521 #ifdeа
__USE_XOPEN2K8


524 
	$гxecve
 (
__fd
, *
__cЏ°
 
__ђgv
[], *__cЏ° 
__Тvp
[])

525 
__THROW
;

530 
	$execv
 (
__cЏ°
 *
__Јth
, *__cЏ° 
__ђgv
[])

531 
__THROW
 
	`__nЏnuќ
 ((1));

535 
	$exeюe
 (
__cЏ°
 *
__Јth
, __cЏ° *
__ђg
, ...)

536 
__THROW
 
	`__nЏnuќ
 ((1));

540 
	$exeю
 (
__cЏ°
 *
__Јth
, __cЏ° *
__ђg
, ...)

541 
__THROW
 
	`__nЏnuќ
 ((1));

545 
	$execvp
 (
__cЏ°
 *
__fЮe
, *__cЏ° 
__ђgv
[])

546 
__THROW
 
	`__nЏnuќ
 ((1));

551 
	$exeюp
 (
__cЏ°
 *
__fЮe
, __cЏ° *
__ђg
, ...)

552 
__THROW
 
	`__nЏnuќ
 ((1));

555 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN


557 
	$niы
 (
__Ъc
и
__THROW
 
__wur
;

562 
	$_exЩ
 (
__°©us
и
	`__©МibuЛ__
 ((
__n№СuЇ__
));

568 
	~<bЩs/cЏвame.h
>

571 
	$ЈthcЏf
 (
__cЏ°
 *
__Јth
, 
__«me
)

572 
__THROW
 
	`__nЏnuќ
 ((1));

575 
	$е©hcЏf
 (
__fd
, 
__«me
и
__THROW
;

578 
	$syscЏf
 (
__«me
и
__THROW
;

580 #ifdef 
__USE_POSIX2


582 
size_t
 
	$cЏf°r
 (
__«me
, *
__buf
, 
size_t
 
__Ћn
и
__THROW
;

587 
__pid_t
 
	$gСpid
 (и
__THROW
;

590 
__pid_t
 
	$gСµid
 (и
__THROW
;

594 #iвdeа
__FAVOR_BSD


595 
__pid_t
 
	$gСpgљ
 (и
__THROW
;

597 #ifdeа
__REDIRECT_NTH


598 
__pid_t
 
	`__REDIRECT_NTH
 (
gСpgљ
, (__pid_И
__pid
), 
__gСpgid
);

600 
	#gСpgљ
 
__gСpgid


	)

605 
__pid_t
 
	$__gСpgid
 (
__pid_t
 
__pid
и
__THROW
;

606 #ifdeа
__USE_XOPEN_EXTENDED


607 
__pid_t
 
	$gСpgid
 (
__pid_t
 
__pid
и
__THROW
;

614 
	$£Нgid
 (
__pid_t
 
__pid
, __pid_И
__pgid
и
__THROW
;

616 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


627 #iвdeа
__FAVOR_BSD


631 
	$£Нgљ
 (и
__THROW
;

636 #ifdeа
__REDIRECT_NTH


637 
	`__REDIRECT_NTH
 (
£Нgљ
, (
__pid_t
 
__pid
, __pid_И
__pgљ
), 
£Нgid
);

639 
	#£Нgљ
 
£Нgid


	)

648 
__pid_t
 
	$£tsid
 (и
__THROW
;

650 #ifdeа
__USE_XOPEN_EXTENDED


652 
__pid_t
 
	$gСsid
 (
__pid_t
 
__pid
и
__THROW
;

656 
__uid_t
 
	$gСuid
 (и
__THROW
;

659 
__uid_t
 
	$gСeuid
 (и
__THROW
;

662 
__gid_t
 
	$gСgid
 (и
__THROW
;

665 
__gid_t
 
	$gСegid
 (и
__THROW
;

670 
	$gСgroups
 (
__size
, 
__gid_t
 
__li°
[]и
__THROW
 
__wur
;

672 #ifdef 
__USE_GNU


674 
	$group_membФ
 (
__gid_t
 
__gid
и
__THROW
;

681 
	$£tuid
 (
__uid_t
 
__uid
и
__THROW
;

683 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


686 
	$£Мeuid
 (
__uid_t
 
__ruid
, __uid_И
__euid
и
__THROW
;

689 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN2K


691 
	$£Лuid
 (
__uid_t
 
__uid
и
__THROW
;

698 
	$£tgid
 (
__gid_t
 
__gid
и
__THROW
;

700 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


703 
	$£Мegid
 (
__gid_t
 
__rgid
, __gid_И
__egid
и
__THROW
;

706 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN2K


708 
	$£Лgid
 (
__gid_t
 
__gid
и
__THROW
;

711 #ifdeа
__USE_GNU


714 
	$gСїsuid
 (
__uid_t
 *
__ruid
, __uid_И*
__euid
, __uid_И*
__suid
)

715 
__THROW
;

719 
	$gСїsgid
 (
__gid_t
 *
__rgid
, __gid_И*
__egid
, __gid_И*
__sgid
)

720 
__THROW
;

724 
	$£Мesuid
 (
__uid_t
 
__ruid
, __uid_И
__euid
, __uid_И
__suid
)

725 
__THROW
;

729 
	$£Мesgid
 (
__gid_t
 
__rgid
, __gid_И
__egid
, __gid_И
__sgid
)

730 
__THROW
;

737 
__pid_t
 
	$f№k
 (и
__THROW
;

739 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


744 
__pid_t
 
	$vf№k
 (и
__THROW
;

750 *
	$Йy«me
 (
__fd
и
__THROW
;

754 
	$Йy«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
)

755 
__THROW
 
	`__nЏnuќ
 ((2)и
__wur
;

759 
	$iІЙy
 (
__fd
и
__THROW
;

761 #iа
defЪed
 
__USE_BSD
 \

762 || (
defЪed
 
__USE_XOPEN_EXTENDED
 && !defЪed 
__USE_UNIX98
)

765 
	$Йy¶ў
 (и
__THROW
;

770 
	$lЪk
 (
__cЏ°
 *
__дom
, __cЏ° *
__to
)

771 
__THROW
 
	`__nЏnuќ
 ((1, 2)и
__wur
;

773 #ifdeа
__USE_ATFILE


776 
	$lЪk©
 (
__дomfd
, 
__cЏ°
 *
__дom
, 
__tofd
,

777 
__cЏ°
 *
__to
, 
__жags
)

778 
__THROW
 
	`__nЏnuќ
 ((2, 4)и
__wur
;

781 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_XOPEN2K


783 
	$symlЪk
 (
__cЏ°
 *
__дom
, __cЏ° *
__to
)

784 
__THROW
 
	`__nЏnuќ
 ((1, 2)и
__wur
;

789 
ssize_t
 
	$їadlЪk
 (
__cЏ°
 *
__ї°riщ
 
__Јth
,

790 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
)

791 
__THROW
 
	`__nЏnuќ
 ((1, 2)и
__wur
;

794 #ifdeа
__USE_ATFILE


796 
	$symlЪk©
 (
__cЏ°
 *
__дom
, 
__tofd
,

797 
__cЏ°
 *
__to
и
__THROW
 
	`__nЏnuќ
 ((1, 3)и
__wur
;

800 
ssize_t
 
	$їadlЪk©
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__Јth
,

801 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
)

802 
__THROW
 
	`__nЏnuќ
 ((2, 3)и
__wur
;

806 
	$u∆Ъk
 (
__cЏ°
 *
__«me
и
__THROW
 
	`__nЏnuќ
 ((1));

808 #ifdeа
__USE_ATFILE


810 
	$u∆Ъk©
 (
__fd
, 
__cЏ°
 *
__«me
, 
__жag
)

811 
__THROW
 
	`__nЏnuќ
 ((2));

815 
	$rmdЬ
 (
__cЏ°
 *
__Јth
и
__THROW
 
	`__nЏnuќ
 ((1));

819 
__pid_t
 
	$tcgСpgљ
 (
__fd
и
__THROW
;

822 
	$tc£Нgљ
 (
__fd
, 
__pid_t
 
__pgљ_id
и
__THROW
;

829 *
	`gСlogЪ
 ();

830 #iа
defЪed
 
__USE_REENTRANT
 || defЪed 
__USE_POSIX199506


837 
	$gСlogЪ_r
 (*
__«me
, 
size_t
 
__«me_Ћn
и
	`__nЏnuќ
 ((1));

840 #ifdef 
__USE_BSD


842 
	$£ОogЪ
 (
__cЏ°
 *
__«me
и
__THROW
 
	`__nЏnuќ
 ((1));

846 #ifdef 
__USE_POSIX2


850 
	#__√ed_gСЁt


	)

851 
	~<gСЁt.h
>

855 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_UNIX98


859 
	$gСho°«me
 (*
__«me
, 
size_t
 
__Ћn
и
__THROW
 
	`__nЏnuќ
 ((1));

863 #iа
defЪed
 
__USE_BSD
 || (defЪed 
__USE_XOPEN
 && !defЪed 
__USE_UNIX98
)

866 
	$£tho°«me
 (
__cЏ°
 *
__«me
, 
size_t
 
__Ћn
)

867 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

871 
	$£tho°id
 (
__id
и
__THROW
 
__wur
;

877 
	$gСdomaЪ«me
 (*
__«me
, 
size_t
 
__Ћn
)

878 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

879 
	$£tdomaЪ«me
 (
__cЏ°
 *
__«me
, 
size_t
 
__Ћn
)

880 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

886 
	$vh™gup
 (и
__THROW
;

889 
	$їvoke
 (
__cЏ°
 *
__fЮe
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

897 
	$іofЮ
 (*
__Іmґe_bufгr
, 
size_t
 
__size
,

898 
size_t
 
__off£t
, 
__s€Ћ
)

899 
__THROW
 
	`__nЏnuќ
 ((1));

905 
	$acщ
 (
__cЏ°
 *
__«me
и
__THROW
;

909 *
	$gСu£rshЦl
 (и
__THROW
;

910 
	$Тdu£rshЦl
 (и
__THROW
;

911 
	$£tu£rshЦl
 (и
__THROW
;

917 
	$dЂmЏ
 (
__nochdЬ
, 
__noюo£
и
__THROW
 
__wur
;

921 #iа
defЪed
 
__USE_BSD
 || (defЪed 
__USE_XOPEN
 && !defЪed 
__USE_XOPEN2K
)

924 
	$chroў
 (
__cЏ°
 *
__Јth
и
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

928 *
	$gСЈss
 (
__cЏ°
 *
__іom±
и
	`__nЏnuќ
 ((1));

932 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN
 || defЪed 
__USE_XOPEN2K


937 
	`fsync
 (
__fd
);

941 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


944 
	`gСho°id
 ();

947 
	$sync
 (и
__THROW
;

952 
	$gСЈgesize
 (и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

957 
	$gСdПbЋsize
 (и
__THROW
;

961 #iвdeа
__USE_FILE_OFFSET64


962 
	$Мun€Л
 (
__cЏ°
 *
__fЮe
, 
__off_t
 
__Ћngth
)

963 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

965 #ifdeа
__REDIRECT_NTH


966 
	`__REDIRECT_NTH
 (
Мun€Л
,

967 (
__cЏ°
 *
__fЮe
, 
__off64_t
 
__Ћngth
),

968 
Мun€Л64
и
	`__nЏnuќ
 ((1)и
__wur
;

970 
	#Мun€Л
 
Мun€Л64


	)

973 #ifdeа
__USE_LARGEFILE64


974 
	$Мun€Л64
 (
__cЏ°
 *
__fЮe
, 
__off64_t
 
__Ћngth
)

975 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

980 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_XOPEN2K


983 #iвdeа
__USE_FILE_OFFSET64


984 
	$бrun€Л
 (
__fd
, 
__off_t
 
__Ћngth
и
__THROW
 
__wur
;

986 #ifdeа
__REDIRECT_NTH


987 
	`__REDIRECT_NTH
 (
бrun€Л
, (
__fd
, 
__off64_t
 
__Ћngth
),

988 
бrun€Л64
и
__wur
;

990 
	#бrun€Л
 
бrun€Л64


	)

993 #ifdeа
__USE_LARGEFILE64


994 
	$бrun€Л64
 (
__fd
, 
__off64_t
 
__Ћngth
и
__THROW
 
__wur
;

1000 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED


1004 
	$brk
 (*
__addr
и
__THROW
 
__wur
;

1010 *
	$sbrk
 (
ЪНМ_t
 
__dЦП
и
__THROW
;

1014 #ifdeа
__USE_MISC


1025 
	$sys€ќ
 (
__syҐo
, ...и
__THROW
;

1030 #iа(
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
и&& !defЪed 
F_LOCK


1042 
	#F_ULOCK
 0

	)

1043 
	#F_LOCK
 1

	)

1044 
	#F_TLOCK
 2

	)

1045 
	#F_TEST
 3

	)

1047 #iвdeа
__USE_FILE_OFFSET64


1048 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Ћn
и
__wur
;

1050 #ifdeа
__REDIRECT


1051 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Ћn
),

1052 
lockf64
и
__wur
;

1054 
	#lockf
 
lockf64


	)

1057 #ifdeа
__USE_LARGEFILE64


1058 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Ћn
и
__wur
;

1063 #ifdeа
__USE_GNU


1068 
	#TEMP_FAILURE_RETRY
(
exіessiЏ
) \

1069 (
__exЛnsiЏ__
 \

1070 ({ 
__їsu…
; \

1071 dЎ
__їsu…
 = (и(
exіessiЏ
); \

1072 
__їsu…
 =р-1L && 
ФЇo
 =р
EINTR
); \

1073 
__їsu…
; 
	}
}))

	)

1076 #iа
defЪed
 
__USE_POSIX199309
 || defЪed 
__USE_UNIX98


1079 
fd©async
 (
__fЮdes
);

1085 #ifdef 
__USE_XOPEN


1087 *
	$ьy±
 (
__cЏ°
 *
__key
, __cЏ° *
__І…
)

1088 
__THROW
 
	`__nЏnuќ
 ((1, 2));

1092 
	$Тьy±
 (*
__block
, 
__edжag
и
__THROW
 
	`__nЏnuќ
 ((1));

1099 
	$swab
 (
__cЏ°
 *
__ї°riщ
 
__дom
, *__ї°riщ 
__to
,

1100 
ssize_t
 
__n
и
__THROW
 
	`__nЏnuќ
 ((1, 2));

1106 #ifdeа
__USE_XOPEN


1108 *
	$щФmid
 (*
__s
и
__THROW
;

1113 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


1114 
	~<bЩs/uni°d.h
>

1117 
__END_DECLS


	@/usr/include/zlib.h

31 #iвdeа
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zcЏf.h
"

36 #ifdeа
__эlu•lus


40 
	#ZLIB_VERSION
 "1.2.3.3"

	)

41 
	#ZLIB_VERNUM
 0x1233

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tЃloc_func
и
	tOF
((
	tvoidpf
 
	tЁaque
, 
	tuIЅ
 
	tЩems
, uIЅ 
	tsize
));

81 (*
дУ_func
и
	tOF
((
	tvoidpf
 
	tЁaque
, voidpа
	taddїss
));

83 
ЪЛЇЃ_°©e
;

85 
	sz_°їam_s
 {

86 
ByЛf
 *
√xt_Ъ
;

87 
uIЅ
 
avaЮ_Ъ
;

88 
uLЏg
 
tўЃ_Ъ
;

90 
ByЛf
 *
√xt_out
;

91 
uIЅ
 
avaЮ_out
;

92 
uLЏg
 
tўЃ_out
;

94 *
msg
;

95 
ЪЛЇЃ_°©e
 
FAR
 *
°©e
;

97 
Ѓloc_func
 
zЃloc
;

98 
дУ_func
 
zдУ
;

99 
voidpf
 
Ёaque
;

101 
d©a_ty≥
;

102 
uLЏg
 
adЋr
;

103 
uLЏg
 
ї£rved
;

104 } 
	tz_°їam
;

106 
z_°їam
 
	tFAR
 *
	tz_°їamp
;

112 
	sgz_hЧdФ_s
 {

113 
Лxt
;

114 
uLЏg
 
time
;

115 
xжags
;

116 
os
;

117 
ByЛf
 *
exМa
;

118 
uIЅ
 
exМa_Ћn
;

119 
uIЅ
 
exМa_max
;

120 
ByЛf
 *
«me
;

121 
uIЅ
 
«me_max
;

122 
ByЛf
 *
commТt
;

123 
uIЅ
 
comm_max
;

124 
hьc
;

125 
dЏe
;

127 } 
	tgz_hЧdФ
;

129 
gz_hЧdФ
 
	tFAR
 *
	tgz_hЧdФp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vФsiЏ
 
	`zlibVФsiЏ
()

	)

215 
ZEXTERN
 cЏ° * 
ZEXPORT
 
zlibVФsiЏ
 
OF
(());

245 
ZEXTERN
 
ZEXPORT
 
deж©e
 
OF
((
z_°їamp
 
°rm
, 
жush
));

331 
ZEXTERN
 
ZEXPORT
 
deж©eEnd
 
OF
((
z_°їamp
 
°rm
));

370 
ZEXTERN
 
ZEXPORT
 
Ъж©e
 
OF
((
z_°їamp
 
°rm
, 
жush
));

469 
ZEXTERN
 
ZEXPORT
 
Ъж©eEnd
 
OF
((
z_°їamp
 
°rm
));

545 
ZEXTERN
 
ZEXPORT
 
deж©eSСDiщiЏђy
 
OF
((
z_°їamp
 
°rm
,

546 cЏ° 
ByЛf
 *
diщiЏђy
,

547 
uIЅ
 
diщLТgth
));

584 
ZEXTERN
 
ZEXPORT
 
deж©eCЁy
 
OF
((
z_°їamp
 
de°
,

585 
z_°їamp
 
sourы
));

602 
ZEXTERN
 
ZEXPORT
 
deж©eRe£t
 
OF
((
z_°їamp
 
°rm
));

613 
ZEXTERN
 
ZEXPORT
 
deж©ePђams
 
OF
((
z_°їamp
 
°rm
,

614 
ЋvЦ
,

615 
°њЛgy
));

634 
ZEXTERN
 
ZEXPORT
 
deж©eTu√
 
OF
((
z_°їamp
 
°rm
,

635 
good_Ћngth
,

636 
max_ѕzy
,

637 
niы_Ћngth
,

638 
max_chaЪ
));

651 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
deж©eBound
 
OF
((
z_°їamp
 
°rm
,

652 
uLЏg
 
sourыLТ
));

661 
ZEXTERN
 
ZEXPORT
 
deж©ePrime
 
OF
((
z_°їamp
 
°rm
,

662 
bЩs
,

663 
vЃue
));

677 
ZEXTERN
 
ZEXPORT
 
deж©eSСHЧdФ
 
OF
((
z_°їamp
 
°rm
,

678 
gz_hЧdФp
 
hЧd
));

748 
ZEXTERN
 
ZEXPORT
 
Ъж©eSСDiщiЏђy
 
OF
((
z_°їamp
 
°rm
,

749 cЏ° 
ByЛf
 *
diщiЏђy
,

750 
uIЅ
 
diщLТgth
));

770 
ZEXTERN
 
ZEXPORT
 
Ъж©eSync
 
OF
((
z_°їamp
 
°rm
));

785 
ZEXTERN
 
ZEXPORT
 
Ъж©eCЁy
 
OF
((
z_°їamp
 
de°
,

786 
z_°їamp
 
sourы
));

801 
ZEXTERN
 
ZEXPORT
 
Ъж©eRe£t
 
OF
((
z_°їamp
 
°rm
));

811 
ZEXTERN
 
ZEXPORT
 
Ъж©ePrime
 
OF
((
z_°їamp
 
°rm
,

812 
bЩs
,

813 
vЃue
));

827 
ZEXTERN
 
ZEXPORT
 
Ъж©eGСHЧdФ
 
OF
((
z_°їamp
 
°rm
,

828 
gz_hЧdФp
 
hЧd
));

889 (*
Ъ_func
и
	tOF
((
	tFAR
 *, FAR * FAR *));

890 (*
out_func
и
	tOF
((
	tFAR
 *, FAR *, ));

892 
ZEXTERN
 
ZEXPORT
 
Ъж©eBack
 
OF
((
z_°їamp
 
°rm
,

893 
Ъ_func
 
Ъ
, 
FAR
 *
Ъ_desc
,

894 
out_func
 
out
, 
FAR
 *
out_desc
));

961 
ZEXTERN
 
ZEXPORT
 
Ъж©eBackEnd
 
OF
((
z_°їamp
 
°rm
));

969 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
zlibCompЮeFѕgs
 
OF
(());

1021 
ZEXTERN
 
ZEXPORT
 
comіess
 
OF
((
ByЛf
 *
de°
, 
uLЏgf
 *
de°LТ
,

1022 cЏ° 
ByЛf
 *
sourы
, 
uLЏg
 
sourыLТ
));

1036 
ZEXTERN
 
ZEXPORT
 
comіess2
 
OF
((
ByЛf
 *
de°
, 
uLЏgf
 *
de°LТ
,

1037 cЏ° 
ByЛf
 *
sourы
, 
uLЏg
 
sourыLТ
,

1038 
ЋvЦ
));

1052 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
comіessBound
 
OF
((uLЏg 
sourыLТ
));

1059 
ZEXTERN
 
ZEXPORT
 
uncomіess
 
OF
((
ByЛf
 *
de°
, 
uLЏgf
 *
de°LТ
,

1060 cЏ° 
ByЛf
 *
sourы
, 
uLЏg
 
sourыLТ
));

1078 
voidp
 
	tgzFЮe
;

1098 
ZEXTERN
 
gzFЮe
 
ZEXPORT
 
gzdЁТ
 
OF
((
fd
, cЏ° *
mode
));

1111 
ZEXTERN
 
ZEXPORT
 
gz£Нђams
 
OF
((
gzFЮe
 
fЮe
, 
ЋvЦ
, 
°њЛgy
));

1119 
ZEXTERN
 
ZEXPORT
 
gzїad
 
OF
((
gzFЮe
 
fЮe
, 
voidp
 
buf
, 
Ћn
));

1127 
ZEXTERN
 
ZEXPORT
 
gzwrЩe
 
OF
((
gzFЮe
 
fЮe
,

1128 
voidpc
 
buf
, 
Ћn
));

1135 
ZEXTERN
 
ZEXPORTVA
 
gzіЪtf
 
OF
((
gzFЮe
 
fЮe
, cЏ° *
f№m©
, ...));

1148 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFЮe
 
fЮe
, cЏ° *
s
));

1155 
ZEXTERN
 * 
ZEXPORT
 
gzgСs
 
OF
((
gzFЮe
 
fЮe
, *
buf
, 
Ћn
));

1164 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFЮe
 
fЮe
, 
c
));

1170 
ZEXTERN
 
ZEXPORT
 
gzgСc
 
OF
((
gzFЮe
 
fЮe
));

1176 
ZEXTERN
 
ZEXPORT
 
gzungСc
 
OF
((
c
, 
gzFЮe
 
fЮe
));

1186 
ZEXTERN
 
ZEXPORT
 
gzжush
 
OF
((
gzFЮe
 
fЮe
, 
жush
));

1215 
ZEXTERN
 
ZEXPORT
 
gzїwЪd
 
OF
((
gzFЮe
 
fЮe
));

1232 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFЮe
 
fЮe
));

1238 
ZEXTERN
 
ZEXPORT
 
gzdЬeщ
 
OF
((
gzFЮe
 
fЮe
));

1244 
ZEXTERN
 
ZEXPORT
 
gzюo£
 
OF
((
gzFЮe
 
fЮe
));

1252 
ZEXTERN
 cЏ° * 
ZEXPORT
 
gzФr№
 
OF
((
gzFЮe
 
fЮe
, *
ФЇum
));

1264 
ZEXTERN
 
ZEXPORT
 
gzюЧїЉ
 
OF
((
gzFЮe
 
fЮe
));

1279 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
adЋr32
 
OF
((uLЏg 
adЋr
, cЏ° 
ByЛf
 *
buf
, 
uIЅ
 
Ћn
));

1305 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
ьc32
 
OF
((uLЏg 
ьc
, cЏ° 
ByЛf
 *
buf
, 
uIЅ
 
Ћn
));

1337 
ZEXTERN
 
ZEXPORT
 
deж©eInЩ_
 
OF
((
z_°їamp
 
°rm
, 
ЋvЦ
,

1338 cЏ° *
vФsiЏ
, 
°їam_size
));

1339 
ZEXTERN
 
ZEXPORT
 
Ъж©eInЩ_
 
OF
((
z_°їamp
 
°rm
,

1340 cЏ° *
vФsiЏ
, 
°їam_size
));

1341 
ZEXTERN
 
ZEXPORT
 
deж©eInЩ2_
 
OF
((
z_°їamp
 
°rm
, 
ЋvЦ
, 
mСhod
,

1342 
wЪdowBЩs
, 
memLevЦ
,

1343 
°њЛgy
, cЏ° *
vФsiЏ
,

1344 
°їam_size
));

1345 
ZEXTERN
 
ZEXPORT
 
Ъж©eInЩ2_
 
OF
((
z_°їamp
 
°rm
, 
wЪdowBЩs
,

1346 cЏ° *
vФsiЏ
, 
°їam_size
));

1347 
ZEXTERN
 
ZEXPORT
 
Ъж©eBackInЩ_
 
OF
((
z_°їamp
 
°rm
, 
wЪdowBЩs
,

1348 
FAR
 *
wЪdow
,

1349 cЏ° *
vФsiЏ
,

1350 
°їam_size
));

1351 
	#deж©eInЩ
(
°rm
, 
ЋvЦ
) \

1352 
	`deж©eInЩ_
((
°rm
), (
ЋvЦ
), 
ZLIB_VERSION
, (
z_°їam
))

	)

1353 
	#Ъж©eInЩ
(
°rm
) \

1354 
	`Ъж©eInЩ_
((
°rm
), 
ZLIB_VERSION
, (
z_°їam
))

	)

1355 
	#deж©eInЩ2
(
°rm
, 
ЋvЦ
, 
mСhod
, 
wЪdowBЩs
, 
memLevЦ
, 
°њЛgy
) \

1356 
	`deж©eInЩ2_
((
°rm
),(
ЋvЦ
),(
mСhod
),(
wЪdowBЩs
),(
memLevЦ
),\

1357 (
°њЛgy
), 
ZLIB_VERSION
, (
z_°їam
))

	)

1358 
	#Ъж©eInЩ2
(
°rm
, 
wЪdowBЩs
) \

1359 
	`Ъж©eInЩ2_
((
°rm
), (
wЪdowBЩs
), 
ZLIB_VERSION
, (
z_°їam
))

	)

1360 
	#Ъж©eBackInЩ
(
°rm
, 
wЪdowBЩs
, 
wЪdow
) \

1361 
	`Ъж©eBackInЩ_
((
°rm
), (
wЪdowBЩs
), (
wЪdow
), \

1362 
ZLIB_VERSION
, (
z_°їam
))

	)

1364 #iа
defЪed
(
_LARGEFILE64_SOURCE
)

1365 
	#z_off64_t
 
off64_t


	)

1367 #iа
_FILE_OFFSET_BITS
 == 64

1368 
	#z_off64_t
 
off_t


	)

1372 #iа
defЪed
(
_LARGEFILE64_SOURCE
и|| 
_FILE_OFFSET_BITS
 == 64

1373 
ZEXTERN
 
gzFЮe
 
ZEXPORT
 
gzЁТ64
 
OF
((const *, const *));

1374 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFЮe
, z_off64_t, ));

1375 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzЛќ64
 
OF
((
gzFЮe
));

1376 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
adЋr32_combЪe64
 
OF
((uLЏg, uLЏg, 
z_off64_t
));

1377 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
ьc32_combЪe64
 
OF
((uLЏg, uLЏg, 
z_off64_t
));

1380 #iа
_FILE_OFFSET_BITS
 == 64

1381 
	#gzЁТ
 
gzЁТ64


	)

1382 
	#gz£ek
 
gz£ek64


	)

1383 
	#gzЛќ
 
gzЛќ64


	)

1384 
	#adЋr32_combЪe
 
adЋr32_combЪe64


	)

1385 
	#ьc32_combЪe
 
ьc32_combЪe64


	)

1387 
ZEXTERN
 
gzFЮe
 
ZEXPORT
 
gzЁТ
 
OF
((const *, const *));

1388 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFЮe
, z_off_t, ));

1389 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzЛќ
 
OF
((
gzFЮe
));

1390 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
adЋr32_combЪe
 
OF
((uLЏg, uLЏg, 
z_off_t
));

1391 
ZEXTERN
 
uLЏg
 
ZEXPORT
 
ьc32_combЪe
 
OF
((uLЏg, uLЏg, 
z_off_t
));

1394 #iа!
defЪed
(
ZUTIL_H
и&& !defЪed(
NO_DUMMY_DECL
)

1395 
	sЪЛЇЃ_°©e
 {
dummy
;};

1398 
ZEXTERN
 cЏ° * 
ZEXPORT
 
zEЉ№
 
OF
(());

1399 
ZEXTERN
 
ZEXPORT
 
Ъж©eSyncPoЪt
 
OF
((
z_°їamp
));

1400 
ZEXTERN
 cЏ° 
uLЏgf
 * 
ZEXPORT
 
gС_ьc_ПbЋ
 
OF
(());

1401 
ZEXTERN
 
ZEXPORT
 
Ъж©eUndФmЪe
 
OF
((
z_°їamp
, ));

1403 #ifdeа
__эlu•lus


	@/usr/include/alloca.h

19 #iвdef 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<г©uїs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #undeа
Ѓlo€


33 *
	$Ѓlo€
 (
size_t
 
__size
и
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Ѓlo€
(
size
и
	`__buЮtЪ_Ѓlo€
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifdeа
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/byteswap.h

21 #iа!
defЪed
 
_BYTESWAP_H
 && !defЪed 
_NETINET_IN_H
 && !defЪed 
_ENDIAN_H


25 #iвdeа
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bЩs/w№dsize.h
>

31 
	#__bsw≠_cЏ°™t_16
(
x
) \

32 ((((
x
и>> 8и& 0xffи| (((xи& 0xffи<< 8))

	)

34 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exЛnsiЏ__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_cЏ°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "ф" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exЛnsiЏ__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_cЏ°™t_16
 (__x); }))

	)

55 
	#__bsw≠_cЏ°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
и& 0x0000ff00и<< 8и| (((xи& 0x000000ffи<< 24))

	)

59 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

60 #iа
__WORDSIZE
 =р64 || (
defЪed
 
__i486__
 || defЪed 
__≥Ѕium__
 \

61 || 
defЪed
 
	g__≥Ѕiumіo__
 || defЪed 
	g__≥Ѕium4__
 \

62 || 
defЪed
 
	g__k8__
 || defЪed 
	g__©hlЏ__
 \

63 || 
defЪed
 
	g__k6__
 || defЪed 
	g__nocЏa__
 \

64 || 
defЪed
 
	g__c№e2__
 || defЪed 
	g__geode__
 \

65 || 
defЪed
 
	g__amdзm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exЛnsiЏ__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_cЏ°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "ф" (
__v
и: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exЛnsiЏ__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_cЏ°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "ф" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exЛnsiЏ__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_cЏ°™t_32
 (__x); }))

	)

98 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_cЏ°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
и& 0x00000000000000ffuќи<< 56))

	)

110 #iа
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exЛnsiЏ__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_cЏ°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "ф" (
__v
и: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exЛnsiЏ__
 \

122 ({ uniЏ { 
__exЛnsiЏ__
 
__ќ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 iа(
	`__buЮtЪ_cЏ°™t_p
 (
x
)) \

125 
__r
.
__ќ
 = 
	`__bsw≠_cЏ°™t_64
 (
x
); \

128 
__w
.
__ќ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__ќ
; }))

	)

	@/usr/include/bits/confname.h

21 #iвdeа
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT
,

531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #iвdeа
_UNISTD_H


23 
	~<bЩs/w№dsize.h
>

43 #iа
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifdeа
_ERRNO_H


22 #undeа
EDOM


23 #undeа
EILSEQ


24 #undeа
ERANGE


25 
	~<lЪux/ФЇo.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #iвdeа
ECANCELED


32 
	#ECANCELED
 125

	)

36 #iвdeа
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #iвdeа
__ASSEMBLER__


43 *
	$__ФЇo_lo€tiЏ
 (и
__THROW
 
	`__©МibuЛ__
 ((
__cЏ°__
));

45 #iа!
defЪed
 
_LIBC
 || defЪed 
_LIBC_REENTRANT


47 
	#ФЇo
 (*
	`__ФЇo_lo€tiЏ
 ())

	)

52 #iа!
defЪed
 
_ERRNO_H
 && defЪed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #iвdef 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bЩs/w№dsize.h
>

26 #ifdeа
__USE_GNU


27 
	~<bЩs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifdeа
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #iа
defЪed
 
__USE_POSIX199309
 || defЪed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifdeа
__USE_LARGEFILE64


65 #iа
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #iа
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #iвdeа
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifdeа
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

111 #ifdeа
__USE_GNU


112 
	#F_SETLEASE
 1024

	)

113 
	#F_GETLEASE
 1025

	)

114 
	#F_NOTIFY
 1026

	)

115 
	#F_DUPFD_CLOEXEC
 1030

	)

120 
	#FD_CLOEXEC
 1

	)

123 
	#F_RDLCK
 0

	)

124 
	#F_WRLCK
 1

	)

125 
	#F_UNLCK
 2

	)

128 
	#F_EXLCK
 4

	)

129 
	#F_SHLCK
 8

	)

131 #ifdeа
__USE_BSD


133 
	#LOCK_SH
 1

	)

134 
	#LOCK_EX
 2

	)

135 
	#LOCK_NB
 4

	)

137 
	#LOCK_UN
 8

	)

140 #ifdeа
__USE_GNU


141 
	#LOCK_MAND
 32

	)

142 
	#LOCK_READ
 64

	)

143 
	#LOCK_WRITE
 128

	)

144 
	#LOCK_RW
 192

	)

147 #ifdeа
__USE_GNU


149 
	#DN_ACCESS
 0x00000001

	)

150 
	#DN_MODIFY
 0x00000002

	)

151 
	#DN_CREATE
 0x00000004

	)

152 
	#DN_DELETE
 0x00000008

	)

153 
	#DN_RENAME
 0x00000010

	)

154 
	#DN_ATTRIB
 0x00000020

	)

155 
	#DN_MULTISHOT
 0x80000000

	)

158 
	sжock


160 
	ml_ty≥
;

161 
	ml_whТы
;

162 #iвdeа
__USE_FILE_OFFSET64


163 
__off_t
 
	ml_°ђt
;

164 
__off_t
 
	ml_Ћn
;

166 
__off64_t
 
	ml_°ђt
;

167 
__off64_t
 
	ml_Ћn
;

169 
__pid_t
 
	ml_pid
;

172 #ifdeа
__USE_LARGEFILE64


173 
	sжock64


175 
	ml_ty≥
;

176 
	ml_whТы
;

177 
__off64_t
 
	ml_°ђt
;

178 
__off64_t
 
	ml_Ћn
;

179 
__pid_t
 
	ml_pid
;

185 #ifdef 
__USE_BSD


186 
	#FAPPEND
 
O_APPEND


	)

187 
	#FFSYNC
 
O_FSYNC


	)

188 
	#FASYNC
 
O_ASYNC


	)

189 
	#FNONBLOCK
 
O_NONBLOCK


	)

190 
	#FNDELAY
 
O_NDELAY


	)

194 #ifdeа
__USE_XOPEN2K


195 
	#POSIX_FADV_NORMAL
 0

	)

196 
	#POSIX_FADV_RANDOM
 1

	)

197 
	#POSIX_FADV_SEQUENTIAL
 2

	)

198 
	#POSIX_FADV_WILLNEED
 3

	)

199 
	#POSIX_FADV_DONTNEED
 4

	)

200 
	#POSIX_FADV_NOREUSE
 5

	)

204 #ifdeа
__USE_GNU


206 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

212 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

217 
	#SPLICE_F_MOVE
 1

	)

218 
	#SPLICE_F_NONBLOCK
 2

	)

221 
	#SPLICE_F_MORE
 4

	)

222 
	#SPLICE_F_GIFT
 8

	)

225 
	g__BEGIN_DECLS


227 #ifdeа
__USE_GNU


230 
ssize_t
 
	$їadahЧd
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__couЅ
)

231 
__THROW
;

235 
	`sync_fЮe_њnge
 (
__fd
, 
__off64_t
 
__дom
, __off64_И
__to
,

236 
__жags
);

240 
ssize_t
 
	`vm•liы
 (
__fdout
, cЏ° 
iovec
 *
__iov
,

241 
size_t
 
__couЅ
, 
__жags
);

244 
ssize_t
 
	`•liы
 (
__fdЪ
, 
__off64_t
 *
__offЪ
, 
__fdout
,

245 
__off64_t
 *
__offout
, 
size_t
 
__Ћn
,

246 
__жags
);

249 
ssize_t
 
	`Лe
 (
__fdЪ
, 
__fdout
, 
size_t
 
__Ћn
,

250 
__жags
);

253 #iвdeа
__USE_FILE_OFFSET64


254 
	`зќo€Л
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_И
__Ћn
);

256 #ifdeа
__REDIRECT


257 
	`__REDIRECT
 (
зќo€Л
, (
__fd
, 
__mode
, 
__off_t
 
__off£t
,

258 
__off_t
 
__Ћn
),

259 
зќo€Л64
);

261 
	#зќo€Л
 
зќo€Л64


	)

264 #ifdeа
__USE_LARGEFILE64


265 
	`зќo€Л64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

266 
__off64_t
 
__Ћn
);

270 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #iвdef 
_FCNTL_H


26 #iвdeа
__USE_FILE_OFFSET64


27 
	$__ЁТ_2
 (
__cЏ°
 *
__Јth
, 
__oжag
и
	`__nЏnuќ
 ((1));

28 
	`__REDIRECT
 (
__ЁТ_ЃЯs
, (
__cЏ°
 *
__Јth
, 
__oжag
, ...),

29 
ЁТ
и
	`__nЏnuќ
 ((1));

31 
	`__REDIRECT
 (
__ЁТ_2
, (
__cЏ°
 *
__Јth
, 
__oжag
),

32 
__ЁТ64_2
и
	`__nЏnuќ
 ((1));

33 
	`__REDIRECT
 (
__ЁТ_ЃЯs
, (
__cЏ°
 *
__Јth
, 
__oжag
, ...),

34 
ЁТ64
и
	`__nЏnuќ
 ((1));

36 
	`__Фr№deю
 (
__ЁТ_too_m™y_ђgs
,

38 
	`__Фr№deю
 (
__ЁТ_missЪg_mode
,

41 
__exЛЇ_Ѓways_ЪlЪe
 

42 
	$ЁТ
 (
__cЏ°
 *
__Јth
, 
__oжag
, ...)

44 iа(
	`__va_ђg_Јck_Ћn
 () > 1)

45 
	`__ЁТ_too_m™y_ђgs
 ();

47 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__oжag
))

49 iа((
__oжag
 & 
O_CREAT
и!р0 && 
	`__va_ђg_Јck_Ћn
 () < 1)

51 
	`__ЁТ_missЪg_mode
 ();

52  
	`__ЁТ_2
 (
__Јth
, 
__oжag
);

54  
	`__ЁТ_ЃЯs
 (
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

57 iа(
	`__va_ђg_Јck_Ћn
 () < 1)

58  
	`__ЁТ_2
 (
__Јth
, 
__oжag
);

60  
	`__ЁТ_ЃЯs
 (
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

61 
	}
}

64 #ifdeа
__USE_LARGEFILE64


65 
	$__ЁТ64_2
 (
__cЏ°
 *
__Јth
, 
__oжag
и
	`__nЏnuќ
 ((1));

66 
	`__REDIRECT
 (
__ЁТ64_ЃЯs
, (
__cЏ°
 *
__Јth
, 
__oжag
,

67 ...), 
ЁТ64
и
	`__nЏnuќ
 ((1));

68 
	`__Фr№deю
 (
__ЁТ64_too_m™y_ђgs
,

70 
	`__Фr№deю
 (
__ЁТ64_missЪg_mode
,

73 
__exЛЇ_Ѓways_ЪlЪe
 

74 
	$ЁТ64
 (
__cЏ°
 *
__Јth
, 
__oжag
, ...)

76 iа(
	`__va_ђg_Јck_Ћn
 () > 1)

77 
	`__ЁТ64_too_m™y_ђgs
 ();

79 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__oжag
))

81 iа((
__oжag
 & 
O_CREAT
и!р0 && 
	`__va_ђg_Јck_Ћn
 () < 1)

83 
	`__ЁТ64_missЪg_mode
 ();

84  
	`__ЁТ64_2
 (
__Јth
, 
__oжag
);

86  
	`__ЁТ64_ЃЯs
 (
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

89 iа(
	`__va_ђg_Јck_Ћn
 () < 1)

90  
	`__ЁТ64_2
 (
__Јth
, 
__oжag
);

92  
	`__ЁТ64_ЃЯs
 (
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

93 
	}
}

97 #ifdeа
__USE_ATFILE


98 #iвdeа
__USE_FILE_OFFSET64


99 
	$__ЁТ©_2
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__oжag
)

100 
	`__nЏnuќ
 ((2));

101 
	`__REDIRECT
 (
__ЁТ©_ЃЯs
, (
__fd
, 
__cЏ°
 *
__Јth
,

102 
__oжag
, ...), 
ЁТ©
)

103 
	`__nЏnuќ
 ((2));

105 
	`__REDIRECT
 (
__ЁТ©_2
, (
__fd
, 
__cЏ°
 *
__Јth
,

106 
__oжag
), 
__ЁТ©64_2
)

107 
	`__nЏnuќ
 ((2));

108 
	`__REDIRECT
 (
__ЁТ©_ЃЯs
, (
__fd
, 
__cЏ°
 *
__Јth
,

109 
__oжag
, ...), 
ЁТ©64
)

110 
	`__nЏnuќ
 ((2));

112 
	`__Фr№deю
 (
__ЁТ©_too_m™y_ђgs
,

114 
	`__Фr№deю
 (
__ЁТ©_missЪg_mode
,

117 
__exЛЇ_Ѓways_ЪlЪe
 

118 
	$ЁТ©
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__oжag
, ...)

120 iа(
	`__va_ђg_Јck_Ћn
 () > 1)

121 
	`__ЁТ©_too_m™y_ђgs
 ();

123 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__oжag
))

125 iа((
__oжag
 & 
O_CREAT
и!р0 && 
	`__va_ђg_Јck_Ћn
 () < 1)

127 
	`__ЁТ©_missЪg_mode
 ();

128  
	`__ЁТ©_2
 (
__fd
, 
__Јth
, 
__oжag
);

130  
	`__ЁТ©_ЃЯs
 (
__fd
, 
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

133 iа(
	`__va_ђg_Јck_Ћn
 () < 1)

134  
	`__ЁТ©_2
 (
__fd
, 
__Јth
, 
__oжag
);

136  
	`__ЁТ©_ЃЯs
 (
__fd
, 
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

137 
	}
}

140 #ifdeа
__USE_LARGEFILE64


141 
	$__ЁТ©64_2
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__oжag
)

142 
	`__nЏnuќ
 ((2));

143 
	`__REDIRECT
 (
__ЁТ©64_ЃЯs
, (
__fd
, 
__cЏ°
 *
__Јth
,

144 
__oжag
, ...), 
ЁТ©64
)

145 
	`__nЏnuќ
 ((2));

146 
	`__Фr№deю
 (
__ЁТ©64_too_m™y_ђgs
,

148 
	`__Фr№deю
 (
__ЁТ©64_missЪg_mode
,

151 
__exЛЇ_Ѓways_ЪlЪe
 

152 
	$ЁТ©64
 (
__fd
, 
__cЏ°
 *
__Јth
, 
__oжag
, ...)

154 iа(
	`__va_ђg_Јck_Ћn
 () > 1)

155 
	`__ЁТ©64_too_m™y_ђgs
 ();

157 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__oжag
))

159 iа((
__oжag
 & 
O_CREAT
и!р0 && 
	`__va_ђg_Јck_Ћn
 () < 1)

161 
	`__ЁТ©64_missЪg_mode
 ();

162  
	`__ЁТ©64_2
 (
__fd
, 
__Јth
, 
__oжag
);

164  
	`__ЁТ©64_ЃЯs
 (
__fd
, 
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

167 iа(
	`__va_ђg_Јck_Ћn
 () < 1)

168  
	`__ЁТ©64_2
 (
__fd
, 
__Јth
, 
__oжag
);

170  
	`__ЁТ©64_ЃЯs
 (
__fd
, 
__Јth
, 
__oжag
, 
	`__va_ђg_Јck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #iвdeа
_MATH_H


28 #iа
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buЮtЪ_huge_vЃ
())

	)

30 #Цiа
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exЛnsiЏ__
 0x1.0
p2047
)

	)

32 #Цiа
defЪed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exЛnsiЏ__
 \

36 ((uniЏ { 
__l
 
	`__©МibuЛ__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ТdЯn.h
>

43 uniЏ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vЃ_t
;

45 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


46 
	#__HUGE_VAL_byЛs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byЛs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7а}

	)

52 
__huge_vЃ_t
 
	g__huge_vЃ
 = { 
__HUGE_VAL_byЛs
 };

53 
	#HUGE_VAL
 (
__huge_vЃ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #iвdeа
_MATH_H


28 #iа
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buЮtЪ_huge_vЃf
())

	)

30 #Цiа
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exЛnsiЏ__
 0x1.0
p255f
)

	)

32 #Цiа
defЪed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exЛnsiЏ__
 \

36 ((uniЏ { 
__l
 
	`__©МibuЛ__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uniЏ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vЃf_t
;

43 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


44 
	#__HUGE_VALF_byЛs
 { 0x7f, 0x80, 0, 0 }

	)

46 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byЛs
 { 0, 0, 0x80, 0x7а}

	)

50 
__huge_vЃf_t
 
	g__huge_vЃf
 = { 
__HUGE_VALF_byЛs
 };

51 
	#HUGE_VALF
 (
__huge_vЃf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #iвdeа
_MATH_H


25 #iа
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buЮtЪ_huge_vЃl
())

	)

28 
	#HUGE_VALL
 ((и
HUGE_VAL
)

	)

	@/usr/include/bits/in.h

21 #iвdeа
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

73 
	#IP_PMTUDISC_PROBE
 3

	)

76 
	#SOL_IP
 0

	)

78 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

79 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

80 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_GNU


86 
	sЭ_Ёts


88 
Ъ_addr
 
	mЭ_d°
;

89 
	mЭ_Ёts
[40];

93 
	sЭ_mїqn


95 
Ъ_addr
 
	mimr_mu…Яddr
;

96 
Ъ_addr
 
	mimr_addїss
;

97 
	mimr_ifЪdex
;

101 
	sЪ_pktЪfo


103 
	mЭi_ifЪdex
;

104 
Ъ_addr
 
	mЭi_•ec_d°
;

105 
Ъ_addr
 
	mЭi_addr
;

112 
	#IPV6_ADDRFORM
 1

	)

113 
	#IPV6_2292PKTINFO
 2

	)

114 
	#IPV6_2292HOPOPTS
 3

	)

115 
	#IPV6_2292DSTOPTS
 4

	)

116 
	#IPV6_2292RTHDR
 5

	)

117 
	#IPV6_2292PKTOPTIONS
 6

	)

118 
	#IPV6_CHECKSUM
 7

	)

119 
	#IPV6_2292HOPLIMIT
 8

	)

121 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

123 
	#IPV6_NEXTHOP
 9

	)

124 
	#IPV6_AUTHHDR
 10

	)

125 
	#IPV6_UNICAST_HOPS
 16

	)

126 
	#IPV6_MULTICAST_IF
 17

	)

127 
	#IPV6_MULTICAST_HOPS
 18

	)

128 
	#IPV6_MULTICAST_LOOP
 19

	)

129 
	#IPV6_JOIN_GROUP
 20

	)

130 
	#IPV6_LEAVE_GROUP
 21

	)

131 
	#IPV6_ROUTER_ALERT
 22

	)

132 
	#IPV6_MTU_DISCOVER
 23

	)

133 
	#IPV6_MTU
 24

	)

134 
	#IPV6_RECVERR
 25

	)

135 
	#IPV6_V6ONLY
 26

	)

136 
	#IPV6_JOIN_ANYCAST
 27

	)

137 
	#IPV6_LEAVE_ANYCAST
 28

	)

138 
	#IPV6_IPSEC_POLICY
 34

	)

139 
	#IPV6_XFRM_POLICY
 35

	)

141 
	#IPV6_RECVPKTINFO
 49

	)

142 
	#IPV6_PKTINFO
 50

	)

143 
	#IPV6_RECVHOPLIMIT
 51

	)

144 
	#IPV6_HOPLIMIT
 52

	)

145 
	#IPV6_RECVHOPOPTS
 53

	)

146 
	#IPV6_HOPOPTS
 54

	)

147 
	#IPV6_RTHDRDSTOPTS
 55

	)

148 
	#IPV6_RECVRTHDR
 56

	)

149 
	#IPV6_RTHDR
 57

	)

150 
	#IPV6_RECVDSTOPTS
 58

	)

151 
	#IPV6_DSTOPTS
 59

	)

153 
	#IPV6_RECVTCLASS
 66

	)

154 
	#IPV6_TCLASS
 67

	)

157 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

158 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

159 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

160 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

163 
	#IPV6_PMTUDISC_DONT
 0

	)

164 
	#IPV6_PMTUDISC_WANT
 1

	)

165 
	#IPV6_PMTUDISC_DO
 2

	)

166 
	#IPV6_PMTUDISC_PROBE
 3

	)

169 
	#SOL_IPV6
 41

	)

170 
	#SOL_ICMPV6
 58

	)

173 
	#IPV6_RTHDR_LOOSE
 0

	)

174 
	#IPV6_RTHDR_STRICT
 1

	)

176 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

20 #iвdeа
_MATH_H


26 #iа
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buЮtЪ_Ъff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #iвdeа
_SYS_IOCTL_H


25 
	~<asm/ioщls.h
>

28 
	swЪsize


30 
	mws_row
;

31 
	mws_cё
;

32 
	mws_xpixЦ
;

33 
	mws_ypixЦ
;

36 
	#NCC
 8

	)

37 
	sЛrmio


39 
	mc_iжag
;

40 
	mc_oжag
;

41 
	mc_cжag
;

42 
	mc_lжag
;

43 
	mc_lЪe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #iвdeа
_SYS_IOCTL_H


24 
	~<asm/ioщls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891ш

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891Р

	)

47 
	#SIOCGIFMEM
 0x891а

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #iвdeа
_MATH_H


53 
_MdoubЋ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubЋ_
 
__x
));

57 
__MATHCALL
 (
asЪ
,, (
_MdoubЋ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubЋ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubЋ_
 
__y
, _MdoubЋ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubЋ_
 
__x
));

66 
__MATHCALL
 (
sЪ
,, (
_MdoubЋ_
 
__x
));

68 
__MATHCALL
 (
Пn
,, (
_MdoubЋ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubЋ_
 
__x
));

75 
__MATHCALL
 (
sЪh
,, (
_MdoubЋ_
 
__x
));

77 
__MATHCALL
 (
Пnh
,, (
_MdoubЋ_
 
__x
));

78 
	g_MdoubЋ_END_NAMESPACE


80 #ifdeа
__USE_GNU


82 
__MATHDECL
 (,
sЪcos
,,

83 (
_MdoubЋ_
 
__x
, _MdoubЋ_ *
__sЪx
, _MdoubЋ_ *
__cosx
));

86 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubЋ_
 
__x
));

91 
__MATHCALL
 (
asЪh
,, (
_MdoubЋ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubЋ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubЋ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubЋ_
 
__x
));

104 
__MATHCALL
 (
дexp
,, (
_MdoubЋ_
 
__x
, *
__expЏТt
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubЋ_
 
__x
, 
__expЏТt
));

110 
__MATHCALL
 (
log
,, (
_MdoubЋ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubЋ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ *
__ЭМ
));

117 
	g_MdoubЋ_END_NAMESPACE


119 #ifdeа
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubЋ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubЋ_
 
__x
));

126 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubЋ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubЋ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubЋ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifdeа
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubЋ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubЋ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubЋ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

157 
__MATHCALL
 (
sqє
,, (
_MdoubЋ_
 
__x
));

158 
	g_MdoubЋ_END_NAMESPACE


160 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN
 || defЪed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypў
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbє
,, (
_MdoubЋ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubЋ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
ыЮ
,, (
_MdoubЋ_
 
__x
), (
__cЏ°__
));

182 
__MATHCALLX
 (
зbs
,, (
_MdoubЋ_
 
__x
), (
__cЏ°__
));

185 
__MATHCALLX
 (
жo№
,, (
_MdoubЋ_
 
__x
), (
__cЏ°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

193 
__MATHDECL_1
 (,
__isЪf
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

196 
__MATHDECL_1
 (,
__fЪЩe
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

197 
	g_MdoubЋ_END_NAMESPACE


199 #ifdeа
__USE_MISC


202 
__MATHDECL_1
 (,
isЪf
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

205 
__MATHDECL_1
 (,
fЪЩe
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

208 
__MATHCALL
 (
dїm
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

212 
__MATHCALL
 (
signifi€nd
,, (
_MdoubЋ_
 
__x
));

215 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
cЁysign
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
), (
__cЏ°__
));

219 
	g__END_NAMESPACE_C99


222 #ifdeа
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__cЏ°
 *
__Пgb
), (
__cЏ°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__iҐ™
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

233 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
iҐ™
,, (
_MdoubЋ_
 
__vЃue
)и
__©МibuЛ__
 ((
__cЏ°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubЋ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubЋ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubЋ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubЋ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubЋ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubЋ_
));

247 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN
 || defЪed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
Фf
,, (
_MdoubЋ_
));

251 
__MATHCALL
 (
Фfc
,, (
_MdoubЋ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubЋ_
));

253 
	g__END_NAMESPACE_C99


256 #ifdeа
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubЋ_
));

260 
	g__END_NAMESPACE_C99


263 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubЋ_
));

268 #ifdeа
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubЋ_
, *
__signgamp
));

276 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
rЪt
,, (
_MdoubЋ_
 
__x
));

283 
__MATHCALLX
 (
√xПбФ
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
), (
__cЏ°__
));

284 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xЙowђd
,, (
_MdoubЋ_
 
__x
, 
__y
), (
__cЏ°__
));

289 
__MATHCALL
 (
їmaЪdФ
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

291 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_ISOC99


293 
__MATHCALL
 (
s€lbn
,, (
_MdoubЋ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
Юogb
,, (
_MdoubЋ_
 
__x
));

300 #ifdeа
__USE_ISOC99


302 
__MATHCALL
 (
s€lb 
,, (
_MdoubЋ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√ђbyЪt
,, (
_MdoubЋ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubЋ_
 
__x
), (
__cЏ°__
));

314 
__MATHCALLX
 (
Мunc
,, (
_MdoubЋ_
 
__x
), (
__cЏ°__
));

319 
__MATHCALL
 (
їmquo
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
ћЪt
,, (
_MdoubЋ_
 
__x
));

327 
__MATHDECL
 (,
ќrЪt
,, (
_MdoubЋ_
 
__x
));

331 
__MATHDECL
 (,
ћound
,, (
_MdoubЋ_
 
__x
));

332 
__MATHDECL
 (,
ќround
,, (
_MdoubЋ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

342 
__MATHCALL
 (
fmЪ
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
));

346 
__MATHDECL_1
 (, 
__еюassify
,, (
_MdoubЋ_
 
__vЃue
))

347 
__©МibuЛ__
 ((
__cЏ°__
));

350 
__MATHDECL_1
 (, 
__signbЩ
,, (
_MdoubЋ_
 
__vЃue
))

351 
__©МibuЛ__
 ((
__cЏ°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__y
, _MdoubЋ_ 
__z
));

358 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #iа
defЪed
 
__USE_MISC
 || defЪed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
s€lb
,, (
_MdoubЋ_
 
__x
, _MdoubЋ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #iа!
defЪed
 
_MATH_H
 && !defЪed 
_COMPLEX_H


23 #iа
defЪed
 
__USE_ISOC99
 && defЪed 
_MATH_H
 && !defЪed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bЩs/w№dsize.h
>

28 #iа
__WORDSIZE
 =р64 || (
defЪed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tжяt_t
;

32 
	tdoubЋ_t
;

38 
	tжяt_t
;

40 
	tdoubЋ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #iвdeа
_MATH_H


25 #iвdeа
__exЛЇ_ЪlЪe


26 
	#__MATH_INLINE
 
__ЪlЪe


	)

28 
	#__MATH_INLINE
 
__exЛЇ_ЪlЪe


	)

32 #iа
defЪed
 
__USE_ISOC99
 && defЪed 
__GNUC__
 && __GNUC__ >= 2

35 
__MATH_INLINE
 

36 
__NTH
 (
	$__signbЩf
 (
__x
))

38 
__exЛnsiЏ__
 uniЏ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

39  
__u
.
__i
 < 0;

40 
	}
}

41 
__MATH_INLINE
 

42 
__NTH
 (
	$__signbЩ
 (
__x
))

44 
__exЛnsiЏ__
 uniЏ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

45  
__u
.
__i
[1] < 0;

46 
	}
}

47 
__MATH_INLINE
 

48 
__NTH
 (
	$__signbЩl
 (
__x
))

50 
__exЛnsiЏ__
 uniЏ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

51  (
__u
.
__i
[2] & 0x8000) != 0;

52 
	}
}

	@/usr/include/bits/mman.h

20 #iвdeа
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifdeа
__USE_MISC


46 
	#MAP_TYPE
 0x0а

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifdeа
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifdeа
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifdeа
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifdeа
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

99 #ifdeа
__USE_XOPEN2K


100 
	#POSIX_MADV_NORMAL
 0

	)

101 
	#POSIX_MADV_RANDOM
 1

	)

102 
	#POSIX_MADV_SEQUENTIAL
 2

	)

103 
	#POSIX_MADV_WILLNEED
 3

	)

104 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #iвdeа
_MATH_H


27 #iа
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buЮtЪ_«nf
 (""))

	)

31 #Цiа
defЪed
 
__GNUC__


33 
	#NAN
 \

34 (
__exЛnsiЏ__
 \

35 ((uniЏ { 
__l
 
	`__©МibuЛ__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ТdЯn.h
>

42 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


43 
	#__«n_byЛs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


46 
	#__«n_byЛs
 { 0, 0, 0xc0, 0x7а}

	)

49 uniЏ { 
	m__c
[4]; 
	m__d
; } 
__«n_uniЏ


50 
	g__©МibuЛ_u£d__
 = { 
__«n_byЛs
 };

51 
	#NAN
 (
__«n_uniЏ
.
__d
)

	)

	@/usr/include/bits/netdb.h

19 #iвdeа
_NETDB_H


27 
	s√ЛЅ


29 *
	mn_«me
;

30 **
	mn_ЃЯ£s
;

31 
	mn_addєy≥
;

32 
uЪt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #iвdef 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifdeа
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifdeа
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifdeа
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #iа!
defЪed
 
__USE_XOPEN2K
 || defЪed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #iа!
defЪed
 
__USE_XOPEN2K
 || defЪed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bЩs/lo€l_lim.h
>

160 #iвdef 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #iвdef 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #iвdef 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #iвdef 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #iвdef 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #iвdef 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #iвdef 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #iвdef 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #iвdef 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #iвdef 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #iвdef 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #iвdef 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

93 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

99 
	#_POSIX_SEMAPHORES
 200809L

	)

102 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

105 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

106 
	#_POSIX_ASYNC_IO
 1

	)

108 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

110 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

113 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

116 
	#_LFS_LARGEFILE
 1

	)

117 
	#_LFS64_LARGEFILE
 1

	)

118 
	#_LFS64_STDIO
 1

	)

121 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

124 
	#_POSIX_CPUTIME
 0

	)

127 
	#_POSIX_THREAD_CPUTIME
 0

	)

130 
	#_POSIX_REGEXP
 1

	)

133 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

136 
	#_POSIX_SHELL
 1

	)

139 
	#_POSIX_TIMEOUTS
 200809L

	)

142 
	#_POSIX_SPIN_LOCKS
 200809L

	)

145 
	#_POSIX_SPAWN
 200809L

	)

148 
	#_POSIX_TIMERS
 200809L

	)

151 
	#_POSIX_BARRIERS
 200809L

	)

154 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

157 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

160 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

163 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

166 
	#_POSIX_ADVISORY_INFO
 200809L

	)

169 
	#_POSIX_IPV6
 200809L

	)

172 
	#_POSIX_RAW_SOCKETS
 200809L

	)

175 
	#_POSIX2_CHAR_TERM
 200809L

	)

178 
	#_POSIX_SPORADIC_SERVER
 -1

	)

179 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

182 
	#_POSIX_TRACE
 -1

	)

183 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

184 
	#_POSIX_TRACE_INHERIT
 -1

	)

185 
	#_POSIX_TRACE_LOG
 -1

	)

188 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #iвdeа
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bЩs/w№dsize.h
>

25 #iа
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hїad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Ѓign
;

57 } 
	t±hїad_©М_t
;

60 #iа
__WORDSIZE
 == 64

61 
	s__±hїad_ЪЛЇЃ_li°


63 
__±hїad_ЪЛЇЃ_li°
 *
	m__іev
;

64 
__±hїad_ЪЛЇЃ_li°
 *
	m__√xt
;

65 } 
	t__±hїad_li°_t
;

67 
	s__±hїad_ЪЛЇЃ_¶i°


69 
__±hїad_ЪЛЇЃ_¶i°
 *
	m__√xt
;

70 } 
	t__±hїad_¶i°_t
;

78 
	s__±hїad_muЛx_s


80 
	m__lock
;

81 
	m__couЅ
;

82 
	m__ow√r
;

83 #iа
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__kЪd
;

89 #iа
__WORDSIZE
 == 64

90 
	m__•Ъs
;

91 
__±hїad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exЛnsiЏ__
 union

97 
	m__•Ъs
;

98 
__±hїad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Ѓign
;

104 } 
	t±hїad_muЛx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Ѓign
;

110 } 
	t±hїad_muЛx©М_t
;

119 
	m__lock
;

120 
	m__fuЛx
;

121 
__exЛnsiЏ__
 
	m__tўЃ_£q
;

122 
__exЛnsiЏ__
 
	m__wakeup_£q
;

123 
__exЛnsiЏ__
 
	m__wokТ_£q
;

124 *
	m__muЛx
;

125 
	m__nwaЩФs
;

126 
	m__brяd€°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exЛnsiЏ__
 
	m__Ѓign
;

130 } 
	t±hїad_cЏd_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Ѓign
;

136 } 
	t±hїad_cЏd©М_t
;

140 
	t±hїad_key_t
;

144 
	t±hїad_Џы_t
;

147 #iа
defЪed
 
__USE_UNIX98
 || defЪed 
__USE_XOPEN2K


152 #iа
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_їadФs
;

157 
	m__їadФs_wakeup
;

158 
	m__wrЩФ_wakeup
;

159 
	m__ƒ_їadФs_queued
;

160 
	m__ƒ_wrЩФs_queued
;

161 
	m__wrЩФ
;

162 
	m__shђed
;

163 
	m__Јd1
;

164 
	m__Јd2
;

167 
	m__жags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_їadФs
;

174 
	m__їadФs_wakeup
;

175 
	m__wrЩФ_wakeup
;

176 
	m__ƒ_їadФs_queued
;

177 
	m__ƒ_wrЩФs_queued
;

180 
	m__жags
;

181 
	m__shђed
;

182 
	m__Јd1
;

183 
	m__Јd2
;

184 
	m__wrЩФ
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Ѓign
;

189 } 
	t±hїad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Ѓign
;

195 } 
	t±hїad_rwlock©М_t
;

199 #ifdeа
__USE_XOPEN2K


201 vё©ЮР
	t±hїad_•Ъlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Ѓign
;

210 } 
	t±hїad_bђrЫr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Ѓign
;

216 } 
	t±hїad_bђrЫњЙr_t
;

220 #iа
__WORDSIZE
 == 32

222 
	#__юЧnup_fщ_©МibuЛ
 
	`__©МibuЛ__
 ((
	`__їgЈrm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #iвdeа
_SYS_RESOURCE_H


25 
	~<bЩs/ty≥s.h
>

33 
	e__ЊimЩ_їsourы


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #iвdeа
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifdeа
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #iвdeа
__USE_FILE_OFFSET64


127 
__Њim_t
 
	tЊim_t
;

129 
__Њim64_t
 
	tЊim_t
;

131 #ifdeа
__USE_LARGEFILE64


132 
__Њim64_t
 
	tЊim64_t
;

135 
	sЊimЩ


138 
Њim_t
 
	mЊim_cur
;

140 
Њim_t
 
	mЊim_max
;

143 #ifdeа
__USE_LARGEFILE64


144 
	sЊimЩ64


147 
Њim64_t
 
	mЊim_cur
;

149 
Њim64_t
 
	mЊim_max
;

154 
	e__ruІge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifdeа
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevЃ


	)

175 
	~<bЩs/time.h
>

178 
	sruІge


181 
timevЃ
 
	mru_utime
;

183 
timevЃ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_mЪжt
;

197 
	mru_majжt
;

199 
	mru_nsw≠
;

202 
	mru_Ъblock
;

204 
	mru_oublock
;

206 
	mru_msgҐd
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__іi№Щy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #iвdeа
_SYS_SELECT_H


23 
	~<bЩs/w№dsize.h
>

26 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

28 #iа
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_SET_BTS
 "btsq"

	)

31 
	#__FD_CLR_BTR
 "bМq"

	)

32 
	#__FD_ISSET_BT
 "btq"

	)

34 
	#__FD_ZERO_STOS
 "°o¶"

	)

35 
	#__FD_SET_BTS
 "bt¶"

	)

36 
	#__FD_CLR_BTR
 "bМl"

	)

37 
	#__FD_ISSET_BT
 "bО"

	)

40 
	#__FD_ZERO
(
fd•
) \

42 
__d0
, 
__d1
; \

43 
__asm__
 
	`__vё©Юe__
 ("юd;ДХ; " 
__FD_ZERO_STOS
 \

44 : "=c" (
__d0
), "=D" (
__d1
) \

45 : "a" (0), "0" ( (
fd_£t
) \

46 /  (
__fd_mask
)), \

47 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

49 } 0)

	)

51 
	#__FD_SET
(
fd
, 
fd•
) \

52 
__asm__
 
	`__vё©Юe__
 (
__FD_SET_BTS
 " %1,%0" \

53 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

54 : "r" (((и(
fd
)и% 
__NFDBITS
) \

55 : "cc","mem№y")

	)

56 
	#__FD_CLR
(
fd
, 
fd•
) \

57 
__asm__
 
	`__vё©Юe__
 (
__FD_CLR_BTR
 " %1,%0" \

58 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

59 : "r" (((и(
fd
)и% 
__NFDBITS
) \

60 : "cc","mem№y")

	)

61 
	#__FD_ISSET
(
fd
, 
fd•
) \

62 (
__exЛnsiЏ__
 \

63 ({
__їsu…
; \

64 
__asm__
 
	`__vё©Юe__
 (
__FD_ISSET_BT
 " %1,%2 ; setcb %b0" \

65 : "=q" (
__їsu…
) \

66 : "r" (((и(
fd
)и% 
__NFDBITS
), \

67 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

69 
__їsu…
; }))

	)

75 
	#__FD_ZERO
(
£t
) \

77 
__i
; \

78 
fd_£t
 *
__ђr
 = (
£t
); \

79 
__i
 = 0; __Ш<  (
fd_£t
и/  (
__fd_mask
); ++__i) \

80 
	`__FDS_BITS
 (
__ђr
)[
__i
] = 0; \

81 } 0)

	)

82 
	#__FD_SET
(
d
, 
£t
и(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |р
	`__FDMASK
 (d))

	)

83 
	#__FD_CLR
(
d
, 
£t
и(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &р~
	`__FDMASK
 (d))

	)

84 
	#__FD_ISSET
(
d
, 
£t
и(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/setjmp.h

20 #iвdeа
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #iа!
defЪed
 
_SETJMP_H
 && !defЪed 
_PTHREAD_H


27 
	~<bЩs/w№dsize.h
>

29 #iвdeа
_ASM


31 #iа
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #iвdeа
_SIGNAL_H


25 
	ssigaщiЏ


28 #ifdeа
__USE_POSIX199309


32 
__sigh™dЋr_t
 
	mІ_h™dЋr
;

34 (*
	mІ_sigaщiЏ
и(, 
	msigЪfo_t
 *, *);

36 
	m__sigaщiЏ_h™dЋr
;

37 
	#І_h™dЋr
 
__sigaщiЏ_h™dЋr
.
І_h™dЋr


	)

38 
	#І_sigaщiЏ
 
__sigaщiЏ_h™dЋr
.
І_sigaщiЏ


	)

40 
__sigh™dЋr_t
 
	mІ_h™dЋr
;

44 
__sig£t_t
 
	mІ_mask
;

47 
	mІ_жags
;

50 (*
	mІ_ї°№Ф
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #iа
defЪed
 
__USE_UNIX98
 || defЪed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifdeа
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #iвdeа
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #iа!
defЪed
 
_SIGNAL_H
 && !defЪed 
_SYS_UCONTEXT_H


26 
	~<bЩs/w№dsize.h
>

28 
	s_еїg


30 
	msignifi€nd
[4];

31 
	mexpЏТt
;

34 
	s_еxїg


36 
	msignifi€nd
[4];

37 
	mexpЏТt
;

38 
	mЈddЪg
[3];

41 
	s_xmmїg


43 
__uЪt32_t
 
	mЦemТt
[4];

48 #iа
__WORDSIZE
 == 32

50 
	s_е°©e


53 
__uЪt32_t
 
	mcw
;

54 
__uЪt32_t
 
	msw
;

55 
__uЪt32_t
 
	mПg
;

56 
__uЪt32_t
 
	mЭoff
;

57 
__uЪt32_t
 
	mcs£l
;

58 
__uЪt32_t
 
	md©aoff
;

59 
__uЪt32_t
 
	md©a£l
;

60 
_еїg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uЪt32_t
 
	m_fx§_Тv
[6];

66 
__uЪt32_t
 
	mmxc§
;

67 
__uЪt32_t
 
	mї£rved
;

68 
_еxїg
 
	m_fx§_°
[8];

69 
_xmmїg
 
	m_xmm
[8];

70 
__uЪt32_t
 
	mЈddЪg
[56];

73 #iвdeа
sigcЏЛxt_°ruщ


78 
	#sigcЏЛxt_°ruщ
 
sigcЏЛxt


	)

81 
	ssigcЏЛxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	mЧx
;

95 
	mМ≠no
;

96 
	mФr
;

97 
	meЭ
;

98 
	mcs
, 
	m__csh
;

99 
	meжags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_е°©e
 * 
	mе°©e
;

103 
	mёdmask
;

104 
	mь2
;

109 
	s_е°©e


112 
__uЪt16_t
 
	mcwd
;

113 
__uЪt16_t
 
	mswd
;

114 
__uЪt16_t
 
	mбw
;

115 
__uЪt16_t
 
	mfЁ
;

116 
__uЪt64_t
 
	mrЭ
;

117 
__uЪt64_t
 
	mrdp
;

118 
__uЪt32_t
 
	mmxc§
;

119 
__uЪt32_t
 
	mmxь_mask
;

120 
_еxїg
 
	m_°
[8];

121 
_xmmїg
 
	m_xmm
[16];

122 
__uЪt32_t
 
	mЈddЪg
[24];

125 
	ssigcЏЛxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	mњx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrЭ
;

144 
	meжags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__Јd0
;

149 
	mФr
;

150 
	mМ≠no
;

151 
	mёdmask
;

152 
	mь2
;

153 
_е°©e
 * 
	mе°©e
;

154 
	m__ї£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #iа!
defЪed
 
_SIGNAL_H
 && !defЪed 
__√ed_sigЪfo_t
 \

21 && !
defЪed
 
	g__√ed_sigevТt_t


25 
	~<bЩs/w№dsize.h
>

27 #iа(!
defЪed
 
__have_sigvЃ_t
 \

28 && (
defЪed
 
	g_SIGNAL_H
 || defЪed 
	g__√ed_sigЪfo_t
 \

29 || 
defЪed
 
	g__√ed_sigevТt_t
))

30 
	#__have_sigvЃ_t
 1

	)

33 
	usigvЃ


35 
	msivЃ_Ъt
;

36 *
	msivЃ_±r
;

37 } 
	tsigvЃ_t
;

40 #iа(!
defЪed
 
__have_sigЪfo_t
 \

41 && (
defЪed
 
	g_SIGNAL_H
 || defЪed 
	g__√ed_sigЪfo_t
))

42 
	#__have_sigЪfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #iа
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()и- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()и- 3)

	)

51 
	ssigЪfo


53 
	msi_signo
;

54 
	msi_ФЇo
;

56 
	msi_code
;

60 
	m_Јd
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kЮl
;

72 
	msi_tid
;

73 
	msi_ovФrun
;

74 
sigvЃ_t
 
	msi_sigvЃ
;

75 } 
	m_timФ
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvЃ_t
 
	msi_sigvЃ
;

83 } 
	m_є
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__юock_t
 
	msi_utime
;

92 
__юock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigзu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpёl
;

107 } 
	m_sifЫlds
;

108 } 
	tsigЪfo_t
;

112 
	#si_pid
 
_sifЫlds
.
_kЮl
.
si_pid


	)

113 
	#si_uid
 
_sifЫlds
.
_kЮl
.
si_uid


	)

114 
	#si_timФid
 
_sifЫlds
.
_timФ
.
si_tid


	)

115 
	#si_ovФrun
 
_sifЫlds
.
_timФ
.
si_ovФrun


	)

116 
	#si_°©us
 
_sifЫlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifЫlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifЫlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vЃue
 
_sifЫlds
.
_є
.
si_sigvЃ


	)

120 
	#si_Ъt
 
_sifЫlds
.
_є
.
si_sigvЃ
.
sivЃ_Ъt


	)

121 
	#si_±r
 
_sifЫlds
.
_є
.
si_sigvЃ
.
sivЃ_±r


	)

122 
	#si_addr
 
_sifЫlds
.
_sigзu…
.
si_addr


	)

123 
	#si_b™d
 
_sifЫlds
.
_sigpёl
.
si_b™d


	)

124 
	#si_fd
 
_sifЫlds
.
_sigpёl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #undeа
__√ed_sigЪfo_t


261 #iа(
defЪed
 
_SIGNAL_H
 || defЪed 
__√ed_sigevТt_t
) \

262 && !
defЪed
 
	g__have_sigevТt_t


263 
	#__have_sigevТt_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #iа
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()и- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()и- 3)

	)

273 
	ssigevТt


275 
sigvЃ_t
 
	msigev_vЃue
;

276 
	msigev_signo
;

277 
	msigev_nўify
;

281 
	m_Јd
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_funщiЏ
и(
	msigvЃ_t
);

290 *
	m_©МibuЛ
;

291 } 
	m_sigev_thїad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevТt_t
;

296 
	#sigev_nўify_funщiЏ
 
_sigev_un
.
_sigev_thїad
.
_funщiЏ


	)

297 
	#sigev_nўify_©МibuЛs
 
_sigev_un
.
_sigev_thїad
.
_©МibuЛ


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dЋr_t
и-1и

	)

24 
	#SIG_DFL
 ((
__sigh™dЋr_t
и0и

	)

25 
	#SIG_IGN
 ((
__sigh™dЋr_t
и1и

	)

27 #ifdeа
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dЋr_t
и2и

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuЉТt_sigєmЪ
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuЉТt_sigєmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #iвdef 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vЃ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #iа!
defЪed
 
_SIGSET_H_вs
 && defЪed 
_SIGNAL_H


44 
	#_SIGSET_H_вs
 1

	)

46 #iвdeа
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exЛЇ_ЪlЪe


	)

51 
	#__sigmask
(
sig
) \

52 (((и1и<< (((
sig
и- 1и% (8 *  ())))

	)

55 
	#__sigw№d
(
sig
и(((sigи- 1и/ (8 *  ()))

	)

57 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exЛnsiЏ__
 ({ 
__ъt
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__ъt
 >р0и
__£t
->
__vЃ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfЮl£t
(
£t
) \

64 (
	`__exЛnsiЏ__
 ({ 
__ъt
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__ъt
 >р0и
__£t
->
__vЃ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifdeа
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exЛnsiЏ__
 ({ 
__ъt
 = 
_SIGSET_NWORDS
; \

75 cЏ° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__їt
 = 
__£t
->
__vЃ
[--
__ъt
]; \

77 !
__їt
 && --
__ъt
 >= 0) \

78 
__їt
 = 
__£t
->
__vЃ
[
__ъt
]; \

79 
__їt
 =р0; }))

	)

80 
	#__sig™d£t
(
de°
, 
Ћб
, 
right
) \

81 (
	`__exЛnsiЏ__
 ({ 
__ъt
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 cЏ° 
sig£t_t
 *
__Ћб
 = (
Ћб
); \

84 cЏ° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__ъt
 >= 0) \

86 
__de°
->
__vЃ
[
__ъt
] = (
__Ћб
->__val[__cnt] \

87 & 
__right
->
__vЃ
[
__ъt
]); \

88 0; }))

	)

89 
	#__sig№£t
(
de°
, 
Ћб
, 
right
) \

90 (
	`__exЛnsiЏ__
 ({ 
__ъt
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 cЏ° 
sig£t_t
 *
__Ћб
 = (
Ћб
); \

93 cЏ° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__ъt
 >= 0) \

95 
__de°
->
__vЃ
[
__ъt
] = (
__Ћб
->__val[__cnt] \

96 | 
__right
->
__vЃ
[
__ъt
]); \

97 0; }))

	)

104 
__sigismembФ
 (
__cЏ°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdЦ£t
 (
__sig£t_t
 *, );

108 #ifdeа
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w№d
 = 
	`__sigw№d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembФ
, (
__£t
->
__vЃ
[
__w№d
] & 
__mask
и? 1 : 0, 
__cЏ°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vЃ
[
__w№d
] |р
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdЦ£t
, ((
__£t
->
__vЃ
[
__w№d
] &р~
__mask
), 0), )

122 #undeа
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #iвdeа
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_Џ°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigЃt°ack


52 *
	mss_•
;

53 
	mss_жags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #iвdeа
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #iа!
defЪed
 
_SIGNAL_H
 && !defЪed 
_PTHREAD_H


31 
	$±hїad_sigmask
 (
__how
,

32 
__cЏ°
 
__sig£t_t
 *
__ї°riщ
 
__√wmask
,

33 
__sig£t_t
 *
__ї°riщ
 
__ёdmask
)
__THROW
;

36 
	$±hїad_kЮl
 (
±hїad_t
 
__thїadid
, 
__signo
и
__THROW
;

	@/usr/include/bits/socket.h

21 #iвdeа
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #iвdeа
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #iвdeа
__sockЋn_t_defЪed


35 
__sockЋn_t
 
	tsockЋn_t
;

36 
	#__sockЋn_t_defЪed


	)

40 
	e__sockС_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bЩs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
І_
);

177 
	mІ_d©a
[14];

183 
	#__ss_ЃigЅy≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_ЃigЅy≥
)))

	)

187 
	ssockaddr_°№age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_ЃigЅy≥
 
	m__ss_Ѓign
;

191 
	m__ss_ЈddЪg
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifdeа
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

236 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

239 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

245 
	smsghdr


247 *
	mmsg_«me
;

248 
sockЋn_t
 
	mmsg_«mЦТ
;

250 
iovec
 *
	mmsg_iov
;

251 
size_t
 
	mmsg_iovЋn
;

253 *
	mmsg_cЏМё
;

254 
size_t
 
	mmsg_cЏМёЋn
;

259 
	mmsg_жags
;

263 
	scmsghdr


265 
size_t
 
	mcmsg_Ћn
;

270 
	mcmsg_ЋvЦ
;

271 
	mcmsg_ty≥
;

272 #iа(!
defЪed
 
__STRICT_ANSI__
 && 
__GNUC__
 >р2и|| 
__STDC_VERSION__
 >= 199901L

273 
__exЛnsiЏ__
 
__cmsg_d©a
 
	m__жexђr
;

278 #iа(!
defЪed
 
__STRICT_ANSI__
 && 
__GNUC__
 >р2и|| 
__STDC_VERSION__
 >= 199901L

279 
	#CMSG_DATA
(
cmsg
и((cmsg)->
__cmsg_d©a
)

	)

281 
	#CMSG_DATA
(
cmsg
и((*и((
cmsghdr
 *и(cmsgи+ 1))

	)

283 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
и
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

284 
	#CMSG_FIRSTHDR
(
mhdr
) \

285 ((
size_t
и(
mhdr
)->
msg_cЏМёЋn
 >р (
cmsghdr
) \

286 ? (
cmsghdr
 *и(
mhdr
)->
msg_cЏМё
 : (cmsghdЄ*и0)

	)

287 
	#CMSG_ALIGN
(
Ћn
и((÷Ти+  (
size_t
) - 1) \

288 & (
size_t
и~( (size_tи- 1))

	)

289 
	#CMSG_SPACE
(
Ћn
и(
	`CMSG_ALIGN
 (len) \

290 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

291 
	#CMSG_LEN
(
Ћn
и(
	`CMSG_ALIGN
 ( (
cmsghdr
)и+ (Ћn))

	)

293 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

294 
cmsghdr
 *
__cmsg
и
__THROW
;

295 #ifdeа
__USE_EXTERN_INLINES


296 #iвdeа
_EXTERN_INLINE


297 
	#_EXTERN_INLINE
 
__exЛЇ_ЪlЪe


	)

299 
_EXTERN_INLINE
 
cmsghdr
 *

300 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

302 iа((
size_t
и
__cmsg
->
cmsg_Ћn
 <  (
cmsghdr
))

306 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

307 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Ћn
));

308 iа((*и(
__cmsg
 + 1и> ((*и
__mhdr
->
msg_cЏМё


309 + 
__mhdr
->
msg_cЏМёЋn
)

310 || ((*и
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Ћn
)

311 > ((*и
__mhdr
->
msg_cЏМё
 + __mhdr->
msg_cЏМёЋn
)))

314  
__cmsg
;

315 
	}
}

322 
	mSCM_RIGHTS
 = 0x01

323 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

324 #ifdeа
__USE_GNU


325 , 
	mSCM_CREDENTIALS
 = 0x02

326 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

330 #ifdeа
__USE_GNU


332 
	suьed


334 
pid_t
 
	mpid
;

335 
uid_t
 
	muid
;

336 
gid_t
 
	mgid
;

341 #iа!
defЪed
 
__USE_MISC
 && !defЪed 
__USE_GNU


342 #iвdeа
FIOGETOWN


343 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

345 #iвdeа
FIOSETOWN


346 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

348 #iвdeа
SIOCATMARK


349 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

351 #iвdeа
SIOCGPGRP


352 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

354 #iвdeа
SIOCGSTAMP


355 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

357 #iвdeа
SIOCGSTAMPNS


358 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

360 #iвdeа
SIOCSPGRP


361 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

366 
	~<asm/sockС.h
>

368 #iа!
defЪed
 
__USE_MISC
 && !defЪed 
__USE_GNU


369 #ifdeа
__SYS_SOCKET_H_undef_FIOGETOWN


370 #undeа
__SYS_SOCKET_H_undef_FIOGETOWN


371 #undeа
FIOGETOWN


373 #ifdeа
__SYS_SOCKET_H_undef_FIOSETOWN


374 #undeа
__SYS_SOCKET_H_undef_FIOSETOWN


375 #undeа
FIOSETOWN


377 #ifdeа
__SYS_SOCKET_H_undef_SIOCATMARK


378 #undeа
__SYS_SOCKET_H_undef_SIOCATMARK


379 #undeа
SIOCATMARK


381 #ifdeа
__SYS_SOCKET_H_undef_SIOCGPGRP


382 #undeа
__SYS_SOCKET_H_undef_SIOCGPGRP


383 #undeа
SIOCGPGRP


385 #ifdeа
__SYS_SOCKET_H_undef_SIOCGSTAMP


386 #undeа
__SYS_SOCKET_H_undef_SIOCGSTAMP


387 #undeа
SIOCGSTAMP


389 #ifdeа
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


390 #undeа
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


391 #undeа
SIOCGSTAMPNS


393 #ifdeа
__SYS_SOCKET_H_undef_SIOCSPGRP


394 #undeа
__SYS_SOCKET_H_undef_SIOCSPGRP


395 #undeа
SIOCSPGRP


400 
	slЪgФ


402 
	ml_Џoff
;

403 
	ml_lЪgФ
;

	@/usr/include/bits/socket2.h

20 #iвdeа
_SYS_SOCKET_H


24 
ssize_t
 
__їcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_И
__buжТ
,

25 
__жags
);

26 
ssize_t
 
__REDIRECT
 (
__їcv_ЃЯs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__жags
), 
їcv
);

28 
ssize_t
 
__REDIRECT
 (
__їcv_chk_wђn
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_И
__buжТ
,

30 
__жags
), 
__їcv_chk
)

31 
__wђ«Йr
 ("recv called with biggerЖengthБhan size of destination "

34 
__exЛЇ_Ѓways_ЪlЪe
 
ssize_t


35 
	$їcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__жags
)

37 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

39 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

40  
	`__їcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__жags
);

42 iа(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__їcv_chk_wђn
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__жags
);

45  
	`__їcv_ЃЯs
 (
__fd
, 
__buf
, 
__n
, 
__жags
);

46 
	}
}

48 
ssize_t
 
__їcvдom_chk
 (
__fd
, *
__ї°riщ
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buжТ
, 
__жags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
);

52 
ssize_t
 
__REDIRECT
 (
__їcvдom_ЃЯs
,

53 (
__fd
, *
__ї°riщ
 
__buf
, 
size_t
 
__n
,

54 
__жags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
), 
їcvдom
);

56 
ssize_t
 
__REDIRECT
 (
__їcvдom_chk_wђn
,

57 (
__fd
, *
__ї°riщ
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buжТ
, 
__жags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
), 
__їcvдom_chk
)

61 
__wђ«Йr
 ("recvfrom called with biggerЖengthБhan size of "

64 
__exЛЇ_Ѓways_ЪlЪe
 
ssize_t


65 
	$їcvдom
 (
__fd
, *
__ї°riщ
 
__buf
, 
size_t
 
__n
, 
__жags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockЋn_t
 *
__ї°riщ
 
__addr_Ћn
)

68 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

70 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

71  
	`__їcvдom_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__жags
,

72 
__addr
, 
__addr_Ћn
);

73 iа(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__їcvдom_chk_wђn
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__жags
,

75 
__addr
, 
__addr_Ћn
);

77  
	`__їcvдom_ЃЯs
 (
__fd
, 
__buf
, 
__n
, 
__жags
, 
__addr
, 
__addr_Ћn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #iвdeа
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #iа
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #iа
__WORDSIZE
 == 32

47 
	m__Јd1
;

49 #iа
__WORDSIZE
 =р64 || !
defЪed
 
__USE_FILE_OFFSET64


50 
__Ъo_t
 
	m°_Ъo
;

52 
__Ъo_t
 
	m__°_Ъo
;

54 #iа
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆Ъk_t
 
	m°_∆Ъk
;

58 
__∆Ъk_t
 
	m°_∆Ъk
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #iа
__WORDSIZE
 == 64

64 
	m__Јd0
;

66 
__dev_t
 
	m°_rdev
;

67 #iа
__WORDSIZE
 == 32

68 
	m__Јd2
;

70 #iа
__WORDSIZE
 =р64 || !
defЪed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #iа
__WORDSIZE
 =р64 || !
defЪed
 
__USE_FILE_OFFSET64


77 
__blkъt_t
 
	m°_blocks
;

79 
__blkъt64_t
 
	m°_blocks
;

81 #ifdeа
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_щim
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_щime
 
°_щim
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imТ£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimТ£c
;

99 
__time_t
 
	m°_щime
;

100 
	m°_щimТ£c
;

102 #iа
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #iвdeа
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__Ъo64_t
 
	m°_Ъo
;

114 #ifdeа
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #iа
__WORDSIZE
 == 64

120 
__Ъo64_t
 
	m°_Ъo
;

121 
__∆Ъk_t
 
	m°_∆Ъk
;

122 
__mode_t
 
	m°_mode
;

124 
	m__Јd1
;

125 
__Ъo_t
 
	m__°_Ъo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆Ъk_t
 
	m°_∆Ъk
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #iа
__WORDSIZE
 == 64

132 
	m__Јd0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__Јd2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blkъt64_t
 
	m°_blocks
;

142 #ifdeа
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_щim
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_щime
 
°_щim
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imТ£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimТ£c
;

160 
__time_t
 
	m°_щime
;

161 
	m°_щimТ£c
;

163 #iа
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__Ъo64_t
 
	m°_Ъo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
и((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
и((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
и((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifdeа
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30и- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30и- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #iвdeа
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
еrЪtf
)

26 
	$__LDBL_REDIR_DECL
 (
іЪtf
)

27 
	$__LDBL_REDIR_DECL
 (
•rЪtf
)

28 
	$__LDBL_REDIR_DECL
 (
vеrЪtf
)

29 
	$__LDBL_REDIR_DECL
 (
vіЪtf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rЪtf
)

31 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__USE_GNU
 \

32 && !
defЪed
 
__REDIRECT
 \

33 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fs€nf
, 
__∆dbl___isoc99_fs€nf
)

35 
	$__LDBL_REDIR1_DECL
 (
s€nf
, 
__∆dbl___isoc99_s€nf
)

36 
	$__LDBL_REDIR1_DECL
 (
ss€nf
, 
__∆dbl___isoc99_ss€nf
)

38 
	$__LDBL_REDIR_DECL
 (
fs€nf
)

39 
	$__LDBL_REDIR_DECL
 (
s€nf
)

40 
	$__LDBL_REDIR_DECL
 (
ss€nf
)

42 
__END_NAMESPACE_STD


44 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_ISOC99
 || defЪed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
ҐіЪtf
)

47 
	$__LDBL_REDIR_DECL
 (
vҐіЪtf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #iа!
defЪed
 
__USE_GNU
 && !defЪed 
__REDIRECT
 \

54 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfs€nf
, 
__∆dbl___isoc99_vfs€nf
)

56 
	$__LDBL_REDIR1_DECL
 (
vs€nf
, 
__∆dbl___isoc99_vs€nf
)

57 
	$__LDBL_REDIR1_DECL
 (
vss€nf
, 
__∆dbl___isoc99_vss€nf
)

59 
	$__LDBL_REDIR_DECL
 (
vfs€nf
)

60 
	$__LDBL_REDIR_DECL
 (
vss€nf
)

61 
	$__LDBL_REDIR_DECL
 (
vs€nf
)

63 
__END_NAMESPACE_C99


66 #ifdeа
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vdіЪtf
)

68 
	$__LDBL_REDIR_DECL
 (
dіЪtf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rЪtf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rЪtf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rЪtf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_іЪtf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_vіЪtf
)

76 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


77 
	$__LDBL_REDIR_DECL
 (
__•rЪtf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rЪtf_chk
)

79 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_ISOC99
 || defЪed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__ҐіЪtf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__vҐіЪtf_chk
)

83 #iа
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__еrЪtf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__іЪtf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vеrЪtf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__vіЪtf_chk
)

88 #ifdeа
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rЪtf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rЪtf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__dіЪtf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vdіЪtf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_іЪtf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_vіЪtf_chk
)

	@/usr/include/bits/stdio.h

20 #iвdeа
_STDIO_H


24 #iвdeа
__exЛЇ_ЪlЪe


25 
	#__STDIO_INLINE
 
ЪlЪe


	)

27 
	#__STDIO_INLINE
 
__exЛЇ_ЪlЪe


	)

31 #ifdeа
__USE_EXTERN_INLINES


34 #iа!(
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe
)

36 
__STDIO_INLINE
 

37 
	$vіЪtf
 (
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__ђg
)

39  
	`vеrЪtf
 (
°dout
, 
__fmt
, 
__ђg
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gСchђ
 ()

47  
	`_IO_gСc
 (
°dЪ
);

48 
	}
}

51 #ifdeа
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgСc_u∆ocked
 (
FILE
 *
__е
)

56  
	`_IO_gСc_u∆ocked
 (
__е
);

57 
	}
}

61 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gСc_u∆ocked
 (
FILE
 *
__е
)

66  
	`_IO_gСc_u∆ocked
 (
__е
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gСchђ_u∆ocked
 ()

73  
	`_IO_gСc_u∆ocked
 (
°dЪ
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putchђ
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifdeа
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$еutc_u∆ocked
 (
__c
, 
FILE
 *
__°їam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°їam
);

92 
	}
}

96 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°їam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°їam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putchђ_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gСlЪe
 (**
__lЪХМ
, 
size_t
 *
__n
, 
FILE
 *
__°їam
)

118  
	`__gСdЦim
 (
__lЪХМ
, 
__n
, '\n', 
__°їam
);

119 
	}
}

123 #ifdeа
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$гof_u∆ocked
 (
FILE
 *
__°їam
))

128  
	`_IO_гof_u∆ocked
 (
__°їam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$гЉ№_u∆ocked
 (
FILE
 *
__°їam
))

135  
	`_IO_гЉ№_u∆ocked
 (
__°їam
);

136 
	}
}

142 #iа
defЪed
 
__USE_MISC
 && defЪed 
__GNUC__
 && defЪed 
__OPTIMIZE__
 \

143 && !
defЪed
 
	g__эlu•lus


145 
	#дЧd_u∆ocked
(
±r
, 
size
, 
n
, 
°їam
) \

146 (
	`__exЛnsiЏ__
 ((
	`__buЮtЪ_cЏ°™t_p
 (
size
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

147 && (
size_t
и(
size
и* (size_tи(
n
) <= 8 \

148 && (
size_t
и(
size
) != 0) \

149 ? ({ *
__±r
 = (*и(
±r
); \

150 
FILE
 *
__°їam
 = (
°їam
); \

151 
size_t
 
__ъt
; \

152 
__ъt
 = (
size_t
и(
size
и* (size_tи(
n
); \

153 
__ъt
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gСc_u∆ocked
 (
__°їam
); \

156 iа(
__c
 =р
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
и(
size
и* (size_tи(
n
и- 
__ъt
) \

161 / (
size_t
и(
size
); }) \

162 : (((
	`__buЮtЪ_cЏ°™t_p
 (
size
и&& (
size_t
) (size) == 0) \

163 || (
	`__buЮtЪ_cЏ°™t_p
 (
n
и&& (
size_t
) (n) == 0)) \

165 ? ((и(
±r
), (и(
°їam
), (и(
size
), \

166 (и(
n
), (
size_t
) 0) \

167 : 
	`дЧd_u∆ocked
 (
±r
, 
size
, 
n
, 
°їam
))))

	)

169 
	#fwrЩe_u∆ocked
(
±r
, 
size
, 
n
, 
°їam
) \

170 (
	`__exЛnsiЏ__
 ((
	`__buЮtЪ_cЏ°™t_p
 (
size
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

171 && (
size_t
и(
size
и* (size_tи(
n
) <= 8 \

172 && (
size_t
и(
size
) != 0) \

173 ? ({ cЏ° *
__±r
 = (cЏ° *и(
±r
); \

174 
FILE
 *
__°їam
 = (
°їam
); \

175 
size_t
 
__ъt
; \

176 
__ъt
 = (
size_t
и(
size
и* (size_tи(
n
); \

177 
__ъt
 > 0; --__cnt) \

178 iа(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°їam
и=р
EOF
) \

180 ((
size_t
и(
size
и* (size_tи(
n
и- 
__ъt
) \

181 / (
size_t
и(
size
); }) \

182 : (((
	`__buЮtЪ_cЏ°™t_p
 (
size
и&& (
size_t
) (size) == 0) \

183 || (
	`__buЮtЪ_cЏ°™t_p
 (
n
и&& (
size_t
) (n) == 0)) \

185 ? ((и(
±r
), (и(
°їam
), (и(
size
), \

186 (и(
n
), (
size_t
) 0) \

187 : 
	`fwrЩe_u∆ocked
 (
±r
, 
size
, 
n
, 
°їam
))))

	)

191 #undeа
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #iвdeа
_STDIO_H


24 
	$__•rЪtf_chk
 (*
__ї°riщ
 
__s
, 
__жag
, 
size_t
 
__¶Т
,

25 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...и
__THROW
;

26 
	$__v•rЪtf_chk
 (*
__ї°riщ
 
__s
, 
__жag
, 
size_t
 
__¶Т
,

27 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

28 
_G_va_li°
 
__≠
и
__THROW
;

30 #ifdeа
__va_ђg_Јck


31 
__exЛЇ_Ѓways_ЪlЪe
 

32 
	`__NTH
 (
	$•rЪtf
 (*
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__fmt
, ...))

34  
	`__buЮtЪ___•rЪtf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_ђg_Јck
 ());

36 
	}
}

37 #Цiа!
defЪed
 
__эlu•lus


38 
	#•rЪtf
(
°r
, ...) \

39 
	`__buЮtЪ___•rЪtf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exЛЇ_Ѓways_ЪlЪe
 

44 
__NTH
 (
	$v•rЪtf
 (*
__ї°riщ
 
__s
, 
__cЏ°
 *__ї°riщ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buЮtЪ___v•rЪtf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_ISOC99
 || defЪed 
__USE_UNIX98


53 
	$__ҐіЪtf_chk
 (*
__ї°riщ
 
__s
, 
size_t
 
__n
, 
__жag
,

54 
size_t
 
__¶Т
, 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

55 ...и
__THROW
;

56 
	$__vҐіЪtf_chk
 (*
__ї°riщ
 
__s
, 
size_t
 
__n
, 
__жag
,

57 
size_t
 
__¶Т
, 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

58 
_G_va_li°
 
__≠
и
__THROW
;

60 #ifdeа
__va_ђg_Јck


61 
__exЛЇ_Ѓways_ЪlЪe
 

62 
	`__NTH
 (
	$ҐіЪtf
 (*
__ї°riщ
 
__s
, 
size_t
 
__n
,

63 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...))

65  
	`__buЮtЪ___ҐіЪtf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_ђg_Јck
 ());

67 
	}
}

68 #Цiа!
defЪed
 
__эlu•lus


69 
	#ҐіЪtf
(
°r
, 
Ћn
, ...) \

70 
	`__buЮtЪ___ҐіЪtf_chk
 (
°r
, 
Ћn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exЛЇ_Ѓways_ЪlЪe
 

75 
__NTH
 (
	$vҐіЪtf
 (*
__ї°riщ
 
__s
, 
size_t
 
__n
,

76 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buЮtЪ___vҐіЪtf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #iа
__USE_FORTIFY_LEVEL
 > 1

86 
__еrЪtf_chk
 (
FILE
 *
__ї°riщ
 
__°їam
, 
__жag
,

87 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...);

88 
__іЪtf_chk
 (
__жag
, 
__cЏ°
 *
__ї°riщ
 
__f№m©
, ...);

89 
__vеrЪtf_chk
 (
FILE
 *
__ї°riщ
 
__°їam
, 
__жag
,

90 
__cЏ°
 *
__ї°riщ
 
__f№m©
, 
_G_va_li°
 
__≠
);

91 
__vіЪtf_chk
 (
__жag
, 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

92 
_G_va_li°
 
__≠
);

94 #ifdeа
__va_ђg_Јck


95 
__exЛЇ_Ѓways_ЪlЪe
 

96 
	$еrЪtf
 (
FILE
 *
__ї°riщ
 
__°їam
, 
__cЏ°
 *__ї°riщ 
__fmt
, ...)

98  
	`__еrЪtf_chk
 (
__°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_ђg_Јck
 ());

100 
	}
}

102 
__exЛЇ_Ѓways_ЪlЪe
 

103 
	$іЪtf
 (
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

105  
	`__іЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_ђg_Јck
 ());

106 
	}
}

107 #Цiа!
defЪed
 
__эlu•lus


108 
	#іЪtf
(...) \

109 
	`__іЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#еrЪtf
(
°їam
, ...) \

111 
	`__еrЪtf_chk
 (
°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exЛЇ_Ѓways_ЪlЪe
 

115 
	$vіЪtf
 (
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifdeа
__USE_EXTERN_INLINES


118  
	`__vеrЪtf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__vіЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exЛЇ_Ѓways_ЪlЪe
 

125 
	$vеrЪtf
 (
FILE
 *
__ї°riщ
 
__°їam
,

126 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vеrЪtf_chk
 (
__°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifdeа
__USE_GNU


133 
	$__a•rЪtf_chk
 (**
__ї°riщ
 
__±r
, 
__жag
,

134 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

135 
__THROW
 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__іЪtf__
, 3, 4))и
__wur
;

136 
	$__va•rЪtf_chk
 (**
__ї°riщ
 
__±r
, 
__жag
,

137 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__ђg
)

138 
__THROW
 
	`__©МibuЛ__
 ((
	$__f№m©__
 (
__іЪtf__
, 3, 0))и
__wur
;

139 
	$__dіЪtf_chk
 (
__fd
, 
__жag
, 
__cЏ°
 *
__ї°riщ
 
__fmt
,

140 ...и
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 4)));

141 
	$__vdіЪtf_chk
 (
__fd
, 
__жag
,

142 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__ђg
)

143 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 0)));

144 
	$__ob°ack_іЪtf_chk
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

145 
__жag
, 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

147 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 4)));

148 
	$__ob°ack_vіЪtf_chk
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

149 
__жag
,

150 
__cЏ°
 *
__ї°riщ
 
__f№m©
,

151 
_G_va_li°
 
__ђgs
)

152 
__THROW
 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 0)));

154 #ifdeа
__va_ђg_Јck


155 
__exЛЇ_Ѓways_ЪlЪe
 

156 
	`__NTH
 (
	$a•rЪtf
 (**
__ї°riщ
 
__±r
, 
__cЏ°
 *__ї°riщ 
__fmt
, ...))

158  
	`__a•rЪtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_ђg_Јck
 ());

160 
	}
}

162 
__exЛЇ_Ѓways_ЪlЪe
 

163 
__NTH
 (
	$__a•rЪtf
 (**
__ї°riщ
 
__±r
, 
__cЏ°
 *__ї°riщ 
__fmt
,

166  
	`__a•rЪtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_ђg_Јck
 ());

168 
	}
}

170 
__exЛЇ_Ѓways_ЪlЪe
 

171 
	$dіЪtf
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...)

173  
	`__dіЪtf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_ђg_Јck
 ());

175 
	}
}

177 
__exЛЇ_Ѓways_ЪlЪe
 

178 
__NTH
 (
	$ob°ack_іЪtf
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

179 
__cЏ°
 *
__ї°riщ
 
__fmt
, ...))

181  
	`__ob°ack_іЪtf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_ђg_Јck
 ());

183 
	}
}

184 #Цiа!
defЪed
 
__эlu•lus


185 
	#a•rЪtf
(
±r
, ...) \

186 
	`__a•rЪtf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rЪtf
(
±r
, ...) \

188 
	`__a•rЪtf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#dіЪtf
(
fd
, ...) \

190 
	`__dіЪtf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_іЪtf
(
ob°ack
, ...) \

192 
	`__ob°ack_іЪtf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exЛЇ_Ѓways_ЪlЪe
 

196 
__NTH
 (
	$va•rЪtf
 (**
__ї°riщ
 
__±r
, 
__cЏ°
 *__ї°riщ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rЪtf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exЛЇ_Ѓways_ЪlЪe
 

203 
	$vdіЪtf
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vdіЪtf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exЛЇ_Ѓways_ЪlЪe
 

209 
__NTH
 (
	$ob°ack_vіЪtf
 (
ob°ack
 *
__ї°riщ
 
__ob°ack
,

210 
__cЏ°
 *
__ї°riщ
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_vіЪtf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gСs_chk
 (*
__°r
, 
size_t
и
__wur
;

221 *
	`__REDIRECT
 (
__gСs_wђn
, (*
__°r
), 
gСs
)

222 
__wur
 
	`__wђ«Йr
 ("please use fgets or getline instead, gets can't "

225 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 *

226 
	$gСs
 (*
__°r
)

228 iа(
	`__bos
 (
__°r
и!р(
size_t
) -1)

229  
	`__gСs_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gСs_wђn
 (
__°r
);

231 
	}
}

233 *
	$__fgСs_chk
 (*
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

235 *
	`__REDIRECT
 (
__fgСs_ЃЯs
,

236 (*
__ї°riщ
 
__s
, 
__n
,

237 
FILE
 *
__ї°riщ
 
__°їam
), 
fgСs
и
__wur
;

238 *
	`__REDIRECT
 (
__fgСs_chk_wђn
,

239 (*
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ї°riщ
 
__°їam
), 
__fgСs_chk
)

241 
__wur
 
	`__wђ«Йr
 ("fgets called with bigger sizeБhanЖength "

244 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 *

245 
	$fgСs
 (*
__ї°riщ
 
__s
, 
__n
, 
FILE
 *__ї°riщ 
__°їam
)

247 iа(
	`__bos
 (
__s
и!р(
size_t
) -1)

249 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgСs_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°їam
);

252 iа((
size_t
и
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgСs_chk_wђn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°їam
);

255  
	`__fgСs_ЃЯs
 (
__s
, 
__n
, 
__°їam
);

256 
	}
}

258 
size_t
 
	$__дЧd_chk
 (*
__ї°riщ
 
__±r
, 
size_t
 
__±ЊТ
,

259 
size_t
 
__size
, size_И
__n
,

260 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__дЧd_ЃЯs
,

262 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
),

264 
дЧd
и
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__дЧd_chk_wђn
,

266 (*
__ї°riщ
 
__±r
, 
size_t
 
__±ЊТ
,

267 
size_t
 
__size
, size_И
__n
,

268 
FILE
 *
__ї°riщ
 
__°їam
),

269 
__дЧd_chk
)

270 
__wur
 
	`__wђ«Йr
 ("fread called with bigger size *ВmembБhanЖength "

273 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
size_t


274 
	$дЧd
 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
, size_И
__n
,

275 
FILE
 *
__ї°riщ
 
__°їam
)

277 iа(
	`__bos0
 (
__±r
и!р(
size_t
) -1)

279 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__size
)

280 || !
	`__buЮtЪ_cЏ°™t_p
 (
__n
)

281 || (
__size
 | 
__n
и>р(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__дЧd_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°їam
);

284 iа(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__дЧd_chk_wђn
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°їam
);

287  
	`__дЧd_ЃЯs
 (
__±r
, 
__size
, 
__n
, 
__°їam
);

288 
	}
}

290 #ifdeа
__USE_GNU


291 *
	$__fgСs_u∆ocked_chk
 (*
__ї°riщ
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

293 *
	`__REDIRECT
 (
__fgСs_u∆ocked_ЃЯs
,

294 (*
__ї°riщ
 
__s
, 
__n
,

295 
FILE
 *
__ї°riщ
 
__°їam
), 
fgСs_u∆ocked
и
__wur
;

296 *
	`__REDIRECT
 (
__fgСs_u∆ocked_chk_wђn
,

297 (*
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ї°riщ
 
__°їam
), 
__fgСs_u∆ocked_chk
)

299 
__wur
 
	`__wђ«Йr
 ("fgets_unlocked called with bigger sizeБhanЖength "

302 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 *

303 
	$fgСs_u∆ocked
 (*
__ї°riщ
 
__s
, 
__n
, 
FILE
 *__ї°riщ 
__°їam
)

305 iа(
	`__bos
 (
__s
и!р(
size_t
) -1)

307 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgСs_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°їam
);

310 iа((
size_t
и
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgСs_u∆ocked_chk_wђn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°їam
);

313  
	`__fgСs_u∆ocked_ЃЯs
 (
__s
, 
__n
, 
__°їam
);

314 
	}
}

317 #ifdeа
__USE_MISC


318 #undeа
дЧd_u∆ocked


319 
size_t
 
	$__дЧd_u∆ocked_chk
 (*
__ї°riщ
 
__±r
, 
size_t
 
__±ЊТ
,

320 
size_t
 
__size
, size_И
__n
,

321 
FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__дЧd_u∆ocked_ЃЯs
,

323 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ї°riщ
 
__°їam
),

325 
дЧd_u∆ocked
и
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__дЧd_u∆ocked_chk_wђn
,

327 (*
__ї°riщ
 
__±r
, 
size_t
 
__±ЊТ
,

328 
size_t
 
__size
, size_И
__n
,

329 
FILE
 *
__ї°riщ
 
__°їam
),

330 
__дЧd_u∆ocked_chk
)

331 
__wur
 
	`__wђ«Йr
 ("fread_unlocked called with bigger size *ВmembБhan "

334 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
size_t


335 
	$дЧd_u∆ocked
 (*
__ї°riщ
 
__±r
, 
size_t
 
__size
, size_И
__n
,

336 
FILE
 *
__ї°riщ
 
__°їam
)

338 iа(
	`__bos0
 (
__±r
и!р(
size_t
) -1)

340 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__size
)

341 || !
	`__buЮtЪ_cЏ°™t_p
 (
__n
)

342 || (
__size
 | 
__n
и>р(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__дЧd_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°їam
);

346 iа(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__дЧd_u∆ocked_chk_wђn
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°їam
);

351 #ifdeа
__USE_EXTERN_INLINES


352 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__size
)

353 && 
	`__buЮtЪ_cЏ°™t_p
 (
__n
)

354 && (
__size
 | 
__n
и< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__ъt
 = 
__size
 * 
__n
;

358 *
__эМ
 = (*и
__±r
;

359 iа(
__ъt
 == 0)

362 ; 
__ъt
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gСc_u∆ocked
 (
__°їam
);

365 iа(
__c
 =р
EOF
)

367 *
__эМ
++ = 
__c
;

369  (
__эМ
 - (*и
__±r
и/ 
__size
;

372  
	`__дЧd_u∆ocked_ЃЯs
 (
__±r
, 
__size
, 
__n
, 
__°їam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #iа!
defЪed
 
_STDIO_H
 && !defЪed 
__√ed_FOPEN_MAX
 && !defЪed 
__√ed_IOV_MAX


23 #ifdeа
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifdeа
__USE_POSIX


29 
	#L_щФmid
 9

	)

30 #iа!
defЪed
 
__USE_XOPEN2K
 || defЪed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #iа
defЪed
 
__√ed_FOPEN_MAX
 || defЪed 
_STDIO_H


37 #undeа
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #iа
defЪed
 
__√ed_IOV_MAX
 && !defЪed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #iвdeа
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°єёd
, 
°єod
)

27 
__END_NAMESPACE_C99


30 #ifdeа
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°єёd_l
, 
°єod_l
)

34 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_XOPEN_EXTENDED


35 #ifdeа
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #iвdeа
_STDLIB_H


24 *
	$__їЃЈth_chk
 (
__cЏ°
 *
__ї°riщ
 
__«me
,

25 *
__ї°riщ
 
__їsёved
,

26 
size_t
 
__їsёvedЋn
и
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__їЃЈth_ЃЯs
,

28 (
__cЏ°
 *
__ї°riщ
 
__«me
,

29 *
__ї°riщ
 
__їsёved
), 
їЃЈth
и
__wur
;

30 *
	`__REDIRECT_NTH
 (
__їЃЈth_chk_wђn
,

31 (
__cЏ°
 *
__ї°riщ
 
__«me
,

32 *
__ї°riщ
 
__їsёved
,

33 
size_t
 
__їsёvedЋn
), 
__їЃЈth_chk
и
__wur


34 
	`__wђ«Йr
 ("secondЗrgument ofДealpath must beГither NULL orЗt "

37 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 *

38 
	`__NTH
 (
	$їЃЈth
 (
__cЏ°
 *
__ї°riщ
 
__«me
, *__ї°riщ 
__їsёved
))

40 iа(
	`__bos
 (
__їsёved
и!р(
size_t
) -1)

42 #iа
defЪed
 
_LIBC_LIMITS_H_
 && defЪed 
PATH_MAX


43 iа(
	`__bos
 (
__їsёved
и< 
PATH_MAX
)

44  
	`__їЃЈth_chk_wђn
 (
__«me
, 
__їsёved
, 
	`__bos
 (__resolved));

46  
	`__їЃЈth_chk
 (
__«me
, 
__їsёved
, 
	`__bos
 (__resolved));

49  
	`__їЃЈth_ЃЯs
 (
__«me
, 
__їsёved
);

50 
	}
}

53 
	$__±Ґame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
,

54 
size_t
 
__ƒЧl
и
__THROW
 
	`__nЏnuќ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±Ґame_r_ЃЯs
, (
__fd
, *
__buf
,

56 
size_t
 
__buжТ
), 
±Ґame_r
)

57 
	`__nЏnuќ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±Ґame_r_chk_wђn
,

59 (
__fd
, *
__buf
, 
size_t
 
__buжТ
,

60 
size_t
 
__ƒЧl
), 
__±Ґame_r_chk
)

61 
	`__nЏnuќ
 ((2)и
	`__wђ«Йr
 ("ptsname_r called with buflen biggerБhan "

64 
__exЛЇ_Ѓways_ЪlЪe
 

65 
	`__NTH
 (
	$±Ґame_r
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
))

67 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

69 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__buжТ
))

70  
	`__±Ґame_r_chk
 (
__fd
, 
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

71 iа(
__buжТ
 > 
	`__bos
 (
__buf
))

72  
	`__±Ґame_r_chk_wђn
 (
__fd
, 
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

74  
	`__±Ґame_r_ЃЯs
 (
__fd
, 
__buf
, 
__buжТ
);

75 
	}
}

78 
	$__wщomb_chk
 (*
__s
, 
wchђ_t
 
__wchђ
, 
size_t
 
__buжТ
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__wщomb_ЃЯs
, (*
__s
, 
wchђ_t
 
__wchђ
),

81 
wщomb
и
__wur
;

83 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 

84 
	`__NTH
 (
	$wщomb
 (*
__s
, 
wchђ_t
 
__wchђ
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #iа
defЪed
 
MB_LEN_MAX
 && MB_LEN_MAX !р
__STDLIB_MB_LEN_MAX


93 iа(
	`__bos
 (
__s
и!р(
size_t
и-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__wщomb_chk
 (
__s
, 
__wchђ
, 
	`__bos
 (__s));

95  
	`__wщomb_ЃЯs
 (
__s
, 
__wchђ
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wchђ_t
 *
__ї°riщ
 
__d°
,

100 
__cЏ°
 *
__ї°riщ
 
__§c
,

101 
size_t
 
__Ћn
, size_И
__d°Ћn
и
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_ЃЯs
,

103 (
wchђ_t
 *
__ї°riщ
 
__d°
,

104 
__cЏ°
 *
__ї°riщ
 
__§c
,

105 
size_t
 
__Ћn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_wђn
,

107 (
wchђ_t
 *
__ї°riщ
 
__d°
,

108 
__cЏ°
 *
__ї°riщ
 
__§c
,

109 
size_t
 
__Ћn
, size_И
__d°Ћn
), 
__mb°owcs_chk
)

110 
	`__wђ«Йr
 ("mbstowcs called with dst buffer smallerБhanЖen "

113 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wchђ_t
 *
__ї°riщ
 
__d°
, 
__cЏ°
 *__ї°riщ 
__§c
,

115 
size_t
 
__Ћn
))

117 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

119 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Ћn
,

121 
	`__bos
 (
__d°
и/  (
wchђ_t
));

123 iа(
__Ћn
 > 
	`__bos
 (
__d°
и/  (
wchђ_t
))

124  
	`__mb°owcs_chk_wђn
 (
__d°
, 
__§c
, 
__Ћn
,

125 
	`__bos
 (
__d°
и/  (
wchђ_t
));

127  
	`__mb°owcs_ЃЯs
 (
__d°
, 
__§c
, 
__Ћn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ї°riщ
 
__d°
,

132 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

133 
size_t
 
__Ћn
, size_И
__d°Ћn
и
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_ЃЯs
,

135 (*
__ї°riщ
 
__d°
,

136 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

137 
size_t
 
__Ћn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_wђn
,

139 (*
__ї°riщ
 
__d°
,

140 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

141 
size_t
 
__Ћn
, size_И
__d°Ћn
), 
__wc°ombs_chk
)

142 
	`__wђ«Йr
 ("wcstombs called with dst buffer smallerБhanЖen");

144 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ї°riщ
 
__d°
, 
__cЏ°
 
wchђ_t
 *__ї°riщ 
__§c
,

146 
size_t
 
__Ћn
))

148 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

150 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Ћn
, 
	`__bos
 (__dst));

152 iа(
__Ћn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_wђn
 (
__d°
, 
__§c
, 
__Ћn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_ЃЯs
 (
__d°
, 
__§c
, 
__Ћn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #iвdeа
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #iвdeа
_STRING_H


25 #iа!
defЪed
 
__NO_STRING_INLINES
 && !defЪed 
__BOUNDED_POINTERS__


42 #iвdeа
__STRING_INLINE


43 #ifdeа
__эlu•lus


44 
	#__STRING_INLINE
 
ЪlЪe


	)

46 
	#__STRING_INLINE
 
__exЛЇ_ЪlЪe


	)

50 #iа
_STRING_ARCH_u«lig√d


52 
	~<ТdЯn.h
>

53 
	~<bЩs/ty≥s.h
>

55 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 1] << 8 \

58 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 3] << 8 \

61 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
] << 8 \

67 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
] << 8 \

70 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__cЏ°
 *и(__cЏ° *и(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ruщ { 
__ђr
[
N
]; } \

79 
	t__©МibuЛ__
 ((
	t__Јcked__
)и
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #undeа
__STRING2_COPY_TYPE


93 
	#__°rЪg2_1b±r_p
(
__x
) \

94 ((
size_t
)(cЏ° *)((
__x
и+ 1и- (size_t)(cЏ° *)(__xи=р1)

	)

97 #iа!
defЪed
 
_HAVE_STRING_ARCH_mem£t


98 #iа!
__GNUC_PREREQ
 (3, 0)

99 #iа
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buЮtЪ_cЏ°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzФo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
и({ *
__s
 = (s); \

110 *((
__uЪt8_t
 *и
__s
ир(__uЪt8_tи
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uЪt8_t
 
__c
 = (__uЪt8_tи(
c
); \

122 (и(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (и
__c
 * 0x0101; \

135 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (и
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (и
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (и
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzФo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #iа
__GNUC_PREREQ
 (2, 91)

195 
	#__bzФo
(
s
, 
n
и
	`__buЮtЪ_mem£t
 (s, '\0',В)

	)

203 #ifdeа
__USE_GNU


204 #iа!
defЪed
 
_HAVE_STRING_ARCH_mempэy
 || defЪed 
_FORCE_INLINES


205 #iвdeа
_HAVE_STRING_ARCH_mempэy


206 #iа
__GNUC_PREREQ
 (3, 4)

207 
	#__mempэy
(
de°
, 
§c
, 
n
и
	`__buЮtЪ_mempэy
 (de°, src,В)

	)

208 #Цiа
__GNUC_PREREQ
 (3, 0)

209 
	#__mempэy
(
de°
, 
§c
, 
n
) \

210 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

211 && 
	`__°rЪg2_1b±r_p
 (
§c
и&& 
n
 <= 8 \

212 ? 
	`__buЮtЪ_memэy
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__mempэy
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__mempэy
(
de°
, 
§c
, 
n
) \

216 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

217 && 
	`__°rЪg2_1b±r_p
 (
§c
и&& 
n
 <= 8 \

218 ? 
	`__mempэy_smЃl
 (
de°
, 
	`__mempэy_ђgs
 (
§c
), 
n
) \

219 : 
	`__mempэy
 (
de°
, 
§c
, 
n
)))

	)

223 
	#mempэy
(
de°
, 
§c
, 
n
и
	`__mempэy
 (de°, src,В)

	)

226 #iа!
__GNUC_PREREQ
 (3, 0и|| 
defЪed
 
_FORCE_INLINES


227 #iа
_STRING_ARCH_u«lig√d


228 #iвdeа
_FORCE_INLINES


229 
	#__mempэy_ђgs
(
§c
) \

230 ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[2], \

231 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[6], \

232 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__mempэy_smЃl
 (*, , , , ,

238 
__uЪt16_t
, __uЪt16_t, 
__uЪt32_t
,

239 
__uЪt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__mempэy_smЃl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uЪt16_t
 
__§c0_2
, __uЪt16_И
__§c4_2
,

244 
__uЪt32_t
 
__§c0_4
, __uЪt32_И
__§c4_4
,

245 
size_t
 
__§юТ
)

248 
__uЪt32_t
 
__ui
;

249 
__uЪt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (и
__§юТ
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

300  (*и
__u
;

301 
	}
}

303 #iвdeа
_FORCE_INLINES


304 
	#__mempэy_ђgs
(
§c
) \

305 ((
__cЏ°
 *и(
§c
))[0], \

306 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

310 ((
__cЏ°
 *и(
§c
))[2] } }), \

311 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

313 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

316 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

317 ((
__cЏ°
 *и(
§c
))[4] } }), \

318 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

320 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

321 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

324 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

325 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

326 ((
__cЏ°
 *и(
§c
))[6] } }), \

327 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

329 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

330 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

331 ((
__cЏ°
 *и(
§c
))[6], ((__cЏ° *и(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__mempэy_smЃl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__mempэy_smЃl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§юТ
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__s€2
;

350 
__STRING2_COPY_ARR3
 
__s€3
;

351 
__STRING2_COPY_ARR4
 
__s€4
;

352 
__STRING2_COPY_ARR5
 
__s€5
;

353 
__STRING2_COPY_ARR6
 
__s€6
;

354 
__STRING2_COPY_ARR7
 
__s€7
;

355 
__STRING2_COPY_ARR8
 
__s€8
;

356 } *
__u
 = 
__de°
;

357 (и
__§юТ
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exЛnsiЏ__
 
__u
->
__s€2
 = 
__§c2
;

366 
__exЛnsiЏ__
 
__u
->
__s€3
 = 
__§c3
;

369 
__exЛnsiЏ__
 
__u
->
__s€4
 = 
__§c4
;

372 
__exЛnsiЏ__
 
__u
->
__s€5
 = 
__§c5
;

375 
__exЛnsiЏ__
 
__u
->
__s€6
 = 
__§c6
;

378 
__exЛnsiЏ__
 
__u
->
__s€7
 = 
__§c7
;

381 
__exЛnsiЏ__
 
__u
->
__s€8
 = 
__§c8
;

384  
	`__exЛnsiЏ__
 ((*и
__u
 + 
__§юТ
);

385 
	}
}

393 #iвdeа
_HAVE_STRING_ARCH_°rchr


394 *
__њwmemchr
 (cЏ° *
__s
, 
__c
);

395 #iа
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
c
и&& !__buЮtЪ_cЏ°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*и
	`__њwmemchr
 (
s
, 
c
) \

400 : 
	`__buЮtЪ_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
c
) && (c) == '\0' \

404 ? (*и
	`__њwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #iа(!
defЪed
 
_HAVE_STRING_ARCH_°rэy
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
defЪed
 
	g_FORCE_INLINES


413 #iа!
defЪed
 
_HAVE_STRING_ARCH_°rэy
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°rэy
(
de°
, 
§c
) \

415 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
) \

416 ? (
	`__°rЪg2_1b±r_p
 (
§c
и&& 
	`°ЊТ
 (src) + 1 <= 8 \

417 ? 
	`__°rэy_smЃl
 (
de°
, 
	`__°rэy_ђgs
 (
§c
), \

418 
	`°ЊТ
 (
§c
) + 1) \

419 : (*и
	`memэy
 (
de°
, 
§c
, 
	`°ЊТ
 (src) + 1)) \

420 : 
	`°rэy
 (
de°
, 
§c
)))

	)

423 #iа
_STRING_ARCH_u«lig√d


424 #iвdeа
_FORCE_INLINES


425 
	#__°rэy_ђgs
(
§c
) \

426 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°rэy_smЃl
 (*, 
__uЪt16_t
, __uint16_t,

432 
__uЪt32_t
, __uЪt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°rэy_smЃl
 (*
__de°
,

435 
__uЪt16_t
 
__§c0_2
, __uЪt16_И
__§c4_2
,

436 
__uЪt32_t
 
__§c0_4
, __uЪt32_И
__§c4_4
,

437 
size_t
 
__§юТ
)

440 
__uЪt32_t
 
__ui
;

441 
__uЪt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*и
__de°
;

444 (и
__§юТ
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #iвdeа
_FORCE_INLINES


487 
	#__°rэy_ђgs
(
§c
) \

488 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__cЏ°
 *и(
§c
))[0], '\0' } }), \

490 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

495 ((
__cЏ°
 *и(
§c
))[2], '\0' } }), \

496 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

498 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

502 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

503 ((
__cЏ°
 *и(
§c
))[4], '\0' } }), \

504 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

506 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

507 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

511 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

512 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

513 ((
__cЏ°
 *и(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°rэy_smЃl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°rэy_smЃl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§юТ
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__s€2
;

532 
__STRING2_COPY_ARR3
 
__s€3
;

533 
__STRING2_COPY_ARR4
 
__s€4
;

534 
__STRING2_COPY_ARR5
 
__s€5
;

535 
__STRING2_COPY_ARR6
 
__s€6
;

536 
__STRING2_COPY_ARR7
 
__s€7
;

537 
__STRING2_COPY_ARR8
 
__s€8
;

538 } *
__u
 = (*и
__de°
;

539 (и
__§юТ
)

542 
__u
->
__c
 = '\0';

545 
__exЛnsiЏ__
 
__u
->
__s€2
 = 
__§c2
;

548 
__exЛnsiЏ__
 
__u
->
__s€3
 = 
__§c3
;

551 
__exЛnsiЏ__
 
__u
->
__s€4
 = 
__§c4
;

554 
__exЛnsiЏ__
 
__u
->
__s€5
 = 
__§c5
;

557 
__exЛnsiЏ__
 
__u
->
__s€6
 = 
__§c6
;

560 
__exЛnsiЏ__
 
__u
->
__s€7
 = 
__§c7
;

563 
__exЛnsiЏ__
 
__u
->
__s€8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifdeа
__USE_GNU


574 #iа!
defЪed
 
_HAVE_STRING_ARCH_°pэy
 || defЪed 
_FORCE_INLINES


575 #iвdeа
_HAVE_STRING_ARCH_°pэy


576 #iа
__GNUC_PREREQ
 (3, 4)

577 
	#__°pэy
(
de°
, 
§c
и
	`__buЮtЪ_°pэy
 (de°, src)

	)

578 #Цiа
__GNUC_PREREQ
 (3, 0)

579 
	#__°pэy
(
de°
, 
§c
) \

580 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
) \

581 ? (
	`__°rЪg2_1b±r_p
 (
§c
и&& 
	`°ЊТ
 (src) + 1 <= 8 \

582 ? 
	`__buЮtЪ_°rэy
 (
de°
, 
§c
и+ 
	`°ЊТ
 (src) \

583 : ((*и(
__mempэy
и(
de°
, 
§c
, 
	`°ЊТ
 (src) + 1) \

585 : 
	`__°pэy
 (
de°
, 
§c
)))

	)

587 
	#__°pэy
(
de°
, 
§c
) \

588 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
) \

589 ? (
	`__°rЪg2_1b±r_p
 (
§c
и&& 
	`°ЊТ
 (src) + 1 <= 8 \

590 ? 
	`__°pэy_smЃl
 (
de°
, 
	`__°pэy_ђgs
 (
§c
), \

591 
	`°ЊТ
 (
§c
) + 1) \

592 : ((*и(
__mempэy
и(
de°
, 
§c
, 
	`°ЊТ
 (src) + 1) \

594 : 
	`__°pэy
 (
de°
, 
§c
)))

	)

598 
	#°pэy
(
de°
, 
§c
и
	`__°pэy
 (de°, src)

	)

601 #iа!
__GNUC_PREREQ
 (3, 0и|| 
defЪed
 
_FORCE_INLINES


602 #iа
_STRING_ARCH_u«lig√d


603 #iвdeа
_FORCE_INLINES


604 
	#__°pэy_ђgs
(
§c
) \

605 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exЛnsiЏ__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°pэy_smЃl
 (*, 
__uЪt16_t
, __uint16_t,

611 
__uЪt32_t
, __uЪt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°pэy_smЃl
 (*
__de°
,

614 
__uЪt16_t
 
__§c0_2
, __uЪt16_И
__§c4_2
,

615 
__uЪt32_t
 
__§c0_4
, __uЪt32_И
__§c4_4
,

616 
size_t
 
__§юТ
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*и
__de°
;

624 (и
__§юТ
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exЛnsiЏ__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #iвdeа
_FORCE_INLINES


671 
	#__°pэy_ђgs
(
§c
) \

672 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__cЏ°
 *и(
§c
))[0], '\0' } }), \

674 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

679 ((
__cЏ°
 *и(
§c
))[2], '\0' } }), \

680 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

682 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

686 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

687 ((
__cЏ°
 *и(
§c
))[4], '\0' } }), \

688 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

690 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

691 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exЛnsiЏ__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__cЏ°
 *и(
§c
))[0], ((__const *) (src))[1], \

695 ((
__cЏ°
 *и(
§c
))[2], ((__const *) (src))[3], \

696 ((
__cЏ°
 *и(
§c
))[4], ((__const *) (src))[5], \

697 ((
__cЏ°
 *и(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°pэy_smЃl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°pэy_smЃl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§юТ
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__s€2
;

716 
__STRING2_COPY_ARR3
 
__s€3
;

717 
__STRING2_COPY_ARR4
 
__s€4
;

718 
__STRING2_COPY_ARR5
 
__s€5
;

719 
__STRING2_COPY_ARR6
 
__s€6
;

720 
__STRING2_COPY_ARR7
 
__s€7
;

721 
__STRING2_COPY_ARR8
 
__s€8
;

722 } *
__u
 = (*и
__de°
;

723 (и
__§юТ
)

726 
__u
->
__c
 = '\0';

729 
__exЛnsiЏ__
 
__u
->
__s€2
 = 
__§c2
;

732 
__exЛnsiЏ__
 
__u
->
__s€3
 = 
__§c3
;

735 
__exЛnsiЏ__
 
__u
->
__s€4
 = 
__§c4
;

738 
__exЛnsiЏ__
 
__u
->
__s€5
 = 
__§c5
;

741 
__exЛnsiЏ__
 
__u
->
__s€6
 = 
__§c6
;

744 
__exЛnsiЏ__
 
__u
->
__s€7
 = 
__§c7
;

747 
__exЛnsiЏ__
 
__u
->
__s€8
 = 
__§c8
;

750  
__de°
 + 
__§юТ
 - 1;

751 
	}
}

759 #iвdeа
_HAVE_STRING_ARCH_°Їэy


760 #iа
__GNUC_PREREQ
 (3, 2)

761 
	#°Їэy
(
de°
, 
§c
, 
n
и
	`__buЮtЪ_°Їэy
 (de°, src,В)

	)

763 
	#°Їэy
(
de°
, 
§c
, 
n
) \

764 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

765 ? (
	`°ЊТ
 (
§c
и+ 1 >р((
size_t
и(
n
)) \

766 ? (*и
	`memэy
 (
de°
, 
§c
, 
n
) \

767 : 
	`°Їэy
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°Їэy
 (
de°
, 
§c
, 
n
)))

	)

774 #iвdeа
_HAVE_STRING_ARCH_°Ї€t


775 #ifdeа
_USE_STRING_ARCH_°rchr


776 
	#°Ї€t
(
de°
, 
§c
, 
n
) \

777 (
	`__exЛnsiЏ__
 ({ *
__de°
 = (
de°
); \

778 
	`__buЮtЪ_cЏ°™t_p
 (
§c
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

779 ? (
	`°ЊТ
 (
§c
и< ((
size_t
и(
n
)) \

780 ? 
	`°r€t
 (
__de°
, 
§c
) \

781 : (*((*и
	`__mempэy
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)ир'\0', 
__de°
)) \

783 : 
	`°Ї€t
 (
de°
, 
§c
, 
n
); }))

	)

784 #Цiа
__GNUC_PREREQ
 (3, 2)

785 
	#°Ї€t
(
de°
, 
§c
, 
n
и
	`__buЮtЪ_°Ї€t
 (de°, src,В)

	)

787 
	#°Ї€t
(
de°
, 
§c
, 
n
) \

788 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
§c
и&& __buЮtЪ_cЏ°™t_∞(
n
) \

789 ? (
	`°ЊТ
 (
§c
и< ((
size_t
и(
n
)) \

790 ? 
	`°r€t
 (
de°
, 
§c
) \

791 : 
	`°Ї€t
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°Ї€t
 (
de°
, 
§c
, 
n
)))

	)

798 #iвdeа
_HAVE_STRING_ARCH_°rcmp


799 #iа
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exЛnsiЏ__
 \

802 ({ 
size_t
 
__s1_Ћn
, 
__s2_Ћn
; \

803 (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& __buЮtЪ_cЏ°™t_∞(
s2
) \

804 && (
__s1_Ћn
 = 
	`°ЊТ
 (
s1
), 
__s2_Ћn
 = sМЋј(
s2
), \

805 (!
	`__°rЪg2_1b±r_p
 (
s1
и|| 
__s1_Ћn
 >= 4) \

806 && (!
	`__°rЪg2_1b±r_p
 (
s2
и|| 
__s2_Ћn
 >= 4)) \

807 ? 
	`__buЮtЪ_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& 
	`__°rЪg2_1b±r_p
 (s1) \

809 && (
__s1_Ћn
 = 
	`°ЊТ
 (
s1
), __s1_len < 4) \

810 ? (
	`__buЮtЪ_cЏ°™t_p
 (
s2
и&& 
	`__°rЪg2_1b±r_p
 (s2) \

811 ? 
	`__buЮtЪ_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Ћn
)) \

813 : (
	`__buЮtЪ_cЏ°™t_p
 (
s2
и&& 
	`__°rЪg2_1b±r_p
 (s2) \

814 && (
__s2_Ћn
 = 
	`°ЊТ
 (
s2
), __s2_len < 4) \

815 ? (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& 
	`__°rЪg2_1b±r_p
 (s1) \

816 ? 
	`__buЮtЪ_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Ћn
)) \

818 : 
	`__buЮtЪ_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exЛnsiЏ__
 \

822 ({ 
size_t
 
__s1_Ћn
, 
__s2_Ћn
; \

823 (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& __buЮtЪ_cЏ°™t_∞(
s2
) \

824 && (
__s1_Ћn
 = 
	`°ЊТ
 (
s1
), 
__s2_Ћn
 = sМЋј(
s2
), \

825 (!
	`__°rЪg2_1b±r_p
 (
s1
и|| 
__s1_Ћn
 >= 4) \

826 && (!
	`__°rЪg2_1b±r_p
 (
s2
и|| 
__s2_Ћn
 >= 4)) \

827 ? 
	`memcmp
 ((
__cЏ°
 *и(
s1
), (__cЏ° *и(
s2
), \

828 (
__s1_Ћn
 < 
__s2_Ћn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& 
	`__°rЪg2_1b±r_p
 (s1) \

830 && (
__s1_Ћn
 = 
	`°ЊТ
 (
s1
), __s1_len < 4) \

831 ? (
	`__buЮtЪ_cЏ°™t_p
 (
s2
и&& 
	`__°rЪg2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Ћn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Ћn
)) \

834 : (
	`__buЮtЪ_cЏ°™t_p
 (
s2
и&& 
	`__°rЪg2_1b±r_p
 (s2) \

835 && (
__s2_Ћn
 = 
	`°ЊТ
 (
s2
), __s2_len < 4) \

836 ? (
	`__buЮtЪ_cЏ°™t_p
 (
s1
и&& 
	`__°rЪg2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Ћn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Ћn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exЛnsiЏ__
 ({ 
__їsu…
 = \

844 (((
__cЏ°
 *и(__cЏ° *и(
s1
))[0] \

845 - ((
__cЏ°
 *и(__cЏ° *)(
s2
))[0]);\

846 iа(
l
 > 0 && 
__їsu…
 == 0) \

848 
__їsu…
 = (((
__cЏ°
 *) \

849 (
__cЏ°
 *и(
s1
))[1] \

850 - ((
__cЏ°
 *) \

851 (
__cЏ°
 *и(
s2
))[1]); \

852 iа(
l
 > 1 && 
__їsu…
 == 0) \

854 
__їsu…
 = \

855 (((
__cЏ°
 *) \

856 (
__cЏ°
 *и(
s1
))[2] \

857 - ((
__cЏ°
 *) \

858 (
__cЏ°
 *и(
s2
))[2]); \

859 iа(
l
 > 2 && 
__їsu…
 == 0) \

860 
__їsu…
 = \

861 (((
__cЏ°
 *) \

862 (
__cЏ°
 *и(
s1
))[3] \

863 - ((
__cЏ°
 *) \

864 (
__cЏ°
 *и(
s2
))[3]); \

867 
__їsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exЛnsiЏ__
 ({ 
__cЏ°
 *
__s2
 = \

871 (
__cЏ°
 *и(__cЏ° *и(
s2
); \

872 
__їsu…
 = \

873 (((
__cЏ°
 *и(__cЏ° *и(
s1
))[0] \

874 - 
__s2
[0]); \

875 iа(
l1
 > 0 && 
__їsu…
 == 0) \

877 
__їsu…
 = (((
__cЏ°
 *) \

878 (
__cЏ°
 *и(
s1
))[1] - 
__s2
[1]); \

879 iа(
l1
 > 1 && 
__їsu…
 == 0) \

881 
__їsu…
 = (((
__cЏ°
 *) \

882 (
__cЏ°
 *и(
s1
))[2] - 
__s2
[2]);\

883 iа(
l1
 > 2 && 
__їsu…
 == 0) \

884 
__їsu…
 = (((
__cЏ°
 *) \

885 (
__cЏ°
 *и(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__їsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exЛnsiЏ__
 ({ 
__cЏ°
 *
__s1
 = \

893 (
__cЏ°
 *и(__cЏ° *и(
s1
); \

894 
__їsu…
 = \

895 
__s1
[0] - ((
__cЏ°
 *) \

896 (
__cЏ°
 *и(
s2
))[0]; \

897 iа(
l2
 > 0 && 
__їsu…
 == 0) \

899 
__їsu…
 = (
__s1
[1] \

900 - ((
__cЏ°
 *) \

901 (
__cЏ°
 *и(
s2
))[1]); \

902 iа(
l2
 > 1 && 
__їsu…
 == 0) \

904 
__їsu…
 = \

905 (
__s1
[2] - ((
__cЏ°
 *) \

906 (
__cЏ°
 *и(
s2
))[2]); \

907 iа(
l2
 > 2 && 
__їsu…
 == 0) \

908 
__їsu…
 = \

909 (
__s1
[3] \

910 - ((
__cЏ°
 *) \

911 (
__cЏ°
 *и(
s2
))[3]); \

914 
__їsu…
; }))

	)

919 #iвdeа
_HAVE_STRING_ARCH_°Їcmp


920 
	#°Їcmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
n
) \

922 && ((
	`__buЮtЪ_cЏ°™t_p
 (
s1
) \

923 && 
	`°ЊТ
 (
s1
и< ((
size_t
и(
n
))) \

924 || (
	`__buЮtЪ_cЏ°™t_p
 (
s2
) \

925 && 
	`°ЊТ
 (
s2
и< ((
size_t
и(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
и: 
	`°Їcmp
 (s1, s2, 
n
)))

	)

932 #iа!
defЪed
 
_HAVE_STRING_ARCH_°rc•n
 || defЪed 
_FORCE_INLINES


933 #iвdeа
_HAVE_STRING_ARCH_°rc•n


934 #iа
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
їjeщ
) \

936 
__exЛnsiЏ__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buЮtЪ_cЏ°™t_p
 (
їjeщ
и&& 
	`__°rЪg2_1b±r_p
 (reject) \

939 ? ((
	`__buЮtЪ_cЏ°™t_p
 (
s
и&& 
	`__°rЪg2_1b±r_p
 (s)) \

940 ? 
	`__buЮtЪ_°rc•n
 (
s
, 
їjeщ
) \

941 : ((
__r0
 = ((
__cЏ°
 *и(
їjeщ
))[0], __r0 == '\0') \

942 ? 
	`°ЊТ
 (
s
) \

943 : ((
__r1
 = ((
__cЏ°
 *и(
їjeщ
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__cЏ°
 *и(
їjeщ
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__cЏ°
 *и(
їjeщ
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buЮtЪ_°rc•n
 (
s
, 
їjeщ
)))))) \

950 : 
	`__buЮtЪ_°rc•n
 (
s
, 
їjeщ
)); })

	)

952 
	#°rc•n
(
s
, 
їjeщ
) \

953 
__exЛnsiЏ__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buЮtЪ_cЏ°™t_p
 (
їjeщ
и&& 
	`__°rЪg2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__cЏ°
 *и(
їjeщ
))[0], __r0 == '\0') \

957 ? 
	`°ЊТ
 (
s
) \

958 : ((
__r1
 = ((
__cЏ°
 *и(
їjeщ
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__cЏ°
 *и(
їjeщ
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__cЏ°
 *и(
їjeщ
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
їjeщ
))))) \

965 : 
	`°rc•n
 (
s
, 
їjeщ
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__cЏ°
 *
__s
, 
__їjeщ
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__cЏ°
 *
__s
, 
__їjeщ
)

973 
size_t
 
__їsu…
 = 0;

974 
__s
[
__їsu…
] !р'\0' && __s[__їsu…] !р
__їjeщ
)

975 ++
__їsu…
;

976  
__їsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__cЏ°
 *
__s
, 
__їjeщ1
,

980 
__їjeщ2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__cЏ°
 *
__s
, 
__їjeщ1
, 
__їjeщ2
)

984 
size_t
 
__їsu…
 = 0;

985 
__s
[
__їsu…
] !р'\0' && __s[__їsu…] !р
__їjeщ1


986 && 
__s
[
__їsu…
] !р
__їjeщ2
)

987 ++
__їsu…
;

988  
__їsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__cЏ°
 *
__s
, 
__їjeщ1
,

992 
__їjeщ2
, 
__їjeщ3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__cЏ°
 *
__s
, 
__їjeщ1
, 
__їjeщ2
,

995 
__їjeщ3
)

997 
size_t
 
__їsu…
 = 0;

998 
__s
[
__їsu…
] !р'\0' && __s[__їsu…] !р
__їjeщ1


999 && 
__s
[
__їsu…
] !р
__їjeщ2
 && __s[__їsu…] !р
__їjeщ3
)

1000 ++
__їsu…
;

1001  
__їsu…
;

1002 
	}
}

1008 #iа!
defЪed
 
_HAVE_STRING_ARCH_°r•n
 || defЪed 
_FORCE_INLINES


1009 #iвdeа
_HAVE_STRING_ARCH_°r•n


1010 #iа
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
acы±
) \

1012 
__exЛnsiЏ__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buЮtЪ_cЏ°™t_p
 (
acы±
и&& 
	`__°rЪg2_1b±r_p
 (accept) \

1015 ? ((
	`__buЮtЪ_cЏ°™t_p
 (
s
и&& 
	`__°rЪg2_1b±r_p
 (s)) \

1016 ? 
	`__buЮtЪ_°r•n
 (
s
, 
acы±
) \

1017 : ((
__a0
 = ((
__cЏ°
 *и(
acы±
))[0], __a0 == '\0') \

1018 ? ((и(
s
), 0) \

1019 : ((
__a1
 = ((
__cЏ°
 *и(
acы±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__cЏ°
 *и(
acы±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__cЏ°
 *и(
acы±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buЮtЪ_°r•n
 (
s
, 
acы±
)))))) \

1026 : 
	`__buЮtЪ_°r•n
 (
s
, 
acы±
)); })

	)

1028 
	#°r•n
(
s
, 
acы±
) \

1029 
__exЛnsiЏ__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buЮtЪ_cЏ°™t_p
 (
acы±
и&& 
	`__°rЪg2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__cЏ°
 *и(
acы±
))[0], __a0 == '\0') \

1033 ? ((и(
s
), 0) \

1034 : ((
__a1
 = ((
__cЏ°
 *и(
acы±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__cЏ°
 *и(
acы±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__cЏ°
 *и(
acы±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
acы±
))))) \

1041 : 
	`°r•n
 (
s
, 
acы±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__cЏ°
 *
__s
, 
__acы±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__cЏ°
 *
__s
, 
__acы±
)

1049 
size_t
 
__їsu…
 = 0;

1051 
__s
[
__їsu…
] =р
__acы±
)

1052 ++
__їsu…
;

1053  
__їsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__cЏ°
 *
__s
, 
__acы±1
,

1057 
__acы±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__cЏ°
 *
__s
, 
__acы±1
, 
__acы±2
)

1061 
size_t
 
__їsu…
 = 0;

1063 
__s
[
__їsu…
] =р
__acы±1
 || __s[__їsu…] =р
__acы±2
)

1064 ++
__їsu…
;

1065  
__їsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__cЏ°
 *
__s
, 
__acы±1
,

1069 
__acы±2
, 
__acы±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__cЏ°
 *
__s
, 
__acы±1
, 
__acы±2
, 
__acы±3
)

1073 
size_t
 
__їsu…
 = 0;

1075 
__s
[
__їsu…
] =р
__acы±1
 || __s[__їsu…] =р
__acы±2


1076 || 
__s
[
__їsu…
] =р
__acы±3
)

1077 ++
__їsu…
;

1078  
__їsu…
;

1079 
	}
}

1084 #iа!
defЪed
 
_HAVE_STRING_ARCH_°љbrk
 || defЪed 
_FORCE_INLINES


1085 #iвdeа
_HAVE_STRING_ARCH_°љbrk


1086 #iа
__GNUC_PREREQ
 (3, 2)

1087 
	#°љbrk
(
s
, 
acы±
) \

1088 
__exЛnsiЏ__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buЮtЪ_cЏ°™t_p
 (
acы±
и&& 
	`__°rЪg2_1b±r_p
 (accept) \

1091 ? ((
	`__buЮtЪ_cЏ°™t_p
 (
s
и&& 
	`__°rЪg2_1b±r_p
 (s)) \

1092 ? 
	`__buЮtЪ_°љbrk
 (
s
, 
acы±
) \

1093 : ((
__a0
 = ((
__cЏ°
 *и(
acы±
))[0], __a0 == '\0') \

1094 ? ((и(
s
), (*и
NULL
) \

1095 : ((
__a1
 = ((
__cЏ°
 *и(
acы±
))[1], __a1 == '\0') \

1096 ? 
	`__buЮtЪ_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__cЏ°
 *и(
acы±
))[2], __a2 == '\0') \

1098 ? 
	`__°љbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__cЏ°
 *и(
acы±
))[3] == '\0' \

1100 ? 
	`__°љbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buЮtЪ_°љbrk
 (
s
, 
acы±
)))))) \

1102 : 
	`__buЮtЪ_°љbrk
 (
s
, 
acы±
)); })

	)

1104 
	#°љbrk
(
s
, 
acы±
) \

1105 
__exЛnsiЏ__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buЮtЪ_cЏ°™t_p
 (
acы±
и&& 
	`__°rЪg2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__cЏ°
 *и(
acы±
))[0], __a0 == '\0') \

1109 ? ((и(
s
), (*и
NULL
) \

1110 : ((
__a1
 = ((
__cЏ°
 *и(
acы±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__cЏ°
 *и(
acы±
))[2], __a2 == '\0') \

1113 ? 
	`__°љbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__cЏ°
 *и(
acы±
))[3] == '\0' \

1115 ? 
	`__°љbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°љbrk
 (
s
, 
acы±
))))) \

1117 : 
	`°љbrk
 (
s
, 
acы±
)); })

	)

1121 
__STRING_INLINE
 *
__°љbrk_c2
 (
__cЏ°
 *
__s
, 
__acы±1
,

1122 
__acы±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°љbrk_c2
 (
__cЏ°
 *
__s
, 
__acы±1
, 
__acы±2
)

1127 *
__s
 !р'\0' && *__†!р
__acы±1
 && *__†!р
__acы±2
)

1128 ++
__s
;

1129  *
__s
 =р'\0' ? 
NULL
 : (*и(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°љbrk_c3
 (
__cЏ°
 *
__s
, 
__acы±1
,

1133 
__acы±2
, 
__acы±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°љbrk_c3
 (
__cЏ°
 *
__s
, 
__acы±1
, 
__acы±2
,

1136 
__acы±3
)

1139 *
__s
 !р'\0' && *__†!р
__acы±1
 && *__†!р
__acы±2


1140 && *
__s
 !р
__acы±3
)

1141 ++
__s
;

1142  *
__s
 =р'\0' ? 
NULL
 : (*и(
size_t
) __s;

1143 
	}
}

1149 #iа!
defЪed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edЋ
) \

1151 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
√edЋ
и&& 
	`__°rЪg2_1b±r_p
 (needle) \

1152 ? (((
__cЏ°
 *и(
√edЋ
))[0] == '\0' \

1153 ? (*и(
size_t
и(
hay°ack
) \

1154 : (((
__cЏ°
 *и(
√edЋ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__cЏ°
 *и(
√edЋ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edЋ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edЋ
)))

	)

1162 #iа!
defЪed
 
_HAVE_STRING_ARCH_°єok_r
 || defЪed 
_FORCE_INLINES


1163 #iвdeа
_HAVE_STRING_ARCH_°єok_r


1164 
	#__°єok_r
(
s
, 
£p
, 
√xН
) \

1165 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
£p
и&& 
	`__°rЪg2_1b±r_p
 (sep) \

1166 && ((
__cЏ°
 *и(
£p
))[0] != '\0' \

1167 && ((
__cЏ°
 *и(
£p
))[1] == '\0' \

1168 ? 
	`__°єok_r_1c
 (
s
, ((
__cЏ°
 *и(
£p
))[0], 
√xН
) \

1169 : 
	`__°єok_r
 (
s
, 
£p
, 
√xН
)))

	)

1172 
__STRING_INLINE
 *
__°єok_r_1c
 (*
__s
, 
__£p
, **
__√xН
);

1173 
__STRING_INLINE
 *

1174 
	$__°єok_r_1c
 (*
__s
, 
__£p
, **
__√xН
)

1176 *
__їsu…
;

1177 iа(
__s
 =р
NULL
)

1178 
__s
 = *
__√xН
;

1179 *
__s
 =р
__£p
)

1180 ++
__s
;

1181 
__їsu…
 = 
NULL
;

1182 iа(*
__s
 != '\0')

1184 
__їsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 iа(*
__s
++ =р
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xН
 = 
__s
;

1193  
__їsu…
;

1194 
	}
}

1195 #iа
defЪed
 
__USE_POSIX
 || defЪed 
__USE_MISC


1196 
	#°єok_r
(
s
, 
£p
, 
√xН
и
	`__°єok_r
 (s, sХ,ВexН)

	)

1201 #iа!
defЪed
 
_HAVE_STRING_ARCH_°r£p
 || defЪed 
_FORCE_INLINES


1202 #iвdeа
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rЪgp
, 
__cЏ°
 *
__dЦim
);

1205 
	#__°r£p
(
s
, 
їjeщ
) \

1206 
__exЛnsiЏ__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buЮtЪ_cЏ°™t_p
 (
їjeщ
и&& 
	`__°rЪg2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__cЏ°
 *и(
їjeщ
))[0], \

1210 ((
__cЏ°
 *и(
їjeщ
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__cЏ°
 *и(
їjeщ
))[1], \

1212 ((
__cЏ°
 *и(
їjeщ
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__cЏ°
 *и(
їjeщ
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__cЏ°
 *и(
їjeщ
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
їjeщ
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
їjeщ
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__їjeщ
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__їjeщ
)

1226 *
__їtvЃ
 = *
__s
;

1227 iа(
__їtvЃ
 !р
NULL
 && (*
__s
 = 
	`°rchr
 (__їtvЃ, 
__їjeщ
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__їtvЃ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__їjeщ1
, 
__їjeщ2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__їjeщ1
, 
__їjeщ2
)

1236 *
__їtvЃ
 = *
__s
;

1237 iа(
__їtvЃ
 !р
NULL
)

1239 *
__э
 = 
__їtvЃ
;

1242 iа(*
__э
 == '\0')

1244 
__э
 = 
NULL
;

1247 iа(*
__э
 =р
__їjeщ1
 || *__э =р
__їjeщ2
)

1249 *
__э
++ = '\0';

1252 ++
__э
;

1254 *
__s
 = 
__э
;

1256  
__їtvЃ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__їjeщ1
, 
__їjeщ2
,

1260 
__їjeщ3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__їjeщ1
, 
__їjeщ2
, 
__їjeщ3
)

1264 *
__їtvЃ
 = *
__s
;

1265 iа(
__їtvЃ
 !р
NULL
)

1267 *
__э
 = 
__їtvЃ
;

1270 iа(*
__э
 == '\0')

1272 
__э
 = 
NULL
;

1275 iа(*
__э
 =р
__їjeщ1
 || *__э =р
__їjeщ2
 || *__э =р
__їjeщ3
)

1277 *
__э
++ = '\0';

1280 ++
__э
;

1282 *
__s
 = 
__э
;

1284  
__їtvЃ
;

1285 
	}
}

1286 #ifdeа
__USE_BSD


1287 
	#°r£p
(
s
, 
їjeщ
и
	`__°r£p
 (s,Дejeщ)

	)

1294 #ifdeа
__USE_MISC


1296 #iа!
defЪed
 
_HAVE_STRING_ARCH_°rdup
 || !defЪed 
_HAVE_STRING_ARCH_°Їdup


1297 
	#__√ed_mЃloc_™d_€ќoc


	)

1298 
	~<°dlib.h
>

1301 #iвdeа
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__cЏ°
 *
__°rЪg
и
__THROW
 
__©МibuЛ_mЃloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
s
и&& 
	`__°rЪg2_1b±r_p
 (s) \

1306 ? (((
__cЏ°
 *и(
s
))[0] == '\0' \

1307 ? (*и
	`€ќoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Ћn
 = 
	`°ЊТ
 (
s
) + 1; \

1309 *
__їtvЃ
 = (*и
	`mЃloc
 (
__Ћn
); \

1310 iа(
__їtvЃ
 !р
NULL
) \

1311 
__їtvЃ
 = (*и
	`memэy
 (__їtvЃ, 
s
, 
__Ћn
); \

1312 
__їtvЃ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #iа
defЪed
 
__USE_SVID
 || defЪed 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
и
	`__°rdup
 (s)

	)

1320 #iвdeа
_HAVE_STRING_ARCH_°Їdup


1322 *
	$__°Їdup
 (
__cЏ°
 *
__°rЪg
, 
size_t
 
__n
)

1323 
__THROW
 
__©МibuЛ_mЃloc__
;

1324 
	#__°Їdup
(
s
, 
n
) \

1325 (
	`__exЛnsiЏ__
 (
	`__buЮtЪ_cЏ°™t_p
 (
s
и&& 
	`__°rЪg2_1b±r_p
 (s) \

1326 ? (((
__cЏ°
 *и(
s
))[0] == '\0' \

1327 ? (*и
	`€ќoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Ћn
 = 
	`°ЊТ
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__їtvЃ
; \

1331 iа(
__n
 < 
__Ћn
) \

1332 
__Ћn
 = 
__n
 + 1; \

1333 
__їtvЃ
 = (*и
	`mЃloc
 (
__Ћn
); \

1334 iа(
__їtvЃ
 !р
NULL
) \

1336 
__їtvЃ
[
__Ћn
 - 1] = '\0'; \

1337 
__їtvЃ
 = (*и
	`memэy
 (__їtvЃ, 
s
, \

1338 
__Ћn
 - 1); \

1340 
__їtvЃ
; 
	}
})) \

1341 : 
	`__°Їdup
 (
s
, 
n
)))

	)

1343 #ifdeа
__USE_GNU


1344 
	#°Їdup
(
s
, 
n
и
	`__°Їdup
 (s,В)

	)

1350 #iвdeа
_FORCE_INLINES


1351 #undeа
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #iвdeа
_STRING_H


23 
__wђndeю
 (
__wђn_mem£t_zФo_Ћn
,

26 #iвdeа
__эlu•lus


30 #undeа
memэy


31 #undeа
memmove


32 #undeа
mem£t


33 #undeа
°r€t


34 #undeа
°rэy


35 #undeа
°Ї€t


36 #undeа
°Їэy


37 #ifdeа
__USE_GNU


38 #undeа
mempэy


39 #undeа
°pэy


41 #ifdeа
__USE_BSD


42 #undeа
bcЁy


43 #undeа
bzФo


48 
__exЛЇ_Ѓways_ЪlЪe
 *

49 
__NTH
 (
	$memэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

50 
size_t
 
__Ћn
))

52  
	`__buЮtЪ___memэy_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exЛЇ_Ѓways_ЪlЪe
 *

56 
__NTH
 (
	$memmove
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

57 
size_t
 
__Ћn
))

59  
	`__buЮtЪ___memmove_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifdeа
__USE_GNU


63 
__exЛЇ_Ѓways_ЪlЪe
 *

64 
__NTH
 (
	$mempэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

65 
size_t
 
__Ћn
))

67  
	`__buЮtЪ___mempэy_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exЛЇ_Ѓways_ЪlЪe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Ћn
))

80 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
) && __len == 0)

82 
	`__wђn_mem£t_zФo_Ћn
 ();

83  
__de°
;

85  
	`__buЮtЪ___mem£t_chk
 (
__de°
, 
__ch
, 
__Ћn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifdeа
__USE_BSD


89 
__exЛЇ_Ѓways_ЪlЪe
 

90 
__NTH
 (
	$bcЁy
 (
__cЏ°
 *
__ї°riщ
 
__§c
, *__ї°riщ 
__de°
,

91 
size_t
 
__Ћn
))

93 (и
	`__buЮtЪ___memmove_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exЛЇ_Ѓways_ЪlЪe
 

97 
__NTH
 (
	$bzФo
 (*
__de°
, 
size_t
 
__Ћn
))

99 (и
	`__buЮtЪ___mem£t_chk
 (
__de°
, '\0', 
__Ћn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exЛЇ_Ѓways_ЪlЪe
 *

104 
__NTH
 (
	$°rэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
))

106  
	`__buЮtЪ___°rэy_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifdeа
__USE_GNU


110 
__exЛЇ_Ѓways_ЪlЪe
 *

111 
__NTH
 (
	$°pэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
))

113  
	`__buЮtЪ___°pэy_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exЛЇ_Ѓways_ЪlЪe
 *

119 
__NTH
 (
	$°Їэy
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

120 
size_t
 
__Ћn
))

122  
	`__buЮtЪ___°Їэy_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤эy_chk
 (*
__de°
, 
__cЏ°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Ћn
и
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤эy_ЃЯs
, (*
__de°
,

129 
__cЏ°
 *
__§c
,

130 
size_t
 
__n
), 
°≤эy
);

132 
__exЛЇ_Ѓways_ЪlЪe
 *

133 
	`__NTH
 (
	$°≤эy
 (*
__de°
, 
__cЏ°
 *
__§c
, 
size_t
 
__n
))

135 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1

136 && (!
	`__buЮtЪ_cЏ°™t_p
 (
__n
и|| __ј<р
	`__bos
 (
__de°
)))

137  
	`__°≤эy_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤эy_ЃЯs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exЛЇ_Ѓways_ЪlЪe
 *

143 
__NTH
 (
	$°r€t
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
))

145  
	`__buЮtЪ___°r€t_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exЛЇ_Ѓways_ЪlЪe
 *

150 
__NTH
 (
	$°Ї€t
 (*
__ї°riщ
 
__de°
, 
__cЏ°
 *__ї°riщ 
__§c
,

151 
size_t
 
__Ћn
))

153  
	`__buЮtЪ___°Ї€t_chk
 (
__de°
, 
__§c
, 
__Ћn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #iвdeа
_STDIO_H


26 #ifdeа 
__USE_BSD


27 
sys_√Љ
;

28 
__cЏ°
 *__cЏ° 
sys_ФЊi°
[];

30 #ifdeа 
__USE_GNU


31 
_sys_√Љ
;

32 
__cЏ°
 *__cЏ° 
_sys_ФЊi°
[];

	@/usr/include/bits/syscall.h

3 #iвdeа
_SYSCALL_H


7 
	~<bЩs/w№dsize.h
>

9 
	#SYS__sysщl
 
__NR__sysщl


	)

10 
	#SYS_acыss
 
__NR_acыss


	)

11 
	#SYS_acщ
 
__NR_acщ


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sys€ќ
 
__NR_afs_sys€ќ


	)

15 
	#SYS_Ѓђm
 
__NR_Ѓђm


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_€pgС
 
__NR_€pgС


	)

18 
	#SYS_€p£t
 
__NR_€p£t


	)

19 
	#SYS_chdЬ
 
__NR_chdЬ


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroў
 
__NR_chroў


	)

23 
	#SYS_юock_gСїs
 
__NR_юock_gСїs


	)

24 
	#SYS_юock_gСtime
 
__NR_юock_gСtime


	)

25 
	#SYS_юock_«no¶Уp
 
__NR_юock_«no¶Уp


	)

26 
	#SYS_юock_£Йime
 
__NR_юock_£Йime


	)

27 
	#SYS_юЏe
 
__NR_юЏe


	)

28 
	#SYS_юo£
 
__NR_юo£


	)

29 
	#SYS_ьЧt
 
__NR_ьЧt


	)

30 
	#SYS_ьЧЛ_moduЋ
 
__NR_ьЧЛ_moduЋ


	)

31 
	#SYS_dЦСe_moduЋ
 
__NR_dЦСe_moduЋ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_Хёl_ьЧЛ
 
__NR_Хёl_ьЧЛ


	)

36 
	#SYS_Хёl_ьЧЛ1
 
__NR_Хёl_ьЧЛ1


	)

37 
	#SYS_Хёl_щl
 
__NR_Хёl_щl


	)

38 
	#SYS_Хёl_pwaЩ
 
__NR_Хёl_pwaЩ


	)

39 
	#SYS_Хёl_waЩ
 
__NR_Хёl_waЩ


	)

40 
	#SYS_evТtfd
 
__NR_evТtfd


	)

41 
	#SYS_evТtfd2
 
__NR_evТtfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exЩ
 
__NR_exЩ


	)

44 
	#SYS_exЩ_group
 
__NR_exЩ_group


	)

45 
	#SYS_зcыsІt
 
__NR_зcыsІt


	)

46 
	#SYS_зdvi£64
 
__NR_зdvi£64


	)

47 
	#SYS_зќo€Л
 
__NR_зќo€Л


	)

48 
	#SYS_fchdЬ
 
__NR_fchdЬ


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_fъО
 
__NR_fъО


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgСx©М
 
__NR_fgСx©М


	)

56 
	#SYS_жi°x©М
 
__NR_жi°x©М


	)

57 
	#SYS_жock
 
__NR_жock


	)

58 
	#SYS_f№k
 
__NR_f№k


	)

59 
	#SYS_дemovex©М
 
__NR_дemovex©М


	)

60 
	#SYS_f£tx©М
 
__NR_f£tx©М


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_бrun€Л
 
__NR_бrun€Л


	)

65 
	#SYS_fuЛx
 
__NR_fuЛx


	)

66 
	#SYS_futimeІt
 
__NR_futimeІt


	)

67 
	#SYS_gС_kФ√l_syms
 
__NR_gС_kФ√l_syms


	)

68 
	#SYS_gС_mempёicy
 
__NR_gС_mempёicy


	)

69 
	#SYS_gС_robu°_li°
 
__NR_gС_robu°_li°


	)

70 
	#SYS_gС_thїad_ђЧ
 
__NR_gС_thїad_ђЧ


	)

71 
	#SYS_gСcwd
 
__NR_gСcwd


	)

72 
	#SYS_gСdТts
 
__NR_gСdТts


	)

73 
	#SYS_gСdТts64
 
__NR_gСdТts64


	)

74 
	#SYS_gСegid
 
__NR_gСegid


	)

75 
	#SYS_gСeuid
 
__NR_gСeuid


	)

76 
	#SYS_gСgid
 
__NR_gСgid


	)

77 
	#SYS_gСgroups
 
__NR_gСgroups


	)

78 
	#SYS_gСЩimФ
 
__NR_gСЩimФ


	)

79 
	#SYS_gСpgid
 
__NR_gСpgid


	)

80 
	#SYS_gСpgљ
 
__NR_gСpgљ


	)

81 
	#SYS_gСpid
 
__NR_gСpid


	)

82 
	#SYS_gСpmsg
 
__NR_gСpmsg


	)

83 
	#SYS_gСµid
 
__NR_gСµid


	)

84 
	#SYS_gСіi№Щy
 
__NR_gСіi№Щy


	)

85 
	#SYS_gСїsgid
 
__NR_gСїsgid


	)

86 
	#SYS_gСїsuid
 
__NR_gСїsuid


	)

87 
	#SYS_gСЊimЩ
 
__NR_gСЊimЩ


	)

88 
	#SYS_gСruІge
 
__NR_gСruІge


	)

89 
	#SYS_gСsid
 
__NR_gСsid


	)

90 
	#SYS_gСtid
 
__NR_gСtid


	)

91 
	#SYS_gСtimeofday
 
__NR_gСtimeofday


	)

92 
	#SYS_gСuid
 
__NR_gСuid


	)

93 
	#SYS_gСx©М
 
__NR_gСx©М


	)

94 
	#SYS_ЪЩ_moduЋ
 
__NR_ЪЩ_moduЋ


	)

95 
	#SYS_Ъўify_add_w©ch
 
__NR_Ъўify_add_w©ch


	)

96 
	#SYS_Ъўify_ЪЩ
 
__NR_Ъўify_ЪЩ


	)

97 
	#SYS_Ъўify_ЪЩ1
 
__NR_Ъўify_ЪЩ1


	)

98 
	#SYS_Ъўify_rm_w©ch
 
__NR_Ъўify_rm_w©ch


	)

99 
	#SYS_io_€nыl
 
__NR_io_€nыl


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gСevТts
 
__NR_io_gСevТts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submЩ
 
__NR_io_submЩ


	)

104 
	#SYS_ioщl
 
__NR_ioщl


	)

105 
	#SYS_iЁФm
 
__NR_iЁФm


	)

106 
	#SYS_iЁl
 
__NR_iЁl


	)

107 
	#SYS_iЁrio_gС
 
__NR_iЁrio_gС


	)

108 
	#SYS_iЁrio_£t
 
__NR_iЁrio_£t


	)

109 
	#SYS_kexec_lяd
 
__NR_kexec_lяd


	)

110 
	#SYS_keyщl
 
__NR_keyщl


	)

111 
	#SYS_kЮl
 
__NR_kЮl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgСx©М
 
__NR_lgСx©М


	)

114 
	#SYS_lЪk
 
__NR_lЪk


	)

115 
	#SYS_lЪk©
 
__NR_lЪk©


	)

116 
	#SYS_li°x©М
 
__NR_li°x©М


	)

117 
	#SYS_ќi°x©М
 
__NR_ќi°x©М


	)

118 
	#SYS_lookup_dcookЫ
 
__NR_lookup_dcookЫ


	)

119 
	#SYS_ћemovex©М
 
__NR_ћemovex©М


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©М
 
__NR_l£tx©М


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mbЪd
 
__NR_mbЪd


	)

125 
	#SYS_migњЛ_Јges
 
__NR_migњЛ_Јges


	)

126 
	#SYS_mЪc№e
 
__NR_mЪc№e


	)

127 
	#SYS_mkdЬ
 
__NR_mkdЬ


	)

128 
	#SYS_mkdЬ©
 
__NR_mkdЬ©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockЃl
 
__NR_mlockЃl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mouЅ
 
__NR_mouЅ


	)

136 
	#SYS_move_Јges
 
__NR_move_Јges


	)

137 
	#SYS_mіўeщ
 
__NR_mіўeщ


	)

138 
	#SYS_mq_gС£ПЙr
 
__NR_mq_gС£ПЙr


	)

139 
	#SYS_mq_nўify
 
__NR_mq_nўify


	)

140 
	#SYS_mq_ЁТ
 
__NR_mq_ЁТ


	)

141 
	#SYS_mq_timedїыive
 
__NR_mq_timedїыive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆Ъk
 
__NR_mq_u∆Ъk


	)

144 
	#SYS_mїm≠
 
__NR_mїm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockЃl
 
__NR_mu∆ockЃl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶Уp
 
__NR_«no¶Уp


	)

150 
	#SYS_nfs£rvщl
 
__NR_nfs£rvщl


	)

151 
	#SYS_ЁТ
 
__NR_ЁТ


	)

152 
	#SYS_ЁТ©
 
__NR_ЁТ©


	)

153 
	#SYS_Јu£
 
__NR_Јu£


	)

154 
	#SYS_≥rf_couЅФ_ЁТ
 
__NR_≥rf_couЅФ_ЁТ


	)

155 
	#SYS_≥rsЏЃЩy
 
__NR_≥rsЏЃЩy


	)

156 
	#SYS_pЭe
 
__NR_pЭe


	)

157 
	#SYS_pЭe2
 
__NR_pЭe2


	)

158 
	#SYS_pivў_roў
 
__NR_pivў_roў


	)

159 
	#SYS_pёl
 
__NR_pёl


	)

160 
	#SYS_µёl
 
__NR_µёl


	)

161 
	#SYS_іщl
 
__NR_іщl


	)

162 
	#SYS_іЧd64
 
__NR_іЧd64


	)

163 
	#SYS_іЧdv
 
__NR_іЧdv


	)

164 
	#SYS_p£Ћщ6
 
__NR_p£Ћщ6


	)

165 
	#SYS_±њы
 
__NR_±њы


	)

166 
	#SYS_puНmsg
 
__NR_puНmsg


	)

167 
	#SYS_pwrЩe64
 
__NR_pwrЩe64


	)

168 
	#SYS_pwrЩev
 
__NR_pwrЩev


	)

169 
	#SYS_quФy_moduЋ
 
__NR_quФy_moduЋ


	)

170 
	#SYS_quўaщl
 
__NR_quўaщl


	)

171 
	#SYS_їad
 
__NR_їad


	)

172 
	#SYS_їadahЧd
 
__NR_їadahЧd


	)

173 
	#SYS_їadlЪk
 
__NR_їadlЪk


	)

174 
	#SYS_їadlЪk©
 
__NR_їadlЪk©


	)

175 
	#SYS_їadv
 
__NR_їadv


	)

176 
	#SYS_їboў
 
__NR_їboў


	)

177 
	#SYS_їm≠_fЮe_Јges
 
__NR_їm≠_fЮe_Јges


	)

178 
	#SYS_їmovex©М
 
__NR_їmovex©М


	)

179 
	#SYS_ї«me
 
__NR_ї«me


	)

180 
	#SYS_ї«mЧt
 
__NR_ї«mЧt


	)

181 
	#SYS_їque°_key
 
__NR_їque°_key


	)

182 
	#SYS_ї°ђt_sys€ќ
 
__NR_ї°ђt_sys€ќ


	)

183 
	#SYS_rmdЬ
 
__NR_rmdЬ


	)

184 
	#SYS_є_sigaщiЏ
 
__NR_є_sigaщiЏ


	)

185 
	#SYS_є_sig≥ndЪg
 
__NR_є_sig≥ndЪg


	)

186 
	#SYS_є_sigіocmask
 
__NR_є_sigіocmask


	)

187 
	#SYS_є_sigqueueЪfo
 
__NR_є_sigqueueЪfo


	)

188 
	#SYS_є_sigїtuЇ
 
__NR_є_sigїtuЇ


	)

189 
	#SYS_є_sigsu•Тd
 
__NR_є_sigsu•Тd


	)

190 
	#SYS_є_sigtimedwaЩ
 
__NR_є_sigtimedwaЩ


	)

191 
	#SYS_є_tgsigqueueЪfo
 
__NR_є_tgsigqueueЪfo


	)

192 
	#SYS_sched_gС_іi№Щy_max
 
__NR_sched_gС_іi№Щy_max


	)

193 
	#SYS_sched_gС_іi№Щy_mЪ
 
__NR_sched_gС_іi№Щy_mЪ


	)

194 
	#SYS_sched_gСaffЪЩy
 
__NR_sched_gСaffЪЩy


	)

195 
	#SYS_sched_gСЈњm
 
__NR_sched_gСЈњm


	)

196 
	#SYS_sched_gСscheduЋr
 
__NR_sched_gСscheduЋr


	)

197 
	#SYS_sched_Љ_gС_ЪЛrvЃ
 
__NR_sched_Љ_gС_ЪЛrvЃ


	)

198 
	#SYS_sched_£ПffЪЩy
 
__NR_sched_£ПffЪЩy


	)

199 
	#SYS_sched_£Нђam
 
__NR_sched_£Нђam


	)

200 
	#SYS_sched_£tscheduЋr
 
__NR_sched_£tscheduЋr


	)

201 
	#SYS_sched_yЫld
 
__NR_sched_yЫld


	)

202 
	#SYS_£Ћщ
 
__NR_£Ћщ


	)

203 
	#SYS_£ndfЮe
 
__NR_£ndfЮe


	)

204 
	#SYS_£t_mempёicy
 
__NR_£t_mempёicy


	)

205 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

206 
	#SYS_£t_thїad_ђЧ
 
__NR_£t_thїad_ђЧ


	)

207 
	#SYS_£t_tid_addїss
 
__NR_£t_tid_addїss


	)

208 
	#SYS_£tdomaЪ«me
 
__NR_£tdomaЪ«me


	)

209 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

210 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

211 
	#SYS_£tgid
 
__NR_£tgid


	)

212 
	#SYS_£tgroups
 
__NR_£tgroups


	)

213 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

214 
	#SYS_£tЩimФ
 
__NR_£tЩimФ


	)

215 
	#SYS_£Нgid
 
__NR_£Нgid


	)

216 
	#SYS_£Нri№Щy
 
__NR_£Нri№Щy


	)

217 
	#SYS_£Мegid
 
__NR_£Мegid


	)

218 
	#SYS_£Мesgid
 
__NR_£Мesgid


	)

219 
	#SYS_£Мesuid
 
__NR_£Мesuid


	)

220 
	#SYS_£Мeuid
 
__NR_£Мeuid


	)

221 
	#SYS_£МlimЩ
 
__NR_£МlimЩ


	)

222 
	#SYS_£tsid
 
__NR_£tsid


	)

223 
	#SYS_£Йimeofday
 
__NR_£Йimeofday


	)

224 
	#SYS_£tuid
 
__NR_£tuid


	)

225 
	#SYS_£tx©М
 
__NR_£tx©М


	)

226 
	#SYS_sigЃt°ack
 
__NR_sigЃt°ack


	)

227 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

228 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

229 
	#SYS_•liы
 
__NR_•liы


	)

230 
	#SYS_°©
 
__NR_°©


	)

231 
	#SYS_°©fs
 
__NR_°©fs


	)

232 
	#SYS_sw≠off
 
__NR_sw≠off


	)

233 
	#SYS_sw≠Џ
 
__NR_sw≠Џ


	)

234 
	#SYS_symlЪk
 
__NR_symlЪk


	)

235 
	#SYS_symlЪk©
 
__NR_symlЪk©


	)

236 
	#SYS_sync
 
__NR_sync


	)

237 
	#SYS_sync_fЮe_њnge
 
__NR_sync_fЮe_њnge


	)

238 
	#SYS_sysfs
 
__NR_sysfs


	)

239 
	#SYS_sysЪfo
 
__NR_sysЪfo


	)

240 
	#SYS_sy¶og
 
__NR_sy¶og


	)

241 
	#SYS_Лe
 
__NR_Лe


	)

242 
	#SYS_tgkЮl
 
__NR_tgkЮl


	)

243 
	#SYS_time
 
__NR_time


	)

244 
	#SYS_timФ_ьЧЛ
 
__NR_timФ_ьЧЛ


	)

245 
	#SYS_timФ_dЦСe
 
__NR_timФ_dЦСe


	)

246 
	#SYS_timФ_gСovФrun
 
__NR_timФ_gСovФrun


	)

247 
	#SYS_timФ_gСtime
 
__NR_timФ_gСtime


	)

248 
	#SYS_timФ_£Йime
 
__NR_timФ_£Йime


	)

249 
	#SYS_timФfd_ьЧЛ
 
__NR_timФfd_ьЧЛ


	)

250 
	#SYS_timФfd_gСtime
 
__NR_timФfd_gСtime


	)

251 
	#SYS_timФfd_£Йime
 
__NR_timФfd_£Йime


	)

252 
	#SYS_times
 
__NR_times


	)

253 
	#SYS_tkЮl
 
__NR_tkЮl


	)

254 
	#SYS_Мun€Л
 
__NR_Мun€Л


	)

255 
	#SYS_umask
 
__NR_umask


	)

256 
	#SYS_umouЅ2
 
__NR_umouЅ2


	)

257 
	#SYS_u«me
 
__NR_u«me


	)

258 
	#SYS_u∆Ъk
 
__NR_u∆Ъk


	)

259 
	#SYS_u∆Ъk©
 
__NR_u∆Ъk©


	)

260 
	#SYS_unshђe
 
__NR_unshђe


	)

261 
	#SYS_u£lib
 
__NR_u£lib


	)

262 
	#SYS_u°©
 
__NR_u°©


	)

263 
	#SYS_utime
 
__NR_utime


	)

264 
	#SYS_utimТІt
 
__NR_utimТІt


	)

265 
	#SYS_utimes
 
__NR_utimes


	)

266 
	#SYS_vf№k
 
__NR_vf№k


	)

267 
	#SYS_vh™gup
 
__NR_vh™gup


	)

268 
	#SYS_vm•liы
 
__NR_vm•liы


	)

269 
	#SYS_v£rvФ
 
__NR_v£rvФ


	)

270 
	#SYS_waЩ4
 
__NR_waЩ4


	)

271 
	#SYS_waЩid
 
__NR_waЩid


	)

272 
	#SYS_wrЩe
 
__NR_wrЩe


	)

273 
	#SYS_wrЩev
 
__NR_wrЩev


	)

274 #iа
__WORDSIZE
 == 64

275 
	#SYS_acы±
 
__NR_acы±


	)

276 
	#SYS_acы±4
 
__NR_acы±4


	)

277 
	#SYS_ђch_іщl
 
__NR_ђch_іщl


	)

278 
	#SYS_bЪd
 
__NR_bЪd


	)

279 
	#SYS_cЏ√щ
 
__NR_cЏ√щ


	)

280 
	#SYS_Хёl_щl_ёd
 
__NR_Хёl_щl_ёd


	)

281 
	#SYS_Хёl_waЩ_ёd
 
__NR_Хёl_waЩ_ёd


	)

282 
	#SYS_gС≥Ф«me
 
__NR_gС≥Ф«me


	)

283 
	#SYS_gСsock«me
 
__NR_gСsock«me


	)

284 
	#SYS_gСsockЁt
 
__NR_gСsockЁt


	)

285 
	#SYS_li°Т
 
__NR_li°Т


	)

286 
	#SYS_msgщl
 
__NR_msgщl


	)

287 
	#SYS_msggС
 
__NR_msggС


	)

288 
	#SYS_msgrcv
 
__NR_msgrcv


	)

289 
	#SYS_msgҐd
 
__NR_msgҐd


	)

290 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

291 
	#SYS_їcvдom
 
__NR_їcvдom


	)

292 
	#SYS_їcvmsg
 
__NR_їcvmsg


	)

293 
	#SYS_£curЩy
 
__NR_£curЩy


	)

294 
	#SYS_£mщl
 
__NR_£mщl


	)

295 
	#SYS_£mgС
 
__NR_£mgС


	)

296 
	#SYS_£mЁ
 
__NR_£mЁ


	)

297 
	#SYS_£mtimedЁ
 
__NR_£mtimedЁ


	)

298 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

299 
	#SYS_£ndto
 
__NR_£ndto


	)

300 
	#SYS_£tsockЁt
 
__NR_£tsockЁt


	)

301 
	#SYS_shm©
 
__NR_shm©


	)

302 
	#SYS_shmщl
 
__NR_shmщl


	)

303 
	#SYS_shmdt
 
__NR_shmdt


	)

304 
	#SYS_shmgС
 
__NR_shmgС


	)

305 
	#SYS_shutdown
 
__NR_shutdown


	)

306 
	#SYS_sockС
 
__NR_sockС


	)

307 
	#SYS_sockСЈЬ
 
__NR_sockСЈЬ


	)

308 
	#SYS_tux€ќ
 
__NR_tux€ќ


	)

310 
	#SYS__ќ£ek
 
__NR__ќ£ek


	)

311 
	#SYS__√w£Ћщ
 
__NR__√w£Ћщ


	)

312 
	#SYS_bdжush
 
__NR_bdжush


	)

313 
	#SYS_bїak
 
__NR_bїak


	)

314 
	#SYS_chown32
 
__NR_chown32


	)

315 
	#SYS_зdvi£64_64
 
__NR_зdvi£64_64


	)

316 
	#SYS_fchown32
 
__NR_fchown32


	)

317 
	#SYS_fъО64
 
__NR_fъО64


	)

318 
	#SYS_f°©64
 
__NR_f°©64


	)

319 
	#SYS_f°©©64
 
__NR_f°©©64


	)

320 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

321 
	#SYS_бime
 
__NR_бime


	)

322 
	#SYS_бrun€Л64
 
__NR_бrun€Л64


	)

323 
	#SYS_gСэu
 
__NR_gСэu


	)

324 
	#SYS_gСegid32
 
__NR_gСegid32


	)

325 
	#SYS_gСeuid32
 
__NR_gСeuid32


	)

326 
	#SYS_gСgid32
 
__NR_gСgid32


	)

327 
	#SYS_gСgroups32
 
__NR_gСgroups32


	)

328 
	#SYS_gСїsgid32
 
__NR_gСїsgid32


	)

329 
	#SYS_gСїsuid32
 
__NR_gСїsuid32


	)

330 
	#SYS_gСuid32
 
__NR_gСuid32


	)

331 
	#SYS_gЙy
 
__NR_gЙy


	)

332 
	#SYS_idЋ
 
__NR_idЋ


	)

333 
	#SYS_Эc
 
__NR_Эc


	)

334 
	#SYS_lchown32
 
__NR_lchown32


	)

335 
	#SYS_lock
 
__NR_lock


	)

336 
	#SYS_l°©64
 
__NR_l°©64


	)

337 
	#SYS_madvi£1
 
__NR_madvi£1


	)

338 
	#SYS_mm≠2
 
__NR_mm≠2


	)

339 
	#SYS_mpx
 
__NR_mpx


	)

340 
	#SYS_niы
 
__NR_niы


	)

341 
	#SYS_ёdf°©
 
__NR_ёdf°©


	)

342 
	#SYS_ёdl°©
 
__NR_ёdl°©


	)

343 
	#SYS_ёdёdu«me
 
__NR_ёdёdu«me


	)

344 
	#SYS_ёd°©
 
__NR_ёd°©


	)

345 
	#SYS_ёdu«me
 
__NR_ёdu«me


	)

346 
	#SYS_іof
 
__NR_іof


	)

347 
	#SYS_іofЮ
 
__NR_іofЮ


	)

348 
	#SYS_їaddЬ
 
__NR_їaddЬ


	)

349 
	#SYS_£ndfЮe64
 
__NR_£ndfЮe64


	)

350 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

351 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

352 
	#SYS_£tgid32
 
__NR_£tgid32


	)

353 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

354 
	#SYS_£Мegid32
 
__NR_£Мegid32


	)

355 
	#SYS_£Мesgid32
 
__NR_£Мesgid32


	)

356 
	#SYS_£Мesuid32
 
__NR_£Мesuid32


	)

357 
	#SYS_£Мeuid32
 
__NR_£Мeuid32


	)

358 
	#SYS_£tuid32
 
__NR_£tuid32


	)

359 
	#SYS_sgСmask
 
__NR_sgСmask


	)

360 
	#SYS_sigaщiЏ
 
__NR_sigaщiЏ


	)

361 
	#SYS_sig«l
 
__NR_sig«l


	)

362 
	#SYS_sig≥ndЪg
 
__NR_sig≥ndЪg


	)

363 
	#SYS_sigіocmask
 
__NR_sigіocmask


	)

364 
	#SYS_sigїtuЇ
 
__NR_sigїtuЇ


	)

365 
	#SYS_sigsu•Тd
 
__NR_sigsu•Тd


	)

366 
	#SYS_sockС€ќ
 
__NR_sockС€ќ


	)

367 
	#SYS_s£tmask
 
__NR_s£tmask


	)

368 
	#SYS_°©64
 
__NR_°©64


	)

369 
	#SYS_°©fs64
 
__NR_°©fs64


	)

370 
	#SYS_°ime
 
__NR_°ime


	)

371 
	#SYS_°ty
 
__NR_°ty


	)

372 
	#SYS_Мun€Л64
 
__NR_Мun€Л64


	)

373 
	#SYS_ugСЊimЩ
 
__NR_ugСЊimЩ


	)

374 
	#SYS_ulimЩ
 
__NR_ulimЩ


	)

375 
	#SYS_umouЅ
 
__NR_umouЅ


	)

376 
	#SYS_vm86
 
__NR_vm86


	)

377 
	#SYS_vm86ёd
 
__NR_vm86ёd


	)

378 
	#SYS_waЩpid
 
__NR_waЩpid


	)

	@/usr/include/bits/time.h

24 #iвdeа
__√ed_timevЃ


25 #iвdeа
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #iа!
defЪed
 
__STRICT_ANSI__
 && !defЪed 
__USE_XOPEN2K


39 
	~<bЩs/ty≥s.h
>

40 
__syscЏf
 ();

41 
	#CLK_TCK
 ((
__юock_t
и
	`__syscЏf
 (2)и

	)

44 #ifdeа
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifdeа
__√ed_timevЃ


62 #undeа
__√ed_timevЃ


63 #iвdeа
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bЩs/ty≥s.h
>

69 
	stimevЃ


71 
__time_t
 
	mtv_£c
;

72 
__su£cЏds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #iвdef 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<г©uїs.h
>

28 
	~<bЩs/w№dsize.h
>

31 
	t__u_chђ
;

32 
	t__u_sh№t
;

33 
	t__u_Ъt
;

34 
	t__u_lЏg
;

37 sig√d 
	t__Ъt8_t
;

38 
	t__uЪt8_t
;

39 sig√d 
	t__Ъt16_t
;

40 
	t__uЪt16_t
;

41 sig√d 
	t__Ъt32_t
;

42 
	t__uЪt32_t
;

43 #iа
__WORDSIZE
 == 64

44 sig√d 
	t__Ъt64_t
;

45 
	t__uЪt64_t
;

46 #Цiа
defЪed
 
__GLIBC_HAVE_LONG_LONG


47 
__exЛnsiЏ__
 sig√d 
	t__Ъt64_t
;

48 
__exЛnsiЏ__
 
	t__uЪt64_t
;

52 #iа
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #Цiа
defЪed
 
__GLIBC_HAVE_LONG_LONG


56 
__exЛnsiЏ__
 
	t__quad_t
;

57 
__exЛnsiЏ__
 
	t__u_quad_t
;

61 
	m__vЃ
[2];

62 } 
	t__quad_t
;

65 
__u_lЏg
 
	m__vЃ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #iа
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exЛnsiЏ__
 

	)

117 #Цiа
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bЩs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__Ъo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__Ъo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆Ъk_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__юock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__Њim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__Њim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£cЏds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£cЏds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__юockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timФ_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkъt_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkъt64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkъt_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkъt64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfЮъt_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfЮъt64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__€ddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__ЪНМ_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockЋn_t
;

195 #undeа
__STD_TYPE


	@/usr/include/bits/uio.h

19 #iа!
defЪed
 
_SYS_UIO_H
 && !defЪed 
_FCNTL_H


23 #iвdeа
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Ћn
;

	@/usr/include/bits/unistd.h

20 #iвdeа
_UNISTD_H


24 
ssize_t
 
	$__їad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

25 
size_t
 
__buжТ
и
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__їad_ЃЯs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyЛs
), 
їad
и
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__їad_chk_wђn
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

30 
size_t
 
__buжТ
), 
__їad_chk
)

31 
__wur
 
	`__wђ«Йr
 ("read called with biggerЖengthБhan size of "

34 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
ssize_t


35 
	$їad
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
)

37 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

39 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__nbyЛs
))

40  
	`__їad_chk
 (
__fd
, 
__buf
, 
__nbyЛs
, 
	`__bos0
 (__buf));

42 iа(
__nbyЛs
 > 
	`__bos0
 (
__buf
))

43  
	`__їad_chk_wђn
 (
__fd
, 
__buf
, 
__nbyЛs
, 
	`__bos0
 (__buf));

45  
	`__їad_ЃЯs
 (
__fd
, 
__buf
, 
__nbyЛs
);

46 
	}
}

48 #ifdeа
__USE_UNIX98


49 
ssize_t
 
	$__іЧd_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
и
__wur
;

51 
ssize_t
 
	$__іЧd64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
и
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__іЧd_ЃЯs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

55 
__off_t
 
__off£t
), 
іЧd
и
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__іЧd64_ЃЯs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

58 
__off64_t
 
__off£t
), 
іЧd64
и
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__іЧd_chk_wђn
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__іЧd_chk
)

62 
__wur
 
	`__wђ«Йr
 ("pread called with biggerЖengthБhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__іЧd64_chk_wђn
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__іЧd64_chk
)

68 
__wur
 
	`__wђ«Йr
 ("pread64 called with biggerЖengthБhan size of "

71 #iвdeа
__USE_FILE_OFFSET64


72 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
ssize_t


73 
	$іЧd
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
, 
__off_t
 
__off£t
)

75 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

77 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__nbyЛs
))

78  
	`__іЧd_chk
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
, 
	`__bos0
 (__buf));

80 iа–
__nbyЛs
 > 
	`__bos0
 (
__buf
))

81  
	`__іЧd_chk_wђn
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__іЧd_ЃЯs
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
);

85 
	}
}

87 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
ssize_t


88 
	$іЧd
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
, 
__off64_t
 
__off£t
)

90 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

92 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__nbyЛs
))

93  
	`__іЧd64_chk
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
, 
	`__bos0
 (__buf));

95 iа–
__nbyЛs
 > 
	`__bos0
 (
__buf
))

96  
	`__іЧd64_chk_wђn
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__іЧd64_ЃЯs
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
);

101 
	}
}

104 #ifdeа
__USE_LARGEFILE64


105 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
ssize_t


106 
	$іЧd64
 (
__fd
, *
__buf
, 
size_t
 
__nbyЛs
, 
__off64_t
 
__off£t
)

108 iа(
	`__bos0
 (
__buf
и!р(
size_t
) -1)

110 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__nbyЛs
))

111  
	`__іЧd64_chk
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
, 
	`__bos0
 (__buf));

113 iа–
__nbyЛs
 > 
	`__bos0
 (
__buf
))

114  
	`__іЧd64_chk_wђn
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__іЧd64_ЃЯs
 (
__fd
, 
__buf
, 
__nbyЛs
, 
__off£t
);

119 
	}
}

123 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED
 || defЪed 
__USE_XOPEN2K


124 
ssize_t
 
	$__їadlЪk_chk
 (
__cЏ°
 *
__ї°riщ
 
__Јth
,

125 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
,

126 
size_t
 
__buжТ
)

127 
__THROW
 
	`__nЏnuќ
 ((1, 2)и
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__їadlЪk_ЃЯs
,

129 (
__cЏ°
 *
__ї°riщ
 
__Јth
,

130 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
), 
їadlЪk
)

131 
	`__nЏnuќ
 ((1, 2)и
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__їadlЪk_chk_wђn
,

133 (
__cЏ°
 *
__ї°riщ
 
__Јth
,

134 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
,

135 
size_t
 
__buжТ
), 
__їadlЪk_chk
)

136 
	`__nЏnuќ
 ((1, 2)и
__wur
 
	`__wђ«Йr
 ("readlink called with biggerЖength "

139 
__exЛЇ_Ѓways_ЪlЪe
 
	`__nЏnuќ
 ((1, 2)и
__wur
 
ssize_t


140 
	`__NTH
 (
	$їadlЪk
 (
__cЏ°
 *
__ї°riщ
 
__Јth
, *__ї°riщ 
__buf
,

141 
size_t
 
__Ћn
))

143 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

145 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

146  
	`__їadlЪk_chk
 (
__Јth
, 
__buf
, 
__Ћn
, 
	`__bos
 (__buf));

148 iа–
__Ћn
 > 
	`__bos
 (
__buf
))

149  
	`__їadlЪk_chk_wђn
 (
__Јth
, 
__buf
, 
__Ћn
, 
	`__bos
 (__buf));

151  
	`__їadlЪk_ЃЯs
 (
__Јth
, 
__buf
, 
__Ћn
);

152 
	}
}

155 #ifdeа
__USE_ATFILE


156 
ssize_t
 
	$__їadlЪk©_chk
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__Јth
,

157 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
,

158 
size_t
 
__buжТ
)

159 
__THROW
 
	`__nЏnuќ
 ((2, 3)и
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__їadlЪk©_ЃЯs
,

161 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__Јth
,

162 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
),

163 
їadlЪk©
)

164 
	`__nЏnuќ
 ((2, 3)и
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__їadlЪk©_chk_wђn
,

166 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__Јth
,

167 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
,

168 
size_t
 
__buжТ
), 
__їadlЪk©_chk
)

169 
	`__nЏnuќ
 ((2, 3)и
__wur
 
	`__wђ«Йr
 ("readlinkat called with bigger "

173 
__exЛЇ_Ѓways_ЪlЪe
 
	`__nЏnuќ
 ((2, 3)и
__wur
 
ssize_t


174 
	`__NTH
 (
	$їadlЪk©
 (
__fd
, 
__cЏ°
 *
__ї°riщ
 
__Јth
,

175 *
__ї°riщ
 
__buf
, 
size_t
 
__Ћn
))

177 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

179 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

180  
	`__їadlЪk©_chk
 (
__fd
, 
__Јth
, 
__buf
, 
__Ћn
, 
	`__bos
 (__buf));

182 iа(
__Ћn
 > 
	`__bos
 (
__buf
))

183  
	`__їadlЪk©_chk_wђn
 (
__fd
, 
__Јth
, 
__buf
, 
__Ћn
,

184 
	`__bos
 (
__buf
));

186  
	`__їadlЪk©_ЃЯs
 (
__fd
, 
__Јth
, 
__buf
, 
__Ћn
);

187 
	}
}

190 *
	$__gСcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_И
__buжТ
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gСcwd_ЃЯs
,

193 (*
__buf
, 
size_t
 
__size
), 
gСcwd
и
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gСcwd_chk_wђn
,

195 (*
__buf
, 
size_t
 
__size
, size_И
__buжТ
),

196 
__gСcwd_chk
)

197 
__wur
 
	`__wђ«Йr
 ("getcwd caller with biggerЖengthБhan size of "

200 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 *

201 
	`__NTH
 (
	$gСcwd
 (*
__buf
, 
size_t
 
__size
))

203 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

205 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__size
))

206  
	`__gСcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 iа(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gСcwd_chk_wђn
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gСcwd_ЃЯs
 (
__buf
, 
__size
);

212 
	}
}

214 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_XOPEN_EXTENDED


215 *
	$__gСwd_chk
 (*
__buf
, 
size_t
 
buжТ
)

216 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gСwd_wђn
, (*
__buf
), 
gСwd
)

218 
	`__nЏnuќ
 ((1)и
__wur
 
	`__wђ«Йr
 ("please use getcwd instead,Зs getwd "

221 
__exЛЇ_Ѓways_ЪlЪe
 
	`__nЏnuќ
 ((1)и
__©МibuЛ_dХї€Лd__
 
__wur
 *

222 
	`__NTH
 (
	$gСwd
 (*
__buf
))

224 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

225  
	`__gСwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gСwd_wђn
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__cЏf°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Ћn
,

231 
size_t
 
__buжТ
и
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__cЏf°r_ЃЯs
, (
__«me
, *
__buf
,

233 
size_t
 
__Ћn
), 
cЏf°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__cЏf°r_chk_wђn
,

235 (
__«me
, *
__buf
, 
size_t
 
__Ћn
,

236 
size_t
 
__buжТ
), 
__cЏf°r_chk
)

237 
	`__wђ«Йr
 ("confstr called with biggerЖengthБhan size of destination "

240 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


241 
	`__NTH
 (
	$cЏf°r
 (
__«me
, *
__buf
, 
size_t
 
__Ћn
))

243 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

245 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

246  
	`__cЏf°r_chk
 (
__«me
, 
__buf
, 
__Ћn
, 
	`__bos
 (__buf));

248 iа(
	`__bos
 (
__buf
и< 
__Ћn
)

249  
	`__cЏf°r_chk_wђn
 (
__«me
, 
__buf
, 
__Ћn
, 
	`__bos
 (__buf));

251  
	`__cЏf°r_ЃЯs
 (
__«me
, 
__buf
, 
__Ћn
);

252 
	}
}

255 
	$__gСgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Ћn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gСgroups_ЃЯs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gСgroups
и
__wur
;

259 
	`__REDIRECT_NTH
 (
__gСgroups_chk_wђn
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Ћn
),

261 
__gСgroups_chk
)

262 
__wur
 
	`__wђ«Йr
 ("getgroups called with bigger group countБhan what "

265 
__exЛЇ_Ѓways_ЪlЪe
 

266 
	`__NTH
 (
	$gСgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 iа(
	`__bos
 (
__li°
и!р(
size_t
) -1)

270 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__size
) || __size < 0)

271  
	`__gСgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 iа(
__size
 *  (
__gid_t
и> 
	`__bos
 (
__li°
))

274  
	`__gСgroups_chk_wђn
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gСgroups_ЃЯs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__Йy«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
,

281 
size_t
 
__ƒЧl
и
__THROW
 
	`__nЏnuќ
 ((2));

282 
	`__REDIRECT_NTH
 (
__Йy«me_r_ЃЯs
, (
__fd
, *
__buf
,

283 
size_t
 
__buжТ
), 
Йy«me_r
)

284 
	`__nЏnuќ
 ((2));

285 
	`__REDIRECT_NTH
 (
__Йy«me_r_chk_wђn
,

286 (
__fd
, *
__buf
, 
size_t
 
__buжТ
,

287 
size_t
 
__ƒЧl
), 
__Йy«me_r_chk
)

288 
	`__nЏnuќ
 ((2)и
	`__wђ«Йr
 ("ttyname_r called with bigger buflenБhan "

291 
__exЛЇ_Ѓways_ЪlЪe
 

292 
	`__NTH
 (
	$Йy«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buжТ
))

294 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

296 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__buжТ
))

297  
	`__Йy«me_r_chk
 (
__fd
, 
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

299 iа(
__buжТ
 > 
	`__bos
 (
__buf
))

300  
	`__Йy«me_r_chk_wђn
 (
__fd
, 
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

302  
	`__Йy«me_r_ЃЯs
 (
__fd
, 
__buf
, 
__buжТ
);

303 
	}
}

306 #iа
defЪed
 
__USE_REENTRANT
 || defЪed 
__USE_POSIX199506


307 
	$__gСlogЪ_r_chk
 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
)

308 
	`__nЏnuќ
 ((1));

309 
	`__REDIRECT
 (
__gСlogЪ_r_ЃЯs
, (*
__buf
, 
size_t
 
__buжТ
),

310 
gСlogЪ_r
и
	`__nЏnuќ
 ((1));

311 
	`__REDIRECT
 (
__gСlogЪ_r_chk_wђn
,

312 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
),

313 
__gСlogЪ_r_chk
)

314 
	`__nЏnuќ
 ((1)и
	`__wђ«Йr
 ("getlogin_r called with bigger buflenБhan "

317 
__exЛЇ_Ѓways_ЪlЪe
 

318 
	$gСlogЪ_r
 (*
__buf
, 
size_t
 
__buжТ
)

320 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

322 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__buжТ
))

323  
	`__gСlogЪ_r_chk
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

325 iа(
__buжТ
 > 
	`__bos
 (
__buf
))

326  
	`__gСlogЪ_r_chk_wђn
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

328  
	`__gСlogЪ_r_ЃЯs
 (
__buf
, 
__buжТ
);

329 
	}
}

333 #iа
defЪed
 
__USE_BSD
 || defЪed 
__USE_UNIX98


334 
	$__gСho°«me_chk
 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
)

335 
__THROW
 
	`__nЏnuќ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gСho°«me_ЃЯs
, (*
__buf
, 
size_t
 
__buжТ
),

337 
gСho°«me
и
	`__nЏnuќ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gСho°«me_chk_wђn
,

339 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
),

340 
__gСho°«me_chk
)

341 
	`__nЏnuќ
 ((1)и
	`__wђ«Йr
 ("gethostname called with bigger buflenБhan "

344 
__exЛЇ_Ѓways_ЪlЪe
 

345 
	`__NTH
 (
	$gСho°«me
 (*
__buf
, 
size_t
 
__buжТ
))

347 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

349 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__buжТ
))

350  
	`__gСho°«me_chk
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

352 iа(
__buжТ
 > 
	`__bos
 (
__buf
))

353  
	`__gСho°«me_chk_wђn
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

355  
	`__gСho°«me_ЃЯs
 (
__buf
, 
__buжТ
);

356 
	}
}

360 #iа
defЪed
 
__USE_BSD
 || (defЪed 
__USE_XOPEN
 && !defЪed 
__USE_UNIX98
)

361 
	$__gСdomaЪ«me_chk
 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
)

362 
__THROW
 
	`__nЏnuќ
 ((1)и
__wur
;

363 
	`__REDIRECT_NTH
 (
__gСdomaЪ«me_ЃЯs
, (*
__buf
,

364 
size_t
 
__buжТ
),

365 
gСdomaЪ«me
и
	`__nЏnuќ
 ((1)и
__wur
;

366 
	`__REDIRECT_NTH
 (
__gСdomaЪ«me_chk_wђn
,

367 (*
__buf
, 
size_t
 
__buжТ
, size_И
__ƒЧl
),

368 
__gСdomaЪ«me_chk
)

369 
	`__nЏnuќ
 ((1)и
__wur
 
	`__wђ«Йr
 ("getdomainname called with bigger "

373 
__exЛЇ_Ѓways_ЪlЪe
 

374 
	`__NTH
 (
	$gСdomaЪ«me
 (*
__buf
, 
size_t
 
__buжТ
))

376 iа(
	`__bos
 (
__buf
и!р(
size_t
) -1)

378 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__buжТ
))

379  
	`__gСdomaЪ«me_chk
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

381 iа(
__buжТ
 > 
	`__bos
 (
__buf
))

382  
	`__gСdomaЪ«me_chk_wђn
 (
__buf
, 
__buжТ
, 
	`__bos
 (__buf));

384  
	`__gСdomaЪ«me_ЃЯs
 (
__buf
, 
__buжТ
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #iа!
defЪed
 
_SYS_WAIT_H
 && !defЪed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #iа!
defЪed
 
_SYS_WAIT_H
 && !defЪed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
и(((°©usи& 0xff00и>> 8)

	)

32 
	#__WTERMSIG
(
°©us
и((°©usи& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
и
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
и(
	`__WTERMSIG
(°©usи=р0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d и(((
°©us
и& 0x7fи+ 1и>> 1и> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
и(((°©usи& 0xffи=р0x7f)

	)

49 #ifdeа
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
и((°©usи=р
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
и((°©usи& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
їt
, 
sig
и(‘Си<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
и((sigи<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ТdЯn.h
>

67 
	uwaЩ


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


73 
	m__w_Лrmsig
:7;

74 
	m__w_c№edump
:1;

75 
	m__w_їtcode
:8;

78 #if 
__BYTE_ORDER
 =р
__BIG_ENDIAN


80 
	m__w_їtcode
:8;

81 
	m__w_c№edump
:1;

82 
	m__w_Лrmsig
:7;

84 } 
	m__waЩ_ЛrmЪ©ed
;

87 #if 
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


88 
	m__w_°ЁvЃ
:8;

89 
	m__w_°Ёsig
:8;

92 #if 
__BYTE_ORDER
 =р
__BIG_ENDIAN


94 
	m__w_°Ёsig
:8;

95 
	m__w_°ЁvЃ
:8;

97 } 
	m__waЩ_°Ё≥d
;

100 
	#w_Лrmsig
 
__waЩ_ЛrmЪ©ed
.
__w_Лrmsig


	)

101 
	#w_c№edump
 
__waЩ_ЛrmЪ©ed
.
__w_c№edump


	)

102 
	#w_їtcode
 
__waЩ_ЛrmЪ©ed
.
__w_їtcode


	)

103 
	#w_°Ёsig
 
__waЩ_°Ё≥d
.
__w_°Ёsig


	)

104 
	#w_°ЁvЃ
 
__waЩ_°Ё≥d
.
__w_°ЁvЃ


	)

	@/usr/include/bits/wchar.h

20 #iвdeа
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifdeа
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifdeа
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #Цiа
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #iа
defЪed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #iвdeа
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bЩs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifdeа
INT_MAX


95 #iа
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #iа
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #Цiа
defЪed
 
__INT_MAX__


106 #iа
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #iа
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifdeа
LONG_MAX


122 #iа
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #Цiа
defЪed
 
__LONG_MAX__


129 #iа
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bЩs/w№dsize.h
>

137 #iа
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #iвdef 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<г©uїs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bЩs/ТdЯn.h
>

41 #iвdeа
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
иLO, 
	)
HI

54 #Цiа
__BYTE_ORDER
 =р
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
иHI, 
	)
LO

59 #ifdeа
__USE_BSD


61 
	~<bЩs/byЛsw≠.h
>

63 #iа
__BYTE_ORDER
 =р
__LITTLE_ENDIAN


64 
	#htobe16
(
x
и
	`__bsw≠_16
 (x)

	)

65 
	#htёe16
(
x
и(x)

	)

66 
	#be16toh
(
x
и
	`__bsw≠_16
 (x)

	)

67 
	#Ћ16toh
(
x
и(x)

	)

69 
	#htobe32
(
x
и
	`__bsw≠_32
 (x)

	)

70 
	#htёe32
(
x
и(x)

	)

71 
	#be32toh
(
x
и
	`__bsw≠_32
 (x)

	)

72 
	#Ћ32toh
(
x
и(x)

	)

74 
	#htobe64
(
x
и
	`__bsw≠_64
 (x)

	)

75 
	#htёe64
(
x
и(x)

	)

76 
	#be64toh
(
x
и
	`__bsw≠_64
 (x)

	)

77 
	#Ћ64toh
(
x
и(x)

	)

79 
	#htobe16
(
x
и(x)

	)

80 
	#htёe16
(
x
и
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
и(x)

	)

82 
	#Ћ16toh
(
x
и
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
и(x)

	)

85 
	#htёe32
(
x
и
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
и(x)

	)

87 
	#Ћ32toh
(
x
и
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
и(x)

	)

90 
	#htёe64
(
x
и
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
и(x)

	)

92 
	#Ћ64toh
(
x
и
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #iвdef 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #undeа
__USE_ISOC99


96 #undeа
__USE_ISOC95


97 #undeа
__USE_POSIX


98 #undeа
__USE_POSIX2


99 #undeа
__USE_POSIX199309


100 #undeа
__USE_POSIX199506


101 #undeа
__USE_XOPEN


102 #undeа
__USE_XOPEN_EXTENDED


103 #undeа
__USE_UNIX98


104 #undeа
__USE_XOPEN2K


105 #undeа
__USE_XOPEN2K8


106 #undeа
__USE_LARGEFILE


107 #undeа
__USE_LARGEFILE64


108 #undeа
__USE_FILE_OFFSET64


109 #undeа
__USE_BSD


110 #undeа
__USE_SVID


111 #undeа
__USE_MISC


112 #undeа
__USE_ATFILE


113 #undeа
__USE_GNU


114 #undeа
__USE_REENTRANT


115 #undeа
__USE_FORTIFY_LEVEL


116 #undeа
__FAVOR_BSD


117 #undeа
__KERNEL_STRICT_NAMES


121 #iвdeа
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #iа
defЪed
 
__GNUC__
 && defЪed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mЪ
) \

137 ((
__GNUC__
 << 16и+ 
__GNUC_MINOR__
 >р((
maj
и<< 16и+ (
mЪ
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mЪ
и0

	)

144 #iа
defЪed
 
_BSD_SOURCE
 && \

145 !(
defЪed
 
	g_POSIX_SOURCE
 || defЪed 
	g_POSIX_C_SOURCE
 || \

146 
defЪed
 
	g_XOPEN_SOURCE
 || defЪed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
defЪed
 
	g_GNU_SOURCE
 || defЪed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifdeа
_GNU_SOURCE


153 #undeа
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #undeа
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #undeа
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #undeа
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #undeа
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #undeа
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #undeа
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #undeа
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #undeа
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #iа(!
defЪed
 
__STRICT_ANSI__
 && !defЪed 
_ISOC99_SOURCE
 && \

176 !
defЪed
 
	g_POSIX_SOURCE
 && !defЪed 
	g_POSIX_C_SOURCE
 && \

177 !
defЪed
 
	g_XOPEN_SOURCE
 && !defЪed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
defЪed
 
	g_BSD_SOURCE
 && !defЪed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #iа(
defЪed
 
_ISOC99_SOURCE
 || defЪed 
_ISOC9X_SOURCE
 \

188 || (
defЪed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #iа(
defЪed
 
_ISOC99_SOURCE
 || defЪed 
_ISOC9X_SOURCE
 \

194 || (
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #iа((!
defЪed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
defЪed
 
_POSIX_SOURCE
 && !defЪed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #iа
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #Цiа
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #Цiа
defЪed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #iа
defЪed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >р1 || defЪed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #iа
defЪed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >р2 || defЪed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #iа(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #iа(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #iа(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #undeа
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #iа(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #undeа
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #iа(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #undeа
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #iа(
_XOPEN_SOURCE
 - 0) >= 600

251 #iа(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #undeа
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifdeа
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifdeа
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifdeа
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #iа
defЪed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #iа
defЪed
 
_BSD_SOURCE
 || defЪed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #iа
defЪed
 
_REENTRANT
 || defЪed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #iа
defЪed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1и&& 
defЪed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #iа
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bЩs/іedefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #undeа
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 10

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mЪ
) \

333 ((
__GLIBC__
 << 16и+ 
__GLIBC_MINOR__
 >р((
maj
и<< 16и+ (
mЪ
))

	)

336 #iа
defЪed
 
__GNUC__
 \

337 || (
defЪed
 
	g__PGI
 && defЪed 
	g__i386__
 ) \

338 || (
defЪed
 
	g__INTEL_COMPILER
 && (defЪed 
	g__i386__
 || defЪed 
	g__Я64__
)) \

339 || (
defЪed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #iвdeа
__ASSEMBLER__


345 #iвdeа
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #iа
defЪed
 
__USE_FILE_OFFSET64
 && !defЪed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #iа
__GNUC_PREREQ
 (2, 7и&& 
defЪed
 
__OPTIMIZE__
 \

360 && !
defЪed
 
	g__OPTIMIZE_SIZE__
 && !defЪed 
	g__NO_INLINE__
 \

361 && 
defЪed
 
	g__exЛЇ_ЪlЪe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #iа
__GNUC_PREREQ
 (2, 7и&& 
defЪed
 
__OPTIMIZE__
 \

368 && (
defЪed
 
	g_LIBC
 || !defЪed 
	g__OPTIMIZE_SIZE__
и&& !defЪed 
	g__NO_INLINE__
 \

369 && 
defЪed
 
	g__exЛЇ_ЪlЪe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #iвdeа
_GETOPT_H


23 #iвdeа
__√ed_gСЁt


24 
	#_GETOPT_H
 1

	)

34 #iа!
defЪed
 
__GNU_LIBRARY__


35 
	~<щy≥.h
>

38 #iвdeа
__THROW


39 #iвdeа
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mЪ
и(0)

	)

42 #iа
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__эlu•lus


59 *
ЁПrg
;

73 
ЁtЪd
;

78 
ЁЛЉ
;

82 
ЁtЁt
;

84 #iвdeа
__√ed_gСЁt


106 
	sЁtiЏ


108 cЏ° *
	g«me
;

111 
	ghas_ђg
;

112 *
	gжag
;

113 
	gvЃ
;

118 
	#no_ђgumТt
 0

	)

119 
	#їquЬed_ђgumТt
 1

	)

120 
	#ЁtiЏЃ_ђgumТt
 2

	)

148 #ifdeа
__GNU_LIBRARY__


152 
gСЁt
 (
___ђgc
, *cЏ° *
___ђgv
, cЏ° *
__sh№tЁts
)

153 
__THROW
;

155 #iа
defЪed
 
__√ed_gСЁt
 && defЪed 
__USE_POSIX2
 \

156 && !
defЪed
 
	g__USE_POSIX_IMPLICITLY
 && !defЪed 
	g__USE_GNU


160 #ifdeа
__REDIRECT


161 
__REDIRECT
 (
gСЁt
, (
___ђgc
, *cЏ° *
___ђgv
,

162 cЏ° *
__sh№tЁts
),

163 
__posix_gСЁt
и
__THROW
;

165 
__posix_gСЁt
 (
___ђgc
, *cЏ° *
___ђgv
,

166 cЏ° *
__sh№tЁts
и
__THROW
;

167 
	#gСЁt
 
__posix_gСЁt


	)

171 
gСЁt
 ();

174 #iвdeа
__√ed_gСЁt


175 
gСЁt_lЏg
 (
___ђgc
, *cЏ° *
___ђgv
,

176 cЏ° *
__sh№tЁts
,

177 cЏ° 
ЁtiЏ
 *
__lЏgЁts
, *
__lЏgЪd
)

178 
__THROW
;

179 
gСЁt_lЏg_Џly
 (
___ђgc
, *cЏ° *
___ђgv
,

180 cЏ° *
__sh№tЁts
,

181 cЏ° 
ЁtiЏ
 *
__lЏgЁts
, *
__lЏgЪd
)

182 
__THROW
;

186 #ifdef 
__эlu•lus


191 #undeа
__√ed_gСЁt


	@/usr/include/libio.h

29 #iвdeа
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_cЏfig.h
>

34 
	#_IO_pos_t
 
_G_еos_t


	)

35 
	#_IO_еos_t
 
_G_еos_t


	)

36 
	#_IO_еos64_t
 
_G_еos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_icЏv_t
 
_G_icЏv_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wЪt_t
 
_G_wЪt_t


	)

50 #ifdeа
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°dђg.h
>

54 #ifdeа
__GNUC_VA_LIST


55 #undeа
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #iвdeа
__P


61 #iа
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifdeа
__STDC__


65 
	#__P
(
p
и
	)
p

66 
	#__PMT
(
p
и
	)
p

68 
	#__P
(
p
и()

	)

69 
	#__PMT
(
p
и()

	)

75 #iвdeа
_PARAMS


76 
	#_PARAMS
(
іўos
и
	`__P
’rўos)

	)

79 #iвdeа
__STDC__


81 cЏ°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #iвdeа
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #iвdeа
EOF


90 
	#EOF
 (-1)

	)

92 #iвdeа
NULL


93 #iа
defЪed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =р2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuќ
)

	)

97 #iа!
defЪed
(
__эlu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifdeа
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifdeа
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifdeа
_IO_MTSAFE_IO


174 #iа
defЪed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bЩs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_mђkФ
 {

187 
_IO_mђkФ
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°їampos
(
°їampos
 
•
и{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
и{ 
	m_pos
 = off£t; 
	m_•os
 = (
°їampos
)(-2); }

196 
	mpublic
:

197 
°їammђkФ
(
°їambuf
 *
sb
);

198 ~
°їammђkФ
();

199 
ІvЪg
(и{  
	m_•os
 == -2; }

200 
dЦП
(
°їammђkФ
&);

201 
dЦП
();

206 
	e__codecvt_їsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_ЈєЯl
,

210 
	m__codecvt_Фr№
,

211 
	m__codecvt_nocЏv


214 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
и(
	m_IO_codecvt
 *);

220 
__codecvt_їsu…
 (*
__codecvt_do_out
и(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 cЏ° 
	mwchђ_t
 *,

223 cЏ° 
	mwchђ_t
 *,

224 cЏ° 
	mwchђ_t
 **, *,

226 
__codecvt_їsu…
 (*
__codecvt_do_unshiб
и(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_їsu…
 (*
__codecvt_do_Ъ
и(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 cЏ° **, 
	mwchђ_t
 *,

233 
	mwchђ_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ТcodЪg
и(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Ѓways_nocЏv
и(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Ћngth
и(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 cЏ° *, cЏ° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Ћngth
и(
	m_IO_codecvt
 *);

240 
_IO_icЏv_t
 
	m__cd_Ъ
;

241 
_IO_icЏv_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wchђ_t
 *
	m_IO_їad_±r
;

248 
wchђ_t
 *
	m_IO_їad_Тd
;

249 
wchђ_t
 *
	m_IO_їad_ba£
;

250 
wchђ_t
 *
	m_IO_wrЩe_ba£
;

251 
wchђ_t
 *
	m_IO_wrЩe_±r
;

252 
wchђ_t
 *
	m_IO_wrЩe_Тd
;

253 
wchђ_t
 *
	m_IO_buf_ba£
;

254 
wchђ_t
 *
	m_IO_buf_Тd
;

256 
wchђ_t
 *
	m_IO_Іve_ba£
;

257 
wchђ_t
 *
	m_IO_backup_ba£
;

259 
wchђ_t
 *
	m_IO_Іve_Тd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_ѕ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wchђ_t
 
	m_sh№tbuf
[1];

267 cЏ° 
_IO_jump_t
 *
	m_wide_vПbЋ
;

271 
	s_IO_FILE
 {

272 
	m_жags
;

273 
	#_IO_fЮe_жags
 
_жags


	)

277 * 
	m_IO_їad_±r
;

278 * 
	m_IO_їad_Тd
;

279 * 
	m_IO_їad_ba£
;

280 * 
	m_IO_wrЩe_ba£
;

281 * 
	m_IO_wrЩe_±r
;

282 * 
	m_IO_wrЩe_Тd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_Тd
;

286 *
	m_IO_Іve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_Іve_Тd
;

290 
_IO_mђkФ
 *
	m_mђkФs
;

292 
_IO_FILE
 *
	m_chaЪ
;

294 
	m_fЮТo
;

296 
	m_blksize
;

298 
	m_жags2
;

300 
_IO_off_t
 
	m_ёd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cёumn
;

305 sig√d 
	m_vПbЋ_off£t
;

306 
	m_sh№tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifdeа
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_comґСe


316 
_IO_FILE
 
	m_fЮe
;

318 #iа
defЪed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_дУїs_li°
;

325 *
	m_дУїs_buf
;

326 
size_t
 
	m_дУїs_size
;

328 *
	m__Јd1
;

329 *
	m__Јd2
;

330 *
	m__Јd3
;

331 *
	m__Јd4
;

332 
size_t
 
	m__Јd5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (и- 4 *  (*и-  (
size_t
)];

340 #iвdeа
__эlu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_ґus
;

346 
_IO_FILE_ґus
 
_IO_2_1_°dЪ_
;

347 
_IO_FILE_ґus
 
_IO_2_1_°dout_
;

348 
_IO_FILE_ґus
 
_IO_2_1_°dФr_
;

349 #iвdeа
_LIBC


350 
	#_IO_°dЪ
 ((
_IO_FILE
*)(&
_IO_2_1_°dЪ_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dФr
 ((
_IO_FILE
*)(&
_IO_2_1_°dФr_
))

	)

354 
_IO_FILE
 *
_IO_°dЪ
 
©МibuЛ_hiddТ
;

355 
_IO_FILE
 *
_IO_°dout
 
©МibuЛ_hiddТ
;

356 
_IO_FILE
 *
_IO_°dФr
 
©МibuЛ_hiddТ
;

364 
__ssize_t
 
	t__io_їad_в
 (*
	t__cookЫ
, *
	t__buf
, 
	tsize_t
 
	t__nbyЛs
);

372 
__ssize_t
 
	t__io_wrЩe_в
 (*
	t__cookЫ
, 
	t__cЏ°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_в
 (*
	t__cookЫ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_юo£_в
 (*
	t__cookЫ
);

387 #ifdeа
_GNU_SOURCE


389 
__io_їad_в
 
	tcookЫ_їad_funщiЏ_t
;

390 
__io_wrЩe_в
 
	tcookЫ_wrЩe_funщiЏ_t
;

391 
__io_£ek_в
 
	tcookЫ_£ek_funщiЏ_t
;

392 
__io_юo£_в
 
	tcookЫ_юo£_funщiЏ_t
;

397 
__io_їad_в
 *
	mїad
;

398 
__io_wrЩe_в
 *
	mwrЩe
;

399 
__io_£ek_в
 *
	m£ek
;

400 
__io_юo£_в
 *
	mюo£
;

401 } 
	t_IO_cookЫ_io_funщiЏs_t
;

402 
_IO_cookЫ_io_funщiЏs_t
 
	tcookЫ_io_funщiЏs_t
;

404 
	g_IO_cookЫ_fЮe
;

407 
_IO_cookЫ_ЪЩ
 (
_IO_cookЫ_fЮe
 *
__cfЮe
, 
__їad_wrЩe
,

408 *
__cookЫ
, 
_IO_cookЫ_io_funщiЏs_t
 
__вs
);

412 #ifdeа
__эlu•lus


416 
__undФжow
 (
_IO_FILE
 *);

417 
__uжow
 (
_IO_FILE
 *);

418 
__ovФжow
 (
_IO_FILE
 *, );

419 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wЪt_t
 
__wundФжow
 (
_IO_FILE
 *);

421 
_IO_wЪt_t
 
__wuжow
 (
_IO_FILE
 *);

422 
_IO_wЪt_t
 
__wovФжow
 (
_IO_FILE
 *, _IO_wint_t);

425 #iа 
__GNUC__
 >= 3

426 
	#_IO_BE
(
exі
, 
їs
и
	`__buЮtЪ_ex≥щ
 (”xі),Дes)

	)

428 
	#_IO_BE
(
exі
, 
їs
и”xі)

	)

431 
	#_IO_gСc_u∆ocked
(
_е
) \

432 (
	`_IO_BE
 ((
_е
)->
_IO_їad_±r
 >р(_е)->
_IO_їad_Тd
, 0) \

433 ? 
	`__uжow
 (
_е
и: *(*и(_е)->
_IO_їad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_е
) \

435 (
	`_IO_BE
 ((
_е
)->
_IO_їad_±r
 >р(_е)->
_IO_їad_Тd
, 0) \

436 && 
	`__undФжow
 (
_е
и=р
EOF
 ? EOF \

437 : *(*и(
_е
)->
_IO_їad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_е
) \

439 (
	`_IO_BE
 ((
_е
)->
_IO_wrЩe_±r
 >р(_е)->
_IO_wrЩe_Тd
, 0) \

440 ? 
	`__ovФжow
 (
_е
, (и(
_ch
)) \

441 : (и(*(
_е
)->
_IO_wrЩe_±r
++ = (
_ch
)))

	)

443 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gСwc_u∆ocked
(
_е
) \

445 (
	`_IO_BE
 ((
_е
)->
_wide_d©a
->
_IO_їad_±r
 >р(_е)->_wide_d©a->
_IO_їad_Тd
,\

447 ? 
	`__wuжow
 (
_е
и: (
_IO_wЪt_t
и*(_е)->
_wide_d©a
->
_IO_їad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_е
) \

449 (
	`_IO_BE
 ((
_е
)->
_wide_d©a
->
_IO_wrЩe_±r
 \

450 >р(
_е
)->
_wide_d©a
->
_IO_wrЩe_Тd
, 0) \

451 ? 
	`__wovФжow
 (
_е
, 
_wch
) \

452 : (
_IO_wЪt_t
и(*(
_е
)->
_wide_d©a
->
_IO_wrЩe_±r
++ = (
_wch
)))

	)

455 
	#_IO_гof_u∆ocked
(
__е
и(((__е)->
_жags
 & 
_IO_EOF_SEEN
и!р0)

	)

456 
	#_IO_гЉ№_u∆ocked
(
__е
и(((__е)->
_жags
 & 
_IO_ERR_SEEN
и!р0)

	)

458 
_IO_gСc
 (
_IO_FILE
 *
__е
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__е
);

460 
_IO_гof
 (
_IO_FILE
 *
__е
и
__THROW
;

461 
_IO_гЉ№
 (
_IO_FILE
 *
__е
и
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__е
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_е
) \

467 ((
_е
)->
_IO_wrЩe_±r
 - (_е)->
_IO_wrЩe_ba£
)

	)

469 
_IO_жockfЮe
 (
_IO_FILE
 *и
__THROW
;

470 
_IO_fu∆ockfЮe
 (
_IO_FILE
 *и
__THROW
;

471 
_IO_бrylockfЮe
 (
_IO_FILE
 *и
__THROW
;

473 #ifdeа
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_е
и
	`_IO_≥ekc_locked
 (_е)

	)

475 
	#_IO_жockfЮe
(
_е
) \

476 iа(((
_е
)->
_жags
 & 
_IO_USER_LOCK
и=р0и
	`_IO_жockfЮe
 (_е)

	)

477 
	#_IO_fu∆ockfЮe
(
_е
) \

478 iа(((
_е
)->
_жags
 & 
_IO_USER_LOCK
и=р0и
	`_IO_fu∆ockfЮe
 (_е)

	)

480 
	#_IO_≥ekc
(
_е
и
	`_IO_≥ekc_u∆ocked
 (_е)

	)

481 
	#_IO_жockfЮe
(
_е
и

	)

482 
	#_IO_fu∆ockfЮe
(
_е
и

	)

483 
	#_IO_бrylockfЮe
(
_е
и

	)

484 
	#_IO_юЧnup_їgiЏ_°ђt
(
_fщ
, 
_е
и

	)

485 
	#_IO_юЧnup_їgiЏ_Тd
(
_DoЩ
и

	)

488 
_IO_vfs€nf
 (
_IO_FILE
 * 
__ї°riщ
, const * __restrict,

489 
_IO_va_li°
, *
__ї°riщ
);

490 
_IO_vеrЪtf
 (
_IO_FILE
 *
__ї°riщ
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_Јdn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgСn
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_дУ_backup_ђЧ
 (
_IO_FILE
 *и
__THROW
;

500 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wЪt_t
 
_IO_gСwc
 (
_IO_FILE
 *
__е
);

502 
_IO_wЪt_t
 
_IO_putwc
 (
wchђ_t
 
__wc
, 
_IO_FILE
 *
__е
);

503 
_IO_fwide
 (
_IO_FILE
 *
__е
, 
__mode
и
__THROW
;

504 #iа
__GNUC__
 >= 2

507 #iа
defЪed
 
_LIBC
 && defЪed 
SHARED


508 
	~<shlib-comЈt.h
>

509 #iа
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_ЪcomЈtibЋ
 \

511 (
	`__buЮtЪ_ex≥щ
 (&
_IO_°dЪ_u£d
 =р
NULL
, 0))

	)

512 cЏ° 
_IO_°dЪ_u£d
;

513 
wЧk_exЛЇ
 (
_IO_°dЪ_u£d
);

516 #iвdeа
_IO_fwide_maybe_ЪcomЈtibЋ


517 
	#_IO_fwide_maybe_ЪcomЈtibЋ
 (0)

	)

521 
	#_IO_fwide
(
__е
, 
__mode
) \

522 ({ 
__їsu…
 = (
__mode
); \

523 iа(
__їsu…
 < 0 && ! 
_IO_fwide_maybe_ЪcomЈtibЋ
) \

525 iа((
__е
)->
_mode
 == 0) \

527 (
__е
)->
_mode
 = -1; \

528 
__їsu…
 = (
__е
)->
_mode
; \

530 iа(
	`__buЮtЪ_cЏ°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__їsu…
 = 
_IO_fwide_maybe_ЪcomЈtibЋ
 ? -1 : (
__е
)->
_mode
; \

533 
__їsu…
 = 
	`_IO_fwide
 (
__е
, __result); \

534 
__їsu…
; })

	)

537 
_IO_vfws€nf
 (
_IO_FILE
 * 
__ї°riщ
, cЏ° 
wchђ_t
 * __restrict,

538 
_IO_va_li°
, *
__ї°riщ
);

539 
_IO_vfwіЪtf
 (
_IO_FILE
 *
__ї°riщ
, cЏ° 
wchђ_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_wЈdn
 (
_IO_FILE
 *, 
wЪt_t
, _IO_ssize_t);

542 
_IO_дУ_wbackup_ђЧ
 (
_IO_FILE
 *и
__THROW
;

545 #ifdeа
__LDBL_COMPAT


546 
	~<bЩs/libio-ldbl.h
>

549 #ifdeа
__эlu•lus


	@/usr/include/linux/limits.h

1 #iвdeа
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #iвdeа
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/Јњm.h
>

	@/usr/include/openssl/buffer.h

59 #iвdeа
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<ЁТs¶/os¶_typ.h
>

64 #ifdeа 
__эlu•lus


68 
	~<°ddef.h
>

70 #iа!
defЪed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
Ћngth
;

80 *
d©a
;

81 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_дУ
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
Ћn
);

87 
BUF_MEM_grow_юЧn
(
BUF_MEM
 *
°r
, 
Ћn
);

88 * 
BUF_°rdup
(cЏ° *
°r
);

89 * 
BUF_°Їdup
(cЏ° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(cЏ° *
d©a
, 
size_t
 
siz
);

93 
size_t
 
BUF_°Њэy
(*
d°
,cЏ° *
§c
,size_И
siz
);

94 
size_t
 
BUF_°Њ€t
(*
d°
,cЏ° *
§c
,size_И
siz
);

101 
ERR_lяd_BUF_°rЪgs
();

106 
	#BUF_F_BUF_MEMDUP
 103

	)

107 
	#BUF_F_BUF_MEM_GROW
 100

	)

108 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

109 
	#BUF_F_BUF_MEM_NEW
 101

	)

110 
	#BUF_F_BUF_STRDUP
 102

	)

111 
	#BUF_F_BUF_STRNDUP
 104

	)

115 #ifdeа 
__эlu•lus


	@/usr/include/openssl/comp.h

2 #iвdeа
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<ЁТs¶/ьy±o.h
>

7 #ifdeа 
__эlu•lus


11 
comp_щx_°
 
	tCOMP_CTX
;

13 
	scomp_mСhod_°


15 
ty≥
;

16 cЏ° *
«me
;

17 (*
ЪЩ
)(
COMP_CTX
 *
щx
);

18 (*
fЪish
)(
COMP_CTX
 *
щx
);

19 (*
comіess
)(
COMP_CTX
 *
щx
,

20 *
out
, 
ёТ
,

21 *
Ъ
, 
ЮТ
);

22 (*
exЈnd
)(
COMP_CTX
 *
щx
,

23 *
out
, 
ёТ
,

24 *
Ъ
, 
ЮТ
);

26 (*
щЊ
)();

27 (*
€ќback_щЊ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_щx_°


32 
COMP_METHOD
 *
mСh
;

33 
comіess_Ъ
;

34 
comіess_out
;

35 
exЈnd_Ъ
;

36 
exЈnd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mСh
);

43 
COMP_CTX_дУ
(
COMP_CTX
 *
щx
);

44 
COMP_comіess_block
(
COMP_CTX
 *
щx
, *
out
, 
ёТ
,

45 *
Ъ
, 
ЮТ
);

46 
COMP_exЈnd_block
(
COMP_CTX
 *
щx
, *
out
, 
ёТ
,

47 *
Ъ
, 
ЮТ
);

48 
COMP_METHOD
 *
COMP_Њe
();

49 
COMP_METHOD
 *
COMP_zlib
();

55 
ERR_lяd_COMP_°rЪgs
();

63 #ifdeа 
__эlu•lus


	@/usr/include/openssl/crypto.h

117 #iвdeа
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<ЁТs¶/e_os2.h
>

124 #iвdeа
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<ЁТs¶/°ack.h
>

129 
	~<ЁТs¶/Іг°ack.h
>

130 
	~<ЁТs¶/ЁТs¶v.h
>

131 
	~<ЁТs¶/os¶_typ.h
>

133 #ifdeа
CHARSET_EBCDIC


134 
	~<ЁТs¶/ebcdic.h
>

139 
	~<ЁТs¶/symhacks.h
>

141 #ifdeа 
__эlu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
ьy±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	tЈїЅ
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	tђgl
, *
	tђgp
);

163 
	tCRYPTO_EX_дУ
(*
	tЈїЅ
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	tђgl
, *
	tђgp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	tдom
, *
	tдom_d
,

167 
	tidx
, 
	tђgl
, *
	tђgp
);

171 
	sЁТs¶_Щem_°


173 
code
;

174 *
vЃue
;

175 
size_t
 
vЃue_size
;

176 
size_t
 *
vЃue_Ћngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_NUM_LOCKS
 39

	)

224 
	#CRYPTO_LOCK
 1

	)

225 
	#CRYPTO_UNLOCK
 2

	)

226 
	#CRYPTO_READ
 4

	)

227 
	#CRYPTO_WRITE
 8

	)

229 #iвdeа
OPENSSL_NO_LOCKING


230 #iвdeа
CRYPTO_w_lock


231 
	#CRYPTO_w_lock
(
ty≥
) \

232 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

233 
	#CRYPTO_w_u∆ock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_r_lock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_u∆ock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_add
(
addr
,
amouЅ
,
ty≥
) \

240 
	`CRYPTO_add_lock
(
addr
,
amouЅ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

243 
	#CRYPTO_w_lock
(
a
)

	)

244 
	#CRYPTO_w_u∆ock
(
a
)

	)

245 
	#CRYPTO_r_lock
(
a
)

	)

246 
	#CRYPTO_r_u∆ock
(
a
)

	)

247 
	#CRYPTO_add
(
a
,
b
,
c
и((*„))+=(b))

	)

256 
їгїnыs
;

257 
CRYPTO_dy∆ock_vЃue
 *
d©a
;

258 } 
	tCRYPTO_dy∆ock
;

264 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

265 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

266 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

267 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

273 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

275 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

277 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

281 
bio_°
 
	tBIO_dummy
;

283 
	sьy±o_ex_d©a_°


285 
STACK
 *
sk
;

286 
dummy
;

292 
	sьy±o_ex_d©a_func_°


294 
ђgl
;

295 *
ђgp
;

296 
CRYPTO_EX_√w
 *
√w_func
;

297 
CRYPTO_EX_дУ
 *
дУ_func
;

298 
CRYPTO_EX_dup
 *
dup_func
;

299 } 
	tCRYPTO_EX_DATA_FUNCS
;

301 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

307 
	#CRYPTO_EX_INDEX_BIO
 0

	)

308 
	#CRYPTO_EX_INDEX_SSL
 1

	)

309 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

310 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

311 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

312 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

313 
	#CRYPTO_EX_INDEX_RSA
 6

	)

314 
	#CRYPTO_EX_INDEX_DSA
 7

	)

315 
	#CRYPTO_EX_INDEX_DH
 8

	)

316 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

317 
	#CRYPTO_EX_INDEX_X509
 10

	)

318 
	#CRYPTO_EX_INDEX_UI
 11

	)

319 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

320 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

321 
	#CRYPTO_EX_INDEX_COMP
 14

	)

322 
	#CRYPTO_EX_INDEX_STORE
 15

	)

326 
	#CRYPTO_EX_INDEX_USER
 100

	)

333 
	#CRYPTO_mЃloc_ЪЩ
(и
	`CRYPTO_£t_mem_funщiЏs
(\

334 
mЃloc
, 
їЃloc
, 
дУ
)

	)

336 #iа
defЪed
 
CRYPTO_MDEBUG_ALL
 || defЪed 
CRYPTO_MDEBUG_TIME
 || defЪed 
CRYPTO_MDEBUG_THREAD


337 #iвdeа
CRYPTO_MDEBUG


338 
	#CRYPTO_MDEBUG


	)

344 
	#CRYPTO_mЃloc_debug_ЪЩ
() do {\

345 
	`CRYPTO_£t_mem_debug_funщiЏs
(\

346 
CRYPTO_dbg_mЃloc
,\

347 
CRYPTO_dbg_їЃloc
,\

348 
CRYPTO_dbg_дУ
,\

349 
CRYPTO_dbg_£t_ЁtiЏs
,\

350 
CRYPTO_dbg_gС_ЁtiЏs
);\

351 } 0)

	)

353 
CRYPTO_mem_щЊ
(
mode
);

354 
CRYPTO_is_mem_check_Џ
();

357 
	#MemCheck_°ђt
(и
	`CRYPTO_mem_щЊ
(
CRYPTO_MEM_CHECK_ON
)

	)

358 
	#MemCheck_°Ё
(и
	`CRYPTO_mem_щЊ
(
CRYPTO_MEM_CHECK_OFF
)

	)

361 
	#MemCheck_Џ
(и
	`CRYPTO_mem_щЊ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

362 
	#MemCheck_off
(и
	`CRYPTO_mem_щЊ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

363 
	#is_MemCheck_Џ
(и
	`CRYPTO_is_mem_check_Џ
()

	)

365 
	#OPENSSL_mЃloc
(
num
и
	`CRYPTO_mЃloc
((кum,
__FILE__
,
__LINE__
)

	)

366 
	#OPENSSL_їЃloc
(
addr
,
num
) \

367 
	`CRYPTO_їЃloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

368 
	#OPENSSL_їЃloc_юЧn
(
addr
,
ёd_num
,
num
) \

369 
	`CRYPTO_їЃloc_юЧn
(
addr
,
ёd_num
,
num
,
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_їmЃloc
(
addr
,
num
) \

371 
	`CRYPTO_їmЃloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_дУFunc
 
CRYPTO_дУ


	)

373 
	#OPENSSL_дУ
(
addr
и
	`CRYPTO_дУ
„ddr)

	)

375 
	#OPENSSL_mЃloc_locked
(
num
) \

376 
	`CRYPTO_mЃloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

377 
	#OPENSSL_дУ_locked
(
addr
и
	`CRYPTO_дУ_locked
„ddr)

	)

380 cЏ° *
SSLЧy_vФsiЏ
(
ty≥
);

381 
SSLЧy
();

383 
OPENSSL_is£tugid
();

386 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

388 cЏ° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gС_ex_d©a_imґemТПtiЏ
();

390 
CRYPTO_£t_ex_d©a_imґemТПtiЏ
(cЏ° 
CRYPTO_EX_DATA_IMPL
 *
i
);

392 
CRYPTO_ex_d©a_√w_юass
();

394 
CRYPTO_gС_ex_√w_Ъdex
(
юass_Ъdex
, 
ђgl
, *
ђgp
,

395 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

396 
CRYPTO_EX_дУ
 *
дУ_func
);

399 
CRYPTO_√w_ex_d©a
(
юass_Ъdex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

400 
CRYPTO_dup_ex_d©a
(
юass_Ъdex
, 
CRYPTO_EX_DATA
 *
to
,

401 
CRYPTO_EX_DATA
 *
дom
);

402 
CRYPTO_дУ_ex_d©a
(
юass_Ъdex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

405 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vЃ
);

406 *
CRYPTO_gС_ex_d©a
(cЏ° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

409 
CRYPTO_юЧnup_Ѓl_ex_d©a
();

411 
CRYPTO_gС_√w_lockid
(*
«me
);

413 
CRYPTO_num_locks
();

414 
CRYPTO_lock
(
mode
, 
ty≥
,cЏ° *
fЮe
,
lЪe
);

415 
CRYPTO_£t_lockЪg_€ќback
((*
func
)(
mode
,
ty≥
,

416 cЏ° *
fЮe
,
lЪe
));

417 (*
CRYPTO_gС_lockЪg_€ќback
())(
mode
,
ty≥
,cЏ° *
fЮe
,

418 
lЪe
);

419 
CRYPTO_£t_add_lock_€ќback
((*
func
)(*
num
,
mouЅ
,
ty≥
,

420 cЏ° *
fЮe
, 
lЪe
));

421 (*
CRYPTO_gС_add_lock_€ќback
())(*
num
,
mouЅ
,
ty≥
,

422 cЏ° *
fЮe
,
lЪe
);

423 
CRYPTO_£t_id_€ќback
((*
func
)());

424 (*
CRYPTO_gС_id_€ќback
())();

425 
CRYPTO_thїad_id
();

426 cЏ° *
CRYPTO_gС_lock_«me
(
ty≥
);

427 
CRYPTO_add_lock
(*
poЪЛr
,
amouЅ
,
ty≥
, cЏ° *
fЮe
,

428 
lЪe
);

430 
CRYPTO_gС_√w_dy∆ockid
();

431 
CRYPTO_de°roy_dy∆ockid
(
i
);

432 
CRYPTO_dy∆ock_vЃue
 *
CRYPTO_gС_dy∆ock_vЃue
(
i
);

433 
CRYPTO_£t_dy∆ock_ьЧЛ_€ќback
(
CRYPTO_dy∆ock_vЃue
 *(*
dyn_ьЧЛ_funщiЏ
)(cЏ° *
fЮe
, 
lЪe
));

434 
CRYPTO_£t_dy∆ock_lock_€ќback
((*
dyn_lock_funщiЏ
)(
mode
, 
CRYPTO_dy∆ock_vЃue
 *
l
, cЏ° *
fЮe
, 
lЪe
));

435 
CRYPTO_£t_dy∆ock_de°roy_€ќback
((*
dyn_de°roy_funщiЏ
)(
CRYPTO_dy∆ock_vЃue
 *
l
, cЏ° *
fЮe
, 
lЪe
));

436 
CRYPTO_dy∆ock_vЃue
 *(*
CRYPTO_gС_dy∆ock_ьЧЛ_€ќback
())(cЏ° *
fЮe
,
lЪe
);

437 (*
CRYPTO_gС_dy∆ock_lock_€ќback
())(
mode
, 
CRYPTO_dy∆ock_vЃue
 *
l
, cЏ° *
fЮe
,
lЪe
);

438 (*
CRYPTO_gС_dy∆ock_de°roy_€ќback
())(
CRYPTO_dy∆ock_vЃue
 *
l
, cЏ° *
fЮe
,
lЪe
);

442 
CRYPTO_£t_mem_funщiЏs
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

443 
CRYPTO_£t_locked_mem_funщiЏs
(*(*
m
)(
size_t
), (*
дУ_func
)(*));

444 
CRYPTO_£t_mem_ex_funщiЏs
(*(*
m
)(
size_t
,const *,),

445 *(*
r
)(*,
size_t
,const *,),

446 (*
f
)(*));

447 
CRYPTO_£t_locked_mem_ex_funщiЏs
(*(*
m
)(
size_t
,const *,),

448 (*
дУ_func
)(*));

449 
CRYPTO_£t_mem_debug_funщiЏs
((*
m
)(*,,const *,,),

450 (*
r
)(*,*,,const *,,),

451 (*
f
)(*,),

452 (*
so
)(),

453 (*
go
)());

454 
CRYPTO_gС_mem_funщiЏs
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

455 
CRYPTO_gС_locked_mem_funщiЏs
(*(**
m
)(
size_t
), (**
f
)(*));

456 
CRYPTO_gС_mem_ex_funщiЏs
(*(**
m
)(
size_t
,const *,),

457 *(**
r
)(*, 
size_t
,const *,),

458 (**
f
)(*));

459 
CRYPTO_gС_locked_mem_ex_funщiЏs
(*(**
m
)(
size_t
,const *,),

460 (**
f
)(*));

461 
CRYPTO_gС_mem_debug_funщiЏs
((**
m
)(*,,const *,,),

462 (**
r
)(*,*,,const *,,),

463 (**
f
)(*,),

464 (**
so
)(),

465 (**
go
)());

467 *
CRYPTO_mЃloc_locked
(
num
, cЏ° *
fЮe
, 
lЪe
);

468 
CRYPTO_дУ_locked
(*);

469 *
CRYPTO_mЃloc
(
num
, cЏ° *
fЮe
, 
lЪe
);

470 
CRYPTO_дУ
(*);

471 *
CRYPTO_їЃloc
(*
addr
,
num
, cЏ° *
fЮe
, 
lЪe
);

472 *
CRYPTO_їЃloc_юЧn
(*
addr
,
ёd_num
,
num
,cЏ° *
fЮe
,

473 
lЪe
);

474 *
CRYPTO_їmЃloc
(*
addr
,
num
, cЏ° *
fЮe
, 
lЪe
);

476 
OPENSSL_юЧn£
(*
±r
, 
size_t
 
Ћn
);

478 
CRYPTO_£t_mem_debug_ЁtiЏs
(
bЩs
);

479 
CRYPTO_gС_mem_debug_ЁtiЏs
();

481 
	#CRYPTO_push_Ъfo
(
Ъfo
) \

482 
	`CRYPTO_push_Ъfo_
(
Ъfo
, 
__FILE__
, 
__LINE__
);

	)

483 
CRYPTO_push_Ъfo_
(cЏ° *
Ъfo
, cЏ° *
fЮe
, 
lЪe
);

484 
CRYPTO_pЁ_Ъfo
();

485 
CRYPTO_їmove_Ѓl_Ъfo
();

495 
CRYPTO_dbg_mЃloc
(*
addr
,
num
,cЏ° *
fЮe
,
lЪe
,
bef№e_p
);

496 
CRYPTO_dbg_їЃloc
(*
addr1
,*
addr2
,
num
,cЏ° *
fЮe
,
lЪe
,
bef№e_p
);

497 
CRYPTO_dbg_дУ
(*
addr
,
bef№e_p
);

506 
CRYPTO_dbg_£t_ЁtiЏs
(
bЩs
);

507 
CRYPTO_dbg_gС_ЁtiЏs
();

510 #iвdeа
OPENSSL_NO_FP_API


511 
CRYPTO_mem_Ћaks_е
(
FILE
 *);

513 
CRYPTO_mem_Ћaks
(
bio_°
 *
bio
);

515 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

516 
CRYPTO_mem_Ћaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

519 
O≥nSSLDЫ
(cЏ° *
fЮe
,
lЪe
,cЏ° *
as£єiЏ
);

520 
	#OPENSSL_as£є
(
e
и()(”и? 0 : (
	`O≥nSSLDЫ
(
__FILE__
, 
__LINE__
, #e),1))

	)

522 *
OPENSSL_Я32€p_loc
();

523 
	#OPENSSL_Я32€p
 (*(
	`OPENSSL_Я32€p_loc
()))

	)

529 
ERR_lяd_CRYPTO_°rЪgs
();

534 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

535 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

536 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

537 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

538 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

539 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

540 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

541 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

542 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

545 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

547 #ifdeа 
__эlu•lus


	@/usr/include/openssl/dtls1.h

60 #iвdeа
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<ЁТs¶/bufгr.h
>

64 
	~<ЁТs¶/pqueue.h
>

66 #ifdeа 
__эlu•lus


70 
	#DTLS1_VERSION
 0xFEFF

	)

71 
	#DTLS1_BAD_VER
 0x0100

	)

73 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

76 
	#DTLS1_COOKIE_LENGTH
 32

	)

78 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

80 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

82 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

83 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

85 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

87 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

90 
	sdОs1_bЩm≠_°


92 
PQ_64BIT
 
m≠
;

93 
Ћngth
;

94 
PQ_64BIT
 
max_£q_num
;

95 } 
	tDTLS1_BITMAP
;

97 
	shm_hЧdФ_°


99 
ty≥
;

100 
msg_Ћn
;

101 
£q
;

102 
дag_off
;

103 
дag_Ћn
;

104 
is_ccs
;

107 
	sccs_hЧdФ_°


109 
ty≥
;

110 
£q
;

113 
	sdОs1_timeout_°


116 
їad_timeouts
;

119 
wrЩe_timeouts
;

122 
num_ЃФts
;

125 
	sїc№d_pqueue_°


127 
Хoch
;

128 
pqueue
 
q
;

129 } 
	tїc№d_pqueue
;

131 
	shm_дagmТt_°


133 
hm_hЧdФ_°
 
msg_hЧdФ
;

134 *
дagmТt
;

135 } 
	thm_дagmТt
;

137 
	sdОs1_°©e_°


139 
£nd_cookЫ
;

140 
cookЫ
[
DTLS1_COOKIE_LENGTH
];

141 
rcvd_cookЫ
[
DTLS1_COOKIE_LENGTH
];

142 
cookЫ_Ћn
;

149 
r_Хoch
;

150 
w_Хoch
;

153 
DTLS1_BITMAP
 
bЩm≠
;

156 
DTLS1_BITMAP
 
√xt_bЩm≠
;

159 
h™dshake_wrЩe_£q
;

160 
√xt_h™dshake_wrЩe_£q
;

162 
h™dshake_їad_£q
;

165 
їc№d_pqueue
 
u≈roыs£d_rcds
;

166 
їc№d_pqueue
 
іoыs£d_rcds
;

169 
pqueue
 
bufгїd_mesІges
;

172 
pqueue
 
£Ѕ_mesІges
;

174 
mtu
;

176 
hm_hЧdФ_°
 
w_msg_hdr
;

177 
hm_hЧdФ_°
 
r_msg_hdr
;

179 
dОs1_timeout_°
 
timeout
;

183 
ЃФt_дagmТt
[
DTLS1_AL_HEADER_LENGTH
];

184 
ЃФt_дagmТt_Ћn
;

185 
h™dshake_дagmТt
[
DTLS1_HM_HEADER_LENGTH
];

186 
h™dshake_дagmТt_Ћn
;

188 
їМ™smЩtЪg
;

190 } 
	tDTLS1_STATE
;

192 
	sdОs1_їc№d_d©a_°


194 *
ЈckС
;

195 
ЈckС_Ћngth
;

196 
SSL3_BUFFER
 
rbuf
;

197 
SSL3_RECORD
 
Љec
;

198 } 
	tDTLS1_RECORD_DATA
;

202 
	#DTLS1_TMO_READ_COUNT
 2

	)

203 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

205 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

207 #ifdeа 
__эlu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<ЁТs¶/ЁТs¶cЏf.h
>

58 #iвdeа
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifdeа 
__эlu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #iа
defЪed
(
__MWERKS__
и&& defЪed(
macЪtosh
и|| defЪed(
OPENSSL_SYSNAME_MAC
)

75 #undeа
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #iа
defЪed
(
NETWARE
и|| defЪed(
OPENSSL_SYSNAME_NETWARE
)

81 #undeа
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #iа
defЪed
(
OPENSSL_SYSNAME_MSDOS
)

90 #undeа
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #iа
defЪed
(
OPENSSL_SYSNAME_UWIN
)

97 #undeа
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #iа
defЪed
(
__CYGWIN32__
и|| defЪed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #undeа
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #iа
defЪed
(
_WIN32
и|| defЪed(
OPENSSL_SYSNAME_WIN32
)

105 #undeа
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #iа
defЪed
(
OPENSSL_SYSNAME_WINNT
)

109 #undeа
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #iа
defЪed
(
OPENSSL_SYSNAME_WINCE
)

113 #undeа
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #iа
defЪed
(
OPENSSL_SYS_WIN32
и|| defЪed(
OPENSSL_SYS_WINNT
и|| defЪed(
OPENSSL_SYS_WINCE
)

121 #undeа
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #iвdeа
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifdeа
OPENSSL_SYS_WINDOWS


132 #iвdeа
OPENSSL_OPT_WINDLL


133 #iа
defЪed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #iа
defЪed
(
__VMS
и|| defЪed(
VMS
и|| defЪed(
OPENSSL_SYSNAME_VMS
)

142 #undeа
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #iа
defЪed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #Цiа
defЪed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #iа
defЪed
(
__EMX__
и|| defЪed(
__OS2__
)

156 #undeа
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifdeа
OPENSSL_SYS_UNIX


162 #iа
defЪed
(
lЪux
и|| defЪed(
__lЪux__
и|| defЪed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifdeа
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifdeа
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifdeа
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifdeа
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifdeа
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifdeа
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifdeа
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #iа
defЪed
(
_CRAY
и|| defЪed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #iа
defЪed
(
_AIX
и|| defЪed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #ifdeа
OPENSSL_SYSNAME_VOS


197 
	#OPENSSL_SYS_VOS


	)

201 #ifdeа
OPENSSL_SYSNAME_VXWORKS


202 
	#OPENSSL_SYS_VXWORKS


	)

211 #ifdeа
OPENSSL_SYS_MSDOS


212 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

213 
	#OPENSSL_DECLARE_EXIT
 
	`exЩ
();

	)

215 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

216 
	#OPENSSL_DECLARE_EXIT


	)

238 #iа
defЪed
(
OPENSSL_SYS_VMS_NODECC
)

239 
	#OPENSSL_EXPORT
 
globЃїf


	)

240 
	#OPENSSL_IMPORT
 
globЃїf


	)

241 
	#OPENSSL_GLOBAL
 
globЃdef


	)

242 #Цiа
defЪed
(
OPENSSL_SYS_WINDOWS
и&& defЪed(
OPENSSL_OPT_WINDLL
)

243 
	#OPENSSL_EXPORT
 
	`__deю•ec
(
dќexp№t
)

	)

244 
	#OPENSSL_IMPORT
 
	`__deю•ec
(
dќimp№t
)

	)

245 
	#OPENSSL_GLOBAL


	)

247 
	#OPENSSL_EXPORT
 

	)

248 
	#OPENSSL_IMPORT
 

	)

249 
	#OPENSSL_GLOBAL


	)

251 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

263 #ifdeа
OPENSSL_EXPORT_VAR_AS_FUNCTION


264 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
) \

265 
ty≥
 
_hide_
##
«me
; \

266 
ty≥
 *
_shadow_
##
	`«me
(и{  &
_hide_
##
«me
; } \

267 
ty≥
 
_hide_
##
«me


	)

268 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
иty≥ *
_shadow_
##
	`«me
()

	)

269 
	#OPENSSL_GLOBAL_REF
(
«me
и(*(
_shadow_
##
	`«me
()))

	)

271 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
и
OPENSSL_GLOBAL
Бy≥ 
_shadow_
##
	)
name

272 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
и
OPENSSL_EXPORT
Бy≥ 
_shadow_
##
	)
name

273 
	#OPENSSL_GLOBAL_REF
(
«me
и
_shadow_
##
	)
name

276 #ifdeа 
__эlu•lus


	@/usr/include/openssl/evp.h

59 #iвdeа
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifdeа
OPENSSL_ALGORITHM_DEFINES


63 
	~<ЁТs¶/ЁТs¶cЏf.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<ЁТs¶/ЁТs¶cЏf.h
>

67 #undeа
OPENSSL_ALGORITHM_DEFINES


70 
	~<ЁТs¶/os¶_typ.h
>

72 
	~<ЁТs¶/symhacks.h
>

74 #iвdeа
OPENSSL_NO_BIO


75 
	~<ЁТs¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 32

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<ЁТs¶/objeщs.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rІEnьy±iЏ


	)

110 
	#EVP_PKEY_RSA2
 
NID_rІ


	)

111 
	#EVP_PKEY_DSA
 
NID_dІ


	)

112 
	#EVP_PKEY_DSA1
 
NID_dІ_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dІWЩhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dІWЩhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dІWЩhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgїemТt


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

119 #ifdef 
__эlu•lus


126 
	sevp_pkey_°


128 
ty≥
;

129 
Іve_ty≥
;

130 
їгїnыs
;

132 *
±r
;

133 #iвdeа
OPENSSL_NO_RSA


134 
rІ_°
 *
rІ
;

136 #iвdeа
OPENSSL_NO_DSA


137 
dІ_°
 *
dІ
;

139 #iвdeа
OPENSSL_NO_DH


140 
dh_°
 *
dh
;

142 #iвdeа
OPENSSL_NO_EC


143 
ec_key_°
 *
ec
;

145 } 
pkey
;

146 
Іve_ЈњmСФs
;

147 
STACK_OF
(
X509_ATTRIBUTE
и*
©МibuЛs
;

150 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

151 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

152 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

153 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

166 
	sevp_pkey_md_°


168 
oid
;

169 
EVP_MD
 *
md
;

170 
EVP_PKEY_METHOD
 *
pkey
;

171 } 
	tEVP_PKEY_MD
;

173 
	#EVP_rІ_md2
() \

174 
	`EVP_PKEY_MD_add
(
NID_md2WЩhRSAEnьy±iЏ
,\

175 
	`EVP_rІ_pkcs1
(),
	`EVP_md2
())

	)

176 
	#EVP_rІ_md5
() \

177 
	`EVP_PKEY_MD_add
(
NID_md5WЩhRSAEnьy±iЏ
,\

178 
	`EVP_rІ_pkcs1
(),
	`EVP_md5
())

	)

179 
	#EVP_rІ_sha0
() \

180 
	`EVP_PKEY_MD_add
(
NID_shaWЩhRSAEnьy±iЏ
,\

181 
	`EVP_rІ_pkcs1
(),
	`EVP_sha
())

	)

182 
	#EVP_rІ_sha1
() \

183 
	`EVP_PKEY_MD_add
(
NID_sha1WЩhRSAEnьy±iЏ
,\

184 
	`EVP_rІ_pkcs1
(),
	`EVP_sha1
())

	)

185 
	#EVP_rІ_rЭemd160
() \

186 
	`EVP_PKEY_MD_add
(
NID_rЭemd160WЩhRSA
,\

187 
	`EVP_rІ_pkcs1
(),
	`EVP_rЭemd160
())

	)

188 
	#EVP_rІ_mdc2
() \

189 
	`EVP_PKEY_MD_add
(
NID_mdc2WЩhRSA
,\

190 
	`EVP_rІ_oщС_°rЪg
(),
	`EVP_mdc2
())

	)

191 
	#EVP_dІ_sha
() \

192 
	`EVP_PKEY_MD_add
(
NID_dІWЩhSHA
,\

193 
	`EVP_dІ
(),
	`EVP_sha
())

	)

194 
	#EVP_dІ_sha1
() \

195 
	`EVP_PKEY_MD_add
(
NID_dІWЩhSHA1
,\

196 
	`EVP_dІ
(),
	`EVP_sha1
())

	)

198 
	sevp_pkey_mСhod_°


200 *
«me
;

201 
жags
;

202 
ty≥
;

203 
oid
;

204 
Тьy±_oid
;

206 (*
sign
)();

207 (*
vФify
)();

209 (*
£t
)();

210 (*
gС
)();

211 (*
Тьy±
)();

212 (*
deьy±
)();

213 (*
i2d
)();

214 (*
d2i
)();

215 (*
dup
)();

216 } 
pub
,
іiv
;

217 (*
£t_aҐ1_ЈњmСФs
)();

218 (*
gС_aҐ1_ЈњmСФs
)();

219 } 
	tEVP_PKEY_METHOD
;

222 #iвdeа
EVP_MD


223 
	sТv_md_°


225 
ty≥
;

226 
pkey_ty≥
;

227 
md_size
;

228 
жags
;

229 (*
ЪЩ
)(
EVP_MD_CTX
 *
щx
);

230 (*
upd©e
)(
EVP_MD_CTX
 *
щx
,cЏ° *
d©a
,
size_t
 
couЅ
);

231 (*
fЪЃ
)(
EVP_MD_CTX
 *
щx
,*
md
);

232 (*
cЁy
)(
EVP_MD_CTX
 *
to
,cЏ° EVP_MD_CTX *
дom
);

233 (*
юЧnup
)(
EVP_MD_CTX
 *
щx
);

236 (*
sign
)(
ty≥
, cЏ° *
m
, 
m_Ћngth
,

237 *
sigїt
, *
sigЋn
, *
key
);

238 (*
vФify
)(
ty≥
, cЏ° *
m
, 
m_Ћngth
,

239 cЏ° *
sigbuf
, 
sigЋn
,

240 *
key
);

241 
їquЬed_pkey_ty≥
[5];

242 
block_size
;

243 
щx_size
;

246 
	tevp_sign_mСhod
(
	tty≥
,cЏ° *
	tm
,

247 
	tm_Ћngth
,*
	tsigїt
,

248 *
	tsigЋn
, *
	tkey
);

249 
	tevp_vФify_mСhod
(
	tty≥
,cЏ° *
	tm
,

250 
	tm_Ћngth
,cЏ° *
	tsigbuf
,

251 
	tsigЋn
, *
	tkey
);

253 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

256 
	#EVP_PKEY_NULL_mСhod
 
NULL
,NULL,{0,0,0,0}

	)

258 #iвdeа
OPENSSL_NO_DSA


259 
	#EVP_PKEY_DSA_mСhod
 (
evp_sign_mСhod
 *)
DSA_sign
, \

260 (
evp_vФify_mСhod
 *)
DSA_vФify
, \

261 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

262 
EVP_PKEY_DSA4
,0}

	)

264 
	#EVP_PKEY_DSA_mСhod
 
EVP_PKEY_NULL_mСhod


	)

267 #iвdeа
OPENSSL_NO_ECDSA


268 
	#EVP_PKEY_ECDSA_mСhod
 (
evp_sign_mСhod
 *)
ECDSA_sign
, \

269 (
evp_vФify_mСhod
 *)
ECDSA_vФify
, \

270 {
EVP_PKEY_EC
,0,0,0}

	)

272 
	#EVP_PKEY_ECDSA_mСhod
 
EVP_PKEY_NULL_mСhod


	)

275 #iвdeа
OPENSSL_NO_RSA


276 
	#EVP_PKEY_RSA_mСhod
 (
evp_sign_mСhod
 *)
RSA_sign
, \

277 (
evp_vФify_mСhod
 *)
RSA_vФify
, \

278 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

279 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mСhod
 \

280 (
evp_sign_mСhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

281 (
evp_vФify_mСhod
 *)
RSA_vФify_ASN1_OCTET_STRING
, \

282 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

284 
	#EVP_PKEY_RSA_mСhod
 
EVP_PKEY_NULL_mСhod


	)

285 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mСhod
 
EVP_PKEY_NULL_mСhod


	)

290 
	sТv_md_щx_°


292 cЏ° 
EVP_MD
 *
dige°
;

293 
ENGINE
 *
ТgЪe
;

294 
жags
;

295 *
md_d©a
;

300 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

302 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

304 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

307 
	sevp_cЭhФ_°


309 
nid
;

310 
block_size
;

311 
key_Ћn
;

312 
iv_Ћn
;

313 
жags
;

314 (*
ЪЩ
)(
EVP_CIPHER_CTX
 *
щx
, cЏ° *
key
,

315 cЏ° *
iv
, 
Тc
);

316 (*
do_cЭhФ
)(
EVP_CIPHER_CTX
 *
щx
, *
out
,

317 cЏ° *
Ъ
, 
Ъl
);

318 (*
юЧnup
)(
EVP_CIPHER_CTX
 *);

319 
щx_size
;

320 (*
£t_aҐ1_ЈњmСФs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

321 (*
gС_aҐ1_ЈњmСФs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

322 (*
щЊ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
ђg
, *
±r
);

323 *
≠p_d©a
;

330 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

331 
	#EVP_CIPH_ECB_MODE
 0x1

	)

332 
	#EVP_CIPH_CBC_MODE
 0x2

	)

333 
	#EVP_CIPH_CFB_MODE
 0x3

	)

334 
	#EVP_CIPH_OFB_MODE
 0x4

	)

335 
	#EVP_CIPH_MODE
 0x7

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

353 
	#EVP_CTRL_INIT
 0x0

	)

354 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

355 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

356 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

357 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

358 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

359 
	#EVP_CTRL_RAND_KEY
 0x6

	)

361 
	sevp_cЭhФ_Ъfo_°


363 cЏ° 
EVP_CIPHER
 *
cЭhФ
;

364 
iv
[
EVP_MAX_IV_LENGTH
];

365 } 
	tEVP_CIPHER_INFO
;

367 
	sevp_cЭhФ_щx_°


369 cЏ° 
EVP_CIPHER
 *
cЭhФ
;

370 
ENGINE
 *
ТgЪe
;

371 
Тьy±
;

372 
buf_Ћn
;

374 
oiv
[
EVP_MAX_IV_LENGTH
];

375 
iv
[
EVP_MAX_IV_LENGTH
];

376 
buf
[
EVP_MAX_BLOCK_LENGTH
];

377 
num
;

379 *
≠p_d©a
;

380 
key_Ћn
;

381 
жags
;

382 *
cЭhФ_d©a
;

383 
fЪЃ_u£d
;

384 
block_mask
;

385 
fЪЃ
[
EVP_MAX_BLOCK_LENGTH
];

388 
	sevp_Encode_Ctx_°


390 
num
;

391 
Ћngth
;

396 
Тc_d©a
[80];

397 
lЪe_num
;

398 
ex≥щ_∆
;

399 } 
	tEVP_ENCODE_CTX
;

402 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	tщx
, cЏ° *
	tЈss
, 
	tЈs¶Т
,

403 
	tASN1_TYPE
 *
	tЈњm
, cЏ° 
	tEVP_CIPHER
 *
	tcЭhФ
,

404 cЏ° 
	tEVP_MD
 *
	tmd
, 
	tТ_de
);

406 #iвdeа
OPENSSL_NO_RSA


407 
	#EVP_PKEY_assign_RSA
(
pkey
,
rІ
и
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

408 (*)(
rІ
))

	)

411 #iвdeа
OPENSSL_NO_DSA


412 
	#EVP_PKEY_assign_DSA
(
pkey
,
dІ
и
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

413 (*)(
dІ
))

	)

416 #iвdeа
OPENSSL_NO_DH


417 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
и
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

418 (*)(
dh
))

	)

421 #iвdeа
OPENSSL_NO_EC


422 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
и
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

423 (*)(
eckey
))

	)

427 
	#EVP_gС_dige°bynid
(
a
и
	`EVP_gС_dige°by«me
(
	`OBJ_nid2Ґ
„))

	)

428 
	#EVP_gС_dige°byobj
(
a
и
	`EVP_gС_dige°bynid
(
	`OBJ_obj2nid
„))

	)

429 
	#EVP_gС_cЭhФbynid
(
a
и
	`EVP_gС_cЭhФby«me
(
	`OBJ_nid2Ґ
„))

	)

430 
	#EVP_gС_cЭhФbyobj
(
a
и
	`EVP_gС_cЭhФbynid
(
	`OBJ_obj2nid
„))

	)

432 
EVP_MD_ty≥
(cЏ° 
EVP_MD
 *
md
);

433 
	#EVP_MD_nid
(
e
и
	`EVP_MD_ty≥
”)

	)

434 
	#EVP_MD_«me
(
e
и
	`OBJ_nid2Ґ
(
	`EVP_MD_nid
”))

	)

435 
EVP_MD_pkey_ty≥
(cЏ° 
EVP_MD
 *
md
);

436 
EVP_MD_size
(cЏ° 
EVP_MD
 *
md
);

437 
EVP_MD_block_size
(cЏ° 
EVP_MD
 *
md
);

439 cЏ° 
EVP_MD
 * 
EVP_MD_CTX_md
(cЏ° 
EVP_MD_CTX
 *
щx
);

440 
	#EVP_MD_CTX_size
(
e
и
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

441 
	#EVP_MD_CTX_block_size
(
e
и
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

442 
	#EVP_MD_CTX_ty≥
(
e
и
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

444 
EVP_CIPHER_nid
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

445 
	#EVP_CIPHER_«me
(
e
и
	`OBJ_nid2Ґ
(
	`EVP_CIPHER_nid
”))

	)

446 
EVP_CIPHER_block_size
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

447 
EVP_CIPHER_key_Ћngth
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

448 
EVP_CIPHER_iv_Ћngth
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

449 
EVP_CIPHER_жags
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

450 
	#EVP_CIPHER_mode
(
e
и(
	`EVP_CIPHER_жags
”и& 
EVP_CIPH_MODE
)

	)

452 cЏ° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cЭhФ
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

453 
EVP_CIPHER_CTX_nid
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

454 
EVP_CIPHER_CTX_block_size
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

455 
EVP_CIPHER_CTX_key_Ћngth
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

456 
EVP_CIPHER_CTX_iv_Ћngth
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

457 * 
EVP_CIPHER_CTX_gС_≠p_d©a
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

458 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
щx
, *
d©a
);

459 
	#EVP_CIPHER_CTX_ty≥
(
c
и
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cЭhФ
(c))

	)

460 
EVP_CIPHER_CTX_жags
(cЏ° 
EVP_CIPHER_CTX
 *
щx
);

461 
	#EVP_CIPHER_CTX_mode
(
e
и(
	`EVP_CIPHER_CTX_жags
”и& 
EVP_CIPH_MODE
)

	)

463 
	#EVP_ENCODE_LENGTH
(
l
и((÷+2)/3*4)+÷/48+1)*2+80)

	)

464 
	#EVP_DECODE_LENGTH
(
l
и(÷+3)/4*3+80)

	)

466 
	#EVP_SignInЩ_ex
(
a
,
b
,
c
и
	`EVP_Dige°InЩ_ex
„,b,c)

	)

467 
	#EVP_SignInЩ
(
a
,
b
и
	`EVP_Dige°InЩ
„,b)

	)

468 
	#EVP_SignUpd©e
(
a
,
b
,
c
и
	`EVP_Dige°Upd©e
„,b,c)

	)

469 
	#EVP_VФifyInЩ_ex
(
a
,
b
,
c
и
	`EVP_Dige°InЩ_ex
„,b,c)

	)

470 
	#EVP_VФifyInЩ
(
a
,
b
и
	`EVP_Dige°InЩ
„,b)

	)

471 
	#EVP_VФifyUpd©e
(
a
,
b
,
c
и
	`EVP_Dige°Upd©e
„,b,c)

	)

472 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
и
	`EVP_Deьy±Upd©e
„,b,c,d,e)

	)

473 
	#EVP_SЧlUpd©e
(
a
,
b
,
c
,
d
,
e
и
	`EVP_Enьy±Upd©e
„,b,c,d,e)

	)

475 #ifdeа
CONST_STRICT


476 
BIO_£t_md
(
BIO
 *,cЏ° 
EVP_MD
 *
md
);

478 
	#BIO_£t_md
(
b
,
md
и
	`BIO_щЊ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

480 
	#BIO_gС_md
(
b
,
mdp
и
	`BIO_щЊ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

481 
	#BIO_gС_md_щx
(
b
,
mdэ
и
	`BIO_щЊ
(b,
BIO_C_GET_MD_CTX
,0,(*)mdэ)

	)

482 
	#BIO_£t_md_щx
(
b
,
mdэ
и
	`BIO_щЊ
(b,
BIO_C_SET_MD_CTX
,0,(*)mdэ)

	)

483 
	#BIO_gС_cЭhФ_°©us
(
b
и
	`BIO_щЊ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

484 
	#BIO_gС_cЭhФ_щx
(
b
,
c_µ
и
	`BIO_щЊ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

486 
EVP_CЭhФ
(
EVP_CIPHER_CTX
 *
c
,

487 *
out
,

488 cЏ° *
Ъ
,

489 
Ъl
);

491 
	#EVP_add_cЭhФ_ЃЯs
(
n
,
ЃЯs
) \

492 
	`OBJ_NAME_add
((
ЃЯs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

493 
	#EVP_add_dige°_ЃЯs
(
n
,
ЃЯs
) \

494 
	`OBJ_NAME_add
((
ЃЯs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

495 
	#EVP_dЦСe_cЭhФ_ЃЯs
(
ЃЯs
) \

496 
	`OBJ_NAME_їmove
(
ЃЯs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

497 
	#EVP_dЦСe_dige°_ЃЯs
(
ЃЯs
) \

498 
	`OBJ_NAME_їmove
(
ЃЯs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

500 
EVP_MD_CTX_ЪЩ
(
EVP_MD_CTX
 *
щx
);

501 
EVP_MD_CTX_юЧnup
(
EVP_MD_CTX
 *
щx
);

502 
EVP_MD_CTX
 *
EVP_MD_CTX_ьЧЛ
();

503 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
щx
);

504 
EVP_MD_CTX_cЁy_ex
(
EVP_MD_CTX
 *
out
,cЏ° EVP_MD_CTX *
Ъ
);

505 
EVP_MD_CTX_£t_жags
(
EVP_MD_CTX
 *
щx
, 
жags
);

506 
EVP_MD_CTX_юЧr_жags
(
EVP_MD_CTX
 *
щx
, 
жags
);

507 
EVP_MD_CTX_Л°_жags
(cЏ° 
EVP_MD_CTX
 *
щx
,
жags
);

508 
EVP_Dige°InЩ_ex
(
EVP_MD_CTX
 *
щx
, cЏ° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
imґ
);

509 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
щx
,cЏ° *
d
,

510 
size_t
 
ъt
);

511 
EVP_Dige°FЪЃ_ex
(
EVP_MD_CTX
 *
щx
,*
md
,*
s
);

512 
EVP_Dige°
(cЏ° *
d©a
, 
size_t
 
couЅ
,

513 *
md
, *
size
, cЏ° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
imґ
);

515 
EVP_MD_CTX_cЁy
(
EVP_MD_CTX
 *
out
,cЏ° EVP_MD_CTX *
Ъ
);

516 
EVP_Dige°InЩ
(
EVP_MD_CTX
 *
щx
, cЏ° 
EVP_MD
 *
ty≥
);

517 
EVP_Dige°FЪЃ
(
EVP_MD_CTX
 *
щx
,*
md
,*
s
);

519 
EVP_їad_pw_°rЪg
(*
buf
,
Ћngth
,cЏ° *
іom±
,
vФify
);

520 
EVP_£t_pw_іom±
(cЏ° *
іom±
);

521 * 
EVP_gС_pw_іom±
();

523 
EVP_ByЛsToKey
(cЏ° 
EVP_CIPHER
 *
ty≥
,cЏ° 
EVP_MD
 *
md
,

524 cЏ° *
І…
, cЏ° *
d©a
,

525 
d©Ѓ
, 
couЅ
, *
key
,*
iv
);

527 
EVP_Enьy±InЩ
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
,

528 cЏ° *
key
, cЏ° *
iv
);

529 
EVP_Enьy±InЩ_ex
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
, 
ENGINE
 *
imґ
,

530 cЏ° *
key
, cЏ° *
iv
);

531 
EVP_Enьy±Upd©e
(
EVP_CIPHER_CTX
 *
щx
, *
out
,

532 *
ouО
, cЏ° *
Ъ
, 
Ъl
);

533 
EVP_Enьy±FЪЃ_ex
(
EVP_CIPHER_CTX
 *
щx
, *
out
, *
ouО
);

534 
EVP_Enьy±FЪЃ
(
EVP_CIPHER_CTX
 *
щx
, *
out
, *
ouО
);

536 
EVP_Deьy±InЩ
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
,

537 cЏ° *
key
, cЏ° *
iv
);

538 
EVP_Deьy±InЩ_ex
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
, 
ENGINE
 *
imґ
,

539 cЏ° *
key
, cЏ° *
iv
);

540 
EVP_Deьy±Upd©e
(
EVP_CIPHER_CTX
 *
щx
, *
out
,

541 *
ouО
, cЏ° *
Ъ
, 
Ъl
);

542 
EVP_Deьy±FЪЃ
(
EVP_CIPHER_CTX
 *
щx
, *
outm
, *
ouО
);

543 
EVP_Deьy±FЪЃ_ex
(
EVP_CIPHER_CTX
 *
щx
, *
outm
, *
ouО
);

545 
EVP_CЭhФInЩ
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
,

546 cЏ° *
key
,cЏ° *
iv
,

547 
Тc
);

548 
EVP_CЭhФInЩ_ex
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
cЭhФ
, 
ENGINE
 *
imґ
,

549 cЏ° *
key
,cЏ° *
iv
,

550 
Тc
);

551 
EVP_CЭhФUpd©e
(
EVP_CIPHER_CTX
 *
щx
, *
out
,

552 *
ouО
, cЏ° *
Ъ
, 
Ъl
);

553 
EVP_CЭhФFЪЃ
(
EVP_CIPHER_CTX
 *
щx
, *
outm
, *
ouО
);

554 
EVP_CЭhФFЪЃ_ex
(
EVP_CIPHER_CTX
 *
щx
, *
outm
, *
ouО
);

556 
EVP_SignFЪЃ
(
EVP_MD_CTX
 *
щx
,*
md
,*
s
,

557 
EVP_PKEY
 *
pkey
);

559 
EVP_VФifyFЪЃ
(
EVP_MD_CTX
 *
щx
,cЏ° *
sigbuf
,

560 
sigЋn
,
EVP_PKEY
 *
pkey
);

562 
EVP_O≥nInЩ
(
EVP_CIPHER_CTX
 *
щx
,cЏ° 
EVP_CIPHER
 *
ty≥
,

563 cЏ° *
ek
, 
ekl
, cЏ° *
iv
,

564 
EVP_PKEY
 *
іiv
);

565 
EVP_O≥nFЪЃ
(
EVP_CIPHER_CTX
 *
щx
, *
out
, *
ouО
);

567 
EVP_SЧlInЩ
(
EVP_CIPHER_CTX
 *
щx
, cЏ° 
EVP_CIPHER
 *
ty≥
,

568 **
ek
, *
ekl
, *
iv
,

569 
EVP_PKEY
 **
pubk
, 
≈ubk
);

570 
EVP_SЧlFЪЃ
(
EVP_CIPHER_CTX
 *
щx
,*
out
,*
ouО
);

572 
EVP_EncodeInЩ
(
EVP_ENCODE_CTX
 *
щx
);

573 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
щx
,*
out
,*
ouО
,

574 cЏ° *
Ъ
,
Ъl
);

575 
EVP_EncodeFЪЃ
(
EVP_ENCODE_CTX
 *
щx
,*
out
,*
ouО
);

576 
EVP_EncodeBlock
(*
t
, cЏ° *
f
, 
n
);

578 
EVP_DecodeInЩ
(
EVP_ENCODE_CTX
 *
щx
);

579 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
щx
,*
out
,*
ouО
,

580 cЏ° *
Ъ
, 
Ъl
);

581 
EVP_DecodeFЪЃ
(
EVP_ENCODE_CTX
 *
щx
, 

582 *
out
, *
ouО
);

583 
EVP_DecodeBlock
(*
t
, cЏ° *
f
, 
n
);

585 
EVP_CIPHER_CTX_ЪЩ
(
EVP_CIPHER_CTX
 *
a
);

586 
EVP_CIPHER_CTX_юЧnup
(
EVP_CIPHER_CTX
 *
a
);

587 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

588 
EVP_CIPHER_CTX_дУ
(
EVP_CIPHER_CTX
 *
a
);

589 
EVP_CIPHER_CTX_£t_key_Ћngth
(
EVP_CIPHER_CTX
 *
x
, 
keyЋn
);

590 
EVP_CIPHER_CTX_£t_ЈddЪg
(
EVP_CIPHER_CTX
 *
c
, 
Јd
);

591 
EVP_CIPHER_CTX_щЊ
(
EVP_CIPHER_CTX
 *
щx
, 
ty≥
, 
ђg
, *
±r
);

592 
EVP_CIPHER_CTX_њnd_key
(
EVP_CIPHER_CTX
 *
щx
, *
key
);

594 #iвdeа
OPENSSL_NO_BIO


595 
BIO_METHOD
 *
BIO_f_md
();

596 
BIO_METHOD
 *
BIO_f_ba£64
();

597 
BIO_METHOD
 *
BIO_f_cЭhФ
();

598 
BIO_METHOD
 *
BIO_f_їlЯbЋ
();

599 
BIO_£t_cЭhФ
(
BIO
 *
b
,cЏ° 
EVP_CIPHER
 *
c
,cЏ° *
k
,

600 cЏ° *
i
, 
Тc
);

603 cЏ° 
EVP_MD
 *
EVP_md_nuќ
();

604 #iвdeа
OPENSSL_NO_MD2


605 cЏ° 
EVP_MD
 *
EVP_md2
();

607 #iвdeа
OPENSSL_NO_MD4


608 cЏ° 
EVP_MD
 *
EVP_md4
();

610 #iвdeа
OPENSSL_NO_MD5


611 cЏ° 
EVP_MD
 *
EVP_md5
();

613 #iвdeа
OPENSSL_NO_SHA


614 cЏ° 
EVP_MD
 *
EVP_sha
();

615 cЏ° 
EVP_MD
 *
EVP_sha1
();

616 cЏ° 
EVP_MD
 *
EVP_dss
();

617 cЏ° 
EVP_MD
 *
EVP_dss1
();

618 cЏ° 
EVP_MD
 *
EVP_ecdІ
();

620 #iвdeа
OPENSSL_NO_SHA256


621 cЏ° 
EVP_MD
 *
EVP_sha224
();

622 cЏ° 
EVP_MD
 *
EVP_sha256
();

624 #iвdeа
OPENSSL_NO_SHA512


625 cЏ° 
EVP_MD
 *
EVP_sha384
();

626 cЏ° 
EVP_MD
 *
EVP_sha512
();

628 #iвdeа
OPENSSL_NO_MDC2


629 cЏ° 
EVP_MD
 *
EVP_mdc2
();

631 #iвdeа
OPENSSL_NO_RIPEMD


632 cЏ° 
EVP_MD
 *
EVP_rЭemd160
();

634 cЏ° 
EVP_CIPHER
 *
EVP_Тc_nuќ
();

635 #iвdeа
OPENSSL_NO_DES


636 cЏ° 
EVP_CIPHER
 *
EVP_des_ecb
();

637 cЏ° 
EVP_CIPHER
 *
EVP_des_ede
();

638 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3
();

639 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

640 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

641 cЏ° 
EVP_CIPHER
 *
EVP_des_cfb64
();

642 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

643 cЏ° 
EVP_CIPHER
 *
EVP_des_cfb1
();

644 cЏ° 
EVP_CIPHER
 *
EVP_des_cfb8
();

645 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

646 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

648 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

649 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

651 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

652 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

653 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

654 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

655 cЏ° 
EVP_CIPHER
 *
EVP_des_ofb
();

656 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

657 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

658 cЏ° 
EVP_CIPHER
 *
EVP_des_cbc
();

659 cЏ° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

660 cЏ° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

661 cЏ° 
EVP_CIPHER
 *
EVP_desx_cbc
();

665 #ifdeа
OPENSSL_OPENBSD_DEV_CRYPTO


666 cЏ° 
EVP_CIPHER
 *
EVP_dev_ьy±o_des_ede3_cbc
();

667 cЏ° 
EVP_CIPHER
 *
EVP_dev_ьy±o_rc4
();

668 cЏ° 
EVP_MD
 *
EVP_dev_ьy±o_md5
();

672 #iвdeа
OPENSSL_NO_RC4


673 cЏ° 
EVP_CIPHER
 *
EVP_rc4
();

674 cЏ° 
EVP_CIPHER
 *
EVP_rc4_40
();

676 #iвdeа
OPENSSL_NO_IDEA


677 cЏ° 
EVP_CIPHER
 *
EVP_idЧ_ecb
();

678 cЏ° 
EVP_CIPHER
 *
EVP_idЧ_cfb64
();

679 
	#EVP_idЧ_cfb
 
EVP_idЧ_cfb64


	)

680 cЏ° 
EVP_CIPHER
 *
EVP_idЧ_ofb
();

681 cЏ° 
EVP_CIPHER
 *
EVP_idЧ_cbc
();

683 #iвdeа
OPENSSL_NO_RC2


684 cЏ° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

685 cЏ° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

686 cЏ° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

687 cЏ° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

688 cЏ° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

689 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

690 cЏ° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

692 #iвdeа
OPENSSL_NO_BF


693 cЏ° 
EVP_CIPHER
 *
EVP_bf_ecb
();

694 cЏ° 
EVP_CIPHER
 *
EVP_bf_cbc
();

695 cЏ° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

696 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

697 cЏ° 
EVP_CIPHER
 *
EVP_bf_ofb
();

699 #iвdeа
OPENSSL_NO_CAST


700 cЏ° 
EVP_CIPHER
 *
EVP_€°5_ecb
();

701 cЏ° 
EVP_CIPHER
 *
EVP_€°5_cbc
();

702 cЏ° 
EVP_CIPHER
 *
EVP_€°5_cfb64
();

703 
	#EVP_€°5_cfb
 
EVP_€°5_cfb64


	)

704 cЏ° 
EVP_CIPHER
 *
EVP_€°5_ofb
();

706 #iвdeа
OPENSSL_NO_RC5


707 cЏ° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

708 cЏ° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

709 cЏ° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

710 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

711 cЏ° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

713 #iвdeа
OPENSSL_NO_AES


714 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_ecb
();

715 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_cbc
();

716 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_cfb1
();

717 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_cfb8
();

718 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_cfb128
();

719 
	#EVP_Ђs_128_cfb
 
EVP_Ђs_128_cfb128


	)

720 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_ofb
();

722 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_128_щr
();

724 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_ecb
();

725 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_cbc
();

726 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_cfb1
();

727 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_cfb8
();

728 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_cfb128
();

729 
	#EVP_Ђs_192_cfb
 
EVP_Ђs_192_cfb128


	)

730 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_ofb
();

732 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_192_щr
();

734 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_ecb
();

735 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_cbc
();

736 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_cfb1
();

737 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_cfb8
();

738 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_cfb128
();

739 
	#EVP_Ђs_256_cfb
 
EVP_Ђs_256_cfb128


	)

740 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_ofb
();

742 cЏ° 
EVP_CIPHER
 *
EVP_Ђs_256_щr
();

745 #iвdeа
OPENSSL_NO_CAMELLIA


746 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_ecb
();

747 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_cbc
();

748 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_cfb1
();

749 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_cfb8
();

750 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_cfb128
();

751 
	#EVP_€mЦlЯ_128_cfb
 
EVP_€mЦlЯ_128_cfb128


	)

752 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_128_ofb
();

753 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_ecb
();

754 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_cbc
();

755 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_cfb1
();

756 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_cfb8
();

757 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_cfb128
();

758 
	#EVP_€mЦlЯ_192_cfb
 
EVP_€mЦlЯ_192_cfb128


	)

759 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_192_ofb
();

760 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_ecb
();

761 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_cbc
();

762 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_cfb1
();

763 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_cfb8
();

764 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_cfb128
();

765 
	#EVP_€mЦlЯ_256_cfb
 
EVP_€mЦlЯ_256_cfb128


	)

766 cЏ° 
EVP_CIPHER
 *
EVP_€mЦlЯ_256_ofb
();

769 #iвdeа
OPENSSL_NO_SEED


770 cЏ° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

771 cЏ° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

772 cЏ° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

773 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

774 cЏ° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

777 
OPENSSL_add_Ѓl_Ѓg№Щhms_nocЏf
();

778 
OPENSSL_add_Ѓl_Ѓg№Щhms_cЏf
();

780 #ifdeа
OPENSSL_LOAD_CONF


781 
	#O≥nSSL_add_Ѓl_Ѓg№Щhms
() \

782 
	`OPENSSL_add_Ѓl_Ѓg№Щhms_cЏf
()

	)

784 
	#O≥nSSL_add_Ѓl_Ѓg№Щhms
() \

785 
	`OPENSSL_add_Ѓl_Ѓg№Щhms_nocЏf
()

	)

788 
O≥nSSL_add_Ѓl_cЭhФs
();

789 
O≥nSSL_add_Ѓl_dige°s
();

790 
	#SSLЧy_add_Ѓl_Ѓg№Щhms
(и
	`O≥nSSL_add_Ѓl_Ѓg№Щhms
()

	)

791 
	#SSLЧy_add_Ѓl_cЭhФs
(и
	`O≥nSSL_add_Ѓl_cЭhФs
()

	)

792 
	#SSLЧy_add_Ѓl_dige°s
(и
	`O≥nSSL_add_Ѓl_dige°s
()

	)

794 
EVP_add_cЭhФ
(cЏ° 
EVP_CIPHER
 *
cЭhФ
);

795 
EVP_add_dige°
(cЏ° 
EVP_MD
 *
dige°
);

797 cЏ° 
EVP_CIPHER
 *
EVP_gС_cЭhФby«me
(cЏ° *
«me
);

798 cЏ° 
EVP_MD
 *
EVP_gС_dige°by«me
(cЏ° *
«me
);

799 
EVP_юЧnup
();

801 
EVP_PKEY_deьy±
(*
dec_key
,

802 cЏ° *
Тc_key
,
Тc_key_Ћn
,

803 
EVP_PKEY
 *
іiv©e_key
);

804 
EVP_PKEY_Тьy±
(*
Тc_key
,

805 cЏ° *
key
,
key_Ћn
,

806 
EVP_PKEY
 *
pub_key
);

807 
EVP_PKEY_ty≥
(
ty≥
);

808 
EVP_PKEY_bЩs
(
EVP_PKEY
 *
pkey
);

809 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

810 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

812 #iвdeа
OPENSSL_NO_RSA


813 
rІ_°
;

814 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rІ_°
 *
key
);

815 
rІ_°
 *
EVP_PKEY_gС1_RSA
(
EVP_PKEY
 *
pkey
);

817 #iвdeа
OPENSSL_NO_DSA


818 
dІ_°
;

819 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dІ_°
 *
key
);

820 
dІ_°
 *
EVP_PKEY_gС1_DSA
(
EVP_PKEY
 *
pkey
);

822 #iвdeа
OPENSSL_NO_DH


823 
dh_°
;

824 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

825 
dh_°
 *
EVP_PKEY_gС1_DH
(
EVP_PKEY
 *
pkey
);

827 #iвdeа
OPENSSL_NO_EC


828 
ec_key_°
;

829 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

830 
ec_key_°
 *
EVP_PKEY_gС1_EC_KEY
(
EVP_PKEY
 *
pkey
);

833 
EVP_PKEY
 * 
EVP_PKEY_√w
();

834 
EVP_PKEY_дУ
(
EVP_PKEY
 *
pkey
);

836 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, cЏ° **
µ
,

837 
Ћngth
);

838 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

840 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, cЏ° **
µ
,

841 
Ћngth
);

842 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, cЏ° **
µ
,

843 
Ћngth
);

844 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

846 
EVP_PKEY_cЁy_ЈњmСФs
(
EVP_PKEY
 *
to
, cЏ° EVP_PKEY *
дom
);

847 
EVP_PKEY_missЪg_ЈњmСФs
(cЏ° 
EVP_PKEY
 *
pkey
);

848 
EVP_PKEY_Іve_ЈњmСФs
(
EVP_PKEY
 *
pkey
,
mode
);

849 
EVP_PKEY_cmp_ЈњmСФs
(cЏ° 
EVP_PKEY
 *
a
, cЏ° EVP_PKEY *
b
);

851 
EVP_PKEY_cmp
(cЏ° 
EVP_PKEY
 *
a
, cЏ° EVP_PKEY *
b
);

853 
EVP_CIPHER_ty≥
(cЏ° 
EVP_CIPHER
 *
щx
);

856 
EVP_CIPHER_Јњm_to_aҐ1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

857 
EVP_CIPHER_aҐ1_to_Јњm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

860 
EVP_CIPHER_£t_aҐ1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

861 
EVP_CIPHER_gС_aҐ1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

864 
PKCS5_PBE_keyivgТ
(
EVP_CIPHER_CTX
 *
щx
, cЏ° *
Јss
, 
Јs¶Т
,

865 
ASN1_TYPE
 *
Јњm
, cЏ° 
EVP_CIPHER
 *
cЭhФ
, cЏ° 
EVP_MD
 *
md
,

866 
Т_de
);

867 
PKCS5_PBKDF2_HMAC_SHA1
(cЏ° *
Јss
, 
Јs¶Т
,

868 cЏ° *
І…
, 
І…Ћn
, 
ЩФ
,

869 
keyЋn
, *
out
);

870 
PKCS5_v2_PBE_keyivgТ
(
EVP_CIPHER_CTX
 *
щx
, cЏ° *
Јss
, 
Јs¶Т
,

871 
ASN1_TYPE
 *
Јњm
, cЏ° 
EVP_CIPHER
 *
cЭhФ
, cЏ° 
EVP_MD
 *
md
,

872 
Т_de
);

874 
PKCS5_PBE_add
();

876 
EVP_PBE_CЭhФInЩ
 (
ASN1_OBJECT
 *
pbe_obj
, cЏ° *
Јss
, 
Јs¶Т
,

877 
ASN1_TYPE
 *
Јњm
, 
EVP_CIPHER_CTX
 *
щx
, 
Т_de
);

878 
EVP_PBE_Ѓg_add
(
nid
, cЏ° 
EVP_CIPHER
 *
cЭhФ
, cЏ° 
EVP_MD
 *
md
,

879 
EVP_PBE_KEYGEN
 *
keygТ
);

880 
EVP_PBE_юЧnup
();

886 
ERR_lяd_EVP_°rЪgs
();

891 
	#EVP_F_AES_INIT_KEY
 133

	)

892 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

893 
	#EVP_F_D2I_PKEY
 100

	)

894 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

895 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

896 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

897 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

898 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

899 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

900 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

901 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

902 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

903 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

904 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

905 
	#EVP_F_EVP_OPENINIT
 102

	)

906 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

907 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

908 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

909 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

910 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

911 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

912 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

913 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

914 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

915 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

916 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

917 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

918 
	#EVP_F_EVP_PKEY_NEW
 106

	)

919 
	#EVP_F_EVP_RIJNDAEL
 126

	)

920 
	#EVP_F_EVP_SIGNFINAL
 107

	)

921 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

922 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

923 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

924 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

925 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

926 
	#EVP_F_RC5_CTRL
 125

	)

929 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

930 
	#EVP_R_ASN1_LIB
 140

	)

931 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

932 
	#EVP_R_BAD_DECRYPT
 100

	)

933 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

934 
	#EVP_R_BN_DECODE_ERROR
 112

	)

935 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

936 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

937 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

938 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

939 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

940 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

941 
	#EVP_R_DECODE_ERROR
 114

	)

942 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

943 
	#EVP_R_ENCODE_ERROR
 115

	)

944 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

945 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

946 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

947 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

948 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

949 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

950 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

951 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

952 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

953 
	#EVP_R_IV_TOO_LARGE
 102

	)

954 
	#EVP_R_KEYGEN_FAILURE
 120

	)

955 
	#EVP_R_MISSING_PARAMETERS
 103

	)

956 
	#EVP_R_NO_CIPHER_SET
 131

	)

957 
	#EVP_R_NO_DIGEST_SET
 139

	)

958 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

959 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

960 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

961 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

962 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

963 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

964 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

965 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

966 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

967 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

968 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

969 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

970 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

971 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

972 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

973 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

974 
	#EVP_R_SEED_KEY_SETUP_FAILED
 162

	)

976 #ifdeа 
__эlu•lus


	@/usr/include/openssl/kssl.h

63 #iвdef 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<ЁТs¶/ЁТs¶cЏf.h
>

68 #iвdeа
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<щy≥.h
>

72 
	~<krb5.h
>

74 #ifdeа 
__эlu•lus


82 #ifdeа
KRB5_HEIMDAL


83 
	tkrb5_oщС
;

84 
	#FAR


	)

87 #iвdeа
FAR


88 
	#FAR


	)

99 #iвdef 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #iвdef 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/Сc/krb5.keyПb"

	)

107 #iвdeа
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #iвdeа
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #iвdeа
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_Фr_°
 {

121 
	gїasЏ
;

122 
	gЛxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_щx_°


133 *
	g£rviы_«me
;

134 *
	g£rviы_ho°
;

135 *
	gюЫЅ_іЪc
;

136 *
	gkeyПb_fЮe
;

137 *
	gьed_€che
;

138 
krb5_Тщy≥
 
	gТщy≥
;

139 
	gЋngth
;

140 
krb5_oщС
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_Фr№_code
 
ks¶_щx_£t°rЪg
(
KSSL_CTX
 *
ks¶_щx
, 
which
, *
Лxt
);

154 
KSSL_CTX
 *
ks¶_щx_√w
();

155 
KSSL_CTX
 *
ks¶_щx_дУ
(KSSL_CTX *
ks¶_щx
);

156 
ks¶_щx_show
(
KSSL_CTX
 *
ks¶_щx
);

157 
krb5_Фr№_code
 
ks¶_щx_£НrЪc
(
KSSL_CTX
 *
ks¶_щx
, 
which
,

158 
krb5_d©a
 *
їЃm
, krb5_d©®*
ТtЩy
, 
√ЅЩЫs
);

159 
krb5_Фr№_code
 
ks¶_cgС_tkt
(
KSSL_CTX
 *
ks¶_щx
, 
krb5_d©a
 **
Тc_tkН
,

160 
krb5_d©a
 *
authТp
, 
KSSL_ERR
 *
ks¶_Фr
);

161 
krb5_Фr№_code
 
ks¶_sgС_tkt
(
KSSL_CTX
 *
ks¶_щx
, 
krb5_d©a
 *
Ъd©a
,

162 
krb5_tickС_times
 *
Йimes
, 
KSSL_ERR
 *
ks¶_Фr
);

163 
krb5_Фr№_code
 
ks¶_щx_£tkey
(
KSSL_CTX
 *
ks¶_щx
, 
krb5_keyblock
 *
£ssiЏ
);

164 
ks¶_Фr_£t
(
KSSL_ERR
 *
ks¶_Фr
, 
їasЏ
, *
Лxt
);

165 
ks¶_krb5_дУ_d©a_cЏЛЅs
(
krb5_cЏЛxt
 
cЏЛxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_Фr№_code
 
ks¶_buЮd_іЪcЭЃ_2
(
krb5_cЏЛxt
 
cЏЛxt
,

167 
krb5_іЪcЭЃ
 *
іЪc
, 
ЊТ
, cЏ° *
їЃm
,

168 
¶Т
, cЏ° *
svc
, 
hЋn
, cЏ° *
ho°
);

169 
krb5_Фr№_code
 
ks¶_vЃid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickС_times
 *
Йimes
);

171 
krb5_Фr№_code
 
ks¶_check_authТt
(
KSSL_CTX
 *
ks¶_щx
, 
krb5_d©a
 *
authТН
,

172 
krb5_time°amp
 *
©imХ
, 
KSSL_ERR
 *
ks¶_Фr
);

173 *
ks¶_skЭ_cЏfound
(
krb5_Тщy≥
 
Тщy≥
, *
authn
);

175 #ifdeа 
__эlu•lus


	@/usr/include/openssl/lhash.h

63 #iвdeа
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<ЁТs¶/e_os2.h
>

67 #iвdeа
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #iвdeа
OPENSSL_NO_BIO


72 
	~<ЁТs¶/bio.h
>

75 #ifdeа 
__эlu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #iвdeа
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

102 
f_«me
##
	`_LHASH_HASH
(cЏ° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

104 
f_«me
##
	`_LHASH_HASH
(cЏ° *
ђg
) { \

105 
o_ty≥
 
a
 = (o_ty≥)
ђg
; \

106  
	`f_«me
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
f_«me
иf_«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

111 
f_«me
##
	`_LHASH_COMP
(cЏ° *, cЏ° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

113 
f_«me
##
	`_LHASH_COMP
(cЏ° *
ђg1
, cЏ° *
ђg2
) { \

114 
o_ty≥
 
a
 = (o_ty≥)
ђg1
; \

115 
o_ty≥
 
b
 = (o_ty≥)
ђg2
; \

116  
	`f_«me
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
f_«me
иf_«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

121 
f_«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

123 
f_«me
##
	`_LHASH_DOALL
(*
ђg
) { \

124 
o_ty≥
 
a
 = (o_ty≥)
ђg
; \

125 
	`f_«me
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
f_«me
иf_«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

130 
f_«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

132 
f_«me
##
	`_LHASH_DOALL_ARG
(*
ђg1
, *
ђg2
) { \

133 
o_ty≥
 
a
 = (o_ty≥)
ђg1
; \

134 
a_ty≥
 
b
 = (a_ty≥)
ђg2
; \

135 
	`f_«me
(
a
,
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
f_«me
иf_«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Ѓloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lяd
;

148 
down_lяd
;

149 
num_Щems
;

151 
num_exЈnds
;

152 
num_exЈnd_їЃlocs
;

153 
num_cЏМaщs
;

154 
num_cЏМaщ_їЃlocs
;

155 
num_hash_€ќs
;

156 
num_comp_€ќs
;

157 
num_Ъ£є
;

158 
num_їґaы
;

159 
num_dЦСe
;

160 
num_no_dЦСe
;

161 
num_їМЫve
;

162 
num_їМЫve_miss
;

163 
num_hash_comps
;

165 
Фr№
;

166 } 
	tLHASH
;

168 
	#LH_LOAD_MULT
 256

	)

172 
	#lh_Фr№
(
lh
и(÷h)->
Фr№
)

	)

174 
LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

175 
lh_дУ
(
LHASH
 *
lh
);

176 *
lh_Ъ£є
(
LHASH
 *
lh
, *
d©a
);

177 *
lh_dЦСe
(
LHASH
 *
lh
, cЏ° *
d©a
);

178 *
lh_їМЫve
(
LHASH
 *
lh
, cЏ° *
d©a
);

179 
lh_dяќ
(
LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

180 
lh_dяќ_ђg
(
LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
ђg
);

181 
lh_°rhash
(cЏ° *
c
);

182 
lh_num_Щems
(cЏ° 
LHASH
 *
lh
);

184 #iвdeа
OPENSSL_NO_FP_API


185 
lh_°©s
(cЏ° 
LHASH
 *
lh
, 
FILE
 *
out
);

186 
lh_node_°©s
(cЏ° 
LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_uІge_°©s
(cЏ° 
LHASH
 *
lh
, 
FILE
 *
out
);

190 #iвdeа
OPENSSL_NO_BIO


191 
lh_°©s_bio
(cЏ° 
LHASH
 *
lh
, 
BIO
 *
out
);

192 
lh_node_°©s_bio
(cЏ° 
LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_uІge_°©s_bio
(cЏ° 
LHASH
 *
lh
, 
BIO
 *
out
);

195 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ossl_typ.h

55 #iвdeа
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<ЁТs¶/e_os2.h
>

60 #ifdeа
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
aҐ1_°rЪg_°
 
	tASN1_INTEGER
;

80 
aҐ1_°rЪg_°
 
	tASN1_ENUMERATED
;

81 
aҐ1_°rЪg_°
 
	tASN1_BIT_STRING
;

82 
aҐ1_°rЪg_°
 
	tASN1_OCTET_STRING
;

83 
aҐ1_°rЪg_°
 
	tASN1_PRINTABLESTRING
;

84 
aҐ1_°rЪg_°
 
	tASN1_T61STRING
;

85 
aҐ1_°rЪg_°
 
	tASN1_IA5STRING
;

86 
aҐ1_°rЪg_°
 
	tASN1_GENERALSTRING
;

87 
aҐ1_°rЪg_°
 
	tASN1_UNIVERSALSTRING
;

88 
aҐ1_°rЪg_°
 
	tASN1_BMPSTRING
;

89 
aҐ1_°rЪg_°
 
	tASN1_UTCTIME
;

90 
aҐ1_°rЪg_°
 
	tASN1_TIME
;

91 
aҐ1_°rЪg_°
 
	tASN1_GENERALIZEDTIME
;

92 
aҐ1_°rЪg_°
 
	tASN1_VISIBLESTRING
;

93 
aҐ1_°rЪg_°
 
	tASN1_UTF8STRING
;

94 
	tASN1_BOOLEAN
;

95 
	tASN1_NULL
;

98 #ifdeа
OPENSSL_SYS_WIN32


99 #undeа
X509_NAME


100 #undeа
X509_CERT_PAIR


101 #undeа
PKCS7_ISSUER_AND_SERIAL


104 #ifdeа
BIGNUM


105 #undeа
BIGNUM


107 
bignum_°
 
	tBIGNUM
;

108 
bignum_щx
 
	tBN_CTX
;

109 
bn_blЪdЪg_°
 
	tBN_BLINDING
;

110 
bn_mЏt_щx_°
 
	tBN_MONT_CTX
;

111 
bn_їэ_щx_°
 
	tBN_RECP_CTX
;

112 
bn_gТcb_°
 
	tBN_GENCB
;

114 
buf_mem_°
 
	tBUF_MEM
;

116 
evp_cЭhФ_°
 
	tEVP_CIPHER
;

117 
evp_cЭhФ_щx_°
 
	tEVP_CIPHER_CTX
;

118 
Тv_md_°
 
	tEVP_MD
;

119 
Тv_md_щx_°
 
	tEVP_MD_CTX
;

120 
evp_pkey_°
 
	tEVP_PKEY
;

122 
dh_°
 
	tDH
;

123 
dh_mСhod
 
	tDH_METHOD
;

125 
dІ_°
 
	tDSA
;

126 
dІ_mСhod
 
	tDSA_METHOD
;

128 
rІ_°
 
	tRSA
;

129 
rІ_mСh_°
 
	tRSA_METHOD
;

131 
њnd_mСh_°
 
	tRAND_METHOD
;

133 
ecdh_mСhod
 
	tECDH_METHOD
;

134 
ecdІ_mСhod
 
	tECDSA_METHOD
;

136 
x509_°
 
	tX509
;

137 
X509_Ѓg№_°
 
	tX509_ALGOR
;

138 
X509_ьl_°
 
	tX509_CRL
;

139 
X509_«me_°
 
	tX509_NAME
;

140 
x509_°№e_°
 
	tX509_STORE
;

141 
x509_°№e_щx_°
 
	tX509_STORE_CTX
;

143 
v3_ext_щx
 
	tX509V3_CTX
;

144 
cЏf_°
 
	tCONF
;

146 
°№e_°
 
	tSTORE
;

147 
°№e_mСhod_°
 
	tSTORE_METHOD
;

149 
ui_°
 
	tUI
;

150 
ui_mСhod_°
 
	tUI_METHOD
;

152 
°_ERR_FNS
 
	tERR_FNS
;

154 
ТgЪe_°
 
	tENGINE
;

156 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

157 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

158 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

159 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

162 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
и

	)

163 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
и

	)

165 
ьy±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

167 
	tCRYPTO_EX_√w
(*
	tЈїЅ
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

168 
	tidx
, 
	tђgl
, *
	tђgp
);

169 
	tCRYPTO_EX_дУ
(*
	tЈїЅ
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

170 
	tidx
, 
	tђgl
, *
	tђgp
);

171 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	tдom
, *
	tдom_d
,

172 
	tidx
, 
	tђgl
, *
	tђgp
);

	@/usr/include/openssl/pem2.h

60 #ifdeа
__эlu•lus


64 #iвdeа
HEADER_PEM_H


65 
ERR_lяd_PEM_°rЪgs
();

68 #ifdeа
__эlu•lus


	@/usr/include/openssl/safestack.h

55 #iвdeа
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<ЁТs¶/°ack.h
>

60 #ifdeа
DEBUG_SAFESTACK


62 #iвdeа
CHECKED_PTR_OF


63 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

64 ((*и(1 ? 
p
 : (
ty≥
*)0))

	)

67 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

68 (((*)(*)и((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

70 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

72 ((1 ? 
p
 : ((*)(cЏ° 
ty≥
 * cЏ° *, cЏ°Бy≥ * cЏ° *))0)))

	)

74 
	#STACK_OF
(
ty≥
и
°ack_°_
##
	)
type

75 
	#PREDECLARE_STACK_OF
(
ty≥
и
	`STACK_OF
—y≥);

	)

77 
	#DECLARE_STACK_OF
(
ty≥
) \

78 
	`STACK_OF
(
ty≥
) \

80 
STACK
 
°ack
; \

81 };

	)

83 
	#IMPLEMENT_STACK_OF
(
ty≥
и

	)

87 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

88 ((
	`STACK_OF
(
ty≥
и*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

89 
	#SKM_sk_√w_nuќ
(
ty≥
) \

90 ((
	`STACK_OF
(
ty≥
и*)
	`sk_√w_nuќ
())

	)

91 
	#SKM_sk_дУ
(
ty≥
, 
°
) \

92 
	`sk_дУ
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

93 
	#SKM_sk_num
(
ty≥
, 
°
) \

94 
	`sk_num
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

95 
	#SKM_sk_vЃue
(
ty≥
, 
°
,
i
) \

96 ((
ty≥
 *)
	`sk_vЃue
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
))

	)

97 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vЃ
) \

98 
	`sk_£t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
i
, CHECKED_PTR_OF—y≥, 
vЃ
))

	)

99 
	#SKM_sk_zФo
(
ty≥
, 
°
) \

100 
	`sk_zФo
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

101 
	#SKM_sk_push
(
ty≥
, 
°
,
vЃ
) \

102 
	`sk_push
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vЃ
))

	)

103 
	#SKM_sk_unshiб
(
ty≥
, 
°
,
vЃ
) \

104 
	`sk_unshiб
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vЃ
))

	)

105 
	#SKM_sk_fЪd
(
ty≥
, 
°
,
vЃ
) \

106 
	`sk_fЪd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vЃ
))

	)

107 
	#SKM_sk_dЦСe
(
ty≥
, 
°
,
i
) \

108 (
ty≥
 *)
	`sk_dЦСe
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
)

	)

109 
	#SKM_sk_dЦСe_±r
(
ty≥
, 
°
,
±r
) \

110 (
ty≥
 *)
	`sk_dЦСe_±r
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), CHECKED_PTR_OF—y≥, 
±r
))

	)

111 
	#SKM_sk_Ъ£є
(
ty≥
, 
°
,
vЃ
,
i
) \

112 
	`sk_Ъ£є
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vЃ
), 
i
)

	)

113 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

114 (((*)(cЏ° 
ty≥
 * const *,constБype * const *)) \

115 
	`sk_£t_cmp_func
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

116 
	#SKM_sk_dup
(
ty≥
, 
°
) \

117 (
	`STACK_OF
(
ty≥
и*)
	`sk_dup
(
	`CHECKED_PTR_OF
(STACK_OF—y≥), 
°
))

	)

118 
	#SKM_sk_pЁ_дУ
(
ty≥
, 
°
,
дУ_func
) \

119 
	`sk_pЁ_дУ
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
дУ_func
))

	)

120 
	#SKM_sk_shiб
(
ty≥
, 
°
) \

121 (
ty≥
 *)
	`sk_shiб
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

122 
	#SKM_sk_pЁ
(
ty≥
, 
°
) \

123 (
ty≥
 *)
	`sk_pЁ
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

124 
	#SKM_sk_s№t
(
ty≥
, 
°
) \

125 
	`sk_s№t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

126 
	#SKM_sk_is_s№Лd
(
ty≥
, 
°
) \

127 
	`sk_is_s№Лd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

129 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

130 (
	`STACK_OF
(
ty≥
и*)
	`d2i_ASN1_SET
(
	`CHECKED_PTR_OF
(STACK_OF—y≥), 
°
), \

131 
µ
, 
Ћngth
, \

132 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

133 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
дУ_func
), \

134 
ex_Пg
, 
ex_юass
)

	)

136 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

137 
	`i2d_ASN1_SET
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
µ
, \

138 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

139 
ex_Пg
, 
ex_юass
, 
is_£t
)

	)

141 
	#SKM_ASN1_£q_Јck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Ћn
) \

142 
	`ASN1_£q_Јck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

143 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Ћn
)

	)

145 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

146 (
	`STACK_OF
(
ty≥
и*)
	`ASN1_£q_u≈ack
(
buf
, 
Ћn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
дУ_func
))

	)

148 
	#SKM_PKCS12_deьy±_d2i
(
ty≥
, 
Ѓg№
, 
d2i_func
, 
дУ_func
, 
Јss
, 
Јs¶Т
, 
oщ
, 
£q
) \

149 (
	`STACK_OF
(
ty≥
и*)
	`PKCS12_deьy±_d2i
(
Ѓg№
, \

150 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

151 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
дУ_func
), \

152 
Јss
, 
Јs¶Т
, 
oщ
, 
£q
)

	)

156 
	#STACK_OF
(
ty≥
и
STACK


	)

157 
	#PREDECLARE_STACK_OF
(
ty≥
и

	)

158 
	#DECLARE_STACK_OF
(
ty≥
и

	)

159 
	#IMPLEMENT_STACK_OF
(
ty≥
и

	)

161 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

162 
	`sk_√w
(((*)(cЏ° * cЏ° *, cЏ° * cЏ° *))(
cmp
))

	)

163 
	#SKM_sk_√w_nuќ
(
ty≥
) \

164 
	`sk_√w_nuќ
()

	)

165 
	#SKM_sk_дУ
(
ty≥
, 
°
) \

166 
	`sk_дУ
(
°
)

	)

167 
	#SKM_sk_num
(
ty≥
, 
°
) \

168 
	`sk_num
(
°
)

	)

169 
	#SKM_sk_vЃue
(
ty≥
, 
°
,
i
) \

170 ((
ty≥
 *)
	`sk_vЃue
(
°
, 
i
))

	)

171 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vЃ
) \

172 ((
ty≥
 *)
	`sk_£t
(
°
, 
i
,(*)
vЃ
))

	)

173 
	#SKM_sk_zФo
(
ty≥
, 
°
) \

174 
	`sk_zФo
(
°
)

	)

175 
	#SKM_sk_push
(
ty≥
, 
°
,
vЃ
) \

176 
	`sk_push
(
°
, (*)
vЃ
)

	)

177 
	#SKM_sk_unshiб
(
ty≥
, 
°
,
vЃ
) \

178 
	`sk_unshiб
(
°
, 
vЃ
)

	)

179 
	#SKM_sk_fЪd
(
ty≥
, 
°
,
vЃ
) \

180 
	`sk_fЪd
(
°
, (*)
vЃ
)

	)

181 
	#SKM_sk_dЦСe
(
ty≥
, 
°
,
i
) \

182 ((
ty≥
 *)
	`sk_dЦСe
(
°
, 
i
))

	)

183 
	#SKM_sk_dЦСe_±r
(
ty≥
, 
°
,
±r
) \

184 ((
ty≥
 *)
	`sk_dЦСe_±r
(
°
,(*)
±r
))

	)

185 
	#SKM_sk_Ъ£є
(
ty≥
, 
°
,
vЃ
,
i
) \

186 
	`sk_Ъ£є
(
°
, (*)
vЃ
, 
i
)

	)

187 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

188 (((*)(cЏ° 
ty≥
 * const *,constБype * const *)) \

189 
	`sk_£t_cmp_func
(
°
, ((*)(cЏ° * cЏ° *, cЏ° * cЏ° *))(
cmp
)))

	)

190 
	#SKM_sk_dup
(
ty≥
, 
°
) \

191 
	`sk_dup
(
°
)

	)

192 
	#SKM_sk_pЁ_дУ
(
ty≥
, 
°
,
дУ_func
) \

193 
	`sk_pЁ_дУ
(
°
, ((*)(*))
дУ_func
)

	)

194 
	#SKM_sk_shiб
(
ty≥
, 
°
) \

195 ((
ty≥
 *)
	`sk_shiб
(
°
))

	)

196 
	#SKM_sk_pЁ
(
ty≥
, 
°
) \

197 ((
ty≥
 *)
	`sk_pЁ
(
°
))

	)

198 
	#SKM_sk_s№t
(
ty≥
, 
°
) \

199 
	`sk_s№t
(
°
)

	)

200 
	#SKM_sk_is_s№Лd
(
ty≥
, 
°
) \

201 
	`sk_is_s№Лd
(
°
)

	)

203 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

204 
	`d2i_ASN1_SET
(
°
,
µ
,
Ћngth
, (*(*)(** ,cЏ° ** ,))
d2i_func
, ((*)(*))
дУ_func
, 
ex_Пg
,
ex_юass
)

	)

205 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

206 
	`i2d_ASN1_SET
(
°
,
µ
,((*)(*, **))
i2d_func
,
ex_Пg
,
ex_юass
,
is_£t
)

	)

208 
	#SKM_ASN1_£q_Јck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Ћn
) \

209 
	`ASN1_£q_Јck
(
°
, ((*)(*, **))
i2d_func
, 
buf
, 
Ћn
)

	)

210 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

211 
	`ASN1_£q_u≈ack
(
buf
,
Ћn
,(*(*)(**,cЏ° **,))
d2i_func
, ((*)(*))
дУ_func
)

	)

213 
	#SKM_PKCS12_deьy±_d2i
(
ty≥
, 
Ѓg№
, 
d2i_func
, 
дУ_func
, 
Јss
, 
Јs¶Т
, 
oщ
, 
£q
) \

214 ((
STACK
 *)
	`PKCS12_deьy±_d2i
(
Ѓg№
,(*(*)())
d2i_func
, ((*)(*))
дУ_func
,
Јss
,
Јs¶Т
,
oщ
,
£q
))

	)

219 
	#sk_ACCESS_DESCRIPTION_√w
(
°
и
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (°))

	)

220 
	#sk_ACCESS_DESCRIPTION_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ACCESS_DESCRIPTION
)

	)

221 
	#sk_ACCESS_DESCRIPTION_дУ
(
°
и
	`SKM_sk_дУ
(
ACCESS_DESCRIPTION
, (°))

	)

222 
	#sk_ACCESS_DESCRIPTION_num
(
°
и
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

223 
	#sk_ACCESS_DESCRIPTION_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

224 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vЃ))

	)

225 
	#sk_ACCESS_DESCRIPTION_zФo
(
°
и
	`SKM_sk_zФo
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vЃ))

	)

227 
	#sk_ACCESS_DESCRIPTION_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ACCESS_DESCRIPTION
, (°), (vЃ))

	)

228 
	#sk_ACCESS_DESCRIPTION_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ACCESS_DESCRIPTION
, (°), (vЃ))

	)

229 
	#sk_ACCESS_DESCRIPTION_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ACCESS_DESCRIPTION
, (°), (vЃ))

	)

230 
	#sk_ACCESS_DESCRIPTION_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

231 
	#sk_ACCESS_DESCRIPTION_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

232 
	#sk_ACCESS_DESCRIPTION_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ACCESS_DESCRIPTION
, (°), (vЃ), (i))

	)

233 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

234 
	#sk_ACCESS_DESCRIPTION_dup
(
°
и
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

235 
	#sk_ACCESS_DESCRIPTION_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ACCESS_DESCRIPTION
, (°), (дУ_func))

	)

236 
	#sk_ACCESS_DESCRIPTION_shiб
(
°
и
	`SKM_sk_shiб
(
ACCESS_DESCRIPTION
, (°))

	)

237 
	#sk_ACCESS_DESCRIPTION_pЁ
(
°
и
	`SKM_sk_pЁ
(
ACCESS_DESCRIPTION
, (°))

	)

238 
	#sk_ACCESS_DESCRIPTION_s№t
(
°
и
	`SKM_sk_s№t
(
ACCESS_DESCRIPTION
, (°))

	)

239 
	#sk_ACCESS_DESCRIPTION_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ACCESS_DESCRIPTION
, (°))

	)

241 
	#sk_ASIdOrR™ge_√w
(
°
и
	`SKM_sk_√w
(
ASIdOrR™ge
, (°))

	)

242 
	#sk_ASIdOrR™ge_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASIdOrR™ge
)

	)

243 
	#sk_ASIdOrR™ge_дУ
(
°
и
	`SKM_sk_дУ
(
ASIdOrR™ge
, (°))

	)

244 
	#sk_ASIdOrR™ge_num
(
°
и
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

245 
	#sk_ASIdOrR™ge_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASIdOrR™ge
, (°), (i))

	)

246 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vЃ))

	)

247 
	#sk_ASIdOrR™ge_zФo
(
°
и
	`SKM_sk_zФo
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vЃ))

	)

249 
	#sk_ASIdOrR™ge_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASIdOrR™ge
, (°), (vЃ))

	)

250 
	#sk_ASIdOrR™ge_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASIdOrR™ge
, (°), (vЃ))

	)

251 
	#sk_ASIdOrR™ge_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASIdOrR™ge
, (°), (vЃ))

	)

252 
	#sk_ASIdOrR™ge_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASIdOrR™ge
, (°), (i))

	)

253 
	#sk_ASIdOrR™ge_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

254 
	#sk_ASIdOrR™ge_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASIdOrR™ge
, (°), (vЃ), (i))

	)

255 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

256 
	#sk_ASIdOrR™ge_dup
(
°
и
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

257 
	#sk_ASIdOrR™ge_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASIdOrR™ge
, (°), (дУ_func))

	)

258 
	#sk_ASIdOrR™ge_shiб
(
°
и
	`SKM_sk_shiб
(
ASIdOrR™ge
, (°))

	)

259 
	#sk_ASIdOrR™ge_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASIdOrR™ge
, (°))

	)

260 
	#sk_ASIdOrR™ge_s№t
(
°
и
	`SKM_sk_s№t
(
ASIdOrR™ge
, (°))

	)

261 
	#sk_ASIdOrR™ge_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASIdOrR™ge
, (°))

	)

263 
	#sk_ASN1_GENERALSTRING_√w
(
°
и
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (°))

	)

264 
	#sk_ASN1_GENERALSTRING_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_GENERALSTRING
)

	)

265 
	#sk_ASN1_GENERALSTRING_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_GENERALSTRING
, (°))

	)

266 
	#sk_ASN1_GENERALSTRING_num
(
°
и
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

267 
	#sk_ASN1_GENERALSTRING_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_GENERALSTRING
, (°), (i))

	)

268 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vЃ))

	)

269 
	#sk_ASN1_GENERALSTRING_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vЃ))

	)

271 
	#sk_ASN1_GENERALSTRING_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_GENERALSTRING
, (°), (vЃ))

	)

272 
	#sk_ASN1_GENERALSTRING_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_GENERALSTRING
, (°), (vЃ))

	)

273 
	#sk_ASN1_GENERALSTRING_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_GENERALSTRING
, (°), (vЃ))

	)

274 
	#sk_ASN1_GENERALSTRING_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_GENERALSTRING
, (°), (i))

	)

275 
	#sk_ASN1_GENERALSTRING_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

276 
	#sk_ASN1_GENERALSTRING_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_GENERALSTRING
, (°), (vЃ), (i))

	)

277 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

278 
	#sk_ASN1_GENERALSTRING_dup
(
°
и
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

279 
	#sk_ASN1_GENERALSTRING_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_GENERALSTRING
, (°), (дУ_func))

	)

280 
	#sk_ASN1_GENERALSTRING_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_GENERALSTRING
, (°))

	)

281 
	#sk_ASN1_GENERALSTRING_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_GENERALSTRING
, (°))

	)

282 
	#sk_ASN1_GENERALSTRING_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_GENERALSTRING
, (°))

	)

283 
	#sk_ASN1_GENERALSTRING_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_GENERALSTRING
, (°))

	)

285 
	#sk_ASN1_INTEGER_√w
(
°
и
	`SKM_sk_√w
(
ASN1_INTEGER
, (°))

	)

286 
	#sk_ASN1_INTEGER_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_INTEGER
)

	)

287 
	#sk_ASN1_INTEGER_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_INTEGER
, (°))

	)

288 
	#sk_ASN1_INTEGER_num
(
°
и
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

289 
	#sk_ASN1_INTEGER_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_INTEGER
, (°), (i))

	)

290 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vЃ))

	)

291 
	#sk_ASN1_INTEGER_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vЃ))

	)

293 
	#sk_ASN1_INTEGER_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_INTEGER
, (°), (vЃ))

	)

294 
	#sk_ASN1_INTEGER_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_INTEGER
, (°), (vЃ))

	)

295 
	#sk_ASN1_INTEGER_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_INTEGER
, (°), (vЃ))

	)

296 
	#sk_ASN1_INTEGER_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_INTEGER
, (°), (i))

	)

297 
	#sk_ASN1_INTEGER_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

298 
	#sk_ASN1_INTEGER_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_INTEGER
, (°), (vЃ), (i))

	)

299 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

300 
	#sk_ASN1_INTEGER_dup
(
°
и
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

301 
	#sk_ASN1_INTEGER_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_INTEGER
, (°), (дУ_func))

	)

302 
	#sk_ASN1_INTEGER_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_INTEGER
, (°))

	)

303 
	#sk_ASN1_INTEGER_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_INTEGER
, (°))

	)

304 
	#sk_ASN1_INTEGER_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_INTEGER
, (°))

	)

305 
	#sk_ASN1_INTEGER_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_INTEGER
, (°))

	)

307 
	#sk_ASN1_OBJECT_√w
(
°
и
	`SKM_sk_√w
(
ASN1_OBJECT
, (°))

	)

308 
	#sk_ASN1_OBJECT_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_OBJECT
)

	)

309 
	#sk_ASN1_OBJECT_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_OBJECT
, (°))

	)

310 
	#sk_ASN1_OBJECT_num
(
°
и
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

311 
	#sk_ASN1_OBJECT_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_OBJECT
, (°), (i))

	)

312 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vЃ))

	)

313 
	#sk_ASN1_OBJECT_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vЃ))

	)

315 
	#sk_ASN1_OBJECT_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_OBJECT
, (°), (vЃ))

	)

316 
	#sk_ASN1_OBJECT_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_OBJECT
, (°), (vЃ))

	)

317 
	#sk_ASN1_OBJECT_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_OBJECT
, (°), (vЃ))

	)

318 
	#sk_ASN1_OBJECT_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_OBJECT
, (°), (i))

	)

319 
	#sk_ASN1_OBJECT_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

320 
	#sk_ASN1_OBJECT_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_OBJECT
, (°), (vЃ), (i))

	)

321 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

322 
	#sk_ASN1_OBJECT_dup
(
°
и
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

323 
	#sk_ASN1_OBJECT_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_OBJECT
, (°), (дУ_func))

	)

324 
	#sk_ASN1_OBJECT_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_OBJECT
, (°))

	)

325 
	#sk_ASN1_OBJECT_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_OBJECT
, (°))

	)

326 
	#sk_ASN1_OBJECT_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_OBJECT
, (°))

	)

327 
	#sk_ASN1_OBJECT_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_OBJECT
, (°))

	)

329 
	#sk_ASN1_STRING_TABLE_√w
(
°
и
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (°))

	)

330 
	#sk_ASN1_STRING_TABLE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_STRING_TABLE
)

	)

331 
	#sk_ASN1_STRING_TABLE_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_STRING_TABLE
, (°))

	)

332 
	#sk_ASN1_STRING_TABLE_num
(
°
и
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

333 
	#sk_ASN1_STRING_TABLE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_STRING_TABLE
, (°), (i))

	)

334 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vЃ))

	)

335 
	#sk_ASN1_STRING_TABLE_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vЃ))

	)

337 
	#sk_ASN1_STRING_TABLE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_STRING_TABLE
, (°), (vЃ))

	)

338 
	#sk_ASN1_STRING_TABLE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_STRING_TABLE
, (°), (vЃ))

	)

339 
	#sk_ASN1_STRING_TABLE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_STRING_TABLE
, (°), (vЃ))

	)

340 
	#sk_ASN1_STRING_TABLE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_STRING_TABLE
, (°), (i))

	)

341 
	#sk_ASN1_STRING_TABLE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

342 
	#sk_ASN1_STRING_TABLE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_STRING_TABLE
, (°), (vЃ), (i))

	)

343 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

344 
	#sk_ASN1_STRING_TABLE_dup
(
°
и
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

345 
	#sk_ASN1_STRING_TABLE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_STRING_TABLE
, (°), (дУ_func))

	)

346 
	#sk_ASN1_STRING_TABLE_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_STRING_TABLE
, (°))

	)

347 
	#sk_ASN1_STRING_TABLE_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_STRING_TABLE
, (°))

	)

348 
	#sk_ASN1_STRING_TABLE_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_STRING_TABLE
, (°))

	)

349 
	#sk_ASN1_STRING_TABLE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_STRING_TABLE
, (°))

	)

351 
	#sk_ASN1_TYPE_√w
(
°
и
	`SKM_sk_√w
(
ASN1_TYPE
, (°))

	)

352 
	#sk_ASN1_TYPE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_TYPE
)

	)

353 
	#sk_ASN1_TYPE_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_TYPE
, (°))

	)

354 
	#sk_ASN1_TYPE_num
(
°
и
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

355 
	#sk_ASN1_TYPE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_TYPE
, (°), (i))

	)

356 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vЃ))

	)

357 
	#sk_ASN1_TYPE_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vЃ))

	)

359 
	#sk_ASN1_TYPE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_TYPE
, (°), (vЃ))

	)

360 
	#sk_ASN1_TYPE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_TYPE
, (°), (vЃ))

	)

361 
	#sk_ASN1_TYPE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_TYPE
, (°), (vЃ))

	)

362 
	#sk_ASN1_TYPE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_TYPE
, (°), (i))

	)

363 
	#sk_ASN1_TYPE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_TYPE
, (°), (±r))

	)

364 
	#sk_ASN1_TYPE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_TYPE
, (°), (vЃ), (i))

	)

365 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

366 
	#sk_ASN1_TYPE_dup
(
°
и
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

367 
	#sk_ASN1_TYPE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_TYPE
, (°), (дУ_func))

	)

368 
	#sk_ASN1_TYPE_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_TYPE
, (°))

	)

369 
	#sk_ASN1_TYPE_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_TYPE
, (°))

	)

370 
	#sk_ASN1_TYPE_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_TYPE
, (°))

	)

371 
	#sk_ASN1_TYPE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_TYPE
, (°))

	)

373 
	#sk_ASN1_VALUE_√w
(
°
и
	`SKM_sk_√w
(
ASN1_VALUE
, (°))

	)

374 
	#sk_ASN1_VALUE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ASN1_VALUE
)

	)

375 
	#sk_ASN1_VALUE_дУ
(
°
и
	`SKM_sk_дУ
(
ASN1_VALUE
, (°))

	)

376 
	#sk_ASN1_VALUE_num
(
°
и
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

377 
	#sk_ASN1_VALUE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ASN1_VALUE
, (°), (i))

	)

378 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vЃ))

	)

379 
	#sk_ASN1_VALUE_zФo
(
°
и
	`SKM_sk_zФo
(
ASN1_VALUE
, (°))

	)

380 
	#sk_ASN1_VALUE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vЃ))

	)

381 
	#sk_ASN1_VALUE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ASN1_VALUE
, (°), (vЃ))

	)

382 
	#sk_ASN1_VALUE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ASN1_VALUE
, (°), (vЃ))

	)

383 
	#sk_ASN1_VALUE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ASN1_VALUE
, (°), (vЃ))

	)

384 
	#sk_ASN1_VALUE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ASN1_VALUE
, (°), (i))

	)

385 
	#sk_ASN1_VALUE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ASN1_VALUE
, (°), (±r))

	)

386 
	#sk_ASN1_VALUE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ASN1_VALUE
, (°), (vЃ), (i))

	)

387 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

388 
	#sk_ASN1_VALUE_dup
(
°
и
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

389 
	#sk_ASN1_VALUE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ASN1_VALUE
, (°), (дУ_func))

	)

390 
	#sk_ASN1_VALUE_shiб
(
°
и
	`SKM_sk_shiб
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_pЁ
(
°
и
	`SKM_sk_pЁ
(
ASN1_VALUE
, (°))

	)

392 
	#sk_ASN1_VALUE_s№t
(
°
и
	`SKM_sk_s№t
(
ASN1_VALUE
, (°))

	)

393 
	#sk_ASN1_VALUE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ASN1_VALUE
, (°))

	)

395 
	#sk_BIO_√w
(
°
и
	`SKM_sk_√w
(
BIO
, (°))

	)

396 
	#sk_BIO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
BIO
)

	)

397 
	#sk_BIO_дУ
(
°
и
	`SKM_sk_дУ
(
BIO
, (°))

	)

398 
	#sk_BIO_num
(
°
и
	`SKM_sk_num
(
BIO
, (°))

	)

399 
	#sk_BIO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
BIO
, (°), (i))

	)

400 
	#sk_BIO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
BIO
, (°), (i), (vЃ))

	)

401 
	#sk_BIO_zФo
(
°
и
	`SKM_sk_zФo
(
BIO
, (°))

	)

402 
	#sk_BIO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
BIO
, (°), (vЃ))

	)

403 
	#sk_BIO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
BIO
, (°), (vЃ))

	)

404 
	#sk_BIO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
BIO
, (°), (vЃ))

	)

405 
	#sk_BIO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
BIO
, (°), (vЃ))

	)

406 
	#sk_BIO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
BIO
, (°), (i))

	)

407 
	#sk_BIO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
BIO
, (°), (±r))

	)

408 
	#sk_BIO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
BIO
, (°), (vЃ), (i))

	)

409 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

410 
	#sk_BIO_dup
(
°
и
	`SKM_sk_dup
(
BIO
, st)

	)

411 
	#sk_BIO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
BIO
, (°), (дУ_func))

	)

412 
	#sk_BIO_shiб
(
°
и
	`SKM_sk_shiб
(
BIO
, (°))

	)

413 
	#sk_BIO_pЁ
(
°
и
	`SKM_sk_pЁ
(
BIO
, (°))

	)

414 
	#sk_BIO_s№t
(
°
и
	`SKM_sk_s№t
(
BIO
, (°))

	)

415 
	#sk_BIO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
BIO
, (°))

	)

417 
	#sk_CONF_IMODULE_√w
(
°
и
	`SKM_sk_√w
(
CONF_IMODULE
, (°))

	)

418 
	#sk_CONF_IMODULE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
CONF_IMODULE
)

	)

419 
	#sk_CONF_IMODULE_дУ
(
°
и
	`SKM_sk_дУ
(
CONF_IMODULE
, (°))

	)

420 
	#sk_CONF_IMODULE_num
(
°
и
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

421 
	#sk_CONF_IMODULE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
CONF_IMODULE
, (°), (i))

	)

422 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vЃ))

	)

423 
	#sk_CONF_IMODULE_zФo
(
°
и
	`SKM_sk_zФo
(
CONF_IMODULE
, (°))

	)

424 
	#sk_CONF_IMODULE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vЃ))

	)

425 
	#sk_CONF_IMODULE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
CONF_IMODULE
, (°), (vЃ))

	)

426 
	#sk_CONF_IMODULE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
CONF_IMODULE
, (°), (vЃ))

	)

427 
	#sk_CONF_IMODULE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
CONF_IMODULE
, (°), (vЃ))

	)

428 
	#sk_CONF_IMODULE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
CONF_IMODULE
, (°), (i))

	)

429 
	#sk_CONF_IMODULE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
CONF_IMODULE
, (°), (±r))

	)

430 
	#sk_CONF_IMODULE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
CONF_IMODULE
, (°), (vЃ), (i))

	)

431 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

432 
	#sk_CONF_IMODULE_dup
(
°
и
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

433 
	#sk_CONF_IMODULE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
CONF_IMODULE
, (°), (дУ_func))

	)

434 
	#sk_CONF_IMODULE_shiб
(
°
и
	`SKM_sk_shiб
(
CONF_IMODULE
, (°))

	)

435 
	#sk_CONF_IMODULE_pЁ
(
°
и
	`SKM_sk_pЁ
(
CONF_IMODULE
, (°))

	)

436 
	#sk_CONF_IMODULE_s№t
(
°
и
	`SKM_sk_s№t
(
CONF_IMODULE
, (°))

	)

437 
	#sk_CONF_IMODULE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
CONF_IMODULE
, (°))

	)

439 
	#sk_CONF_MODULE_√w
(
°
и
	`SKM_sk_√w
(
CONF_MODULE
, (°))

	)

440 
	#sk_CONF_MODULE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
CONF_MODULE
)

	)

441 
	#sk_CONF_MODULE_дУ
(
°
и
	`SKM_sk_дУ
(
CONF_MODULE
, (°))

	)

442 
	#sk_CONF_MODULE_num
(
°
и
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

443 
	#sk_CONF_MODULE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
CONF_MODULE
, (°), (i))

	)

444 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vЃ))

	)

445 
	#sk_CONF_MODULE_zФo
(
°
и
	`SKM_sk_zФo
(
CONF_MODULE
, (°))

	)

446 
	#sk_CONF_MODULE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
CONF_MODULE
, (°), (vЃ))

	)

447 
	#sk_CONF_MODULE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
CONF_MODULE
, (°), (vЃ))

	)

448 
	#sk_CONF_MODULE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
CONF_MODULE
, (°), (vЃ))

	)

449 
	#sk_CONF_MODULE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
CONF_MODULE
, (°), (vЃ))

	)

450 
	#sk_CONF_MODULE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
CONF_MODULE
, (°), (i))

	)

451 
	#sk_CONF_MODULE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
CONF_MODULE
, (°), (±r))

	)

452 
	#sk_CONF_MODULE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
CONF_MODULE
, (°), (vЃ), (i))

	)

453 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

454 
	#sk_CONF_MODULE_dup
(
°
и
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

455 
	#sk_CONF_MODULE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
CONF_MODULE
, (°), (дУ_func))

	)

456 
	#sk_CONF_MODULE_shiб
(
°
и
	`SKM_sk_shiб
(
CONF_MODULE
, (°))

	)

457 
	#sk_CONF_MODULE_pЁ
(
°
и
	`SKM_sk_pЁ
(
CONF_MODULE
, (°))

	)

458 
	#sk_CONF_MODULE_s№t
(
°
и
	`SKM_sk_s№t
(
CONF_MODULE
, (°))

	)

459 
	#sk_CONF_MODULE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
CONF_MODULE
, (°))

	)

461 
	#sk_CONF_VALUE_√w
(
°
и
	`SKM_sk_√w
(
CONF_VALUE
, (°))

	)

462 
	#sk_CONF_VALUE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
CONF_VALUE
)

	)

463 
	#sk_CONF_VALUE_дУ
(
°
и
	`SKM_sk_дУ
(
CONF_VALUE
, (°))

	)

464 
	#sk_CONF_VALUE_num
(
°
и
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

465 
	#sk_CONF_VALUE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
CONF_VALUE
, (°), (i))

	)

466 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vЃ))

	)

467 
	#sk_CONF_VALUE_zФo
(
°
и
	`SKM_sk_zФo
(
CONF_VALUE
, (°))

	)

468 
	#sk_CONF_VALUE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
CONF_VALUE
, (°), (vЃ))

	)

469 
	#sk_CONF_VALUE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
CONF_VALUE
, (°), (vЃ))

	)

470 
	#sk_CONF_VALUE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
CONF_VALUE
, (°), (vЃ))

	)

471 
	#sk_CONF_VALUE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
CONF_VALUE
, (°), (vЃ))

	)

472 
	#sk_CONF_VALUE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
CONF_VALUE
, (°), (i))

	)

473 
	#sk_CONF_VALUE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
CONF_VALUE
, (°), (±r))

	)

474 
	#sk_CONF_VALUE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
CONF_VALUE
, (°), (vЃ), (i))

	)

475 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

476 
	#sk_CONF_VALUE_dup
(
°
и
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

477 
	#sk_CONF_VALUE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
CONF_VALUE
, (°), (дУ_func))

	)

478 
	#sk_CONF_VALUE_shiб
(
°
и
	`SKM_sk_shiб
(
CONF_VALUE
, (°))

	)

479 
	#sk_CONF_VALUE_pЁ
(
°
и
	`SKM_sk_pЁ
(
CONF_VALUE
, (°))

	)

480 
	#sk_CONF_VALUE_s№t
(
°
и
	`SKM_sk_s№t
(
CONF_VALUE
, (°))

	)

481 
	#sk_CONF_VALUE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
CONF_VALUE
, (°))

	)

483 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
°
и
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

484 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
CRYPTO_EX_DATA_FUNCS
)

	)

485 
	#sk_CRYPTO_EX_DATA_FUNCS_дУ
(
°
и
	`SKM_sk_дУ
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

486 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
и
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

487 
	#sk_CRYPTO_EX_DATA_FUNCS_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

488 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vЃ))

	)

489 
	#sk_CRYPTO_EX_DATA_FUNCS_zФo
(
°
и
	`SKM_sk_zФo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

490 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vЃ))

	)

491 
	#sk_CRYPTO_EX_DATA_FUNCS_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
CRYPTO_EX_DATA_FUNCS
, (°), (vЃ))

	)

492 
	#sk_CRYPTO_EX_DATA_FUNCS_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vЃ))

	)

493 
	#sk_CRYPTO_EX_DATA_FUNCS_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vЃ))

	)

494 
	#sk_CRYPTO_EX_DATA_FUNCS_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

495 
	#sk_CRYPTO_EX_DATA_FUNCS_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

496 
	#sk_CRYPTO_EX_DATA_FUNCS_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
CRYPTO_EX_DATA_FUNCS
, (°), (vЃ), (i))

	)

497 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

498 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
и
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

499 
	#sk_CRYPTO_EX_DATA_FUNCS_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
CRYPTO_EX_DATA_FUNCS
, (°), (дУ_func))

	)

500 
	#sk_CRYPTO_EX_DATA_FUNCS_shiб
(
°
и
	`SKM_sk_shiб
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

501 
	#sk_CRYPTO_EX_DATA_FUNCS_pЁ
(
°
и
	`SKM_sk_pЁ
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

502 
	#sk_CRYPTO_EX_DATA_FUNCS_s№t
(
°
и
	`SKM_sk_s№t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

503 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

505 
	#sk_CRYPTO_dy∆ock_√w
(
°
и
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (°))

	)

506 
	#sk_CRYPTO_dy∆ock_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
CRYPTO_dy∆ock
)

	)

507 
	#sk_CRYPTO_dy∆ock_дУ
(
°
и
	`SKM_sk_дУ
(
CRYPTO_dy∆ock
, (°))

	)

508 
	#sk_CRYPTO_dy∆ock_num
(
°
и
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

509 
	#sk_CRYPTO_dy∆ock_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
CRYPTO_dy∆ock
, (°), (i))

	)

510 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vЃ))

	)

511 
	#sk_CRYPTO_dy∆ock_zФo
(
°
и
	`SKM_sk_zФo
(
CRYPTO_dy∆ock
, (°))

	)

512 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vЃ))

	)

513 
	#sk_CRYPTO_dy∆ock_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
CRYPTO_dy∆ock
, (°), (vЃ))

	)

514 
	#sk_CRYPTO_dy∆ock_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
CRYPTO_dy∆ock
, (°), (vЃ))

	)

515 
	#sk_CRYPTO_dy∆ock_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
CRYPTO_dy∆ock
, (°), (vЃ))

	)

516 
	#sk_CRYPTO_dy∆ock_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
CRYPTO_dy∆ock
, (°), (i))

	)

517 
	#sk_CRYPTO_dy∆ock_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

518 
	#sk_CRYPTO_dy∆ock_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
CRYPTO_dy∆ock
, (°), (vЃ), (i))

	)

519 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

520 
	#sk_CRYPTO_dy∆ock_dup
(
°
и
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

521 
	#sk_CRYPTO_dy∆ock_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
CRYPTO_dy∆ock
, (°), (дУ_func))

	)

522 
	#sk_CRYPTO_dy∆ock_shiб
(
°
и
	`SKM_sk_shiб
(
CRYPTO_dy∆ock
, (°))

	)

523 
	#sk_CRYPTO_dy∆ock_pЁ
(
°
и
	`SKM_sk_pЁ
(
CRYPTO_dy∆ock
, (°))

	)

524 
	#sk_CRYPTO_dy∆ock_s№t
(
°
и
	`SKM_sk_s№t
(
CRYPTO_dy∆ock
, (°))

	)

525 
	#sk_CRYPTO_dy∆ock_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
CRYPTO_dy∆ock
, (°))

	)

527 
	#sk_DIST_POINT_√w
(
°
и
	`SKM_sk_√w
(
DIST_POINT
, (°))

	)

528 
	#sk_DIST_POINT_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
DIST_POINT
)

	)

529 
	#sk_DIST_POINT_дУ
(
°
и
	`SKM_sk_дУ
(
DIST_POINT
, (°))

	)

530 
	#sk_DIST_POINT_num
(
°
и
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

531 
	#sk_DIST_POINT_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
DIST_POINT
, (°), (i))

	)

532 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vЃ))

	)

533 
	#sk_DIST_POINT_zФo
(
°
и
	`SKM_sk_zФo
(
DIST_POINT
, (°))

	)

534 
	#sk_DIST_POINT_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
DIST_POINT
, (°), (vЃ))

	)

535 
	#sk_DIST_POINT_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
DIST_POINT
, (°), (vЃ))

	)

536 
	#sk_DIST_POINT_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
DIST_POINT
, (°), (vЃ))

	)

537 
	#sk_DIST_POINT_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
DIST_POINT
, (°), (vЃ))

	)

538 
	#sk_DIST_POINT_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
DIST_POINT
, (°), (i))

	)

539 
	#sk_DIST_POINT_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
DIST_POINT
, (°), (±r))

	)

540 
	#sk_DIST_POINT_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
DIST_POINT
, (°), (vЃ), (i))

	)

541 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

542 
	#sk_DIST_POINT_dup
(
°
и
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

543 
	#sk_DIST_POINT_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
DIST_POINT
, (°), (дУ_func))

	)

544 
	#sk_DIST_POINT_shiб
(
°
и
	`SKM_sk_shiб
(
DIST_POINT
, (°))

	)

545 
	#sk_DIST_POINT_pЁ
(
°
и
	`SKM_sk_pЁ
(
DIST_POINT
, (°))

	)

546 
	#sk_DIST_POINT_s№t
(
°
и
	`SKM_sk_s№t
(
DIST_POINT
, (°))

	)

547 
	#sk_DIST_POINT_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
DIST_POINT
, (°))

	)

549 
	#sk_ENGINE_√w
(
°
и
	`SKM_sk_√w
(
ENGINE
, (°))

	)

550 
	#sk_ENGINE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ENGINE
)

	)

551 
	#sk_ENGINE_дУ
(
°
и
	`SKM_sk_дУ
(
ENGINE
, (°))

	)

552 
	#sk_ENGINE_num
(
°
и
	`SKM_sk_num
(
ENGINE
, (°))

	)

553 
	#sk_ENGINE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ENGINE
, (°), (i))

	)

554 
	#sk_ENGINE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vЃ))

	)

555 
	#sk_ENGINE_zФo
(
°
и
	`SKM_sk_zФo
(
ENGINE
, (°))

	)

556 
	#sk_ENGINE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ENGINE
, (°), (vЃ))

	)

557 
	#sk_ENGINE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ENGINE
, (°), (vЃ))

	)

558 
	#sk_ENGINE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ENGINE
, (°), (vЃ))

	)

559 
	#sk_ENGINE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ENGINE
, (°), (vЃ))

	)

560 
	#sk_ENGINE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ENGINE
, (°), (i))

	)

561 
	#sk_ENGINE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ENGINE
, (°), (±r))

	)

562 
	#sk_ENGINE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ENGINE
, (°), (vЃ), (i))

	)

563 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

564 
	#sk_ENGINE_dup
(
°
и
	`SKM_sk_dup
(
ENGINE
, st)

	)

565 
	#sk_ENGINE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ENGINE
, (°), (дУ_func))

	)

566 
	#sk_ENGINE_shiб
(
°
и
	`SKM_sk_shiб
(
ENGINE
, (°))

	)

567 
	#sk_ENGINE_pЁ
(
°
и
	`SKM_sk_pЁ
(
ENGINE
, (°))

	)

568 
	#sk_ENGINE_s№t
(
°
и
	`SKM_sk_s№t
(
ENGINE
, (°))

	)

569 
	#sk_ENGINE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ENGINE
, (°))

	)

571 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
°
и
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (°))

	)

572 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
ENGINE_CLEANUP_ITEM
)

	)

573 
	#sk_ENGINE_CLEANUP_ITEM_дУ
(
°
и
	`SKM_sk_дУ
(
ENGINE_CLEANUP_ITEM
, (°))

	)

574 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
и
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

575 
	#sk_ENGINE_CLEANUP_ITEM_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

576 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vЃ))

	)

577 
	#sk_ENGINE_CLEANUP_ITEM_zФo
(
°
и
	`SKM_sk_zФo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

578 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vЃ))

	)

579 
	#sk_ENGINE_CLEANUP_ITEM_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
ENGINE_CLEANUP_ITEM
, (°), (vЃ))

	)

580 
	#sk_ENGINE_CLEANUP_ITEM_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
ENGINE_CLEANUP_ITEM
, (°), (vЃ))

	)

581 
	#sk_ENGINE_CLEANUP_ITEM_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vЃ))

	)

582 
	#sk_ENGINE_CLEANUP_ITEM_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

583 
	#sk_ENGINE_CLEANUP_ITEM_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

584 
	#sk_ENGINE_CLEANUP_ITEM_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
ENGINE_CLEANUP_ITEM
, (°), (vЃ), (i))

	)

585 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

586 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
и
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

587 
	#sk_ENGINE_CLEANUP_ITEM_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
ENGINE_CLEANUP_ITEM
, (°), (дУ_func))

	)

588 
	#sk_ENGINE_CLEANUP_ITEM_shiб
(
°
и
	`SKM_sk_shiб
(
ENGINE_CLEANUP_ITEM
, (°))

	)

589 
	#sk_ENGINE_CLEANUP_ITEM_pЁ
(
°
и
	`SKM_sk_pЁ
(
ENGINE_CLEANUP_ITEM
, (°))

	)

590 
	#sk_ENGINE_CLEANUP_ITEM_s№t
(
°
и
	`SKM_sk_s№t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

591 
	#sk_ENGINE_CLEANUP_ITEM_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

593 
	#sk_GENERAL_NAME_√w
(
°
и
	`SKM_sk_√w
(
GENERAL_NAME
, (°))

	)

594 
	#sk_GENERAL_NAME_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
GENERAL_NAME
)

	)

595 
	#sk_GENERAL_NAME_дУ
(
°
и
	`SKM_sk_дУ
(
GENERAL_NAME
, (°))

	)

596 
	#sk_GENERAL_NAME_num
(
°
и
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

597 
	#sk_GENERAL_NAME_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
GENERAL_NAME
, (°), (i))

	)

598 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vЃ))

	)

599 
	#sk_GENERAL_NAME_zФo
(
°
и
	`SKM_sk_zФo
(
GENERAL_NAME
, (°))

	)

600 
	#sk_GENERAL_NAME_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vЃ))

	)

601 
	#sk_GENERAL_NAME_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
GENERAL_NAME
, (°), (vЃ))

	)

602 
	#sk_GENERAL_NAME_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
GENERAL_NAME
, (°), (vЃ))

	)

603 
	#sk_GENERAL_NAME_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
GENERAL_NAME
, (°), (vЃ))

	)

604 
	#sk_GENERAL_NAME_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
GENERAL_NAME
, (°), (i))

	)

605 
	#sk_GENERAL_NAME_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
GENERAL_NAME
, (°), (±r))

	)

606 
	#sk_GENERAL_NAME_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
GENERAL_NAME
, (°), (vЃ), (i))

	)

607 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

608 
	#sk_GENERAL_NAME_dup
(
°
и
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

609 
	#sk_GENERAL_NAME_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
GENERAL_NAME
, (°), (дУ_func))

	)

610 
	#sk_GENERAL_NAME_shiб
(
°
и
	`SKM_sk_shiб
(
GENERAL_NAME
, (°))

	)

611 
	#sk_GENERAL_NAME_pЁ
(
°
и
	`SKM_sk_pЁ
(
GENERAL_NAME
, (°))

	)

612 
	#sk_GENERAL_NAME_s№t
(
°
и
	`SKM_sk_s№t
(
GENERAL_NAME
, (°))

	)

613 
	#sk_GENERAL_NAME_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
GENERAL_NAME
, (°))

	)

615 
	#sk_GENERAL_SUBTREE_√w
(
°
и
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (°))

	)

616 
	#sk_GENERAL_SUBTREE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
GENERAL_SUBTREE
)

	)

617 
	#sk_GENERAL_SUBTREE_дУ
(
°
и
	`SKM_sk_дУ
(
GENERAL_SUBTREE
, (°))

	)

618 
	#sk_GENERAL_SUBTREE_num
(
°
и
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

619 
	#sk_GENERAL_SUBTREE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
GENERAL_SUBTREE
, (°), (i))

	)

620 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vЃ))

	)

621 
	#sk_GENERAL_SUBTREE_zФo
(
°
и
	`SKM_sk_zФo
(
GENERAL_SUBTREE
, (°))

	)

622 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vЃ))

	)

623 
	#sk_GENERAL_SUBTREE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
GENERAL_SUBTREE
, (°), (vЃ))

	)

624 
	#sk_GENERAL_SUBTREE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
GENERAL_SUBTREE
, (°), (vЃ))

	)

625 
	#sk_GENERAL_SUBTREE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
GENERAL_SUBTREE
, (°), (vЃ))

	)

626 
	#sk_GENERAL_SUBTREE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
GENERAL_SUBTREE
, (°), (i))

	)

627 
	#sk_GENERAL_SUBTREE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

628 
	#sk_GENERAL_SUBTREE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
GENERAL_SUBTREE
, (°), (vЃ), (i))

	)

629 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

630 
	#sk_GENERAL_SUBTREE_dup
(
°
и
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

631 
	#sk_GENERAL_SUBTREE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
GENERAL_SUBTREE
, (°), (дУ_func))

	)

632 
	#sk_GENERAL_SUBTREE_shiб
(
°
и
	`SKM_sk_shiб
(
GENERAL_SUBTREE
, (°))

	)

633 
	#sk_GENERAL_SUBTREE_pЁ
(
°
и
	`SKM_sk_pЁ
(
GENERAL_SUBTREE
, (°))

	)

634 
	#sk_GENERAL_SUBTREE_s№t
(
°
и
	`SKM_sk_s№t
(
GENERAL_SUBTREE
, (°))

	)

635 
	#sk_GENERAL_SUBTREE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
GENERAL_SUBTREE
, (°))

	)

637 
	#sk_IPAddїssFamЮy_√w
(
°
и
	`SKM_sk_√w
(
IPAddїssFamЮy
, (°))

	)

638 
	#sk_IPAddїssFamЮy_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
IPAddїssFamЮy
)

	)

639 
	#sk_IPAddїssFamЮy_дУ
(
°
и
	`SKM_sk_дУ
(
IPAddїssFamЮy
, (°))

	)

640 
	#sk_IPAddїssFamЮy_num
(
°
и
	`SKM_sk_num
(
IPAddїssFamЮy
, (°))

	)

641 
	#sk_IPAddїssFamЮy_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
IPAddїssFamЮy
, (°), (i))

	)

642 
	#sk_IPAddїssFamЮy_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
IPAddїssFamЮy
, (°), (i), (vЃ))

	)

643 
	#sk_IPAddїssFamЮy_zФo
(
°
и
	`SKM_sk_zФo
(
IPAddїssFamЮy
, (°))

	)

644 
	#sk_IPAddїssFamЮy_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
IPAddїssFamЮy
, (°), (vЃ))

	)

645 
	#sk_IPAddїssFamЮy_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
IPAddїssFamЮy
, (°), (vЃ))

	)

646 
	#sk_IPAddїssFamЮy_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
IPAddїssFamЮy
, (°), (vЃ))

	)

647 
	#sk_IPAddїssFamЮy_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
IPAddїssFamЮy
, (°), (vЃ))

	)

648 
	#sk_IPAddїssFamЮy_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
IPAddїssFamЮy
, (°), (i))

	)

649 
	#sk_IPAddїssFamЮy_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
IPAddїssFamЮy
, (°), (±r))

	)

650 
	#sk_IPAddїssFamЮy_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
IPAddїssFamЮy
, (°), (vЃ), (i))

	)

651 
	#sk_IPAddїssFamЮy_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
IPAddїssFamЮy
, (°), (cmp))

	)

652 
	#sk_IPAddїssFamЮy_dup
(
°
и
	`SKM_sk_dup
(
IPAddїssFamЮy
, st)

	)

653 
	#sk_IPAddїssFamЮy_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
IPAddїssFamЮy
, (°), (дУ_func))

	)

654 
	#sk_IPAddїssFamЮy_shiб
(
°
и
	`SKM_sk_shiб
(
IPAddїssFamЮy
, (°))

	)

655 
	#sk_IPAddїssFamЮy_pЁ
(
°
и
	`SKM_sk_pЁ
(
IPAddїssFamЮy
, (°))

	)

656 
	#sk_IPAddїssFamЮy_s№t
(
°
и
	`SKM_sk_s№t
(
IPAddїssFamЮy
, (°))

	)

657 
	#sk_IPAddїssFamЮy_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
IPAddїssFamЮy
, (°))

	)

659 
	#sk_IPAddїssOrR™ge_√w
(
°
и
	`SKM_sk_√w
(
IPAddїssOrR™ge
, (°))

	)

660 
	#sk_IPAddїssOrR™ge_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
IPAddїssOrR™ge
)

	)

661 
	#sk_IPAddїssOrR™ge_дУ
(
°
и
	`SKM_sk_дУ
(
IPAddїssOrR™ge
, (°))

	)

662 
	#sk_IPAddїssOrR™ge_num
(
°
и
	`SKM_sk_num
(
IPAddїssOrR™ge
, (°))

	)

663 
	#sk_IPAddїssOrR™ge_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
IPAddїssOrR™ge
, (°), (i))

	)

664 
	#sk_IPAddїssOrR™ge_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
IPAddїssOrR™ge
, (°), (i), (vЃ))

	)

665 
	#sk_IPAddїssOrR™ge_zФo
(
°
и
	`SKM_sk_zФo
(
IPAddїssOrR™ge
, (°))

	)

666 
	#sk_IPAddїssOrR™ge_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
IPAddїssOrR™ge
, (°), (vЃ))

	)

667 
	#sk_IPAddїssOrR™ge_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
IPAddїssOrR™ge
, (°), (vЃ))

	)

668 
	#sk_IPAddїssOrR™ge_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
IPAddїssOrR™ge
, (°), (vЃ))

	)

669 
	#sk_IPAddїssOrR™ge_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
IPAddїssOrR™ge
, (°), (vЃ))

	)

670 
	#sk_IPAddїssOrR™ge_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
IPAddїssOrR™ge
, (°), (i))

	)

671 
	#sk_IPAddїssOrR™ge_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
IPAddїssOrR™ge
, (°), (±r))

	)

672 
	#sk_IPAddїssOrR™ge_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
IPAddїssOrR™ge
, (°), (vЃ), (i))

	)

673 
	#sk_IPAddїssOrR™ge_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
IPAddїssOrR™ge
, (°), (cmp))

	)

674 
	#sk_IPAddїssOrR™ge_dup
(
°
и
	`SKM_sk_dup
(
IPAddїssOrR™ge
, st)

	)

675 
	#sk_IPAddїssOrR™ge_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
IPAddїssOrR™ge
, (°), (дУ_func))

	)

676 
	#sk_IPAddїssOrR™ge_shiб
(
°
и
	`SKM_sk_shiб
(
IPAddїssOrR™ge
, (°))

	)

677 
	#sk_IPAddїssOrR™ge_pЁ
(
°
и
	`SKM_sk_pЁ
(
IPAddїssOrR™ge
, (°))

	)

678 
	#sk_IPAddїssOrR™ge_s№t
(
°
и
	`SKM_sk_s№t
(
IPAddїssOrR™ge
, (°))

	)

679 
	#sk_IPAddїssOrR™ge_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
IPAddїssOrR™ge
, (°))

	)

681 
	#sk_KRB5_APREQBODY_√w
(
°
и
	`SKM_sk_√w
(
KRB5_APREQBODY
, (°))

	)

682 
	#sk_KRB5_APREQBODY_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_APREQBODY
)

	)

683 
	#sk_KRB5_APREQBODY_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_APREQBODY
, (°))

	)

684 
	#sk_KRB5_APREQBODY_num
(
°
и
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

685 
	#sk_KRB5_APREQBODY_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_APREQBODY
, (°), (i))

	)

686 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vЃ))

	)

687 
	#sk_KRB5_APREQBODY_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_APREQBODY
, (°))

	)

688 
	#sk_KRB5_APREQBODY_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vЃ))

	)

689 
	#sk_KRB5_APREQBODY_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_APREQBODY
, (°), (vЃ))

	)

690 
	#sk_KRB5_APREQBODY_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_APREQBODY
, (°), (vЃ))

	)

691 
	#sk_KRB5_APREQBODY_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_APREQBODY
, (°), (vЃ))

	)

692 
	#sk_KRB5_APREQBODY_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_APREQBODY
, (°), (i))

	)

693 
	#sk_KRB5_APREQBODY_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

694 
	#sk_KRB5_APREQBODY_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_APREQBODY
, (°), (vЃ), (i))

	)

695 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

696 
	#sk_KRB5_APREQBODY_dup
(
°
и
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

697 
	#sk_KRB5_APREQBODY_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_APREQBODY
, (°), (дУ_func))

	)

698 
	#sk_KRB5_APREQBODY_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_APREQBODY
, (°))

	)

699 
	#sk_KRB5_APREQBODY_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_APREQBODY
, (°))

	)

700 
	#sk_KRB5_APREQBODY_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_APREQBODY
, (°))

	)

701 
	#sk_KRB5_APREQBODY_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_APREQBODY
, (°))

	)

703 
	#sk_KRB5_AUTHDATA_√w
(
°
и
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (°))

	)

704 
	#sk_KRB5_AUTHDATA_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_AUTHDATA
)

	)

705 
	#sk_KRB5_AUTHDATA_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_AUTHDATA
, (°))

	)

706 
	#sk_KRB5_AUTHDATA_num
(
°
и
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

707 
	#sk_KRB5_AUTHDATA_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_AUTHDATA
, (°), (i))

	)

708 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vЃ))

	)

709 
	#sk_KRB5_AUTHDATA_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_AUTHDATA
, (°))

	)

710 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vЃ))

	)

711 
	#sk_KRB5_AUTHDATA_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_AUTHDATA
, (°), (vЃ))

	)

712 
	#sk_KRB5_AUTHDATA_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_AUTHDATA
, (°), (vЃ))

	)

713 
	#sk_KRB5_AUTHDATA_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_AUTHDATA
, (°), (vЃ))

	)

714 
	#sk_KRB5_AUTHDATA_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_AUTHDATA
, (°), (i))

	)

715 
	#sk_KRB5_AUTHDATA_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

716 
	#sk_KRB5_AUTHDATA_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_AUTHDATA
, (°), (vЃ), (i))

	)

717 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

718 
	#sk_KRB5_AUTHDATA_dup
(
°
и
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

719 
	#sk_KRB5_AUTHDATA_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_AUTHDATA
, (°), (дУ_func))

	)

720 
	#sk_KRB5_AUTHDATA_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_AUTHDATA
, (°))

	)

721 
	#sk_KRB5_AUTHDATA_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_AUTHDATA
, (°))

	)

722 
	#sk_KRB5_AUTHDATA_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_AUTHDATA
, (°))

	)

723 
	#sk_KRB5_AUTHDATA_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_AUTHDATA
, (°))

	)

725 
	#sk_KRB5_AUTHENTBODY_√w
(
°
и
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (°))

	)

726 
	#sk_KRB5_AUTHENTBODY_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_AUTHENTBODY
)

	)

727 
	#sk_KRB5_AUTHENTBODY_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_AUTHENTBODY
, (°))

	)

728 
	#sk_KRB5_AUTHENTBODY_num
(
°
и
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

729 
	#sk_KRB5_AUTHENTBODY_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

730 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vЃ))

	)

731 
	#sk_KRB5_AUTHENTBODY_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_AUTHENTBODY
, (°))

	)

732 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vЃ))

	)

733 
	#sk_KRB5_AUTHENTBODY_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_AUTHENTBODY
, (°), (vЃ))

	)

734 
	#sk_KRB5_AUTHENTBODY_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_AUTHENTBODY
, (°), (vЃ))

	)

735 
	#sk_KRB5_AUTHENTBODY_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_AUTHENTBODY
, (°), (vЃ))

	)

736 
	#sk_KRB5_AUTHENTBODY_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

737 
	#sk_KRB5_AUTHENTBODY_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

738 
	#sk_KRB5_AUTHENTBODY_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_AUTHENTBODY
, (°), (vЃ), (i))

	)

739 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

740 
	#sk_KRB5_AUTHENTBODY_dup
(
°
и
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

741 
	#sk_KRB5_AUTHENTBODY_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_AUTHENTBODY
, (°), (дУ_func))

	)

742 
	#sk_KRB5_AUTHENTBODY_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_AUTHENTBODY
, (°))

	)

743 
	#sk_KRB5_AUTHENTBODY_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_AUTHENTBODY
, (°))

	)

744 
	#sk_KRB5_AUTHENTBODY_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_AUTHENTBODY
, (°))

	)

745 
	#sk_KRB5_AUTHENTBODY_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_AUTHENTBODY
, (°))

	)

747 
	#sk_KRB5_CHECKSUM_√w
(
°
и
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (°))

	)

748 
	#sk_KRB5_CHECKSUM_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_CHECKSUM
)

	)

749 
	#sk_KRB5_CHECKSUM_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_CHECKSUM
, (°))

	)

750 
	#sk_KRB5_CHECKSUM_num
(
°
и
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

751 
	#sk_KRB5_CHECKSUM_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_CHECKSUM
, (°), (i))

	)

752 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vЃ))

	)

753 
	#sk_KRB5_CHECKSUM_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_CHECKSUM
, (°))

	)

754 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vЃ))

	)

755 
	#sk_KRB5_CHECKSUM_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_CHECKSUM
, (°), (vЃ))

	)

756 
	#sk_KRB5_CHECKSUM_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_CHECKSUM
, (°), (vЃ))

	)

757 
	#sk_KRB5_CHECKSUM_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_CHECKSUM
, (°), (vЃ))

	)

758 
	#sk_KRB5_CHECKSUM_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_CHECKSUM
, (°), (i))

	)

759 
	#sk_KRB5_CHECKSUM_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

760 
	#sk_KRB5_CHECKSUM_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_CHECKSUM
, (°), (vЃ), (i))

	)

761 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

762 
	#sk_KRB5_CHECKSUM_dup
(
°
и
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

763 
	#sk_KRB5_CHECKSUM_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_CHECKSUM
, (°), (дУ_func))

	)

764 
	#sk_KRB5_CHECKSUM_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_CHECKSUM
, (°))

	)

765 
	#sk_KRB5_CHECKSUM_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_CHECKSUM
, (°))

	)

766 
	#sk_KRB5_CHECKSUM_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_CHECKSUM
, (°))

	)

767 
	#sk_KRB5_CHECKSUM_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_CHECKSUM
, (°))

	)

769 
	#sk_KRB5_ENCDATA_√w
(
°
и
	`SKM_sk_√w
(
KRB5_ENCDATA
, (°))

	)

770 
	#sk_KRB5_ENCDATA_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_ENCDATA
)

	)

771 
	#sk_KRB5_ENCDATA_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_ENCDATA
, (°))

	)

772 
	#sk_KRB5_ENCDATA_num
(
°
и
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

773 
	#sk_KRB5_ENCDATA_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_ENCDATA
, (°), (i))

	)

774 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vЃ))

	)

775 
	#sk_KRB5_ENCDATA_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_ENCDATA
, (°))

	)

776 
	#sk_KRB5_ENCDATA_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vЃ))

	)

777 
	#sk_KRB5_ENCDATA_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_ENCDATA
, (°), (vЃ))

	)

778 
	#sk_KRB5_ENCDATA_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_ENCDATA
, (°), (vЃ))

	)

779 
	#sk_KRB5_ENCDATA_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_ENCDATA
, (°), (vЃ))

	)

780 
	#sk_KRB5_ENCDATA_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_ENCDATA
, (°), (i))

	)

781 
	#sk_KRB5_ENCDATA_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

782 
	#sk_KRB5_ENCDATA_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_ENCDATA
, (°), (vЃ), (i))

	)

783 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

784 
	#sk_KRB5_ENCDATA_dup
(
°
и
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

785 
	#sk_KRB5_ENCDATA_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_ENCDATA
, (°), (дУ_func))

	)

786 
	#sk_KRB5_ENCDATA_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_ENCDATA
, (°))

	)

787 
	#sk_KRB5_ENCDATA_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_ENCDATA
, (°))

	)

788 
	#sk_KRB5_ENCDATA_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_ENCDATA
, (°))

	)

789 
	#sk_KRB5_ENCDATA_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_ENCDATA
, (°))

	)

791 
	#sk_KRB5_ENCKEY_√w
(
°
и
	`SKM_sk_√w
(
KRB5_ENCKEY
, (°))

	)

792 
	#sk_KRB5_ENCKEY_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_ENCKEY
)

	)

793 
	#sk_KRB5_ENCKEY_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_ENCKEY
, (°))

	)

794 
	#sk_KRB5_ENCKEY_num
(
°
и
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

795 
	#sk_KRB5_ENCKEY_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_ENCKEY
, (°), (i))

	)

796 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vЃ))

	)

797 
	#sk_KRB5_ENCKEY_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_ENCKEY
, (°))

	)

798 
	#sk_KRB5_ENCKEY_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vЃ))

	)

799 
	#sk_KRB5_ENCKEY_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_ENCKEY
, (°), (vЃ))

	)

800 
	#sk_KRB5_ENCKEY_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_ENCKEY
, (°), (vЃ))

	)

801 
	#sk_KRB5_ENCKEY_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_ENCKEY
, (°), (vЃ))

	)

802 
	#sk_KRB5_ENCKEY_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_ENCKEY
, (°), (i))

	)

803 
	#sk_KRB5_ENCKEY_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

804 
	#sk_KRB5_ENCKEY_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_ENCKEY
, (°), (vЃ), (i))

	)

805 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

806 
	#sk_KRB5_ENCKEY_dup
(
°
и
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

807 
	#sk_KRB5_ENCKEY_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_ENCKEY
, (°), (дУ_func))

	)

808 
	#sk_KRB5_ENCKEY_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_ENCKEY
, (°))

	)

809 
	#sk_KRB5_ENCKEY_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_ENCKEY
, (°))

	)

810 
	#sk_KRB5_ENCKEY_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_ENCKEY
, (°))

	)

811 
	#sk_KRB5_ENCKEY_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_ENCKEY
, (°))

	)

813 
	#sk_KRB5_PRINCNAME_√w
(
°
и
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (°))

	)

814 
	#sk_KRB5_PRINCNAME_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_PRINCNAME
)

	)

815 
	#sk_KRB5_PRINCNAME_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_PRINCNAME
, (°))

	)

816 
	#sk_KRB5_PRINCNAME_num
(
°
и
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

817 
	#sk_KRB5_PRINCNAME_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_PRINCNAME
, (°), (i))

	)

818 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vЃ))

	)

819 
	#sk_KRB5_PRINCNAME_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_PRINCNAME
, (°))

	)

820 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vЃ))

	)

821 
	#sk_KRB5_PRINCNAME_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_PRINCNAME
, (°), (vЃ))

	)

822 
	#sk_KRB5_PRINCNAME_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_PRINCNAME
, (°), (vЃ))

	)

823 
	#sk_KRB5_PRINCNAME_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_PRINCNAME
, (°), (vЃ))

	)

824 
	#sk_KRB5_PRINCNAME_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_PRINCNAME
, (°), (i))

	)

825 
	#sk_KRB5_PRINCNAME_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

826 
	#sk_KRB5_PRINCNAME_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_PRINCNAME
, (°), (vЃ), (i))

	)

827 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

828 
	#sk_KRB5_PRINCNAME_dup
(
°
и
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

829 
	#sk_KRB5_PRINCNAME_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_PRINCNAME
, (°), (дУ_func))

	)

830 
	#sk_KRB5_PRINCNAME_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_PRINCNAME
, (°))

	)

831 
	#sk_KRB5_PRINCNAME_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_PRINCNAME
, (°))

	)

832 
	#sk_KRB5_PRINCNAME_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_PRINCNAME
, (°))

	)

833 
	#sk_KRB5_PRINCNAME_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_PRINCNAME
, (°))

	)

835 
	#sk_KRB5_TKTBODY_√w
(
°
и
	`SKM_sk_√w
(
KRB5_TKTBODY
, (°))

	)

836 
	#sk_KRB5_TKTBODY_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
KRB5_TKTBODY
)

	)

837 
	#sk_KRB5_TKTBODY_дУ
(
°
и
	`SKM_sk_дУ
(
KRB5_TKTBODY
, (°))

	)

838 
	#sk_KRB5_TKTBODY_num
(
°
и
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

839 
	#sk_KRB5_TKTBODY_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
KRB5_TKTBODY
, (°), (i))

	)

840 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vЃ))

	)

841 
	#sk_KRB5_TKTBODY_zФo
(
°
и
	`SKM_sk_zФo
(
KRB5_TKTBODY
, (°))

	)

842 
	#sk_KRB5_TKTBODY_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vЃ))

	)

843 
	#sk_KRB5_TKTBODY_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
KRB5_TKTBODY
, (°), (vЃ))

	)

844 
	#sk_KRB5_TKTBODY_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
KRB5_TKTBODY
, (°), (vЃ))

	)

845 
	#sk_KRB5_TKTBODY_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
KRB5_TKTBODY
, (°), (vЃ))

	)

846 
	#sk_KRB5_TKTBODY_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
KRB5_TKTBODY
, (°), (i))

	)

847 
	#sk_KRB5_TKTBODY_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

848 
	#sk_KRB5_TKTBODY_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
KRB5_TKTBODY
, (°), (vЃ), (i))

	)

849 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

850 
	#sk_KRB5_TKTBODY_dup
(
°
и
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

851 
	#sk_KRB5_TKTBODY_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
KRB5_TKTBODY
, (°), (дУ_func))

	)

852 
	#sk_KRB5_TKTBODY_shiб
(
°
и
	`SKM_sk_shiб
(
KRB5_TKTBODY
, (°))

	)

853 
	#sk_KRB5_TKTBODY_pЁ
(
°
и
	`SKM_sk_pЁ
(
KRB5_TKTBODY
, (°))

	)

854 
	#sk_KRB5_TKTBODY_s№t
(
°
и
	`SKM_sk_s№t
(
KRB5_TKTBODY
, (°))

	)

855 
	#sk_KRB5_TKTBODY_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
KRB5_TKTBODY
, (°))

	)

857 
	#sk_MIME_HEADER_√w
(
°
и
	`SKM_sk_√w
(
MIME_HEADER
, (°))

	)

858 
	#sk_MIME_HEADER_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
MIME_HEADER
)

	)

859 
	#sk_MIME_HEADER_дУ
(
°
и
	`SKM_sk_дУ
(
MIME_HEADER
, (°))

	)

860 
	#sk_MIME_HEADER_num
(
°
и
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

861 
	#sk_MIME_HEADER_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
MIME_HEADER
, (°), (i))

	)

862 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vЃ))

	)

863 
	#sk_MIME_HEADER_zФo
(
°
и
	`SKM_sk_zФo
(
MIME_HEADER
, (°))

	)

864 
	#sk_MIME_HEADER_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
MIME_HEADER
, (°), (vЃ))

	)

865 
	#sk_MIME_HEADER_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
MIME_HEADER
, (°), (vЃ))

	)

866 
	#sk_MIME_HEADER_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
MIME_HEADER
, (°), (vЃ))

	)

867 
	#sk_MIME_HEADER_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
MIME_HEADER
, (°), (vЃ))

	)

868 
	#sk_MIME_HEADER_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
MIME_HEADER
, (°), (i))

	)

869 
	#sk_MIME_HEADER_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
MIME_HEADER
, (°), (±r))

	)

870 
	#sk_MIME_HEADER_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
MIME_HEADER
, (°), (vЃ), (i))

	)

871 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

872 
	#sk_MIME_HEADER_dup
(
°
и
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

873 
	#sk_MIME_HEADER_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
MIME_HEADER
, (°), (дУ_func))

	)

874 
	#sk_MIME_HEADER_shiб
(
°
и
	`SKM_sk_shiб
(
MIME_HEADER
, (°))

	)

875 
	#sk_MIME_HEADER_pЁ
(
°
и
	`SKM_sk_pЁ
(
MIME_HEADER
, (°))

	)

876 
	#sk_MIME_HEADER_s№t
(
°
и
	`SKM_sk_s№t
(
MIME_HEADER
, (°))

	)

877 
	#sk_MIME_HEADER_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
MIME_HEADER
, (°))

	)

879 
	#sk_MIME_PARAM_√w
(
°
и
	`SKM_sk_√w
(
MIME_PARAM
, (°))

	)

880 
	#sk_MIME_PARAM_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
MIME_PARAM
)

	)

881 
	#sk_MIME_PARAM_дУ
(
°
и
	`SKM_sk_дУ
(
MIME_PARAM
, (°))

	)

882 
	#sk_MIME_PARAM_num
(
°
и
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

883 
	#sk_MIME_PARAM_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
MIME_PARAM
, (°), (i))

	)

884 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vЃ))

	)

885 
	#sk_MIME_PARAM_zФo
(
°
и
	`SKM_sk_zФo
(
MIME_PARAM
, (°))

	)

886 
	#sk_MIME_PARAM_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
MIME_PARAM
, (°), (vЃ))

	)

887 
	#sk_MIME_PARAM_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
MIME_PARAM
, (°), (vЃ))

	)

888 
	#sk_MIME_PARAM_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
MIME_PARAM
, (°), (vЃ))

	)

889 
	#sk_MIME_PARAM_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
MIME_PARAM
, (°), (vЃ))

	)

890 
	#sk_MIME_PARAM_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
MIME_PARAM
, (°), (i))

	)

891 
	#sk_MIME_PARAM_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
MIME_PARAM
, (°), (±r))

	)

892 
	#sk_MIME_PARAM_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
MIME_PARAM
, (°), (vЃ), (i))

	)

893 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

894 
	#sk_MIME_PARAM_dup
(
°
и
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

895 
	#sk_MIME_PARAM_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
MIME_PARAM
, (°), (дУ_func))

	)

896 
	#sk_MIME_PARAM_shiб
(
°
и
	`SKM_sk_shiб
(
MIME_PARAM
, (°))

	)

897 
	#sk_MIME_PARAM_pЁ
(
°
и
	`SKM_sk_pЁ
(
MIME_PARAM
, (°))

	)

898 
	#sk_MIME_PARAM_s№t
(
°
и
	`SKM_sk_s№t
(
MIME_PARAM
, (°))

	)

899 
	#sk_MIME_PARAM_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
MIME_PARAM
, (°))

	)

901 
	#sk_NAME_FUNCS_√w
(
°
и
	`SKM_sk_√w
(
NAME_FUNCS
, (°))

	)

902 
	#sk_NAME_FUNCS_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
NAME_FUNCS
)

	)

903 
	#sk_NAME_FUNCS_дУ
(
°
и
	`SKM_sk_дУ
(
NAME_FUNCS
, (°))

	)

904 
	#sk_NAME_FUNCS_num
(
°
и
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

905 
	#sk_NAME_FUNCS_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
NAME_FUNCS
, (°), (i))

	)

906 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vЃ))

	)

907 
	#sk_NAME_FUNCS_zФo
(
°
и
	`SKM_sk_zФo
(
NAME_FUNCS
, (°))

	)

908 
	#sk_NAME_FUNCS_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vЃ))

	)

909 
	#sk_NAME_FUNCS_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
NAME_FUNCS
, (°), (vЃ))

	)

910 
	#sk_NAME_FUNCS_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
NAME_FUNCS
, (°), (vЃ))

	)

911 
	#sk_NAME_FUNCS_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
NAME_FUNCS
, (°), (vЃ))

	)

912 
	#sk_NAME_FUNCS_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
NAME_FUNCS
, (°), (i))

	)

913 
	#sk_NAME_FUNCS_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
NAME_FUNCS
, (°), (±r))

	)

914 
	#sk_NAME_FUNCS_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
NAME_FUNCS
, (°), (vЃ), (i))

	)

915 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

916 
	#sk_NAME_FUNCS_dup
(
°
и
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

917 
	#sk_NAME_FUNCS_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
NAME_FUNCS
, (°), (дУ_func))

	)

918 
	#sk_NAME_FUNCS_shiб
(
°
и
	`SKM_sk_shiб
(
NAME_FUNCS
, (°))

	)

919 
	#sk_NAME_FUNCS_pЁ
(
°
и
	`SKM_sk_pЁ
(
NAME_FUNCS
, (°))

	)

920 
	#sk_NAME_FUNCS_s№t
(
°
и
	`SKM_sk_s№t
(
NAME_FUNCS
, (°))

	)

921 
	#sk_NAME_FUNCS_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
NAME_FUNCS
, (°))

	)

923 
	#sk_OCSP_CERTID_√w
(
°
и
	`SKM_sk_√w
(
OCSP_CERTID
, (°))

	)

924 
	#sk_OCSP_CERTID_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
OCSP_CERTID
)

	)

925 
	#sk_OCSP_CERTID_дУ
(
°
и
	`SKM_sk_дУ
(
OCSP_CERTID
, (°))

	)

926 
	#sk_OCSP_CERTID_num
(
°
и
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

927 
	#sk_OCSP_CERTID_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
OCSP_CERTID
, (°), (i))

	)

928 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vЃ))

	)

929 
	#sk_OCSP_CERTID_zФo
(
°
и
	`SKM_sk_zФo
(
OCSP_CERTID
, (°))

	)

930 
	#sk_OCSP_CERTID_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vЃ))

	)

931 
	#sk_OCSP_CERTID_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
OCSP_CERTID
, (°), (vЃ))

	)

932 
	#sk_OCSP_CERTID_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
OCSP_CERTID
, (°), (vЃ))

	)

933 
	#sk_OCSP_CERTID_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
OCSP_CERTID
, (°), (vЃ))

	)

934 
	#sk_OCSP_CERTID_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
OCSP_CERTID
, (°), (i))

	)

935 
	#sk_OCSP_CERTID_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
OCSP_CERTID
, (°), (±r))

	)

936 
	#sk_OCSP_CERTID_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
OCSP_CERTID
, (°), (vЃ), (i))

	)

937 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

938 
	#sk_OCSP_CERTID_dup
(
°
и
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

939 
	#sk_OCSP_CERTID_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
OCSP_CERTID
, (°), (дУ_func))

	)

940 
	#sk_OCSP_CERTID_shiб
(
°
и
	`SKM_sk_shiб
(
OCSP_CERTID
, (°))

	)

941 
	#sk_OCSP_CERTID_pЁ
(
°
и
	`SKM_sk_pЁ
(
OCSP_CERTID
, (°))

	)

942 
	#sk_OCSP_CERTID_s№t
(
°
и
	`SKM_sk_s№t
(
OCSP_CERTID
, (°))

	)

943 
	#sk_OCSP_CERTID_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
OCSP_CERTID
, (°))

	)

945 
	#sk_OCSP_ONEREQ_√w
(
°
и
	`SKM_sk_√w
(
OCSP_ONEREQ
, (°))

	)

946 
	#sk_OCSP_ONEREQ_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
OCSP_ONEREQ
)

	)

947 
	#sk_OCSP_ONEREQ_дУ
(
°
и
	`SKM_sk_дУ
(
OCSP_ONEREQ
, (°))

	)

948 
	#sk_OCSP_ONEREQ_num
(
°
и
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

949 
	#sk_OCSP_ONEREQ_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
OCSP_ONEREQ
, (°), (i))

	)

950 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vЃ))

	)

951 
	#sk_OCSP_ONEREQ_zФo
(
°
и
	`SKM_sk_zФo
(
OCSP_ONEREQ
, (°))

	)

952 
	#sk_OCSP_ONEREQ_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vЃ))

	)

953 
	#sk_OCSP_ONEREQ_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
OCSP_ONEREQ
, (°), (vЃ))

	)

954 
	#sk_OCSP_ONEREQ_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
OCSP_ONEREQ
, (°), (vЃ))

	)

955 
	#sk_OCSP_ONEREQ_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
OCSP_ONEREQ
, (°), (vЃ))

	)

956 
	#sk_OCSP_ONEREQ_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
OCSP_ONEREQ
, (°), (i))

	)

957 
	#sk_OCSP_ONEREQ_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

958 
	#sk_OCSP_ONEREQ_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
OCSP_ONEREQ
, (°), (vЃ), (i))

	)

959 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

960 
	#sk_OCSP_ONEREQ_dup
(
°
и
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

961 
	#sk_OCSP_ONEREQ_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
OCSP_ONEREQ
, (°), (дУ_func))

	)

962 
	#sk_OCSP_ONEREQ_shiб
(
°
и
	`SKM_sk_shiб
(
OCSP_ONEREQ
, (°))

	)

963 
	#sk_OCSP_ONEREQ_pЁ
(
°
и
	`SKM_sk_pЁ
(
OCSP_ONEREQ
, (°))

	)

964 
	#sk_OCSP_ONEREQ_s№t
(
°
и
	`SKM_sk_s№t
(
OCSP_ONEREQ
, (°))

	)

965 
	#sk_OCSP_ONEREQ_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
OCSP_ONEREQ
, (°))

	)

967 
	#sk_OCSP_SINGLERESP_√w
(
°
и
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (°))

	)

968 
	#sk_OCSP_SINGLERESP_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
OCSP_SINGLERESP
)

	)

969 
	#sk_OCSP_SINGLERESP_дУ
(
°
и
	`SKM_sk_дУ
(
OCSP_SINGLERESP
, (°))

	)

970 
	#sk_OCSP_SINGLERESP_num
(
°
и
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

971 
	#sk_OCSP_SINGLERESP_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
OCSP_SINGLERESP
, (°), (i))

	)

972 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vЃ))

	)

973 
	#sk_OCSP_SINGLERESP_zФo
(
°
и
	`SKM_sk_zФo
(
OCSP_SINGLERESP
, (°))

	)

974 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vЃ))

	)

975 
	#sk_OCSP_SINGLERESP_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
OCSP_SINGLERESP
, (°), (vЃ))

	)

976 
	#sk_OCSP_SINGLERESP_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
OCSP_SINGLERESP
, (°), (vЃ))

	)

977 
	#sk_OCSP_SINGLERESP_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
OCSP_SINGLERESP
, (°), (vЃ))

	)

978 
	#sk_OCSP_SINGLERESP_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
OCSP_SINGLERESP
, (°), (i))

	)

979 
	#sk_OCSP_SINGLERESP_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

980 
	#sk_OCSP_SINGLERESP_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
OCSP_SINGLERESP
, (°), (vЃ), (i))

	)

981 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

982 
	#sk_OCSP_SINGLERESP_dup
(
°
и
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

983 
	#sk_OCSP_SINGLERESP_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
OCSP_SINGLERESP
, (°), (дУ_func))

	)

984 
	#sk_OCSP_SINGLERESP_shiб
(
°
и
	`SKM_sk_shiб
(
OCSP_SINGLERESP
, (°))

	)

985 
	#sk_OCSP_SINGLERESP_pЁ
(
°
и
	`SKM_sk_pЁ
(
OCSP_SINGLERESP
, (°))

	)

986 
	#sk_OCSP_SINGLERESP_s№t
(
°
и
	`SKM_sk_s№t
(
OCSP_SINGLERESP
, (°))

	)

987 
	#sk_OCSP_SINGLERESP_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
OCSP_SINGLERESP
, (°))

	)

989 
	#sk_PKCS12_SAFEBAG_√w
(
°
и
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (°))

	)

990 
	#sk_PKCS12_SAFEBAG_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
PKCS12_SAFEBAG
)

	)

991 
	#sk_PKCS12_SAFEBAG_дУ
(
°
и
	`SKM_sk_дУ
(
PKCS12_SAFEBAG
, (°))

	)

992 
	#sk_PKCS12_SAFEBAG_num
(
°
и
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

993 
	#sk_PKCS12_SAFEBAG_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
PKCS12_SAFEBAG
, (°), (i))

	)

994 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vЃ))

	)

995 
	#sk_PKCS12_SAFEBAG_zФo
(
°
и
	`SKM_sk_zФo
(
PKCS12_SAFEBAG
, (°))

	)

996 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vЃ))

	)

997 
	#sk_PKCS12_SAFEBAG_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
PKCS12_SAFEBAG
, (°), (vЃ))

	)

998 
	#sk_PKCS12_SAFEBAG_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
PKCS12_SAFEBAG
, (°), (vЃ))

	)

999 
	#sk_PKCS12_SAFEBAG_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
PKCS12_SAFEBAG
, (°), (vЃ))

	)

1000 
	#sk_PKCS12_SAFEBAG_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1001 
	#sk_PKCS12_SAFEBAG_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1002 
	#sk_PKCS12_SAFEBAG_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
PKCS12_SAFEBAG
, (°), (vЃ), (i))

	)

1003 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1004 
	#sk_PKCS12_SAFEBAG_dup
(
°
и
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1005 
	#sk_PKCS12_SAFEBAG_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
PKCS12_SAFEBAG
, (°), (дУ_func))

	)

1006 
	#sk_PKCS12_SAFEBAG_shiб
(
°
и
	`SKM_sk_shiб
(
PKCS12_SAFEBAG
, (°))

	)

1007 
	#sk_PKCS12_SAFEBAG_pЁ
(
°
и
	`SKM_sk_pЁ
(
PKCS12_SAFEBAG
, (°))

	)

1008 
	#sk_PKCS12_SAFEBAG_s№t
(
°
и
	`SKM_sk_s№t
(
PKCS12_SAFEBAG
, (°))

	)

1009 
	#sk_PKCS12_SAFEBAG_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
PKCS12_SAFEBAG
, (°))

	)

1011 
	#sk_PKCS7_√w
(
°
и
	`SKM_sk_√w
(
PKCS7
, (°))

	)

1012 
	#sk_PKCS7_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
PKCS7
)

	)

1013 
	#sk_PKCS7_дУ
(
°
и
	`SKM_sk_дУ
(
PKCS7
, (°))

	)

1014 
	#sk_PKCS7_num
(
°
и
	`SKM_sk_num
(
PKCS7
, (°))

	)

1015 
	#sk_PKCS7_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
PKCS7
, (°), (i))

	)

1016 
	#sk_PKCS7_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vЃ))

	)

1017 
	#sk_PKCS7_zФo
(
°
и
	`SKM_sk_zФo
(
PKCS7
, (°))

	)

1018 
	#sk_PKCS7_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
PKCS7
, (°), (vЃ))

	)

1019 
	#sk_PKCS7_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
PKCS7
, (°), (vЃ))

	)

1020 
	#sk_PKCS7_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
PKCS7
, (°), (vЃ))

	)

1021 
	#sk_PKCS7_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
PKCS7
, (°), (vЃ))

	)

1022 
	#sk_PKCS7_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
PKCS7
, (°), (i))

	)

1023 
	#sk_PKCS7_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
PKCS7
, (°), (±r))

	)

1024 
	#sk_PKCS7_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
PKCS7
, (°), (vЃ), (i))

	)

1025 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1026 
	#sk_PKCS7_dup
(
°
и
	`SKM_sk_dup
(
PKCS7
, st)

	)

1027 
	#sk_PKCS7_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
PKCS7
, (°), (дУ_func))

	)

1028 
	#sk_PKCS7_shiб
(
°
и
	`SKM_sk_shiб
(
PKCS7
, (°))

	)

1029 
	#sk_PKCS7_pЁ
(
°
и
	`SKM_sk_pЁ
(
PKCS7
, (°))

	)

1030 
	#sk_PKCS7_s№t
(
°
и
	`SKM_sk_s№t
(
PKCS7
, (°))

	)

1031 
	#sk_PKCS7_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
PKCS7
, (°))

	)

1033 
	#sk_PKCS7_RECIP_INFO_√w
(
°
и
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (°))

	)

1034 
	#sk_PKCS7_RECIP_INFO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
PKCS7_RECIP_INFO
)

	)

1035 
	#sk_PKCS7_RECIP_INFO_дУ
(
°
и
	`SKM_sk_дУ
(
PKCS7_RECIP_INFO
, (°))

	)

1036 
	#sk_PKCS7_RECIP_INFO_num
(
°
и
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1037 
	#sk_PKCS7_RECIP_INFO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1038 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vЃ))

	)

1039 
	#sk_PKCS7_RECIP_INFO_zФo
(
°
и
	`SKM_sk_zФo
(
PKCS7_RECIP_INFO
, (°))

	)

1040 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vЃ))

	)

1041 
	#sk_PKCS7_RECIP_INFO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
PKCS7_RECIP_INFO
, (°), (vЃ))

	)

1042 
	#sk_PKCS7_RECIP_INFO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
PKCS7_RECIP_INFO
, (°), (vЃ))

	)

1043 
	#sk_PKCS7_RECIP_INFO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
PKCS7_RECIP_INFO
, (°), (vЃ))

	)

1044 
	#sk_PKCS7_RECIP_INFO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1045 
	#sk_PKCS7_RECIP_INFO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1046 
	#sk_PKCS7_RECIP_INFO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
PKCS7_RECIP_INFO
, (°), (vЃ), (i))

	)

1047 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1048 
	#sk_PKCS7_RECIP_INFO_dup
(
°
и
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1049 
	#sk_PKCS7_RECIP_INFO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
PKCS7_RECIP_INFO
, (°), (дУ_func))

	)

1050 
	#sk_PKCS7_RECIP_INFO_shiб
(
°
и
	`SKM_sk_shiб
(
PKCS7_RECIP_INFO
, (°))

	)

1051 
	#sk_PKCS7_RECIP_INFO_pЁ
(
°
и
	`SKM_sk_pЁ
(
PKCS7_RECIP_INFO
, (°))

	)

1052 
	#sk_PKCS7_RECIP_INFO_s№t
(
°
и
	`SKM_sk_s№t
(
PKCS7_RECIP_INFO
, (°))

	)

1053 
	#sk_PKCS7_RECIP_INFO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
PKCS7_RECIP_INFO
, (°))

	)

1055 
	#sk_PKCS7_SIGNER_INFO_√w
(
°
и
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (°))

	)

1056 
	#sk_PKCS7_SIGNER_INFO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
PKCS7_SIGNER_INFO
)

	)

1057 
	#sk_PKCS7_SIGNER_INFO_дУ
(
°
и
	`SKM_sk_дУ
(
PKCS7_SIGNER_INFO
, (°))

	)

1058 
	#sk_PKCS7_SIGNER_INFO_num
(
°
и
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1059 
	#sk_PKCS7_SIGNER_INFO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1060 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vЃ))

	)

1061 
	#sk_PKCS7_SIGNER_INFO_zФo
(
°
и
	`SKM_sk_zФo
(
PKCS7_SIGNER_INFO
, (°))

	)

1062 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vЃ))

	)

1063 
	#sk_PKCS7_SIGNER_INFO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
PKCS7_SIGNER_INFO
, (°), (vЃ))

	)

1064 
	#sk_PKCS7_SIGNER_INFO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
PKCS7_SIGNER_INFO
, (°), (vЃ))

	)

1065 
	#sk_PKCS7_SIGNER_INFO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
PKCS7_SIGNER_INFO
, (°), (vЃ))

	)

1066 
	#sk_PKCS7_SIGNER_INFO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1067 
	#sk_PKCS7_SIGNER_INFO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1068 
	#sk_PKCS7_SIGNER_INFO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
PKCS7_SIGNER_INFO
, (°), (vЃ), (i))

	)

1069 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1070 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
и
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1071 
	#sk_PKCS7_SIGNER_INFO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
PKCS7_SIGNER_INFO
, (°), (дУ_func))

	)

1072 
	#sk_PKCS7_SIGNER_INFO_shiб
(
°
и
	`SKM_sk_shiб
(
PKCS7_SIGNER_INFO
, (°))

	)

1073 
	#sk_PKCS7_SIGNER_INFO_pЁ
(
°
и
	`SKM_sk_pЁ
(
PKCS7_SIGNER_INFO
, (°))

	)

1074 
	#sk_PKCS7_SIGNER_INFO_s№t
(
°
и
	`SKM_sk_s№t
(
PKCS7_SIGNER_INFO
, (°))

	)

1075 
	#sk_PKCS7_SIGNER_INFO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
PKCS7_SIGNER_INFO
, (°))

	)

1077 
	#sk_POLICYINFO_√w
(
°
и
	`SKM_sk_√w
(
POLICYINFO
, (°))

	)

1078 
	#sk_POLICYINFO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
POLICYINFO
)

	)

1079 
	#sk_POLICYINFO_дУ
(
°
и
	`SKM_sk_дУ
(
POLICYINFO
, (°))

	)

1080 
	#sk_POLICYINFO_num
(
°
и
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1081 
	#sk_POLICYINFO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
POLICYINFO
, (°), (i))

	)

1082 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vЃ))

	)

1083 
	#sk_POLICYINFO_zФo
(
°
и
	`SKM_sk_zФo
(
POLICYINFO
, (°))

	)

1084 
	#sk_POLICYINFO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
POLICYINFO
, (°), (vЃ))

	)

1085 
	#sk_POLICYINFO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
POLICYINFO
, (°), (vЃ))

	)

1086 
	#sk_POLICYINFO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
POLICYINFO
, (°), (vЃ))

	)

1087 
	#sk_POLICYINFO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
POLICYINFO
, (°), (vЃ))

	)

1088 
	#sk_POLICYINFO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
POLICYINFO
, (°), (i))

	)

1089 
	#sk_POLICYINFO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
POLICYINFO
, (°), (±r))

	)

1090 
	#sk_POLICYINFO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
POLICYINFO
, (°), (vЃ), (i))

	)

1091 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1092 
	#sk_POLICYINFO_dup
(
°
и
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1093 
	#sk_POLICYINFO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
POLICYINFO
, (°), (дУ_func))

	)

1094 
	#sk_POLICYINFO_shiб
(
°
и
	`SKM_sk_shiб
(
POLICYINFO
, (°))

	)

1095 
	#sk_POLICYINFO_pЁ
(
°
и
	`SKM_sk_pЁ
(
POLICYINFO
, (°))

	)

1096 
	#sk_POLICYINFO_s№t
(
°
и
	`SKM_sk_s№t
(
POLICYINFO
, (°))

	)

1097 
	#sk_POLICYINFO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
POLICYINFO
, (°))

	)

1099 
	#sk_POLICYQUALINFO_√w
(
°
и
	`SKM_sk_√w
(
POLICYQUALINFO
, (°))

	)

1100 
	#sk_POLICYQUALINFO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
POLICYQUALINFO
)

	)

1101 
	#sk_POLICYQUALINFO_дУ
(
°
и
	`SKM_sk_дУ
(
POLICYQUALINFO
, (°))

	)

1102 
	#sk_POLICYQUALINFO_num
(
°
и
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1103 
	#sk_POLICYQUALINFO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
POLICYQUALINFO
, (°), (i))

	)

1104 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vЃ))

	)

1105 
	#sk_POLICYQUALINFO_zФo
(
°
и
	`SKM_sk_zФo
(
POLICYQUALINFO
, (°))

	)

1106 
	#sk_POLICYQUALINFO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vЃ))

	)

1107 
	#sk_POLICYQUALINFO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
POLICYQUALINFO
, (°), (vЃ))

	)

1108 
	#sk_POLICYQUALINFO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
POLICYQUALINFO
, (°), (vЃ))

	)

1109 
	#sk_POLICYQUALINFO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
POLICYQUALINFO
, (°), (vЃ))

	)

1110 
	#sk_POLICYQUALINFO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
POLICYQUALINFO
, (°), (i))

	)

1111 
	#sk_POLICYQUALINFO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1112 
	#sk_POLICYQUALINFO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
POLICYQUALINFO
, (°), (vЃ), (i))

	)

1113 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1114 
	#sk_POLICYQUALINFO_dup
(
°
и
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1115 
	#sk_POLICYQUALINFO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
POLICYQUALINFO
, (°), (дУ_func))

	)

1116 
	#sk_POLICYQUALINFO_shiб
(
°
и
	`SKM_sk_shiб
(
POLICYQUALINFO
, (°))

	)

1117 
	#sk_POLICYQUALINFO_pЁ
(
°
и
	`SKM_sk_pЁ
(
POLICYQUALINFO
, (°))

	)

1118 
	#sk_POLICYQUALINFO_s№t
(
°
и
	`SKM_sk_s№t
(
POLICYQUALINFO
, (°))

	)

1119 
	#sk_POLICYQUALINFO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
POLICYQUALINFO
, (°))

	)

1121 
	#sk_POLICY_MAPPING_√w
(
°
и
	`SKM_sk_√w
(
POLICY_MAPPING
, (°))

	)

1122 
	#sk_POLICY_MAPPING_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
POLICY_MAPPING
)

	)

1123 
	#sk_POLICY_MAPPING_дУ
(
°
и
	`SKM_sk_дУ
(
POLICY_MAPPING
, (°))

	)

1124 
	#sk_POLICY_MAPPING_num
(
°
и
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1125 
	#sk_POLICY_MAPPING_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
POLICY_MAPPING
, (°), (i))

	)

1126 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vЃ))

	)

1127 
	#sk_POLICY_MAPPING_zФo
(
°
и
	`SKM_sk_zФo
(
POLICY_MAPPING
, (°))

	)

1128 
	#sk_POLICY_MAPPING_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vЃ))

	)

1129 
	#sk_POLICY_MAPPING_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
POLICY_MAPPING
, (°), (vЃ))

	)

1130 
	#sk_POLICY_MAPPING_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
POLICY_MAPPING
, (°), (vЃ))

	)

1131 
	#sk_POLICY_MAPPING_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
POLICY_MAPPING
, (°), (vЃ))

	)

1132 
	#sk_POLICY_MAPPING_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
POLICY_MAPPING
, (°), (i))

	)

1133 
	#sk_POLICY_MAPPING_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1134 
	#sk_POLICY_MAPPING_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
POLICY_MAPPING
, (°), (vЃ), (i))

	)

1135 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1136 
	#sk_POLICY_MAPPING_dup
(
°
и
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1137 
	#sk_POLICY_MAPPING_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
POLICY_MAPPING
, (°), (дУ_func))

	)

1138 
	#sk_POLICY_MAPPING_shiб
(
°
и
	`SKM_sk_shiб
(
POLICY_MAPPING
, (°))

	)

1139 
	#sk_POLICY_MAPPING_pЁ
(
°
и
	`SKM_sk_pЁ
(
POLICY_MAPPING
, (°))

	)

1140 
	#sk_POLICY_MAPPING_s№t
(
°
и
	`SKM_sk_s№t
(
POLICY_MAPPING
, (°))

	)

1141 
	#sk_POLICY_MAPPING_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
POLICY_MAPPING
, (°))

	)

1143 
	#sk_SSL_CIPHER_√w
(
°
и
	`SKM_sk_√w
(
SSL_CIPHER
, (°))

	)

1144 
	#sk_SSL_CIPHER_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
SSL_CIPHER
)

	)

1145 
	#sk_SSL_CIPHER_дУ
(
°
и
	`SKM_sk_дУ
(
SSL_CIPHER
, (°))

	)

1146 
	#sk_SSL_CIPHER_num
(
°
и
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1147 
	#sk_SSL_CIPHER_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
SSL_CIPHER
, (°), (i))

	)

1148 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vЃ))

	)

1149 
	#sk_SSL_CIPHER_zФo
(
°
и
	`SKM_sk_zФo
(
SSL_CIPHER
, (°))

	)

1150 
	#sk_SSL_CIPHER_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vЃ))

	)

1151 
	#sk_SSL_CIPHER_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
SSL_CIPHER
, (°), (vЃ))

	)

1152 
	#sk_SSL_CIPHER_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
SSL_CIPHER
, (°), (vЃ))

	)

1153 
	#sk_SSL_CIPHER_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
SSL_CIPHER
, (°), (vЃ))

	)

1154 
	#sk_SSL_CIPHER_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
SSL_CIPHER
, (°), (i))

	)

1155 
	#sk_SSL_CIPHER_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1156 
	#sk_SSL_CIPHER_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
SSL_CIPHER
, (°), (vЃ), (i))

	)

1157 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1158 
	#sk_SSL_CIPHER_dup
(
°
и
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1159 
	#sk_SSL_CIPHER_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
SSL_CIPHER
, (°), (дУ_func))

	)

1160 
	#sk_SSL_CIPHER_shiб
(
°
и
	`SKM_sk_shiб
(
SSL_CIPHER
, (°))

	)

1161 
	#sk_SSL_CIPHER_pЁ
(
°
и
	`SKM_sk_pЁ
(
SSL_CIPHER
, (°))

	)

1162 
	#sk_SSL_CIPHER_s№t
(
°
и
	`SKM_sk_s№t
(
SSL_CIPHER
, (°))

	)

1163 
	#sk_SSL_CIPHER_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
SSL_CIPHER
, (°))

	)

1165 
	#sk_SSL_COMP_√w
(
°
и
	`SKM_sk_√w
(
SSL_COMP
, (°))

	)

1166 
	#sk_SSL_COMP_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
SSL_COMP
)

	)

1167 
	#sk_SSL_COMP_дУ
(
°
и
	`SKM_sk_дУ
(
SSL_COMP
, (°))

	)

1168 
	#sk_SSL_COMP_num
(
°
и
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1169 
	#sk_SSL_COMP_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
SSL_COMP
, (°), (i))

	)

1170 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vЃ))

	)

1171 
	#sk_SSL_COMP_zФo
(
°
и
	`SKM_sk_zФo
(
SSL_COMP
, (°))

	)

1172 
	#sk_SSL_COMP_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
SSL_COMP
, (°), (vЃ))

	)

1173 
	#sk_SSL_COMP_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
SSL_COMP
, (°), (vЃ))

	)

1174 
	#sk_SSL_COMP_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
SSL_COMP
, (°), (vЃ))

	)

1175 
	#sk_SSL_COMP_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
SSL_COMP
, (°), (vЃ))

	)

1176 
	#sk_SSL_COMP_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
SSL_COMP
, (°), (i))

	)

1177 
	#sk_SSL_COMP_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
SSL_COMP
, (°), (±r))

	)

1178 
	#sk_SSL_COMP_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
SSL_COMP
, (°), (vЃ), (i))

	)

1179 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1180 
	#sk_SSL_COMP_dup
(
°
и
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1181 
	#sk_SSL_COMP_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
SSL_COMP
, (°), (дУ_func))

	)

1182 
	#sk_SSL_COMP_shiб
(
°
и
	`SKM_sk_shiб
(
SSL_COMP
, (°))

	)

1183 
	#sk_SSL_COMP_pЁ
(
°
и
	`SKM_sk_pЁ
(
SSL_COMP
, (°))

	)

1184 
	#sk_SSL_COMP_s№t
(
°
и
	`SKM_sk_s№t
(
SSL_COMP
, (°))

	)

1185 
	#sk_SSL_COMP_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
SSL_COMP
, (°))

	)

1187 
	#sk_STORE_OBJECT_√w
(
°
и
	`SKM_sk_√w
(
STORE_OBJECT
, (°))

	)

1188 
	#sk_STORE_OBJECT_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
STORE_OBJECT
)

	)

1189 
	#sk_STORE_OBJECT_дУ
(
°
и
	`SKM_sk_дУ
(
STORE_OBJECT
, (°))

	)

1190 
	#sk_STORE_OBJECT_num
(
°
и
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1191 
	#sk_STORE_OBJECT_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
STORE_OBJECT
, (°), (i))

	)

1192 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vЃ))

	)

1193 
	#sk_STORE_OBJECT_zФo
(
°
и
	`SKM_sk_zФo
(
STORE_OBJECT
, (°))

	)

1194 
	#sk_STORE_OBJECT_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vЃ))

	)

1195 
	#sk_STORE_OBJECT_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
STORE_OBJECT
, (°), (vЃ))

	)

1196 
	#sk_STORE_OBJECT_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
STORE_OBJECT
, (°), (vЃ))

	)

1197 
	#sk_STORE_OBJECT_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
STORE_OBJECT
, (°), (vЃ))

	)

1198 
	#sk_STORE_OBJECT_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
STORE_OBJECT
, (°), (i))

	)

1199 
	#sk_STORE_OBJECT_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1200 
	#sk_STORE_OBJECT_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
STORE_OBJECT
, (°), (vЃ), (i))

	)

1201 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1202 
	#sk_STORE_OBJECT_dup
(
°
и
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1203 
	#sk_STORE_OBJECT_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
STORE_OBJECT
, (°), (дУ_func))

	)

1204 
	#sk_STORE_OBJECT_shiб
(
°
и
	`SKM_sk_shiб
(
STORE_OBJECT
, (°))

	)

1205 
	#sk_STORE_OBJECT_pЁ
(
°
и
	`SKM_sk_pЁ
(
STORE_OBJECT
, (°))

	)

1206 
	#sk_STORE_OBJECT_s№t
(
°
и
	`SKM_sk_s№t
(
STORE_OBJECT
, (°))

	)

1207 
	#sk_STORE_OBJECT_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
STORE_OBJECT
, (°))

	)

1209 
	#sk_SXNETID_√w
(
°
и
	`SKM_sk_√w
(
SXNETID
, (°))

	)

1210 
	#sk_SXNETID_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
SXNETID
)

	)

1211 
	#sk_SXNETID_дУ
(
°
и
	`SKM_sk_дУ
(
SXNETID
, (°))

	)

1212 
	#sk_SXNETID_num
(
°
и
	`SKM_sk_num
(
SXNETID
, (°))

	)

1213 
	#sk_SXNETID_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
SXNETID
, (°), (i))

	)

1214 
	#sk_SXNETID_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vЃ))

	)

1215 
	#sk_SXNETID_zФo
(
°
и
	`SKM_sk_zФo
(
SXNETID
, (°))

	)

1216 
	#sk_SXNETID_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
SXNETID
, (°), (vЃ))

	)

1217 
	#sk_SXNETID_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
SXNETID
, (°), (vЃ))

	)

1218 
	#sk_SXNETID_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
SXNETID
, (°), (vЃ))

	)

1219 
	#sk_SXNETID_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
SXNETID
, (°), (vЃ))

	)

1220 
	#sk_SXNETID_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
SXNETID
, (°), (i))

	)

1221 
	#sk_SXNETID_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
SXNETID
, (°), (±r))

	)

1222 
	#sk_SXNETID_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
SXNETID
, (°), (vЃ), (i))

	)

1223 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1224 
	#sk_SXNETID_dup
(
°
и
	`SKM_sk_dup
(
SXNETID
, st)

	)

1225 
	#sk_SXNETID_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
SXNETID
, (°), (дУ_func))

	)

1226 
	#sk_SXNETID_shiб
(
°
и
	`SKM_sk_shiб
(
SXNETID
, (°))

	)

1227 
	#sk_SXNETID_pЁ
(
°
и
	`SKM_sk_pЁ
(
SXNETID
, (°))

	)

1228 
	#sk_SXNETID_s№t
(
°
и
	`SKM_sk_s№t
(
SXNETID
, (°))

	)

1229 
	#sk_SXNETID_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
SXNETID
, (°))

	)

1231 
	#sk_UI_STRING_√w
(
°
и
	`SKM_sk_√w
(
UI_STRING
, (°))

	)

1232 
	#sk_UI_STRING_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
UI_STRING
)

	)

1233 
	#sk_UI_STRING_дУ
(
°
и
	`SKM_sk_дУ
(
UI_STRING
, (°))

	)

1234 
	#sk_UI_STRING_num
(
°
и
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1235 
	#sk_UI_STRING_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
UI_STRING
, (°), (i))

	)

1236 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vЃ))

	)

1237 
	#sk_UI_STRING_zФo
(
°
и
	`SKM_sk_zФo
(
UI_STRING
, (°))

	)

1238 
	#sk_UI_STRING_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
UI_STRING
, (°), (vЃ))

	)

1239 
	#sk_UI_STRING_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
UI_STRING
, (°), (vЃ))

	)

1240 
	#sk_UI_STRING_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
UI_STRING
, (°), (vЃ))

	)

1241 
	#sk_UI_STRING_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
UI_STRING
, (°), (vЃ))

	)

1242 
	#sk_UI_STRING_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
UI_STRING
, (°), (i))

	)

1243 
	#sk_UI_STRING_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
UI_STRING
, (°), (±r))

	)

1244 
	#sk_UI_STRING_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
UI_STRING
, (°), (vЃ), (i))

	)

1245 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1246 
	#sk_UI_STRING_dup
(
°
и
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1247 
	#sk_UI_STRING_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
UI_STRING
, (°), (дУ_func))

	)

1248 
	#sk_UI_STRING_shiб
(
°
и
	`SKM_sk_shiб
(
UI_STRING
, (°))

	)

1249 
	#sk_UI_STRING_pЁ
(
°
и
	`SKM_sk_pЁ
(
UI_STRING
, (°))

	)

1250 
	#sk_UI_STRING_s№t
(
°
и
	`SKM_sk_s№t
(
UI_STRING
, (°))

	)

1251 
	#sk_UI_STRING_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
UI_STRING
, (°))

	)

1253 
	#sk_X509_√w
(
°
и
	`SKM_sk_√w
(
X509
, (°))

	)

1254 
	#sk_X509_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509
)

	)

1255 
	#sk_X509_дУ
(
°
и
	`SKM_sk_дУ
(
X509
, (°))

	)

1256 
	#sk_X509_num
(
°
и
	`SKM_sk_num
(
X509
, (°))

	)

1257 
	#sk_X509_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509
, (°), (i))

	)

1258 
	#sk_X509_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509
, (°), (i), (vЃ))

	)

1259 
	#sk_X509_zФo
(
°
и
	`SKM_sk_zФo
(
X509
, (°))

	)

1260 
	#sk_X509_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509
, (°), (vЃ))

	)

1261 
	#sk_X509_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509
, (°), (vЃ))

	)

1262 
	#sk_X509_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509
, (°), (vЃ))

	)

1263 
	#sk_X509_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509
, (°), (vЃ))

	)

1264 
	#sk_X509_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509
, (°), (i))

	)

1265 
	#sk_X509_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509
, (°), (±r))

	)

1266 
	#sk_X509_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509
, (°), (vЃ), (i))

	)

1267 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1268 
	#sk_X509_dup
(
°
и
	`SKM_sk_dup
(
X509
, st)

	)

1269 
	#sk_X509_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509
, (°), (дУ_func))

	)

1270 
	#sk_X509_shiб
(
°
и
	`SKM_sk_shiб
(
X509
, (°))

	)

1271 
	#sk_X509_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509
, (°))

	)

1272 
	#sk_X509_s№t
(
°
и
	`SKM_sk_s№t
(
X509
, (°))

	)

1273 
	#sk_X509_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509
, (°))

	)

1275 
	#sk_X509V3_EXT_METHOD_√w
(
°
и
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (°))

	)

1276 
	#sk_X509V3_EXT_METHOD_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509V3_EXT_METHOD
)

	)

1277 
	#sk_X509V3_EXT_METHOD_дУ
(
°
и
	`SKM_sk_дУ
(
X509V3_EXT_METHOD
, (°))

	)

1278 
	#sk_X509V3_EXT_METHOD_num
(
°
и
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1279 
	#sk_X509V3_EXT_METHOD_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1280 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vЃ))

	)

1281 
	#sk_X509V3_EXT_METHOD_zФo
(
°
и
	`SKM_sk_zФo
(
X509V3_EXT_METHOD
, (°))

	)

1282 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vЃ))

	)

1283 
	#sk_X509V3_EXT_METHOD_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509V3_EXT_METHOD
, (°), (vЃ))

	)

1284 
	#sk_X509V3_EXT_METHOD_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509V3_EXT_METHOD
, (°), (vЃ))

	)

1285 
	#sk_X509V3_EXT_METHOD_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509V3_EXT_METHOD
, (°), (vЃ))

	)

1286 
	#sk_X509V3_EXT_METHOD_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1287 
	#sk_X509V3_EXT_METHOD_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1288 
	#sk_X509V3_EXT_METHOD_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509V3_EXT_METHOD
, (°), (vЃ), (i))

	)

1289 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1290 
	#sk_X509V3_EXT_METHOD_dup
(
°
и
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1291 
	#sk_X509V3_EXT_METHOD_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509V3_EXT_METHOD
, (°), (дУ_func))

	)

1292 
	#sk_X509V3_EXT_METHOD_shiб
(
°
и
	`SKM_sk_shiб
(
X509V3_EXT_METHOD
, (°))

	)

1293 
	#sk_X509V3_EXT_METHOD_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509V3_EXT_METHOD
, (°))

	)

1294 
	#sk_X509V3_EXT_METHOD_s№t
(
°
и
	`SKM_sk_s№t
(
X509V3_EXT_METHOD
, (°))

	)

1295 
	#sk_X509V3_EXT_METHOD_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509V3_EXT_METHOD
, (°))

	)

1297 
	#sk_X509_ALGOR_√w
(
°
и
	`SKM_sk_√w
(
X509_ALGOR
, (°))

	)

1298 
	#sk_X509_ALGOR_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_ALGOR
)

	)

1299 
	#sk_X509_ALGOR_дУ
(
°
и
	`SKM_sk_дУ
(
X509_ALGOR
, (°))

	)

1300 
	#sk_X509_ALGOR_num
(
°
и
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1301 
	#sk_X509_ALGOR_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_ALGOR
, (°), (i))

	)

1302 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vЃ))

	)

1303 
	#sk_X509_ALGOR_zФo
(
°
и
	`SKM_sk_zФo
(
X509_ALGOR
, (°))

	)

1304 
	#sk_X509_ALGOR_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_ALGOR
, (°), (vЃ))

	)

1305 
	#sk_X509_ALGOR_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_ALGOR
, (°), (vЃ))

	)

1306 
	#sk_X509_ALGOR_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_ALGOR
, (°), (vЃ))

	)

1307 
	#sk_X509_ALGOR_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_ALGOR
, (°), (vЃ))

	)

1308 
	#sk_X509_ALGOR_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_ALGOR
, (°), (i))

	)

1309 
	#sk_X509_ALGOR_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_ALGOR
, (°), (±r))

	)

1310 
	#sk_X509_ALGOR_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_ALGOR
, (°), (vЃ), (i))

	)

1311 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1312 
	#sk_X509_ALGOR_dup
(
°
и
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1313 
	#sk_X509_ALGOR_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_ALGOR
, (°), (дУ_func))

	)

1314 
	#sk_X509_ALGOR_shiб
(
°
и
	`SKM_sk_shiб
(
X509_ALGOR
, (°))

	)

1315 
	#sk_X509_ALGOR_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_ALGOR
, (°))

	)

1316 
	#sk_X509_ALGOR_s№t
(
°
и
	`SKM_sk_s№t
(
X509_ALGOR
, (°))

	)

1317 
	#sk_X509_ALGOR_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_ALGOR
, (°))

	)

1319 
	#sk_X509_ATTRIBUTE_√w
(
°
и
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (°))

	)

1320 
	#sk_X509_ATTRIBUTE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_ATTRIBUTE
)

	)

1321 
	#sk_X509_ATTRIBUTE_дУ
(
°
и
	`SKM_sk_дУ
(
X509_ATTRIBUTE
, (°))

	)

1322 
	#sk_X509_ATTRIBUTE_num
(
°
и
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1323 
	#sk_X509_ATTRIBUTE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_ATTRIBUTE
, (°), (i))

	)

1324 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vЃ))

	)

1325 
	#sk_X509_ATTRIBUTE_zФo
(
°
и
	`SKM_sk_zФo
(
X509_ATTRIBUTE
, (°))

	)

1326 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vЃ))

	)

1327 
	#sk_X509_ATTRIBUTE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_ATTRIBUTE
, (°), (vЃ))

	)

1328 
	#sk_X509_ATTRIBUTE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_ATTRIBUTE
, (°), (vЃ))

	)

1329 
	#sk_X509_ATTRIBUTE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_ATTRIBUTE
, (°), (vЃ))

	)

1330 
	#sk_X509_ATTRIBUTE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_ATTRIBUTE
, (°), (i))

	)

1331 
	#sk_X509_ATTRIBUTE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1332 
	#sk_X509_ATTRIBUTE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_ATTRIBUTE
, (°), (vЃ), (i))

	)

1333 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1334 
	#sk_X509_ATTRIBUTE_dup
(
°
и
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1335 
	#sk_X509_ATTRIBUTE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_ATTRIBUTE
, (°), (дУ_func))

	)

1336 
	#sk_X509_ATTRIBUTE_shiб
(
°
и
	`SKM_sk_shiб
(
X509_ATTRIBUTE
, (°))

	)

1337 
	#sk_X509_ATTRIBUTE_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_ATTRIBUTE
, (°))

	)

1338 
	#sk_X509_ATTRIBUTE_s№t
(
°
и
	`SKM_sk_s№t
(
X509_ATTRIBUTE
, (°))

	)

1339 
	#sk_X509_ATTRIBUTE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_ATTRIBUTE
, (°))

	)

1341 
	#sk_X509_CRL_√w
(
°
и
	`SKM_sk_√w
(
X509_CRL
, (°))

	)

1342 
	#sk_X509_CRL_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_CRL
)

	)

1343 
	#sk_X509_CRL_дУ
(
°
и
	`SKM_sk_дУ
(
X509_CRL
, (°))

	)

1344 
	#sk_X509_CRL_num
(
°
и
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1345 
	#sk_X509_CRL_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_CRL
, (°), (i))

	)

1346 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vЃ))

	)

1347 
	#sk_X509_CRL_zФo
(
°
и
	`SKM_sk_zФo
(
X509_CRL
, (°))

	)

1348 
	#sk_X509_CRL_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_CRL
, (°), (vЃ))

	)

1349 
	#sk_X509_CRL_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_CRL
, (°), (vЃ))

	)

1350 
	#sk_X509_CRL_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_CRL
, (°), (vЃ))

	)

1351 
	#sk_X509_CRL_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_CRL
, (°), (vЃ))

	)

1352 
	#sk_X509_CRL_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_CRL
, (°), (i))

	)

1353 
	#sk_X509_CRL_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_CRL
, (°), (±r))

	)

1354 
	#sk_X509_CRL_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_CRL
, (°), (vЃ), (i))

	)

1355 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1356 
	#sk_X509_CRL_dup
(
°
и
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1357 
	#sk_X509_CRL_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_CRL
, (°), (дУ_func))

	)

1358 
	#sk_X509_CRL_shiб
(
°
и
	`SKM_sk_shiб
(
X509_CRL
, (°))

	)

1359 
	#sk_X509_CRL_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_CRL
, (°))

	)

1360 
	#sk_X509_CRL_s№t
(
°
и
	`SKM_sk_s№t
(
X509_CRL
, (°))

	)

1361 
	#sk_X509_CRL_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_CRL
, (°))

	)

1363 
	#sk_X509_EXTENSION_√w
(
°
и
	`SKM_sk_√w
(
X509_EXTENSION
, (°))

	)

1364 
	#sk_X509_EXTENSION_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_EXTENSION
)

	)

1365 
	#sk_X509_EXTENSION_дУ
(
°
и
	`SKM_sk_дУ
(
X509_EXTENSION
, (°))

	)

1366 
	#sk_X509_EXTENSION_num
(
°
и
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1367 
	#sk_X509_EXTENSION_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_EXTENSION
, (°), (i))

	)

1368 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vЃ))

	)

1369 
	#sk_X509_EXTENSION_zФo
(
°
и
	`SKM_sk_zФo
(
X509_EXTENSION
, (°))

	)

1370 
	#sk_X509_EXTENSION_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vЃ))

	)

1371 
	#sk_X509_EXTENSION_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_EXTENSION
, (°), (vЃ))

	)

1372 
	#sk_X509_EXTENSION_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_EXTENSION
, (°), (vЃ))

	)

1373 
	#sk_X509_EXTENSION_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_EXTENSION
, (°), (vЃ))

	)

1374 
	#sk_X509_EXTENSION_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_EXTENSION
, (°), (i))

	)

1375 
	#sk_X509_EXTENSION_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1376 
	#sk_X509_EXTENSION_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_EXTENSION
, (°), (vЃ), (i))

	)

1377 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1378 
	#sk_X509_EXTENSION_dup
(
°
и
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1379 
	#sk_X509_EXTENSION_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_EXTENSION
, (°), (дУ_func))

	)

1380 
	#sk_X509_EXTENSION_shiб
(
°
и
	`SKM_sk_shiб
(
X509_EXTENSION
, (°))

	)

1381 
	#sk_X509_EXTENSION_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_EXTENSION
, (°))

	)

1382 
	#sk_X509_EXTENSION_s№t
(
°
и
	`SKM_sk_s№t
(
X509_EXTENSION
, (°))

	)

1383 
	#sk_X509_EXTENSION_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_EXTENSION
, (°))

	)

1385 
	#sk_X509_INFO_√w
(
°
и
	`SKM_sk_√w
(
X509_INFO
, (°))

	)

1386 
	#sk_X509_INFO_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_INFO
)

	)

1387 
	#sk_X509_INFO_дУ
(
°
и
	`SKM_sk_дУ
(
X509_INFO
, (°))

	)

1388 
	#sk_X509_INFO_num
(
°
и
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1389 
	#sk_X509_INFO_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_INFO
, (°), (i))

	)

1390 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vЃ))

	)

1391 
	#sk_X509_INFO_zФo
(
°
и
	`SKM_sk_zФo
(
X509_INFO
, (°))

	)

1392 
	#sk_X509_INFO_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_INFO
, (°), (vЃ))

	)

1393 
	#sk_X509_INFO_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_INFO
, (°), (vЃ))

	)

1394 
	#sk_X509_INFO_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_INFO
, (°), (vЃ))

	)

1395 
	#sk_X509_INFO_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_INFO
, (°), (vЃ))

	)

1396 
	#sk_X509_INFO_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_INFO
, (°), (i))

	)

1397 
	#sk_X509_INFO_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_INFO
, (°), (±r))

	)

1398 
	#sk_X509_INFO_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_INFO
, (°), (vЃ), (i))

	)

1399 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1400 
	#sk_X509_INFO_dup
(
°
и
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1401 
	#sk_X509_INFO_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_INFO
, (°), (дУ_func))

	)

1402 
	#sk_X509_INFO_shiб
(
°
и
	`SKM_sk_shiб
(
X509_INFO
, (°))

	)

1403 
	#sk_X509_INFO_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_INFO
, (°))

	)

1404 
	#sk_X509_INFO_s№t
(
°
и
	`SKM_sk_s№t
(
X509_INFO
, (°))

	)

1405 
	#sk_X509_INFO_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_INFO
, (°))

	)

1407 
	#sk_X509_LOOKUP_√w
(
°
и
	`SKM_sk_√w
(
X509_LOOKUP
, (°))

	)

1408 
	#sk_X509_LOOKUP_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_LOOKUP
)

	)

1409 
	#sk_X509_LOOKUP_дУ
(
°
и
	`SKM_sk_дУ
(
X509_LOOKUP
, (°))

	)

1410 
	#sk_X509_LOOKUP_num
(
°
и
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1411 
	#sk_X509_LOOKUP_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_LOOKUP
, (°), (i))

	)

1412 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vЃ))

	)

1413 
	#sk_X509_LOOKUP_zФo
(
°
и
	`SKM_sk_zФo
(
X509_LOOKUP
, (°))

	)

1414 
	#sk_X509_LOOKUP_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vЃ))

	)

1415 
	#sk_X509_LOOKUP_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_LOOKUP
, (°), (vЃ))

	)

1416 
	#sk_X509_LOOKUP_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_LOOKUP
, (°), (vЃ))

	)

1417 
	#sk_X509_LOOKUP_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_LOOKUP
, (°), (vЃ))

	)

1418 
	#sk_X509_LOOKUP_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_LOOKUP
, (°), (i))

	)

1419 
	#sk_X509_LOOKUP_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1420 
	#sk_X509_LOOKUP_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_LOOKUP
, (°), (vЃ), (i))

	)

1421 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1422 
	#sk_X509_LOOKUP_dup
(
°
и
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1423 
	#sk_X509_LOOKUP_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_LOOKUP
, (°), (дУ_func))

	)

1424 
	#sk_X509_LOOKUP_shiб
(
°
и
	`SKM_sk_shiб
(
X509_LOOKUP
, (°))

	)

1425 
	#sk_X509_LOOKUP_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_LOOKUP
, (°))

	)

1426 
	#sk_X509_LOOKUP_s№t
(
°
и
	`SKM_sk_s№t
(
X509_LOOKUP
, (°))

	)

1427 
	#sk_X509_LOOKUP_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_LOOKUP
, (°))

	)

1429 
	#sk_X509_NAME_√w
(
°
и
	`SKM_sk_√w
(
X509_NAME
, (°))

	)

1430 
	#sk_X509_NAME_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_NAME
)

	)

1431 
	#sk_X509_NAME_дУ
(
°
и
	`SKM_sk_дУ
(
X509_NAME
, (°))

	)

1432 
	#sk_X509_NAME_num
(
°
и
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1433 
	#sk_X509_NAME_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_NAME
, (°), (i))

	)

1434 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vЃ))

	)

1435 
	#sk_X509_NAME_zФo
(
°
и
	`SKM_sk_zФo
(
X509_NAME
, (°))

	)

1436 
	#sk_X509_NAME_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_NAME
, (°), (vЃ))

	)

1437 
	#sk_X509_NAME_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_NAME
, (°), (vЃ))

	)

1438 
	#sk_X509_NAME_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_NAME
, (°), (vЃ))

	)

1439 
	#sk_X509_NAME_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_NAME
, (°), (vЃ))

	)

1440 
	#sk_X509_NAME_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_NAME
, (°), (i))

	)

1441 
	#sk_X509_NAME_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_NAME
, (°), (±r))

	)

1442 
	#sk_X509_NAME_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_NAME
, (°), (vЃ), (i))

	)

1443 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1444 
	#sk_X509_NAME_dup
(
°
и
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1445 
	#sk_X509_NAME_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_NAME
, (°), (дУ_func))

	)

1446 
	#sk_X509_NAME_shiб
(
°
и
	`SKM_sk_shiб
(
X509_NAME
, (°))

	)

1447 
	#sk_X509_NAME_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_NAME
, (°))

	)

1448 
	#sk_X509_NAME_s№t
(
°
и
	`SKM_sk_s№t
(
X509_NAME
, (°))

	)

1449 
	#sk_X509_NAME_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_NAME
, (°))

	)

1451 
	#sk_X509_NAME_ENTRY_√w
(
°
и
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (°))

	)

1452 
	#sk_X509_NAME_ENTRY_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_NAME_ENTRY
)

	)

1453 
	#sk_X509_NAME_ENTRY_дУ
(
°
и
	`SKM_sk_дУ
(
X509_NAME_ENTRY
, (°))

	)

1454 
	#sk_X509_NAME_ENTRY_num
(
°
и
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1455 
	#sk_X509_NAME_ENTRY_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_NAME_ENTRY
, (°), (i))

	)

1456 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vЃ))

	)

1457 
	#sk_X509_NAME_ENTRY_zФo
(
°
и
	`SKM_sk_zФo
(
X509_NAME_ENTRY
, (°))

	)

1458 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vЃ))

	)

1459 
	#sk_X509_NAME_ENTRY_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_NAME_ENTRY
, (°), (vЃ))

	)

1460 
	#sk_X509_NAME_ENTRY_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_NAME_ENTRY
, (°), (vЃ))

	)

1461 
	#sk_X509_NAME_ENTRY_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_NAME_ENTRY
, (°), (vЃ))

	)

1462 
	#sk_X509_NAME_ENTRY_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_NAME_ENTRY
, (°), (i))

	)

1463 
	#sk_X509_NAME_ENTRY_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1464 
	#sk_X509_NAME_ENTRY_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_NAME_ENTRY
, (°), (vЃ), (i))

	)

1465 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1466 
	#sk_X509_NAME_ENTRY_dup
(
°
и
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1467 
	#sk_X509_NAME_ENTRY_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_NAME_ENTRY
, (°), (дУ_func))

	)

1468 
	#sk_X509_NAME_ENTRY_shiб
(
°
и
	`SKM_sk_shiб
(
X509_NAME_ENTRY
, (°))

	)

1469 
	#sk_X509_NAME_ENTRY_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_NAME_ENTRY
, (°))

	)

1470 
	#sk_X509_NAME_ENTRY_s№t
(
°
и
	`SKM_sk_s№t
(
X509_NAME_ENTRY
, (°))

	)

1471 
	#sk_X509_NAME_ENTRY_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_NAME_ENTRY
, (°))

	)

1473 
	#sk_X509_OBJECT_√w
(
°
и
	`SKM_sk_√w
(
X509_OBJECT
, (°))

	)

1474 
	#sk_X509_OBJECT_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_OBJECT
)

	)

1475 
	#sk_X509_OBJECT_дУ
(
°
и
	`SKM_sk_дУ
(
X509_OBJECT
, (°))

	)

1476 
	#sk_X509_OBJECT_num
(
°
и
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1477 
	#sk_X509_OBJECT_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_OBJECT
, (°), (i))

	)

1478 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vЃ))

	)

1479 
	#sk_X509_OBJECT_zФo
(
°
и
	`SKM_sk_zФo
(
X509_OBJECT
, (°))

	)

1480 
	#sk_X509_OBJECT_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_OBJECT
, (°), (vЃ))

	)

1481 
	#sk_X509_OBJECT_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_OBJECT
, (°), (vЃ))

	)

1482 
	#sk_X509_OBJECT_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_OBJECT
, (°), (vЃ))

	)

1483 
	#sk_X509_OBJECT_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_OBJECT
, (°), (vЃ))

	)

1484 
	#sk_X509_OBJECT_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_OBJECT
, (°), (i))

	)

1485 
	#sk_X509_OBJECT_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_OBJECT
, (°), (±r))

	)

1486 
	#sk_X509_OBJECT_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_OBJECT
, (°), (vЃ), (i))

	)

1487 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1488 
	#sk_X509_OBJECT_dup
(
°
и
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1489 
	#sk_X509_OBJECT_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_OBJECT
, (°), (дУ_func))

	)

1490 
	#sk_X509_OBJECT_shiб
(
°
и
	`SKM_sk_shiб
(
X509_OBJECT
, (°))

	)

1491 
	#sk_X509_OBJECT_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_OBJECT
, (°))

	)

1492 
	#sk_X509_OBJECT_s№t
(
°
и
	`SKM_sk_s№t
(
X509_OBJECT
, (°))

	)

1493 
	#sk_X509_OBJECT_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_OBJECT
, (°))

	)

1495 
	#sk_X509_POLICY_DATA_√w
(
°
и
	`SKM_sk_√w
(
X509_POLICY_DATA
, (°))

	)

1496 
	#sk_X509_POLICY_DATA_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_POLICY_DATA
)

	)

1497 
	#sk_X509_POLICY_DATA_дУ
(
°
и
	`SKM_sk_дУ
(
X509_POLICY_DATA
, (°))

	)

1498 
	#sk_X509_POLICY_DATA_num
(
°
и
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1499 
	#sk_X509_POLICY_DATA_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_POLICY_DATA
, (°), (i))

	)

1500 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vЃ))

	)

1501 
	#sk_X509_POLICY_DATA_zФo
(
°
и
	`SKM_sk_zФo
(
X509_POLICY_DATA
, (°))

	)

1502 
	#sk_X509_POLICY_DATA_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vЃ))

	)

1503 
	#sk_X509_POLICY_DATA_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_POLICY_DATA
, (°), (vЃ))

	)

1504 
	#sk_X509_POLICY_DATA_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_POLICY_DATA
, (°), (vЃ))

	)

1505 
	#sk_X509_POLICY_DATA_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_POLICY_DATA
, (°), (vЃ))

	)

1506 
	#sk_X509_POLICY_DATA_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_POLICY_DATA
, (°), (i))

	)

1507 
	#sk_X509_POLICY_DATA_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1508 
	#sk_X509_POLICY_DATA_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_POLICY_DATA
, (°), (vЃ), (i))

	)

1509 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1510 
	#sk_X509_POLICY_DATA_dup
(
°
и
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1511 
	#sk_X509_POLICY_DATA_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_POLICY_DATA
, (°), (дУ_func))

	)

1512 
	#sk_X509_POLICY_DATA_shiб
(
°
и
	`SKM_sk_shiб
(
X509_POLICY_DATA
, (°))

	)

1513 
	#sk_X509_POLICY_DATA_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_POLICY_DATA
, (°))

	)

1514 
	#sk_X509_POLICY_DATA_s№t
(
°
и
	`SKM_sk_s№t
(
X509_POLICY_DATA
, (°))

	)

1515 
	#sk_X509_POLICY_DATA_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_POLICY_DATA
, (°))

	)

1517 
	#sk_X509_POLICY_NODE_√w
(
°
и
	`SKM_sk_√w
(
X509_POLICY_NODE
, (°))

	)

1518 
	#sk_X509_POLICY_NODE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_POLICY_NODE
)

	)

1519 
	#sk_X509_POLICY_NODE_дУ
(
°
и
	`SKM_sk_дУ
(
X509_POLICY_NODE
, (°))

	)

1520 
	#sk_X509_POLICY_NODE_num
(
°
и
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1521 
	#sk_X509_POLICY_NODE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_POLICY_NODE
, (°), (i))

	)

1522 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vЃ))

	)

1523 
	#sk_X509_POLICY_NODE_zФo
(
°
и
	`SKM_sk_zФo
(
X509_POLICY_NODE
, (°))

	)

1524 
	#sk_X509_POLICY_NODE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vЃ))

	)

1525 
	#sk_X509_POLICY_NODE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_POLICY_NODE
, (°), (vЃ))

	)

1526 
	#sk_X509_POLICY_NODE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_POLICY_NODE
, (°), (vЃ))

	)

1527 
	#sk_X509_POLICY_NODE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_POLICY_NODE
, (°), (vЃ))

	)

1528 
	#sk_X509_POLICY_NODE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_POLICY_NODE
, (°), (i))

	)

1529 
	#sk_X509_POLICY_NODE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1530 
	#sk_X509_POLICY_NODE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_POLICY_NODE
, (°), (vЃ), (i))

	)

1531 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1532 
	#sk_X509_POLICY_NODE_dup
(
°
и
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1533 
	#sk_X509_POLICY_NODE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_POLICY_NODE
, (°), (дУ_func))

	)

1534 
	#sk_X509_POLICY_NODE_shiб
(
°
и
	`SKM_sk_shiб
(
X509_POLICY_NODE
, (°))

	)

1535 
	#sk_X509_POLICY_NODE_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_POLICY_NODE
, (°))

	)

1536 
	#sk_X509_POLICY_NODE_s№t
(
°
и
	`SKM_sk_s№t
(
X509_POLICY_NODE
, (°))

	)

1537 
	#sk_X509_POLICY_NODE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_POLICY_NODE
, (°))

	)

1539 
	#sk_X509_POLICY_REF_√w
(
°
и
	`SKM_sk_√w
(
X509_POLICY_REF
, (°))

	)

1540 
	#sk_X509_POLICY_REF_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_POLICY_REF
)

	)

1541 
	#sk_X509_POLICY_REF_дУ
(
°
и
	`SKM_sk_дУ
(
X509_POLICY_REF
, (°))

	)

1542 
	#sk_X509_POLICY_REF_num
(
°
и
	`SKM_sk_num
(
X509_POLICY_REF
, (°))

	)

1543 
	#sk_X509_POLICY_REF_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_POLICY_REF
, (°), (i))

	)

1544 
	#sk_X509_POLICY_REF_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_POLICY_REF
, (°), (i), (vЃ))

	)

1545 
	#sk_X509_POLICY_REF_zФo
(
°
и
	`SKM_sk_zФo
(
X509_POLICY_REF
, (°))

	)

1546 
	#sk_X509_POLICY_REF_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_POLICY_REF
, (°), (vЃ))

	)

1547 
	#sk_X509_POLICY_REF_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_POLICY_REF
, (°), (vЃ))

	)

1548 
	#sk_X509_POLICY_REF_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_POLICY_REF
, (°), (vЃ))

	)

1549 
	#sk_X509_POLICY_REF_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_POLICY_REF
, (°), (vЃ))

	)

1550 
	#sk_X509_POLICY_REF_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_POLICY_REF
, (°), (i))

	)

1551 
	#sk_X509_POLICY_REF_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_POLICY_REF
, (°), (±r))

	)

1552 
	#sk_X509_POLICY_REF_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_POLICY_REF
, (°), (vЃ), (i))

	)

1553 
	#sk_X509_POLICY_REF_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_POLICY_REF
, (°), (cmp))

	)

1554 
	#sk_X509_POLICY_REF_dup
(
°
и
	`SKM_sk_dup
(
X509_POLICY_REF
, st)

	)

1555 
	#sk_X509_POLICY_REF_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_POLICY_REF
, (°), (дУ_func))

	)

1556 
	#sk_X509_POLICY_REF_shiб
(
°
и
	`SKM_sk_shiб
(
X509_POLICY_REF
, (°))

	)

1557 
	#sk_X509_POLICY_REF_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_POLICY_REF
, (°))

	)

1558 
	#sk_X509_POLICY_REF_s№t
(
°
и
	`SKM_sk_s№t
(
X509_POLICY_REF
, (°))

	)

1559 
	#sk_X509_POLICY_REF_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_POLICY_REF
, (°))

	)

1561 
	#sk_X509_PURPOSE_√w
(
°
и
	`SKM_sk_√w
(
X509_PURPOSE
, (°))

	)

1562 
	#sk_X509_PURPOSE_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_PURPOSE
)

	)

1563 
	#sk_X509_PURPOSE_дУ
(
°
и
	`SKM_sk_дУ
(
X509_PURPOSE
, (°))

	)

1564 
	#sk_X509_PURPOSE_num
(
°
и
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1565 
	#sk_X509_PURPOSE_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_PURPOSE
, (°), (i))

	)

1566 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vЃ))

	)

1567 
	#sk_X509_PURPOSE_zФo
(
°
и
	`SKM_sk_zФo
(
X509_PURPOSE
, (°))

	)

1568 
	#sk_X509_PURPOSE_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vЃ))

	)

1569 
	#sk_X509_PURPOSE_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_PURPOSE
, (°), (vЃ))

	)

1570 
	#sk_X509_PURPOSE_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_PURPOSE
, (°), (vЃ))

	)

1571 
	#sk_X509_PURPOSE_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_PURPOSE
, (°), (vЃ))

	)

1572 
	#sk_X509_PURPOSE_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_PURPOSE
, (°), (i))

	)

1573 
	#sk_X509_PURPOSE_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_PURPOSE
, (°), (±r))

	)

1574 
	#sk_X509_PURPOSE_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_PURPOSE
, (°), (vЃ), (i))

	)

1575 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

1576 
	#sk_X509_PURPOSE_dup
(
°
и
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

1577 
	#sk_X509_PURPOSE_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_PURPOSE
, (°), (дУ_func))

	)

1578 
	#sk_X509_PURPOSE_shiб
(
°
и
	`SKM_sk_shiб
(
X509_PURPOSE
, (°))

	)

1579 
	#sk_X509_PURPOSE_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_PURPOSE
, (°))

	)

1580 
	#sk_X509_PURPOSE_s№t
(
°
и
	`SKM_sk_s№t
(
X509_PURPOSE
, (°))

	)

1581 
	#sk_X509_PURPOSE_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_PURPOSE
, (°))

	)

1583 
	#sk_X509_REVOKED_√w
(
°
и
	`SKM_sk_√w
(
X509_REVOKED
, (°))

	)

1584 
	#sk_X509_REVOKED_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_REVOKED
)

	)

1585 
	#sk_X509_REVOKED_дУ
(
°
и
	`SKM_sk_дУ
(
X509_REVOKED
, (°))

	)

1586 
	#sk_X509_REVOKED_num
(
°
и
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

1587 
	#sk_X509_REVOKED_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_REVOKED
, (°), (i))

	)

1588 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vЃ))

	)

1589 
	#sk_X509_REVOKED_zФo
(
°
и
	`SKM_sk_zФo
(
X509_REVOKED
, (°))

	)

1590 
	#sk_X509_REVOKED_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_REVOKED
, (°), (vЃ))

	)

1591 
	#sk_X509_REVOKED_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_REVOKED
, (°), (vЃ))

	)

1592 
	#sk_X509_REVOKED_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_REVOKED
, (°), (vЃ))

	)

1593 
	#sk_X509_REVOKED_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_REVOKED
, (°), (vЃ))

	)

1594 
	#sk_X509_REVOKED_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_REVOKED
, (°), (i))

	)

1595 
	#sk_X509_REVOKED_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_REVOKED
, (°), (±r))

	)

1596 
	#sk_X509_REVOKED_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_REVOKED
, (°), (vЃ), (i))

	)

1597 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

1598 
	#sk_X509_REVOKED_dup
(
°
и
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

1599 
	#sk_X509_REVOKED_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_REVOKED
, (°), (дУ_func))

	)

1600 
	#sk_X509_REVOKED_shiб
(
°
и
	`SKM_sk_shiб
(
X509_REVOKED
, (°))

	)

1601 
	#sk_X509_REVOKED_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_REVOKED
, (°))

	)

1602 
	#sk_X509_REVOKED_s№t
(
°
и
	`SKM_sk_s№t
(
X509_REVOKED
, (°))

	)

1603 
	#sk_X509_REVOKED_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_REVOKED
, (°))

	)

1605 
	#sk_X509_TRUST_√w
(
°
и
	`SKM_sk_√w
(
X509_TRUST
, (°))

	)

1606 
	#sk_X509_TRUST_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_TRUST
)

	)

1607 
	#sk_X509_TRUST_дУ
(
°
и
	`SKM_sk_дУ
(
X509_TRUST
, (°))

	)

1608 
	#sk_X509_TRUST_num
(
°
и
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

1609 
	#sk_X509_TRUST_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_TRUST
, (°), (i))

	)

1610 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vЃ))

	)

1611 
	#sk_X509_TRUST_zФo
(
°
и
	`SKM_sk_zФo
(
X509_TRUST
, (°))

	)

1612 
	#sk_X509_TRUST_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_TRUST
, (°), (vЃ))

	)

1613 
	#sk_X509_TRUST_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_TRUST
, (°), (vЃ))

	)

1614 
	#sk_X509_TRUST_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_TRUST
, (°), (vЃ))

	)

1615 
	#sk_X509_TRUST_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_TRUST
, (°), (vЃ))

	)

1616 
	#sk_X509_TRUST_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_TRUST
, (°), (i))

	)

1617 
	#sk_X509_TRUST_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_TRUST
, (°), (±r))

	)

1618 
	#sk_X509_TRUST_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_TRUST
, (°), (vЃ), (i))

	)

1619 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

1620 
	#sk_X509_TRUST_dup
(
°
и
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

1621 
	#sk_X509_TRUST_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_TRUST
, (°), (дУ_func))

	)

1622 
	#sk_X509_TRUST_shiб
(
°
и
	`SKM_sk_shiб
(
X509_TRUST
, (°))

	)

1623 
	#sk_X509_TRUST_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_TRUST
, (°))

	)

1624 
	#sk_X509_TRUST_s№t
(
°
и
	`SKM_sk_s№t
(
X509_TRUST
, (°))

	)

1625 
	#sk_X509_TRUST_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_TRUST
, (°))

	)

1627 
	#sk_X509_VERIFY_PARAM_√w
(
°
и
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (°))

	)

1628 
	#sk_X509_VERIFY_PARAM_√w_nuќ
(и
	`SKM_sk_√w_nuќ
(
X509_VERIFY_PARAM
)

	)

1629 
	#sk_X509_VERIFY_PARAM_дУ
(
°
и
	`SKM_sk_дУ
(
X509_VERIFY_PARAM
, (°))

	)

1630 
	#sk_X509_VERIFY_PARAM_num
(
°
и
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

1631 
	#sk_X509_VERIFY_PARAM_vЃue
(
°
, 
i
и
	`SKM_sk_vЃue
(
X509_VERIFY_PARAM
, (°), (i))

	)

1632 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vЃ
и
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vЃ))

	)

1633 
	#sk_X509_VERIFY_PARAM_zФo
(
°
и
	`SKM_sk_zФo
(
X509_VERIFY_PARAM
, (°))

	)

1634 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vЃ
и
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vЃ))

	)

1635 
	#sk_X509_VERIFY_PARAM_unshiб
(
°
, 
vЃ
и
	`SKM_sk_unshiб
(
X509_VERIFY_PARAM
, (°), (vЃ))

	)

1636 
	#sk_X509_VERIFY_PARAM_fЪd
(
°
, 
vЃ
и
	`SKM_sk_fЪd
(
X509_VERIFY_PARAM
, (°), (vЃ))

	)

1637 
	#sk_X509_VERIFY_PARAM_fЪd_ex
(
°
, 
vЃ
и
	`SKM_sk_fЪd_ex
(
X509_VERIFY_PARAM
, (°), (vЃ))

	)

1638 
	#sk_X509_VERIFY_PARAM_dЦСe
(
°
, 
i
и
	`SKM_sk_dЦСe
(
X509_VERIFY_PARAM
, (°), (i))

	)

1639 
	#sk_X509_VERIFY_PARAM_dЦСe_±r
(
°
, 
±r
и
	`SKM_sk_dЦСe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

1640 
	#sk_X509_VERIFY_PARAM_Ъ£є
(
°
, 
vЃ
, 
i
и
	`SKM_sk_Ъ£є
(
X509_VERIFY_PARAM
, (°), (vЃ), (i))

	)

1641 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
и
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

1642 
	#sk_X509_VERIFY_PARAM_dup
(
°
и
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

1643 
	#sk_X509_VERIFY_PARAM_pЁ_дУ
(
°
, 
дУ_func
и
	`SKM_sk_pЁ_дУ
(
X509_VERIFY_PARAM
, (°), (дУ_func))

	)

1644 
	#sk_X509_VERIFY_PARAM_shiб
(
°
и
	`SKM_sk_shiб
(
X509_VERIFY_PARAM
, (°))

	)

1645 
	#sk_X509_VERIFY_PARAM_pЁ
(
°
и
	`SKM_sk_pЁ
(
X509_VERIFY_PARAM
, (°))

	)

1646 
	#sk_X509_VERIFY_PARAM_s№t
(
°
и
	`SKM_sk_s№t
(
X509_VERIFY_PARAM
, (°))

	)

1647 
	#sk_X509_VERIFY_PARAM_is_s№Лd
(
°
и
	`SKM_sk_is_s№Лd
(
X509_VERIFY_PARAM
, (°))

	)

1649 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1650 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1651 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1652 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1653 
	#ASN1_£q_Јck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1654 
	`SKM_ASN1_£q_Јck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1655 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1656 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1658 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1659 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1660 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1661 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1662 
	#ASN1_£q_Јck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1663 
	`SKM_ASN1_£q_Јck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1664 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1665 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1667 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1668 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1669 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1670 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1671 
	#ASN1_£q_Јck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1672 
	`SKM_ASN1_£q_Јck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1673 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1674 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1676 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1677 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1678 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1679 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1680 
	#ASN1_£q_Јck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1681 
	`SKM_ASN1_£q_Јck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1682 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1683 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1685 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1686 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1687 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1688 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1689 
	#ASN1_£q_Јck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1690 
	`SKM_ASN1_£q_Јck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1691 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1692 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1694 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1695 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1696 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1697 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1698 
	#ASN1_£q_Јck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1699 
	`SKM_ASN1_£q_Јck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1700 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1701 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1703 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1704 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1705 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1706 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1707 
	#ASN1_£q_Јck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1708 
	`SKM_ASN1_£q_Јck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1709 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1710 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1712 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1713 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1714 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1715 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1716 
	#ASN1_£q_Јck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1717 
	`SKM_ASN1_£q_Јck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1718 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1719 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1721 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1722 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1723 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1724 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1725 
	#ASN1_£q_Јck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1726 
	`SKM_ASN1_£q_Јck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1727 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1728 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1730 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1731 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1732 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1733 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1734 
	#ASN1_£q_Јck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1735 
	`SKM_ASN1_£q_Јck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1736 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1737 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1739 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1740 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1741 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1742 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1743 
	#ASN1_£q_Јck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1744 
	`SKM_ASN1_£q_Јck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1745 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1746 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1748 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1749 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1750 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1751 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1752 
	#ASN1_£q_Јck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1753 
	`SKM_ASN1_£q_Јck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1754 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1755 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1757 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1758 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1759 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1760 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1761 
	#ASN1_£q_Јck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1762 
	`SKM_ASN1_£q_Јck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1763 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1764 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1766 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1767 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1768 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1769 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1770 
	#ASN1_£q_Јck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1771 
	`SKM_ASN1_£q_Јck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1772 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1773 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1775 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1776 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1777 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1778 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1779 
	#ASN1_£q_Јck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1780 
	`SKM_ASN1_£q_Јck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1781 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1782 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1784 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1785 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1786 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1787 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1788 
	#ASN1_£q_Јck_X509
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1789 
	`SKM_ASN1_£q_Јck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1790 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1791 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1793 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1794 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1795 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1796 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1797 
	#ASN1_£q_Јck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1798 
	`SKM_ASN1_£q_Јck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1799 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1800 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1802 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1803 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1804 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1805 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1806 
	#ASN1_£q_Јck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1807 
	`SKM_ASN1_£q_Јck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1808 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1809 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1811 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1812 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1813 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1814 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1815 
	#ASN1_£q_Јck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1816 
	`SKM_ASN1_£q_Јck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1817 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1818 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1820 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1821 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1822 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1823 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1824 
	#ASN1_£q_Јck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1825 
	`SKM_ASN1_£q_Јck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1826 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1827 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1829 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1830 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1831 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1832 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1833 
	#ASN1_£q_Јck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1834 
	`SKM_ASN1_£q_Јck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1835 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1836 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1838 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Ћngth
, 
d2i_func
, 
дУ_func
, 
ex_Пg
, 
ex_юass
) \

1839 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Ћngth
), (
d2i_func
), (
дУ_func
), (
ex_Пg
), (
ex_юass
))

	)

1840 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_Пg
, 
ex_юass
, 
is_£t
) \

1841 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_Пg
), (
ex_юass
), (
is_£t
))

	)

1842 
	#ASN1_£q_Јck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Ћn
) \

1843 
	`SKM_ASN1_£q_Јck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Ћn
))

	)

1844 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Ћn
, 
d2i_func
, 
дУ_func
) \

1845 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Ћn
), (
d2i_func
), (
дУ_func
))

	)

1847 
	#PKCS12_deьy±_d2i_PKCS12_SAFEBAG
(
Ѓg№
, 
d2i_func
, 
дУ_func
, 
Јss
, 
Јs¶Т
, 
oщ
, 
£q
) \

1848 
	`SKM_PKCS12_deьy±_d2i
(
PKCS12_SAFEBAG
, (
Ѓg№
), (
d2i_func
), (
дУ_func
), (
Јss
), (
Јs¶Т
), (
oщ
), (
£q
))

	)

1850 
	#PKCS12_deьy±_d2i_PKCS7
(
Ѓg№
, 
d2i_func
, 
дУ_func
, 
Јss
, 
Јs¶Т
, 
oщ
, 
£q
) \

1851 
	`SKM_PKCS12_deьy±_d2i
(
PKCS7
, (
Ѓg№
), (
d2i_func
), (
дУ_func
), (
Јss
), (
Јs¶Т
), (
oщ
), (
£q
))

	)

	@/usr/include/openssl/ssl2.h

59 #iвdeа
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifdeа 
__эlu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifdeа
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #iвdeа
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 
	ss¶2_°©e_°


160 
thїe_byЛ_hЧdФ
;

161 
юЧr_Лxt
;

162 
es€≥
;

163 
s¶2_rёlback
;

167 
wnum
;

168 
w≥nd_tў
;

169 cЏ° *
w≥nd_buf
;

171 
w≥nd_off
;

172 
w≥nd_Ћn
;

173 
w≥nd_їt
;

176 
rbuf_Ћб
;

177 
rbuf_offs
;

178 *
rbuf
;

179 *
wbuf
;

181 *
wrЩe_±r
;

184 
ЈddЪg
;

185 
ЊТgth
;

186 
њщ_d©a_Ћngth
;

187 
wЋngth
;

188 
waщ_d©a_Ћngth
;

189 *
њщ_d©a
;

190 *
waщ_d©a
;

191 *
mac_d©a
;

193 *
їad_key
;

194 *
wrЩe_key
;

197 
chЃЋnge_Ћngth
;

198 
chЃЋnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

199 
cЏn_id_Ћngth
;

200 
cЏn_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

201 
key_m©ФЯl_Ћngth
;

202 
key_m©ФЯl
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

204 
їad_£quТы
;

205 
wrЩe_£quТы
;

208 
cЏn_id_Ћngth
;

209 
ыє_ty≥
;

210 
ыє_Ћngth
;

211 
c¶
;

212 
юЧr
;

213 
Тc
;

214 
cю
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

215 
cЭhФ_•ec_Ћngth
;

216 
£ssiЏ_id_Ћngth
;

217 
юТ
;

218 
ЊТ
;

219 } 
tmp
;

220 } 
	tSSL2_STATE
;

224 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

225 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

226 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

227 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

228 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

244 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

245 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

246 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

247 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

264 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ssl23.h

59 #iвdeа
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifdeа 
__эlu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ssl3.h

117 #iвdeа
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #iвdeа
OPENSSL_NO_COMP


121 
	~<ЁТs¶/comp.h
>

123 
	~<ЁТs¶/bufгr.h
>

124 
	~<ЁТs¶/evp.h
>

125 
	~<ЁТs¶/s¶.h
>

126 
	~<ЁТs¶/pq_comЈt.h
>

128 #ifdeа 
__эlu•lus


132 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

133 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

134 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

135 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

136 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

137 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

138 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

139 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

140 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

141 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

143 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

144 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

145 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

146 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

147 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

148 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

150 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

151 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

152 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

153 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

154 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

155 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

157 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

158 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

159 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

160 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

161 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

163 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

164 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

168 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

173 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

174 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

175 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

176 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

177 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

178 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

179 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

180 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

182 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

183 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

184 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

185 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

186 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

187 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

189 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

190 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

191 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

192 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

193 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

194 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

195 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

196 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

197 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

198 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

200 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

201 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

202 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

203 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

204 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

207 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

209 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

210 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

211 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

214 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

215 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

216 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

217 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

218 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

220 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

221 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

222 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

224 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

225 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

226 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

227 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

228 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

229 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

230 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

231 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

233 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

234 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

235 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

236 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

237 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

238 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

240 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

241 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

243 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

244 
	#SSL3_RANDOM_SIZE
 32

	)

245 
	#SSL3_SESSION_ID_SIZE
 32

	)

246 
	#SSL3_RT_HEADER_LENGTH
 5

	)

249 #iа
defЪed
(
OPENSSL_SYS_WIN16
) || \

250 (
defЪed
(
OPENSSL_SYS_MSDOS
и&& !defЪed(
OPENSSL_SYS_WIN32
))

251 
	#SSL3_RT_MAX_EXTRA
 (14000)

	)

253 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

256 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

257 #ifdeа
OPENSSL_NO_COMP


258 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

260 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 (1024+
SSL3_RT_MAX_PLAIN_LENGTH
)

	)

262 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 (1024+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

263 
	#SSL3_RT_MAX_PACKET_SIZE
 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

264 
	#SSL3_RT_MAX_DATA_SIZE
 (1024*1024)

	)

266 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

267 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

269 
	#SSL3_VERSION
 0x0300

	)

270 
	#SSL3_VERSION_MAJOR
 0x03

	)

271 
	#SSL3_VERSION_MINOR
 0x00

	)

273 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

274 
	#SSL3_RT_ALERT
 21

	)

275 
	#SSL3_RT_HANDSHAKE
 22

	)

276 
	#SSL3_RT_APPLICATION_DATA
 23

	)

278 
	#SSL3_AL_WARNING
 1

	)

279 
	#SSL3_AL_FATAL
 2

	)

281 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

282 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

283 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

284 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

285 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

286 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

287 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

288 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

289 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

290 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

291 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

292 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

294 
	ss¶3_їc№d_°


296  
ty≥
;

297  
Ћngth
;

298  
off
;

299  *
d©a
;

300  *
Ъput
;

301  *
comp
;

302  
Хoch
;

303  
PQ_64BIT
 
£q_num
;

304 } 
	tSSL3_RECORD
;

306 
	ss¶3_bufгr_°


308 *
buf
;

310 
size_t
 
Ћn
;

311 
off£t
;

312 
Ћб
;

313 } 
	tSSL3_BUFFER
;

315 
	#SSL3_CT_RSA_SIGN
 1

	)

316 
	#SSL3_CT_DSS_SIGN
 2

	)

317 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

318 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

319 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

320 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

321 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

326 
	#SSL3_CT_NUMBER
 7

	)

329 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

330 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

331 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

332 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

334 
	ss¶3_°©e_°


336 
жags
;

337 
dЦay_buf_pЁ_їt
;

339 
їad_£quТы
[8];

340 
їad_mac_£ьС
[
EVP_MAX_MD_SIZE
];

341 
wrЩe_£quТы
[8];

342 
wrЩe_mac_£ьС
[
EVP_MAX_MD_SIZE
];

344 
£rvФ_њndom
[
SSL3_RANDOM_SIZE
];

345 
юЫЅ_њndom
[
SSL3_RANDOM_SIZE
];

348 
√ed_em±y_дagmТts
;

349 
em±y_дagmТt_dЏe
;

351 
SSL3_BUFFER
 
rbuf
;

352 
SSL3_BUFFER
 
wbuf
;

354 
SSL3_RECORD
 
Љec
;

355 
SSL3_RECORD
 
wїc
;

359 
ЃФt_дagmТt
[2];

360 
ЃФt_дagmТt_Ћn
;

361 
h™dshake_дagmТt
[4];

362 
h™dshake_дagmТt_Ћn
;

365 
wnum
;

366 
w≥nd_tў
;

367 
w≥nd_ty≥
;

368 
w≥nd_їt
;

369 cЏ° *
w≥nd_buf
;

372 
EVP_MD_CTX
 
fЪish_dg°1
;

373 
EVP_MD_CTX
 
fЪish_dg°2
;

377 
ch™ge_cЭhФ_•ec
;

379 
wђn_ЃФt
;

380 
зПl_ЃФt
;

383 
ЃФt_di•©ch
;

384 
£nd_ЃФt
[2];

388 
ї√gўЯЛ
;

389 
tўЃ_ї√gўЯtiЏs
;

390 
num_ї√gўЯtiЏs
;

392 
Ъ_їad_≠p_d©a
;

396 
ыє_vФify_md
[
EVP_MAX_MD_SIZE
*2];

399 
fЪish_md
[
EVP_MAX_MD_SIZE
*2];

400 
fЪish_md_Ћn
;

401 
≥Ф_fЪish_md
[
EVP_MAX_MD_SIZE
*2];

402 
≥Ф_fЪish_md_Ћn
;

404 
mesІge_size
;

405 
mesІge_ty≥
;

408 
SSL_CIPHER
 *
√w_cЭhФ
;

409 #iвdeа
OPENSSL_NO_DH


410 
DH
 *
dh
;

413 #iвdeа
OPENSSL_NO_ECDH


414 
EC_KEY
 *
ecdh
;

418 
√xt_°©e
;

420 
їu£_mesІge
;

423 
ыє_їq
;

424 
щy≥_num
;

425 
щy≥
[
SSL3_CT_NUMBER
];

426 
STACK_OF
(
X509_NAME
и*
€_«mes
;

428 
u£_rІ_tmp
;

430 
key_block_Ћngth
;

431 *
key_block
;

433 cЏ° 
EVP_CIPHER
 *
√w_sym_Тc
;

434 cЏ° 
EVP_MD
 *
√w_hash
;

435 #iвdeа
OPENSSL_NO_COMP


436 cЏ° 
SSL_COMP
 *
√w_comіessiЏ
;

438 *
√w_comіessiЏ
;

440 
ыє_їque°
;

441 } 
tmp
;

443 } 
	tSSL3_STATE
;

449 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

451 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

452 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

454 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

455 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

456 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

457 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

458 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

459 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

460 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

461 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

462 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

463 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

464 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

465 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

467 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

468 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

469 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

470 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

471 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

472 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

473 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

474 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

475 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

476 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

477 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

478 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

480 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

481 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

482 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

483 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

484 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

485 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

489 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

492 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

493 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

494 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

496 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

497 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

498 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

499 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

500 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

501 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

502 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

503 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

504 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

505 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

506 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

507 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

508 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

509 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

510 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

512 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

513 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

514 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

515 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

516 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

517 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

518 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

519 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

520 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

521 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

523 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

524 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

525 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

526 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

527 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

528 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

530 
	#SSL3_MT_HELLO_REQUEST
 0

	)

531 
	#SSL3_MT_CLIENT_HELLO
 1

	)

532 
	#SSL3_MT_SERVER_HELLO
 2

	)

533 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

534 
	#SSL3_MT_CERTIFICATE
 11

	)

535 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

536 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

537 
	#SSL3_MT_SERVER_DONE
 14

	)

538 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

539 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

540 
	#SSL3_MT_FINISHED
 20

	)

541 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

544 
	#SSL3_MT_CCS
 1

	)

547 
	#SSL3_CC_READ
 0x01

	)

548 
	#SSL3_CC_WRITE
 0x02

	)

549 
	#SSL3_CC_CLIENT
 0x10

	)

550 
	#SSL3_CC_SERVER
 0x20

	)

551 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

552 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

553 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

554 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

556 #ifdeа 
__эlu•lus


	@/usr/include/openssl/stack.h

59 #iвdeа
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifdeа 
__эlu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s№Лd
;

72 
num_Ѓloc
;

73 (*
comp
)(const * const *, const * const *);

74 } 
	tSTACK
;

76 
	#M_sk_num
(
sk
и((skи? (sk)->
num
:-1)

	)

77 
	#M_sk_vЃue
(
sk
,
n
и((skи? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(cЏ° 
STACK
 *);

80 *
sk_vЃue
(cЏ° 
STACK
 *, );

82 *
sk_£t
(
STACK
 *, , *);

84 
STACK
 *
sk_√w
((*
cmp
)(const * const *, const * const *));

85 
STACK
 *
sk_√w_nuќ
();

86 
sk_дУ
(
STACK
 *);

87 
sk_pЁ_дУ
(
STACK
 *
°
, (*
func
)(*));

88 
sk_Ъ£є
(
STACK
 *
sk
,*
d©a
,
whФe
);

89 *
sk_dЦСe
(
STACK
 *
°
,
loc
);

90 *
sk_dЦСe_±r
(
STACK
 *
°
, *
p
);

91 
sk_fЪd
(
STACK
 *
°
,*
d©a
);

92 
sk_fЪd_ex
(
STACK
 *
°
,*
d©a
);

93 
sk_push
(
STACK
 *
°
,*
d©a
);

94 
sk_unshiб
(
STACK
 *
°
,*
d©a
);

95 *
sk_shiб
(
STACK
 *
°
);

96 *
sk_pЁ
(
STACK
 *
°
);

97 
sk_zФo
(
STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
STACK
 *
sk
, (*
c
)(const * const *,

101 
STACK
 *
sk_dup
(STACK *
°
);

102 
sk_s№t
(
STACK
 *
°
);

103 
sk_is_s№Лd
(cЏ° 
STACK
 *
°
);

105 #ifdeа 
__эlu•lus


	@/usr/include/openssl/symhacks.h

55 #iвdeа
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<ЁТs¶/e_os2.h
>

63 #ifdeа
OPENSSL_SYS_VMS


66 #undeа
CRYPTO_gС_ex_d©a_imґemТПtiЏ


67 
	#CRYPTO_gС_ex_d©a_imґemТПtiЏ
 
CRYPTO_gС_ex_d©a_imґ


	)

68 #undeа
CRYPTO_£t_ex_d©a_imґemТПtiЏ


69 
	#CRYPTO_£t_ex_d©a_imґemТПtiЏ
 
CRYPTO_£t_ex_d©a_imґ


	)

72 #undeа
ASN1_STRING_£t_deзu…_mask_asc


73 
	#ASN1_STRING_£t_deзu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

77 #undeа
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


78 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

79 #undeа
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


80 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

85 #undeа
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


86 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

87 #undeа
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


88 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

93 #undeа
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


94 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

95 #undeа
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


96 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

100 #undeа
PEM_їad_NETSCAPE_CERT_SEQUENCE


101 
	#PEM_їad_NETSCAPE_CERT_SEQUENCE
 
PEM_їad_NS_CERT_SEQ


	)

102 #undeа
PEM_wrЩe_NETSCAPE_CERT_SEQUENCE


103 
	#PEM_wrЩe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrЩe_NS_CERT_SEQ


	)

104 #undeа
PEM_їad_bio_NETSCAPE_CERT_SEQUENCE


105 
	#PEM_їad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_їad_bio_NS_CERT_SEQ


	)

106 #undeа
PEM_wrЩe_bio_NETSCAPE_CERT_SEQUENCE


107 
	#PEM_wrЩe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrЩe_bio_NS_CERT_SEQ


	)

108 #undeа
PEM_wrЩe_cb_bio_NETSCAPE_CERT_SEQUENCE


109 
	#PEM_wrЩe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrЩe_cb_bio_NS_CERT_SEQ


	)

112 #undeа
PEM_їad_PKCS8_PRIV_KEY_INFO


113 
	#PEM_їad_PKCS8_PRIV_KEY_INFO
 
PEM_їad_P8_PRIV_KEY_INFO


	)

114 #undeа
PEM_wrЩe_PKCS8_PRIV_KEY_INFO


115 
	#PEM_wrЩe_PKCS8_PRIV_KEY_INFO
 
PEM_wrЩe_P8_PRIV_KEY_INFO


	)

116 #undeа
PEM_їad_bio_PKCS8_PRIV_KEY_INFO


117 
	#PEM_їad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_їad_bio_P8_PRIV_KEY_INFO


	)

118 #undeа
PEM_wrЩe_bio_PKCS8_PRIV_KEY_INFO


119 
	#PEM_wrЩe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrЩe_bio_P8_PRIV_KEY_INFO


	)

120 #undeа
PEM_wrЩe_cb_bio_PKCS8_PRIV_KEY_INFO


121 
	#PEM_wrЩe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wє_cb_bio_P8_PRIV_KEY_INFO


	)

124 #undeа
PEM_wrЩe_bio_PKCS8Priv©eKey_nid


125 
	#PEM_wrЩe_bio_PKCS8Priv©eKey_nid
 
PEM_wrЩe_bio_PKCS8PrivKey_nid


	)

128 #undeа
X509_REVOKED_gС_ext_by_ьЩi€l


129 
	#X509_REVOKED_gС_ext_by_ьЩi€l
 
X509_REVOKED_gС_ext_by_ьЩic


	)

130 #undeа
X509_pёicy_МУ_gС0_u£r_pёicЫs


131 
	#X509_pёicy_МУ_gС0_u£r_pёicЫs
 
X509_pcy_МУ_gС0_u§_pёicЫs


	)

132 #undeа
X509_pёicy_node_gС0_quЃifЫrs


133 
	#X509_pёicy_node_gС0_quЃifЫrs
 
X509_pcy_node_gС0_quЃifЫrs


	)

134 #undeа
X509_STORE_CTX_gС_exґicЩ_pёicy


135 
	#X509_STORE_CTX_gС_exґicЩ_pёicy
 
X509_STORE_CTX_gС_exґ_pёicy


	)

138 #undeа
CRYPTO_£t_dy∆ock_de°roy_€ќback


139 
	#CRYPTO_£t_dy∆ock_de°roy_€ќback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

140 #undeа
CRYPTO_£t_dy∆ock_ьЧЛ_€ќback


141 
	#CRYPTO_£t_dy∆ock_ьЧЛ_€ќback
 
CRYPTO_£t_dy∆ock_ьЧЛ_cb


	)

142 #undeа
CRYPTO_£t_dy∆ock_lock_€ќback


143 
	#CRYPTO_£t_dy∆ock_lock_€ќback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

144 #undeа
CRYPTO_gС_dy∆ock_lock_€ќback


145 
	#CRYPTO_gС_dy∆ock_lock_€ќback
 
CRYPTO_gС_dy∆ock_lock_cb


	)

146 #undeа
CRYPTO_gС_dy∆ock_de°roy_€ќback


147 
	#CRYPTO_gС_dy∆ock_de°roy_€ќback
 
CRYPTO_gС_dy∆ock_de°roy_cb


	)

148 #undeа
CRYPTO_gС_dy∆ock_ьЧЛ_€ќback


149 
	#CRYPTO_gС_dy∆ock_ьЧЛ_€ќback
 
CRYPTO_gС_dy∆ock_ьЧЛ_cb


	)

150 #undeа
CRYPTO_£t_locked_mem_ex_funщiЏs


151 
	#CRYPTO_£t_locked_mem_ex_funщiЏs
 
CRYPTO_£t_locked_mem_ex_funcs


	)

152 #undeа
CRYPTO_gС_locked_mem_ex_funщiЏs


153 
	#CRYPTO_gС_locked_mem_ex_funщiЏs
 
CRYPTO_gС_locked_mem_ex_funcs


	)

156 #undeа
SSL_CTX_£t_deзu…_vФify_Јths


157 
	#SSL_CTX_£t_deзu…_vФify_Јths
 
SSL_CTX_£t_def_vФify_Јths


	)

158 #undeа
SSL_gС_ex_d©a_X509_STORE_CTX_idx


159 
	#SSL_gС_ex_d©a_X509_STORE_CTX_idx
 
SSL_gС_ex_d_X509_STORE_CTX_idx


	)

160 #undeа
SSL_add_fЮe_ыє_subjeщs_to_°ack


161 
	#SSL_add_fЮe_ыє_subjeщs_to_°ack
 
SSL_add_fЮe_ыє_subjs_to_°k


	)

162 #undeа
SSL_add_dЬ_ыє_subjeщs_to_°ack


163 
	#SSL_add_dЬ_ыє_subjeщs_to_°ack
 
SSL_add_dЬ_ыє_subjs_to_°k


	)

164 #undeа
SSL_CTX_u£_ыєifi€Л_chaЪ_fЮe


165 
	#SSL_CTX_u£_ыєifi€Л_chaЪ_fЮe
 
SSL_CTX_u£_ыє_chaЪ_fЮe


	)

166 #undeа
SSL_CTX_£t_ыє_vФify_€ќback


167 
	#SSL_CTX_£t_ыє_vФify_€ќback
 
SSL_CTX_£t_ыє_vФify_cb


	)

168 #undeа
SSL_CTX_£t_deзu…_Јsswd_cb_u£rd©a


169 
	#SSL_CTX_£t_deзu…_Јsswd_cb_u£rd©a
 
SSL_CTX_£t_def_Јsswd_cb_ud


	)

170 #undeа
SSL_COMP_gС_comіessiЏ_mСhods


171 
	#SSL_COMP_gС_comіessiЏ_mСhods
 
SSL_COMP_gС_comіess_mСhods


	)

174 #undeа
ENGINE_gС_deзu…_BN_mod_exp_ьt


175 
	#ENGINE_gС_deзu…_BN_mod_exp_ьt
 
ENGINE_gС_def_BN_mod_exp_ьt


	)

176 #undeа
ENGINE_£t_deзu…_BN_mod_exp_ьt


177 
	#ENGINE_£t_deзu…_BN_mod_exp_ьt
 
ENGINE_£t_def_BN_mod_exp_ьt


	)

178 #undeа
ENGINE_£t_lяd_іivkey_funщiЏ


179 
	#ENGINE_£t_lяd_іivkey_funщiЏ
 
ENGINE_£t_lяd_іivkey_в


	)

180 #undeа
ENGINE_gС_lяd_іivkey_funщiЏ


181 
	#ENGINE_gС_lяd_іivkey_funщiЏ
 
ENGINE_gС_lяd_іivkey_в


	)

184 #undeа
OCSP_REQUEST_gС_ext_by_ьЩi€l


185 
	#OCSP_REQUEST_gС_ext_by_ьЩi€l
 
OCSP_REQUEST_gС_ext_by_ьЩ


	)

186 #undeа
OCSP_BASICRESP_gС_ext_by_ьЩi€l


187 
	#OCSP_BASICRESP_gС_ext_by_ьЩi€l
 
OCSP_BASICRESP_gС_ext_by_ьЩ


	)

188 #undeа
OCSP_SINGLERESP_gС_ext_by_ьЩi€l


189 
	#OCSP_SINGLERESP_gС_ext_by_ьЩi€l
 
OCSP_SINGLERESP_gС_ext_by_ьЩ


	)

192 #undeа
_os¶_ёd_des_ede3_cfb64_Тьy±


193 
	#_os¶_ёd_des_ede3_cfb64_Тьy±
 
_os¶_odes_ede3_cfb64_Тьy±


	)

194 #undeа
_os¶_ёd_des_ede3_ofb64_Тьy±


195 
	#_os¶_ёd_des_ede3_ofb64_Тьy±
 
_os¶_odes_ede3_ofb64_Тьy±


	)

198 #undeа
OPENSSL_add_Ѓl_Ѓg№Щhms_nocЏf


199 
	#OPENSSL_add_Ѓl_Ѓg№Щhms_nocЏf
 
OPENSSL_add_Ѓl_Ѓgo_nocЏf


	)

200 #undeа
OPENSSL_add_Ѓl_Ѓg№Щhms_cЏf


201 
	#OPENSSL_add_Ѓl_Ѓg№Щhms_cЏf
 
OPENSSL_add_Ѓl_Ѓgo_cЏf


	)

204 #undeа
EC_GROUP_£t_poЪt_cЏvФsiЏ_f№m


205 
	#EC_GROUP_£t_poЪt_cЏvФsiЏ_f№m
 
EC_GROUP_£t_poЪt_cЏv_f№m


	)

206 #undeа
EC_GROUP_gС_poЪt_cЏvФsiЏ_f№m


207 
	#EC_GROUP_gС_poЪt_cЏvФsiЏ_f№m
 
EC_GROUP_gС_poЪt_cЏv_f№m


	)

208 #undeа
EC_GROUP_юЧr_дУ_Ѓl_exМa_d©a


209 
	#EC_GROUP_юЧr_дУ_Ѓl_exМa_d©a
 
EC_GROUP_юr_дУ_Ѓl_xМa_d©a


	)

210 #undeа
EC_POINT_£t_Jіojeщive_co№dЪ©es_GFp


211 
	#EC_POINT_£t_Jіojeщive_co№dЪ©es_GFp
 \

212 
EC_POINT_£t_Jіoj_co№ds_GFp


	)

213 #undeа
EC_POINT_gС_Jіojeщive_co№dЪ©es_GFp


214 
	#EC_POINT_gС_Jіojeщive_co№dЪ©es_GFp
 \

215 
EC_POINT_gС_Jіoj_co№ds_GFp


	)

216 #undeа
EC_POINT_£t_affЪe_co№dЪ©es_GFp


217 
	#EC_POINT_£t_affЪe_co№dЪ©es_GFp
 
EC_POINT_£t_affЪe_co№ds_GFp


	)

218 #undeа
EC_POINT_gС_affЪe_co№dЪ©es_GFp


219 
	#EC_POINT_gС_affЪe_co№dЪ©es_GFp
 
EC_POINT_gС_affЪe_co№ds_GFp


	)

220 #undeа
EC_POINT_£t_comіes£d_co№dЪ©es_GFp


221 
	#EC_POINT_£t_comіes£d_co№dЪ©es_GFp
 
EC_POINT_£t_comі_co№ds_GFp


	)

222 #undeа
EC_POINT_£t_affЪe_co№dЪ©es_GF2m


223 
	#EC_POINT_£t_affЪe_co№dЪ©es_GF2m
 
EC_POINT_£t_affЪe_co№ds_GF2m


	)

224 #undeа
EC_POINT_gС_affЪe_co№dЪ©es_GF2m


225 
	#EC_POINT_gС_affЪe_co№dЪ©es_GF2m
 
EC_POINT_gС_affЪe_co№ds_GF2m


	)

226 #undeа
EC_POINT_£t_comіes£d_co№dЪ©es_GF2m


227 
	#EC_POINT_£t_comіes£d_co№dЪ©es_GF2m
 \

228 
EC_POINT_£t_comі_co№ds_GF2m


	)

229 #undeа
ec_GF2m_simґe_group_юЧr_fЪish


230 
	#ec_GF2m_simґe_group_юЧr_fЪish
 
ec_GF2m_simґe_gљ_юr_fЪish


	)

231 #undeа
ec_GF2m_simґe_group_check_disьimЪ™t


232 
	#ec_GF2m_simґe_group_check_disьimЪ™t
 
ec_GF2m_simґe_gљ_chk_disьim


	)

233 #undeа
ec_GF2m_simґe_poЪt_юЧr_fЪish


234 
	#ec_GF2m_simґe_poЪt_юЧr_fЪish
 
ec_GF2m_simґe_±_юr_fЪish


	)

235 #undeа
ec_GF2m_simґe_poЪt_£t_to_ЪfЪЩy


236 
	#ec_GF2m_simґe_poЪt_£t_to_ЪfЪЩy
 
ec_GF2m_simґe_±_£t_to_Ъf


	)

237 #undeа
ec_GF2m_simґe_poЪts_make_affЪe


238 
	#ec_GF2m_simґe_poЪts_make_affЪe
 
ec_GF2m_simґe_±s_make_affЪe


	)

239 #undeа
ec_GF2m_simґe_poЪt_£t_affЪe_co№dЪ©es


240 
	#ec_GF2m_simґe_poЪt_£t_affЪe_co№dЪ©es
 \

241 
ec_GF2m_smp_±_£t_af_co№ds


	)

242 #undeа
ec_GF2m_simґe_poЪt_gС_affЪe_co№dЪ©es


243 
	#ec_GF2m_simґe_poЪt_gС_affЪe_co№dЪ©es
 \

244 
ec_GF2m_smp_±_gС_af_co№ds


	)

245 #undeа
ec_GF2m_simґe_£t_comіes£d_co№dЪ©es


246 
	#ec_GF2m_simґe_£t_comіes£d_co№dЪ©es
 \

247 
ec_GF2m_smp_£t_comі_co№ds


	)

248 #undeа
ec_GFp_simґe_group_£t_curve_GFp


249 
	#ec_GFp_simґe_group_£t_curve_GFp
 
ec_GFp_simґe_gљ_£t_curve_GFp


	)

250 #undeа
ec_GFp_simґe_group_gС_curve_GFp


251 
	#ec_GFp_simґe_group_gС_curve_GFp
 
ec_GFp_simґe_gљ_gС_curve_GFp


	)

252 #undeа
ec_GFp_simґe_group_юЧr_fЪish


253 
	#ec_GFp_simґe_group_юЧr_fЪish
 
ec_GFp_simґe_gљ_юЧr_fЪish


	)

254 #undeа
ec_GFp_simґe_group_£t_gТФ©№


255 
	#ec_GFp_simґe_group_£t_gТФ©№
 
ec_GFp_simґe_gљ_£t_gТФ©№


	)

256 #undeа
ec_GFp_simґe_group_gС0_gТФ©№


257 
	#ec_GFp_simґe_group_gС0_gТФ©№
 
ec_GFp_simґe_gљ_gt0_gТФ©№


	)

258 #undeа
ec_GFp_simґe_group_gС_coзщ№


259 
	#ec_GFp_simґe_group_gС_coзщ№
 
ec_GFp_simґe_gљ_gС_coзщ№


	)

260 #undeа
ec_GFp_simґe_poЪt_юЧr_fЪish


261 
	#ec_GFp_simґe_poЪt_юЧr_fЪish
 
ec_GFp_simґe_±_юЧr_fЪish


	)

262 #undeа
ec_GFp_simґe_poЪt_£t_to_ЪfЪЩy


263 
	#ec_GFp_simґe_poЪt_£t_to_ЪfЪЩy
 
ec_GFp_simґe_±_£t_to_Ъf


	)

264 #undeа
ec_GFp_simґe_poЪts_make_affЪe


265 
	#ec_GFp_simґe_poЪts_make_affЪe
 
ec_GFp_simґe_±s_make_affЪe


	)

266 #undeа
ec_GFp_simґe_group_gС_curve_GFp


267 
	#ec_GFp_simґe_group_gС_curve_GFp
 
ec_GFp_simґe_gљ_gС_curve_GFp


	)

268 #undeа
ec_GFp_simґe_£t_Jіojeщive_co№dЪ©es_GFp


269 
	#ec_GFp_simґe_£t_Jіojeщive_co№dЪ©es_GFp
 \

270 
ec_GFp_smp_£t_Jіoj_co№ds_GFp


	)

271 #undeа
ec_GFp_simґe_gС_Jіojeщive_co№dЪ©es_GFp


272 
	#ec_GFp_simґe_gС_Jіojeщive_co№dЪ©es_GFp
 \

273 
ec_GFp_smp_gС_Jіoj_co№ds_GFp


	)

274 #undeа
ec_GFp_simґe_poЪt_£t_affЪe_co№dЪ©es_GFp


275 
	#ec_GFp_simґe_poЪt_£t_affЪe_co№dЪ©es_GFp
 \

276 
ec_GFp_smp_±_£t_af_co№ds_GFp


	)

277 #undeа
ec_GFp_simґe_poЪt_gС_affЪe_co№dЪ©es_GFp


278 
	#ec_GFp_simґe_poЪt_gС_affЪe_co№dЪ©es_GFp
 \

279 
ec_GFp_smp_±_gС_af_co№ds_GFp


	)

280 #undeа
ec_GFp_simґe_£t_comіes£d_co№dЪ©es_GFp


281 
	#ec_GFp_simґe_£t_comіes£d_co№dЪ©es_GFp
 \

282 
ec_GFp_smp_£t_comі_co№ds_GFp


	)

283 #undeа
ec_GFp_simґe_poЪt_£t_affЪe_co№dЪ©es


284 
	#ec_GFp_simґe_poЪt_£t_affЪe_co№dЪ©es
 \

285 
ec_GFp_smp_±_£t_af_co№ds


	)

286 #undeа
ec_GFp_simґe_poЪt_gС_affЪe_co№dЪ©es


287 
	#ec_GFp_simґe_poЪt_gС_affЪe_co№dЪ©es
 \

288 
ec_GFp_smp_±_gС_af_co№ds


	)

289 #undeа
ec_GFp_simґe_£t_comіes£d_co№dЪ©es


290 
	#ec_GFp_simґe_£t_comіes£d_co№dЪ©es
 \

291 
ec_GFp_smp_£t_comі_co№ds


	)

292 #undeа
ec_GFp_simґe_group_check_disьimЪ™t


293 
	#ec_GFp_simґe_group_check_disьimЪ™t
 
ec_GFp_simґe_gљ_chk_disьim


	)

296 #undeа
STORE_mСhod_£t_ЪЩЯli£_funщiЏ


297 
	#STORE_mСhod_£t_ЪЩЯli£_funщiЏ
 
STORE_mСh_£t_ЪЩЯli£_в


	)

298 #undeа
STORE_mСhod_£t_юЧnup_funщiЏ


299 
	#STORE_mСhod_£t_юЧnup_funщiЏ
 
STORE_mСh_£t_юЧnup_в


	)

300 #undeа
STORE_mСhod_£t_gТФ©e_funщiЏ


301 
	#STORE_mСhod_£t_gТФ©e_funщiЏ
 
STORE_mСh_£t_gТФ©e_в


	)

302 #undeа
STORE_mСhod_£t_modify_funщiЏ


303 
	#STORE_mСhod_£t_modify_funщiЏ
 
STORE_mСh_£t_modify_в


	)

304 #undeа
STORE_mСhod_£t_їvoke_funщiЏ


305 
	#STORE_mСhod_£t_їvoke_funщiЏ
 
STORE_mСh_£t_їvoke_в


	)

306 #undeа
STORE_mСhod_£t_dЦСe_funщiЏ


307 
	#STORE_mСhod_£t_dЦСe_funщiЏ
 
STORE_mСh_£t_dЦСe_в


	)

308 #undeа
STORE_mСhod_£t_li°_°ђt_funщiЏ


309 
	#STORE_mСhod_£t_li°_°ђt_funщiЏ
 
STORE_mСh_£t_li°_°ђt_в


	)

310 #undeа
STORE_mСhod_£t_li°_√xt_funщiЏ


311 
	#STORE_mСhod_£t_li°_√xt_funщiЏ
 
STORE_mСh_£t_li°_√xt_в


	)

312 #undeа
STORE_mСhod_£t_li°_Тd_funщiЏ


313 
	#STORE_mСhod_£t_li°_Тd_funщiЏ
 
STORE_mСh_£t_li°_Тd_в


	)

314 #undeа
STORE_mСhod_£t_upd©e_°№e_funщiЏ


315 
	#STORE_mСhod_£t_upd©e_°№e_funщiЏ
 
STORE_mСh_£t_upd©e_°№e_в


	)

316 #undeа
STORE_mСhod_£t_lock_°№e_funщiЏ


317 
	#STORE_mСhod_£t_lock_°№e_funщiЏ
 
STORE_mСh_£t_lock_°№e_в


	)

318 #undeа
STORE_mСhod_£t_u∆ock_°№e_funщiЏ


319 
	#STORE_mСhod_£t_u∆ock_°№e_funщiЏ
 
STORE_mСh_£t_u∆ock_°№e_в


	)

320 #undeа
STORE_mСhod_gС_ЪЩЯli£_funщiЏ


321 
	#STORE_mСhod_gС_ЪЩЯli£_funщiЏ
 
STORE_mСh_gС_ЪЩЯli£_в


	)

322 #undeа
STORE_mСhod_gС_юЧnup_funщiЏ


323 
	#STORE_mСhod_gС_юЧnup_funщiЏ
 
STORE_mСh_gС_юЧnup_в


	)

324 #undeа
STORE_mСhod_gС_gТФ©e_funщiЏ


325 
	#STORE_mСhod_gС_gТФ©e_funщiЏ
 
STORE_mСh_gС_gТФ©e_в


	)

326 #undeа
STORE_mСhod_gС_modify_funщiЏ


327 
	#STORE_mСhod_gС_modify_funщiЏ
 
STORE_mСh_gС_modify_в


	)

328 #undeа
STORE_mСhod_gС_їvoke_funщiЏ


329 
	#STORE_mСhod_gС_їvoke_funщiЏ
 
STORE_mСh_gС_їvoke_в


	)

330 #undeа
STORE_mСhod_gС_dЦСe_funщiЏ


331 
	#STORE_mСhod_gС_dЦСe_funщiЏ
 
STORE_mСh_gС_dЦСe_в


	)

332 #undeа
STORE_mСhod_gС_li°_°ђt_funщiЏ


333 
	#STORE_mСhod_gС_li°_°ђt_funщiЏ
 
STORE_mСh_gС_li°_°ђt_в


	)

334 #undeа
STORE_mСhod_gС_li°_√xt_funщiЏ


335 
	#STORE_mСhod_gС_li°_√xt_funщiЏ
 
STORE_mСh_gС_li°_√xt_в


	)

336 #undeа
STORE_mСhod_gС_li°_Тd_funщiЏ


337 
	#STORE_mСhod_gС_li°_Тd_funщiЏ
 
STORE_mСh_gС_li°_Тd_в


	)

338 #undeа
STORE_mСhod_gС_upd©e_°№e_funщiЏ


339 
	#STORE_mСhod_gС_upd©e_°№e_funщiЏ
 
STORE_mСh_gС_upd©e_°№e_в


	)

340 #undeа
STORE_mСhod_gС_lock_°№e_funщiЏ


341 
	#STORE_mСhod_gС_lock_°№e_funщiЏ
 
STORE_mСh_gС_lock_°№e_в


	)

342 #undeа
STORE_mСhod_gС_u∆ock_°№e_funщiЏ


343 
	#STORE_mСhod_gС_u∆ock_°№e_funщiЏ
 
STORE_mСh_gС_u∆ock_°№e_в


	)

349 #iа
defЪed
(
OPENSSL_SYS_WIN16
и|| defЪed(
OPENSSL_SYS_VMS
и|| defЪed(
OPENSSL_SYS_OS2
)

350 #undeа
ERR_lяd_CRYPTO_°rЪgs


351 
	#ERR_lяd_CRYPTO_°rЪgs
 
ERR_lяd_CRYPTOlib_°rЪgs


	)

352 #undeа
OCSP_ьlID_√w


353 
	#OCSP_ьlID_√w
 
OCSP_ьlID2_√w


	)

355 #undeа
d2i_ECPARAMETERS


356 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

357 #undeа
i2d_ECPARAMETERS


358 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

359 #undeа
d2i_ECPKPARAMETERS


360 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

361 #undeа
i2d_ECPKPARAMETERS


362 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

370 #undeа
X509v3_юЧnup_exЛnsiЏs


371 
	#X509v3_юЧnup_exЛnsiЏs
 
oX509v3_юЧnup_exЛnsiЏs


	)

372 #undeа
X509v3_add_exЛnsiЏ


373 
	#X509v3_add_exЛnsiЏ
 
oX509v3_add_exЛnsiЏ


	)

374 #undeа
X509v3_add_√ts€≥_exЛnsiЏs


375 
	#X509v3_add_√ts€≥_exЛnsiЏs
 
oX509v3_add_√ts€≥_exЛnsiЏs


	)

376 #undeа
X509v3_add_°™dђd_exЛnsiЏs


377 
	#X509v3_add_°™dђd_exЛnsiЏs
 
oX509v3_add_°™dђd_exЛnsiЏs


	)

	@/usr/include/openssl/tls1.h

72 #iвdeа
HEADER_TLS1_H


73 
	#HEADER_TLS1_H


	)

75 
	~<ЁТs¶/bufгr.h
>

77 #ifdeа 
__эlu•lus


81 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

83 
	#TLS1_VERSION
 0x0301

	)

84 
	#TLS1_VERSION_MAJOR
 0x03

	)

85 
	#TLS1_VERSION_MINOR
 0x01

	)

87 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

88 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

89 
	#TLS1_AD_UNKNOWN_CA
 48

	)

90 
	#TLS1_AD_ACCESS_DENIED
 49

	)

91 
	#TLS1_AD_DECODE_ERROR
 50

	)

92 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

93 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

94 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

95 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

96 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

97 
	#TLS1_AD_USER_CANCELLED
 90

	)

98 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

100 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

101 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

102 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

103 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

104 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

105 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

108 
	#TLSEXT_TYPE_£rvФ_«me
 0

	)

109 
	#TLSEXT_TYPE_max_дagmТt_Ћngth
 1

	)

110 
	#TLSEXT_TYPE_юЫЅ_ыєifi€Л_uЊ
 2

	)

111 
	#TLSEXT_TYPE_Мu°ed_€_keys
 3

	)

112 
	#TLSEXT_TYPE_Мun€Лd_hmac
 4

	)

113 
	#TLSEXT_TYPE_°©us_їque°
 5

	)

114 
	#TLSEXT_TYPE_ЦlЭtic_curves
 10

	)

115 
	#TLSEXT_TYPE_ec_poЪt_f№m©s
 11

	)

116 
	#TLSEXT_TYPE_£ssiЏ_tickС
 35

	)

119 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

121 #iвdeа
OPENSSL_NO_TLSEXT


123 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

125 cЏ° *
SSL_gС_£rvФ«me
(cЏ° 
SSL
 *
s
, cЏ° 
ty≥
) ;

126 
SSL_gС_£rvФ«me_ty≥
(cЏ° 
SSL
 *
s
) ;

128 
	#SSL_£t_О£xt_ho°_«me
(
s
,
«me
) \

129 
	`SSL_щЊ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

131 
	#SSL_£t_О£xt_debug_€ќback
(
s¶
, 
cb
) \

132 
	`SSL_€ќback_щЊ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

134 
	#SSL_£t_О£xt_debug_ђg
(
s¶
, 
ђg
) \

135 
	`SSL_щЊ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
ђg
)

	)

137 
	#SSL_CTX_£t_О£xt_£rvФ«me_€ќback
(
щx
, 
cb
) \

138 
	`SSL_CTX_€ќback_щЊ
(
щx
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

140 
	#SSL_TLSEXT_ERR_OK
 0

	)

141 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

142 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

143 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

145 
	#SSL_CTX_£t_О£xt_£rvФ«me_ђg
(
щx
, 
ђg
) \

146 
	`SSL_CTX_щЊ
(
щx
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
ђg
)

	)

148 
	#SSL_CTX_gС_О£xt_tickС_keys
(
щx
, 
keys
, 
keyЋn
) \

149 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_GET_TLXEXT_TICKET_KEYS
,(
keyЋn
),(
keys
))

	)

150 
	#SSL_CTX_£t_О£xt_tickС_keys
(
щx
, 
keys
, 
keyЋn
) \

151 
	`SSL_CTX_щЊ
((
щx
),
SSL_CTRL_SET_TLXEXT_TICKET_KEYS
,(
keyЋn
),(
keys
))

	)

158 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

159 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

160 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

161 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

162 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

163 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

164 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

168 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

169 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

170 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

171 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

172 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

173 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

175 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

176 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

177 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

178 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

179 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

180 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

183 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

184 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

185 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

186 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

187 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

188 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

190 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

191 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

192 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

193 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

194 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

195 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

198 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

199 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

200 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

201 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

202 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

203 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

206 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

207 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

208 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

209 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

210 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

212 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

213 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

214 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

215 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

216 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

218 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

219 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

220 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

221 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

222 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

224 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

225 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

226 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

227 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

228 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

230 
	#TLS1_CK_ECDH_™Џ_WITH_NULL_SHA
 0x0300C015

	)

231 
	#TLS1_CK_ECDH_™Џ_WITH_RC4_128_SHA
 0x0300C016

	)

232 
	#TLS1_CK_ECDH_™Џ_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

233 
	#TLS1_CK_ECDH_™Џ_WITH_AES_128_CBC_SHA
 0x0300C018

	)

234 
	#TLS1_CK_ECDH_™Џ_WITH_AES_256_CBC_SHA
 0x0300C019

	)

243 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

244 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

245 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

246 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

247 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

248 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

249 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

252 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

253 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

254 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

255 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

256 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

257 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

259 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

260 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

261 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

262 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

263 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

264 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

267 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

268 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

269 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

270 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

271 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

273 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

274 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

275 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

276 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

277 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

279 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

280 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

281 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

282 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

283 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

285 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

286 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

287 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

288 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

289 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

291 
	#TLS1_TXT_ECDH_™Џ_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

292 
	#TLS1_TXT_ECDH_™Џ_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

293 
	#TLS1_TXT_ECDH_™Џ_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

294 
	#TLS1_TXT_ECDH_™Џ_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

295 
	#TLS1_TXT_ECDH_™Џ_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

298 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

299 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

300 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

301 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

302 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

303 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

305 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

306 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

307 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

308 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

309 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

310 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

313 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

314 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

315 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

316 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

317 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

318 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

320 
	#TLS_CT_RSA_SIGN
 1

	)

321 
	#TLS_CT_DSS_SIGN
 2

	)

322 
	#TLS_CT_RSA_FIXED_DH
 3

	)

323 
	#TLS_CT_DSS_FIXED_DH
 4

	)

324 
	#TLS_CT_ECDSA_SIGN
 64

	)

325 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

326 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

327 
	#TLS_CT_NUMBER
 7

	)

329 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

331 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

332 
	#TLS_MD_CLIENT_FINISH_CONST
 "юЫЅ fЪished"

	)

333 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

334 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvФ fЪished"

	)

335 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

336 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvФ wrЩРkey"

	)

337 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

338 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyГxЈnsiЏ"

	)

339 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

340 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "юЫЅ wrЩРkey"

	)

341 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

342 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvФ wrЩРkey"

	)

343 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

344 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

345 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

346 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°Ф seьС"

	)

347 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

349 #ifdeа
CHARSET_EBCDIC


350 #undeа
TLS_MD_CLIENT_FINISH_CONST


351 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

352 #undeа
TLS_MD_SERVER_FINISH_CONST


353 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

354 #undeа
TLS_MD_SERVER_WRITE_KEY_CONST


355 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

356 #undeа
TLS_MD_KEY_EXPANSION_CONST


357 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

358 #undeа
TLS_MD_CLIENT_WRITE_KEY_CONST


359 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

360 #undeа
TLS_MD_SERVER_WRITE_KEY_CONST


361 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

362 #undeа
TLS_MD_IV_BLOCK_CONST


363 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

364 #undeа
TLS_MD_MASTER_SECRET_CONST


365 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

368 #ifdeа 
__эlu•lus


	@/usr/include/openssl/x509.h

64 #iвdeа
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<ЁТs¶/e_os2.h
>

68 
	~<ЁТs¶/symhacks.h
>

69 #iвdeа
OPENSSL_NO_BUFFER


70 
	~<ЁТs¶/bufгr.h
>

72 #iвdeа
OPENSSL_NO_EVP


73 
	~<ЁТs¶/evp.h
>

75 #iвdeа
OPENSSL_NO_BIO


76 
	~<ЁТs¶/bio.h
>

78 
	~<ЁТs¶/°ack.h
>

79 
	~<ЁТs¶/aҐ1.h
>

80 
	~<ЁТs¶/Іг°ack.h
>

82 #iвdeа
OPENSSL_NO_EC


83 
	~<ЁТs¶/ec.h
>

86 #iвdeа
OPENSSL_NO_ECDSA


87 
	~<ЁТs¶/ecdІ.h
>

90 #iвdeа
OPENSSL_NO_ECDH


91 
	~<ЁТs¶/ecdh.h
>

94 #iвdeа
OPENSSL_NO_DEPRECATED


95 #iвdeа
OPENSSL_NO_RSA


96 
	~<ЁТs¶/rІ.h
>

98 #iвdeа
OPENSSL_NO_DSA


99 
	~<ЁТs¶/dІ.h
>

101 #iвdeа
OPENSSL_NO_DH


102 
	~<ЁТs¶/dh.h
>

106 #iвdeа
OPENSSL_NO_SHA


107 
	~<ЁТs¶/sha.h
>

109 
	~<ЁТs¶/os¶_typ.h
>

111 #ifdeа 
__эlu•lus


115 #ifdeа
OPENSSL_SYS_WIN32


117 #undeа
X509_NAME


118 #undeа
X509_CERT_PAIR


121 
	#X509_FILETYPE_PEM
 1

	)

122 
	#X509_FILETYPE_ASN1
 2

	)

123 
	#X509_FILETYPE_DEFAULT
 3

	)

125 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

126 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

127 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

128 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

129 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

130 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

131 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

132 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

133 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

134 
	#X509v3_KU_UNDEF
 0xffff

	)

136 
	sX509_objeщs_°


138 
nid
;

139 (*
a2i
)();

140 (*
i2a
)();

141 } 
	tX509_OBJECTS
;

143 
	sX509_Ѓg№_°


145 
ASN1_OBJECT
 *
Ѓg№Щhm
;

146 
ASN1_TYPE
 *
ЈњmСФ
;

149 
DECLARE_STACK_OF
(
X509_ALGOR
)

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
	sX509_vЃ_°


154 
ASN1_TIME
 *
nўBef№e
;

155 
ASN1_TIME
 *
nўAбФ
;

156 } 
	tX509_VAL
;

158 
	sX509_pubkey_°


160 
X509_ALGOR
 *
Ѓg№
;

161 
ASN1_BIT_STRING
 *
public_key
;

162 
EVP_PKEY
 *
pkey
;

163 } 
	tX509_PUBKEY
;

165 
	sX509_sig_°


167 
X509_ALGOR
 *
Ѓg№
;

168 
ASN1_OCTET_STRING
 *
dige°
;

169 } 
	tX509_SIG
;

171 
	sX509_«me_ТМy_°


173 
ASN1_OBJECT
 *
objeщ
;

174 
ASN1_STRING
 *
vЃue
;

175 
£t
;

176 
size
;

177 } 
	tX509_NAME_ENTRY
;

179 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

180 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

183 
	sX509_«me_°


185 
STACK_OF
(
X509_NAME_ENTRY
и*
ТМЫs
;

186 
modifЫd
;

187 #iвdeа
OPENSSL_NO_BUFFER


188 
BUF_MEM
 *
byЛs
;

190 *
byЛs
;

192 
hash
;

195 
DECLARE_STACK_OF
(
X509_NAME
)

197 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

198 
	#X509_EX_V_INIT
 0x0001

	)

199 
	sX509_exЛnsiЏ_°


201 
ASN1_OBJECT
 *
objeщ
;

202 
ASN1_BOOLEAN
 
ьЩi€l
;

203 
ASN1_OCTET_STRING
 *
vЃue
;

204 } 
	tX509_EXTENSION
;

206 
DECLARE_STACK_OF
(
X509_EXTENSION
)

207 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

210 
	sx509_©МibuЛs_°


212 
ASN1_OBJECT
 *
objeщ
;

213 
sЪgЋ
;

215 *
±r
;

216  
STACK_OF
(
ASN1_TYPE
и*
£t
;

217  
ASN1_TYPE
 *
sЪgЋ
;

218 } 
vЃue
;

219 } 
	tX509_ATTRIBUTE
;

221 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

222 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

225 
	sX509_їq_Ъfo_°


227 
ASN1_ENCODING
 
Тc
;

228 
ASN1_INTEGER
 *
vФsiЏ
;

229 
X509_NAME
 *
subjeщ
;

230 
X509_PUBKEY
 *
pubkey
;

232 
STACK_OF
(
X509_ATTRIBUTE
и*
©МibuЛs
;

233 } 
	tX509_REQ_INFO
;

235 
	sX509_їq_°


237 
X509_REQ_INFO
 *
їq_Ъfo
;

238 
X509_ALGOR
 *
sig_Ѓg
;

239 
ASN1_BIT_STRING
 *
sig«tuї
;

240 
їгїnыs
;

241 } 
	tX509_REQ
;

243 
	sx509_cЪf_°


245 
ASN1_INTEGER
 *
vФsiЏ
;

246 
ASN1_INTEGER
 *
£rЯlNumbФ
;

247 
X509_ALGOR
 *
sig«tuї
;

248 
X509_NAME
 *
issuФ
;

249 
X509_VAL
 *
vЃidЩy
;

250 
X509_NAME
 *
subjeщ
;

251 
X509_PUBKEY
 *
key
;

252 
ASN1_BIT_STRING
 *
issuФUID
;

253 
ASN1_BIT_STRING
 *
subjeщUID
;

254 
STACK_OF
(
X509_EXTENSION
и*
exЛnsiЏs
;

255 } 
	tX509_CINF
;

263 
	sx509_ыє_aux_°


265 
STACK_OF
(
ASN1_OBJECT
и*
Мu°
;

266 
STACK_OF
(
ASN1_OBJECT
и*
їjeщ
;

267 
ASN1_UTF8STRING
 *
ЃЯs
;

268 
ASN1_OCTET_STRING
 *
keyid
;

269 
STACK_OF
(
X509_ALGOR
и*
ўhФ
;

270 } 
	tX509_CERT_AUX
;

272 
	sx509_°


274 
X509_CINF
 *
ыє_Ъfo
;

275 
X509_ALGOR
 *
sig_Ѓg
;

276 
ASN1_BIT_STRING
 *
sig«tuї
;

277 
vЃid
;

278 
їгїnыs
;

279 *
«me
;

280 
CRYPTO_EX_DATA
 
ex_d©a
;

282 
ex_ЈthЋn
;

283 
ex_pэ©hЋn
;

284 
ex_жags
;

285 
ex_kuІge
;

286 
ex_xkuІge
;

287 
ex_nsыє
;

288 
ASN1_OCTET_STRING
 *
skid
;

289 
AUTHORITY_KEYID_°
 *
akid
;

290 
X509_POLICY_CACHE
 *
pёicy_€che
;

291 #iвdeа
OPENSSL_NO_RFC3779


292 
STACK_OF
(
IPAddїssFamЮy
и*
rfc3779_addr
;

293 
ASIdТtifЫrs_°
 *
rfc3779_asid
;

295 #iвdeа
OPENSSL_NO_SHA


296 
sha1_hash
[
SHA_DIGEST_LENGTH
];

298 
X509_CERT_AUX
 *
aux
;

301 
DECLARE_STACK_OF
(
X509
)

302 
DECLARE_ASN1_SET_OF
(
X509
)

306 
	sx509_Мu°_°
 {

307 
Мu°
;

308 
жags
;

309 (*
check_Мu°
)(
x509_Мu°_°
 *, 
X509
 *, );

310 *
«me
;

311 
ђg1
;

312 *
ђg2
;

313 } 
	tX509_TRUST
;

315 
DECLARE_STACK_OF
(
X509_TRUST
)

317 
	sx509_ыє_ЈЬ_°
 {

318 
X509
 *
f№wђd
;

319 
X509
 *
їvФ£
;

320 } 
	tX509_CERT_PAIR
;

324 
	#X509_TRUST_DEFAULT
 -1

	)

326 
	#X509_TRUST_COMPAT
 1

	)

327 
	#X509_TRUST_SSL_CLIENT
 2

	)

328 
	#X509_TRUST_SSL_SERVER
 3

	)

329 
	#X509_TRUST_EMAIL
 4

	)

330 
	#X509_TRUST_OBJECT_SIGN
 5

	)

331 
	#X509_TRUST_OCSP_SIGN
 6

	)

332 
	#X509_TRUST_OCSP_REQUEST
 7

	)

335 
	#X509_TRUST_MIN
 1

	)

336 
	#X509_TRUST_MAX
 7

	)

340 
	#X509_TRUST_DYNAMIC
 1

	)

341 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

345 
	#X509_TRUST_TRUSTED
 1

	)

346 
	#X509_TRUST_REJECTED
 2

	)

347 
	#X509_TRUST_UNTRUSTED
 3

	)

351 
	#X509_FLAG_COMPAT
 0

	)

352 
	#X509_FLAG_NO_HEADER
 1L

	)

353 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

354 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

355 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

356 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

357 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

358 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

359 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

360 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

361 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

362 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

363 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

369 
	#XN_FLAG_SEP_MASK
 (0xа<< 16)

	)

371 
	#XN_FLAG_COMPAT
 0

	)

372 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16и

	)

373 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16и

	)

374 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16и

	)

375 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16и

	)

377 
	#XN_FLAG_DN_REV
 (1 << 20и

	)

381 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

383 
	#XN_FLAG_FN_SN
 0

	)

384 
	#XN_FLAG_FN_LN
 (1 << 21и

	)

385 
	#XN_FLAG_FN_OID
 (2 << 21и

	)

386 
	#XN_FLAG_FN_NONE
 (3 << 21и

	)

388 
	#XN_FLAG_SPC_EQ
 (1 << 23и

	)

394 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

396 
	#XN_FLAG_FN_ALIGN
 (1 << 25и

	)

400 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

401 
XN_FLAG_SEP_COMMA_PLUS
 | \

402 
XN_FLAG_DN_REV
 | \

403 
XN_FLAG_FN_SN
 | \

404 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

408 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

409 
ASN1_STRFLGS_ESC_QUOTE
 | \

410 
XN_FLAG_SEP_CPLUS_SPC
 | \

411 
XN_FLAG_SPC_EQ
 | \

412 
XN_FLAG_FN_SN
)

	)

416 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

417 
ASN1_STRFLGS_ESC_MSB
 | \

418 
XN_FLAG_SEP_MULTILINE
 | \

419 
XN_FLAG_SPC_EQ
 | \

420 
XN_FLAG_FN_LN
 | \

421 
XN_FLAG_FN_ALIGN
)

	)

423 
	sX509_їvoked_°


425 
ASN1_INTEGER
 *
£rЯlNumbФ
;

426 
ASN1_TIME
 *
їvo€tiЏD©e
;

427 
STACK_OF
(
X509_EXTENSION
и *
exЛnsiЏs
;

428 
£quТы
;

429 } 
	tX509_REVOKED
;

431 
DECLARE_STACK_OF
(
X509_REVOKED
)

432 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

434 
	sX509_ьl_Ъfo_°


436 
ASN1_INTEGER
 *
vФsiЏ
;

437 
X509_ALGOR
 *
sig_Ѓg
;

438 
X509_NAME
 *
issuФ
;

439 
ASN1_TIME
 *
ѕ°Upd©e
;

440 
ASN1_TIME
 *
√xtUpd©e
;

441 
STACK_OF
(
X509_REVOKED
и*
їvoked
;

442 
STACK_OF
(
X509_EXTENSION
и *
exЛnsiЏs
;

443 
ASN1_ENCODING
 
Тc
;

444 } 
	tX509_CRL_INFO
;

446 
	sX509_ьl_°


449 
X509_CRL_INFO
 *
ьl
;

450 
X509_ALGOR
 *
sig_Ѓg
;

451 
ASN1_BIT_STRING
 *
sig«tuї
;

452 
їгїnыs
;

455 
DECLARE_STACK_OF
(
X509_CRL
)

456 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

458 
	sіiv©e_key_°


460 
vФsiЏ
;

462 
X509_ALGOR
 *
Тc_Ѓg№
;

463 
ASN1_OCTET_STRING
 *
Тc_pkey
;

466 
EVP_PKEY
 *
dec_pkey
;

469 
key_Ћngth
;

470 *
key_d©a
;

471 
key_дУ
;

474 
EVP_CIPHER_INFO
 
cЭhФ
;

476 
їгїnыs
;

477 } 
	tX509_PKEY
;

479 #iвdeа
OPENSSL_NO_EVP


480 
	sX509_Ъfo_°


482 
X509
 *
x509
;

483 
X509_CRL
 *
ьl
;

484 
X509_PKEY
 *
x_pkey
;

486 
EVP_CIPHER_INFO
 
Тc_cЭhФ
;

487 
Тc_Ћn
;

488 *
Тc_d©a
;

490 
їгїnыs
;

491 } 
	tX509_INFO
;

493 
DECLARE_STACK_OF
(
X509_INFO
)

500 
	sNСs€≥_•kac_°


502 
X509_PUBKEY
 *
pubkey
;

503 
ASN1_IA5STRING
 *
chЃЋnge
;

504 } 
	tNETSCAPE_SPKAC
;

506 
	sNСs€≥_•ki_°


508 
NETSCAPE_SPKAC
 *
•kac
;

509 
X509_ALGOR
 *
sig_Ѓg№
;

510 
ASN1_BIT_STRING
 *
sig«tuї
;

511 } 
	tNETSCAPE_SPKI
;

514 
	sNСs€≥_ыєifi€Л_£quТы


516 
ASN1_OBJECT
 *
ty≥
;

517 
STACK_OF
(
X509
и*
ыєs
;

518 } 
	tNETSCAPE_CERT_SEQUENCE
;

529 
	sPBEPARAM_°
 {

530 
ASN1_OCTET_STRING
 *
І…
;

531 
ASN1_INTEGER
 *
ЩФ
;

532 } 
	tPBEPARAM
;

536 
	sPBE2PARAM_°
 {

537 
X509_ALGOR
 *
keyfunc
;

538 
X509_ALGOR
 *
Тьy±iЏ
;

539 } 
	tPBE2PARAM
;

541 
	sPBKDF2PARAM_°
 {

542 
ASN1_TYPE
 *
І…
;

543 
ASN1_INTEGER
 *
ЩФ
;

544 
ASN1_INTEGER
 *
keyЋngth
;

545 
X509_ALGOR
 *
іf
;

546 } 
	tPBKDF2PARAM
;

551 
	spkcs8_іiv_key_Ъfo_°


553 
brokТ
;

554 
	#PKCS8_OK
 0

	)

555 
	#PKCS8_NO_OCTET
 1

	)

556 
	#PKCS8_EMBEDDED_PARAM
 2

	)

557 
	#PKCS8_NS_DB
 3

	)

558 
ASN1_INTEGER
 *
vФsiЏ
;

559 
X509_ALGOR
 *
pkeyЃg
;

560 
ASN1_TYPE
 *
pkey
;

561 
STACK_OF
(
X509_ATTRIBUTE
и*
©МibuЛs
;

562 } 
	tPKCS8_PRIV_KEY_INFO
;

564 #ifdeа 
__эlu•lus


568 
	~<ЁТs¶/x509_vfy.h
>

569 
	~<ЁТs¶/pkcs7.h
>

571 #ifdeа 
__эlu•lus


575 #ifdeа
SSLEAY_MACROS


576 
	#X509_vФify
(
a
,
r
и
	`ASN1_vФify
(((*)())
i2d_X509_CINF
,a->
sig_Ѓg
,\

577 
a
->
sig«tuї
,(*п->
ыє_Ъfo
,
r
)

	)

578 
	#X509_REQ_vФify
(
a
,
r
и
	`ASN1_vФify
(((*)())
i2d_X509_REQ_INFO
, \

579 
a
->
sig_Ѓg
,a->
sig«tuї
,(*п->
їq_Ъfo
,
r
)

	)

580 
	#X509_CRL_vФify
(
a
,
r
и
	`ASN1_vФify
(((*)())
i2d_X509_CRL_INFO
, \

581 
a
->
sig_Ѓg
,З->
sig«tuї
,(*п->
ьl
,
r
)

	)

583 
	#X509_sign
(
x
,
pkey
,
md
) \

584 
	`ASN1_sign
(((*)())
i2d_X509_CINF
, 
x
->
ыє_Ъfo
->
sig«tuї
, \

585 
x
->
sig_Ѓg
, x->
sig«tuї
, (*)x->
ыє_Ъfo
,
pkey
,
md
)

	)

586 
	#X509_REQ_sign
(
x
,
pkey
,
md
) \

587 
	`ASN1_sign
(((*)())
i2d_X509_REQ_INFO
,
x
->
sig_Ѓg
, 
NULL
, \

588 
x
->
sig«tuї
, (*)x->
їq_Ъfo
,
pkey
,
md
)

	)

589 
	#X509_CRL_sign
(
x
,
pkey
,
md
) \

590 
	`ASN1_sign
(((*)())
i2d_X509_CRL_INFO
,
x
->
ьl
->
sig_Ѓg
,x->sig_alg, \

591 
x
->
sig«tuї
, (*)x->
ьl
,
pkey
,
md
)

	)

592 
	#NETSCAPE_SPKI_sign
(
x
,
pkey
,
md
) \

593 
	`ASN1_sign
(((*)())
i2d_NETSCAPE_SPKAC
, 
x
->
sig_Ѓg№
,
NULL
, \

594 
x
->
sig«tuї
, (*)x->
•kac
,
pkey
,
md
)

	)

596 
	#X509_dup
(
x509
и(
X509
 *)
	`ASN1_dup
(((*)())
i2d_X509
, \

597 (*(*)())
d2i_X509
,(*)
x509
)

	)

598 
	#X509_ATTRIBUTE_dup
(
xa
и(
X509_ATTRIBUTE
 *)
	`ASN1_dup
(\

599 ((*)())
i2d_X509_ATTRIBUTE
, \

600 (*(*)())
d2i_X509_ATTRIBUTE
,(*)
xa
)

	)

601 
	#X509_EXTENSION_dup
(
ex
и(
X509_EXTENSION
 *)
	`ASN1_dup
( \

602 ((*)())
i2d_X509_EXTENSION
, \

603 (*(*)())
d2i_X509_EXTENSION
,(*)
ex
)

	)

604 
	#d2i_X509_е
(
е
,
x509
и(
X509
 *)
	`ASN1_d2i_е
((*(*)())
X509_√w
, \

605 (*(*)())
d2i_X509
, (
е
),(**)(
x509
))

	)

606 
	#i2d_X509_е
(
е
,
x509
и
	`ASN1_i2d_е
(
i2d_X509
,е,(*)x509)

	)

607 
	#d2i_X509_bio
(
bp
,
x509
и(
X509
 *)
	`ASN1_d2i_bio
((*(*)())
X509_√w
, \

608 (*(*)())
d2i_X509
, (
bp
),(**)(
x509
))

	)

609 
	#i2d_X509_bio
(
bp
,
x509
и
	`ASN1_i2d_bio
(
i2d_X509
,bp,(*)x509)

	)

611 
	#X509_CRL_dup
(
ьl
и(
X509_CRL
 *)
	`ASN1_dup
(((*)())
i2d_X509_CRL
, \

612 (*(*)())
d2i_X509_CRL
,(*)
ьl
)

	)

613 
	#d2i_X509_CRL_е
(
е
,
ьl
и(
X509_CRL
 *)
	`ASN1_d2i_е
((*(*)()) \

614 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
е
),\

615 (**)(
ьl
))

	)

616 
	#i2d_X509_CRL_е
(
е
,
ьl
и
	`ASN1_i2d_е
(
i2d_X509_CRL
,fp,\

617 (*)
ьl
)

	)

618 
	#d2i_X509_CRL_bio
(
bp
,
ьl
и(
X509_CRL
 *)
	`ASN1_d2i_bio
((*(*)()) \

619 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
bp
),\

620 (**)(
ьl
))

	)

621 
	#i2d_X509_CRL_bio
(
bp
,
ьl
и
	`ASN1_i2d_bio
(
i2d_X509_CRL
,bp,\

622 (*)
ьl
)

	)

624 
	#PKCS7_dup
(
p7
и(
PKCS7
 *)
	`ASN1_dup
(((*)())
i2d_PKCS7
, \

625 (*(*)())
d2i_PKCS7
,(*)
p7
)

	)

626 
	#d2i_PKCS7_е
(
е
,
p7
и(
PKCS7
 *)
	`ASN1_d2i_е
((*(*)()) \

627 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
е
),\

628 (**)(
p7
))

	)

629 
	#i2d_PKCS7_е
(
е
,
p7
и
	`ASN1_i2d_е
(
i2d_PKCS7
,fp,\

630 (*)
p7
)

	)

631 
	#d2i_PKCS7_bio
(
bp
,
p7
и(
PKCS7
 *)
	`ASN1_d2i_bio
((*(*)()) \

632 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
bp
),\

633 (**)(
p7
))

	)

634 
	#i2d_PKCS7_bio
(
bp
,
p7
и
	`ASN1_i2d_bio
(
i2d_PKCS7
,bp,\

635 (*)
p7
)

	)

637 
	#X509_REQ_dup
(
їq
и(
X509_REQ
 *)
	`ASN1_dup
(((*)())
i2d_X509_REQ
, \

638 (*(*)())
d2i_X509_REQ
,(*)
їq
)

	)

639 
	#d2i_X509_REQ_е
(
е
,
їq
и(
X509_REQ
 *)
	`ASN1_d2i_е
((*(*)())\

640 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
е
),\

641 (**)(
їq
))

	)

642 
	#i2d_X509_REQ_е
(
е
,
їq
и
	`ASN1_i2d_е
(
i2d_X509_REQ
,fp,\

643 (*)
їq
)

	)

644 
	#d2i_X509_REQ_bio
(
bp
,
їq
и(
X509_REQ
 *)
	`ASN1_d2i_bio
((*(*)())\

645 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
bp
),\

646 (**)(
їq
))

	)

647 
	#i2d_X509_REQ_bio
(
bp
,
їq
и
	`ASN1_i2d_bio
(
i2d_X509_REQ
,bp,\

648 (*)
їq
)

	)

650 
	#RSAPublicKey_dup
(
rІ
и(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPublicKey
, \

651 (*(*)())
d2i_RSAPublicKey
,(*)
rІ
)

	)

652 
	#RSAPriv©eKey_dup
(
rІ
и(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPriv©eKey
, \

653 (*(*)())
d2i_RSAPriv©eKey
,(*)
rІ
)

	)

655 
	#d2i_RSAPriv©eKey_е
(
е
,
rІ
и(
RSA
 *)
	`ASN1_d2i_е
((*(*)())\

656 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
е
), \

657 (**)(
rІ
))

	)

658 
	#i2d_RSAPriv©eKey_е
(
е
,
rІ
и
	`ASN1_i2d_е
(
i2d_RSAPriv©eKey
,fp, \

659 (*)
rІ
)

	)

660 
	#d2i_RSAPriv©eKey_bio
(
bp
,
rІ
и(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

661 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
bp
), \

662 (**)(
rІ
))

	)

663 
	#i2d_RSAPriv©eKey_bio
(
bp
,
rІ
и
	`ASN1_i2d_bio
(
i2d_RSAPriv©eKey
,bp, \

664 (*)
rІ
)

	)

666 
	#d2i_RSAPublicKey_е
(
е
,
rІ
и(
RSA
 *)
	`ASN1_d2i_е
((*(*)())\

667 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
е
), \

668 (**)(
rІ
))

	)

669 
	#i2d_RSAPublicKey_е
(
е
,
rІ
и
	`ASN1_i2d_е
(
i2d_RSAPublicKey
,fp, \

670 (*)
rІ
)

	)

671 
	#d2i_RSAPublicKey_bio
(
bp
,
rІ
и(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

672 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
bp
), \

673 (**)(
rІ
))

	)

674 
	#i2d_RSAPublicKey_bio
(
bp
,
rІ
и
	`ASN1_i2d_bio
(
i2d_RSAPublicKey
,bp, \

675 (*)
rІ
)

	)

677 
	#d2i_DSAPriv©eKey_е
(
е
,
dІ
и(
DSA
 *)
	`ASN1_d2i_е
((*(*)())\

678 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
е
), \

679 (**)(
dІ
))

	)

680 
	#i2d_DSAPriv©eKey_е
(
е
,
dІ
и
	`ASN1_i2d_е
(
i2d_DSAPriv©eKey
,fp, \

681 (*)
dІ
)

	)

682 
	#d2i_DSAPriv©eKey_bio
(
bp
,
dІ
и(
DSA
 *)
	`ASN1_d2i_bio
((*(*)())\

683 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
bp
), \

684 (**)(
dІ
))

	)

685 
	#i2d_DSAPriv©eKey_bio
(
bp
,
dІ
и
	`ASN1_i2d_bio
(
i2d_DSAPriv©eKey
,bp, \

686 (*)
dІ
)

	)

688 
	#d2i_ECPriv©eKey_е
(
е
,
ecdІ
и(
EC_KEY
 *)
	`ASN1_d2i_е
((*(*)())\

689 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
е
), \

690 (**)(
ecdІ
))

	)

691 
	#i2d_ECPriv©eKey_е
(
е
,
ecdІ
и
	`ASN1_i2d_е
(
i2d_ECPriv©eKey
,fp, \

692 (*)
ecdІ
)

	)

693 
	#d2i_ECPriv©eKey_bio
(
bp
,
ecdІ
и(
EC_KEY
 *)
	`ASN1_d2i_bio
((*(*)())\

694 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
bp
), \

695 (**)(
ecdІ
))

	)

696 
	#i2d_ECPriv©eKey_bio
(
bp
,
ecdІ
и
	`ASN1_i2d_bio
(
i2d_ECPriv©eKey
,bp, \

697 (*)
ecdІ
)

	)

699 
	#X509_ALGOR_dup
(
xn
и(
X509_ALGOR
 *)
	`ASN1_dup
(((*)())
i2d_X509_ALGOR
,\

700 (*(*)())
d2i_X509_ALGOR
,(*)
xn
)

	)

702 
	#X509_NAME_dup
(
xn
и(
X509_NAME
 *)
	`ASN1_dup
(((*)())
i2d_X509_NAME
, \

703 (*(*)())
d2i_X509_NAME
,(*)
xn
)

	)

704 
	#X509_NAME_ENTRY_dup
(
√
и(
X509_NAME_ENTRY
 *)
	`ASN1_dup
( \

705 ((*)())
i2d_X509_NAME_ENTRY
, \

706 (*(*)())
d2i_X509_NAME_ENTRY
,\

707 (*)
√
)

	)

709 
	#X509_dige°
(
d©a
,
ty≥
,
md
,
Ћn
) \

710 
	`ASN1_dige°
(((*)())
i2d_X509
,
ty≥
,(*)
d©a
,
md
,
Ћn
)

	)

711 
	#X509_NAME_dige°
(
d©a
,
ty≥
,
md
,
Ћn
) \

712 
	`ASN1_dige°
(((*)())
i2d_X509_NAME
,
ty≥
,(*)
d©a
,
md
,
Ћn
)

	)

713 #iвdeа
PKCS7_ISSUER_AND_SERIAL_dige°


714 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Ћn
) \

715 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

716 (*)
d©a
,
md
,
Ћn
)

	)

720 
	#X509_EXT_PACK_UNKNOWN
 1

	)

721 
	#X509_EXT_PACK_STRING
 2

	)

723 
	#X509_gС_vФsiЏ
(
x
и
	`ASN1_INTEGER_gС
((x)->
ыє_Ъfo
->
vФsiЏ
)

	)

725 
	#X509_gС_nўBef№e
(
x
и((x)->
ыє_Ъfo
->
vЃidЩy
->
nўBef№e
)

	)

726 
	#X509_gС_nўAбФ
(
x
и((x)->
ыє_Ъfo
->
vЃidЩy
->
nўAбФ
)

	)

727 
	#X509_exМaщ_key
(
x
и
	`X509_gС_pubkey
(xи

	)

728 
	#X509_REQ_gС_vФsiЏ
(
x
и
	`ASN1_INTEGER_gС
((x)->
їq_Ъfo
->
vФsiЏ
)

	)

729 
	#X509_REQ_gС_subjeщ_«me
(
x
и((x)->
їq_Ъfo
->
subjeщ
)

	)

730 
	#X509_REQ_exМaщ_key
(
a
и
	`X509_REQ_gС_pubkey
„)

	)

731 
	#X509_«me_cmp
(
a
,
b
и
	`X509_NAME_cmp
(„),(b))

	)

732 
	#X509_gС_sig«tuї_ty≥
(
x
и
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Ѓg
->
Ѓg№Щhm
))

	)

734 
	#X509_CRL_gС_vФsiЏ
(
x
и
	`ASN1_INTEGER_gС
((x)->
ьl
->
vФsiЏ
)

	)

735 
	#X509_CRL_gС_ѕ°Upd©e
(
x
и((x)->
ьl
->
ѕ°Upd©e
)

	)

736 
	#X509_CRL_gС_√xtUpd©e
(
x
и((x)->
ьl
->
√xtUpd©e
)

	)

737 
	#X509_CRL_gС_issuФ
(
x
и((x)->
ьl
->
issuФ
)

	)

738 
	#X509_CRL_gС_REVOKED
(
x
и((x)->
ьl
->
їvoked
)

	)

742 
	#X509_gС_X509_PUBKEY
(
x
и((x)->
ыє_Ъfo
->
key
)

	)

745 cЏ° *
X509_vФify_ыє_Фr№_°rЪg
(
n
);

747 #iвdeа
SSLEAY_MACROS


748 #iвdeа
OPENSSL_NO_EVP


749 
X509_vФify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

751 
X509_REQ_vФify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

752 
X509_CRL_vФify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

753 
NETSCAPE_SPKI_vФify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

755 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(cЏ° *
°r
, 
Ћn
);

756 * 
NETSCAPE_SPKI_b64_Тcode
(
NETSCAPE_SPKI
 *
x
);

757 
EVP_PKEY
 *
NETSCAPE_SPKI_gС_pubkey
(
NETSCAPE_SPKI
 *
x
);

758 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

760 
NETSCAPE_SPKI_іЪt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

762 
X509_sig«tuї_іЪt
(
BIO
 *
bp
,
X509_ALGOR
 *
Ѓg
, 
ASN1_STRING
 *
sig
);

764 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
md
);

765 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
md
);

766 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
md
);

767 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
md
);

769 
X509_pubkey_dige°
(cЏ° 
X509
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

770 *
md
, *
Ћn
);

771 
X509_dige°
(cЏ° 
X509
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

772 *
md
, *
Ћn
);

773 
X509_CRL_dige°
(cЏ° 
X509_CRL
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

774 *
md
, *
Ћn
);

775 
X509_REQ_dige°
(cЏ° 
X509_REQ
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

776 *
md
, *
Ћn
);

777 
X509_NAME_dige°
(cЏ° 
X509_NAME
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

778 *
md
, *
Ћn
);

781 #iвdeа
OPENSSL_NO_FP_API


782 
X509
 *
d2i_X509_е
(
FILE
 *
е
, X509 **
x509
);

783 
i2d_X509_е
(
FILE
 *
е
,
X509
 *
x509
);

784 
X509_CRL
 *
d2i_X509_CRL_е
(
FILE
 *
е
,X509_CRL **
ьl
);

785 
i2d_X509_CRL_е
(
FILE
 *
е
,
X509_CRL
 *
ьl
);

786 
X509_REQ
 *
d2i_X509_REQ_е
(
FILE
 *
е
,X509_REQ **
їq
);

787 
i2d_X509_REQ_е
(
FILE
 *
е
,
X509_REQ
 *
їq
);

788 #iвdeа
OPENSSL_NO_RSA


789 
RSA
 *
d2i_RSAPriv©eKey_е
(
FILE
 *
е
,RSA **
rІ
);

790 
i2d_RSAPriv©eKey_е
(
FILE
 *
е
,
RSA
 *
rІ
);

791 
RSA
 *
d2i_RSAPublicKey_е
(
FILE
 *
е
,RSA **
rІ
);

792 
i2d_RSAPublicKey_е
(
FILE
 *
е
,
RSA
 *
rІ
);

793 
RSA
 *
d2i_RSA_PUBKEY_е
(
FILE
 *
е
,RSA **
rІ
);

794 
i2d_RSA_PUBKEY_е
(
FILE
 *
е
,
RSA
 *
rІ
);

796 #iвdeа
OPENSSL_NO_DSA


797 
DSA
 *
d2i_DSA_PUBKEY_е
(
FILE
 *
е
, DSA **
dІ
);

798 
i2d_DSA_PUBKEY_е
(
FILE
 *
е
, 
DSA
 *
dІ
);

799 
DSA
 *
d2i_DSAPriv©eKey_е
(
FILE
 *
е
, DSA **
dІ
);

800 
i2d_DSAPriv©eKey_е
(
FILE
 *
е
, 
DSA
 *
dІ
);

802 #iвdeа
OPENSSL_NO_EC


803 
EC_KEY
 *
d2i_EC_PUBKEY_е
(
FILE
 *
е
, EC_KEY **
eckey
);

804 
i2d_EC_PUBKEY_е
(
FILE
 *
е
, 
EC_KEY
 *
eckey
);

805 
EC_KEY
 *
d2i_ECPriv©eKey_е
(
FILE
 *
е
, EC_KEY **
eckey
);

806 
i2d_ECPriv©eKey_е
(
FILE
 *
е
, 
EC_KEY
 *
eckey
);

808 
X509_SIG
 *
d2i_PKCS8_е
(
FILE
 *
е
,X509_SIG **
p8
);

809 
i2d_PKCS8_е
(
FILE
 *
е
,
X509_SIG
 *
p8
);

810 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_е
(
FILE
 *
е
,

811 
PKCS8_PRIV_KEY_INFO
 **
p8Ъf
);

812 
i2d_PKCS8_PRIV_KEY_INFO_е
(
FILE
 *
е
,
PKCS8_PRIV_KEY_INFO
 *
p8Ъf
);

813 
i2d_PKCS8Priv©eKeyInfo_е
(
FILE
 *
е
, 
EVP_PKEY
 *
key
);

814 
i2d_Priv©eKey_е
(
FILE
 *
е
, 
EVP_PKEY
 *
pkey
);

815 
EVP_PKEY
 *
d2i_Priv©eKey_е
(
FILE
 *
е
, EVP_PKEY **
a
);

816 
i2d_PUBKEY_е
(
FILE
 *
е
, 
EVP_PKEY
 *
pkey
);

817 
EVP_PKEY
 *
d2i_PUBKEY_е
(
FILE
 *
е
, EVP_PKEY **
a
);

820 #iвdeа
OPENSSL_NO_BIO


821 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

822 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

823 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
ьl
);

824 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
ьl
);

825 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
їq
);

826 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
їq
);

827 #iвdeа
OPENSSL_NO_RSA


828 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rІ
);

829 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rІ
);

830 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rІ
);

831 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rІ
);

832 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rІ
);

833 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rІ
);

835 #iвdeа
OPENSSL_NO_DSA


836 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dІ
);

837 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dІ
);

838 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dІ
);

839 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dІ
);

841 #iвdeа
OPENSSL_NO_EC


842 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

843 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

844 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

845 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

847 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

848 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

849 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

850 
PKCS8_PRIV_KEY_INFO
 **
p8Ъf
);

851 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8Ъf
);

852 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

853 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

854 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

855 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

856 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

859 
X509
 *
X509_dup
(X509 *
x509
);

860 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

861 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

862 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
ьl
);

863 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
їq
);

864 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

865 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

866 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

870 
X509_cmp_time
(
ASN1_TIME
 *
s
, 
time_t
 *
t
);

871 
X509_cmp_cuЉТt_time
(
ASN1_TIME
 *
s
);

872 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

873 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

875 cЏ° * 
X509_gС_deзu…_ыє_ђЧ
();

876 cЏ° * 
X509_gС_deзu…_ыє_dЬ
();

877 cЏ° * 
X509_gС_deзu…_ыє_fЮe
();

878 cЏ° * 
X509_gС_deзu…_ыє_dЬ_Тv
();

879 cЏ° * 
X509_gС_deзu…_ыє_fЮe_Тv
();

880 cЏ° * 
X509_gС_deзu…_іiv©e_dЬ
();

882 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
md
);

883 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

885 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

886 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

888 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

890 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

891 
EVP_PKEY
 * 
X509_PUBKEY_gС
(
X509_PUBKEY
 *
key
);

892 
X509_gС_pubkey_ЈњmСФs
(
EVP_PKEY
 *
pkey
,

893 
STACK_OF
(
X509
и*
chaЪ
);

894 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

895 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,cЏ° **
µ
,

896 
Ћngth
);

897 #iвdeа
OPENSSL_NO_RSA


898 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

899 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,cЏ° **
µ
,

900 
Ћngth
);

902 #iвdeа
OPENSSL_NO_DSA


903 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

904 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,cЏ° **
µ
,

905 
Ћngth
);

907 #iвdeа
OPENSSL_NO_EC


908 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

909 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, cЏ° **
µ
,

910 
Ћngth
);

913 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

914 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

915 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

917 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

918 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_ьЧЛ
(
nid
, 
©єy≥
, *
vЃue
);

920 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

922 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

924 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

926 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

928 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

930 
DECLARE_ASN1_FUNCTIONS
(
X509
)

931 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

933 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

935 
X509_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

936 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

937 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
ђg
);

938 *
X509_gС_ex_d©a
(
X509
 *
r
, 
idx
);

939 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

940 
X509
 * 
d2i_X509_AUX
(X509 **
a
,cЏ° **
µ
,
Ћngth
);

942 
X509_ЃЯs_£t1
(
X509
 *
x
, *
«me
, 
Ћn
);

943 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Ћn
);

944 * 
X509_ЃЯs_gС0
(
X509
 *
x
, *
Ћn
);

945 * 
X509_keyid_gС0
(
X509
 *
x
, *
Ћn
);

946 (*
X509_TRUST_£t_deзu…
((*
Мu°
)(, 
X509
 *, )))(, X509 *, );

947 
X509_TRUST_£t
(*
t
, 
Мu°
);

948 
X509_add1_Мu°_objeщ
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

949 
X509_add1_їjeщ_objeщ
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

950 
X509_Мu°_юЧr
(
X509
 *
x
);

951 
X509_їjeщ_юЧr
(
X509
 *
x
);

953 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

954 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

955 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

957 
X509_CRL_add0_їvoked
(
X509_CRL
 *
ьl
, 
X509_REVOKED
 *
їv
);

959 
X509_PKEY
 * 
X509_PKEY_√w
();

960 
X509_PKEY_дУ
(
X509_PKEY
 *
a
);

961 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

962 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,cЏ° **
µ
,
Ћngth
);

964 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

965 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

966 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

968 #iвdeа
OPENSSL_NO_EVP


969 
X509_INFO
 * 
X509_INFO_√w
();

970 
X509_INFO_дУ
(
X509_INFO
 *
a
);

971 * 
X509_NAME_ЏЦЪe
(
X509_NAME
 *
a
,*
buf
,
size
);

973 
ASN1_vФify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Ѓg№1
,

974 
ASN1_BIT_STRING
 *
sig«tuї
,*
d©a
,
EVP_PKEY
 *
pkey
);

976 
ASN1_dige°
(
i2d_of_void
 *
i2d
,cЏ° 
EVP_MD
 *
ty≥
,*
d©a
,

977 *
md
,*
Ћn
);

979 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Ѓg№1
,

980 
X509_ALGOR
 *
Ѓg№2
, 
ASN1_BIT_STRING
 *
sig«tuї
,

981 *
d©a
,
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
ty≥
);

983 
ASN1_Щem_dige°
(cЏ° 
ASN1_ITEM
 *
Щ
,cЏ° 
EVP_MD
 *
ty≥
,*
d©a
,

984 *
md
,*
Ћn
);

986 
ASN1_Щem_vФify
(cЏ° 
ASN1_ITEM
 *
Щ
, 
X509_ALGOR
 *
Ѓg№1
,

987 
ASN1_BIT_STRING
 *
sig«tuї
,*
d©a
,
EVP_PKEY
 *
pkey
);

989 
ASN1_Щem_sign
(cЏ° 
ASN1_ITEM
 *
Щ
, 
X509_ALGOR
 *
Ѓg№1
, X509_ALGOR *
Ѓg№2
,

990 
ASN1_BIT_STRING
 *
sig«tuї
,

991 *
d©a
, 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
ty≥
);

994 
X509_£t_vФsiЏ
(
X509
 *
x
,
vФsiЏ
);

995 
X509_£t_£rЯlNumbФ
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rЯl
);

996 
ASN1_INTEGER
 * 
X509_gС_£rЯlNumbФ
(
X509
 *
x
);

997 
X509_£t_issuФ_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

998 
X509_NAME
 * 
X509_gС_issuФ_«me
(
X509
 *
a
);

999 
X509_£t_subjeщ_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

1000 
X509_NAME
 * 
X509_gС_subjeщ_«me
(
X509
 *
a
);

1001 
X509_£t_nўBef№e
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

1002 
X509_£t_nўAбФ
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

1003 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

1004 
EVP_PKEY
 * 
X509_gС_pubkey
(
X509
 *
x
);

1005 
ASN1_BIT_STRING
 * 
X509_gС0_pubkey_bЩ°r
(cЏ° 
X509
 *
x
);

1006 
X509_ыєifi€Л_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

1008 
X509_REQ_£t_vФsiЏ
(
X509_REQ
 *
x
,
vФsiЏ
);

1009 
X509_REQ_£t_subjeщ_«me
(
X509_REQ
 *
їq
,
X509_NAME
 *
«me
);

1010 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

1011 
EVP_PKEY
 * 
X509_REQ_gС_pubkey
(
X509_REQ
 *
їq
);

1012 
X509_REQ_exЛnsiЏ_nid
(
nid
);

1013 * 
X509_REQ_gС_exЛnsiЏ_nids
();

1014 
X509_REQ_£t_exЛnsiЏ_nids
(*
nids
);

1015 
STACK_OF
(
X509_EXTENSION
и*
X509_REQ_gС_exЛnsiЏs
(
X509_REQ
 *
їq
);

1016 
X509_REQ_add_exЛnsiЏs_nid
(
X509_REQ
 *
їq
, 
STACK_OF
(
X509_EXTENSION
и*
exts
,

1017 
nid
);

1018 
X509_REQ_add_exЛnsiЏs
(
X509_REQ
 *
їq
, 
STACK_OF
(
X509_EXTENSION
и*
exts
);

1019 
X509_REQ_gС_©М_couЅ
(cЏ° 
X509_REQ
 *
їq
);

1020 
X509_REQ_gС_©М_by_NID
(cЏ° 
X509_REQ
 *
їq
, 
nid
,

1021 
ѕ°pos
);

1022 
X509_REQ_gС_©М_by_OBJ
(cЏ° 
X509_REQ
 *
їq
, 
ASN1_OBJECT
 *
obj
,

1023 
ѕ°pos
);

1024 
X509_ATTRIBUTE
 *
X509_REQ_gС_©М
(cЏ° 
X509_REQ
 *
їq
, 
loc
);

1025 
X509_ATTRIBUTE
 *
X509_REQ_dЦСe_©М
(
X509_REQ
 *
їq
, 
loc
);

1026 
X509_REQ_add1_©М
(
X509_REQ
 *
їq
, 
X509_ATTRIBUTE
 *
©М
);

1027 
X509_REQ_add1_©М_by_OBJ
(
X509_REQ
 *
їq
,

1028 cЏ° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1029 cЏ° *
byЛs
, 
Ћn
);

1030 
X509_REQ_add1_©М_by_NID
(
X509_REQ
 *
їq
,

1031 
nid
, 
ty≥
,

1032 cЏ° *
byЛs
, 
Ћn
);

1033 
X509_REQ_add1_©М_by_txt
(
X509_REQ
 *
їq
,

1034 cЏ° *
©М«me
, 
ty≥
,

1035 cЏ° *
byЛs
, 
Ћn
);

1037 
X509_CRL_£t_vФsiЏ
(
X509_CRL
 *
x
, 
vФsiЏ
);

1038 
X509_CRL_£t_issuФ_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

1039 
X509_CRL_£t_ѕ°Upd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1040 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1041 
X509_CRL_s№t
(
X509_CRL
 *
ьl
);

1043 
X509_REVOKED_£t_£rЯlNumbФ
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rЯl
);

1044 
X509_REVOKED_£t_їvo€tiЏD©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

1046 
X509_REQ_check_іiv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

1048 
X509_check_іiv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

1050 
X509_issuФ_™d_£rЯl_cmp
(cЏ° 
X509
 *
a
, cЏ° X509 *
b
);

1051 
X509_issuФ_™d_£rЯl_hash
(
X509
 *
a
);

1053 
X509_issuФ_«me_cmp
(cЏ° 
X509
 *
a
, cЏ° X509 *
b
);

1054 
X509_issuФ_«me_hash
(
X509
 *
a
);

1056 
X509_subjeщ_«me_cmp
(cЏ° 
X509
 *
a
, cЏ° X509 *
b
);

1057 
X509_subjeщ_«me_hash
(
X509
 *
x
);

1059 
X509_cmp
(cЏ° 
X509
 *
a
, cЏ° X509 *
b
);

1060 
X509_NAME_cmp
(cЏ° 
X509_NAME
 *
a
, cЏ° X509_NAME *
b
);

1061 
X509_NAME_hash
(
X509_NAME
 *
x
);

1063 
X509_CRL_cmp
(cЏ° 
X509_CRL
 *
a
, cЏ° X509_CRL *
b
);

1064 #iвdeа
OPENSSL_NO_FP_API


1065 
X509_іЪt_ex_е
(
FILE
 *
bp
,
X509
 *
x
, 
nmжag
, 
cжag
);

1066 
X509_іЪt_е
(
FILE
 *
bp
,
X509
 *
x
);

1067 
X509_CRL_іЪt_е
(
FILE
 *
bp
,
X509_CRL
 *
x
);

1068 
X509_REQ_іЪt_е
(
FILE
 *
bp
,
X509_REQ
 *
їq
);

1069 
X509_NAME_іЪt_ex_е
(
FILE
 *
е
, 
X509_NAME
 *
nm
, 
ЪdТt
, 
жags
);

1072 #iвdeа
OPENSSL_NO_BIO


1073 
X509_NAME_іЪt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

1074 
X509_NAME_іЪt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ЪdТt
, 
жags
);

1075 
X509_іЪt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmжag
, 
cжag
);

1076 
X509_іЪt
(
BIO
 *
bp
,
X509
 *
x
);

1077 
X509_oc•id_іЪt
(
BIO
 *
bp
,
X509
 *
x
);

1078 
X509_CERT_AUX_іЪt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ЪdТt
);

1079 
X509_CRL_іЪt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1080 
X509_REQ_іЪt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmжag
, 
cжag
);

1081 
X509_REQ_іЪt
(
BIO
 *
bp
,
X509_REQ
 *
їq
);

1084 
X509_NAME_ТМy_couЅ
(
X509_NAME
 *
«me
);

1085 
X509_NAME_gС_Лxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1086 *
buf
,
Ћn
);

1087 
X509_NAME_gС_Лxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1088 *
buf
,
Ћn
);

1092 
X509_NAME_gС_Ъdex_by_NID
(
X509_NAME
 *
«me
,
nid
,
ѕ°pos
);

1093 
X509_NAME_gС_Ъdex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1094 
ѕ°pos
);

1095 
X509_NAME_ENTRY
 *
X509_NAME_gС_ТМy
(
X509_NAME
 *
«me
, 
loc
);

1096 
X509_NAME_ENTRY
 *
X509_NAME_dЦСe_ТМy
(
X509_NAME
 *
«me
, 
loc
);

1097 
X509_NAME_add_ТМy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1098 
loc
, 
£t
);

1099 
X509_NAME_add_ТМy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1100 *
byЛs
, 
Ћn
, 
loc
, 
£t
);

1101 
X509_NAME_add_ТМy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1102 *
byЛs
, 
Ћn
, 
loc
, 
£t
);

1103 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_ьЧЛ_by_txt
(X509_NAME_ENTRY **
√
,

1104 cЏ° *
fЫld
, 
ty≥
, cЏ° *
byЛs
, 
Ћn
);

1105 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_ьЧЛ_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1106 
ty≥
,*
byЛs
, 
Ћn
);

1107 
X509_NAME_add_ТМy_by_txt
(
X509_NAME
 *
«me
, cЏ° *
fЫld
, 
ty≥
,

1108 cЏ° *
byЛs
, 
Ћn
, 
loc
, 
£t
);

1109 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_ьЧЛ_by_OBJ
(X509_NAME_ENTRY **
√
,

1110 
ASN1_OBJECT
 *
obj
, 
ty≥
,cЏ° *
byЛs
,

1111 
Ћn
);

1112 
X509_NAME_ENTRY_£t_objeщ
(
X509_NAME_ENTRY
 *
√
,

1113 
ASN1_OBJECT
 *
obj
);

1114 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1115 cЏ° *
byЛs
, 
Ћn
);

1116 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gС_objeщ
(
X509_NAME_ENTRY
 *
√
);

1117 
ASN1_STRING
 * 
X509_NAME_ENTRY_gС_d©a
(
X509_NAME_ENTRY
 *
√
);

1119 
X509v3_gС_ext_couЅ
(cЏ° 
STACK_OF
(
X509_EXTENSION
и*
x
);

1120 
X509v3_gС_ext_by_NID
(cЏ° 
STACK_OF
(
X509_EXTENSION
и*
x
,

1121 
nid
, 
ѕ°pos
);

1122 
X509v3_gС_ext_by_OBJ
(cЏ° 
STACK_OF
(
X509_EXTENSION
и*
x
,

1123 
ASN1_OBJECT
 *
obj
,
ѕ°pos
);

1124 
X509v3_gС_ext_by_ьЩi€l
(cЏ° 
STACK_OF
(
X509_EXTENSION
и*
x
,

1125 
ьЩ
, 
ѕ°pos
);

1126 
X509_EXTENSION
 *
X509v3_gС_ext
(cЏ° 
STACK_OF
(X509_EXTENSIONи*
x
, 
loc
);

1127 
X509_EXTENSION
 *
X509v3_dЦСe_ext
(
STACK_OF
(X509_EXTENSIONи*
x
, 
loc
);

1128 
STACK_OF
(
X509_EXTENSION
и*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONи**
x
,

1129 
X509_EXTENSION
 *
ex
, 
loc
);

1131 
X509_gС_ext_couЅ
(
X509
 *
x
);

1132 
X509_gС_ext_by_NID
(
X509
 *
x
, 
nid
, 
ѕ°pos
);

1133 
X509_gС_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
ѕ°pos
);

1134 
X509_gС_ext_by_ьЩi€l
(
X509
 *
x
, 
ьЩ
, 
ѕ°pos
);

1135 
X509_EXTENSION
 *
X509_gС_ext
(
X509
 *
x
, 
loc
);

1136 
X509_EXTENSION
 *
X509_dЦСe_ext
(
X509
 *
x
, 
loc
);

1137 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1138 * 
X509_gС_ext_d2i
(
X509
 *
x
, 
nid
, *
ьЩ
, *
idx
);

1139 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vЃue
, 
ьЩ
,

1140 
жags
);

1142 
X509_CRL_gС_ext_couЅ
(
X509_CRL
 *
x
);

1143 
X509_CRL_gС_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
ѕ°pos
);

1144 
X509_CRL_gС_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
ѕ°pos
);

1145 
X509_CRL_gС_ext_by_ьЩi€l
(
X509_CRL
 *
x
, 
ьЩ
, 
ѕ°pos
);

1146 
X509_EXTENSION
 *
X509_CRL_gС_ext
(
X509_CRL
 *
x
, 
loc
);

1147 
X509_EXTENSION
 *
X509_CRL_dЦСe_ext
(
X509_CRL
 *
x
, 
loc
);

1148 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1149 * 
X509_CRL_gС_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
ьЩ
, *
idx
);

1150 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vЃue
, 
ьЩ
,

1151 
жags
);

1153 
X509_REVOKED_gС_ext_couЅ
(
X509_REVOKED
 *
x
);

1154 
X509_REVOKED_gС_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
ѕ°pos
);

1155 
X509_REVOKED_gС_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
ѕ°pos
);

1156 
X509_REVOKED_gС_ext_by_ьЩi€l
(
X509_REVOKED
 *
x
, 
ьЩ
, 
ѕ°pos
);

1157 
X509_EXTENSION
 *
X509_REVOKED_gС_ext
(
X509_REVOKED
 *
x
, 
loc
);

1158 
X509_EXTENSION
 *
X509_REVOKED_dЦСe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1159 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1160 * 
X509_REVOKED_gС_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
ьЩ
, *
idx
);

1161 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vЃue
, 
ьЩ
,

1162 
жags
);

1164 
X509_EXTENSION
 *
X509_EXTENSION_ьЧЛ_by_NID
(X509_EXTENSION **
ex
,

1165 
nid
, 
ьЩ
, 
ASN1_OCTET_STRING
 *
d©a
);

1166 
X509_EXTENSION
 *
X509_EXTENSION_ьЧЛ_by_OBJ
(X509_EXTENSION **
ex
,

1167 
ASN1_OBJECT
 *
obj
,
ьЩ
,
ASN1_OCTET_STRING
 *
d©a
);

1168 
X509_EXTENSION_£t_objeщ
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1169 
X509_EXTENSION_£t_ьЩi€l
(
X509_EXTENSION
 *
ex
, 
ьЩ
);

1170 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1171 
ASN1_OCTET_STRING
 *
d©a
);

1172 
ASN1_OBJECT
 * 
X509_EXTENSION_gС_objeщ
(
X509_EXTENSION
 *
ex
);

1173 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gС_d©a
(
X509_EXTENSION
 *
√
);

1174 
X509_EXTENSION_gС_ьЩi€l
(
X509_EXTENSION
 *
ex
);

1176 
X509©_gС_©М_couЅ
(cЏ° 
STACK_OF
(
X509_ATTRIBUTE
и*
x
);

1177 
X509©_gС_©М_by_NID
(cЏ° 
STACK_OF
(
X509_ATTRIBUTE
и*
x
, 
nid
,

1178 
ѕ°pos
);

1179 
X509©_gС_©М_by_OBJ
(cЏ° 
STACK_OF
(
X509_ATTRIBUTE
и*
sk
, 
ASN1_OBJECT
 *
obj
,

1180 
ѕ°pos
);

1181 
X509_ATTRIBUTE
 *
X509©_gС_©М
(cЏ° 
STACK_OF
(X509_ATTRIBUTEи*
x
, 
loc
);

1182 
X509_ATTRIBUTE
 *
X509©_dЦСe_©М
(
STACK_OF
(X509_ATTRIBUTEи*
x
, 
loc
);

1183 
STACK_OF
(
X509_ATTRIBUTE
и*
X509©_add1_©М
(STACK_OF(X509_ATTRIBUTEи**
x
,

1184 
X509_ATTRIBUTE
 *
©М
);

1185 
STACK_OF
(
X509_ATTRIBUTE
и*
X509©_add1_©М_by_OBJ
(STACK_OF(X509_ATTRIBUTEи**
x
,

1186 cЏ° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1187 cЏ° *
byЛs
, 
Ћn
);

1188 
STACK_OF
(
X509_ATTRIBUTE
и*
X509©_add1_©М_by_NID
(STACK_OF(X509_ATTRIBUTEи**
x
,

1189 
nid
, 
ty≥
,

1190 cЏ° *
byЛs
, 
Ћn
);

1191 
STACK_OF
(
X509_ATTRIBUTE
и*
X509©_add1_©М_by_txt
(STACK_OF(X509_ATTRIBUTEи**
x
,

1192 cЏ° *
©М«me
, 
ty≥
,

1193 cЏ° *
byЛs
, 
Ћn
);

1194 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_ьЧЛ_by_NID
(X509_ATTRIBUTE **
©М
, 
nid
,

1195 
©єy≥
, cЏ° *
d©a
, 
Ћn
);

1196 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_ьЧЛ_by_OBJ
(X509_ATTRIBUTE **
©М
,

1197 cЏ° 
ASN1_OBJECT
 *
obj
, 
©єy≥
, cЏ° *
d©a
, 
Ћn
);

1198 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_ьЧЛ_by_txt
(X509_ATTRIBUTE **
©М
,

1199 cЏ° *
©Їame
, 
ty≥
, cЏ° *
byЛs
, 
Ћn
);

1200 
X509_ATTRIBUTE_£t1_objeщ
(
X509_ATTRIBUTE
 *
©М
, cЏ° 
ASN1_OBJECT
 *
obj
);

1201 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©М
, 
©Мty≥
, cЏ° *
d©a
, 
Ћn
);

1202 *
X509_ATTRIBUTE_gС0_d©a
(
X509_ATTRIBUTE
 *
©М
, 
idx
,

1203 
©єy≥
, *
d©a
);

1204 
X509_ATTRIBUTE_couЅ
(
X509_ATTRIBUTE
 *
©М
);

1205 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gС0_objeщ
(
X509_ATTRIBUTE
 *
©М
);

1206 
ASN1_TYPE
 *
X509_ATTRIBUTE_gС0_ty≥
(
X509_ATTRIBUTE
 *
©М
, 
idx
);

1208 
EVP_PKEY_gС_©М_couЅ
(cЏ° 
EVP_PKEY
 *
key
);

1209 
EVP_PKEY_gС_©М_by_NID
(cЏ° 
EVP_PKEY
 *
key
, 
nid
,

1210 
ѕ°pos
);

1211 
EVP_PKEY_gС_©М_by_OBJ
(cЏ° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1212 
ѕ°pos
);

1213 
X509_ATTRIBUTE
 *
EVP_PKEY_gС_©М
(cЏ° 
EVP_PKEY
 *
key
, 
loc
);

1214 
X509_ATTRIBUTE
 *
EVP_PKEY_dЦСe_©М
(
EVP_PKEY
 *
key
, 
loc
);

1215 
EVP_PKEY_add1_©М
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©М
);

1216 
EVP_PKEY_add1_©М_by_OBJ
(
EVP_PKEY
 *
key
,

1217 cЏ° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1218 cЏ° *
byЛs
, 
Ћn
);

1219 
EVP_PKEY_add1_©М_by_NID
(
EVP_PKEY
 *
key
,

1220 
nid
, 
ty≥
,

1221 cЏ° *
byЛs
, 
Ћn
);

1222 
EVP_PKEY_add1_©М_by_txt
(
EVP_PKEY
 *
key
,

1223 cЏ° *
©М«me
, 
ty≥
,

1224 cЏ° *
byЛs
, 
Ћn
);

1226 
X509_vФify_ыє
(
X509_STORE_CTX
 *
щx
);

1229 
X509
 *
X509_fЪd_by_issuФ_™d_£rЯl
(
STACK_OF
(X509и*
sk
,
X509_NAME
 *
«me
,

1230 
ASN1_INTEGER
 *
£rЯl
);

1231 
X509
 *
X509_fЪd_by_subjeщ
(
STACK_OF
(X509и*
sk
,
X509_NAME
 *
«me
);

1233 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1234 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1235 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1237 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Ѓg
, 
ЩФ
, *
І…
, 
І…Ћn
);

1238 
X509_ALGOR
 *
PKCS5_pbe2_£t
(cЏ° 
EVP_CIPHER
 *
cЭhФ
, 
ЩФ
,

1239 *
І…
, 
І…Ћn
);

1243 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1245 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1246 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1247 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokТ
(
EVP_PKEY
 *
pkey
, 
brokТ
);

1248 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokТ
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokТ
);

1250 
X509_check_Мu°
(
X509
 *
x
, 
id
, 
жags
);

1251 
X509_TRUST_gС_couЅ
();

1252 
X509_TRUST
 * 
X509_TRUST_gС0
(
idx
);

1253 
X509_TRUST_gС_by_id
(
id
);

1254 
X509_TRUST_add
(
id
, 
жags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1255 *
«me
, 
ђg1
, *
ђg2
);

1256 
X509_TRUST_юЧnup
();

1257 
X509_TRUST_gС_жags
(
X509_TRUST
 *
xp
);

1258 *
X509_TRUST_gС0_«me
(
X509_TRUST
 *
xp
);

1259 
X509_TRUST_gС_Мu°
(
X509_TRUST
 *
xp
);

1265 
ERR_lяd_X509_°rЪgs
();

1270 
	#X509_F_ADD_CERT_DIR
 100

	)

1271 
	#X509_F_BY_FILE_CTRL
 101

	)

1272 
	#X509_F_CHECK_POLICY
 145

	)

1273 
	#X509_F_DIR_CTRL
 102

	)

1274 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1275 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1276 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1277 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1278 
	#X509_F_X509V3_ADD_EXT
 104

	)

1279 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1280 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1281 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1282 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1283 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1284 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1285 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1286 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1287 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1288 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1289 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1290 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1291 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1292 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1293 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1294 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1295 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1296 
	#X509_F_X509_NAME_ONELINE
 116

	)

1297 
	#X509_F_X509_NAME_PRINT
 117

	)

1298 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1299 
	#X509_F_X509_PUBKEY_GET
 119

	)

1300 
	#X509_F_X509_PUBKEY_SET
 120

	)

1301 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1302 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1303 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1304 
	#X509_F_X509_REQ_TO_X509
 123

	)

1305 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1306 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1307 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1308 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1309 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1310 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1311 
	#X509_F_X509_TO_X509_REQ
 126

	)

1312 
	#X509_F_X509_TRUST_ADD
 133

	)

1313 
	#X509_F_X509_TRUST_SET
 141

	)

1314 
	#X509_F_X509_VERIFY_CERT
 127

	)

1317 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1318 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1319 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1320 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1321 
	#X509_R_ERR_ASN1_LIB
 102

	)

1322 
	#X509_R_INVALID_DIRECTORY
 113

	)

1323 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1324 
	#X509_R_INVALID_TRUST
 123

	)

1325 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1326 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1327 
	#X509_R_LOADING_CERT_DIR
 103

	)

1328 
	#X509_R_LOADING_DEFAULTS
 104

	)

1329 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1330 
	#X509_R_SHOULD_RETRY
 106

	)

1331 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1332 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1333 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1334 
	#X509_R_UNKNOWN_NID
 109

	)

1335 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1336 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1337 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1338 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1339 
	#X509_R_WRONG_TYPE
 122

	)

1341 #ifdeа 
__эlu•lus


	@/usr/include/rpc/netdb.h

36 #iвdeа
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<г©uїs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sљыЅ


48 *
	mr_«me
;

49 **
	mr_ЃЯ£s
;

50 
	mr_numbФ
;

53 
	$£МpыЅ
 (
__°ayЁТ
и
__THROW
;

54 
	$ТdљыЅ
 (и
__THROW
;

55 
љыЅ
 *
	$gСљcby«me
 (
__cЏ°
 *
__«me
и
__THROW
;

56 
љыЅ
 *
	$gСљcbynumbФ
 (
__numbФ
и
__THROW
;

57 
љыЅ
 *
	$gСљыЅ
 (и
__THROW
;

59 #ifdeа
__USE_MISC


60 
	$gСљcby«me_r
 (
__cЏ°
 *
__«me
, 
љыЅ
 *
__їsu…_buf
,

61 *
__bufгr
, 
size_t
 
__buжТ
,

62 
љыЅ
 **
__їsu…
и
__THROW
;

64 
	$gСљcbynumbФ_r
 (
__numbФ
, 
љыЅ
 *
__їsu…_buf
,

65 *
__bufгr
, 
size_t
 
__buжТ
,

66 
љыЅ
 **
__їsu…
и
__THROW
;

68 
	$gСљыЅ_r
 (
љыЅ
 *
__їsu…_buf
, *
__bufгr
,

69 
size_t
 
__buжТ
, 
љыЅ
 **
__їsu…
и
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

20 #iвdef 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<г©uїs.h
>

26 
	~<bЩs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bЩs/sched.h
>

37 
	#sched_іi№Щy
 
__sched_іi№Щy


	)

40 
__BEGIN_DECLS


43 
	$sched_£Нђam
 (
__pid_t
 
__pid
, 
__cЏ°
 
sched_Јњm
 *
__Јњm
)

44 
__THROW
;

47 
	$sched_gСЈњm
 (
__pid_t
 
__pid
, 
sched_Јњm
 *
__Јњm
и
__THROW
;

50 
	$sched_£tscheduЋr
 (
__pid_t
 
__pid
, 
__pёicy
,

51 
__cЏ°
 
sched_Јњm
 *
__Јњm
и
__THROW
;

54 
	$sched_gСscheduЋr
 (
__pid_t
 
__pid
и
__THROW
;

57 
	$sched_yЫld
 (и
__THROW
;

60 
	$sched_gС_іi№Щy_max
 (
__Ѓg№Щhm
и
__THROW
;

63 
	$sched_gС_іi№Щy_mЪ
 (
__Ѓg№Щhm
и
__THROW
;

66 
	$sched_Љ_gС_ЪЛrvЃ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
и
__THROW
;

69 #ifdeа
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
эu
, 
эu£Н
и
	`__CPU_SET_S
 (эu,  (
эu_£t_t
), cpu£Н)

	)

73 
	#CPU_CLR
(
эu
, 
эu£Н
и
	`__CPU_CLR_S
 (эu,  (
эu_£t_t
), cpu£Н)

	)

74 
	#CPU_ISSET
(
эu
, 
эu£Н
и
	`__CPU_ISSET_S
 (эu,  (
эu_£t_t
), \

75 
эu£Н
)

	)

76 
	#CPU_ZERO
(
эu£Н
и
	`__CPU_ZERO_S
 ( (
эu_£t_t
), cpu£Н)

	)

77 
	#CPU_COUNT
(
эu£Н
и
	`__CPU_COUNT_S
 ( (
эu_£t_t
), cpu£Н)

	)

79 
	#CPU_SET_S
(
эu
, 
£tsize
, 
эu£Н
и
	`__CPU_SET_S
 (эu, sСsize, cpu£Н)

	)

80 
	#CPU_CLR_S
(
эu
, 
£tsize
, 
эu£Н
и
	`__CPU_CLR_S
 (эu, sСsize, cpu£Н)

	)

81 
	#CPU_ISSET_S
(
эu
, 
£tsize
, 
эu£Н
и
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
эu£Н
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
эu£Н
и
	`__CPU_ZERO_S
 (£tsize, cpu£Н)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
эu£Н
и
	`__CPU_COUNT_S
 (£tsize, cpu£Н)

	)

86 
	#CPU_EQUAL
(
эu£Н1
, 
эu£Н2
) \

87 
	`__CPU_EQUAL_S
 ( (
эu_£t_t
), 
эu£Н1
, 
эu£Н2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
эu£Н1
, 
эu£Н2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
эu£Н1
, 
эu£Н2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
эu_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
эu_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
эu_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
couЅ
и
	`__CPU_ALLOC_SIZE
 (couЅ)

	)

105 
	#CPU_ALLOC
(
couЅ
и
	`__CPU_ALLOC
 (couЅ)

	)

106 
	#CPU_FREE
(
эu£t
и
	`__CPU_FREE
 (эu£t)

	)

110 
	$sched_£ПffЪЩy
 (
__pid_t
 
__pid
, 
size_t
 
__эu£tsize
,

111 
__cЏ°
 
эu_£t_t
 *
__эu£t
и
__THROW
;

114 
	$sched_gСaffЪЩy
 (
__pid_t
 
__pid
, 
size_t
 
__эu£tsize
,

115 
эu_£t_t
 *
__эu£t
и
__THROW
;

118 
__END_DECLS


	@/usr/include/sys/poll.h

20 #iвdef 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<г©uїs.h
>

26 
	~<bЩs/pёl.h
>

27 #ifdeа
__USE_GNU


29 
	~<bЩs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spёlfd


42 
	mfd
;

43 
	mevТts
;

44 
	mїvТts
;

48 
__BEGIN_DECLS


58 
pёl
 (
pёlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifdeа
__USE_GNU


67 
µёl
 (
pёlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__cЏ°
 
time•ec
 *
__timeout
,

69 
__cЏ°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #iвdeа
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<г©uїs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°dђg.h
>

40 
	~<bЩs/sy¶og-Јth.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
и(’и& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
зc
, 
іi
и(((зcи<< 3и| (іi))

	)

65 #ifdeа
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vЃ
;

72 } 
	tCODE
;

74 
CODE
 
	gіi№Щy«mes
[] =

76 { "ЃФt", 
LOG_ALERT
 },

77 { "ьЩ", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emФg", 
LOG_EMERG
 },

80 { "Фr", 
LOG_ERR
 },

81 { "Фr№", 
LOG_ERR
 },

82 { "Ъfo", 
LOG_INFO
 },

83 { "nЏe", 
INTERNAL_NOPRI
 },

84 { "nўiы", 
LOG_NOTICE
 },

85 { "Јnic", 
LOG_EMERG
 },

86 { "wђn", 
LOG_WARNING
 },

87 { "wђnЪg", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3и

	)

94 
	#LOG_USER
 (1<<3и

	)

95 
	#LOG_MAIL
 (2<<3и

	)

96 
	#LOG_DAEMON
 (3<<3и

	)

97 
	#LOG_AUTH
 (4<<3и

	)

98 
	#LOG_SYSLOG
 (5<<3и

	)

99 
	#LOG_LPR
 (6<<3и

	)

100 
	#LOG_NEWS
 (7<<3и

	)

101 
	#LOG_UUCP
 (8<<3и

	)

102 
	#LOG_CRON
 (9<<3и

	)

103 
	#LOG_AUTHPRIV
 (10<<3и

	)

104 
	#LOG_FTP
 (11<<3и

	)

107 
	#LOG_LOCAL0
 (16<<3и

	)

108 
	#LOG_LOCAL1
 (17<<3и

	)

109 
	#LOG_LOCAL2
 (18<<3и

	)

110 
	#LOG_LOCAL3
 (19<<3и

	)

111 
	#LOG_LOCAL4
 (20<<3и

	)

112 
	#LOG_LOCAL5
 (21<<3и

	)

113 
	#LOG_LOCAL6
 (22<<3и

	)

114 
	#LOG_LOCAL7
 (23<<3и

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
и((’и& 
LOG_FACMASK
и>> 3)

	)

121 #ifdeа
SYSLOG_NAMES


122 
CODE
 
	gзcЮЩy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "authіiv", 
LOG_AUTHPRIV
 },

126 { "ьЏ", 
LOG_CRON
 },

127 { "dЂmЏ", 
LOG_DAEMON
 },

128 { "бp", 
LOG_FTP
 },

129 { "kФn", 
LOG_KERN
 },

130 { "Ќr", 
LOG_LPR
 },

131 { "maЮ", 
LOG_MAIL
 },

132 { "mђk", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curЩy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uuэ", 
LOG_UUCP
 },

138 { "lo€l0", 
LOG_LOCAL0
 },

139 { "lo€l1", 
LOG_LOCAL1
 },

140 { "lo€l2", 
LOG_LOCAL2
 },

141 { "lo€l3", 
LOG_LOCAL3
 },

142 { "lo€l4", 
LOG_LOCAL4
 },

143 { "lo€l5", 
LOG_LOCAL5
 },

144 { "lo€l6", 
LOG_LOCAL6
 },

145 { "lo€l7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
іi
и(1 << (іi)и

	)

154 
	#LOG_UPTO
(
іi
и((1 << (’ri)+1)и- 1и

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
юo£log
 ();

181 
ЁТlog
 (
__cЏ°
 *
__idТt
, 
__ЁtiЏ
, 
__зcЮЩy
);

184 
	$£Оogmask
 (
__mask
и
__THROW
;

190 
	$sy¶og
 (
__іi
, 
__cЏ°
 *
__fmt
, ...)

191 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 3)));

193 #ifdeа
__USE_BSD


200 
	$vsy¶og
 (
__іi
, 
__cЏ°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 2, 0)));

206 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


207 
	~<bЩs/sy¶og.h
>

209 #ifdeа
__LDBL_COMPAT


210 
	~<bЩs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #iвdeа
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<г©uїs.h
>

29 #ifdeа
__GLIBC_HAVE_LONG_LONG


30 
__exЛnsiЏ__


31 
	$gnu_dev_maj№
 (
__dev
)

32 
__THROW
;

33 
__exЛnsiЏ__


34 
	$gnu_dev_mЪ№
 (
__dev
)

35 
__THROW
;

36 
__exЛnsiЏ__


37 
	$gnu_dev_makedev
 (
__maj№
,

38 
__mЪ№
)

39 
__THROW
;

41 #iа
defЪed
 
__GNUC__
 && __GNUC__ >р2 && defЪed 
__USE_EXTERN_INLINES


42 
__exЛnsiЏ__
 
__exЛЇ_ЪlЪe
 

43 
	`__NTH
 (
	$gnu_dev_maj№
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exЛnsiЏ__
 
__exЛЇ_ЪlЪe
 

49 
__NTH
 (
	$gnu_dev_mЪ№
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exЛnsiЏ__
 
__exЛЇ_ЪlЪe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj№
, 
__mЪ№
))

57  ((
__mЪ№
 & 0xffи| ((
__maj№
 & 0xfff) << 8)

58 | (((и(
__mЪ№
 & ~0xff)) << 12)

59 | (((и(
__maj№
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj№
(
dev
и
	`gnu_dev_maj№
 (dev)

	)

66 
	#mЪ№
(
dev
и
	`gnu_dev_mЪ№
 (dev)

	)

67 
	#makedev
(
maj
, 
mЪ
и
	`gnu_dev_makedev
 (maj, mЪ)

	)

	@/usr/include/sys/ttydefaults.h

40 #iвdeа
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
и(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifdeа
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifdeа
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifdeа
TTYDEFCHARS


94 
cc_t
 
	gЙydefchђs
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #undeа
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #iвdeа
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<г©uїs.h
>

23 
	~<sig«l.h
>

24 
	~<bЩs/w№dsize.h
>

28 
	~<bЩs/sigcЏЛxt.h
>

30 #iа
__WORDSIZE
 == 64

33 
	tgїg_t
;

36 
	#NGREG
 23

	)

39 
gїg_t
 
	tgїg£t_t
[
NGREG
];

41 #ifdeа
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_еxїg


96 
	msignifi€nd
[4];

97 
	mexpЏТt
;

98 
	mЈddЪg
[3];

101 
	s_libc_xmmїg


103 
__uЪt32_t
 
	mЦemТt
[4];

106 
	s_libc_е°©e


109 
__uЪt16_t
 
	mcwd
;

110 
__uЪt16_t
 
	mswd
;

111 
__uЪt16_t
 
	mбw
;

112 
__uЪt16_t
 
	mfЁ
;

113 
__uЪt64_t
 
	mrЭ
;

114 
__uЪt64_t
 
	mrdp
;

115 
__uЪt32_t
 
	mmxc§
;

116 
__uЪt32_t
 
	mmxь_mask
;

117 
_libc_еxїg
 
	m_°
[8];

118 
_libc_xmmїg
 
	m_xmm
[16];

119 
__uЪt32_t
 
	mЈddЪg
[24];

123 
_libc_е°©e
 *
	tеїg£t_t
;

128 
gїg£t_t
 
	mgїgs
;

130 
еїg£t_t
 
	mеїgs
;

131 
	m__ї£rved1
 [8];

132 } 
	tmcЏЛxt_t
;

135 
	sucЏЛxt


137 
	muc_жags
;

138 
ucЏЛxt
 *
	muc_lЪk
;

139 
°ack_t
 
	muc_°ack
;

140 
mcЏЛxt_t
 
	muc_mcЏЛxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_е°©e
 
	m__еїgs_mem
;

143 } 
	tucЏЛxt_t
;

148 
	tgїg_t
;

151 
	#NGREG
 19

	)

154 
gїg_t
 
	tgїg£t_t
[
NGREG
];

156 #ifdeа
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_еїg


204 
	msignifi€nd
[4];

205 
	mexpЏТt
;

208 
	s_libc_е°©e


210 
	mcw
;

211 
	msw
;

212 
	mПg
;

213 
	mЭoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_еїg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_е°©e
 *
	tеїg£t_t
;

227 
gїg£t_t
 
	mgїgs
;

230 
еїg£t_t
 
	mеїgs
;

231 
	mёdmask
;

232 
	mь2
;

233 } 
	tmcЏЛxt_t
;

236 
	sucЏЛxt


238 
	muc_жags
;

239 
ucЏЛxt
 *
	muc_lЪk
;

240 
°ack_t
 
	muc_°ack
;

241 
mcЏЛxt_t
 
	muc_mcЏЛxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_е°©e
 
	m__еїgs_mem
;

244 } 
	tucЏЛxt_t
;

	@/usr/include/xlocale.h

21 #iвdeа
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__lo€Ћ_°ruщ


31 
lo€Ћ_d©a
 *
	m__lo€Ћs
[13];

34 cЏ° *
	m__щy≥_b
;

35 cЏ° *
	m__щy≥_tёowФ
;

36 cЏ° *
	m__щy≥_touµФ
;

39 cЏ° *
	m__«mes
[13];

40 } *
	t__lo€Ћ_t
;

43 
__lo€Ћ_t
 
	tlo€Ћ_t
;

	@/usr/include/zconf.h

8 #iвdeа
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifdeа
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Ћngth_code
 
z__Ћngth_code


	)

22 
	#_М_Ѓign
 
z__М_Ѓign


	)

23 
	#_М_жush_block
 
z__М_жush_block


	)

24 
	#_М_ЪЩ
 
z__М_ЪЩ


	)

25 
	#_М_°№ed_block
 
z__М_°№ed_block


	)

26 
	#_М_Пќy
 
z__М_Пќy


	)

27 
	#adЋr32
 
z_adЋr32


	)

28 
	#adЋr32_combЪe
 
z_adЋr32_combЪe


	)

29 
	#comіess
 
z_comіess


	)

30 
	#comіess2
 
z_comіess2


	)

31 
	#comіessBound
 
z_comіessBound


	)

32 
	#ьc32
 
z_ьc32


	)

33 
	#ьc32_combЪe
 
z_ьc32_combЪe


	)

34 
	#deж©e
 
z_deж©e


	)

35 
	#deж©eBound
 
z_deж©eBound


	)

36 
	#deж©eCЁy
 
z_deж©eCЁy


	)

37 
	#deж©eEnd
 
z_deж©eEnd


	)

38 
	#deж©eInЩ2_
 
z_deж©eInЩ2_


	)

39 
	#deж©eInЩ_
 
z_deж©eInЩ_


	)

40 
	#deж©ePђams
 
z_deж©ePђams


	)

41 
	#deж©ePrime
 
z_deж©ePrime


	)

42 
	#deж©eRe£t
 
z_deж©eRe£t


	)

43 
	#deж©eSСDiщiЏђy
 
z_deж©eSСDiщiЏђy


	)

44 
	#deж©eSСHЧdФ
 
z_deж©eSСHЧdФ


	)

45 
	#deж©eTu√
 
z_deж©eTu√


	)

46 
	#deж©e_cЁyright
 
z_deж©e_cЁyright


	)

47 
	#gС_ьc_ПbЋ
 
z_gС_ьc_ПbЋ


	)

48 
	#gzюЧїЉ
 
z_gzюЧїЉ


	)

49 
	#gzюo£
 
z_gzюo£


	)

50 
	#gzdЬeщ
 
z_gzdЬeщ


	)

51 
	#gzdЁТ
 
z_gzdЁТ


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzФr№
 
z_gzФr№


	)

54 
	#gzжush
 
z_gzжush


	)

55 
	#gzgСc
 
z_gzgСc


	)

56 
	#gzgСs
 
z_gzgСs


	)

57 
	#gzЁТ
 
z_gzЁТ


	)

58 
	#gzіЪtf
 
z_gzіЪtf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzїad
 
z_gzїad


	)

62 
	#gzїwЪd
 
z_gzїwЪd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£Нђams
 
z_gz£Нђams


	)

65 
	#gzЛќ
 
z_gzЛќ


	)

66 
	#gzungСc
 
z_gzungСc


	)

67 
	#gzwrЩe
 
z_gzwrЩe


	)

68 
	#Ъж©e
 
z_Ъж©e


	)

69 
	#Ъж©eBack
 
z_Ъж©eBack


	)

70 
	#Ъж©eBackEnd
 
z_Ъж©eBackEnd


	)

71 
	#Ъж©eBackInЩ_
 
z_Ъж©eBackInЩ_


	)

72 
	#Ъж©eCЁy
 
z_Ъж©eCЁy


	)

73 
	#Ъж©eEnd
 
z_Ъж©eEnd


	)

74 
	#Ъж©eGСHЧdФ
 
z_Ъж©eGСHЧdФ


	)

75 
	#Ъж©eInЩ2_
 
z_Ъж©eInЩ2_


	)

76 
	#Ъж©eInЩ_
 
z_Ъж©eInЩ_


	)

77 
	#Ъж©ePrime
 
z_Ъж©ePrime


	)

78 
	#Ъж©eRe£t
 
z_Ъж©eRe£t


	)

79 
	#Ъж©eSСDiщiЏђy
 
z_Ъж©eSСDiщiЏђy


	)

80 
	#Ъж©eSync
 
z_Ъж©eSync


	)

81 
	#Ъж©eSyncPoЪt
 
z_Ъж©eSyncPoЪt


	)

82 
	#Ъж©e_cЁyright
 
z_Ъж©e_cЁyright


	)

83 
	#Ъж©e_з°
 
z_Ъж©e_з°


	)

84 
	#Ъж©e_ПbЋ
 
z_Ъж©e_ПbЋ


	)

85 
	#uncomіess
 
z_uncomіess


	)

86 
	#zEЉ№
 
z_zEЉ№


	)

87 
	#z_Фrmsg
 
z_z_Фrmsg


	)

88 
	#z€ќoc
 
z_z€ќoc


	)

89 
	#zcдУ
 
z_zcдУ


	)

90 
	#zlibCompЮeFѕgs
 
z_zlibCompЮeFѕgs


	)

91 
	#zlibVФsiЏ
 
z_zlibVФsiЏ


	)

94 
	#ByЛ
 
z_ByЛ


	)

95 
	#ByЛf
 
z_ByЛf


	)

96 
	#Ѓloc_func
 
z_Ѓloc_func


	)

97 
	#chђf
 
z_chђf


	)

98 
	#дУ_func
 
z_дУ_func


	)

99 
	#gzFЮe
 
z_gzFЮe


	)

100 
	#gz_hЧdФ
 
z_gz_hЧdФ


	)

101 
	#gz_hЧdФp
 
z_gz_hЧdФp


	)

102 
	#Ъ_func
 
z_Ъ_func


	)

103 
	#Ъtf
 
z_Ъtf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uIЅ
 
z_uIЅ


	)

106 
	#uIЅf
 
z_uIЅf


	)

107 
	#uLЏg
 
z_uLЏg


	)

108 
	#uLЏgf
 
z_uLЏgf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°їam
 
z_z_°їam


	)

116 
	#z_°їamp
 
z_z_°їamp


	)

119 
	#gz_hЧdФ_s
 
z_gz_hЧdФ_s


	)

120 
	#ЪЛЇЃ_°©e
 
z_ЪЛЇЃ_°©e


	)

121 
	#z_°їam_s
 
z_z_°їam_s


	)

125 #iа
defЪed
(
__MSDOS__
и&& !defЪed(
MSDOS
)

126 
	#MSDOS


	)

128 #iа(
defЪed
(
OS_2
и|| defЪed(
__OS2__
)и&& !defЪed(
OS2
)

129 
	#OS2


	)

131 #iа
defЪed
(
_WINDOWS
и&& !defЪed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #iа
defЪed
(
_WIN32
и|| defЪed(
_WIN32_WCE
и|| defЪed(
__WIN32__
)

135 #iвdeа
WIN32


136 
	#WIN32


	)

139 #iа(
defЪed
(
MSDOS
и|| defЪed(
OS2
и|| defЪed(
WINDOWS
)и&& !defЪed(
WIN32
)

140 #iа!
defЪed
(
__GNUC__
и&& !defЪed(
__FLAT__
и&& !defЪed(
__386__
)

141 #iвdeа
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifdeа
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifdeа
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifdeа
__STDC_VERSION__


159 #iвdeа
STDC


160 
	#STDC


	)

162 #iа
__STDC_VERSION__
 >= 199901L

163 #iвdeа
STDC99


164 
	#STDC99


	)

168 #iа!
defЪed
(
STDC
и&& (defЪed(
__STDC__
и|| defЪed(
__эlu•lus
))

169 
	#STDC


	)

171 #iа!
defЪed
(
STDC
и&& (defЪed(
__GNUC__
и|| defЪed(
__BORLANDC__
))

172 
	#STDC


	)

174 #iа!
defЪed
(
STDC
и&& (defЪed(
MSDOS
и|| defЪed(
WINDOWS
и|| defЪed(
WIN32
))

175 
	#STDC


	)

177 #iа!
defЪed
(
STDC
и&& (defЪed(
OS2
и|| defЪed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #iа
defЪed
(
__OS400__
и&& !defЪed(
STDC
)

182 
	#STDC


	)

185 #iвdeа
STDC


187 cЏ°

	)

192 #iа
defЪed
(
__MWERKS__
)||defЪed(
≠ґec
)||defЪed(
THINK_C
)||defЪed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #iвdeа
MAX_MEM_LEVEL


198 #ifdeа
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #iвdeа
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #iвdeа
OF


230 #ifdeа
STDC


231 
	#OF
(
ђgs
и
	)
args

233 
	#OF
(
ђgs
и()

	)

243 #ifdeа
SYS16BIT


244 #iа
defЪed
(
M_I86SM
и|| defЪed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifdeа
_MSC_VER


248 
	#FAR
 
_зr


	)

250 
	#FAR
 
зr


	)

253 #iа(
defЪed
(
__SMALL__
и|| defЪed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifdeа
__BORLANDC__


257 
	#FAR
 
_зr


	)

259 
	#FAR
 
зr


	)

264 #iа
defЪed
(
WINDOWS
и|| defЪed(
WIN32
)

268 #ifdeа
ZLIB_DLL


269 #iа
defЪed
(
WIN32
и&& (!defЪed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifdeа
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__deю•ec
(
dќexp№t
)

	)

273 
	#ZEXTERN
 
	`__deю•ec
(
dќimp№t
)

	)

281 #ifdeа
ZLIB_WINAPI


282 #ifdeа
FAR


283 #undeа
FAR


285 
	~<wЪdows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifdeа
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #iа
defЪed
 (
__BEOS__
)

298 #ifdeа
ZLIB_DLL


299 #ifdeа
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__deю•ec
(
dќexp№t
)

	)

301 
	#ZEXPORTVA
 
	`__deю•ec
(
dќexp№t
)

	)

303 
	#ZEXPORT
 
	`__deю•ec
(
dќimp№t
)

	)

304 
	#ZEXPORTVA
 
	`__deю•ec
(
dќimp№t
)

	)

309 #ifdeа
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©МibuЛ__
((
	`visibЮЩy
 ("deзu…"))и

	)

313 #iвdeа
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #iвdeа
ZEXPORT


317 
	#ZEXPORT


	)

319 #iвdeа
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #iвdeа
FAR


324 
	#FAR


	)

327 #iа!
defЪed
(
__MACTYPES__
)

328 
	tByЛ
;

330 
	tuIЅ
;

331 
	tuLЏg
;

333 #ifdeа
SMALL_MEDIUM


335 
	#ByЛf
 
ByЛ
 
FAR


	)

337 
ByЛ
 
	tFAR
 
	tByЛf
;

339 
	tFAR
 
	tchђf
;

340 
	tFAR
 
	tЪtf
;

341 
uIЅ
 
	tFAR
 
	tuIЅf
;

342 
uLЏg
 
	tFAR
 
	tuLЏgf
;

344 #ifdeа
STDC


345 cЏ° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
ByЛ
 cЏ° *
	tvoidpc
;

350 
ByЛ
 
	tFAR
 *
	tvoidpf
;

351 
ByЛ
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifdeа
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #iвdeа
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #iвdeа
z_off_t


366 
	#z_off_t
 

	)

369 #iа
defЪed
(
__OS400__
)

370 
	#NO_vҐіЪtf


	)

373 #iа
defЪed
(
__MVS__
)

374 
	#NO_vҐіЪtf


	)

378 #iа
defЪed
(
__MVS__
)

379 #іagm®
m≠
(
deж©eInЩ_
,"DEIN")

380 #іagm®
m≠
(
deж©eInЩ2_
,"DEIN2")

381 #іagm®
m≠
(
deж©eEnd
,"DEEND")

382 #іagm®
m≠
(
deж©eBound
,"DEBND")

383 #іagm®
m≠
(
Ъж©eInЩ_
,"ININ")

384 #іagm®
m≠
(
Ъж©eInЩ2_
,"ININ2")

385 #іagm®
m≠
(
Ъж©eEnd
,"INEND")

386 #іagm®
m≠
(
Ъж©eSync
,"INSY")

387 #іagm®
m≠
(
Ъж©eSСDiщiЏђy
,"INSEDI")

388 #іagm®
m≠
(
comіessBound
,"CMBND")

389 #іagm®
m≠
(
Ъж©e_ПbЋ
,"INTABL")

390 #іagm®
m≠
(
Ъж©e_з°
,"INFA")

391 #іagm®
m≠
(
Ъж©e_cЁyright
,"INCOPY")

	@/usr/include/_G_config.h

4 #iвdeа
_G_cЏfig_h


5 
	#_G_cЏfig_h
 1

	)

9 
	~<bЩs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wchђ_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wЪt_t


	)

20 
	~<wchђ.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_еos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_еos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wchђ_t
 
wchђ_t


	)

38 
	#_G_wЪt_t
 
wЪt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #iа
defЪed
 
_LIBC
 || defЪed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gcЏv.h
>

44 
__gcЏv_Ъfo
 
	m__cd
;

47 
__gcЏv_Ъfo
 
	m__cd
;

48 
__gcЏv_°Х_d©a
 
	m__d©a
;

49 } 
	m__combЪed
;

50 } 
	t_G_icЏv_t
;

53 
	t_G_Ъt16_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_Ъt32_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uЪt16_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uЪt32_t
 
	t__©МibuЛ__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__ЁТ64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
и
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`defЪed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #iа
defЪed
 
__эlu•lus
 || defЪed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
и
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
и()

	)

	@/usr/include/asm/ioctls.h

1 #iвdeа
_ASM_X86_IOCTLS_H


2 
	#_ASM_X86_IOCTLS_H


	)

4 
	~<asm/ioщl.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
Лrmios2
)

	)

51 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
Лrmios2
)

	)

52 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
Лrmios2
)

	)

53 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
Лrmios2
)

	)

54 
	#TIOCGRS485
 0x542E

	)

55 
	#TIOCSRS485
 0x542F

	)

56 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, )

	)

58 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, и

	)

59 
	#TCGETX
 0x5432

	)

60 
	#TCSETX
 0x5433

	)

61 
	#TCSETXF
 0x5434

	)

62 
	#TCSETXW
 0x5435

	)

64 
	#FIONCLEX
 0x5450

	)

65 
	#FIOCLEX
 0x5451

	)

66 
	#FIOASYNC
 0x5452

	)

67 
	#TIOCSERCONFIG
 0x5453

	)

68 
	#TIOCSERGWILD
 0x5454

	)

69 
	#TIOCSERSWILD
 0x5455

	)

70 
	#TIOCGLCKTRMIOS
 0x5456

	)

71 
	#TIOCSLCKTRMIOS
 0x5457

	)

72 
	#TIOCSERGSTRUCT
 0x5458

	)

73 
	#TIOCSERGETLSR
 0x5459

	)

74 
	#TIOCSERGETMULTI
 0x545A

	)

75 
	#TIOCSERSETMULTI
 0x545B

	)

77 
	#TIOCMIWAIT
 0x545C

	)

78 
	#TIOCGICOUNT
 0x545D

	)

79 
	#TIOCGHAYESESP
 0x545E

	)

80 
	#TIOCSHAYESESP
 0x545F

	)

81 
	#FIOQSIZE
 0x5460

	)

84 
	#TIOCPKT_DATA
 0

	)

85 
	#TIOCPKT_FLUSHREAD
 1

	)

86 
	#TIOCPKT_FLUSHWRITE
 2

	)

87 
	#TIOCPKT_STOP
 4

	)

88 
	#TIOCPKT_START
 8

	)

89 
	#TIOCPKT_NOSTOP
 16

	)

90 
	#TIOCPKT_DOSTOP
 32

	)

92 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/param.h

1 #iвdeа
_ASM_X86_PARAM_H


2 
	#_ASM_X86_PARAM_H


	)

5 #iвdeа
HZ


6 
	#HZ
 100

	)

9 
	#EXEC_PAGESIZE
 4096

	)

11 #iвdeа
NOGROUP


12 
	#NOGROUP
 (-1)

	)

15 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/socket.h

1 #iвdeа
_ASM_X86_SOCKET_H


2 
	#_ASM_X86_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

52 
	#SO_TIMESTAMPNS
 35

	)

53 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

55 
	#SO_MARK
 36

	)

57 
	#SO_TIMESTAMPING
 37

	)

58 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

	@/usr/include/bits/endian.h

3 #iвdeа
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #iвdeа
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfs€nf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vеrЪtf
)

	@/usr/include/bits/local_lim.h

25 #iвdeа
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #iвdeа
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #iвdeа
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #iвdeа
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<lЪux/limЩs.h
>

42 #ifdeа
__undef_NR_OPEN


43 #undeа
NR_OPEN


44 #undeа
__undef_NR_OPEN


47 #ifdeа
__undef_LINK_MAX


48 #undeа
LINK_MAX


49 #undeа
__undef_LINK_MAX


52 #ifdeа
__undef_OPEN_MAX


53 #undeа
OPEN_MAX


54 #undeа
__undef_OPEN_MAX


57 #ifdeа
__undef_ARG_MAX


58 #undeа
ARG_MAX


59 #undeа
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #undeа
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

19 #iвdeа
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #ifdeа
__USE_XOPEN


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifdeа
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/predefs.h

19 #iвdeа
_FEATURES_H


23 #iвdeа
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/sched.h

22 #iвdeа
__√ed_schedЈњm


24 #iвdeа
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifdeа
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifdeа
__USE_MISC


39 
	#CSIGNAL
 0x000000fа

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_Јњm


73 
	m__sched_іi№Щy
;

76 
	g__BEGIN_DECLS


78 #ifdeа
__USE_MISC


80 
юЏe
 ((*
__в
и(*
__ђg
), *
__chЮd_°ack
,

81 
__жags
, *
__ђg
, ...и
__THROW
;

84 
	$unshђe
 (
__жags
и
__THROW
;

87 
	$sched_gСэu
 (и
__THROW
;

90 
__END_DECLS


94 #iа!
defЪed
 
__defЪed_schedЈњm
 \

95 && (
defЪed
 
__√ed_schedЈњm
 || defЪed 
_SCHED_H
)

96 
	#__defЪed_schedЈњm
 1

	)

98 
	s__sched_Јњm


100 
__sched_іi№Щy
;

102 #undeа
__√ed_schedЈњm


106 #iа
defЪed
 
_SCHED_H
 && !defЪed 
__эu_£t_t_defЪed


107 
	#__эu_£t_t_defЪed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__эu_mask
))

	)

113 
	t__эu_mask
;

116 
	#__CPUELT
(
эu
и((эuи/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
эu
и((
__эu_mask
и1 << ((эuи% 
__NCPUBITS
))

	)

122 
__эu_mask
 
__bЩs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	tэu_£t_t
;

126 #iа
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
эu£Н
) \

128 dЎ
	`__buЮtЪ_mem£t
 (
эu£Н
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
эu£Н
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
и/  (
__эu_mask
); \

134 
__эu_mask
 *
__bЩs
 = (
эu£Н
)->__bits; \

135 
__i
 = 0; __Ш< 
__imax
; ++__i) \

136 
__bЩs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
эu
, 
£tsize
, 
эu£Н
) \

140 (
__exЛnsiЏ__
 \

141 ({ 
size_t
 
__эu
 = (
эu
); \

142 
__эu
 < 8 * (
£tsize
) \

143 ? (((
__эu_mask
 *и((
эu£Н
)->
__bЩs
))[
	`__CPUELT
 (
__эu
)] \

144 |р
	`__CPUMASK
 (
__эu
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
эu
, 
£tsize
, 
эu£Н
) \

147 (
__exЛnsiЏ__
 \

148 ({ 
size_t
 
__эu
 = (
эu
); \

149 
__эu
 < 8 * (
£tsize
) \

150 ? (((
__эu_mask
 *и((
эu£Н
)->
__bЩs
))[
	`__CPUELT
 (
__эu
)] \

151 &р~
	`__CPUMASK
 (
__эu
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
эu
, 
£tsize
, 
эu£Н
) \

154 (
__exЛnsiЏ__
 \

155 ({ 
size_t
 
__эu
 = (
эu
); \

156 
__эu
 < 8 * (
£tsize
) \

157 ? ((((
__эu_mask
 *и((
эu£Н
)->
__bЩs
))[
	`__CPUELT
 (
__эu
)] \

158 & 
	`__CPUMASK
 (
__эu
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
эu£Н
) \

162 
	`__sched_эucouЅ
 (
£tsize
, 
эu£Н
)

	)

164 #iа
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
эu£Н1
, 
эu£Н2
) \

166 (
	`__buЮtЪ_memcmp
 (
эu£Н1
, 
эu£Н2
, 
£tsize
и=р0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
эu£Н1
, 
эu£Н2
) \

169 (
__exЛnsiЏ__
 \

170 ({ 
__эu_mask
 *
__ђr1
 = (
эu£Н1
)->
__bЩs
; \

171 
__эu_mask
 *
__ђr2
 = (
эu£Н2
)->
__bЩs
; \

172 
size_t
 
__imax
 = (
£tsize
и/  (
__эu_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __Ш< 
__imax
; ++__i) \

175 iа(
__bЩs
[
__i
] != __bits[__i]) \

177 
__i
 =р
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
Ё
) \

181 (
__exЛnsiЏ__
 \

182 ({ 
эu_£t_t
 *
__de°
 = (
de°£t
); \

183 
__эu_mask
 *
__ђr1
 = (
§c£t1
)->
__bЩs
; \

184 
__эu_mask
 *
__ђr2
 = (
§c£t2
)->
__bЩs
; \

185 
size_t
 
__imax
 = (
£tsize
и/  (
__эu_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __Ш< 
__imax
; ++__i) \

188 ((
__эu_mask
 *и
__de°
->
__bЩs
)[
__i
] = 
__ђr1
[__i] 
Ё
 
__ђr2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
couЅ
) \

192 ((((
couЅ
и+ 
__NCPUBITS
 - 1и/ __NCPUBITSи*  (
__эu_mask
))

	)

193 
	#__CPU_ALLOC
(
couЅ
и
	`__sched_эuЃloc
 (couЅ)

	)

194 
	#__CPU_FREE
(
эu£t
и
	`__sched_эuдУ
 (эu£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_эucouЅ
 (
size_t
 
__£tsize
, cЏ° 
эu_£t_t
 *
__£Н
)

199 
__THROW
;

200 
эu_£t_t
 *
	$__sched_эuЃloc
 (
size_t
 
__couЅ
и
__THROW
 
__wur
;

201 
	$__sched_эuдУ
 (
эu_£t_t
 *
__£t
и
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/sockaddr.h

24 #iвdeа
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tІ_зmЮy_t
;

35 
	#__SOCKADDR_COMMON
(
І_іefix
) \

36 
І_зmЮy_t
 
І_іefix
##
зmЮy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #iвdeа
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bЩs/libc-lock.h
>

24 
	~<lowЋvЦlock.h
>

28 
	#_IO_lock_Ъex≥nsive
 1

	)

30 °ruщ { 
	mlock
; 
	mъt
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_ЪЩЯlizФ
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_ЪЩ
(
_«me
) \

35 ((
_«me
ир(
_IO_lock_t
и
_IO_lock_ЪЩЯlizФ
 , 0)

	)

37 
	#_IO_lock_fЪi
(
_«me
) \

38 ((и0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 iа((
_«me
).
ow√r
 !р
__£lf
) \

45 
	`ќl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
ъt
; \

49 } 0)

	)

51 
	#_IO_lock_Мylock
(
_«me
) \

53 
__їsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 iа((
_«me
).
ow√r
 !р
__£lf
) \

57 iа(
	`ќl_Мylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
ъt
 = 1; \

63 
__їsu…
 = 
EBUSY
; \

66 ++(
_«me
).
ъt
; \

67 
__їsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 iа(--(
_«me
).
ъt
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`ќl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_юЧnup_їgiЏ_°ђt
(
_fщ
, 
_е
) \

82 
	`__libc_юЧnup_їgiЏ_°ђt
 (((
_е
)->
_жags
 & 
_IO_USER_LOCK
и=р0, 
_fщ
, _е)

	)

83 
	#_IO_юЧnup_їgiЏ_°ђt_nяrg
(
_fщ
) \

84 
	`__libc_юЧnup_їgiЏ_°ђt
 (1, 
_fщ
, 
NULL
)

	)

85 
	#_IO_юЧnup_їgiЏ_Тd
(
_doЩ
) \

86 
	`__libc_юЧnup_їgiЏ_Тd
 (
_doЩ
)

	)

88 #iа
defЪed
 
_LIBC
 && !defЪed 
NOT_IN_libc


90 #ifdeа
__EXCEPTIONS


91 
	#_IO_acquЬe_lock
(
_е
) \

93 
_IO_FILE
 *
_IO_acquЬe_lock_fЮe
 \

94 
	`__©МibuЛ__
((
	`юЧnup
 (
_IO_acquЬe_lock_fщ
))) \

95 р(
_е
); \

96 
	`_IO_жockfЮe
 (
_IO_acquЬe_lock_fЮe
);

	)

97 
	#_IO_acquЬe_lock_юЧr_жags2
(
_е
) \

99 
_IO_FILE
 *
_IO_acquЬe_lock_fЮe
 \

100 
	`__©МibuЛ__
((
	`юЧnup
 (
_IO_acquЬe_lock_юЧr_жags2_fщ
))) \

101 р(
_е
); \

102 
	`_IO_жockfЮe
 (
_IO_acquЬe_lock_fЮe
);

	)

104 
	#_IO_acquЬe_lock
(
_е
и
_IO_acquЬe_lock_√eds_exы±iЏs_ТabЋd


	)

105 
	#_IO_acquЬe_lock_юЧr_жags2
(
_е
и
	`_IO_acquЬe_lock
 (_е)

	)

107 
	#_IO_їЋa£_lock
(
_е
и; } 0)

	)

	@/usr/include/bits/syslog-ldbl.h

20 #iвdeа
_SYS_SYSLOG_H


24 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

26 #ifdeа
__USE_BSD


27 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

30 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


31 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

33 #ifdeа
__USE_BSD


34 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

20 #iвdeа
_SYS_SYSLOG_H


24 #iвdeа
_BITS_SYSLOG_PATH_H


25 
	#_BITS_SYSLOG_PATH_H
 1

	)

27 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

20 #iвdeа
_SYS_SYSLOG_H


25 
	$__sy¶og_chk
 (
__іi
, 
__жag
, 
__cЏ°
 *
__fmt
, ...)

26 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 4)));

28 #ifdeа
__va_ђg_Јck


29 
__exЛЇ_Ѓways_ЪlЪe
 

30 
	$sy¶og
 (
__іi
, 
__cЏ°
 *
__fmt
, ...)

32  
	`__sy¶og_chk
 (
__іi
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_ђg_Јck
 ());

33 
	}
}

34 #Цiа!
defЪed
 
__эlu•lus


35 
	#sy¶og
(
іi
, ...) \

36 
	`__sy¶og_chk
 (
іi
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

40 #ifdeа
__USE_BSD


41 
	$__vsy¶og_chk
 (
__іi
, 
__жag
, 
__cЏ°
 *
__fmt
,

42 
__gnuc_va_li°
 
__≠
)

43 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__іЪtf__
, 3, 0)));

45 
__exЛЇ_Ѓways_ЪlЪe
 

46 
	$vsy¶og
 (
__іi
, 
__cЏ°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

48  
	`__vsy¶og_chk
 (
__іi
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

49 
	}
}

	@/usr/include/bits/typesizes.h

20 #iвdeа
_BITS_TYPES_H


24 #iвdef 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 sМuщ { 
__vЃ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 65535

	)

	@/usr/include/gnu/stubs.h

4 
	~<bЩs/w№dsize.h
>

6 #iа
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #Цiа
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #iвdeа
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/ФЇo.h
>

	@/usr/include/openssl/asn1.h

59 #iвdeа
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<ЁТs¶/e_os2.h
>

64 #iвdeа
OPENSSL_NO_BIO


65 
	~<ЁТs¶/bio.h
>

67 
	~<ЁТs¶/°ack.h
>

68 
	~<ЁТs¶/Іг°ack.h
>

70 
	~<ЁТs¶/symhacks.h
>

72 
	~<ЁТs¶/os¶_typ.h
>

73 #iвdeа
OPENSSL_NO_DEPRECATED


74 
	~<ЁТs¶/bn.h
>

77 #ifdeа
OPENSSL_BUILD_SHLIBCRYPTO


78 #undeа
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifdeа 
__эlu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
X509_Ѓg№_°
;

163 
	#DECLARE_ASN1_SET_OF
(
ty≥
и

	)

164 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
и

	)

170 
	saҐ1_щx_°


172 *
p
;

173 
eos
;

174 
Фr№
;

175 
Ъf
;

176 
Пg
;

177 
xюass
;

178 
¶Т
;

179 *
max
;

180 *
q
;

181 **
µ
;

182 
lЪe
;

183 } 
	tASN1_CTX
;

185 
	saҐ1_cЏ°_щx_°


187 cЏ° *
p
;

188 
eos
;

189 
Фr№
;

190 
Ъf
;

191 
Пg
;

192 
xюass
;

193 
¶Т
;

194 cЏ° *
max
;

195 cЏ° *
q
;

196 cЏ° **
µ
;

197 
lЪe
;

198 } 
	tASN1_cЏ°_CTX
;

202 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

203 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

204 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

205 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

206 
	saҐ1_objeщ_°


208 cЏ° *
Ґ
,*
 
;

209 
nid
;

210 
Ћngth
;

211 *
d©a
;

212 
жags
;

213 } 
	tASN1_OBJECT
;

215 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

220 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

222 
	saҐ1_°rЪg_°


224 
Ћngth
;

225 
ty≥
;

226 *
d©a
;

231 
жags
;

232 } 
	tASN1_STRING
;

239 
	sASN1_ENCODING_°


241 *
Тc
;

242 
Ћn
;

243 
modifЫd
;

244 } 
	tASN1_ENCODING
;

247 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

249 
	#STABLE_FLAGS_MALLOC
 0x01

	)

250 
	#STABLE_NO_MASK
 0x02

	)

251 
	#DIRSTRING_TYPE
 \

252 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

253 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

255 
	saҐ1_°rЪg_ПbЋ_°
 {

256 
nid
;

257 
mЪsize
;

258 
maxsize
;

259 
mask
;

260 
жags
;

261 } 
	tASN1_STRING_TABLE
;

263 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

267 
	#ub_«me
 32768

	)

268 
	#ub_commЏ_«me
 64

	)

269 
	#ub_lo€lЩy_«me
 128

	)

270 
	#ub_°©e_«me
 128

	)

271 
	#ub_№g™iz©iЏ_«me
 64

	)

272 
	#ub_№g™iz©iЏ_unЩ_«me
 64

	)

273 
	#ub_tЩЋ
 64

	)

274 
	#ub_emaЮ_addїss
 128

	)

279 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

280 
ASN1_ITEM_°
 
	tASN1_ITEM
;

281 
ASN1_TLC_°
 
	tASN1_TLC
;

283 
ASN1_VALUE_°
 
	tASN1_VALUE
;

287 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
и
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Бy≥)

	)

289 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

290 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Бy≥)

	)

292 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

293 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

294 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Вame)

	)

296 
	#DECLARE_ASN1_FUNCTIONS_вame
(
ty≥
, 
Щ«me
, 
«me
) \

297 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

298 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
Щ«me
, 
«me
)

	)

300 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
Щ«me
, 
«me
) \

301 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, cЏ° **
Ъ
, 
Ћn
); \

302 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

303 
	`DECLARE_ASN1_ITEM
(
Щ«me
)

	)

305 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_cЏ°
(
ty≥
, 
«me
) \

306 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, cЏ° **
Ъ
, 
Ћn
); \

307 
i2d_
##
	`«me
(cЏ° 
ty≥
 *
a
, **
out
); \

308 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

310 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

311 
i2d_
##
«me
##
	`_NDEF
“amР*
a
, **
out
);

	)

313 
	#DECLARE_ASN1_FUNCTIONS_cЏ°
(
«me
) \

314 
«me
 *«me##
	`_√w
(); \

315 
«me
##
	`_дУ
“amР*
a
);

	)

317 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

318 
ty≥
 *
«me
##
	`_√w
(); \

319 
«me
##
	`_дУ
(
ty≥
 *
a
);

	)

321 
	#D2I_OF
(
ty≥
иty≥ *(*)—y≥ **,cЏ° **,)

	)

322 
	#I2D_OF
(
ty≥
и(*)—y≥ *,**)

	)

323 
	#I2D_OF_cЏ°
(
ty≥
и(*)(cЏ°Бy≥ *,**)

	)

325 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

326 ((
d2i_of_void
*и(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

327 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

328 ((
i2d_of_void
*и(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

329 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

330 ((*(*)()и(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

331 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

332 ((*и(1 ? 
p
 : (
ty≥
*)0))

	)

333 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

334 ((**и(1 ? 
p
 : (
ty≥
**)0))

	)

336 
	#TYPEDEF_D2I_OF
(
ty≥
иty≥ *
	td2i_of_
##
	tty≥
—y≥ **,cЏ° **,)

	)

337 
	tTYPEDEF_I2D_OF
(
	tty≥
и
	ti2d_of_
##ty≥—y≥ *,**)

	)

338 
	tTYPEDEF_D2I2D_OF
(
	tty≥
и
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

340 
TYPEDEF_D2I2D_OF
();

377 #iвdeа
OPENSSL_EXPORT_VAR_AS_FUNCTION


380 cЏ° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

383 
	#ASN1_ITEM_±r
(
ЭМ
и(ЭМ)

	)

386 
	#ASN1_ITEM_їf
(
ЭМ
и(&(ЭМ##
_Щ
))

	)

388 
	#ASN1_ITEM_љМ
(
їf
и(&‘ef##
_Щ
))

	)

390 
	#DECLARE_ASN1_ITEM
(
«me
) \

391 
OPENSSL_EXTERN
 cЏ° 
ASN1_ITEM
 
«me
##
_Щ
;

	)

400 cЏ° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

403 
	#ASN1_ITEM_±r
(
ЭМ
и(
	`ЭМ
())

	)

406 
	#ASN1_ITEM_їf
(
ЭМ
и(ЭМ##
_Щ
)

	)

408 
	#ASN1_ITEM_љМ
(
їf
и‘ef##
	`_Щ
())

	)

410 
	#DECLARE_ASN1_ITEM
(
«me
) \

411 cЏ° 
ASN1_ITEM
 * 
«me
##
	`_Щ
();

	)

422 
	#ASN1_STRFLGS_ESC_2253
 1

	)

423 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

424 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

432 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

438 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

440 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

442 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

452 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

459 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

462 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

472 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

473 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

480 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

487 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

488 
ASN1_STRFLGS_ESC_CTRL
 | \

489 
ASN1_STRFLGS_ESC_MSB
 | \

490 
ASN1_STRFLGS_UTF8_CONVERT
 | \

491 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

492 
ASN1_STRFLGS_DUMP_DER
)

	)

494 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

495 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

497 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

499 
	saҐ1_ty≥_°


501 
ty≥
;

503 *
±r
;

504 
ASN1_BOOLEAN
 
boёЧn
;

505 
ASN1_STRING
 * 
aҐ1_°rЪg
;

506 
ASN1_OBJECT
 * 
objeщ
;

507 
ASN1_INTEGER
 * 
ЪЛgФ
;

508 
ASN1_ENUMERATED
 * 
ТumФ©ed
;

509 
ASN1_BIT_STRING
 * 
bЩ_°rЪg
;

510 
ASN1_OCTET_STRING
 * 
oщС_°rЪg
;

511 
ASN1_PRINTABLESTRING
 * 
іЪПbЋ°rЪg
;

512 
ASN1_T61STRING
 * 
t61°rЪg
;

513 
ASN1_IA5STRING
 * 
Я5°rЪg
;

514 
ASN1_GENERALSTRING
 * 
gТФЃ°rЪg
;

515 
ASN1_BMPSTRING
 * 
bmp°rЪg
;

516 
ASN1_UNIVERSALSTRING
 * 
univФІl°rЪg
;

517 
ASN1_UTCTIME
 * 
utщime
;

518 
ASN1_GENERALIZEDTIME
 * 
gТФЃizedtime
;

519 
ASN1_VISIBLESTRING
 * 
visibЋ°rЪg
;

520 
ASN1_UTF8STRING
 * 
utf8°rЪg
;

523 
ASN1_STRING
 * 
£t
;

524 
ASN1_STRING
 * 
£quТы
;

525 } 
vЃue
;

526 } 
	tASN1_TYPE
;

528 
DECLARE_STACK_OF
(
ASN1_TYPE
)

529 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

531 
	saҐ1_mСhod_°


533 
i2d_of_void
 *
i2d
;

534 
d2i_of_void
 *
d2i
;

535 *(*
ьЧЛ
)();

536 (*
de°roy
)(*);

537 } 
	tASN1_METHOD
;

540 
	saҐ1_hЧdФ_°


542 
ASN1_OCTET_STRING
 *
hЧdФ
;

543 *
d©a
;

544 
ASN1_METHOD
 *
mСh
;

545 } 
	tASN1_HEADER
;

548 
	sBIT_STRING_BITNAME_°
 {

549 
bЩnum
;

550 cЏ° *
 ame
;

551 cЏ° *
Ґame
;

552 } 
	tBIT_STRING_BITNAME
;

555 
	#M_ASN1_STRING_Ћngth
(
x
и((x)->
Ћngth
)

	)

556 
	#M_ASN1_STRING_Ћngth_£t
(
x
, 
n
и((x)->
Ћngth
 = (n))

	)

557 
	#M_ASN1_STRING_ty≥
(
x
и((x)->
ty≥
)

	)

558 
	#M_ASN1_STRING_d©a
(
x
и((x)->
d©a
)

	)

561 
	#M_ASN1_BIT_STRING_√w
(и(
ASN1_BIT_STRING
 *)\

562 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

563 
	#M_ASN1_BIT_STRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

564 
	#M_ASN1_BIT_STRING_dup
(
a
и(
ASN1_BIT_STRING
 *)\

565 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

566 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
и
	`ASN1_STRING_cmp
(\

567 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

568 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
и
	`ASN1_STRING_£t
((
ASN1_STRING
 *п,b,c)

	)

570 
	#M_ASN1_INTEGER_√w
(и(
ASN1_INTEGER
 *)\

571 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

572 
	#M_ASN1_INTEGER_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

573 
	#M_ASN1_INTEGER_dup
(
a
и(
ASN1_INTEGER
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *п)

	)

574 
	#M_ASN1_INTEGER_cmp
(
a
,
b
и
	`ASN1_STRING_cmp
(\

575 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

577 
	#M_ASN1_ENUMERATED_√w
(и(
ASN1_ENUMERATED
 *)\

578 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

579 
	#M_ASN1_ENUMERATED_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

580 
	#M_ASN1_ENUMERATED_dup
(
a
и(
ASN1_ENUMERATED
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *п)

	)

581 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
и
	`ASN1_STRING_cmp
(\

582 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

584 
	#M_ASN1_OCTET_STRING_√w
(и(
ASN1_OCTET_STRING
 *)\

585 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

586 
	#M_ASN1_OCTET_STRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

587 
	#M_ASN1_OCTET_STRING_dup
(
a
и(
ASN1_OCTET_STRING
 *)\

588 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

589 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
и
	`ASN1_STRING_cmp
(\

590 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

591 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
и
	`ASN1_STRING_£t
((
ASN1_STRING
 *п,b,c)

	)

592 
	#M_ASN1_OCTET_STRING_іЪt
(
a
,
b
и
	`ASN1_STRING_іЪt
„,(
ASN1_STRING
 *)b)

	)

593 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

594 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

595 
V_ASN1_UNIVERSAL
)

	)

597 
	#B_ASN1_TIME
 \

598 
B_ASN1_UTCTIME
 | \

599 
B_ASN1_GENERALIZEDTIME


	)

601 
	#B_ASN1_PRINTABLE
 \

602 
B_ASN1_PRINTABLESTRING
| \

603 
B_ASN1_T61STRING
| \

604 
B_ASN1_IA5STRING
| \

605 
B_ASN1_BIT_STRING
| \

606 
B_ASN1_UNIVERSALSTRING
|\

607 
B_ASN1_BMPSTRING
|\

608 
B_ASN1_UTF8STRING
|\

609 
B_ASN1_SEQUENCE
|\

610 
B_ASN1_UNKNOWN


	)

612 
	#B_ASN1_DIRECTORYSTRING
 \

613 
B_ASN1_PRINTABLESTRING
| \

614 
B_ASN1_TELETEXSTRING
|\

615 
B_ASN1_BMPSTRING
|\

616 
B_ASN1_UNIVERSALSTRING
|\

617 
B_ASN1_UTF8STRING


	)

619 
	#B_ASN1_DISPLAYTEXT
 \

620 
B_ASN1_IA5STRING
| \

621 
B_ASN1_VISIBLESTRING
| \

622 
B_ASN1_BMPSTRING
|\

623 
B_ASN1_UTF8STRING


	)

625 
	#M_ASN1_PRINTABLE_√w
(и
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

626 
	#M_ASN1_PRINTABLE_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

627 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
и
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)a,\

628 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

629 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

630 
	`d2i_ASN1_ty≥_byЛs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

631 
B_ASN1_PRINTABLE
)

	)

633 
	#M_DIRECTORYSTRING_√w
(и
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

634 
	#M_DIRECTORYSTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

635 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
и
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)a,\

636 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

637 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

638 
	`d2i_ASN1_ty≥_byЛs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

639 
B_ASN1_DIRECTORYSTRING
)

	)

641 
	#M_DISPLAYTEXT_√w
(и
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

642 
	#M_DISPLAYTEXT_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

643 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
и
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)a,\

644 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

645 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

646 
	`d2i_ASN1_ty≥_byЛs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

647 
B_ASN1_DISPLAYTEXT
)

	)

649 
	#M_ASN1_PRINTABLESTRING_√w
(и(
ASN1_PRINTABLESTRING
 *)\

650 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

651 
	#M_ASN1_PRINTABLESTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

652 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

653 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

654 
V_ASN1_UNIVERSAL
)

	)

655 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

656 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byЛs
\

657 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

659 
	#M_ASN1_T61STRING_√w
(и(
ASN1_T61STRING
 *)\

660 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

661 
	#M_ASN1_T61STRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

662 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

663 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

664 
V_ASN1_UNIVERSAL
)

	)

665 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

666 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byЛs
\

667 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

669 
	#M_ASN1_IA5STRING_√w
(и(
ASN1_IA5STRING
 *)\

670 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

671 
	#M_ASN1_IA5STRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

672 
	#M_ASN1_IA5STRING_dup
(
a
) \

673 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

674 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

675 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

676 
V_ASN1_UNIVERSAL
)

	)

677 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

678 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byЛs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

679 
B_ASN1_IA5STRING
)

	)

681 
	#M_ASN1_UTCTIME_√w
(и(
ASN1_UTCTIME
 *)\

682 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

683 
	#M_ASN1_UTCTIME_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

684 
	#M_ASN1_UTCTIME_dup
(
a
и(
ASN1_UTCTIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *п)

	)

686 
	#M_ASN1_GENERALIZEDTIME_√w
(и(
ASN1_GENERALIZEDTIME
 *)\

687 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

688 
	#M_ASN1_GENERALIZEDTIME_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

689 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
и(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

690 (
ASN1_STRING
 *)
a
)

	)

692 
	#M_ASN1_TIME_√w
(и(
ASN1_TIME
 *)\

693 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

694 
	#M_ASN1_TIME_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

695 
	#M_ASN1_TIME_dup
(
a
и(
ASN1_TIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *п)

	)

697 
	#M_ASN1_GENERALSTRING_√w
(и(
ASN1_GENERALSTRING
 *)\

698 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

699 
	#M_ASN1_GENERALSTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

700 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

701 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

702 
V_ASN1_UNIVERSAL
)

	)

703 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

704 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byЛs
\

705 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

707 
	#M_ASN1_UNIVERSALSTRING_√w
(и(
ASN1_UNIVERSALSTRING
 *)\

708 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

709 
	#M_ASN1_UNIVERSALSTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

710 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

711 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

712 
V_ASN1_UNIVERSAL
)

	)

713 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

714 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byЛs
\

715 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

717 
	#M_ASN1_BMPSTRING_√w
(и(
ASN1_BMPSTRING
 *)\

718 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

719 
	#M_ASN1_BMPSTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

720 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

721 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

722 
V_ASN1_UNIVERSAL
)

	)

723 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

724 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byЛs
\

725 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

727 
	#M_ASN1_VISIBLESTRING_√w
(и(
ASN1_VISIBLESTRING
 *)\

728 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

729 
	#M_ASN1_VISIBLESTRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

730 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

731 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

732 
V_ASN1_UNIVERSAL
)

	)

733 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

734 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byЛs
\

735 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

737 
	#M_ASN1_UTF8STRING_√w
(и(
ASN1_UTF8STRING
 *)\

738 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

739 
	#M_ASN1_UTF8STRING_дУ
(
a
и
	`ASN1_STRING_дУ
((
ASN1_STRING
 *п)

	)

740 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

741 
	`i2d_ASN1_byЛs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

742 
V_ASN1_UNIVERSAL
)

	)

743 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

744 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byЛs
\

745 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

748 
	#IS_SEQUENCE
 0

	)

749 
	#IS_SET
 1

	)

751 
DECLARE_ASN1_FUNCTIONS_вame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

753 
ASN1_TYPE_gС
(
ASN1_TYPE
 *
a
);

754 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vЃue
);

756 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

757 
ASN1_OBJECT_дУ
(
ASN1_OBJECT
 *
a
);

758 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

759 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,cЏ° **
µ
,

760 
Ћngth
);

761 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,cЏ° **
µ
,

762 
Ћngth
);

764 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

766 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

767 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

769 
ASN1_STRING
 * 
ASN1_STRING_√w
();

770 
ASN1_STRING_дУ
(
ASN1_STRING
 *
a
);

771 
ASN1_STRING
 * 
ASN1_STRING_dup
(ASN1_STRING *
a
);

772 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

773 
ASN1_STRING_cmp
(
ASN1_STRING
 *
a
, ASN1_STRING *
b
);

776 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, cЏ° *
d©a
, 
Ћn
);

777 
ASN1_STRING_Ћngth
(
ASN1_STRING
 *
x
);

778 
ASN1_STRING_Ћngth_£t
(
ASN1_STRING
 *
x
, 
n
);

779 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

780 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

782 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

783 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

784 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,cЏ° **
µ
,

785 
Ћngth
);

786 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

787 
Ћngth
 );

788 
ASN1_BIT_STRING_£t_bЩ
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vЃue
);

789 
ASN1_BIT_STRING_gС_bЩ
(
ASN1_BIT_STRING
 *
a
, 
n
);

791 #iвdeа
OPENSSL_NO_BIO


792 
ASN1_BIT_STRING_«me_іЪt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

793 
BIT_STRING_BITNAME
 *
tbl
, 
ЪdТt
);

795 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

796 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vЃue
,

797 
BIT_STRING_BITNAME
 *
tbl
);

799 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

800 
d2i_ASN1_BOOLEAN
(*
a
,cЏ° **
µ
,
Ћngth
);

802 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

803 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

804 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,cЏ° **
µ
,

805 
Ћngth
);

806 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,cЏ° **
µ
,

807 
Ћngth
);

808 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(ASN1_INTEGER *
x
);

809 
ASN1_INTEGER_cmp
(
ASN1_INTEGER
 *
x
, ASN1_INTEGER *
y
);

811 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

813 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

814 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

815 
ASN1_UTCTIME_£t_°rЪg
(
ASN1_UTCTIME
 *
s
, cЏ° *
°r
);

816 
ASN1_UTCTIME_cmp_time_t
(cЏ° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

818 
time_t
 
ASN1_UTCTIME_gС
(cЏ° 
ASN1_UTCTIME
 *
s
);

821 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

822 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

823 
ASN1_GENERALIZEDTIME_£t_°rЪg
(
ASN1_GENERALIZEDTIME
 *
s
, cЏ° *
°r
);

825 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

826 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(ASN1_OCTET_STRING *
a
);

827 
ASN1_OCTET_STRING_cmp
(
ASN1_OCTET_STRING
 *
a
, ASN1_OCTET_STRING *
b
);

828 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, cЏ° *
d©a
, 
Ћn
);

830 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

832 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

833 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

834 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

836 
UTF8_gСc
(cЏ° *
°r
, 
Ћn
, *
vЃ
);

837 
UTF8_putc
(*
°r
, 
Ћn
, 
vЃue
);

839 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

841 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

842 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

843 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

844 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

845 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

846 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

847 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

848 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

849 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

851 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

853 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

854 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

855 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gТФЃizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

857 
i2d_ASN1_SET
(
STACK
 *
a
, **
µ
,

858 
i2d_of_void
 *
i2d
, 
ex_Пg
, 
ex_юass
, 
is_£t
);

859 
STACK
 * 
d2i_ASN1_SET
(STACK **
a
, cЏ° **
µ
, 
Ћngth
,

860 
d2i_of_void
 *
d2i
, (*
дУ_func
)(*),

861 
ex_Пg
, 
ex_юass
);

863 #iвdeа
OPENSSL_NO_BIO


864 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

865 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

866 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

867 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

868 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

869 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

870 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

872 
i2t_ASN1_OBJECT
(*
buf
,
buf_Ћn
,
ASN1_OBJECT
 *
a
);

874 
a2d_ASN1_OBJECT
(*
out
,
ёТ
, cЏ° *
buf
, 
num
);

875 
ASN1_OBJECT
 *
ASN1_OBJECT_ьЧЛ
(
nid
, *
d©a
,
Ћn
,

876 cЏ° *
Ґ
, cЏ° *
 
);

878 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

879 
ASN1_INTEGER_gС
(
ASN1_INTEGER
 *
a
);

880 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

881 
BIGNUM
 *
ASN1_INTEGER_to_BN
(
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

883 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

884 
ASN1_ENUMERATED_gС
(
ASN1_ENUMERATED
 *
a
);

885 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

886 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

890 
ASN1_PRINTABLE_ty≥
(cЏ° *
s
, 
max
);

892 
i2d_ASN1_byЛs
(
ASN1_STRING
 *
a
, **
µ
, 
Пg
, 
xюass
);

893 
ASN1_STRING
 *
d2i_ASN1_byЛs
(ASN1_STRING **
a
, cЏ° **
µ
,

894 
Ћngth
, 
PПg
, 
Pюass
);

895 
ASN1_Пg2bЩ
(
Пg
);

897 
ASN1_STRING
 *
d2i_ASN1_ty≥_byЛs
(ASN1_STRING **
a
,cЏ° **
µ
,

898 
Ћngth
,
ty≥
);

901 
aҐ1_FЪish
(
ASN1_CTX
 *
c
);

902 
aҐ1_cЏ°_FЪish
(
ASN1_cЏ°_CTX
 *
c
);

905 
ASN1_gС_objeщ
(cЏ° **
µ
, *
ґТgth
, *
±ag
,

906 *
pюass
, 
omax
);

907 
ASN1_check_ЪfЪЩe_Тd
(**
p
,
Ћn
);

908 
ASN1_cЏ°_check_ЪfЪЩe_Тd
(cЏ° **
p
,
Ћn
);

909 
ASN1_put_objeщ
(**
µ
, 
cЏ°ruщed
, 
Ћngth
,

910 
Пg
, 
xюass
);

911 
ASN1_put_eoc
(**
µ
);

912 
ASN1_objeщ_size
(
cЏ°ruщed
, 
Ћngth
, 
Пg
);

915 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

917 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

918 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

919 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

920 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

922 
	#ASN1_dup_of_cЏ°
(
ty≥
,
i2d
,
d2i
,
x
) \

923 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(cЏ°Бy≥, 
i2d
), \

924 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

925 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
)))

	)

927 *
ASN1_Щem_dup
(cЏ° 
ASN1_ITEM
 *
Щ
, *
x
);

929 #iвdeа
OPENSSL_NO_FP_API


930 *
ASN1_d2i_е
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
Ъ
, **
x
);

932 
	#ASN1_d2i_е_of
(
ty≥
,
x√w
,
d2i
,
Ъ
,
x
) \

933 ((
ty≥
*)
	`ASN1_d2i_е
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

934 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

935 
Ъ
, \

936 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

938 *
ASN1_Щem_d2i_е
(cЏ° 
ASN1_ITEM
 *
Щ
, 
FILE
 *
Ъ
, *
x
);

939 
ASN1_i2d_е
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

941 
	#ASN1_i2d_е_of
(
ty≥
,
i2d
,
out
,
x
) \

942 (
	`ASN1_i2d_е
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

943 
out
, \

944 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

946 
	#ASN1_i2d_е_of_cЏ°
(
ty≥
,
i2d
,
out
,
x
) \

947 (
	`ASN1_i2d_е
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d
), \

948 
out
, \

949 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
)))

	)

951 
ASN1_Щem_i2d_е
(cЏ° 
ASN1_ITEM
 *
Щ
, 
FILE
 *
out
, *
x
);

952 
ASN1_STRING_іЪt_ex_е
(
FILE
 *
е
, 
ASN1_STRING
 *
°r
, 
жags
);

955 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
Ъ
);

957 #iвdeа
OPENSSL_NO_BIO


958 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
Ъ
, **
x
);

960 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
Ъ
,
x
) \

961 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

962 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

963 
Ъ
, \

964 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

966 *
ASN1_Щem_d2i_bio
(cЏ° 
ASN1_ITEM
 *
Щ
, 
BIO
 *
Ъ
, *
x
);

967 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

969 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

970 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

971 
out
, \

972 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

974 
	#ASN1_i2d_bio_of_cЏ°
(
ty≥
,
i2d
,
out
,
x
) \

975 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(cЏ° 
ty≥
, 
i2d
), \

976 
out
, \

977 
	`CHECKED_PTR_OF
(cЏ° 
ty≥
, 
x
)))

	)

979 
ASN1_Щem_i2d_bio
(cЏ° 
ASN1_ITEM
 *
Щ
, 
BIO
 *
out
, *
x
);

980 
ASN1_UTCTIME_іЪt
(
BIO
 *
е
,
ASN1_UTCTIME
 *
a
);

981 
ASN1_GENERALIZEDTIME_іЪt
(
BIO
 *
е
,
ASN1_GENERALIZEDTIME
 *
a
);

982 
ASN1_TIME_іЪt
(
BIO
 *
е
,
ASN1_TIME
 *
a
);

983 
ASN1_STRING_іЪt
(
BIO
 *
bp
,
ASN1_STRING
 *
v
);

984 
ASN1_STRING_іЪt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
жags
);

985 
ASN1_Јr£
(
BIO
 *
bp
,cЏ° *
µ
,
Ћn
,
ЪdТt
);

986 
ASN1_Јr£_dump
(
BIO
 *
bp
,cЏ° *
µ
,
Ћn
,
ЪdТt
,
dump
);

988 cЏ° *
ASN1_Пg2°r
(
Пg
);

991 
i2d_ASN1_HEADER
(
ASN1_HEADER
 *
a
,**
µ
);

992 
ASN1_HEADER
 *
d2i_ASN1_HEADER
(ASN1_HEADER **
a
,cЏ° **
µ
, 
Ћngth
);

993 
ASN1_HEADER
 *
ASN1_HEADER_√w
();

994 
ASN1_HEADER_дУ
(
ASN1_HEADER
 *
a
);

996 
ASN1_UNIVERSALSTRING_to_°rЪg
(
ASN1_UNIVERSALSTRING
 *
s
);

999 
ASN1_METHOD
 *
X509_aҐ1_mСh
();

1000 
ASN1_METHOD
 *
RSAPriv©eKey_aҐ1_mСh
();

1001 
ASN1_METHOD
 *
ASN1_IA5STRING_aҐ1_mСh
();

1002 
ASN1_METHOD
 *
ASN1_BIT_STRING_aҐ1_mСh
();

1004 
ASN1_TYPE_£t_oщС°rЪg
(
ASN1_TYPE
 *
a
,

1005 *
d©a
, 
Ћn
);

1006 
ASN1_TYPE_gС_oщС°rЪg
(
ASN1_TYPE
 *
a
,

1007 *
d©a
, 
max_Ћn
);

1008 
ASN1_TYPE_£t_Ъt_oщС°rЪg
(
ASN1_TYPE
 *
a
, 
num
,

1009 *
d©a
, 
Ћn
);

1010 
ASN1_TYPE_gС_Ъt_oщС°rЪg
(
ASN1_TYPE
 *
a
,*
num
,

1011 *
d©a
, 
max_Ћn
);

1013 
STACK
 *
ASN1_£q_u≈ack
(cЏ° *
buf
, 
Ћn
,

1014 
d2i_of_void
 *
d2i
, (*
дУ_func
)(*));

1015 *
ASN1_£q_Јck
(
STACK
 *
Ігs
, 
i2d_of_void
 *
i2d
,

1016 **
buf
, *
Ћn
 );

1017 *
ASN1_u≈ack_°rЪg
(
ASN1_STRING
 *
oщ
, 
d2i_of_void
 *
d2i
);

1018 *
ASN1_Щem_u≈ack
(
ASN1_STRING
 *
oщ
, cЏ° 
ASN1_ITEM
 *
Щ
);

1019 
ASN1_STRING
 *
ASN1_Јck_°rЪg
(*
obj
, 
i2d_of_void
 *
i2d
,

1020 
ASN1_OCTET_STRING
 **
oщ
);

1022 
	#ASN1_Јck_°rЪg_of
(
ty≥
,
obj
,
i2d
,
oщ
) \

1023 (
	`ASN1_Јck_°rЪg
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1024 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1025 
oщ
))

	)

1027 
ASN1_STRING
 *
ASN1_Щem_Јck
(*
obj
, cЏ° 
ASN1_ITEM
 *
Щ
, 
ASN1_OCTET_STRING
 **
oщ
);

1029 
ASN1_STRING_£t_deзu…_mask
(
mask
);

1030 
ASN1_STRING_£t_deзu…_mask_asc
(*
p
);

1031 
ASN1_STRING_gС_deзu…_mask
();

1032 
ASN1_mb°rЪg_cЁy
(
ASN1_STRING
 **
out
, cЏ° *
Ъ
, 
Ћn
,

1033 
Ъf№m
, 
mask
);

1034 
ASN1_mb°rЪg_ncЁy
(
ASN1_STRING
 **
out
, cЏ° *
Ъ
, 
Ћn
,

1035 
Ъf№m
, 
mask
,

1036 
mЪsize
, 
maxsize
);

1038 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1039 cЏ° *
Ъ
, 
ЪЋn
, 
Ъf№m
, 
nid
);

1040 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gС
(
nid
);

1041 
ASN1_STRING_TABLE_add
(, , , , );

1042 
ASN1_STRING_TABLE_юЧnup
();

1047 
ASN1_VALUE
 *
ASN1_Щem_√w
(cЏ° 
ASN1_ITEM
 *
Щ
);

1048 
ASN1_Щem_дУ
(
ASN1_VALUE
 *
vЃ
, cЏ° 
ASN1_ITEM
 *
Щ
);

1049 
ASN1_VALUE
 * 
ASN1_Щem_d2i
(ASN1_VALUE **
vЃ
, cЏ° **
Ъ
, 
Ћn
, cЏ° 
ASN1_ITEM
 *
Щ
);

1050 
ASN1_Щem_i2d
(
ASN1_VALUE
 *
vЃ
, **
out
, cЏ° 
ASN1_ITEM
 *
Щ
);

1051 
ASN1_Щem_ndef_i2d
(
ASN1_VALUE
 *
vЃ
, **
out
, cЏ° 
ASN1_ITEM
 *
Щ
);

1053 
ASN1_add_oid_moduЋ
();

1055 
ASN1_TYPE
 *
ASN1_gТФ©e_ncЏf
(*
°r
, 
CONF
 *
ncЏf
);

1056 
ASN1_TYPE
 *
ASN1_gТФ©e_v3
(*
°r
, 
X509V3_CTX
 *
ъf
);

1062 
ERR_lяd_ASN1_°rЪgs
();

1067 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1068 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1069 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1070 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1071 
	#ASN1_F_APPEND_EXP
 176

	)

1072 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1073 
	#ASN1_F_ASN1_CB
 177

	)

1074 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1075 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1076 
	#ASN1_F_ASN1_COLLECT
 106

	)

1077 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1078 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1079 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1080 
	#ASN1_F_ASN1_DIGEST
 184

	)

1081 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1082 
	#ASN1_F_ASN1_DUP
 111

	)

1083 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1084 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1085 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1086 
	#ASN1_F_ASN1_FIND_END
 190

	)

1087 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1088 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1089 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1090 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1091 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1092 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1093 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1094 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1095 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1096 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1097 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1098 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1099 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1100 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1101 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1102 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1103 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1104 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1105 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1106 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1107 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1108 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1109 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1110 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1111 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1112 
	#ASN1_F_ASN1_SIGN
 128

	)

1113 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1114 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1115 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1116 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1117 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1118 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1119 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1120 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1121 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1122 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1123 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1124 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1125 
	#ASN1_F_ASN1_VERIFY
 137

	)

1126 
	#ASN1_F_BITSTR_CB
 180

	)

1127 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1128 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1129 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1130 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1131 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1132 
	#ASN1_F_COLLECT_DATA
 140

	)

1133 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1134 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1135 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1136 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1137 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1138 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1139 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1140 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1141 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1142 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1143 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1144 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1145 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1146 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1147 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1148 
	#ASN1_F_D2I_RSA_NET
 200

	)

1149 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1150 
	#ASN1_F_D2I_X509
 156

	)

1151 
	#ASN1_F_D2I_X509_CINF
 157

	)

1152 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1153 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1154 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1155 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1156 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1157 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1158 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1159 
	#ASN1_F_I2D_RSA_NET
 162

	)

1160 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1161 
	#ASN1_F_LONG_C2I
 166

	)

1162 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1163 
	#ASN1_F_PARSE_TAGGING
 182

	)

1164 
	#ASN1_F_PKCS5_PBE2_SET
 167

	)

1165 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1166 
	#ASN1_F_X509_CINF_NEW
 168

	)

1167 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1168 
	#ASN1_F_X509_INFO_NEW
 170

	)

1169 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1170 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1171 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1172 
	#ASN1_F_X509_NEW
 172

	)

1173 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1176 
	#ASN1_R_ADDING_OBJECT
 171

	)

1177 
	#ASN1_R_AUX_ERROR
 100

	)

1178 
	#ASN1_R_BAD_CLASS
 101

	)

1179 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1180 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1181 
	#ASN1_R_BAD_TAG
 104

	)

1182 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 210

	)

1183 
	#ASN1_R_BN_LIB
 105

	)

1184 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1185 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1186 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1187 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1188 
	#ASN1_R_DECODE_ERROR
 110

	)

1189 
	#ASN1_R_DECODING_ERROR
 111

	)

1190 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1191 
	#ASN1_R_ENCODE_ERROR
 112

	)

1192 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1193 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1194 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1195 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1196 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1197 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1198 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1199 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1200 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1201 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1202 
	#ASN1_R_FIELD_MISSING
 121

	)

1203 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1204 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1205 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1206 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1207 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1208 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1209 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1210 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1211 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1212 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1213 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1214 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1215 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1216 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1217 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1218 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1219 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1220 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1221 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1222 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1223 
	#ASN1_R_INVALID_DIGIT
 130

	)

1224 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1225 
	#ASN1_R_INVALID_NUMBER
 187

	)

1226 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1227 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1228 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1229 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1230 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1231 
	#ASN1_R_LENGTH_ERROR
 136

	)

1232 
	#ASN1_R_LIST_ERROR
 188

	)

1233 
	#ASN1_R_MISSING_EOC
 137

	)

1234 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1235 
	#ASN1_R_MISSING_VALUE
 189

	)

1236 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1237 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1238 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1239 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1240 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1241 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1242 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1243 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1244 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1245 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1246 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1247 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1248 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1249 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1250 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1251 
	#ASN1_R_SHORT_LINE
 150

	)

1252 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1253 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1254 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1255 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1256 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1257 
	#ASN1_R_TOO_LONG
 155

	)

1258 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1259 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1260 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1261 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1262 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 211

	)

1263 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1264 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1265 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1266 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1267 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1268 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1269 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1270 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1271 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1272 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1273 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1274 
	#ASN1_R_WRONG_TAG
 168

	)

1275 
	#ASN1_R_WRONG_TYPE
 169

	)

1277 #ifdeа 
__эlu•lus


	@/usr/include/openssl/dh.h

59 #iвdeа
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<ЁТs¶/e_os2.h
>

64 #ifdeа
OPENSSL_NO_DH


65 #Фr№ 
DH
 
is
 
diІbЋd
.

68 #iвdeа
OPENSSL_NO_BIO


69 
	~<ЁТs¶/bio.h
>

71 
	~<ЁТs¶/os¶_typ.h
>

72 #iвdeа
OPENSSL_NO_DEPRECATED


73 
	~<ЁТs¶/bn.h
>

76 #iвdeа
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

89 #ifdeа 
__эlu•lus


97 
	sdh_mСhod


99 cЏ° *
«me
;

101 (*
gТФ©e_key
)(
DH
 *
dh
);

102 (*
compuЛ_key
)(*
key
,cЏ° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

103 (*
bn_mod_exp
)(cЏ° 
DH
 *
dh
, 
BIGNUM
 *
r
, cЏ° BIGNUM *
a
,

104 cЏ° 
BIGNUM
 *
p
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
,

105 
BN_MONT_CTX
 *
m_щx
);

107 (*
ЪЩ
)(
DH
 *
dh
);

108 (*
fЪish
)(
DH
 *
dh
);

109 
жags
;

110 *
≠p_d©a
;

112 (*
gТФ©e_Јњms
)(
DH
 *
dh
, 
іime_Ћn
, 
gТФ©№
, 
BN_GENCB
 *
cb
);

115 
	sdh_°


119 
Јd
;

120 
vФsiЏ
;

121 
BIGNUM
 *
p
;

122 
BIGNUM
 *
g
;

123 
Ћngth
;

124 
BIGNUM
 *
pub_key
;

125 
BIGNUM
 *
іiv_key
;

127 
жags
;

128 
BN_MONT_CTX
 *
mСhod_mЏt_p
;

130 
BIGNUM
 *
q
;

131 
BIGNUM
 *
j
;

132 *
£ed
;

133 
£edЋn
;

134 
BIGNUM
 *
couЅФ
;

136 
їгїnыs
;

137 
CRYPTO_EX_DATA
 
ex_d©a
;

138 cЏ° 
DH_METHOD
 *
mСh
;

139 
ENGINE
 *
ТgЪe
;

142 
	#DH_GENERATOR_2
 2

	)

144 
	#DH_GENERATOR_5
 5

	)

147 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

148 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

149 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

150 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

153 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

154 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

158 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

160 
	#DHЈњms_dup
(
x
и
	`ASN1_dup_of_cЏ°
(
DH
,
i2d_DHЈњms
,
d2i_DHЈњms
,x)

	)

161 
	#d2i_DHЈњms_е
(
е
,
x
и(
DH
 *)
	`ASN1_d2i_е
((*(*)())
DH_√w
, \

162 (*(*)())
d2i_DHЈњms
,(
е
),(**)(
x
))

	)

163 
	#i2d_DHЈњms_е
(
е
,
x
и
	`ASN1_i2d_е
(
i2d_DHЈњms
,(fp), \

164 (*)(
x
))

	)

165 
	#d2i_DHЈњms_bio
(
bp
,
x
и
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DHЈњms
,bp,x)

	)

166 
	#i2d_DHЈњms_bio
(
bp
,
x
и
	`ASN1_i2d_bio_of_cЏ°
(
DH
,
i2d_DHЈњms
,bp,x)

	)

168 cЏ° 
DH_METHOD
 *
DH_O≥nSSL
();

170 
DH_£t_deзu…_mСhod
(cЏ° 
DH_METHOD
 *
mСh
);

171 cЏ° 
DH_METHOD
 *
DH_gС_deзu…_mСhod
();

172 
DH_£t_mСhod
(
DH
 *
dh
, cЏ° 
DH_METHOD
 *
mСh
);

173 
DH
 *
DH_√w_mСhod
(
ENGINE
 *
ТgЪe
);

175 
DH
 * 
DH_√w
();

176 
DH_дУ
(
DH
 *
dh
);

177 
DH_up_їf
(
DH
 *
dh
);

178 
DH_size
(cЏ° 
DH
 *
dh
);

179 
DH_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

180 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

181 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
ђg
);

182 *
DH_gС_ex_d©a
(
DH
 *
d
, 
idx
);

185 #iвdeа
OPENSSL_NO_DEPRECATED


186 
DH
 * 
DH_gТФ©e_ЈњmСФs
(
іime_Ћn
,
gТФ©№
,

187 (*
€ќback
)(,,*),*
cb_ђg
);

191 
DH_gТФ©e_ЈњmСФs_ex
(
DH
 *
dh
, 
іime_Ћn
,
gТФ©№
, 
BN_GENCB
 *
cb
);

193 
DH_check
(cЏ° 
DH
 *
dh
,*
codes
);

194 
DH_check_pub_key
(cЏ° 
DH
 *
dh
,cЏ° 
BIGNUM
 *
pub_key
, *
codes
);

195 
DH_gТФ©e_key
(
DH
 *
dh
);

196 
DH_compuЛ_key
(*
key
,cЏ° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

197 
DH
 * 
d2i_DHЈњms
(DH **
a
,cЏ° **
µ
, 
Ћngth
);

198 
i2d_DHЈњms
(cЏ° 
DH
 *
a
,**
µ
);

199 #iвdeа
OPENSSL_NO_FP_API


200 
DHЈњms_іЪt_е
(
FILE
 *
е
, cЏ° 
DH
 *
x
);

202 #iвdeа
OPENSSL_NO_BIO


203 
DHЈњms_іЪt
(
BIO
 *
bp
, cЏ° 
DH
 *
x
);

205 
DHЈњms_іЪt
(*
bp
, cЏ° 
DH
 *
x
);

212 
ERR_lяd_DH_°rЪgs
();

217 
	#DH_F_COMPUTE_KEY
 102

	)

218 
	#DH_F_DHPARAMS_PRINT
 100

	)

219 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

220 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

221 
	#DH_F_DH_NEW_METHOD
 105

	)

222 
	#DH_F_GENERATE_KEY
 103

	)

223 
	#DH_F_GENERATE_PARAMETERS
 104

	)

226 
	#DH_R_BAD_GENERATOR
 101

	)

227 
	#DH_R_INVALID_PUBKEY
 102

	)

228 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

229 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

231 #ifdeа 
__эlu•lus


	@/usr/include/openssl/dsa.h

65 #iвdeа
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<ЁТs¶/e_os2.h
>

70 #ifdeа
OPENSSL_NO_DSA


71 #Фr№ 
DSA
 
is
 
diІbЋd
.

74 #iвdeа
OPENSSL_NO_BIO


75 
	~<ЁТs¶/bio.h
>

77 
	~<ЁТs¶/ьy±o.h
>

78 
	~<ЁТs¶/os¶_typ.h
>

80 #iвdeа
OPENSSL_NO_DEPRECATED


81 
	~<ЁТs¶/bn.h
>

82 #iвdeа
OPENSSL_NO_DH


83 
	~<ЁТs¶/dh.h
>

87 #iвdeа
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

100 #ifdeа 
__эlu•lus


108 
	sDSA_SIG_°


110 
BIGNUM
 *
r
;

111 
BIGNUM
 *
s
;

112 } 
	tDSA_SIG
;

114 
	sdІ_mСhod


116 cЏ° *
«me
;

117 
DSA_SIG
 * (*
dІ_do_sign
)(cЏ° *
dg°
, 
dЋn
, 
DSA
 *
dІ
);

118 (*
dІ_sign_£tup
)(
DSA
 *
dІ
, 
BN_CTX
 *
щx_Ъ
, 
BIGNUM
 **
kЪvp
,

119 
BIGNUM
 **
љ
);

120 (*
dІ_do_vФify
)(cЏ° *
dg°
, 
dg°_Ћn
,

121 
DSA_SIG
 *
sig
, 
DSA
 *
dІ
);

122 (*
dІ_mod_exp
)(
DSA
 *
dІ
, 
BIGNUM
 *
Љ
, BIGNUM *
a1
, BIGNUM *
p1
,

123 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
щx
,

124 
BN_MONT_CTX
 *
Ъ_mЏt
);

125 (*
bn_mod_exp
)(
DSA
 *
dІ
, 
BIGNUM
 *
r
, BIGNUM *
a
, cЏ° BIGNUM *
p
,

126 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
,

127 
BN_MONT_CTX
 *
m_щx
);

128 (*
ЪЩ
)(
DSA
 *
dІ
);

129 (*
fЪish
)(
DSA
 *
dІ
);

130 
жags
;

131 *
≠p_d©a
;

133 (*
dІ_ЈњmgТ
)(
DSA
 *
dІ
, 
bЩs
,

134 *
£ed
, 
£ed_Ћn
,

135 *
couЅФ_їt
, *
h_їt
,

136 
BN_GENCB
 *
cb
);

138 (*
dІ_keygТ
)(
DSA
 *
dІ
);

141 
	sdІ_°


145 
Јd
;

146 
vФsiЏ
;

147 
wrЩe_Јњms
;

148 
BIGNUM
 *
p
;

149 
BIGNUM
 *
q
;

150 
BIGNUM
 *
g
;

152 
BIGNUM
 *
pub_key
;

153 
BIGNUM
 *
іiv_key
;

155 
BIGNUM
 *
kЪv
;

156 
BIGNUM
 *
r
;

158 
жags
;

160 
BN_MONT_CTX
 *
mСhod_mЏt_p
;

161 
їгїnыs
;

162 
CRYPTO_EX_DATA
 
ex_d©a
;

163 cЏ° 
DSA_METHOD
 *
mСh
;

165 
ENGINE
 *
ТgЪe
;

168 
	#DSAЈњms_dup
(
x
и
	`ASN1_dup_of_cЏ°
(
DSA
,
i2d_DSAЈњms
,
d2i_DSAЈњms
,x)

	)

169 
	#d2i_DSAЈњms_е
(
е
,
x
и(
DSA
 *)
	`ASN1_d2i_е
((*(*)())
DSA_√w
, \

170 (*(*)())
d2i_DSAЈњms
,(
е
),(**)(
x
))

	)

171 
	#i2d_DSAЈњms_е
(
е
,
x
и
	`ASN1_i2d_е
(
i2d_DSAЈњms
,(fp), \

172 (*)(
x
))

	)

173 
	#d2i_DSAЈњms_bio
(
bp
,
x
и
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSAЈњms
,bp,x)

	)

174 
	#i2d_DSAЈњms_bio
(
bp
,
x
и
	`ASN1_i2d_bio_of_cЏ°
(
DSA
,
i2d_DSAЈњms
,bp,x)

	)

177 
DSA_SIG
 * 
DSA_SIG_√w
();

178 
DSA_SIG_дУ
(
DSA_SIG
 *
a
);

179 
i2d_DSA_SIG
(cЏ° 
DSA_SIG
 *
a
, **
µ
);

180 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, cЏ° **
µ
, 
Ћngth
);

182 
DSA_SIG
 * 
DSA_do_sign
(cЏ° *
dg°
,
dЋn
,
DSA
 *
dІ
);

183 
DSA_do_vФify
(cЏ° *
dg°
,
dg°_Ћn
,

184 
DSA_SIG
 *
sig
,
DSA
 *
dІ
);

186 cЏ° 
DSA_METHOD
 *
DSA_O≥nSSL
();

188 
DSA_£t_deзu…_mСhod
(cЏ° 
DSA_METHOD
 *);

189 cЏ° 
DSA_METHOD
 *
DSA_gС_deзu…_mСhod
();

190 
DSA_£t_mСhod
(
DSA
 *
dІ
, cЏ° 
DSA_METHOD
 *);

192 
DSA
 * 
DSA_√w
();

193 
DSA
 * 
DSA_√w_mСhod
(
ENGINE
 *
ТgЪe
);

194 
DSA_дУ
 (
DSA
 *
r
);

196 
DSA_up_їf
(
DSA
 *
r
);

197 
DSA_size
(cЏ° 
DSA
 *);

199 
DSA_sign_£tup
–
DSA
 *
dІ
,
BN_CTX
 *
щx_Ъ
,
BIGNUM
 **
kЪvp
,BIGNUM **
љ
);

200 
DSA_sign
(
ty≥
,cЏ° *
dg°
,
dЋn
,

201 *
sig
, *
sigЋn
, 
DSA
 *
dІ
);

202 
DSA_vФify
(
ty≥
,cЏ° *
dg°
,
dg°_Ћn
,

203 cЏ° *
sigbuf
, 
sigЋn
, 
DSA
 *
dІ
);

204 
DSA_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

205 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

206 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
ђg
);

207 *
DSA_gС_ex_d©a
(
DSA
 *
d
, 
idx
);

209 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, cЏ° **
µ
, 
Ћngth
);

210 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, cЏ° **
µ
, 
Ћngth
);

211 
DSA
 * 
d2i_DSAЈњms
(DSA **
a
, cЏ° **
µ
, 
Ћngth
);

214 #iвdeа
OPENSSL_NO_DEPRECATED


215 
DSA
 * 
DSA_gТФ©e_ЈњmСФs
(
bЩs
,

216 *
£ed
,
£ed_Ћn
,

217 *
couЅФ_їt
, *
h_їt
,

218 (*
€ќback
)(, , *),*
cb_ђg
);

222 
DSA_gТФ©e_ЈњmСФs_ex
(
DSA
 *
dІ
, 
bЩs
,

223 *
£ed
,
£ed_Ћn
,

224 *
couЅФ_їt
, *
h_їt
, 
BN_GENCB
 *
cb
);

226 
DSA_gТФ©e_key
(
DSA
 *
a
);

227 
i2d_DSAPublicKey
(cЏ° 
DSA
 *
a
, **
µ
);

228 
i2d_DSAPriv©eKey
(cЏ° 
DSA
 *
a
, **
µ
);

229 
i2d_DSAЈњms
(cЏ° 
DSA
 *
a
,**
µ
);

231 #iвdeа
OPENSSL_NO_BIO


232 
DSAЈњms_іЪt
(
BIO
 *
bp
, cЏ° 
DSA
 *
x
);

233 
DSA_іЪt
(
BIO
 *
bp
, cЏ° 
DSA
 *
x
, 
off
);

235 #iвdeа
OPENSSL_NO_FP_API


236 
DSAЈњms_іЪt_е
(
FILE
 *
е
, cЏ° 
DSA
 *
x
);

237 
DSA_іЪt_е
(
FILE
 *
bp
, cЏ° 
DSA
 *
x
, 
off
);

240 
	#DSS_іime_checks
 50

	)

243 
	#DSA_is_іime
(
n
, 
€ќback
, 
cb_ђg
) \

244 
	`BN_is_іime
(
n
, 
DSS_іime_checks
, 
€ќback
, 
NULL
, 
cb_ђg
)

	)

246 #iвdeа
OPENSSL_NO_DH


249 
DH
 *
DSA_dup_DH
(cЏ° 
DSA
 *
r
);

256 
ERR_lяd_DSA_°rЪgs
();

261 
	#DSA_F_D2I_DSA_SIG
 110

	)

262 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

263 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

264 
	#DSA_F_DSA_DO_SIGN
 112

	)

265 
	#DSA_F_DSA_DO_VERIFY
 113

	)

266 
	#DSA_F_DSA_NEW_METHOD
 103

	)

267 
	#DSA_F_DSA_PRINT
 104

	)

268 
	#DSA_F_DSA_PRINT_FP
 105

	)

269 
	#DSA_F_DSA_SIGN
 106

	)

270 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

271 
	#DSA_F_DSA_SIG_NEW
 109

	)

272 
	#DSA_F_DSA_VERIFY
 108

	)

273 
	#DSA_F_I2D_DSA_SIG
 111

	)

274 
	#DSA_F_SIG_CB
 114

	)

277 
	#DSA_R_BAD_Q_VALUE
 102

	)

278 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

279 
	#DSA_R_MISSING_PARAMETERS
 101

	)

280 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

282 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ebcdic.h

3 #iвdeа
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tяscii
 
_ЁТs¶_os_tяscii


	)

10 
	#os_tџbcdic
 
_ЁТs¶_os_tџbcdic


	)

11 
	#ebcdic2ascii
 
_ЁТs¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_ЁТs¶_ascii2ebcdic


	)

14 cЏ° 
os_tяscii
[256];

15 cЏ° 
os_tџbcdic
[256];

16 *
ebcdic2ascii
(*
de°
, cЏ° *
§ы
, 
size_t
 
couЅ
);

17 *
ascii2ebcdic
(*
de°
, cЏ° *
§ы
, 
size_t
 
couЅ
);

	@/usr/include/openssl/ec.h

72 #iвdeа
HEADER_EC_H


73 
	#HEADER_EC_H


	)

75 
	~<ЁТs¶/ЁТs¶cЏf.h
>

77 #ifdeа
OPENSSL_NO_EC


78 #Фr№ 
EC
 
is
 
diІbЋd
.

81 
	~<ЁТs¶/aҐ1.h
>

82 
	~<ЁТs¶/symhacks.h
>

83 #iвdeа
OPENSSL_NO_DEPRECATED


84 
	~<ЁТs¶/bn.h
>

87 #ifdeа 
__эlu•lus


89 #Цiа
defЪed
(
__SUNPRO_C
)

90 #iа
__SUNPRO_C
 >= 0x520

91 #іagm®
Фr№_mesІges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

96 #iвdeа
OPENSSL_ECC_MAX_FIELD_BITS


97 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

102 
POINT_CONVERSION_COMPRESSED
 = 2,

103 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

104 
POINT_CONVERSION_HYBRID
 = 6

105 } 
	tpoЪt_cЏvФsiЏ_f№m_t
;

108 
ec_mСhod_°
 
	tEC_METHOD
;

110 
ec_group_°


119 
	tEC_GROUP
;

121 
ec_poЪt_°
 
	tEC_POINT
;

127 cЏ° 
EC_METHOD
 *
EC_GFp_simґe_mСhod
();

128 cЏ° 
EC_METHOD
 *
EC_GFp_mЏt_mСhod
();

129 cЏ° 
EC_METHOD
 *
EC_GFp_ni°_mСhod
();

133 cЏ° 
EC_METHOD
 *
EC_GF2m_simґe_mСhod
();

136 
EC_GROUP
 *
EC_GROUP_√w
(cЏ° 
EC_METHOD
 *);

137 
EC_GROUP_дУ
(
EC_GROUP
 *);

138 
EC_GROUP_юЧr_дУ
(
EC_GROUP
 *);

139 
EC_GROUP_cЁy
(
EC_GROUP
 *, const EC_GROUP *);

140 
EC_GROUP
 *
EC_GROUP_dup
(const EC_GROUP *);

142 cЏ° 
EC_METHOD
 *
EC_GROUP_mСhod_of
(cЏ° 
EC_GROUP
 *);

143 
EC_METHOD_gС_fЫld_ty≥
(cЏ° 
EC_METHOD
 *);

145 
EC_GROUP_£t_gТФ©№
(
EC_GROUP
 *, cЏ° 
EC_POINT
 *
gТФ©№
, cЏ° 
BIGNUM
 *
№dФ
, cЏ° BIGNUM *
coзщ№
);

146 cЏ° 
EC_POINT
 *
EC_GROUP_gС0_gТФ©№
(cЏ° 
EC_GROUP
 *);

147 
EC_GROUP_gС_№dФ
(cЏ° 
EC_GROUP
 *, 
BIGNUM
 *
№dФ
, 
BN_CTX
 *);

148 
EC_GROUP_gС_coзщ№
(cЏ° 
EC_GROUP
 *, 
BIGNUM
 *
coзщ№
, 
BN_CTX
 *);

150 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *, 
nid
);

151 
EC_GROUP_gС_curve_«me
(cЏ° 
EC_GROUP
 *);

153 
EC_GROUP_£t_aҐ1_жag
(
EC_GROUP
 *, 
жag
);

154 
EC_GROUP_gС_aҐ1_жag
(cЏ° 
EC_GROUP
 *);

156 
EC_GROUP_£t_poЪt_cЏvФsiЏ_f№m
(
EC_GROUP
 *, 
poЪt_cЏvФsiЏ_f№m_t
);

157 
poЪt_cЏvФsiЏ_f№m_t
 
EC_GROUP_gС_poЪt_cЏvФsiЏ_f№m
(cЏ° 
EC_GROUP
 *);

159 *
EC_GROUP_gС0_£ed
(cЏ° 
EC_GROUP
 *);

160 
size_t
 
EC_GROUP_gС_£ed_Ћn
(cЏ° 
EC_GROUP
 *);

161 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, cЏ° *, size_И
Ћn
);

163 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *, cЏ° 
BIGNUM
 *
p
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, 
BN_CTX
 *);

164 
EC_GROUP_gС_curve_GFp
(cЏ° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

165 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *, cЏ° 
BIGNUM
 *
p
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, 
BN_CTX
 *);

166 
EC_GROUP_gС_curve_GF2m
(cЏ° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

169 
EC_GROUP_gС_degїe
(cЏ° 
EC_GROUP
 *);

172 
EC_GROUP_check
(cЏ° 
EC_GROUP
 *
group
, 
BN_CTX
 *
щx
);

175 
EC_GROUP_check_disьimЪ™t
(cЏ° 
EC_GROUP
 *, 
BN_CTX
 *);

178 
EC_GROUP_cmp
(cЏ° 
EC_GROUP
 *, cЏ° EC_GROUP *, 
BN_CTX
 *);

182 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(cЏ° 
BIGNUM
 *
p
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, 
BN_CTX
 *);

183 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(cЏ° 
BIGNUM
 *
p
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, 
BN_CTX
 *);

187 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

190 
nid
;

191 cЏ° *
commТt
;

192 } 
	tEC_buЮtЪ_curve
;

197 
size_t
 
EC_gС_buЮtЪ_curves
(
EC_buЮtЪ_curve
 *
r
, size_И
nЩems
);

202 
EC_POINT
 *
EC_POINT_√w
(cЏ° 
EC_GROUP
 *);

203 
EC_POINT_дУ
(
EC_POINT
 *);

204 
EC_POINT_юЧr_дУ
(
EC_POINT
 *);

205 
EC_POINT_cЁy
(
EC_POINT
 *, const EC_POINT *);

206 
EC_POINT
 *
EC_POINT_dup
(cЏ° EC_POINT *, cЏ° 
EC_GROUP
 *);

208 cЏ° 
EC_METHOD
 *
EC_POINT_mСhod_of
(cЏ° 
EC_POINT
 *);

210 
EC_POINT_£t_to_ЪfЪЩy
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *);

211 
EC_POINT_£t_Jіojeщive_co№dЪ©es_GFp
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

212 cЏ° 
BIGNUM
 *
x
, cЏ° BIGNUM *
y
, cЏ° BIGNUM *
z
, 
BN_CTX
 *);

213 
EC_POINT_gС_Jіojeщive_co№dЪ©es_GFp
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *,

214 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *);

215 
EC_POINT_£t_affЪe_co№dЪ©es_GFp
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

216 cЏ° 
BIGNUM
 *
x
, cЏ° BIGNUM *
y
, 
BN_CTX
 *);

217 
EC_POINT_gС_affЪe_co№dЪ©es_GFp
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *,

218 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

219 
EC_POINT_£t_comіes£d_co№dЪ©es_GFp
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

220 cЏ° 
BIGNUM
 *
x
, 
y_bЩ
, 
BN_CTX
 *);

222 
EC_POINT_£t_affЪe_co№dЪ©es_GF2m
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

223 cЏ° 
BIGNUM
 *
x
, cЏ° BIGNUM *
y
, 
BN_CTX
 *);

224 
EC_POINT_gС_affЪe_co№dЪ©es_GF2m
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *,

225 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

226 
EC_POINT_£t_comіes£d_co№dЪ©es_GF2m
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

227 cЏ° 
BIGNUM
 *
x
, 
y_bЩ
, 
BN_CTX
 *);

229 
size_t
 
EC_POINT_poЪt2oщ
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *, 
poЪt_cЏvФsiЏ_f№m_t
 
f№m
,

230 *
buf
, 
size_t
 
Ћn
, 
BN_CTX
 *);

231 
EC_POINT_oщ2poЪt
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *,

232 cЏ° *
buf
, 
size_t
 
Ћn
, 
BN_CTX
 *);

235 
BIGNUM
 *
EC_POINT_poЪt2bn
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *,

236 
poЪt_cЏvФsiЏ_f№m_t
 
f№m
, 
BIGNUM
 *, 
BN_CTX
 *);

237 
EC_POINT
 *
EC_POINT_bn2poЪt
(cЏ° 
EC_GROUP
 *, cЏ° 
BIGNUM
 *,

238 
EC_POINT
 *, 
BN_CTX
 *);

239 *
EC_POINT_poЪt2hex
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *,

240 
poЪt_cЏvФsiЏ_f№m_t
 
f№m
, 
BN_CTX
 *);

241 
EC_POINT
 *
EC_POINT_hex2poЪt
(cЏ° 
EC_GROUP
 *, const *,

242 
EC_POINT
 *, 
BN_CTX
 *);

244 
EC_POINT_add
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *
r
, cЏ° EC_POINT *
a
, cЏ° EC_POINT *
b
, 
BN_CTX
 *);

245 
EC_POINT_dbl
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *
r
, cЏ° EC_POINT *
a
, 
BN_CTX
 *);

246 
EC_POINT_ЪvФt
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

248 
EC_POINT_is_©_ЪfЪЩy
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *);

249 
EC_POINT_is_Џ_curve
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *, 
BN_CTX
 *);

250 
EC_POINT_cmp
(cЏ° 
EC_GROUP
 *, cЏ° 
EC_POINT
 *
a
, cЏ° EC_POINT *
b
, 
BN_CTX
 *);

252 
EC_POINT_make_affЪe
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

253 
EC_POINTs_make_affЪe
(cЏ° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

256 
EC_POINTs_mul
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *
r
, cЏ° 
BIGNUM
 *, 
size_t
 
num
, cЏ° EC_POINT *[], cЏ° BIGNUM *[], 
BN_CTX
 *);

257 
EC_POINT_mul
(cЏ° 
EC_GROUP
 *, 
EC_POINT
 *
r
, cЏ° 
BIGNUM
 *, cЏ° EC_POINT *, cЏ° BIGNUM *, 
BN_CTX
 *);

260 
EC_GROUP_іecompuЛ_mu…
(
EC_GROUP
 *, 
BN_CTX
 *);

262 
EC_GROUP_have_іecompuЛ_mu…
(cЏ° 
EC_GROUP
 *);

270 
EC_GROUP_gС_basis_ty≥
(cЏ° 
EC_GROUP
 *);

271 
EC_GROUP_gС_МЪomЯl_basis
(cЏ° 
EC_GROUP
 *, *
k
);

272 
EC_GROUP_gС_≥Ѕ™omЯl_basis
(cЏ° 
EC_GROUP
 *, *
k1
,

273 *
k2
, *
k3
);

275 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

277 
eэk_ЈњmСФs_°
 
	tECPKPARAMETERS
;

279 
EC_GROUP
 *
d2i_ECPKPђamСФs
(EC_GROUP **, cЏ° **
Ъ
, 
Ћn
);

280 
i2d_ECPKPђamСФs
(cЏ° 
EC_GROUP
 *, **
out
);

282 
	#d2i_ECPKPђamСФs_bio
(
bp
,
x
и
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKPђamСФs
,bp,x)

	)

283 
	#i2d_ECPKPђamСФs_bio
(
bp
,
x
и
	`ASN1_i2d_bio_of_cЏ°
(
EC_GROUP
,
i2d_ECPKPђamСФs
,bp,x)

	)

284 
	#d2i_ECPKPђamСФs_е
(
е
,
x
и(
EC_GROUP
 *)
	`ASN1_d2i_е
(
NULL
, \

285 (*(*)())
d2i_ECPKPђamСФs
,(
е
),(**)(
x
))

	)

286 
	#i2d_ECPKPђamСФs_е
(
е
,
x
и
	`ASN1_i2d_е
(
i2d_ECPKPђamСФs
,(fp), \

287 (*)(
x
))

	)

289 #iвdeа
OPENSSL_NO_BIO


290 
ECPKPђamСФs_іЪt
(
BIO
 *
bp
, cЏ° 
EC_GROUP
 *
x
, 
off
);

292 #iвdeа
OPENSSL_NO_FP_API


293 
ECPKPђamСФs_іЪt_е
(
FILE
 *
е
, cЏ° 
EC_GROUP
 *
x
, 
off
);

297 
ec_key_°
 
	tEC_KEY
;

300 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

301 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

303 
EC_KEY
 *
EC_KEY_√w
();

304 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

305 
EC_KEY_дУ
(
EC_KEY
 *);

306 
EC_KEY
 *
EC_KEY_cЁy
(EC_KEY *, const EC_KEY *);

307 
EC_KEY
 *
EC_KEY_dup
(const EC_KEY *);

309 
EC_KEY_up_їf
(
EC_KEY
 *);

311 cЏ° 
EC_GROUP
 *
EC_KEY_gС0_group
(cЏ° 
EC_KEY
 *);

312 
EC_KEY_£t_group
(
EC_KEY
 *, cЏ° 
EC_GROUP
 *);

313 cЏ° 
BIGNUM
 *
EC_KEY_gС0_іiv©e_key
(cЏ° 
EC_KEY
 *);

314 
EC_KEY_£t_іiv©e_key
(
EC_KEY
 *, cЏ° 
BIGNUM
 *);

315 cЏ° 
EC_POINT
 *
EC_KEY_gС0_public_key
(cЏ° 
EC_KEY
 *);

316 
EC_KEY_£t_public_key
(
EC_KEY
 *, cЏ° 
EC_POINT
 *);

317 
EC_KEY_gС_Тc_жags
(cЏ° 
EC_KEY
 *);

318 
EC_KEY_£t_Тc_жags
(
EC_KEY
 *, );

319 
poЪt_cЏvФsiЏ_f№m_t
 
EC_KEY_gС_cЏv_f№m
(cЏ° 
EC_KEY
 *);

320 
EC_KEY_£t_cЏv_f№m
(
EC_KEY
 *, 
poЪt_cЏvФsiЏ_f№m_t
);

322 *
EC_KEY_gС_key_mСhod_d©a
(
EC_KEY
 *,

323 *(*
dup_func
)(*), (*
дУ_func
)(*), (*
юЧr_дУ_func
)(*));

324 
EC_KEY_Ъ£є_key_mСhod_d©a
(
EC_KEY
 *, *
d©a
,

325 *(*
dup_func
)(*), (*
дУ_func
)(*), (*
юЧr_дУ_func
)(*));

327 
EC_KEY_£t_aҐ1_жag
(
EC_KEY
 *, );

328 
EC_KEY_іecompuЛ_mu…
(
EC_KEY
 *, 
BN_CTX
 *
щx
);

331 
EC_KEY_gТФ©e_key
(
EC_KEY
 *);

333 
EC_KEY_check_key
(cЏ° 
EC_KEY
 *);

336 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
a
, cЏ° **
Ъ
, 
Ћn
);

337 
i2d_ECPriv©eKey
(
EC_KEY
 *
a
, **
out
);

339 
EC_KEY
 *
d2i_ECPђamСФs
(EC_KEY **
a
, cЏ° **
Ъ
, 
Ћn
);

340 
i2d_ECPђamСФs
(
EC_KEY
 *
a
, **
out
);

343 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
a
, cЏ° **
Ъ
, 
Ћn
);

344 
i2o_ECPublicKey
(
EC_KEY
 *
a
, **
out
);

346 #iвdeа
OPENSSL_NO_BIO


347 
ECPђamСФs_іЪt
(
BIO
 *
bp
, cЏ° 
EC_KEY
 *
x
);

348 
EC_KEY_іЪt
(
BIO
 *
bp
, cЏ° 
EC_KEY
 *
x
, 
off
);

350 #iвdeа
OPENSSL_NO_FP_API


351 
ECPђamСФs_іЪt_е
(
FILE
 *
е
, cЏ° 
EC_KEY
 *
x
);

352 
EC_KEY_іЪt_е
(
FILE
 *
е
, cЏ° 
EC_KEY
 *
x
, 
off
);

355 
	#ECPђamСФs_dup
(
x
и
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECPђamСФs
,
d2i_ECPђamСФs
,x)

	)

357 #iвdeа
__эlu•lus


358 #iа
defЪed
(
__SUNPRO_C
)

359 #iа
__SUNPRO_C
 >= 0x520

360 #іagm®
Фr№_mesІges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

369 
ERR_lяd_EC_°rЪgs
();

374 
	#EC_F_COMPUTE_WNAF
 143

	)

375 
	#EC_F_D2I_ECPARAMETERS
 144

	)

376 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

377 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

378 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

379 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

380 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

381 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

382 
	#EC_F_ECP_NIST_MOD_192
 203

	)

383 
	#EC_F_ECP_NIST_MOD_224
 204

	)

384 
	#EC_F_ECP_NIST_MOD_256
 205

	)

385 
	#EC_F_ECP_NIST_MOD_521
 206

	)

386 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

387 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

388 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

389 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

390 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

391 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

392 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

393 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

394 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

395 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

396 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

397 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

398 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

399 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

400 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

401 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

402 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

403 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

404 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

405 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

406 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

407 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

408 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

409 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

410 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

411 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

412 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

413 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

414 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

415 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

416 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

417 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

418 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

419 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

420 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

421 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

422 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

423 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

424 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

425 
	#EC_F_EC_GROUP_CHECK
 170

	)

426 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

427 
	#EC_F_EC_GROUP_COPY
 106

	)

428 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

429 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

430 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

431 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

432 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

433 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

434 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

435 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

436 
	#EC_F_EC_GROUP_NEW
 108

	)

437 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

438 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

439 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

440 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

441 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

442 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

443 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

444 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

445 
	#EC_F_EC_KEY_COPY
 178

	)

446 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

447 
	#EC_F_EC_KEY_NEW
 182

	)

448 
	#EC_F_EC_KEY_PRINT
 180

	)

449 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

450 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

451 
	#EC_F_EC_POINTS_MUL
 138

	)

452 
	#EC_F_EC_POINT_ADD
 112

	)

453 
	#EC_F_EC_POINT_CMP
 113

	)

454 
	#EC_F_EC_POINT_COPY
 114

	)

455 
	#EC_F_EC_POINT_DBL
 115

	)

456 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

457 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

458 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

459 
	#EC_F_EC_POINT_INVERT
 210

	)

460 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

461 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

462 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

463 
	#EC_F_EC_POINT_MUL
 184

	)

464 
	#EC_F_EC_POINT_NEW
 121

	)

465 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

466 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

467 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

468 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

469 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

470 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

471 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

472 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

473 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

474 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

475 
	#EC_F_EC_WNAF_MUL
 187

	)

476 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

477 
	#EC_F_I2D_ECPARAMETERS
 190

	)

478 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

479 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

480 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

481 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

484 
	#EC_R_ASN1_ERROR
 115

	)

485 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

486 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

487 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

488 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

489 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

490 
	#EC_R_FIELD_TOO_LARGE
 138

	)

491 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

492 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

493 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

494 
	#EC_R_INVALID_ARGUMENT
 112

	)

495 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

496 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

497 
	#EC_R_INVALID_ENCODING
 102

	)

498 
	#EC_R_INVALID_FIELD
 103

	)

499 
	#EC_R_INVALID_FORM
 104

	)

500 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

501 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

502 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

503 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

504 
	#EC_R_MISSING_PARAMETERS
 124

	)

505 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

506 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

507 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

508 
	#EC_R_NOT_IMPLEMENTED
 126

	)

509 
	#EC_R_NOT_INITIALIZED
 111

	)

510 
	#EC_R_NO_FIELD_MOD
 133

	)

511 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

512 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

513 
	#EC_R_POINT_AT_INFINITY
 106

	)

514 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

515 
	#EC_R_SLOT_FULL
 108

	)

516 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

517 
	#EC_R_UNDEFINED_ORDER
 128

	)

518 
	#EC_R_UNKNOWN_GROUP
 129

	)

519 
	#EC_R_UNKNOWN_ORDER
 114

	)

520 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

521 
	#EC_R_WRONG_ORDER
 130

	)

523 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ecdh.h

69 #iвdeа
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<ЁТs¶/ЁТs¶cЏf.h
>

74 #ifdeа
OPENSSL_NO_ECDH


75 #Фr№ 
ECDH
 
is
 
diІbЋd
.

78 
	~<ЁТs¶/ec.h
>

79 
	~<ЁТs¶/os¶_typ.h
>

80 #iвdeа
OPENSSL_NO_DEPRECATED


81 
	~<ЁТs¶/bn.h
>

84 #ifdeа
__эlu•lus


88 cЏ° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deзu…_mСhod
(cЏ° 
ECDH_METHOD
 *);

91 cЏ° 
ECDH_METHOD
 *
ECDH_gС_deзu…_mСhod
();

92 
ECDH_£t_mСhod
(
EC_KEY
 *, cЏ° 
ECDH_METHOD
 *);

94 
ECDH_compuЛ_key
(*
out
, 
size_t
 
ouОТ
, cЏ° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(cЏ° *
Ъ
, 
size_t
 
ЪЋn
, *
out
, size_И*
ouОТ
));

97 
ECDH_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
ђg
);

100 *
ECDH_gС_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lяd_ECDH_°rЪgs
();

112 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

113 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

116 
	#ECDH_R_KDF_FAILED
 102

	)

117 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

118 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

120 #ifdeа 
__эlu•lus


	@/usr/include/openssl/ecdsa.h

59 #iвdeа
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<ЁТs¶/ЁТs¶cЏf.h
>

64 #ifdeа
OPENSSL_NO_ECDSA


65 #Фr№ 
ECDSA
 
is
 
diІbЋd
.

68 
	~<ЁТs¶/ec.h
>

69 
	~<ЁТs¶/os¶_typ.h
>

70 #iвdeа
OPENSSL_NO_DEPRECATED


71 
	~<ЁТs¶/bn.h
>

74 #ifdeа
__эlu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

88 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

94 
ECDSA_SIG_дУ
(
ECDSA_SIG
 *
a
);

103 
i2d_ECDSA_SIG
(cЏ° 
ECDSA_SIG
 *
a
, **
µ
);

113 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
v
, cЏ° **
µ
, 
Ћn
);

123 
ECDSA_SIG
 *
ECDSA_do_sign
(cЏ° *
dg°
,
dg°_Ћn
,
EC_KEY
 *
eckey
);

136 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(cЏ° *
dg°
, 
dg°Ћn
,

137 cЏ° 
BIGNUM
 *
kЪv
, cЏ° BIGNUM *
љ
, 
EC_KEY
 *
eckey
);

148 
ECDSA_do_vФify
(cЏ° *
dg°
, 
dg°_Ћn
,

149 cЏ° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

151 cЏ° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

157 
ECDSA_£t_deзu…_mСhod
(cЏ° 
ECDSA_METHOD
 *
mСh
);

163 cЏ° 
ECDSA_METHOD
 *
ECDSA_gС_deзu…_mСhod
();

171 
ECDSA_£t_mСhod
(
EC_KEY
 *
eckey
, cЏ° 
ECDSA_METHOD
 *
mСh
);

178 
ECDSA_size
(cЏ° 
EC_KEY
 *
eckey
);

188 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
щx
, 
BIGNUM
 **
kЪv
,

189 
BIGNUM
 **
љ
);

202 
ECDSA_sign
(
ty≥
, cЏ° *
dg°
, 
dg°Ћn
,

203 *
sig
, *
sigЋn
, 
EC_KEY
 *
eckey
);

220 
ECDSA_sign_ex
(
ty≥
, cЏ° *
dg°
, 
dg°Ћn
,

221 *
sig
, *
sigЋn
, cЏ° 
BIGNUM
 *
kЪv
,

222 cЏ° 
BIGNUM
 *
љ
, 
EC_KEY
 *
eckey
);

235 
ECDSA_vФify
(
ty≥
, cЏ° *
dg°
, 
dg°Ћn
,

236 cЏ° *
sig
, 
sigЋn
, 
EC_KEY
 *
eckey
);

239 
ECDSA_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w


240 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

241 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
ђg
);

242 *
ECDSA_gС_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

249 
ERR_lяd_ECDSA_°rЪgs
();

254 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

255 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

256 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

257 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

260 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

261 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

262 
	#ECDSA_R_ERR_EC_LIB
 102

	)

263 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

264 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

265 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

266 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

268 #ifdeа 
__эlu•lus


	@/usr/include/openssl/objects.h

59 #iвdeа
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifdeа
USE_OBJ_MAC


65 
	~<ЁТs¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undefЪed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg№Щhm
 "Alg№Щhm"

	)

73 
	#LN_Ѓg№Щhm
 "Ѓg№Щhm"

	)

74 
	#NID_Ѓg№Щhm
 38

	)

75 
	#OBJ_Ѓg№Щhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rІdsi
 "rІdsi"

	)

78 
	#NID_rІdsi
 1

	)

79 
	#OBJ_rІdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rІdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rІdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rІdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rІdsi
,3L,4L

	)

100 
	#LN_rІEnьy±iЏ
 "rІEnьy±iЏ"

	)

101 
	#NID_rІEnьy±iЏ
 6

	)

102 
	#OBJ_rІEnьy±iЏ
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WЩhRSAEnьy±iЏ
 "RSA-MD2"

	)

105 
	#LN_md2WЩhRSAEnьy±iЏ
 "md2WЩhRSAEnьy±iЏ"

	)

106 
	#NID_md2WЩhRSAEnьy±iЏ
 7

	)

107 
	#OBJ_md2WЩhRSAEnьy±iЏ
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WЩhRSAEnьy±iЏ
 "RSA-MD5"

	)

110 
	#LN_md5WЩhRSAEnьy±iЏ
 "md5WЩhRSAEnьy±iЏ"

	)

111 
	#NID_md5WЩhRSAEnьy±iЏ
 8

	)

112 
	#OBJ_md5WЩhRSAEnьy±iЏ
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWЩhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWЩhMD2AndDES_CBC
 "pbeWЩhMD2AndDES-CBC"

	)

116 
	#NID_pbeWЩhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWЩhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWЩhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWЩhMD5AndDES_CBC
 "pbeWЩhMD5AndDES-CBC"

	)

121 
	#NID_pbeWЩhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWЩhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_commЏName
 "CN"

	)

133 
	#LN_commЏName
 "commЏName"

	)

134 
	#NID_commЏName
 13

	)

135 
	#OBJ_commЏName
 
OBJ_X509
,3L

	)

137 
	#SN_couЅryName
 "C"

	)

138 
	#LN_couЅryName
 "couЅryName"

	)

139 
	#NID_couЅryName
 14

	)

140 
	#OBJ_couЅryName
 
OBJ_X509
,6L

	)

142 
	#SN_lo€lЩyName
 "L"

	)

143 
	#LN_lo€lЩyName
 "lo€lЩyName"

	)

144 
	#NID_lo€lЩyName
 15

	)

145 
	#OBJ_lo€lЩyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvЪыName
 "ST"

	)

151 
	#LN_°©eOrProvЪыName
 "°©eOrProvЪыName"

	)

152 
	#NID_°©eOrProvЪыName
 16

	)

153 
	#OBJ_°©eOrProvЪыName
 
OBJ_X509
,8L

	)

155 
	#SN_№g™iz©iЏName
 "O"

	)

156 
	#LN_№g™iz©iЏName
 "№g™iz©iЏName"

	)

157 
	#NID_№g™iz©iЏName
 17

	)

158 
	#OBJ_№g™iz©iЏName
 
OBJ_X509
,10L

	)

160 
	#SN_№g™iz©iЏЃUnЩName
 "OU"

	)

161 
	#LN_№g™iz©iЏЃUnЩName
 "№g™iz©iЏЃUnЩName"

	)

162 
	#NID_№g™iz©iЏЃUnЩName
 18

	)

163 
	#OBJ_№g™iz©iЏЃUnЩName
 
OBJ_X509
,11L

	)

165 
	#SN_rІ
 "RSA"

	)

166 
	#LN_rІ
 "rІ"

	)

167 
	#NID_rІ
 19

	)

168 
	#OBJ_rІ
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ТvЦЁed
 "pkcs7-ТvЦЁedD©a"

	)

183 
	#NID_pkcs7_ТvЦЁed
 23

	)

184 
	#OBJ_pkcs7_ТvЦЁed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvЦЁed
 "pkcs7-sig√dAndEnvЦЁedD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvЦЁed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvЦЁed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_Тьy±ed
 "pkcs7-Тьy±edD©a"

	)

195 
	#NID_pkcs7_Тьy±ed
 26

	)

196 
	#OBJ_pkcs7_Тьy±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgїemТt
 "dhKeyAgїemТt"

	)

203 
	#NID_dhKeyAgїemТt
 28

	)

204 
	#OBJ_dhKeyAgїemТt
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Ѓg№Щhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Ѓg№Щhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Ѓg№Щhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Ѓg№Щhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idЧ_cbc
 "IDEA-CBC"

	)

234 
	#LN_idЧ_cbc
 "idЧ-cbc"

	)

235 
	#NID_idЧ_cbc
 34

	)

236 
	#OBJ_idЧ_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idЧ_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idЧ_cfb64
 "idЧ-cfb"

	)

240 
	#NID_idЧ_cfb64
 35

	)

242 
	#SN_idЧ_ecb
 "IDEA-ECB"

	)

243 
	#LN_idЧ_ecb
 "idЧ-ecb"

	)

244 
	#NID_idЧ_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rІdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Ѓg№Щhm
,18L

	)

268 
	#SN_shaWЩhRSAEnьy±iЏ
 "RSA-SHA"

	)

269 
	#LN_shaWЩhRSAEnьy±iЏ
 "shaWЩhRSAEnьy±iЏ"

	)

270 
	#NID_shaWЩhRSAEnьy±iЏ
 42

	)

271 
	#OBJ_shaWЩhRSAEnьy±iЏ
 
OBJ_Ѓg№Щhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rІdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Ѓg№Щhm
,8L

	)

287 
	#SN_idЧ_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idЧ_ofb64
 "idЧ-ofb"

	)

289 
	#NID_idЧ_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaЮAddїss
 "EmaЮ"

	)

296 
	#LN_pkcs9_emaЮAddїss
 "emaЮAddїss"

	)

297 
	#NID_pkcs9_emaЮAddїss
 48

	)

298 
	#OBJ_pkcs9_emaЮAddїss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ruщuїdName
 "un°ruщuїdName"

	)

301 
	#NID_pkcs9_un°ruщuїdName
 49

	)

302 
	#OBJ_pkcs9_un°ruщuїdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_cЏЛЅTy≥
 "cЏЛЅTy≥"

	)

305 
	#NID_pkcs9_cЏЛЅTy≥
 50

	)

306 
	#OBJ_pkcs9_cЏЛЅTy≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesІgeDige°
 "mesІgeDige°"

	)

309 
	#NID_pkcs9_mesІgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesІgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signЪgTime
 "signЪgTime"

	)

313 
	#NID_pkcs9_signЪgTime
 52

	)

314 
	#OBJ_pkcs9_signЪgTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_couЅФsig«tuї
 "couЅФsig«tuї"

	)

317 
	#NID_pkcs9_couЅФsig«tuї
 53

	)

318 
	#OBJ_pkcs9_couЅФsig«tuї
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chЃЋngePassw№d
 "chЃЋngePassw№d"

	)

321 
	#NID_pkcs9_chЃЋngePassw№d
 54

	)

322 
	#OBJ_pkcs9_chЃЋngePassw№d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ruщuїdAddїss
 "un°ruщuїdAddїss"

	)

325 
	#NID_pkcs9_un°ruщuїdAddїss
 55

	)

326 
	#OBJ_pkcs9_un°ruщuїdAddїss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCФtAЙribuЛs
 "exЛndedCФtifi€ЛAЙribuЛs"

	)

329 
	#NID_pkcs9_extCФtAЙribuЛs
 56

	)

330 
	#OBJ_pkcs9_extCФtAЙribuЛs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√ts€≥
 "NСs€≥"

	)

333 
	#LN_√ts€≥
 "NСs€≥ Communi€tiЏ†C№p."

	)

334 
	#NID_√ts€≥
 57

	)

335 
	#OBJ_√ts€≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√ts€≥_ыє_exЛnsiЏ
 "nsCФtExt"

	)

338 
	#LN_√ts€≥_ыє_exЛnsiЏ
 "NСs€≥ CФtifi€Л ExЛnsiЏ"

	)

339 
	#NID_√ts€≥_ыє_exЛnsiЏ
 58

	)

340 
	#OBJ_√ts€≥_ыє_exЛnsiЏ
 
OBJ_√ts€≥
,1L

	)

342 
	#SN_√ts€≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√ts€≥_d©a_ty≥
 "NСs€≥ D©®Ty≥"

	)

344 
	#NID_√ts€≥_d©a_ty≥
 59

	)

345 
	#OBJ_√ts€≥_d©a_ty≥
 
OBJ_√ts€≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Ѓg№Щhm
,26L

	)

371 
	#SN_sha1WЩhRSAEnьy±iЏ
 "RSA-SHA1"

	)

372 
	#LN_sha1WЩhRSAEnьy±iЏ
 "sha1WЩhRSAEnьy±iЏ"

	)

373 
	#NID_sha1WЩhRSAEnьy±iЏ
 65

	)

374 
	#OBJ_sha1WЩhRSAEnьy±iЏ
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dІWЩhSHA
 "DSA-SHA"

	)

377 
	#LN_dІWЩhSHA
 "dІWЩhSHA"

	)

378 
	#NID_dІWЩhSHA
 66

	)

379 
	#OBJ_dІWЩhSHA
 
OBJ_Ѓg№Щhm
,13L

	)

381 
	#SN_dІ_2
 "DSA-ёd"

	)

382 
	#LN_dІ_2
 "dІEnьy±iЏ-ёd"

	)

383 
	#NID_dІ_2
 67

	)

384 
	#OBJ_dІ_2
 
OBJ_Ѓg№Щhm
,12L

	)

387 
	#SN_pbeWЩhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWЩhSHA1AndRC2_CBC
 "pbeWЩhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWЩhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWЩhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dІWЩhSHA1_2
 "DSA-SHA1-ёd"

	)

401 
	#LN_dІWЩhSHA1_2
 "dІWЩhSHA1-ёd"

	)

402 
	#NID_dІWЩhSHA1_2
 70

	)

404 
	#OBJ_dІWЩhSHA1_2
 
OBJ_Ѓg№Щhm
,27L

	)

406 
	#SN_√ts€≥_ыє_ty≥
 "nsCФtTy≥"

	)

407 
	#LN_√ts€≥_ыє_ty≥
 "NСs€≥ CФИTy≥"

	)

408 
	#NID_√ts€≥_ыє_ty≥
 71

	)

409 
	#OBJ_√ts€≥_ыє_ty≥
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,1L

	)

411 
	#SN_√ts€≥_ba£_uЊ
 "nsBa£UЊ"

	)

412 
	#LN_√ts€≥_ba£_uЊ
 "NСs€≥ Ba£ UЊ"

	)

413 
	#NID_√ts€≥_ba£_uЊ
 72

	)

414 
	#OBJ_√ts€≥_ba£_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,2L

	)

416 
	#SN_√ts€≥_їvo€tiЏ_uЊ
 "nsRevo€tiЏUЊ"

	)

417 
	#LN_√ts€≥_їvo€tiЏ_uЊ
 "NСs€≥ Revo€tiЏ UЊ"

	)

418 
	#NID_√ts€≥_їvo€tiЏ_uЊ
 73

	)

419 
	#OBJ_√ts€≥_їvo€tiЏ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,3L

	)

421 
	#SN_√ts€≥_€_їvo€tiЏ_uЊ
 "nsCaRevo€tiЏUЊ"

	)

422 
	#LN_√ts€≥_€_їvo€tiЏ_uЊ
 "NСs€≥ CA Revo€tiЏ UЊ"

	)

423 
	#NID_√ts€≥_€_їvo€tiЏ_uЊ
 74

	)

424 
	#OBJ_√ts€≥_€_їvo€tiЏ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,4L

	)

426 
	#SN_√ts€≥_ї√wЃ_uЊ
 "nsRТewЃUЊ"

	)

427 
	#LN_√ts€≥_ї√wЃ_uЊ
 "NСs€≥ RТewЃ UЊ"

	)

428 
	#NID_√ts€≥_ї√wЃ_uЊ
 75

	)

429 
	#OBJ_√ts€≥_ї√wЃ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,7L

	)

431 
	#SN_√ts€≥_€_pёicy_uЊ
 "nsCaPёicyUЊ"

	)

432 
	#LN_√ts€≥_€_pёicy_uЊ
 "NСs€≥ CA Pёicy UЊ"

	)

433 
	#NID_√ts€≥_€_pёicy_uЊ
 76

	)

434 
	#OBJ_√ts€≥_€_pёicy_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,8L

	)

436 
	#SN_√ts€≥_s¶_£rvФ_«me
 "nsS¶SФvФName"

	)

437 
	#LN_√ts€≥_s¶_£rvФ_«me
 "NСs€≥ SSL SФvФ Name"

	)

438 
	#NID_√ts€≥_s¶_£rvФ_«me
 77

	)

439 
	#OBJ_√ts€≥_s¶_£rvФ_«me
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,12L

	)

441 
	#SN_√ts€≥_commТt
 "nsCommТt"

	)

442 
	#LN_√ts€≥_commТt
 "NСs€≥ CommТt"

	)

443 
	#NID_√ts€≥_commТt
 78

	)

444 
	#OBJ_√ts€≥_commТt
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,13L

	)

446 
	#SN_√ts€≥_ыє_£quТы
 "nsCФtSequТы"

	)

447 
	#LN_√ts€≥_ыє_£quТы
 "NСs€≥ CФtifi€Л SequТы"

	)

448 
	#NID_√ts€≥_ыє_£quТы
 79

	)

449 
	#OBJ_√ts€≥_ыє_£quТы
 
OBJ_√ts€≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_ы
 "id-ы"

	)

456 
	#NID_id_ы
 81

	)

457 
	#OBJ_id_ы
 2L,5L,29L

	)

459 
	#SN_subjeщ_key_idТtifЫr
 "subjeщKeyIdТtifЫr"

	)

460 
	#LN_subjeщ_key_idТtifЫr
 "X509v3 Subjeщ Key IdТtifЫr"

	)

461 
	#NID_subjeщ_key_idТtifЫr
 82

	)

462 
	#OBJ_subjeщ_key_idТtifЫr
 
OBJ_id_ы
,14L

	)

464 
	#SN_key_uІge
 "keyUІge"

	)

465 
	#LN_key_uІge
 "X509v3 Key UІge"

	)

466 
	#NID_key_uІge
 83

	)

467 
	#OBJ_key_uІge
 
OBJ_id_ы
,15L

	)

469 
	#SN_іiv©e_key_uІge_≥riod
 "іiv©eKeyUІgePФiod"

	)

470 
	#LN_іiv©e_key_uІge_≥riod
 "X509v3 Priv©РKey UІgРPФiod"

	)

471 
	#NID_іiv©e_key_uІge_≥riod
 84

	)

472 
	#OBJ_іiv©e_key_uІge_≥riod
 
OBJ_id_ы
,16L

	)

474 
	#SN_subjeщ_Ѓt_«me
 "subjeщA…Name"

	)

475 
	#LN_subjeщ_Ѓt_«me
 "X509v3 Subjeщ A…Ф«tivРName"

	)

476 
	#NID_subjeщ_Ѓt_«me
 85

	)

477 
	#OBJ_subjeщ_Ѓt_«me
 
OBJ_id_ы
,17L

	)

479 
	#SN_issuФ_Ѓt_«me
 "issuФA…Name"

	)

480 
	#LN_issuФ_Ѓt_«me
 "X509v3 IssuФ A…Ф«tivРName"

	)

481 
	#NID_issuФ_Ѓt_«me
 86

	)

482 
	#OBJ_issuФ_Ѓt_«me
 
OBJ_id_ы
,18L

	)

484 
	#SN_basic_cЏ°њЪts
 "basicCЏ°њЪts"

	)

485 
	#LN_basic_cЏ°њЪts
 "X509v3 BasiшCЏ°њЪts"

	)

486 
	#NID_basic_cЏ°њЪts
 87

	)

487 
	#OBJ_basic_cЏ°њЪts
 
OBJ_id_ы
,19L

	)

489 
	#SN_ьl_numbФ
 "ьlNumbФ"

	)

490 
	#LN_ьl_numbФ
 "X509v3 CRL NumbФ"

	)

491 
	#NID_ьl_numbФ
 88

	)

492 
	#OBJ_ьl_numbФ
 
OBJ_id_ы
,20L

	)

494 
	#SN_ыєifi€Л_pёicЫs
 "ыєifi€ЛPёicЫs"

	)

495 
	#LN_ыєifi€Л_pёicЫs
 "X509v3 CФtifi€Л PёicЫs"

	)

496 
	#NID_ыєifi€Л_pёicЫs
 89

	)

497 
	#OBJ_ыєifi€Л_pёicЫs
 
OBJ_id_ы
,32L

	)

499 
	#SN_auth№Щy_key_idТtifЫr
 "auth№ЩyKeyIdТtifЫr"

	)

500 
	#LN_auth№Щy_key_idТtifЫr
 "X509v3 Auth№Щy Key IdТtifЫr"

	)

501 
	#NID_auth№Щy_key_idТtifЫr
 90

	)

502 
	#OBJ_auth№Щy_key_idТtifЫr
 
OBJ_id_ы
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WЩhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WЩhRSA
 "mdc2wЩhRSA"

	)

529 
	#NID_mdc2WЩhRSA
 96

	)

530 
	#OBJ_mdc2WЩhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givТName
 "G"

	)

541 
	#LN_givТName
 "givТName"

	)

542 
	#NID_givТName
 99

	)

543 
	#OBJ_givТName
 
OBJ_X509
,42L

	)

545 
	#SN_suЇame
 "S"

	)

546 
	#LN_suЇame
 "suЇame"

	)

547 
	#NID_suЇame
 100

	)

548 
	#OBJ_suЇame
 
OBJ_X509
,4L

	)

550 
	#SN_ЪЩЯls
 "I"

	)

551 
	#LN_ЪЩЯls
 "ЪЩЯls"

	)

552 
	#NID_ЪЩЯls
 101

	)

553 
	#OBJ_ЪЩЯls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdТtifЫr
 "UID"

	)

556 
	#LN_uniqueIdТtifЫr
 "uniqueIdТtifЫr"

	)

557 
	#NID_uniqueIdТtifЫr
 102

	)

558 
	#OBJ_uniqueIdТtifЫr
 
OBJ_X509
,45L

	)

560 
	#SN_ьl_di°ributiЏ_poЪts
 "ьlDi°ributiЏPoЪts"

	)

561 
	#LN_ьl_di°ributiЏ_poЪts
 "X509v3 CRL Di°ributiЏ PoЪts"

	)

562 
	#NID_ьl_di°ributiЏ_poЪts
 103

	)

563 
	#OBJ_ьl_di°ributiЏ_poЪts
 
OBJ_id_ы
,31L

	)

565 
	#SN_md5WЩhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WЩhRSA
 "md5WЩhRSA"

	)

567 
	#NID_md5WЩhRSA
 104

	)

568 
	#OBJ_md5WЩhRSA
 
OBJ_Ѓg№Щhm
,3L

	)

570 
	#SN_£rЯlNumbФ
 "SN"

	)

571 
	#LN_£rЯlNumbФ
 "£rЯlNumbФ"

	)

572 
	#NID_£rЯlNumbФ
 105

	)

573 
	#OBJ_£rЯlNumbФ
 
OBJ_X509
,5L

	)

575 
	#SN_tЩЋ
 "T"

	)

576 
	#LN_tЩЋ
 "tЩЋ"

	)

577 
	#NID_tЩЋ
 106

	)

578 
	#OBJ_tЩЋ
 
OBJ_X509
,12L

	)

580 
	#SN_desьЭtiЏ
 "D"

	)

581 
	#LN_desьЭtiЏ
 "desьЭtiЏ"

	)

582 
	#NID_desьЭtiЏ
 107

	)

583 
	#OBJ_desьЭtiЏ
 
OBJ_X509
,13L

	)

586 
	#SN_€°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_€°5_cbc
 "€°5-cbc"

	)

588 
	#NID_€°5_cbc
 108

	)

589 
	#OBJ_€°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_€°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_€°5_ecb
 "€°5-ecb"

	)

593 
	#NID_€°5_ecb
 109

	)

595 
	#SN_€°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_€°5_cfb64
 "€°5-cfb"

	)

597 
	#NID_€°5_cfb64
 110

	)

599 
	#SN_€°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_€°5_ofb64
 "€°5-ofb"

	)

601 
	#NID_€°5_ofb64
 111

	)

603 
	#LN_pbeWЩhMD5AndCa°5_CBC
 "pbeWЩhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWЩhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWЩhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dІWЩhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dІWЩhSHA1
 "dІWЩhSHA1"

	)

613 
	#NID_dІWЩhSHA1
 113

	)

614 
	#OBJ_dІWЩhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WЩhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WЩhRSA
 "sha1WЩhRSA"

	)

622 
	#NID_sha1WЩhRSA
 115

	)

623 
	#OBJ_sha1WЩhRSA
 
OBJ_Ѓg№Щhm
,29L

	)

625 
	#SN_dІ
 "DSA"

	)

626 
	#LN_dІ
 "dІEnьy±iЏ"

	)

627 
	#NID_dІ
 116

	)

628 
	#OBJ_dІ
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rЭemd160
 "RIPEMD160"

	)

631 
	#LN_rЭemd160
 "rЭemd160"

	)

632 
	#NID_rЭemd160
 117

	)

633 
	#OBJ_rЭemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rЭemd160WЩhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rЭemd160WЩhRSA
 "rЭemd160WЩhRSA"

	)

639 
	#NID_rЭemd160WЩhRSA
 119

	)

640 
	#OBJ_rЭemd160WЩhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rІdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_Њe_comіessiЏ
 "RLE"

	)

668 
	#LN_Њe_comіessiЏ
 "ruјЋngth comіessiЏ"

	)

669 
	#NID_Њe_comіessiЏ
 124

	)

670 
	#OBJ_Њe_comіessiЏ
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_comіessiЏ
 "ZLIB"

	)

673 
	#LN_zlib_comіessiЏ
 "zlib comіessiЏ"

	)

674 
	#NID_zlib_comіessiЏ
 125

	)

675 
	#OBJ_zlib_comіessiЏ
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_uІge
 "exЛndedKeyUІge"

	)

678 
	#LN_ext_key_uІge
 "X509v3 ExЛnded Key UІge"

	)

679 
	#NID_ext_key_uІge
 126

	)

680 
	#OBJ_ext_key_uІge
 
OBJ_id_ы
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvФ_auth
 "£rvФAuth"

	)

693 
	#LN_£rvФ_auth
 "TLS Web SФvФ AuthТti€tiЏ"

	)

694 
	#NID_£rvФ_auth
 129

	)

695 
	#OBJ_£rvФ_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_юЫЅ_auth
 "юЫЅAuth"

	)

698 
	#LN_юЫЅ_auth
 "TLS Web ClЫЅ AuthТti€tiЏ"

	)

699 
	#NID_юЫЅ_auth
 130

	)

700 
	#OBJ_юЫЅ_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignЪg"

	)

703 
	#LN_code_sign
 "CodРSignЪg"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaЮ_іўeщ
 "emaЮPrўeщiЏ"

	)

708 
	#LN_emaЮ_іўeщ
 "E-maЮ PrўeщiЏ"

	)

709 
	#NID_emaЮ_іўeщ
 132

	)

710 
	#OBJ_emaЮ_іўeщ
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSПmpЪg"

	)

713 
	#LN_time_°amp
 "TimРSПmpЪg"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_Ъd
 "msCodeInd"

	)

720 
	#LN_ms_code_Ъd
 "Miьosoб IndividuЃ CodРSignЪg"

	)

721 
	#NID_ms_code_Ъd
 134

	)

722 
	#OBJ_ms_code_Ъd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Miьosoб CommФcЯ»CodРSignЪg"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_щl_sign
 "msCTLSign"

	)

730 
	#LN_ms_щl_sign
 "Miьosoб Tru° Li° SignЪg"

	)

731 
	#NID_ms_щl_sign
 136

	)

732 
	#OBJ_ms_щl_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Miьosoб SФvФ G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Miьosoб Enьy±ed FЮРSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "NСs€≥ SФvФ G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√ts€≥
,4L,1L

	)

751 
	#SN_dЦП_ьl
 "dЦПCRL"

	)

752 
	#LN_dЦП_ьl
 "X509v3 DЦП CRL Indi€t№"

	)

753 
	#NID_dЦП_ьl
 140

	)

754 
	#OBJ_dЦП_ьl
 
OBJ_id_ы
,27L

	)

756 
	#SN_ьl_їasЏ
 "CRLRЧsЏ"

	)

757 
	#LN_ьl_їasЏ
 "CRL RЧsЏ Code"

	)

758 
	#NID_ьl_їasЏ
 141

	)

759 
	#OBJ_ьl_їasЏ
 
OBJ_id_ы
,21L

	)

761 
	#SN_ЪvЃidЩy_d©e
 "ЪvЃidЩyD©e"

	)

762 
	#LN_ЪvЃidЩy_d©e
 "InvЃidЩy D©e"

	)

763 
	#NID_ЪvЃidЩy_d©e
 142

	)

764 
	#OBJ_ЪvЃidЩy_d©e
 
OBJ_id_ы
,24L

	)

766 
	#SN_sx√t
 "SXNСID"

	)

767 
	#LN_sx√t
 "SМЏg ExМ™С ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WЩhSHA1And128BЩRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WЩhSHA1And128BЩRC4
 "pbeWЩhSHA1And128BЩRC4"

	)

778 
	#NID_pbe_WЩhSHA1And128BЩRC4
 144

	)

779 
	#OBJ_pbe_WЩhSHA1And128BЩRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WЩhSHA1And40BЩRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WЩhSHA1And40BЩRC4
 "pbeWЩhSHA1And40BЩRC4"

	)

783 
	#NID_pbe_WЩhSHA1And40BЩRC4
 145

	)

784 
	#OBJ_pbe_WЩhSHA1And40BЩRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 "pbeWЩhSHA1And3-KeyTrЭЋDES-CBC"

	)

788 
	#NID_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 146

	)

789 
	#OBJ_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 "pbeWЩhSHA1And2-KeyTrЭЋDES-CBC"

	)

793 
	#NID_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 147

	)

794 
	#OBJ_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WЩhSHA1And128BЩRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WЩhSHA1And128BЩRC2_CBC
 "pbeWЩhSHA1And128BЩRC2-CBC"

	)

798 
	#NID_pbe_WЩhSHA1And128BЩRC2_CBC
 148

	)

799 
	#OBJ_pbe_WЩhSHA1And128BЩRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WЩhSHA1And40BЩRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WЩhSHA1And40BЩRC2_CBC
 "pbeWЩhSHA1And40BЩRC2-CBC"

	)

803 
	#NID_pbe_WЩhSHA1And40BЩRC2_CBC
 149

	)

804 
	#OBJ_pbe_WЩhSHA1And40BЩRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_VФsiЏ1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_VФsiЏ1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_ыєBag
 "ыєBag"

	)

819 
	#NID_ыєBag
 152

	)

820 
	#OBJ_ыєBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_ьlBag
 "ьlBag"

	)

823 
	#NID_ьlBag
 153

	)

824 
	#OBJ_ьlBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£ьСBag
 "£ьСBag"

	)

827 
	#NID_£ьСBag
 154

	)

828 
	#OBJ_£ьСBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ІгCЏЛЅsBag
 "ІгCЏЛЅsBag"

	)

831 
	#NID_ІгCЏЛЅsBag
 155

	)

832 
	#OBJ_ІгCЏЛЅsBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_дЫndlyName
 "дЫndlyName"

	)

835 
	#NID_дЫndlyName
 156

	)

836 
	#OBJ_дЫndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_lo€lKeyID
 "lo€lKeyID"

	)

839 
	#NID_lo€lKeyID
 157

	)

840 
	#OBJ_lo€lKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_ыєTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509CФtifi€Л
 "x509CФtifi€Л"

	)

845 
	#NID_x509CФtifi€Л
 158

	)

846 
	#OBJ_x509CФtifi€Л
 
OBJ_ыєTy≥s
, 1L

	)

848 
	#LN_sdsiCФtifi€Л
 "sdsiCФtifi€Л"

	)

849 
	#NID_sdsiCФtifi€Л
 159

	)

850 
	#OBJ_sdsiCФtifi€Л
 
OBJ_ыєTy≥s
, 2L

	)

852 
	#OBJ_ьlTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509CЊ
 "x509CЊ"

	)

855 
	#NID_x509CЊ
 160

	)

856 
	#OBJ_x509CЊ
 
OBJ_ьlTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWЩhSHA1
 "hmacWЩhSHA1"

	)

869 
	#NID_hmacWЩhSHA1
 163

	)

870 
	#OBJ_hmacWЩhSHA1
 
OBJ_rІdsi
,2L,7L

	)

874 
	#LN_id_qt_эs
 "Pёicy QuЃifЫЄCPS"

	)

875 
	#SN_id_qt_эs
 "id-qt-эs"

	)

876 
	#NID_id_qt_эs
 164

	)

877 
	#OBJ_id_qt_эs
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unўiы
 "Pёicy QuЃifЫЄU£ЄNўiы"

	)

880 
	#SN_id_qt_unўiы
 "id-qt-unўiы"

	)

881 
	#NID_id_qt_unўiы
 165

	)

882 
	#OBJ_id_qt_unўiы
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abЮЩЫs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abЮЩЫs
 "S/MIME C≠abЮЩЫs"

	)

890 
	#NID_SMIMEC≠abЮЩЫs
 167

	)

891 
	#OBJ_SMIMEC≠abЮЩЫs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWЩhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWЩhMD2AndRC2_CBC
 "pbeWЩhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWЩhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWЩhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWЩhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWЩhMD5AndRC2_CBC
 "pbeWЩhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWЩhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWЩhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWЩhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWЩhSHA1AndDES_CBC
 "pbeWЩhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWЩhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWЩhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_їq
 "Miьosoб ExЛnsiЏ Reque°"

	)

911 
	#SN_ms_ext_їq
 "msExtReq"

	)

912 
	#NID_ms_ext_їq
 171

	)

913 
	#OBJ_ms_ext_їq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_їq
 "ExЛnsiЏ Reque°"

	)

916 
	#SN_ext_їq
 "extReq"

	)

917 
	#NID_ext_їq
 172

	)

918 
	#OBJ_ext_їq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuЃifЫr
 "dnQuЃifЫr"

	)

926 
	#LN_dnQuЃifЫr
 "dnQuЃifЫr"

	)

927 
	#NID_dnQuЃifЫr
 174

	)

928 
	#OBJ_dnQuЃifЫr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_Ъfo_acыss
 "auth№ЩyInfoAcыss"

	)

939 
	#LN_Ъfo_acыss
 "Auth№Щy Inf№m©iЏ Acыss"

	)

940 
	#NID_Ъfo_acыss
 177

	)

941 
	#OBJ_Ъfo_acыss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_€_issuФs
 "€IssuФs"

	)

949 
	#LN_ad_€_issuФs
 "CA IssuФs"

	)

950 
	#NID_ad_€_issuФs
 179

	)

951 
	#OBJ_ad_€_issuФs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignЪg"

	)

954 
	#LN_OCSP_sign
 "OCSP SignЪg"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<ЁТs¶/bio.h
>

960 
	~<ЁТs¶/aҐ1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifdeа 
__эlu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
ЃЯs
;

983 cЏ° *
«me
;

984 cЏ° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_ьЧЛ_™d_add_objeщ
(
a
,
b
,
c
и
	`OBJ_ьЧЛ
„,b,c)

	)

990 
OBJ_NAME_ЪЩ
();

991 
OBJ_NAME_√w_Ъdex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
дУ_func
)(const *, , const *));

994 cЏ° *
OBJ_NAME_gС
(cЏ° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(cЏ° *
«me
,
ty≥
,cЏ° *
d©a
);

996 
OBJ_NAME_їmove
(cЏ° *
«me
,
ty≥
);

997 
OBJ_NAME_юЧnup
(
ty≥
);

998 
OBJ_NAME_do_Ѓl
(
ty≥
,(*
в
)(cЏ° 
OBJ_NAME
 *,*
ђg
),

999 *
ђg
);

1000 
OBJ_NAME_do_Ѓl_s№Лd
(
ty≥
,(*
в
)(cЏ° 
OBJ_NAME
 *,*
ђg
),

1001 *
ђg
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(cЏ° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 cЏ° * 
OBJ_nid2 
(
n
);

1006 cЏ° * 
OBJ_nid2Ґ
(
n
);

1007 
OBJ_obj2nid
(cЏ° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(cЏ° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Ћn
, cЏ° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(cЏ° *
s
);

1011 
OBJ_ 2nid
(cЏ° *
s
);

1012 
OBJ_Ґ2nid
(cЏ° *
s
);

1013 
OBJ_cmp
(cЏ° 
ASN1_OBJECT
 *
a
,cЏ° ASN1_OBJECT *
b
);

1014 cЏ° * 
OBJ_b£ђch
(cЏ° *
key
,cЏ° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 cЏ° * 
OBJ_b£ђch_ex
(cЏ° *
key
,cЏ° *
ba£
,
num
,

1017 
size
, (*
cmp
)(cЏ° *, cЏ° *), 
жags
);

1019 
OBJ_√w_nid
(
num
);

1020 
OBJ_add_objeщ
(cЏ° 
ASN1_OBJECT
 *
obj
);

1021 
OBJ_ьЧЛ
(cЏ° *
oid
,cЏ° *
Ґ
,cЏ° *
 
);

1022 
OBJ_юЧnup
();

1023 
OBJ_ьЧЛ_objeщs
(
BIO
 *
Ъ
);

1029 
ERR_lяd_OBJ_°rЪgs
();

1034 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1035 
	#OBJ_F_OBJ_CREATE
 100

	)

1036 
	#OBJ_F_OBJ_DUP
 101

	)

1037 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1038 
	#OBJ_F_OBJ_NID2LN
 102

	)

1039 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1040 
	#OBJ_F_OBJ_NID2SN
 104

	)

1043 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1044 
	#OBJ_R_UNKNOWN_NID
 101

	)

1046 #ifdeа 
__эlu•lus


	@/usr/include/openssl/opensslconf.h

5 #iвdeа
OPENSSL_DOING_MAKEDEPEND


7 #iвdeа
OPENSSL_NO_CAMELLIA


8 
	#OPENSSL_NO_CAMELLIA


	)

10 #iвdeа
OPENSSL_NO_GMP


11 
	#OPENSSL_NO_GMP


	)

13 #iвdeа
OPENSSL_NO_IDEA


14 
	#OPENSSL_NO_IDEA


	)

16 #iвdeа
OPENSSL_NO_KRB5


17 
	#OPENSSL_NO_KRB5


	)

19 #iвdeа
OPENSSL_NO_MDC2


20 
	#OPENSSL_NO_MDC2


	)

22 #iвdeа
OPENSSL_NO_RC5


23 
	#OPENSSL_NO_RC5


	)

25 #iвdeа
OPENSSL_NO_RFC3779


26 
	#OPENSSL_NO_RFC3779


	)

28 #iвdeа
OPENSSL_NO_SEED


29 
	#OPENSSL_NO_SEED


	)

31 #iвdeа
OPENSSL_NO_SSLV2


32 
	#OPENSSL_NO_SSLV2


	)

36 #iвdeа
OPENSSL_THREADS


37 
	#OPENSSL_THREADS


	)

39 #iвdeа
OPENSSL_NO_STATIC_ENGINE


40 
	#OPENSSL_NO_STATIC_ENGINE


	)

47 #ifdeа
OPENSSL_ALGORITHM_DEFINES


48 #iа
defЪed
(
OPENSSL_NO_CAMELLIA
и&& !defЪed(
NO_CAMELLIA
)

49 
	#NO_CAMELLIA


	)

51 #iа
defЪed
(
OPENSSL_NO_GMP
и&& !defЪed(
NO_GMP
)

52 
	#NO_GMP


	)

54 #iа
defЪed
(
OPENSSL_NO_IDEA
и&& !defЪed(
NO_IDEA
)

55 
	#NO_IDEA


	)

57 #iа
defЪed
(
OPENSSL_NO_KRB5
и&& !defЪed(
NO_KRB5
)

58 
	#NO_KRB5


	)

60 #iа
defЪed
(
OPENSSL_NO_MDC2
и&& !defЪed(
NO_MDC2
)

61 
	#NO_MDC2


	)

63 #iа
defЪed
(
OPENSSL_NO_RC5
и&& !defЪed(
NO_RC5
)

64 
	#NO_RC5


	)

66 #iа
defЪed
(
OPENSSL_NO_RFC3779
и&& !defЪed(
NO_RFC3779
)

67 
	#NO_RFC3779


	)

69 #iа
defЪed
(
OPENSSL_NO_SEED
и&& !defЪed(
NO_SEED
)

70 
	#NO_SEED


	)

72 #iа
defЪed
(
OPENSSL_NO_SSLV2
и&& !defЪed(
NO_SSLV2
)

73 
	#NO_SSLV2


	)

80 #undeа
I386_ONLY


82 #iа!(
defЪed
(
VMS
и|| defЪed(
__VMS
))

83 #iа
defЪed
(
HEADER_CRYPTLIB_H
и&& !defЪed(
OPENSSLDIR
)

84 
	#ENGINESDIR
 "/u§/lib/s¶/ТgЪes"

	)

85 
	#OPENSSLDIR
 "/u§/lib/s¶"

	)

89 #undeа
OPENSSL_UNISTD


90 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

92 #undeа
OPENSSL_EXPORT_VAR_AS_FUNCTION


94 #iа
defЪed
(
HEADER_IDEA_H
и&& !defЪed(
IDEA_INT
)

95 
	#IDEA_INT
 

	)

98 #iа
defЪed
(
HEADER_MD2_H
и&& !defЪed(
MD2_INT
)

99 
	#MD2_INT
 

	)

102 #iа
defЪed
(
HEADER_RC2_H
и&& !defЪed(
RC2_INT
)

104 
	#RC2_INT
 

	)

107 #iа
defЪed
(
HEADER_RC4_H
)

108 #iа!
defЪed
(
RC4_INT
)

116 
	#RC4_INT
 

	)

118 #iа!
defЪed
(
RC4_CHUNK
)

123 #undeа
RC4_CHUNK


127 #iа(
defЪed
(
HEADER_NEW_DES_H
и|| defЪed(
HEADER_DES_H
)и&& !defЪed(
DES_LONG
)

130 #iвdeа
DES_LONG


131 
	#DES_LONG
 

	)

135 #iа
defЪed
(
HEADER_BN_H
и&& !defЪed(
CONFIG_HEADER_BN_H
)

136 
	#CONFIG_HEADER_BN_H


	)

137 
	#BN_LLONG


	)

145 #undeа
SIXTY_FOUR_BIT_LONG


146 #undeа
SIXTY_FOUR_BIT


147 
	#THIRTY_TWO_BIT


	)

148 #undeа
SIXTEEN_BIT


149 #undeа
EIGHT_BIT


152 #iа
defЪed
(
HEADER_RC4_LOCL_H
и&& !defЪed(
CONFIG_HEADER_RC4_LOCL_H
)

153 
	#CONFIG_HEADER_RC4_LOCL_H


	)

156 
	#RC4_INDEX


	)

159 #iа
defЪed
(
HEADER_BF_LOCL_H
и&& !defЪed(
CONFIG_HEADER_BF_LOCL_H
)

160 
	#CONFIG_HEADER_BF_LOCL_H


	)

161 #undeа
BF_PTR


164 #iа
defЪed
(
HEADER_DES_LOCL_H
и&& !defЪed(
CONFIG_HEADER_DES_LOCL_H
)

165 
	#CONFIG_HEADER_DES_LOCL_H


	)

166 #iвdeа
DES_DEFAULT_OPTIONS


169 #iвdeа
DES_PTR


170 
	#DES_PTR


	)

176 #iвdeа
DES_RISC1


177 
	#DES_RISC1


	)

180 #iвdeа
DES_RISC2


181 #undeа
DES_RISC2


184 #iа
defЪed
(
DES_RISC1
и&& defЪed(
DES_RISC2
)

185 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

190 #iвdeа
DES_UNROLL


191 
	#DES_UNROLL


	)

197 #iа!
defЪed
(
DES_PTR
и&& !defЪed(
DES_RISC1
и&& !defЪed(
DES_RISC2
и&& !defЪed(
DES_UNROLL
)

204 #iа
defЪed
–
sun
 )

205 
	#DES_PTR


	)

206 
	#DES_RISC1


	)

207 
	#DES_UNROLL


	)

208 #Цiа
defЪed
–
__u…rix
 )

209 
	#DES_PTR


	)

210 
	#DES_RISC2


	)

211 
	#DES_UNROLL


	)

212 #Цiа
defЪed
–
__osf1__
 )

213 
	#DES_PTR


	)

214 
	#DES_RISC2


	)

215 #Цiа
defЪed
 ( 
_AIX
 )

217 #Цiа
defЪed
–
__hpux
 )

219 #Цiа
defЪed
–
__aux
 )

221 #Цiа
defЪed
–
__dgux
 )

222 
	#DES_UNROLL


	)

223 #Цiа
defЪed
–
__sgi
 )

224 
	#DES_PTR


	)

225 
	#DES_RISC2


	)

226 
	#DES_UNROLL


	)

227 #Цiа
defЪed
(
i386
и|| defЪed(
__i386__
)

228 
	#DES_PTR


	)

229 
	#DES_RISC1


	)

230 
	#DES_UNROLL


	)

	@/usr/include/openssl/opensslv.h

1 #iвdeа
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x0090807fL

	)

29 #ifdeа
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8g-fЭ†19 Oщ 2007"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8g 19 Oщ 2007"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "ЕђИoа" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "0.9.8"

	)

	@/usr/include/openssl/pkcs7.h

59 #iвdeа
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<ЁТs¶/aҐ1.h
>

63 
	~<ЁТs¶/bio.h
>

64 
	~<ЁТs¶/e_os2.h
>

66 
	~<ЁТs¶/symhacks.h
>

67 
	~<ЁТs¶/os¶_typ.h
>

69 #ifdeа 
__эlu•lus


73 #ifdeа
OPENSSL_SYS_WIN32


75 #undeа
PKCS7_ISSUER_AND_SERIAL


76 #undeа
PKCS7_SIGNER_INFO


86 
	spkcs7_issuФ_™d_£rЯl_°


88 
X509_NAME
 *
issuФ
;

89 
ASN1_INTEGER
 *
£rЯl
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_Ъfo_°


94 
ASN1_INTEGER
 *
vФsiЏ
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuФ_™d_£rЯl
;

96 
X509_ALGOR
 *
dige°_Ѓg
;

97 
STACK_OF
(
X509_ATTRIBUTE
и*
auth_©М
;

98 
X509_ALGOR
 *
dige°_Тc_Ѓg
;

99 
ASN1_OCTET_STRING
 *
Тc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
и*
u«uth_©М
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_їcЭ_Ъfo_°


111 
ASN1_INTEGER
 *
vФsiЏ
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuФ_™d_£rЯl
;

113 
X509_ALGOR
 *
key_Тc_Ѓg№
;

114 
ASN1_OCTET_STRING
 *
Тc_key
;

115 
X509
 *
ыє
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vФsiЏ
;

124 
STACK_OF
(
X509_ALGOR
и*
md_Ѓgs
;

125 
STACK_OF
(
X509
и*
ыє
;

126 
STACK_OF
(
X509_CRL
и*
ьl
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
и*
sig√r_Ъfo
;

129 
pkcs7_°
 *
cЏЛЅs
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_Тc_cЏЛЅ_°


136 
ASN1_OBJECT
 *
cЏЛЅ_ty≥
;

137 
X509_ALGOR
 *
Ѓg№Щhm
;

138 
ASN1_OCTET_STRING
 *
Тc_d©a
;

139 cЏ° 
EVP_CIPHER
 *
cЭhФ
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ТvЦЁed_°


144 
ASN1_INTEGER
 *
vФsiЏ
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
и*
їcЭЫЅЪfo
;

146 
PKCS7_ENC_CONTENT
 *
Тc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dТvЦЁed_°


151 
ASN1_INTEGER
 *
vФsiЏ
;

152 
STACK_OF
(
X509_ALGOR
и*
md_Ѓgs
;

153 
STACK_OF
(
X509
и*
ыє
;

154 
STACK_OF
(
X509_CRL
и*
ьl
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
и*
sig√r_Ъfo
;

157 
PKCS7_ENC_CONTENT
 *
Тc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
и*
їcЭЫЅЪfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vФsiЏ
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
cЏЛЅs
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_Тьy±ed_°


171 
ASN1_INTEGER
 *
vФsiЏ
;

172 
PKCS7_ENC_CONTENT
 *
Тc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
aҐ1
;

180 
Ћngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dСached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ТvЦЁed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ТvЦЁed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
Тьy±ed
;

215 
ASN1_TYPE
 *
ўhФ
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gС_sig√d_©МibuЛs
(
si
и((si)->
auth_©М
)

	)

227 
	#PKCS7_gС_©МibuЛs
(
si
и((si)->
u«uth_©М
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
и(
	`OBJ_obj2nid
(„)->
ty≥
и=р
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_Тьy±ed
(
a
и(
	`OBJ_obj2nid
(„)->
ty≥
и=р
NID_pkcs7_Тьy±ed
)

	)

231 
	#PKCS7_ty≥_is_ТvЦЁed
(
a
и(
	`OBJ_obj2nid
(„)->
ty≥
и=р
NID_pkcs7_ТvЦЁed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvЦЁed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
и=р
NID_pkcs7_sig√dAndEnvЦЁed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
и(
	`OBJ_obj2nid
(„)->
ty≥
и=р
NID_pkcs7_d©a
)

	)

236 
	#PKCS7_ty≥_is_dige°
(
a
и(
	`OBJ_obj2nid
(„)->
ty≥
и=р
NID_pkcs7_dige°
)

	)

238 
	#PKCS7_£t_dСached
(
p
,
v
) \

239 
	`PKCS7_щЊ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

240 
	#PKCS7_gС_dСached
(
p
) \

241 
	`PKCS7_щЊ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

243 
	#PKCS7_is_dСached
(
p7
и(
	`PKCS7_ty≥_is_sig√d
’7и&& 
	`PKCS7_gС_dСached
’7))

	)

245 #ifdeа
SSLEAY_MACROS


246 #iвdeа
PKCS7_ISSUER_AND_SERIAL_dige°


247 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Ћn
) \

248 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

249 (*)
d©a
,
md
,
Ћn
)

	)

255 
	#PKCS7_TEXT
 0x1

	)

256 
	#PKCS7_NOCERTS
 0x2

	)

257 
	#PKCS7_NOSIGS
 0x4

	)

258 
	#PKCS7_NOCHAIN
 0x8

	)

259 
	#PKCS7_NOINTERN
 0x10

	)

260 
	#PKCS7_NOVERIFY
 0x20

	)

261 
	#PKCS7_DETACHED
 0x40

	)

262 
	#PKCS7_BINARY
 0x80

	)

263 
	#PKCS7_NOATTR
 0x100

	)

264 
	#PKCS7_NOSMIMECAP
 0x200

	)

265 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

266 
	#PKCS7_CRLFEOL
 0x800

	)

267 
	#PKCS7_STREAM
 0x1000

	)

268 
	#PKCS7_NOCRL
 0x2000

	)

272 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

273 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

274 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

275 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

276 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

277 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

278 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

279 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

280 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

282 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

284 #iвdeа
SSLEAY_MACROS


285 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,cЏ° 
EVP_MD
 *
ty≥
,

286 *
md
,*
Ћn
);

287 #iвdeа
OPENSSL_NO_FP_API


288 
PKCS7
 *
d2i_PKCS7_е
(
FILE
 *
е
,PKCS7 **
p7
);

289 
i2d_PKCS7_е
(
FILE
 *
е
,
PKCS7
 *
p7
);

291 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

292 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

293 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

302 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

303 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

304 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

306 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

307 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

309 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

311 
PKCS7_щЊ
(
PKCS7
 *
p7
, 
cmd
, 
ѕrg
, *
Јrg
);

313 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

314 
PKCS7_£t0_ty≥_ўhФ
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
ўhФ
);

315 
PKCS7_£t_cЏЛЅ
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

316 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

317 cЏ° 
EVP_MD
 *
dg°
);

318 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

319 
PKCS7_add_ыєifi€Л
(
PKCS7
 *
p7
, 
X509
 *
x509
);

320 
PKCS7_add_ьl
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

321 
PKCS7_cЏЛЅ_√w
(
PKCS7
 *
p7
, 
nid
);

322 
PKCS7_d©aVФify
(
X509_STORE
 *
ыє_°№e
, 
X509_STORE_CTX
 *
щx
,

323 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

324 
PKCS7_sig«tuїVФify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

325 
X509
 *
x509
);

327 
BIO
 *
PKCS7_d©aInЩ
(
PKCS7
 *
p7
, BIO *
bio
);

328 
PKCS7_d©aFЪЃ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

329 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
Ъ_bio
, 
X509
 *
pыє
);

332 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuї
(
PKCS7
 *
p7
, 
X509
 *
x509
,

333 
EVP_PKEY
 *
pkey
, cЏ° 
EVP_MD
 *
dg°
);

334 
X509
 *
PKCS7_ыє_дom_sig√r_Ъfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

335 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, cЏ° 
EVP_MD
 *
md
);

336 
STACK_OF
(
PKCS7_SIGNER_INFO
и*
PKCS7_gС_sig√r_Ъfo
(
PKCS7
 *
p7
);

338 
PKCS7_RECIP_INFO
 *
PKCS7_add_їcЭЫЅ
(
PKCS7
 *
p7
, 
X509
 *
x509
);

339 
PKCS7_add_їcЭЫЅ_Ъfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

340 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

341 
PKCS7_£t_cЭhФ
(
PKCS7
 *
p7
, cЏ° 
EVP_CIPHER
 *
cЭhФ
);

343 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gС_issuФ_™d_£rЯl
(
PKCS7
 *
p7
, 
idx
);

344 
ASN1_OCTET_STRING
 *
PKCS7_dige°_дom_©МibuЛs
(
STACK_OF
(
X509_ATTRIBUTE
и*
sk
);

345 
PKCS7_add_sig√d_©МibuЛ
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

346 *
d©a
);

347 
PKCS7_add_©МibuЛ
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©єy≥
,

348 *
vЃue
);

349 
ASN1_TYPE
 *
PKCS7_gС_©МibuЛ
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

350 
ASN1_TYPE
 *
PKCS7_gС_sig√d_©МibuЛ
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

351 
PKCS7_£t_sig√d_©МibuЛs
(
PKCS7_SIGNER_INFO
 *
p7si
,

352 
STACK_OF
(
X509_ATTRIBUTE
и*
sk
);

353 
PKCS7_£t_©МibuЛs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
и*
sk
);

356 
PKCS7
 *
PKCS7_sign
(
X509
 *
signыє
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509и*
ыєs
,

357 
BIO
 *
d©a
, 
жags
);

358 
PKCS7_vФify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
и*
ыєs
, 
X509_STORE
 *
°№e
,

359 
BIO
 *
Ъd©a
, BIO *
out
, 
жags
);

360 
STACK_OF
(
X509
и*
PKCS7_gС0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509и*
ыєs
, 
жags
);

361 
PKCS7
 *
PKCS7_Тьy±
(
STACK_OF
(
X509
и*
ыєs
, 
BIO
 *
Ъ
, cЏ° 
EVP_CIPHER
 *
cЭhФ
,

362 
жags
);

363 
PKCS7_deьy±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
ыє
, 
BIO
 *
d©a
, 
жags
);

365 
PKCS7_add_©Мib_smime€p
(
PKCS7_SIGNER_INFO
 *
si
,

366 
STACK_OF
(
X509_ALGOR
и*
€p
);

367 
STACK_OF
(
X509_ALGOR
и*
PKCS7_gС_smime€p
(
PKCS7_SIGNER_INFO
 *
si
);

368 
PKCS7_simґe_smime€p
(
STACK_OF
(
X509_ALGOR
и*
sk
, 
nid
, 
ђg
);

370 
SMIME_wrЩe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
жags
);

371 
PKCS7
 *
SMIME_їad_PKCS7
(
BIO
 *
bio
, BIO **
bcЏt
);

372 
SMIME_ьlf_cЁy
(
BIO
 *
Ъ
, BIO *
out
, 
жags
);

373 
SMIME_Лxt
(
BIO
 *
Ъ
, BIO *
out
);

379 
ERR_lяd_PKCS7_°rЪgs
();

384 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

385 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

386 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

387 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

388 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

389 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

390 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

391 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

392 
	#PKCS7_F_PKCS7_CTRL
 104

	)

393 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

394 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

395 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

396 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

397 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

398 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

399 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

400 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

401 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

402 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

403 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

404 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

405 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

406 
	#PKCS7_F_PKCS7_SIGN
 116

	)

407 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

408 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

409 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

410 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

411 
	#PKCS7_F_SMIME_TEXT
 123

	)

414 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

415 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

416 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

417 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

418 
	#PKCS7_R_DECODE_ERROR
 130

	)

419 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

420 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

421 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

422 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

423 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

424 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

425 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

426 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

427 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

428 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

429 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

430 
	#PKCS7_R_NO_CONTENT
 122

	)

431 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

432 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

433 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

434 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

435 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

436 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

437 
	#PKCS7_R_NO_SIGNERS
 142

	)

438 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

439 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

440 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

441 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

442 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

443 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

444 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

445 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

446 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

447 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

448 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

449 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

450 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

451 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

452 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

453 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

454 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

455 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

456 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

457 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

458 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

459 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

461 #ifdeа 
__эlu•lus


	@/usr/include/openssl/pq_compat.h

60 
	~<ЁТs¶/ЁТs¶cЏf.h
>

61 
	~<ЁТs¶/bn.h
>

75 #iа(
defЪed
(
THIRTY_TWO_BIT
и&& !defЪed(
BN_LLONG
)и|| defЪed(
SIXTEEN_BIT
и|| defЪed(
EIGHT_BIT
)

77 
	#PQ_64BIT_IS_INTEGER
 0

	)

78 
	#PQ_64BIT_IS_BIGNUM
 1

	)

80 
	#PQ_64BIT
 
BIGNUM


	)

81 
	#PQ_64BIT_CTX
 
BN_CTX


	)

83 
	#pq_64bЩ_ЪЩ
(
x
и
	`BN_ЪЩ
(x)

	)

84 
	#pq_64bЩ_дУ
(
x
и
	`BN_дУ
(x)

	)

86 
	#pq_64bЩ_щx_√w
(
щx
и
	`BN_CTX_√w
()

	)

87 
	#pq_64bЩ_щx_дУ
(
x
и
	`BN_CTX_дУ
(x)

	)

89 
	#pq_64bЩ_assign
(
x
, 
y
и
	`BN_cЁy
(x, y)

	)

90 
	#pq_64bЩ_assign_w№d
(
x
, 
y
и
	`BN_£t_w№d
(x, y)

	)

91 
	#pq_64bЩ_gt
(
x
, 
y
и
	`BN_ucmp
(x, yи>р1 ? 1 : 0

	)

92 
	#pq_64bЩ_eq
(
x
, 
y
и
	`BN_ucmp
(x, yи=р0 ? 1 : 0

	)

93 
	#pq_64bЩ_add_w№d
(
x
, 
w
и
	`BN_add_w№d
(x, w)

	)

94 
	#pq_64bЩ_sub
(
r
, 
x
, 
y
и
	`BN_sub
‘, x, y)

	)

95 
	#pq_64bЩ_sub_w№d
(
x
, 
w
и
	`BN_sub_w№d
(x, w)

	)

96 
	#pq_64bЩ_mod
(
r
, 
x
, 
n
, 
щx
и
	`BN_mod
‘, x,В, ctx)

	)

98 
	#pq_64bЩ_bЪ2num
(
bn
, 
byЛs
, 
Ћn
и
	`BN_bЪ2bn
(byЛs,ЖТ, bn)

	)

99 
	#pq_64bЩ_num2bЪ
(
bn
, 
byЛs
и
	`BN_bn2bЪ
(bn, byЛs)

	)

100 
	#pq_64bЩ_gС_w№d
(
x
и
	`BN_gС_w№d
(x)

	)

101 
	#pq_64bЩ_is_bЩ_£t
(
x
, 
off£t
и
	`BN_is_bЩ_£t
(x, off£t)

	)

102 
	#pq_64bЩ_lshiб
(
r
, 
x
, 
shiб
и
	`BN_lshiб
‘, x, shiб)

	)

103 
	#pq_64bЩ_£t_bЩ
(
x
, 
num
и
	`BN_£t_bЩ
(x,Вum)

	)

104 
	#pq_64bЩ_gС_Ћngth
(
x
и
	`BN_num_bЩs
((x))

	)

108 
	#PQ_64BIT_IS_INTEGER
 1

	)

109 
	#PQ_64BIT_IS_BIGNUM
 0

	)

111 #iа
defЪed
(
SIXTY_FOUR_BIT
)

112 
	#PQ_64BIT
 
BN_ULONG


	)

113 
	#PQ_64BIT_PRINT
 "%ќd"

	)

114 #Цiа
defЪed
(
SIXTY_FOUR_BIT_LONG
)

115 
	#PQ_64BIT
 
BN_ULONG


	)

116 
	#PQ_64BIT_PRINT
 "%ld"

	)

117 #Цiа
defЪed
(
THIRTY_TWO_BIT
)

118 
	#PQ_64BIT
 
BN_ULLONG


	)

119 
	#PQ_64BIT_PRINT
 "%ќd"

	)

122 
	#PQ_64BIT_CTX
 

	)

124 
	#pq_64bЩ_ЪЩ
(
x
)

	)

125 
	#pq_64bЩ_дУ
(
x
)

	)

126 
	#pq_64bЩ_щx_√w
(
щx
и(щx)

	)

127 
	#pq_64bЩ_щx_дУ
(
x
)

	)

129 
	#pq_64bЩ_assign
(
x
, 
y
и(*(xир*(y))

	)

130 
	#pq_64bЩ_assign_w№d
(
x
, 
y
и(*(xирy)

	)

131 
	#pq_64bЩ_gt
(
x
, 
y
и(*(xи> *(y))

	)

132 
	#pq_64bЩ_eq
(
x
, 
y
и(*(xи=р*(y))

	)

133 
	#pq_64bЩ_add_w№d
(
x
, 
w
и(*(xир(*(xи+ (w)))

	)

134 
	#pq_64bЩ_sub
(
r
, 
x
, 
y
и(*‘ир(*(xи- *(y)))

	)

135 
	#pq_64bЩ_sub_w№d
(
x
, 
w
и(*(xир(*(xи- (w)))

	)

136 
	#pq_64bЩ_mod
(
r
, 
x
, 
n
, 
щx
)

	)

138 
	#pq_64bЩ_bЪ2num
(
num
, 
byЛs
, 
Ћn
и
	`byЛs_to_lЏg_lЏg
(byЛs,Вum)

	)

139 
	#pq_64bЩ_num2bЪ
(
num
, 
byЛs
и
	`lЏg_lЏg_to_byЛs
“um, byЛs)

	)

140 
	#pq_64bЩ_gС_w№d
(
x
и*(x)

	)

141 
	#pq_64bЩ_lshiб
(
r
, 
x
, 
shiб
и(*‘ир(*(xи<< (shiб)))

	)

142 
	#pq_64bЩ_£t_bЩ
(
x
, 
num
) do { \

143 
PQ_64BIT
 
mask
 = 1; \

144 
mask
 = mask << (
num
); \

145 *(
x
и|р
mask
; \

146 } 0)

	)

	@/usr/include/openssl/pqueue.h

60 #iвdeа
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rЪg.h
>

67 
	~<ЁТs¶/pq_comЈt.h
>

69 
_pqueue
 *
	tpqueue
;

71 
	s_pЩem


73 
PQ_64BIT
 
	mіi№Щy
;

74 *
	md©a
;

75 
_pЩem
 *
	m√xt
;

76 } 
	tpЩem
;

78 
_pЩem
 *
	tpЩФ©№
;

80 
pЩem
 *
pЩem_√w
(
PQ_64BIT
 
іi№Щy
, *
d©a
);

81 
pЩem_дУ
(
pЩem
 *
Щem
);

83 
pqueue
 
pqueue_√w
();

84 
pqueue_дУ
(
pqueue
 
pq
);

86 
pЩem
 *
pqueue_Ъ£є
(
pqueue
 
pq
,ЕЩem *
Щem
);

87 
pЩem
 *
pqueue_≥ek
(
pqueue
 
pq
);

88 
pЩem
 *
pqueue_pЁ
(
pqueue
 
pq
);

89 
pЩem
 *
pqueue_fЪd
(
pqueue
 
pq
, 
PQ_64BIT
 
іi№Щy
);

90 
pЩem
 *
pqueue_ЩФ©№
(
pqueue
 
pq
);

91 
pЩem
 *
pqueue_√xt
(
pЩФ©№
 *
ЩФ
);

93 
pqueue_іЪt
(
pqueue
 
pq
);

94 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/rsa.h

59 #iвdeа
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<ЁТs¶/aҐ1.h
>

64 #iвdeа
OPENSSL_NO_BIO


65 
	~<ЁТs¶/bio.h
>

67 
	~<ЁТs¶/ьy±o.h
>

68 
	~<ЁТs¶/os¶_typ.h
>

69 #iвdeа
OPENSSL_NO_DEPRECATED


70 
	~<ЁТs¶/bn.h
>

73 #ifdeа
OPENSSL_NO_RSA


74 #Фr№ 
RSA
 
is
 
diІbЋd
.

77 #ifdeа 
__эlu•lus


85 
	srІ_mСh_°


87 cЏ° *
«me
;

88 (*
rІ_pub_Тc
)(
жТ
,cЏ° *
дom
,

89 *
to
,

90 
RSA
 *
rІ
,
ЈddЪg
);

91 (*
rІ_pub_dec
)(
жТ
,cЏ° *
дom
,

92 *
to
,

93 
RSA
 *
rІ
,
ЈddЪg
);

94 (*
rІ_іiv_Тc
)(
жТ
,cЏ° *
дom
,

95 *
to
,

96 
RSA
 *
rІ
,
ЈddЪg
);

97 (*
rІ_іiv_dec
)(
жТ
,cЏ° *
дom
,

98 *
to
,

99 
RSA
 *
rІ
,
ЈddЪg
);

100 (*
rІ_mod_exp
)(
BIGNUM
 *
r0
,cЏ° BIGNUM *
I
,
RSA
 *
rІ
,
BN_CTX
 *
щx
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

102 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
,

103 
BN_MONT_CTX
 *
m_щx
);

104 (*
ЪЩ
)(
RSA
 *
rІ
);

105 (*
fЪish
)(
RSA
 *
rІ
);

106 
жags
;

107 *
≠p_d©a
;

115 (*
rІ_sign
)(
ty≥
,

116 cЏ° *
m
, 
m_Ћngth
,

117 *
sigїt
, *
sigЋn
, cЏ° 
RSA
 *
rІ
);

118 (*
rІ_vФify
)(
dty≥
,

119 cЏ° *
m
, 
m_Ћngth
,

120 *
sigbuf
, 
sigЋn
, cЏ° 
RSA
 *
rІ
);

125 (*
rІ_keygТ
)(
RSA
 *
rІ
, 
bЩs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

128 
	srІ_°


132 
Јd
;

133 
vФsiЏ
;

134 cЏ° 
RSA_METHOD
 *
mСh
;

136 
ENGINE
 *
ТgЪe
;

137 
BIGNUM
 *
n
;

138 
BIGNUM
 *
e
;

139 
BIGNUM
 *
d
;

140 
BIGNUM
 *
p
;

141 
BIGNUM
 *
q
;

142 
BIGNUM
 *
dmp1
;

143 
BIGNUM
 *
dmq1
;

144 
BIGNUM
 *
iqmp
;

146 
CRYPTO_EX_DATA
 
ex_d©a
;

147 
їгїnыs
;

148 
жags
;

151 
BN_MONT_CTX
 *
_mСhod_mod_n
;

152 
BN_MONT_CTX
 *
_mСhod_mod_p
;

153 
BN_MONT_CTX
 *
_mСhod_mod_q
;

157 *
bignum_d©a
;

158 
BN_BLINDING
 *
blЪdЪg
;

159 
BN_BLINDING
 *
mt_blЪdЪg
;

162 #iвdeа
OPENSSL_RSA_MAX_MODULUS_BITS


163 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

166 #iвdeа
OPENSSL_RSA_SMALL_MODULUS_BITS


167 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

169 #iвdeа
OPENSSL_RSA_MAX_PUBEXP_BITS


170 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

173 
	#RSA_3
 0x3L

	)

174 
	#RSA_F4
 0x10001L

	)

176 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

178 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

179 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

180 
	#RSA_FLAG_BLINDING
 0x0008

	)

181 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

187 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

191 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

193 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

198 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

208 #iвdeа
OPENSSL_NO_DEPRECATED


209 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

220 
	#RSA_PKCS1_PADDING
 1

	)

221 
	#RSA_SSLV23_PADDING
 2

	)

222 
	#RSA_NO_PADDING
 3

	)

223 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

224 
	#RSA_X931_PADDING
 5

	)

226 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

228 
	#RSA_£t_≠p_d©a
(
s
,
ђg
и
	`RSA_£t_ex_d©a
(s,0,ђg)

	)

229 
	#RSA_gС_≠p_d©a
(
s
и
	`RSA_gС_ex_d©a
(s,0)

	)

231 
RSA
 * 
RSA_√w
();

232 
RSA
 * 
RSA_√w_mСhod
(
ENGINE
 *
ТgЪe
);

233 
RSA_size
(cЏ° 
RSA
 *);

236 #iвdeа
OPENSSL_NO_DEPRECATED


237 
RSA
 * 
RSA_gТФ©e_key
(
bЩs
, 
e
,

238 (*
€ќback
)(,,*),*
cb_ђg
);

242 
RSA_gТФ©e_key_ex
(
RSA
 *
rІ
, 
bЩs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

244 
RSA_check_key
(cЏ° 
RSA
 *);

246 
RSA_public_Тьy±
(
жТ
, cЏ° *
дom
,

247 *
to
, 
RSA
 *
rІ
,
ЈddЪg
);

248 
RSA_іiv©e_Тьy±
(
жТ
, cЏ° *
дom
,

249 *
to
, 
RSA
 *
rІ
,
ЈddЪg
);

250 
RSA_public_deьy±
(
жТ
, cЏ° *
дom
,

251 *
to
, 
RSA
 *
rІ
,
ЈddЪg
);

252 
RSA_іiv©e_deьy±
(
жТ
, cЏ° *
дom
,

253 *
to
, 
RSA
 *
rІ
,
ЈddЪg
);

254 
RSA_дУ
 (
RSA
 *
r
);

256 
RSA_up_їf
(
RSA
 *
r
);

258 
RSA_жags
(cЏ° 
RSA
 *
r
);

260 
RSA_£t_deзu…_mСhod
(cЏ° 
RSA_METHOD
 *
mСh
);

261 cЏ° 
RSA_METHOD
 *
RSA_gС_deзu…_mСhod
();

262 cЏ° 
RSA_METHOD
 *
RSA_gС_mСhod
(cЏ° 
RSA
 *
rІ
);

263 
RSA_£t_mСhod
(
RSA
 *
rІ
, cЏ° 
RSA_METHOD
 *
mСh
);

266 
RSA_mem№y_lock
(
RSA
 *
r
);

269 cЏ° 
RSA_METHOD
 *
RSA_PKCS1_SSLЧy
();

271 cЏ° 
RSA_METHOD
 *
RSA_nuќ_mСhod
();

273 
DECLARE_ASN1_ENCODE_FUNCTIONS_cЏ°
(
RSA
, 
RSAPublicKey
)

274 
DECLARE_ASN1_ENCODE_FUNCTIONS_cЏ°
(
RSA
, 
RSAPriv©eKey
)

276 #iвdeа
OPENSSL_NO_FP_API


277 
RSA_іЪt_е
(
FILE
 *
е
, cЏ° 
RSA
 *
r
,
off£t
);

280 #iвdeа
OPENSSL_NO_BIO


281 
RSA_іЪt
(
BIO
 *
bp
, cЏ° 
RSA
 *
r
,
off£t
);

284 
i2d_RSA_NET
(cЏ° 
RSA
 *
a
, **
µ
,

285 (*
cb
)(*
buf
, 
Ћn
, cЏ° *
іom±
, 
vФify
),

286 
sgckey
);

287 
RSA
 *
d2i_RSA_NET
(RSA **
a
, cЏ° **
µ
, 
Ћngth
,

288 (*
cb
)(*
buf
, 
Ћn
, cЏ° *
іom±
, 
vФify
),

289 
sgckey
);

291 
i2d_NСs€≥_RSA
(cЏ° 
RSA
 *
a
, **
µ
,

292 (*
cb
)(*
buf
, 
Ћn
, cЏ° *
іom±
,

293 
vФify
));

294 
RSA
 *
d2i_NСs€≥_RSA
(RSA **
a
, cЏ° **
µ
, 
Ћngth
,

295 (*
cb
)(*
buf
, 
Ћn
, cЏ° *
іom±
,

296 
vФify
));

300 
RSA_sign
(
ty≥
, cЏ° *
m
, 
m_Ћngth
,

301 *
sigїt
, *
sigЋn
, 
RSA
 *
rІ
);

302 
RSA_vФify
(
ty≥
, cЏ° *
m
, 
m_Ћngth
,

303 *
sigbuf
, 
sigЋn
, 
RSA
 *
rІ
);

307 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

308 cЏ° *
m
, 
m_Ћngth
,

309 *
sigїt
, *
sigЋn
, 
RSA
 *
rІ
);

310 
RSA_vФify_ASN1_OCTET_STRING
(
ty≥
,

311 cЏ° *
m
, 
m_Ћngth
,

312 *
sigbuf
, 
sigЋn
, 
RSA
 *
rІ
);

314 
RSA_blЪdЪg_Џ
(
RSA
 *
rІ
, 
BN_CTX
 *
щx
);

315 
RSA_blЪdЪg_off
(
RSA
 *
rІ
);

316 
BN_BLINDING
 *
RSA_£tup_blЪdЪg
(
RSA
 *
rІ
, 
BN_CTX
 *
щx
);

318 
RSA_ЈddЪg_add_PKCS1_ty≥_1
(*
to
,
ОТ
,

319 cЏ° *
f
,
ж
);

320 
RSA_ЈddЪg_check_PKCS1_ty≥_1
(*
to
,
ОТ
,

321 cЏ° *
f
,
ж
,
rІ_Ћn
);

322 
RSA_ЈddЪg_add_PKCS1_ty≥_2
(*
to
,
ОТ
,

323 cЏ° *
f
,
ж
);

324 
RSA_ЈddЪg_check_PKCS1_ty≥_2
(*
to
,
ОТ
,

325 cЏ° *
f
,
ж
,
rІ_Ћn
);

326 
PKCS1_MGF1
(*
mask
, 
Ћn
,

327 cЏ° *
£ed
, 
£edЋn
, cЏ° 
EVP_MD
 *
dg°
);

328 
RSA_ЈddЪg_add_PKCS1_OAEP
(*
to
,
ОТ
,

329 cЏ° *
f
,
ж
,

330 cЏ° *
p
,
ґ
);

331 
RSA_ЈddЪg_check_PKCS1_OAEP
(*
to
,
ОТ
,

332 cЏ° *
f
,
ж
,
rІ_Ћn
,

333 cЏ° *
p
,
ґ
);

334 
RSA_ЈddЪg_add_SSLv23
(*
to
,
ОТ
,

335 cЏ° *
f
,
ж
);

336 
RSA_ЈddЪg_check_SSLv23
(*
to
,
ОТ
,

337 cЏ° *
f
,
ж
,
rІ_Ћn
);

338 
RSA_ЈddЪg_add_nЏe
(*
to
,
ОТ
,

339 cЏ° *
f
,
ж
);

340 
RSA_ЈddЪg_check_nЏe
(*
to
,
ОТ
,

341 cЏ° *
f
,
ж
,
rІ_Ћn
);

342 
RSA_ЈddЪg_add_X931
(*
to
,
ОТ
,

343 cЏ° *
f
,
ж
);

344 
RSA_ЈddЪg_check_X931
(*
to
,
ОТ
,

345 cЏ° *
f
,
ж
,
rІ_Ћn
);

346 
RSA_X931_hash_id
(
nid
);

348 
RSA_vФify_PKCS1_PSS
(
RSA
 *
rІ
, cЏ° *
mHash
,

349 cЏ° 
EVP_MD
 *
Hash
, cЏ° *
EM
, 
sLТ
);

350 
RSA_ЈddЪg_add_PKCS1_PSS
(
RSA
 *
rІ
, *
EM
,

351 cЏ° *
mHash
,

352 cЏ° 
EVP_MD
 *
Hash
, 
sLТ
);

354 
RSA_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

355 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

356 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
ђg
);

357 *
RSA_gС_ex_d©a
(cЏ° 
RSA
 *
r
, 
idx
);

359 
RSA
 *
RSAPublicKey_dup
(RSA *
rІ
);

360 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rІ
);

366 
ERR_lяd_RSA_°rЪgs
();

371 
	#RSA_F_MEMORY_LOCK
 100

	)

372 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

373 
	#RSA_F_RSA_CHECK_KEY
 123

	)

374 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

375 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

376 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

377 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

378 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

379 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

380 
	#RSA_F_RSA_NEW_METHOD
 106

	)

381 
	#RSA_F_RSA_NULL
 124

	)

382 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

383 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

384 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

385 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

386 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

387 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

388 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

389 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

390 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

391 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

392 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

393 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

394 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

395 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

396 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

397 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

398 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

399 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

400 
	#RSA_F_RSA_PRINT
 115

	)

401 
	#RSA_F_RSA_PRINT_FP
 116

	)

402 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

403 
	#RSA_F_RSA_SIGN
 117

	)

404 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

405 
	#RSA_F_RSA_VERIFY
 119

	)

406 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

407 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

410 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

411 
	#RSA_R_BAD_E_VALUE
 101

	)

412 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

413 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

414 
	#RSA_R_BAD_SIGNATURE
 104

	)

415 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

416 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

417 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

418 
	#RSA_R_DATA_TOO_LARGE
 109

	)

419 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

420 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

421 
	#RSA_R_DATA_TOO_SMALL
 111

	)

422 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

423 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

424 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

425 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

426 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

427 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

428 
	#RSA_R_INVALID_HEADER
 137

	)

429 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

430 
	#RSA_R_INVALID_PADDING
 138

	)

431 
	#RSA_R_INVALID_TRAILER
 139

	)

432 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

433 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

434 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

435 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

436 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

437 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

438 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

439 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

440 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

441 
	#RSA_R_P_NOT_PRIME
 128

	)

442 
	#RSA_R_Q_NOT_PRIME
 129

	)

443 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

444 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

445 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

446 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

447 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

448 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

449 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

450 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

452 #ifdeа 
__эlu•lus


	@/usr/include/openssl/sha.h

59 #iвdeа
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<ЁТs¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifdeа 
__эlu•lus


70 #iа
defЪed
(
OPENSSL_NO_SHA
и|| (defЪed(
OPENSSL_NO_SHA0
и&& defЪed(
OPENSSL_NO_SHA1
))

71 #Фr№ 
SHA
 
is
 
diІbЋd
.

74 #iа
defЪed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #iа
defЪed
(
OPENSSL_SYS_WIN16
и|| defЪed(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #Цiа
defЪed
(
OPENSSL_SYS_CRAY
и|| defЪed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4и

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #iвdeа
OPENSSL_NO_SHA0


110 
SHA_InЩ
(
SHA_CTX
 *
c
);

111 
SHA_Upd©e
(
SHA_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

112 
SHA_FЪЃ
(*
md
, 
SHA_CTX
 *
c
);

113 *
SHA
(cЏ° *
d
, 
size_t
 
n
, *
md
);

114 
SHA_Tњnsf№m
(
SHA_CTX
 *
c
, cЏ° *
d©a
);

116 #iвdeа
OPENSSL_NO_SHA1


117 
SHA1_InЩ
(
SHA_CTX
 *
c
);

118 
SHA1_Upd©e
(
SHA_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

119 
SHA1_FЪЃ
(*
md
, 
SHA_CTX
 *
c
);

120 *
SHA1
(cЏ° *
d
, 
size_t
 
n
, *
md
);

121 
SHA1_Tњnsf№m
(
SHA_CTX
 *
c
, cЏ° *
d©a
);

124 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4и

	)

127 
	#SHA224_DIGEST_LENGTH
 28

	)

128 
	#SHA256_DIGEST_LENGTH
 32

	)

130 
	sSHA256°©e_°


132 
SHA_LONG
 
h
[8];

133 
SHA_LONG
 
Nl
,
Nh
;

134 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

135 
num
,
md_Ћn
;

136 } 
	tSHA256_CTX
;

138 #iвdeа
OPENSSL_NO_SHA256


139 
SHA224_InЩ
(
SHA256_CTX
 *
c
);

140 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

141 
SHA224_FЪЃ
(*
md
, 
SHA256_CTX
 *
c
);

142 *
SHA224
(cЏ° *
d
, 
size_t
 
n
,*
md
);

143 
SHA256_InЩ
(
SHA256_CTX
 *
c
);

144 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

145 
SHA256_FЪЃ
(*
md
, 
SHA256_CTX
 *
c
);

146 *
SHA256
(cЏ° *
d
, 
size_t
 
n
,*
md
);

147 
SHA256_Tњnsf№m
(
SHA256_CTX
 *
c
, cЏ° *
d©a
);

150 
	#SHA384_DIGEST_LENGTH
 48

	)

151 
	#SHA512_DIGEST_LENGTH
 64

	)

153 #iвdeа
OPENSSL_NO_SHA512


159 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8и

	)

162 #iа(
defЪed
(
_WIN32
и|| defЪed(
_WIN64
)и&& !defЪed(
__MINGW32__
)

163 
	#SHA_LONG64
 
__Ъt64


	)

164 
	#U64
(
C
иC##
UI64


	)

165 #Цiа
defЪed
(
__ђch64__
)

166 
	#SHA_LONG64
 

	)

167 
	#U64
(
C
иC##
UL


	)

169 
	#SHA_LONG64
 

	)

170 
	#U64
(
C
иC##
ULL


	)

173 
	sSHA512°©e_°


175 
SHA_LONG64
 
h
[8];

176 
SHA_LONG64
 
Nl
,
Nh
;

178 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

179 
p
[
SHA512_CBLOCK
];

180 } 
u
;

181 
num
,
md_Ћn
;

182 } 
	tSHA512_CTX
;

185 #iвdeа
OPENSSL_NO_SHA512


186 
SHA384_InЩ
(
SHA512_CTX
 *
c
);

187 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

188 
SHA384_FЪЃ
(*
md
, 
SHA512_CTX
 *
c
);

189 *
SHA384
(cЏ° *
d
, 
size_t
 
n
,*
md
);

190 
SHA512_InЩ
(
SHA512_CTX
 *
c
);

191 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, cЏ° *
d©a
, 
size_t
 
Ћn
);

192 
SHA512_FЪЃ
(*
md
, 
SHA512_CTX
 *
c
);

193 *
SHA512
(cЏ° *
d
, 
size_t
 
n
,*
md
);

194 
SHA512_Tњnsf№m
(
SHA512_CTX
 *
c
, cЏ° *
d©a
);

197 #ifdeа 
__эlu•lus


	@/usr/include/openssl/x509_vfy.h

59 #iвdeа
HEADER_X509_H


60 
	~<ЁТs¶/x509.h
>

65 #iвdeа
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<ЁТs¶/ЁТs¶cЏf.h
>

69 #iвdeа
OPENSSL_NO_LHASH


70 
	~<ЁТs¶/lhash.h
>

72 
	~<ЁТs¶/bio.h
>

73 
	~<ЁТs¶/ьy±o.h
>

74 
	~<ЁТs¶/symhacks.h
>

76 #ifdeа 
__эlu•lus


81 
	sx509_hash_dЬ_°


83 
num_dЬs
;

84 **
dЬs
;

85 *
dЬs_ty≥
;

86 
num_dЬs_Ѓloыd
;

87 } 
	tX509_HASH_DIR_CTX
;

89 
	sx509_fЮe_°


91 
num_Јths
;

92 
num_Ѓloыd
;

93 **
Јths
;

94 *
Јth_ty≥
;

95 } 
	tX509_CERT_FILE_CTX
;

115 
	#X509_LU_RETRY
 -1

	)

116 
	#X509_LU_FAIL
 0

	)

117 
	#X509_LU_X509
 1

	)

118 
	#X509_LU_CRL
 2

	)

119 
	#X509_LU_PKEY
 3

	)

121 
	sx509_objeщ_°


124 
ty≥
;

126 *
±r
;

127 
X509
 *
x509
;

128 
X509_CRL
 *
ьl
;

129 
EVP_PKEY
 *
pkey
;

130 } 
d©a
;

131 } 
	tX509_OBJECT
;

133 
x509_lookup_°
 
	tX509_LOOKUP
;

135 
DECLARE_STACK_OF
(
X509_LOOKUP
)

136 
DECLARE_STACK_OF
(
X509_OBJECT
)

139 
	sx509_lookup_mСhod_°


141 cЏ° *
«me
;

142 (*
√w_Щem
)(
X509_LOOKUP
 *
щx
);

143 (*
дУ
)(
X509_LOOKUP
 *
щx
);

144 (*
ЪЩ
)(
X509_LOOKUP
 *
щx
);

145 (*
shutdown
)(
X509_LOOKUP
 *
щx
);

146 (*
щЊ
)(
X509_LOOKUP
 *
щx
,
cmd
,cЏ° *
ђgc
,
ђgl
,

147 **
їt
);

148 (*
gС_by_subjeщ
)(
X509_LOOKUP
 *
щx
,
ty≥
,
X509_NAME
 *
«me
,

149 
X509_OBJECT
 *
їt
);

150 (*
gС_by_issuФ_£rЯl
)(
X509_LOOKUP
 *
щx
,
ty≥
,
X509_NAME
 *
«me
,

151 
ASN1_INTEGER
 *
£rЯl
,
X509_OBJECT
 *
їt
);

152 (*
gС_by_fЪgФіЪt
)(
X509_LOOKUP
 *
щx
,
ty≥
,

153 *
byЛs
,
Ћn
,

154 
X509_OBJECT
 *
їt
);

155 (*
gС_by_ЃЯs
)(
X509_LOOKUP
 *
щx
,
ty≥
,*
°r
,
Ћn
,

156 
X509_OBJECT
 *
їt
);

157 } 
	tX509_LOOKUP_METHOD
;

164 
	sX509_VERIFY_PARAM_°


166 *
«me
;

167 
time_t
 
check_time
;

168 
Ъh_жags
;

169 
жags
;

170 
puљo£
;

171 
Мu°
;

172 
dХth
;

173 
STACK_OF
(
ASN1_OBJECT
и*
pёicЫs
;

174 } 
	tX509_VERIFY_PARAM
;

176 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

181 
	sx509_°№e_°


184 
€che
;

185 
STACK_OF
(
X509_OBJECT
и*
objs
;

188 
STACK_OF
(
X509_LOOKUP
и*
gС_ыє_mСhods
;

190 
X509_VERIFY_PARAM
 *
Јњm
;

193 (*
vФify
)(
X509_STORE_CTX
 *
щx
);

194 (*
vФify_cb
)(
ok
,
X509_STORE_CTX
 *
щx
);

195 (*
gС_issuФ
)(
X509
 **
issuФ
, 
X509_STORE_CTX
 *
щx
, X509 *
x
);

196 (*
check_issued
)(
X509_STORE_CTX
 *
щx
, 
X509
 *
x
, X509 *
issuФ
);

197 (*
check_їvo€tiЏ
)(
X509_STORE_CTX
 *
щx
);

198 (*
gС_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 **
ьl
, 
X509
 *
x
);

199 (*
check_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 *
ьl
);

200 (*
ыє_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 *
ьl
, 
X509
 *
x
);

201 (*
юЧnup
)(
X509_STORE_CTX
 *
щx
);

203 
CRYPTO_EX_DATA
 
ex_d©a
;

204 
їгїnыs
;

207 
X509_STORE_£t_dХth
(
X509_STORE
 *
°№e
, 
dХth
);

209 
	#X509_STORE_£t_vФify_cb_func
(
щx
,
func
и((щx)->
vФify_cb
=(func))

	)

210 
	#X509_STORE_£t_vФify_func
(
щx
,
func
и((щx)->
vФify
=(func))

	)

213 
	sx509_lookup_°


215 
ЪЩ
;

216 
skЭ
;

217 
X509_LOOKUP_METHOD
 *
mСhod
;

218 *
mСhod_d©a
;

220 
X509_STORE
 *
°№e_щx
;

226 
	sx509_°№e_щx_°


228 
X509_STORE
 *
щx
;

229 
cuЉТt_mСhod
;

232 
X509
 *
ыє
;

233 
STACK_OF
(
X509
и*
uЅru°ed
;

234 
STACK_OF
(
X509_CRL
и*
ьls
;

236 
X509_VERIFY_PARAM
 *
Јњm
;

237 *
ўhФ_щx
;

240 (*
vФify
)(
X509_STORE_CTX
 *
щx
);

241 (*
vФify_cb
)(
ok
,
X509_STORE_CTX
 *
щx
);

242 (*
gС_issuФ
)(
X509
 **
issuФ
, 
X509_STORE_CTX
 *
щx
, X509 *
x
);

243 (*
check_issued
)(
X509_STORE_CTX
 *
щx
, 
X509
 *
x
, X509 *
issuФ
);

244 (*
check_їvo€tiЏ
)(
X509_STORE_CTX
 *
щx
);

245 (*
gС_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 **
ьl
, 
X509
 *
x
);

246 (*
check_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 *
ьl
);

247 (*
ыє_ьl
)(
X509_STORE_CTX
 *
щx
, 
X509_CRL
 *
ьl
, 
X509
 *
x
);

248 (*
check_pёicy
)(
X509_STORE_CTX
 *
щx
);

249 (*
юЧnup
)(
X509_STORE_CTX
 *
щx
);

252 
vЃid
;

253 
ѕ°_uЅru°ed
;

254 
STACK_OF
(
X509
и*
chaЪ
;

255 
X509_POLICY_TREE
 *
МУ
;

257 
exґicЩ_pёicy
;

260 
Фr№_dХth
;

261 
Фr№
;

262 
X509
 *
cuЉТt_ыє
;

263 
X509
 *
cuЉТt_issuФ
;

264 
X509_CRL
 *
cuЉТt_ьl
;

266 
CRYPTO_EX_DATA
 
ex_d©a
;

269 
X509_STORE_CTX_£t_dХth
(
X509_STORE_CTX
 *
щx
, 
dХth
);

271 
	#X509_STORE_CTX_£t_≠p_d©a
(
щx
,
d©a
) \

272 
	`X509_STORE_CTX_£t_ex_d©a
(
щx
,0,
d©a
)

	)

273 
	#X509_STORE_CTX_gС_≠p_d©a
(
щx
) \

274 
	`X509_STORE_CTX_gС_ex_d©a
(
щx
,0)

	)

276 
	#X509_L_FILE_LOAD
 1

	)

277 
	#X509_L_ADD_DIR
 2

	)

279 
	#X509_LOOKUP_lяd_fЮe
(
x
,
«me
,
ty≥
) \

280 
	`X509_LOOKUP_щЊ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

282 
	#X509_LOOKUP_add_dЬ
(
x
,
«me
,
ty≥
) \

283 
	`X509_LOOKUP_щЊ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

285 
	#X509_V_OK
 0

	)

288 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

289 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

290 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

291 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

292 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

293 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

294 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

295 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

296 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

297 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

298 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

299 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

300 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

301 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

302 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

303 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

304 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

305 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

306 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

307 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

308 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

309 
	#X509_V_ERR_CERT_REVOKED
 23

	)

310 
	#X509_V_ERR_INVALID_CA
 24

	)

311 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

312 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

313 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

314 
	#X509_V_ERR_CERT_REJECTED
 28

	)

316 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

317 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

318 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

319 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

321 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

322 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

323 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

324 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

325 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

326 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

327 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

328 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

330 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

331 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

332 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

334 
	#X509_V_ERR_UNNESTED_RESOURCE
 44

	)

337 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

342 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

344 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

346 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

348 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

350 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

352 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

354 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

356 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

358 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

360 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

362 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

364 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

366 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

367 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

368 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

369 
	#X509_VP_FLAG_LOCKED
 0x8

	)

370 
	#X509_VP_FLAG_ONCE
 0x10

	)

373 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

374 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

375 | 
X509_V_FLAG_INHIBIT_ANY
 \

376 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

378 
X509_OBJECT_idx_by_subjeщ
(
STACK_OF
(
X509_OBJECT
и*
h
, 
ty≥
,

379 
X509_NAME
 *
«me
);

380 
X509_OBJECT
 *
X509_OBJECT_їМЫve_by_subjeщ
(
STACK_OF
(X509_OBJECTи*
h
,
ty≥
,
X509_NAME
 *
«me
);

381 
X509_OBJECT
 *
X509_OBJECT_їМЫve_m©ch
(
STACK_OF
(X509_OBJECTи*
h
, X509_OBJECT *
x
);

382 
X509_OBJECT_up_їf_couЅ
(
X509_OBJECT
 *
a
);

383 
X509_OBJECT_дУ_cЏЛЅs
(
X509_OBJECT
 *
a
);

384 
X509_STORE
 *
X509_STORE_√w
();

385 
X509_STORE_дУ
(
X509_STORE
 *
v
);

387 
X509_STORE_£t_жags
(
X509_STORE
 *
щx
, 
жags
);

388 
X509_STORE_£t_puљo£
(
X509_STORE
 *
щx
, 
puљo£
);

389 
X509_STORE_£t_Мu°
(
X509_STORE
 *
щx
, 
Мu°
);

390 
X509_STORE_£t1_Јњm
(
X509_STORE
 *
щx
, 
X509_VERIFY_PARAM
 *
pm
);

392 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

394 
X509_STORE_CTX_gС1_issuФ
(
X509
 **
issuФ
, 
X509_STORE_CTX
 *
щx
, X509 *
x
);

396 
X509_STORE_CTX_дУ
(
X509_STORE_CTX
 *
щx
);

397 
X509_STORE_CTX_ЪЩ
(
X509_STORE_CTX
 *
щx
, 
X509_STORE
 *
°№e
,

398 
X509
 *
x509
, 
STACK_OF
(X509и*
chaЪ
);

399 
X509_STORE_CTX_Мu°ed_°ack
(
X509_STORE_CTX
 *
щx
, 
STACK_OF
(
X509
и*
sk
);

400 
X509_STORE_CTX_юЧnup
(
X509_STORE_CTX
 *
щx
);

402 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

404 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dЬ
();

405 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fЮe
();

407 
X509_STORE_add_ыє
(
X509_STORE
 *
щx
, 
X509
 *
x
);

408 
X509_STORE_add_ьl
(
X509_STORE
 *
щx
, 
X509_CRL
 *
x
);

410 
X509_STORE_gС_by_subjeщ
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

411 
X509_OBJECT
 *
їt
);

413 
X509_LOOKUP_щЊ
(
X509_LOOKUP
 *
щx
, 
cmd
, cЏ° *
ђgc
,

414 
ђgl
, **
їt
);

416 #iвdeа
OPENSSL_NO_STDIO


417 
X509_lяd_ыє_fЮe
(
X509_LOOKUP
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

418 
X509_lяd_ьl_fЮe
(
X509_LOOKUP
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

419 
X509_lяd_ыє_ьl_fЮe
(
X509_LOOKUP
 *
щx
, cЏ° *
fЮe
, 
ty≥
);

423 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mСhod
);

424 
X509_LOOKUP_дУ
(
X509_LOOKUP
 *
щx
);

425 
X509_LOOKUP_ЪЩ
(
X509_LOOKUP
 *
щx
);

426 
X509_LOOKUP_by_subjeщ
(
X509_LOOKUP
 *
щx
, 
ty≥
, 
X509_NAME
 *
«me
,

427 
X509_OBJECT
 *
їt
);

428 
X509_LOOKUP_by_issuФ_£rЯl
(
X509_LOOKUP
 *
щx
, 
ty≥
, 
X509_NAME
 *
«me
,

429 
ASN1_INTEGER
 *
£rЯl
, 
X509_OBJECT
 *
їt
);

430 
X509_LOOKUP_by_fЪgФіЪt
(
X509_LOOKUP
 *
щx
, 
ty≥
,

431 *
byЛs
, 
Ћn
, 
X509_OBJECT
 *
їt
);

432 
X509_LOOKUP_by_ЃЯs
(
X509_LOOKUP
 *
щx
, 
ty≥
, *
°r
,

433 
Ћn
, 
X509_OBJECT
 *
їt
);

434 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
щx
);

436 #iвdeа
OPENSSL_NO_STDIO


437 
X509_STORE_lяd_lo€tiЏs
 (
X509_STORE
 *
щx
,

438 cЏ° *
fЮe
, cЏ° *
dЬ
);

439 
X509_STORE_£t_deзu…_Јths
(
X509_STORE
 *
щx
);

442 
X509_STORE_CTX_gС_ex_√w_Ъdex
(
ђgl
, *
ђgp
, 
CRYPTO_EX_√w
 *
√w_func
,

443 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_дУ
 *
дУ_func
);

444 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
щx
,
idx
,*
d©a
);

445 * 
X509_STORE_CTX_gС_ex_d©a
(
X509_STORE_CTX
 *
щx
,
idx
);

446 
X509_STORE_CTX_gС_Фr№
(
X509_STORE_CTX
 *
щx
);

447 
X509_STORE_CTX_£t_Фr№
(
X509_STORE_CTX
 *
щx
,
s
);

448 
X509_STORE_CTX_gС_Фr№_dХth
(
X509_STORE_CTX
 *
щx
);

449 
X509
 * 
X509_STORE_CTX_gС_cuЉТt_ыє
(
X509_STORE_CTX
 *
щx
);

450 
STACK_OF
(
X509
и*
X509_STORE_CTX_gС_chaЪ
(
X509_STORE_CTX
 *
щx
);

451 
STACK_OF
(
X509
и*
X509_STORE_CTX_gС1_chaЪ
(
X509_STORE_CTX
 *
щx
);

452 
X509_STORE_CTX_£t_ыє
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

453 
X509_STORE_CTX_£t_chaЪ
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
и*
sk
);

454 
X509_STORE_CTX_£t0_ьls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
и*
sk
);

455 
X509_STORE_CTX_£t_puљo£
(
X509_STORE_CTX
 *
щx
, 
puљo£
);

456 
X509_STORE_CTX_£t_Мu°
(
X509_STORE_CTX
 *
щx
, 
Мu°
);

457 
X509_STORE_CTX_puљo£_ЪhФЩ
(
X509_STORE_CTX
 *
щx
, 
def_puљo£
,

458 
puљo£
, 
Мu°
);

459 
X509_STORE_CTX_£t_жags
(
X509_STORE_CTX
 *
щx
, 
жags
);

460 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
щx
, 
жags
,

461 
time_t
 
t
);

462 
X509_STORE_CTX_£t_vФify_cb
(
X509_STORE_CTX
 *
щx
,

463 (*
vФify_cb
)(, 
X509_STORE_CTX
 *));

465 
X509_POLICY_TREE
 *
X509_STORE_CTX_gС0_pёicy_МУ
(
X509_STORE_CTX
 *
щx
);

466 
X509_STORE_CTX_gС_exґicЩ_pёicy
(
X509_STORE_CTX
 *
щx
);

468 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gС0_Јњm
(
X509_STORE_CTX
 *
щx
);

469 
X509_STORE_CTX_£t0_Јњm
(
X509_STORE_CTX
 *
щx
, 
X509_VERIFY_PARAM
 *
Јњm
);

470 
X509_STORE_CTX_£t_deзu…
(
X509_STORE_CTX
 *
щx
, cЏ° *
«me
);

474 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

475 
X509_VERIFY_PARAM_дУ
(
X509_VERIFY_PARAM
 *
Јњm
);

476 
X509_VERIFY_PARAM_ЪhФЩ
(
X509_VERIFY_PARAM
 *
to
,

477 cЏ° 
X509_VERIFY_PARAM
 *
дom
);

478 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

479 cЏ° 
X509_VERIFY_PARAM
 *
дom
);

480 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
Јњm
, cЏ° *
«me
);

481 
X509_VERIFY_PARAM_£t_жags
(
X509_VERIFY_PARAM
 *
Јњm
, 
жags
);

482 
X509_VERIFY_PARAM_юЧr_жags
(
X509_VERIFY_PARAM
 *
Јњm
,

483 
жags
);

484 
X509_VERIFY_PARAM_gС_жags
(
X509_VERIFY_PARAM
 *
Јњm
);

485 
X509_VERIFY_PARAM_£t_puљo£
(
X509_VERIFY_PARAM
 *
Јњm
, 
puљo£
);

486 
X509_VERIFY_PARAM_£t_Мu°
(
X509_VERIFY_PARAM
 *
Јњm
, 
Мu°
);

487 
X509_VERIFY_PARAM_£t_dХth
(
X509_VERIFY_PARAM
 *
Јњm
, 
dХth
);

488 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
Јњm
, 
time_t
 
t
);

489 
X509_VERIFY_PARAM_add0_pёicy
(
X509_VERIFY_PARAM
 *
Јњm
,

490 
ASN1_OBJECT
 *
pёicy
);

491 
X509_VERIFY_PARAM_£t1_pёicЫs
(
X509_VERIFY_PARAM
 *
Јњm
,

492 
STACK_OF
(
ASN1_OBJECT
и*
pёicЫs
);

493 
X509_VERIFY_PARAM_gС_dХth
(cЏ° 
X509_VERIFY_PARAM
 *
Јњm
);

495 
X509_VERIFY_PARAM_add0_ПbЋ
(
X509_VERIFY_PARAM
 *
Јњm
);

496 cЏ° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(cЏ° *
«me
);

497 
X509_VERIFY_PARAM_ПbЋ_юЧnup
();

499 
X509_pёicy_check
(
X509_POLICY_TREE
 **
±їe
, *
≥xґicЩ_pёicy
,

500 
STACK_OF
(
X509
и*
ыєs
,

501 
STACK_OF
(
ASN1_OBJECT
и*
pёicy_oids
,

502 
жags
);

504 
X509_pёicy_МУ_дУ
(
X509_POLICY_TREE
 *
МУ
);

506 
X509_pёicy_МУ_ЋvЦ_couЅ
(cЏ° 
X509_POLICY_TREE
 *
МУ
);

507 
X509_POLICY_LEVEL
 *

508 
X509_pёicy_МУ_gС0_ЋvЦ
(cЏ° 
X509_POLICY_TREE
 *
МУ
, 
i
);

510 
STACK_OF
(
X509_POLICY_NODE
) *

511 
X509_pёicy_МУ_gС0_pёicЫs
(cЏ° 
X509_POLICY_TREE
 *
МУ
);

513 
STACK_OF
(
X509_POLICY_NODE
) *

514 
X509_pёicy_МУ_gС0_u£r_pёicЫs
(cЏ° 
X509_POLICY_TREE
 *
МУ
);

516 
X509_pёicy_ЋvЦ_node_couЅ
(
X509_POLICY_LEVEL
 *
ЋvЦ
);

518 
X509_POLICY_NODE
 *
X509_pёicy_ЋvЦ_gС0_node
(
X509_POLICY_LEVEL
 *
ЋvЦ
, 
i
);

520 cЏ° 
ASN1_OBJECT
 *
X509_pёicy_node_gС0_pёicy
(cЏ° 
X509_POLICY_NODE
 *
node
);

522 
STACK_OF
(
POLICYQUALINFO
) *

523 
X509_pёicy_node_gС0_quЃifЫrs
(cЏ° 
X509_POLICY_NODE
 *
node
);

524 cЏ° 
X509_POLICY_NODE
 *

525 
X509_pёicy_node_gС0_ЈїЅ
(cЏ° 
X509_POLICY_NODE
 *
node
);

527 #ifdeа 
__эlu•lus


	@/usr/include/sys/cdefs.h

20 #iвdef 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #iвdeа
_FEATURES_H


25 
	~<г©uїs.h
>

31 #iа
defЪed
 
__GNUC__
 && !defЪed 
__STDC__


36 #undeа
__P


37 #undeа
__PMT


39 #ifdeа
__GNUC__


46 #iа!
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©МibuЛ__
 ((
__nўhrow__
))

	)

48 
	#__NTH
(
fщ
и
	`__©МibuЛ__
 ((
__nўhrow__
)и
	)
fct

50 #iа
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
fщ
иfщ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
fщ
и
	)
fct

61 
	#__ЪlЪe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
fщ
и
	)
fct

66 
	#__cЏ°
 cЏ°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vё©Юe
 vё©Юe

	)

74 
	#__P
(
ђgs
и
	)
args

75 
	#__PMT
(
ђgs
и
	)
args

80 
	#__CONCAT
(
x
,
y
иx ## 
	)
y

81 
	#__STRING
(
x
и#x

	)

84 
	#__±r_t
 *

	)

85 
	#__lЏg_doubЋ_t
 

	)

89 #ifdef 
__эlu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #iа
defЪed
 
__эlu•lus
 && defЪed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•aы
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
и
usЪg
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•aы
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
и
usЪg
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #iвdeа
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvЃue


	)

132 
	#__bos
(
±r
и
	`__buЮtЪ_objeщ_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
и
	`__buЮtЪ_objeщ_size
 (±r, 0)

	)

135 #iа
__GNUC_PREREQ
 (4,3)

136 
	#__wђndeю
(
«me
, 
msg
) \

137 
	`«me
 (и
	`__©МibuЛ__
((
	`__wђnЪg__
 (
msg
)))

	)

138 
	#__wђ«Йr
(
msg
и
	`__©МibuЛ__
((
	`__wђnЪg__
 (msg)))

	)

139 
	#__Фr№deю
(
«me
, 
msg
) \

140 
	`«me
 (и
	`__©МibuЛ__
((
	`__Фr№__
 (
msg
)))

	)

142 
	#__wђndeю
(
«me
, 
msg
и
	`«me
 ()

	)

143 
	#__wђ«Йr
(
msg
)

	)

144 
	#__Фr№deю
(
«me
, 
msg
и
	`«me
 ()

	)

148 #iа
__GNUC_PREREQ
 (2,97)

150 
	#__жexђr
 []

	)

152 #ifdeа
__GNUC__


153 
	#__жexђr
 [0]

	)

155 #iа
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__жexђr
 []

	)

159 
	#__жexђr
 [1]

	)

175 #iа
defЪed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
іўo
, 
ЃЯs
и«mРіўЎ
	`__asm__
 (
	`__ASMNAME
 (#ЃЯs))

	)

178 #ifdeа
__эlu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
іўo
, 
ЃЯs
) \

180 
«me
 
іўo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#ЃЯs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
іўo
, 
ЃЯs
) \

183 
«me
 
іўo
 
	`__asm__
 (
	`__ASMNAME
 (#ЃЯs)и
__THROW


	)

185 
	#__ASMNAME
(
ъame
и
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
іefix
, 
ъame
и
	`__STRING
 (іefixи
	)
cname

199 #iа!
defЪed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©МibuЛ__
(
xyz
и

	)

206 #iа
__GNUC_PREREQ
 (2,96)

207 
	#__©МibuЛ_mЃloc__
 
	`__©МibuЛ__
 ((
__mЃloc__
))

	)

209 
	#__©МibuЛ_mЃloc__


	)

215 #iа
__GNUC_PREREQ
 (2,96)

216 
	#__©МibuЛ_puї__
 
	`__©МibuЛ__
 ((
__puї__
))

	)

218 
	#__©МibuЛ_puї__


	)

224 #iа
__GNUC_PREREQ
 (3,1)

225 
	#__©МibuЛ_u£d__
 
	`__©МibuЛ__
 ((
__u£d__
))

	)

226 
	#__©МibuЛ_noЪlЪe__
 
	`__©МibuЛ__
 ((
__noЪlЪe__
))

	)

228 
	#__©МibuЛ_u£d__
 
	`__©МibuЛ__
 ((
__unu£d__
))

	)

229 
	#__©МibuЛ_noЪlЪe__


	)

233 #iа
__GNUC_PREREQ
 (3,2)

234 
	#__©МibuЛ_dХї€Лd__
 
	`__©МibuЛ__
 ((
__dХї€Лd__
))

	)

236 
	#__©МibuЛ_dХї€Лd__


	)

245 #iа
__GNUC_PREREQ
 (2,8)

246 
	#__©МibuЛ_f№m©_ђg__
(
x
и
	`__©МibuЛ__
 ((
	`__f№m©_ђg__
 (x)))

	)

248 
	#__©МibuЛ_f№m©_ђg__
(
x
и

	)

255 #iа
__GNUC_PREREQ
 (2,97)

256 
	#__©МibuЛ_f№m©_°rfmЏ__
(
a
,
b
) \

257 
	`__©МibuЛ__
 ((
	`__f№m©__
 (
__°rfmЏ__
, 
a
, 
b
)))

	)

259 
	#__©МibuЛ_f№m©_°rfmЏ__
(
a
,
b
и

	)

264 #iа
__GNUC_PREREQ
 (3,3)

265 
	#__nЏnuќ
(
Јњms
и
	`__©МibuЛ__
 ((
__nЏnuќ__
Еђams))

	)

267 
	#__nЏnuќ
(
Јњms
)

	)

272 #iа
__GNUC_PREREQ
 (3,4)

273 
	#__©МibuЛ_wђn_unu£d_їsu…__
 \

274 
	`__©МibuЛ__
 ((
__wђn_unu£d_їsu…__
))

	)

275 #iа
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©МibuЛ_wђn_unu£d_їsu…__


	)

279 
	#__©МibuЛ_wђn_unu£d_їsu…__


	)

281 #iвdeа
__wur


282 
	#__wur


	)

286 #iа
__GNUC_PREREQ
 (3,2)

287 
	#__Ѓways_ЪlЪe
 
__ЪlЪe
 
	`__©МibuЛ__
 ((
__Ѓways_ЪlЪe__
))

	)

289 
	#__Ѓways_ЪlЪe
 
__ЪlЪe


	)

294 #iа!
defЪed
 
__эlu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #iа
defЪed
 
__GNUC_STDC_INLINE__
 || defЪed 
__эlu•lus


296 
	#__exЛЇ_ЪlЪe
 
__ЪlЪe
 
	`__©МibuЛ__
 ((
__gnu_ЪlЪe__
))

	)

297 #iа
__GNUC_PREREQ
 (4,3)

298 
	#__exЛЇ_Ѓways_ЪlЪe
 \

299 
__Ѓways_ЪlЪe
 
	`__©МibuЛ__
 ((
__gnu_ЪlЪe__
, 
__ђtificЯl__
))

	)

301 
	#__exЛЇ_Ѓways_ЪlЪe
 \

302 
__Ѓways_ЪlЪe
 
	`__©МibuЛ__
 ((
__gnu_ЪlЪe__
))

	)

305 
	#__exЛЇ_ЪlЪe
 
__ЪlЪe


	)

306 #iа
__GNUC_PREREQ
 (4,3)

307 
	#__exЛЇ_Ѓways_ЪlЪe
 \

308 
__Ѓways_ЪlЪe
 
	`__©МibuЛ__
 ((
__ђtificЯl__
))

	)

310 
	#__exЛЇ_Ѓways_ЪlЪe
 
__Ѓways_ЪlЪe


	)

317 #iа
__GNUC_PREREQ
 (4,3)

318 
	#__va_ђg_Јck
(и
	`__buЮtЪ_va_ђg_Јck
 ()

	)

319 
	#__va_ђg_Јck_Ћn
(и
	`__buЮtЪ_va_ђg_Јck_Ћn
 ()

	)

326 #iа!
__GNUC_PREREQ
 (2,8)

327 
	#__exЛnsiЏ__


	)

331 #iа!
__GNUC_PREREQ
 (2,92)

332 
	#__ї°riщ


	)

338 #iа
__GNUC_PREREQ
 (3,1и&& !
defЪed
 
__GNUG__


339 
	#__ї°riщ_ђr
 
__ї°riщ


	)

341 #ifdeа
__GNUC__


342 
	#__ї°riщ_ђr


	)

344 #iа
defЪed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ї°riщ_ђr
 
ї°riщ


	)

348 
	#__ї°riщ_ђr


	)

353 
	~<bЩs/w№dsize.h
>

355 #iа
defЪed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defЪed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifdeа
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
іўo
, 
ЃЯs
и
	`__REDIRECT
 («me,Еrўo,ЗlЯs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
іўo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
іўo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
іўo
, 
ЃЯs
и
	`__REDIRECT_NTH
 («me,Еrўo,ЗlЯs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
іўo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
іўo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
ЃЯs
) \

365 
	`__ty≥of
 (
«me
и«mР
	`__asm
 (
	`__ASMNAME
 (#ЃЯs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
и«mР
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
іўo
, 
ЃЯs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
іўo
, 
__∆dbl_
##
ЃЯs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
іўo
, 
ЃЯs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
іўo
, 
__∆dbl_
##
ЃЯs
)

	)

374 #iа!
defЪed
 
__LDBL_COMPAT
 || !defЪed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
іўo
, 
ЃЯs
и«mР
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
іўo
и«mР
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
іўo
, 
ЃЯs
и«mРіўЎ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
іўo
и«mРіўЎ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifdeа
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
іўo
, 
ЃЯs
и
	`__REDIRECT
 («me,Еrўo,ЗlЯs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
іўo
, 
ЃЯs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
іўo
, 
ЃЯs
)

	)

	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifdeа
VMS


9 
	~<unixio.h
>

11 #iвdeа
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/asm/errno.h

1 
	~<asm-gТФic/ФЇo.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gТФic/ioщl.h
>

	@/usr/include/asm/sockios.h

1 #iвdeа
_ASM_X86_SOCKIOS_H


2 
	#_ASM_X86_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/libc-lock.h

20 #iвdeа
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hїad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifdeа
_LIBC


35 
	~<lowЋvЦlock.h
>

36 
	~<Оs.h
>

37 
	~<±hїad-funщiЏs.h
>

41 #iа
defЪed
 
_LIBC
 || defЪed 
_IO_MTSAFE_IO


42 #iа(
defЪed
 
NOT_IN_libc
 && !defЪed 
IS_IN_lib±hїad
и|| !defЪed 
_LIBC


43 
±hїad_muЛx_t
 
	t__libc_lock_t
;

44 °ruщ { 
±hїad_muЛx_t
 
	mmuЛx
; } 
	t__libc_lock_їcursive_t
;

46 
	t__libc_lock_t
;

47 °ruщ { 
	mlock
; 
	mъt
; *
	mow√r
; } 
	t__libc_lock_їcursive_t
;

49 °ruщ { 
±hїad_muЛx_t
 
	mmuЛx
; } 
	t__єld_lock_їcursive_t
;

50 #ifdeа
__USE_UNIX98


51 
±hїad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_Ёaque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_Ёaque__
 
	t__libc_lock_t
;

57 
__libc_lock_їcursive_Ёaque__
 
	t__libc_lock_їcursive_t
;

58 
__libc_rwlock_Ёaque__
 
	t__libc_rwlock_t
;

62 
±hїad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_defЪe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_defЪe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_defЪe_їcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_їcursive_t
 
NAME
;

	)

77 
	#__єld_lock_defЪe_їcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__єld_lock_їcursive_t
 
NAME
;

	)

89 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

90 #iа
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_defЪe_ЪЩЯlized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_defЪe_ЪЩЯlized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #iа
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_defЪe_ЪЩЯlized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_defЪe_ЪЩЯlized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_defЪe_ЪЩЯlized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

113 #iа
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_defЪe_ЪЩЯlized_їcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_їcursive_t
 
NAME
;

	)

117 
	#__libc_lock_defЪe_ЪЩЯlized_їcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_їcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_defЪe_ЪЩЯlized_їcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_їcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__єld_lock_defЪe_ЪЩЯlized_їcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__єld_lock_їcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__єld_lock_ЪЩЯlize
(
NAME
) \

135 (и((
NAME
ир(
__єld_lock_їcursive_t
и
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifdeа
__PIC__


143 
	#__libc_maybe_€ќ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exЛnsiЏ__
 ({ 
	`__ty≥of
 (
FUNC
и*
_в
 = (FUNC); \

145 
_в
 !р
NULL
 ? (*_ви
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_€ќ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !р
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #iа
defЪed
 
SHARED
 && !defЪed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
и
__libc_±hїad_funщiЏs_ЪЩ


	)

154 
	#__libc_±f_€ќ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hїad_funщiЏs_ЪЩ
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
и: 
ELSE
)

	)

156 
	#__libc_±f_€ќ_Ѓways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
и(NAME !р
NULL
)

	)

160 
	#__libc_±f_€ќ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_€ќ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_€ќ_Ѓways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

170 
	#__libc_lock_ЪЩ
(
NAME
и((NAMEир
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_ЪЩ
(
NAME
) \

173 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_ЪЩ
, (&(
NAME
), 
NULL
), 0)

	)

175 #iа
defЪed
 
SHARED
 && !defЪed 
NOT_IN_libc


178 
	#__libc_rwlock_ЪЩ
(
NAME
) \

179 (
	`__buЮtЪ_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_ЪЩ
(
NAME
) \

182 
	`__libc_maybe_€ќ
 (
__±hїad_rwlock_ЪЩ
, (&(
NAME
), 
NULL
), 0)

	)

186 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

187 
	#__libc_lock_ЪЩ_їcursive
(
NAME
) \

188 ((
NAME
ир(
__libc_lock_їcursive_t
и
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_ЪЩ_їcursive
(
NAME
) \

192 iа(
__±hїad_muЛx_ЪЩ
 !р
NULL
) \

194 
±hїad_muЛx©М_t
 
__©М
; \

195 
	`__±hїad_muЛx©М_ЪЩ
 (&
__©М
); \

196 
	`__±hїad_muЛx©М_£Йy≥
 (&
__©М
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hїad_muЛx_ЪЩ
 (&(
NAME
).
muЛx
, &
__©М
); \

198 
	`__±hїad_muЛx©М_de°roy
 (&
__©М
); \

200 } 0)

	)

203 
	#__єld_lock_ЪЩ_їcursive
(
NAME
) \

205 iа(
__±hїad_muЛx_ЪЩ
 !р
NULL
) \

207 
±hїad_muЛx©М_t
 
__©М
; \

208 
	`__±hїad_muЛx©М_ЪЩ
 (&
__©М
); \

209 
	`__±hїad_muЛx©М_£Йy≥
 (&
__©М
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hїad_muЛx_ЪЩ
 (&(
NAME
).
muЛx
, &
__©М
); \

211 
	`__±hїad_muЛx©М_de°roy
 (&
__©М
); \

213 } 0)

	)

218 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

219 
	#__libc_lock_fЪi
(
NAME
и((и0)

	)

221 
	#__libc_lock_fЪi
(
NAME
) \

222 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_de°roy
, (&(
NAME
)), 0)

	)

224 #iа
defЪed
 
SHARED
 && !defЪed 
NOT_IN_libc


225 
	#__libc_rwlock_fЪi
(
NAME
и((и0)

	)

227 
	#__libc_rwlock_fЪi
(
NAME
) \

228 
	`__libc_maybe_€ќ
 (
__±hїad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

233 
	#__libc_lock_fЪi_їcursive
(
NAME
и((и0)

	)

235 
	#__libc_lock_fЪi_їcursive
(
NAME
) \

236 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_de°roy
, (&(
NAME
)), 0)

	)

240 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`ќl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_€ќ
 (
__±hїad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wЊock
(
NAME
) \

250 
	`__libc_±f_€ќ
 (
__±hїad_rwlock_wЊock
, (&(
NAME
)), 0)

	)

253 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

254 
	#__libc_lock_lock_їcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 iа((
NAME
).
ow√r
 !р
£lf
) \

259 
	`ќl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
ъt
; \

263 } 0)

	)

265 
	#__libc_lock_lock_їcursive
(
NAME
) \

266 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_lock
, (&(
NAME
).
muЛx
), 0)

	)

270 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

271 
	#__libc_lock_Мylock
(
NAME
) \

272 
	`ќl_Мylock
 (
NAME
)

	)

274 
	#__libc_lock_Мylock
(
NAME
) \

275 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_Мylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_Мyrdlock
(
NAME
) \

278 
	`__libc_maybe_€ќ
 (
__±hїad_rwlock_Мyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_МywЊock
(
NAME
) \

280 
	`__libc_maybe_€ќ
 (
__±hїad_rwlock_МywЊock
, (&(
NAME
)), 0)

	)

283 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

284 
	#__libc_lock_Мylock_їcursive
(
NAME
) \

286 
їsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 iа((
NAME
).
ow√r
 !р
£lf
) \

290 iа(
	`ќl_Мylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
ъt
 = 1; \

296 
їsu…
 = 
EBUSY
; \

299 ++(
NAME
).
ъt
; \

300 
їsu…
; \

301 })

	)

303 
	#__libc_lock_Мylock_їcursive
(
NAME
) \

304 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_Мylock
, (&(
NAME
)), 0)

	)

307 
	#__єld_lock_Мylock_їcursive
(
NAME
) \

308 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_Мylock
, (&(
NAME
).
muЛx
), 0)

	)

311 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`ќl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_€ќ
 (
__±hїad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #iа
defЪed
 
_LIBC
 && (!defЪed 
NOT_IN_libc
 || defЪed 
IS_IN_lib±hїad
)

324 
	#__libc_lock_u∆ock_їcursive
(
NAME
) \

326 iа(--(
NAME
).
ъt
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`ќl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_їcursive
(
NAME
) \

334 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_u∆ock
, (&(
NAME
)), 0)

	)

337 #iа
defЪed
 
_LIBC
 && defЪed 
SHARED


338 
	#__єld_lock_deзu…_lock_їcursive
(
lock
) \

339 ++((
±hїad_muЛx_t
 *)(
lock
))->
__d©a
.
__couЅ
;

	)

341 
	#__єld_lock_deзu…_u∆ock_їcursive
(
lock
) \

342 --((
±hїad_muЛx_t
 *)(
lock
))->
__d©a
.
__couЅ
;

	)

344 
	#__єld_lock_lock_їcursive
(
NAME
) \

345 
	`GL
(
dl_єld_lock_їcursive
и(&(
NAME
).
muЛx
)

	)

347 
	#__єld_lock_u∆ock_їcursive
(
NAME
) \

348 
	`GL
(
dl_єld_u∆ock_їcursive
и(&(
NAME
).
muЛx
)

	)

350 
	#__єld_lock_lock_їcursive
(
NAME
) \

351 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_lock
, (&(
NAME
).
muЛx
), 0)

	)

353 
	#__єld_lock_u∆ock_їcursive
(
NAME
) \

354 
	`__libc_maybe_€ќ
 (
__±hїad_muЛx_u∆ock
, (&(
NAME
).
muЛx
), 0)

	)

358 #iа
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_Џы_defЪe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hїad_Џы_t
 
NAME


	)

364 
	#__libc_Џы_defЪe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hїad_Џы_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_Џы
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 iа(
	`PTFAVAIL
 (
__±hїad_Џы
)) \

372 
	`__libc_±f_€ќ_Ѓways
 (
__±hїad_Џы
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 iа((
ONCE_CONTROL
и=р
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hїad_юЧnup_push
 (
_±hїad_юЧnup_bufгr
 *
bufгr
,

386 (*
routЪe
и(*), *
ђg
);

387 
	`_±hїad_юЧnup_pЁ
 (
_±hїad_юЧnup_bufгr
 *
bufгr
,

388 
execuЛ
);

389 
	`_±hїad_юЧnup_push_deгr
 (
_±hїad_юЧnup_bufгr
 *
bufгr
,

390 (*
routЪe
и(*), *
ђg
);

391 
	`_±hїad_юЧnup_pЁ_ї°№e
 (
_±hїad_юЧnup_bufгr
 *
bufгr
,

392 
execuЛ
);

395 
	#__libc_юЧnup_їgiЏ_°ђt
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hїad_юЧnup_bufгr
 
_bufгr
; \

397 
_avaЮ
; \

398 iа(
DOIT
) { \

399 
_avaЮ
 = 
	`PTFAVAIL
 (
_±hїad_юЧnup_push_deгr
); \

400 iа(
_avaЮ
) { \

401 
	`__libc_±f_€ќ_Ѓways
 (
_±hїad_юЧnup_push_deгr
, (&
_bufгr
, 
FCT
, \

402 
ARG
)); \

404 
_bufгr
.
__routЪe
 = (
FCT
); \

405 
_bufгr
.
__ђg
 = (
ARG
); \

408 
_avaЮ
 = 0; \

409 }

	)

412 
	#__libc_юЧnup_їgiЏ_Тd
(
DOIT
) \

413 iа(
_avaЮ
) { \

414 
	`__libc_±f_€ќ_Ѓways
 (
_±hїad_юЧnup_pЁ_ї°№e
, (&
_bufгr
, 
DOIT
));\

415 } iа(
DOIT
) \

416 
_bufгr
.
	`__routЪe
 (_bufгr.
__ђg
); \

417 
	}

	)
}

420 
	#__libc_юЧnup_Тd
(
DOIT
) \

421 iа(
_avaЮ
) { \

422 
	`__libc_±f_€ќ_Ѓways
 (
_±hїad_юЧnup_pЁ_ї°№e
, (&
_bufгr
, 
DOIT
));\

423 } iа(
DOIT
) \

424 
_bufгr
.
	`__routЪe
 (_bufгr.
__ђg
)

	)

428 
__exЛЇ_ЪlЪe
 

429 
	$__libc_юЧnup_routЪe
 (
__±hїad_юЧnup_дame
 *
f
)

431 iа(
f
->
__do_Щ
)

432 
f
->
	`__€nыl_routЪe
 (f->
__€nыl_ђg
);

433 
	}
}

435 
	#__libc_юЧnup_push
(
fщ
, 
ђg
) \

437 
__±hїad_юЧnup_дame
 
__юдame
 \

438 
	`__©МibuЛ__
 ((
	`__юЧnup__
 (
__libc_юЧnup_routЪe
))) \

439 р{ .
__€nыl_routЪe
 = (
fщ
), .
__€nыl_ђg
 = (
ђg
), \

440 .
__do_Щ
 = 1 };

	)

442 
	#__libc_юЧnup_pЁ
(
execuЛ
) \

443 
__юдame
.
__do_Щ
 = (
execuЛ
); \

444 } 0)

	)

448 
	#__libc_key_ьЧЛ
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_€ќ
 (
__±hїad_key_ьЧЛ
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gС•ecific
(
KEY
) \

453 
	`__libc_±f_€ќ
 (
__±hїad_gС•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_€ќ
 (
__±hїad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f№k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__їgi°Ф_©f№k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__їgi°Ф_©f№k
 ((*
__іХђe
) (),

466 (*
__ЈїЅ
) (),

467 (*
__chЮd
) (),

468 *
__dso_h™dЋ
);

473 
	`__±hїad_muЛx_ЪЩ
 (
±hїad_muЛx_t
 *
__muЛx
,

474 
__cЏ°
 
±hїad_muЛx©М_t
 *
__muЛx_©М
);

476 
	`__±hїad_muЛx_de°roy
 (
±hїad_muЛx_t
 *
__muЛx
);

478 
	`__±hїad_muЛx_Мylock
 (
±hїad_muЛx_t
 *
__muЛx
);

480 
	`__±hїad_muЛx_lock
 (
±hїad_muЛx_t
 *
__muЛx
);

482 
	`__±hїad_muЛx_u∆ock
 (
±hїad_muЛx_t
 *
__muЛx
);

484 
	`__±hїad_muЛx©М_ЪЩ
 (
±hїad_muЛx©М_t
 *
__©М
);

486 
	`__±hїad_muЛx©М_de°roy
 (
±hїad_muЛx©М_t
 *
__©М
);

488 
	`__±hїad_muЛx©М_£Йy≥
 (
±hїad_muЛx©М_t
 *
__©М
,

489 
__kЪd
);

491 #ifdeа
__USE_UNIX98


492 
	`__±hїad_rwlock_ЪЩ
 (
±hїad_rwlock_t
 *
__rwlock
,

493 
__cЏ°
 
±hїad_rwlock©М_t
 *
__©М
);

495 
	`__±hїad_rwlock_de°roy
 (
±hїad_rwlock_t
 *
__rwlock
);

497 
	`__±hїad_rwlock_rdlock
 (
±hїad_rwlock_t
 *
__rwlock
);

499 
	`__±hїad_rwlock_Мyrdlock
 (
±hїad_rwlock_t
 *
__rwlock
);

501 
	`__±hїad_rwlock_wЊock
 (
±hїad_rwlock_t
 *
__rwlock
);

503 
	`__±hїad_rwlock_МywЊock
 (
±hїad_rwlock_t
 *
__rwlock
);

505 
	`__±hїad_rwlock_u∆ock
 (
±hїad_rwlock_t
 *
__rwlock
);

508 
	`__±hїad_key_ьЧЛ
 (
±hїad_key_t
 *
__key
,

509 (*
__de°r_funщiЏ
) (*));

511 
	`__±hїad_£t•ecific
 (
±hїad_key_t
 
__key
,

512 
__cЏ°
 *
__poЪЛr
);

514 *
	`__±hїad_gС•ecific
 (
±hїad_key_t
 
__key
);

516 
	`__±hїad_Џы
 (
±hїad_Џы_t
 *
__Џы_cЏМё
,

517 (*
__ЪЩ_routЪe
) ());

519 
	`__±hїad_©f№k
 ((*
__іХђe
) (),

520 (*
__ЈїЅ
) (),

521 (*
__chЮd
) ());

527 #iвdeа
__NO_WEAK_PTHREAD_ALIASES


528 #ifdeа
wЧk_exЛЇ


529 #iа
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
и
	)
sym

534 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx_ЪЩ
))

535 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx_de°roy
))

536 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx_lock
))

537 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx_Мylock
))

538 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx_u∆ock
))

539 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx©М_ЪЩ
))

540 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx©М_de°roy
))

541 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_muЛx©М_£Йy≥
))

542 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_ЪЩ
))

543 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_de°roy
))

544 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_rdlock
))

545 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_Мyrdlock
))

546 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_wЊock
))

547 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_МywЊock
))

548 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_rwlock_u∆ock
))

549 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_key_ьЧЛ
))

550 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_£t•ecific
))

551 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_gС•ecific
))

552 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
__±hїad_Џы
))

553 
	$wЧk_exЛЇ
 (
__±hїad_ЪЩЯlize
)

554 
	$wЧk_exЛЇ
 (
__±hїad_©f№k
)

555 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
_±hїad_юЧnup_push_deгr
))

556 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
_±hїad_юЧnup_pЁ_ї°№e
))

557 
	`wЧk_exЛЇ
 (
	$BP_SYM
 (
±hїad_£t€nыl°©e
))

559 #іagm®
wЧk
 
__±hїad_muЛx_ЪЩ


560 #іagm®
wЧk
 
__±hїad_muЛx_de°roy


561 #іagm®
wЧk
 
__±hїad_muЛx_lock


562 #іagm®
wЧk
 
__±hїad_muЛx_Мylock


563 #іagm®
wЧk
 
__±hїad_muЛx_u∆ock


564 #іagm®
wЧk
 
__±hїad_muЛx©М_ЪЩ


565 #іagm®
wЧk
 
__±hїad_muЛx©М_de°roy


566 #іagm®
wЧk
 
__±hїad_muЛx©М_£Йy≥


567 #іagm®
wЧk
 
__±hїad_rwlock_de°roy


568 #іagm®
wЧk
 
__±hїad_rwlock_rdlock


569 #іagm®
wЧk
 
__±hїad_rwlock_Мyrdlock


570 #іagm®
wЧk
 
__±hїad_rwlock_wЊock


571 #іagm®
wЧk
 
__±hїad_rwlock_МywЊock


572 #іagm®
wЧk
 
__±hїad_rwlock_u∆ock


573 #іagm®
wЧk
 
__±hїad_key_ьЧЛ


574 #іagm®
wЧk
 
__±hїad_£t•ecific


575 #іagm®
wЧk
 
__±hїad_gС•ecific


576 #іagm®
wЧk
 
__±hїad_Џы


577 #іagm®
wЧk
 
__±hїad_ЪЩЯlize


578 #іagm®
wЧk
 
__±hїad_©f№k


579 #іagm®
wЧk
 
_±hїad_юЧnup_push_deгr


580 #іagm®
wЧk
 
_±hїad_юЧnup_pЁ_ї°№e


581 #іagm®
wЧk
 
±hїad_£t€nыl°©e


	@/usr/include/gconv.h

23 #iвdeа
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<г©uїs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wЪt_t


	)

29 
	~<wchђ.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wchђ_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wchђ_t
и0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gcЏv_°Х
;

65 
	g__gcЏv_°Х_d©a
;

66 
	g__gcЏv_lяded_objeщ
;

67 
	g__gcЏv_М™s_d©a
;

71 (*
	t__gcЏv_fщ
и(
	t__gcЏv_°Х
 *, 
	t__gcЏv_°Х_d©a
 *,

72 
	t__cЏ°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wЪt_t
 (*
	t__gcЏv_btowc_fщ
и(
	t__gcЏv_°Х
 *, );

79 (*
	t__gcЏv_ЪЩ_fщ
и(
	t__gcЏv_°Х
 *);

80 (*
	t__gcЏv_Тd_fщ
и(
	t__gcЏv_°Х
 *);

84 (*
	t__gcЏv_М™s_fщ
и(
	t__gcЏv_°Х
 *,

85 
	t__gcЏv_°Х_d©a
 *, *,

86 
	t__cЏ°
 *,

87 
	t__cЏ°
 **,

88 
	t__cЏ°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gcЏv_М™s_cЏЛxt_fщ
и(*, 
	t__cЏ°
 *,

93 
	t__cЏ°
 *,

97 (*
	t__gcЏv_М™s_quФy_fщ
и(
	t__cЏ°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gcЏv_М™s_ЪЩ_fщ
) (**, const *);

102 (*
	t__gcЏv_М™s_Тd_fщ
) (*);

104 
	s__gcЏv_М™s_d©a


107 
__gcЏv_М™s_fщ
 
__М™s_fщ
;

108 
__gcЏv_М™s_cЏЛxt_fщ
 
__М™s_cЏЛxt_fщ
;

109 
__gcЏv_М™s_Тd_fщ
 
__М™s_Тd_fщ
;

110 *
__d©a
;

111 
__gcЏv_М™s_d©a
 *
__√xt
;

116 
	s__gcЏv_°Х


118 
__gcЏv_lяded_objeщ
 *
__shlib_h™dЋ
;

119 
__cЏ°
 *
__mod«me
;

121 
__couЅФ
;

123 *
__дom_«me
;

124 *
__to_«me
;

126 
__gcЏv_fщ
 
__fщ
;

127 
__gcЏv_btowc_fщ
 
__btowc_fщ
;

128 
__gcЏv_ЪЩ_fщ
 
__ЪЩ_fщ
;

129 
__gcЏv_Тd_fщ
 
__Тd_fщ
;

133 
__mЪ_√eded_дom
;

134 
__max_√eded_дom
;

135 
__mЪ_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gcЏv_°Х_d©a


148 *
__outbuf
;

149 *
__outbuгnd
;

153 
__жags
;

157 
__Ъvo€tiЏ_couЅФ
;

161 
__ЪЛЇЃ_u£
;

163 
__mb°©e_t
 *
__°©Х
;

164 
__mb°©e_t
 
__°©e
;

168 
__gcЏv_М™s_d©a
 *
__М™s
;

173 
	s__gcЏv_Ъfo


175 
size_t
 
__n°Хs
;

176 
__gcЏv_°Х
 *
__°Хs
;

177 
__exЛnsiЏ__
 
__gcЏv_°Х_d©a
 
__d©a
 
__жexђr
;

178 } *
	t__gcЏv_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifdeа
_LIBC


7 #Фr№ 
Aµli€tiЏs
 
may
 
nў
 
defЪe
 
the
 
maьo
 
_LIBC


10 
	#__°ub___kФ√l_co¶


	)

11 
	#__°ub___kФ√l_sЪl


	)

12 
	#__°ub___kФ√l_П∆


	)

13 
	#__°ub_chжags


	)

14 
	#__°ub_зЙach


	)

15 
	#__°ub_fchжags


	)

16 
	#__°ub_fdСach


	)

17 
	#__°ub_gЙy


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_їvoke


	)

20 
	#__°ub_£ОogЪ


	)

21 
	#__°ub_sigїtuЇ


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/openssl/bn.h

72 #iвdeа
HEADER_BN_H


73 
	#HEADER_BN_H


	)

75 
	~<ЁТs¶/e_os2.h
>

76 #iвdeа
OPENSSL_NO_FP_API


77 
	~<°dio.h
>

79 
	~<ЁТs¶/os¶_typ.h
>

81 #ifdeа 
__эlu•lus


97 
	#BN_MUL_COMBA


	)

98 
	#BN_SQR_COMBA


	)

99 
	#BN_RECURSION


	)

112 #iа
defЪed
(
OPENSSL_SYS_MSDOS
и|| defЪed(
OPENSSL_SYS_WINDOWS
) || \

113 
defЪed
(
OPENSSL_SYS_WIN32
и|| defЪed(
lЪux
)

114 #iвdeа
BN_DIV2W


115 
	#BN_DIV2W


	)

122 #ifdeа
SIXTY_FOUR_BIT_LONG


123 
	#BN_ULLONG
 

	)

124 
	#BN_ULONG
 

	)

125 
	#BN_LONG
 

	)

126 
	#BN_BITS
 128

	)

127 
	#BN_BYTES
 8

	)

128 
	#BN_BITS2
 64

	)

129 
	#BN_BITS4
 32

	)

130 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

131 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

132 
	#BN_MASK2l
 (0xffffffffL)

	)

133 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

134 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

135 
	#BN_TBIT
 (0x8000000000000000L)

	)

136 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

137 
	#BN_DEC_FMT1
 "%lu"

	)

138 
	#BN_DEC_FMT2
 "%019lu"

	)

139 
	#BN_DEC_NUM
 19

	)

147 #ifdeа
SIXTY_FOUR_BIT


148 #undeа
BN_LLONG


149 #undeа
BN_ULLONG


150 
	#BN_ULONG
 

	)

151 
	#BN_LONG
 

	)

152 
	#BN_BITS
 128

	)

153 
	#BN_BYTES
 8

	)

154 
	#BN_BITS2
 64

	)

155 
	#BN_BITS4
 32

	)

156 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

157 
	#BN_MASK2l
 (0xffffffffL)

	)

158 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

159 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

160 
	#BN_TBIT
 (0x8000000000000000LL)

	)

161 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

162 
	#BN_DEC_FMT1
 "%ќu"

	)

163 
	#BN_DEC_FMT2
 "%019ќu"

	)

164 
	#BN_DEC_NUM
 19

	)

167 #ifdeа
THIRTY_TWO_BIT


168 #ifdeа
BN_LLONG


169 #iа
defЪed
(
OPENSSL_SYS_WIN32
и&& !defЪed(
__GNUC__
)

170 
	#BN_ULLONG
 
__Ъt64


	)

172 
	#BN_ULLONG
 

	)

175 
	#BN_ULONG
 

	)

176 
	#BN_LONG
 

	)

177 
	#BN_BITS
 64

	)

178 
	#BN_BYTES
 4

	)

179 
	#BN_BITS2
 32

	)

180 
	#BN_BITS4
 16

	)

181 #ifdeа
OPENSSL_SYS_WIN32


183 
	#BN_MASK
 (0xffffffffffffffffL)

	)

185 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffL)

	)

188 
	#BN_MASK2l
 (0xffff)

	)

189 
	#BN_MASK2h1
 (0xffff8000L)

	)

190 
	#BN_MASK2h
 (0xffff0000L)

	)

191 
	#BN_TBIT
 (0x80000000L)

	)

192 
	#BN_DEC_CONV
 (1000000000L)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%09lu"

	)

195 
	#BN_DEC_NUM
 9

	)

198 #ifdeа
SIXTEEN_BIT


199 #iвdeа
BN_DIV2W


200 
	#BN_DIV2W


	)

202 
	#BN_ULLONG
 

	)

203 
	#BN_ULONG
 

	)

204 
	#BN_LONG
 

	)

205 
	#BN_BITS
 32

	)

206 
	#BN_BYTES
 2

	)

207 
	#BN_BITS2
 16

	)

208 
	#BN_BITS4
 8

	)

209 
	#BN_MASK
 (0xffffffff)

	)

210 
	#BN_MASK2
 (0xffff)

	)

211 
	#BN_MASK2l
 (0xff)

	)

212 
	#BN_MASK2h1
 (0xff80)

	)

213 
	#BN_MASK2h
 (0xff00)

	)

214 
	#BN_TBIT
 (0x8000)

	)

215 
	#BN_DEC_CONV
 (100000)

	)

216 
	#BN_DEC_FMT1
 "%u"

	)

217 
	#BN_DEC_FMT2
 "%05u"

	)

218 
	#BN_DEC_NUM
 5

	)

221 #ifdeа
EIGHT_BIT


222 #iвdeа
BN_DIV2W


223 
	#BN_DIV2W


	)

225 
	#BN_ULLONG
 

	)

226 
	#BN_ULONG
 

	)

227 
	#BN_LONG
 

	)

228 
	#BN_BITS
 16

	)

229 
	#BN_BYTES
 1

	)

230 
	#BN_BITS2
 8

	)

231 
	#BN_BITS4
 4

	)

232 
	#BN_MASK
 (0xffff)

	)

233 
	#BN_MASK2
 (0xff)

	)

234 
	#BN_MASK2l
 (0xf)

	)

235 
	#BN_MASK2h1
 (0xf8)

	)

236 
	#BN_MASK2h
 (0xf0)

	)

237 
	#BN_TBIT
 (0x80)

	)

238 
	#BN_DEC_CONV
 (100)

	)

239 
	#BN_DEC_FMT1
 "%u"

	)

240 
	#BN_DEC_FMT2
 "%02u"

	)

241 
	#BN_DEC_NUM
 2

	)

244 
	#BN_DEFAULT_BITS
 1280

	)

246 
	#BN_FLG_MALLOCED
 0x01

	)

247 
	#BN_FLG_STATIC_DATA
 0x02

	)

248 
	#BN_FLG_CONSTTIME
 0x04

	)

254 #iвdeа
OPENSSL_NO_DEPRECATED


255 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

260 #iвdeа
OPENSSL_NO_DEPRECATED


261 
	#BN_FLG_FREE
 0x8000

	)

263 
	#BN_£t_жags
(
b
,
n
и((b)->
жags
|=“))

	)

264 
	#BN_gС_жags
(
b
,
n
и((b)->
жags
&“))

	)

268 
	#BN_wЩh_жags
(
de°
,
b
,
n
и((de°)->
d
=(b)->d, \

269 (
de°
)->
tЁ
=(
b
)->top, \

270 (
de°
)->
dmax
=(
b
)->dmax, \

271 (
de°
)->
√g
=(
b
)->neg, \

272 (
de°
)->
жags
=(((de°)->жag†& 
BN_FLG_MALLOCED
) \

273 | ((
b
)->
жags
 & ~
BN_FLG_MALLOCED
) \

274 | 
BN_FLG_STATIC_DATA
 \

275 | (
n
)))

	)

279 
bignum_°
 
	tBIGNUM
;

281 
bignum_щx
 
	tBN_CTX
;

282 
bn_blЪdЪg_°
 
	tBN_BLINDING
;

283 
bn_mЏt_щx_°
 
	tBN_MONT_CTX
;

284 
bn_їэ_щx_°
 
	tBN_RECP_CTX
;

285 
bn_gТcb_°
 
	tBN_GENCB
;

288 
	sbignum_°


290 
BN_ULONG
 *
d
;

291 
tЁ
;

293 
dmax
;

294 
√g
;

295 
жags
;

299 
	sbn_mЏt_щx_°


301 
ri
;

302 
BIGNUM
 
RR
;

303 
BIGNUM
 
N
;

304 
BIGNUM
 
Ni
;

306 
BN_ULONG
 
n0
;

307 
жags
;

313 
	sbn_їэ_щx_°


315 
BIGNUM
 
N
;

316 
BIGNUM
 
Nr
;

317 
num_bЩs
;

318 
shiб
;

319 
жags
;

323 
	sbn_gТcb_°


325 
vФ
;

326 *
ђg
;

330 (*
cb_1
)(, , *);

332 (*
cb_2
)(, , 
BN_GENCB
 *);

333 } 
cb
;

336 
BN_GENCB_€ќ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

338 
	#BN_GENCB_£t_ёd
(
gТcb
, 
€ќback
, 
cb_ђg
) { \

339 
BN_GENCB
 *
tmp_gТcb
 = (
gТcb
); \

340 
tmp_gТcb
->
vФ
 = 1; \

341 
tmp_gТcb
->
ђg
 = (
cb_ђg
); \

342 
tmp_gТcb
->
cb
.
cb_1
 = (
€ќback
); }

	)

344 
	#BN_GENCB_£t
(
gТcb
, 
€ќback
, 
cb_ђg
) { \

345 
BN_GENCB
 *
tmp_gТcb
 = (
gТcb
); \

346 
tmp_gТcb
->
vФ
 = 2; \

347 
tmp_gТcb
->
ђg
 = (
cb_ђg
); \

348 
tmp_gТcb
->
cb
.
cb_2
 = (
€ќback
); }

	)

350 
	#BN_іime_checks
 0

	)

358 
	#BN_іime_checks_f№_size
(
b
) ((b) >= 1300 ? 2 : \

359 (
b
) >= 850 ? 3 : \

360 (
b
) >= 650 ? 4 : \

361 (
b
) >= 550 ? 5 : \

362 (
b
) >= 450 ? 6 : \

363 (
b
) >= 400 ? 7 : \

364 (
b
) >= 350 ? 8 : \

365 (
b
) >= 300 ? 9 : \

366 (
b
) >= 250 ? 12 : \

367 (
b
) >= 200 ? 15 : \

368 (
b
) >= 150 ? 18 : \

369  27)

	)

371 
	#BN_num_byЛs
(
a
и((
	`BN_num_bЩs
„)+7)/8)

	)

374 
	#BN_abs_is_w№d
(
a
,
w
и(((„)->
tЁ
 =р1и&& („)->
d
[0] =р(
BN_ULONG
)(w))) || \

375 (((
w
и=р0и&& ((
a
)->
tЁ
 =р0)))

	)

376 
	#BN_is_zФo
(
a
и(„)->
tЁ
 =р0)

	)

377 
	#BN_is_Џe
(
a
и(
	`BN_abs_is_w№d
(„),1и&& !„)->
√g
)

	)

378 
	#BN_is_w№d
(
a
,
w
и(
	`BN_abs_is_w№d
(„),(w)и&& (!(wи|| !„)->
√g
))

	)

379 
	#BN_is_odd
(
a
и((„)->
tЁ
 > 0и&& („)->
d
[0] & 1))

	)

381 
	#BN_Џe
(
a
и(
	`BN_£t_w№d
(„),1))

	)

382 
	#BN_zФo_ex
(
a
) \

384 
BIGNUM
 *
_tmp_bn
 = (
a
); \

385 
_tmp_bn
->
tЁ
 = 0; \

386 
_tmp_bn
->
√g
 = 0; \

387 } 0)

	)

388 #ifdeа
OPENSSL_NO_DEPRECATED


389 
	#BN_zФo
(
a
и
	`BN_zФo_ex
„)

	)

391 
	#BN_zФo
(
a
и(
	`BN_£t_w№d
(„),0))

	)

394 cЏ° 
BIGNUM
 *
BN_vЃue_Џe
();

395 * 
BN_ЁtiЏs
();

396 
BN_CTX
 *
BN_CTX_√w
();

397 #iвdeа
OPENSSL_NO_DEPRECATED


398 
BN_CTX_ЪЩ
(
BN_CTX
 *
c
);

400 
BN_CTX_дУ
(
BN_CTX
 *
c
);

401 
BN_CTX_°ђt
(
BN_CTX
 *
щx
);

402 
BIGNUM
 *
BN_CTX_gС
(
BN_CTX
 *
щx
);

403 
BN_CTX_Тd
(
BN_CTX
 *
щx
);

404 
BN_њnd
(
BIGNUM
 *
Їd
, 
bЩs
, 
tЁ
,
bўtom
);

405 
BN_p£udo_њnd
(
BIGNUM
 *
Їd
, 
bЩs
, 
tЁ
,
bўtom
);

406 
BN_њnd_њnge
(
BIGNUM
 *
Їd
, BIGNUM *
њnge
);

407 
BN_p£udo_њnd_њnge
(
BIGNUM
 *
Їd
, BIGNUM *
њnge
);

408 
BN_num_bЩs
(cЏ° 
BIGNUM
 *
a
);

409 
BN_num_bЩs_w№d
(
BN_ULONG
);

410 
BIGNUM
 *
BN_√w
();

411 
BN_ЪЩ
(
BIGNUM
 *);

412 
BN_юЧr_дУ
(
BIGNUM
 *
a
);

413 
BIGNUM
 *
BN_cЁy
(BIGNUM *
a
, cЏ° BIGNUM *
b
);

414 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

415 
BIGNUM
 *
BN_bЪ2bn
(cЏ° *
s
,
Ћn
,BIGNUM *
їt
);

416 
BN_bn2bЪ
(cЏ° 
BIGNUM
 *
a
, *
to
);

417 
BIGNUM
 *
BN_mpi2bn
(cЏ° *
s
,
Ћn
,BIGNUM *
їt
);

418 
BN_bn2mpi
(cЏ° 
BIGNUM
 *
a
, *
to
);

419 
BN_sub
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
);

420 
BN_usub
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
);

421 
BN_uadd
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
);

422 
BN_add
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
);

423 
BN_mul
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, 
BN_CTX
 *
щx
);

424 
BN_sqr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
,
BN_CTX
 *
щx
);

429 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

434 
	#BN_is_√g©ive
(
a
и(„)->
√g
 !р0)

	)

436 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
їm
, cЏ° BIGNUM *
m
, cЏ° BIGNUM *
d
,

437 
BN_CTX
 *
щx
);

438 
	#BN_mod
(
їm
,
m
,
d
,
щx
и
	`BN_div
(
NULL
,‘em),(m),(d),(щx))

	)

439 
BN_¬mod
(
BIGNUM
 *
r
, cЏ° BIGNUM *
m
, cЏ° BIGNUM *
d
, 
BN_CTX
 *
щx
);

440 
BN_mod_add
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
);

441 
BN_mod_add_quick
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, cЏ° BIGNUM *
m
);

442 
BN_mod_sub
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
);

443 
BN_mod_sub_quick
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
, cЏ° BIGNUM *
m
);

444 
BN_mod_mul
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

445 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
);

446 
BN_mod_sqr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
);

447 
BN_mod_lshiб1
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
);

448 
BN_mod_lshiб1_quick
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
m
);

449 
BN_mod_lshiб
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, 
n
, cЏ° BIGNUM *
m
, 
BN_CTX
 *
щx
);

450 
BN_mod_lshiб_quick
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, 
n
, cЏ° BIGNUM *
m
);

452 
BN_ULONG
 
BN_mod_w№d
(cЏ° 
BIGNUM
 *
a
, BN_ULONG 
w
);

453 
BN_ULONG
 
BN_div_w№d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

454 
BN_mul_w№d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

455 
BN_add_w№d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

456 
BN_sub_w№d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

457 
BN_£t_w№d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

458 
BN_ULONG
 
BN_gС_w№d
(cЏ° 
BIGNUM
 *
a
);

460 
BN_cmp
(cЏ° 
BIGNUM
 *
a
, cЏ° BIGNUM *
b
);

461 
BN_дУ
(
BIGNUM
 *
a
);

462 
BN_is_bЩ_£t
(cЏ° 
BIGNUM
 *
a
, 
n
);

463 
BN_lshiб
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, 
n
);

464 
BN_lshiб1
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
);

465 
BN_exp
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,
BN_CTX
 *
щx
);

467 
BN_mod_exp
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

468 cЏ° 
BIGNUM
 *
m
,
BN_CTX
 *
щx
);

469 
BN_mod_exp_mЏt
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

470 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
, 
BN_MONT_CTX
 *
m_щx
);

471 
BN_mod_exp_mЏt_cЏ°time
(
BIGNUM
 *
Љ
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

472 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
, 
BN_MONT_CTX
 *
Ъ_mЏt
);

473 
BN_mod_exp_mЏt_w№d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, cЏ° BIGNUM *
p
,

474 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
, 
BN_MONT_CTX
 *
m_щx
);

475 
BN_mod_exp2_mЏt
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a1
, cЏ° BIGNUM *
p1
,

476 cЏ° 
BIGNUM
 *
a2
, cЏ° BIGNUM *
p2
,cЏ° BIGNUM *
m
,

477 
BN_CTX
 *
щx
,
BN_MONT_CTX
 *
m_щx
);

478 
BN_mod_exp_simґe
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

479 cЏ° 
BIGNUM
 *
m
,
BN_CTX
 *
щx
);

481 
BN_mask_bЩs
(
BIGNUM
 *
a
,
n
);

482 #iвdeа
OPENSSL_NO_FP_API


483 
BN_іЪt_е
(
FILE
 *
е
, cЏ° 
BIGNUM
 *
a
);

485 #ifdeа
HEADER_BIO_H


486 
BN_іЪt
(
BIO
 *
е
, cЏ° 
BIGNUM
 *
a
);

488 
BN_іЪt
(*
е
, cЏ° 
BIGNUM
 *
a
);

490 
BN_їcЭro€l
(
BIGNUM
 *
r
, cЏ° BIGNUM *
m
, 
Ћn
, 
BN_CTX
 *
щx
);

491 
BN_rshiб
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, 
n
);

492 
BN_rshiб1
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
);

493 
BN_юЧr
(
BIGNUM
 *
a
);

494 
BIGNUM
 *
BN_dup
(cЏ° BIGNUM *
a
);

495 
BN_ucmp
(cЏ° 
BIGNUM
 *
a
, cЏ° BIGNUM *
b
);

496 
BN_£t_bЩ
(
BIGNUM
 *
a
, 
n
);

497 
BN_юЧr_bЩ
(
BIGNUM
 *
a
, 
n
);

498 * 
BN_bn2hex
(cЏ° 
BIGNUM
 *
a
);

499 * 
BN_bn2dec
(cЏ° 
BIGNUM
 *
a
);

500 
BN_hex2bn
(
BIGNUM
 **
a
, cЏ° *
°r
);

501 
BN_dec2bn
(
BIGNUM
 **
a
, cЏ° *
°r
);

502 
BN_gcd
(
BIGNUM
 *
r
,cЏ° BIGNUM *
a
,cЏ° BIGNUM *
b
,
BN_CTX
 *
щx
);

503 
BN_krЏeckФ
(cЏ° 
BIGNUM
 *
a
,cЏ° BIGNUM *
b
,
BN_CTX
 *
щx
);

504 
BIGNUM
 *
BN_mod_ЪvФ£
(BIGNUM *
їt
,

505 cЏ° 
BIGNUM
 *
a
, cЏ° BIGNUM *
n
,
BN_CTX
 *
щx
);

506 
BIGNUM
 *
BN_mod_sqє
(BIGNUM *
їt
,

507 cЏ° 
BIGNUM
 *
a
, cЏ° BIGNUM *
n
,
BN_CTX
 *
щx
);

510 #iвdeа
OPENSSL_NO_DEPRECATED


511 
BIGNUM
 *
BN_gТФ©e_іime
(BIGNUM *
їt
,
bЩs
,
Іг
,

512 cЏ° 
BIGNUM
 *
add
, cЏ° BIGNUM *
їm
,

513 (*
€ќback
)(,,*),*
cb_ђg
);

514 
BN_is_іime
(cЏ° 
BIGNUM
 *
p
,
nchecks
,

515 (*
€ќback
)(,,*),

516 
BN_CTX
 *
щx
,*
cb_ђg
);

517 
BN_is_іime_з°Л°
(cЏ° 
BIGNUM
 *
p
,
nchecks
,

518 (*
€ќback
)(,,*),
BN_CTX
 *
щx
,*
cb_ђg
,

519 
do_МЯl_divisiЏ
);

523 
BN_gТФ©e_іime_ex
(
BIGNUM
 *
їt
,
bЩs
,
Іг
, cЏ° BIGNUM *
add
,

524 cЏ° 
BIGNUM
 *
їm
, 
BN_GENCB
 *
cb
);

525 
BN_is_іime_ex
(cЏ° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
щx
, 
BN_GENCB
 *
cb
);

526 
BN_is_іime_з°Л°_ex
(cЏ° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
щx
,

527 
do_МЯl_divisiЏ
, 
BN_GENCB
 *
cb
);

529 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

530 
BN_MONT_CTX_ЪЩ
(
BN_MONT_CTX
 *
щx
);

531 
BN_mod_mul_mЏtgomФy
(
BIGNUM
 *
r
,cЏ° BIGNUM *
a
,cЏ° BIGNUM *
b
,

532 
BN_MONT_CTX
 *
mЏt
, 
BN_CTX
 *
щx
);

533 
	#BN_to_mЏtgomФy
(
r
,
a
,
mЏt
,
щx
и
	`BN_mod_mul_mЏtgomФy
(\

534 (
r
),(
a
),&((
mЏt
)->
RR
),(mЏt),(
щx
))

	)

535 
BN_дom_mЏtgomФy
(
BIGNUM
 *
r
,cЏ° BIGNUM *
a
,

536 
BN_MONT_CTX
 *
mЏt
, 
BN_CTX
 *
щx
);

537 
BN_MONT_CTX_дУ
(
BN_MONT_CTX
 *
mЏt
);

538 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
mЏt
,cЏ° 
BIGNUM
 *
mod
,
BN_CTX
 *
щx
);

539 
BN_MONT_CTX
 *
BN_MONT_CTX_cЁy
(BN_MONT_CTX *
to
,BN_MONT_CTX *
дom
);

540 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pmЏt
, 
lock
,

541 cЏ° 
BIGNUM
 *
mod
, 
BN_CTX
 *
щx
);

544 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

545 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

547 
BN_BLINDING
 *
BN_BLINDING_√w
(cЏ° 
BIGNUM
 *
A
, cЏ° BIGNUM *
Ai
, BIGNUM *
mod
);

548 
BN_BLINDING_дУ
(
BN_BLINDING
 *
b
);

549 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
щx
);

550 
BN_BLINDING_cЏvФt
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
щx
);

551 
BN_BLINDING_ЪvФt
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
щx
);

552 
BN_BLINDING_cЏvФt_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

553 
BN_BLINDING_ЪvФt_ex
(
BIGNUM
 *
n
, cЏ° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

554 
BN_BLINDING_gС_thїad_id
(cЏ° 
BN_BLINDING
 *);

555 
BN_BLINDING_£t_thїad_id
(
BN_BLINDING
 *, );

556 
BN_BLINDING_gС_жags
(cЏ° 
BN_BLINDING
 *);

557 
BN_BLINDING_£t_жags
(
BN_BLINDING
 *, );

558 
BN_BLINDING
 *
BN_BLINDING_ьЧЛ_Јњm
(BN_BLINDING *
b
,

559 cЏ° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
щx
,

560 (*
bn_mod_exp
)(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

561 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
, 
BN_MONT_CTX
 *
m_щx
),

562 
BN_MONT_CTX
 *
m_щx
);

564 #iвdeа
OPENSSL_NO_DEPRECATED


565 
BN_£t_Јњms
(
mul
,
high
,
low
,
mЏt
);

566 
BN_gС_Јњms
(
which
);

569 
BN_RECP_CTX_ЪЩ
(
BN_RECP_CTX
 *
їэ
);

570 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

571 
BN_RECP_CTX_дУ
(
BN_RECP_CTX
 *
їэ
);

572 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
їэ
,cЏ° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
щx
);

573 
BN_mod_mul_їcЭro€l
(
BIGNUM
 *
r
, cЏ° BIGNUM *
x
, cЏ° BIGNUM *
y
,

574 
BN_RECP_CTX
 *
їэ
,
BN_CTX
 *
щx
);

575 
BN_mod_exp_їэ
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

576 cЏ° 
BIGNUM
 *
m
, 
BN_CTX
 *
щx
);

577 
BN_div_їэ
(
BIGNUM
 *
dv
, BIGNUM *
їm
, cЏ° BIGNUM *
m
,

578 
BN_RECP_CTX
 *
їэ
, 
BN_CTX
 *
щx
);

589 
BN_GF2m_add
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
);

590 
	#BN_GF2m_sub
(
r
, 
a
, 
b
и
	`BN_GF2m_add
‘,З, b)

	)

591 
BN_GF2m_mod
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
);

592 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

593 cЏ° 
BIGNUM
 *
p
, 
BN_CTX
 *
щx
);

594 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

595 
BN_CTX
 *
щx
);

596 
BN_GF2m_mod_Ъv
(
BIGNUM
 *
r
, cЏ° BIGNUM *
b
, cЏ° BIGNUM *
p
,

597 
BN_CTX
 *
щx
);

598 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

599 cЏ° 
BIGNUM
 *
p
, 
BN_CTX
 *
щx
);

600 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

601 cЏ° 
BIGNUM
 *
p
, 
BN_CTX
 *
щx
);

602 
BN_GF2m_mod_sqє
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

603 
BN_CTX
 *
щx
);

604 
BN_GF2m_mod_sёve_quad
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
,

605 
BN_CTX
 *
щx
);

606 
	#BN_GF2m_cmp
(
a
, 
b
и
	`BN_ucmp
(„), (b))

	)

612 
BN_GF2m_mod_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° 
p
[]);

614 
BN_GF2m_mod_mul_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

615 cЏ° 
p
[], 
BN_CTX
 *
щx
);

616 
BN_GF2m_mod_sqr_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° 
p
[],

617 
BN_CTX
 *
щx
);

618 
BN_GF2m_mod_Ъv_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
b
, cЏ° 
p
[],

619 
BN_CTX
 *
щx
);

620 
BN_GF2m_mod_div_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

621 cЏ° 
p
[], 
BN_CTX
 *
щx
);

622 
BN_GF2m_mod_exp_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
b
,

623 cЏ° 
p
[], 
BN_CTX
 *
щx
);

624 
BN_GF2m_mod_sqє_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
,

625 cЏ° 
p
[], 
BN_CTX
 *
щx
);

626 
BN_GF2m_mod_sёve_quad_ђr
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
,

627 cЏ° 
p
[], 
BN_CTX
 *
щx
);

628 
BN_GF2m_pёy2ђr
(cЏ° 
BIGNUM
 *
a
, 
p
[], 
max
);

629 
BN_GF2m_ђr2pёy
(cЏ° 
p
[], 
BIGNUM
 *
a
);

633 
BN_ni°_mod_192
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
, 
BN_CTX
 *
щx
);

634 
BN_ni°_mod_224
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
, 
BN_CTX
 *
щx
);

635 
BN_ni°_mod_256
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
, 
BN_CTX
 *
щx
);

636 
BN_ni°_mod_384
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
, 
BN_CTX
 *
щx
);

637 
BN_ni°_mod_521
(
BIGNUM
 *
r
, cЏ° BIGNUM *
a
, cЏ° BIGNUM *
p
, 
BN_CTX
 *
щx
);

639 cЏ° 
BIGNUM
 *
BN_gС0_ni°_іime_192
();

640 cЏ° 
BIGNUM
 *
BN_gС0_ni°_іime_224
();

641 cЏ° 
BIGNUM
 *
BN_gС0_ni°_іime_256
();

642 cЏ° 
BIGNUM
 *
BN_gС0_ni°_іime_384
();

643 cЏ° 
BIGNUM
 *
BN_gС0_ni°_іime_521
();

647 
	#bn_exЈnd
(
a
,
bЩs
и((((((bЩs+
BN_BITS2
-1))/BN_BITS2)и<р„)->
dmax
)?\

648 (
a
):
	`bn_exЈnd2
(„),(
bЩs
+
BN_BITS2
-1)/BN_BITS2))

	)

649 
	#bn_wexЈnd
(
a
,
w№ds
и(((w№dsи<р„)->
dmax
)?„):
	`bn_exЈnd2
(„),(w№ds)))

	)

650 
BIGNUM
 *
bn_exЈnd2
(BIGNUM *
a
, 
w№ds
);

651 #iвdeа
OPENSSL_NO_DEPRECATED


652 
BIGNUM
 *
bn_dup_exЈnd
(cЏ° BIGNUM *
a
, 
w№ds
);

683 #ifdeа
BN_DEBUG


686 
	~<as£є.h
>

688 #ifdeа
BN_DEBUG_RAND


690 #iвdeа
RAND_p£udo_byЛs


691 
RAND_p£udo_byЛs
(*
buf
,
num
);

692 
	#BN_DEBUG_TRIX


	)

694 
	#bn_pёluЛ
(
a
) \

696 cЏ° 
BIGNUM
 *
_bnum1
 = (
a
); \

697 if(
_bnum1
->
tЁ
 < _bnum1->
dmax
) { \

698 
_tmp_chђ
; \

702 
BN_ULONG
 *
_nў_cЏ°
; \

703 
	`memэy
(&
_nў_cЏ°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

704 
	`RAND_p£udo_byЛs
(&
_tmp_chђ
, 1); \

705 
	`mem£t
((*)(
_nў_cЏ°
 + 
_bnum1
->
tЁ
), 
_tmp_chђ
, \

706 (
_bnum1
->
dmax
 - _bnum1->
tЁ
и* (
BN_ULONG
)); \

708 } 0)

	)

709 #ifdeа
BN_DEBUG_TRIX


710 #undeа
RAND_p£udo_byЛs


713 
	#bn_pёluЛ
(
a
)

	)

715 
	#bn_check_tЁ
(
a
) \

717 cЏ° 
BIGNUM
 *
_bnum2
 = (
a
); \

718 iа(
_bnum2
 !р
NULL
) { \

719 
	`as£є
((
_bnum2
->
tЁ
 == 0) || \

720 (
_bnum2
->
d
[_bnum2->
tЁ
 - 1] != 0)); \

721 
	`bn_pёluЛ
(
_bnum2
); \

723 } 0)

	)

725 
	#bn_fix_tЁ
(
a
и
	`bn_check_tЁ
„)

	)

729 
	#bn_pёluЛ
(
a
)

	)

730 
	#bn_check_tЁ
(
a
)

	)

731 
	#bn_fix_tЁ
(
a
и
	`bn_c№їщ_tЁ
„)

	)

735 
	#bn_c№їщ_tЁ
(
a
) \

737 
BN_ULONG
 *
бl
; \

738 iа((
a
)->
tЁ
 > 0) \

740 
бl
р&((
a
)->
d
[„)->
tЁ
-1]); (a)->top > 0; (a)->top--) \

741 iа(*(
бl
--)) ; \

743 
	`bn_pёluЛ
(
a
); \

744 }

	)

746 
BN_ULONG
 
bn_mul_add_w№ds
(BN_ULONG *
љ
, cЏ° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

747 
BN_ULONG
 
bn_mul_w№ds
(BN_ULONG *
љ
, cЏ° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

748 
bn_sqr_w№ds
(
BN_ULONG
 *
љ
, cЏ° BN_ULONG *
≠
, 
num
);

749 
BN_ULONG
 
bn_div_w№ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

750 
BN_ULONG
 
bn_add_w№ds
(BN_ULONG *
љ
, cЏ° BN_ULONG *
≠
, cЏ° BN_ULONG *
bp
,
num
);

751 
BN_ULONG
 
bn_sub_w№ds
(BN_ULONG *
љ
, cЏ° BN_ULONG *
≠
, cЏ° BN_ULONG *
bp
,
num
);

754 
BIGNUM
 *
gС_rfc2409_іime_768
(BIGNUM *
bn
);

755 
BIGNUM
 *
gС_rfc2409_іime_1024
(BIGNUM *
bn
);

758 
BIGNUM
 *
gС_rfc3526_іime_1536
(BIGNUM *
bn
);

759 
BIGNUM
 *
gС_rfc3526_іime_2048
(BIGNUM *
bn
);

760 
BIGNUM
 *
gС_rfc3526_іime_3072
(BIGNUM *
bn
);

761 
BIGNUM
 *
gС_rfc3526_іime_4096
(BIGNUM *
bn
);

762 
BIGNUM
 *
gС_rfc3526_іime_6144
(BIGNUM *
bn
);

763 
BIGNUM
 *
gС_rfc3526_іime_8192
(BIGNUM *
bn
);

765 
BN_bЅe°_њnd
(
BIGNUM
 *
Їd
, 
bЩs
, 
tЁ
,
bўtom
);

771 
ERR_lяd_BN_°rЪgs
();

776 
	#BN_F_BNRAND
 127

	)

777 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

778 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

779 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

780 
	#BN_F_BN_BLINDING_NEW
 102

	)

781 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

782 
	#BN_F_BN_BN2DEC
 104

	)

783 
	#BN_F_BN_BN2HEX
 105

	)

784 
	#BN_F_BN_CTX_GET
 116

	)

785 
	#BN_F_BN_CTX_NEW
 106

	)

786 
	#BN_F_BN_CTX_START
 129

	)

787 
	#BN_F_BN_DIV
 107

	)

788 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

789 
	#BN_F_BN_DIV_RECP
 130

	)

790 
	#BN_F_BN_EXP
 123

	)

791 
	#BN_F_BN_EXPAND2
 108

	)

792 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

793 
	#BN_F_BN_GF2M_MOD
 131

	)

794 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

795 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

796 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

797 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

798 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

799 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

800 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

801 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

802 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

803 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

804 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

805 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

806 
	#BN_F_BN_MOD_INVERSE
 110

	)

807 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

808 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

809 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

810 
	#BN_F_BN_MOD_SQRT
 121

	)

811 
	#BN_F_BN_MPI2BN
 112

	)

812 
	#BN_F_BN_NEW
 113

	)

813 
	#BN_F_BN_RAND
 114

	)

814 
	#BN_F_BN_RAND_RANGE
 122

	)

815 
	#BN_F_BN_USUB
 115

	)

818 
	#BN_R_ARG2_LT_ARG3
 100

	)

819 
	#BN_R_BAD_RECIPROCAL
 101

	)

820 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

821 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

822 
	#BN_R_DIV_BY_ZERO
 103

	)

823 
	#BN_R_ENCODING_ERROR
 104

	)

824 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

825 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

826 
	#BN_R_INVALID_LENGTH
 106

	)

827 
	#BN_R_INVALID_RANGE
 115

	)

828 
	#BN_R_NOT_A_SQUARE
 111

	)

829 
	#BN_R_NOT_INITIALIZED
 107

	)

830 
	#BN_R_NO_INVERSE
 108

	)

831 
	#BN_R_NO_SOLUTION
 116

	)

832 
	#BN_R_P_IS_NOT_PRIME
 112

	)

833 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

834 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

836 #ifdeа 
__эlu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undefЪed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_Щu_t
 "ITU-T"

	)

71 
	#LN_Щu_t
 "Щu-t"

	)

72 
	#NID_Щu_t
 645

	)

73 
	#OBJ_Щu_t
 0L

	)

75 
	#NID_ccЩt
 404

	)

76 
	#OBJ_ccЩt
 
OBJ_Щu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joЪt_iso_Щu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joЪt_iso_Щu_t
 "joЪt-iso-Щu-t"

	)

85 
	#NID_joЪt_iso_Щu_t
 646

	)

86 
	#OBJ_joЪt_iso_Щu_t
 2L

	)

88 
	#NID_joЪt_iso_ccЩt
 393

	)

89 
	#OBJ_joЪt_iso_ccЩt
 
OBJ_joЪt_iso_Щu_t


	)

91 
	#SN_membФ_body
 "membФ-body"

	)

92 
	#LN_membФ_body
 "ISO MembФ Body"

	)

93 
	#NID_membФ_body
 182

	)

94 
	#OBJ_membФ_body
 
OBJ_iso
,2L

	)

96 
	#SN_idТtifЫd_№g™iz©iЏ
 "idТtifЫd-№g™iz©iЏ"

	)

97 
	#NID_idТtifЫd_№g™iz©iЏ
 676

	)

98 
	#OBJ_idТtifЫd_№g™iz©iЏ
 
OBJ_iso
,3L

	)

100 
	#SN_ыєicom_ђc
 "ыєicom-ђc"

	)

101 
	#NID_ыєicom_ђc
 677

	)

102 
	#OBJ_ыєicom_ђc
 
OBJ_idТtifЫd_№g™iz©iЏ
,132L

	)

104 
	#SN_ЪЛЇ©iЏЃ_№g™iz©iЏs
 "ЪЛЇ©iЏЃ-№g™iz©iЏs"

	)

105 
	#LN_ЪЛЇ©iЏЃ_№g™iz©iЏs
 "IЅФ«tiЏЃ Org™iz©iЏs"

	)

106 
	#NID_ЪЛЇ©iЏЃ_№g™iz©iЏs
 647

	)

107 
	#OBJ_ЪЛЇ©iЏЃ_№g™iz©iЏs
 
OBJ_joЪt_iso_Щu_t
,23L

	)

109 
	#SN_w≠
 "w≠"

	)

110 
	#NID_w≠
 678

	)

111 
	#OBJ_w≠
 
OBJ_ЪЛЇ©iЏЃ_№g™iz©iЏs
,43L

	)

113 
	#SN_w≠_wsg
 "w≠-wsg"

	)

114 
	#NID_w≠_wsg
 679

	)

115 
	#OBJ_w≠_wsg
 
OBJ_w≠
,13L

	)

117 
	#SN_£Ћщed_©МibuЛ_ty≥s
 "£Ћщed-©МibuЛ-ty≥s"

	)

118 
	#LN_£Ћщed_©МibuЛ_ty≥s
 "SЦeщed AЙribuЛ Ty≥s"

	)

119 
	#NID_£Ћщed_©МibuЛ_ty≥s
 394

	)

120 
	#OBJ_£Ћщed_©МibuЛ_ty≥s
 
OBJ_joЪt_iso_Щu_t
,5L,1L,5L

	)

122 
	#SN_юЧњnы
 "юЧњnы"

	)

123 
	#NID_юЧњnы
 395

	)

124 
	#OBJ_юЧњnы
 
OBJ_£Ћщed_©МibuЛ_ty≥s
,55L

	)

126 
	#SN_ISO_US
 "ISO-US"

	)

127 
	#LN_ISO_US
 "ISO US MembФ Body"

	)

128 
	#NID_ISO_US
 183

	)

129 
	#OBJ_ISO_US
 
OBJ_membФ_body
,840L

	)

131 
	#SN_X9_57
 "X9-57"

	)

132 
	#LN_X9_57
 "X9.57"

	)

133 
	#NID_X9_57
 184

	)

134 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

136 
	#SN_X9cm
 "X9cm"

	)

137 
	#LN_X9cm
 "X9.57 CM ?"

	)

138 
	#NID_X9cm
 185

	)

139 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

141 
	#SN_dІ
 "DSA"

	)

142 
	#LN_dІ
 "dІEnьy±iЏ"

	)

143 
	#NID_dІ
 116

	)

144 
	#OBJ_dІ
 
OBJ_X9cm
,1L

	)

146 
	#SN_dІWЩhSHA1
 "DSA-SHA1"

	)

147 
	#LN_dІWЩhSHA1
 "dІWЩhSHA1"

	)

148 
	#NID_dІWЩhSHA1
 113

	)

149 
	#OBJ_dІWЩhSHA1
 
OBJ_X9cm
,3L

	)

151 
	#SN_™si_X9_62
 "™si-X9-62"

	)

152 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

153 
	#NID_™si_X9_62
 405

	)

154 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

156 
	#OBJ_X9_62_id_fЫldTy≥
 
OBJ_™si_X9_62
,1L

	)

158 
	#SN_X9_62_іime_fЫld
 "іime-fЫld"

	)

159 
	#NID_X9_62_іime_fЫld
 406

	)

160 
	#OBJ_X9_62_іime_fЫld
 
OBJ_X9_62_id_fЫldTy≥
,1L

	)

162 
	#SN_X9_62_chђaщФi°ic_two_fЫld
 "chђaщФi°ic-two-fЫld"

	)

163 
	#NID_X9_62_chђaщФi°ic_two_fЫld
 407

	)

164 
	#OBJ_X9_62_chђaщФi°ic_two_fЫld
 
OBJ_X9_62_id_fЫldTy≥
,2L

	)

166 
	#SN_X9_62_id_chђaщФi°ic_two_basis
 "id-chђaщФi°ic-two-basis"

	)

167 
	#NID_X9_62_id_chђaщФi°ic_two_basis
 680

	)

168 
	#OBJ_X9_62_id_chђaщФi°ic_two_basis
 
OBJ_X9_62_chђaщФi°ic_two_fЫld
,3L

	)

170 
	#SN_X9_62_ЏBasis
 "ЏBasis"

	)

171 
	#NID_X9_62_ЏBasis
 681

	)

172 
	#OBJ_X9_62_ЏBasis
 
OBJ_X9_62_id_chђaщФi°ic_two_basis
,1L

	)

174 
	#SN_X9_62_НBasis
 "НBasis"

	)

175 
	#NID_X9_62_НBasis
 682

	)

176 
	#OBJ_X9_62_НBasis
 
OBJ_X9_62_id_chђaщФi°ic_two_basis
,2L

	)

178 
	#SN_X9_62_µBasis
 "µBasis"

	)

179 
	#NID_X9_62_µBasis
 683

	)

180 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_chђaщФi°ic_two_basis
,3L

	)

182 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

184 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

185 
	#NID_X9_62_id_ecPublicKey
 408

	)

186 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

188 
	#OBJ_X9_62_ЦlЭticCurve
 
OBJ_™si_X9_62
,3L

	)

190 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ЦlЭticCurve
,0L

	)

192 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

193 
	#NID_X9_62_c2≤b163v1
 684

	)

194 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

196 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

197 
	#NID_X9_62_c2≤b163v2
 685

	)

198 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

200 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

201 
	#NID_X9_62_c2≤b163v3
 686

	)

202 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

204 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

205 
	#NID_X9_62_c2≤b176v1
 687

	)

206 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

208 
	#SN_X9_62_c2Кb191v1
 "c2Кb191v1"

	)

209 
	#NID_X9_62_c2Кb191v1
 688

	)

210 
	#OBJ_X9_62_c2Кb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

212 
	#SN_X9_62_c2Кb191v2
 "c2Кb191v2"

	)

213 
	#NID_X9_62_c2Кb191v2
 689

	)

214 
	#OBJ_X9_62_c2Кb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

216 
	#SN_X9_62_c2Кb191v3
 "c2Кb191v3"

	)

217 
	#NID_X9_62_c2Кb191v3
 690

	)

218 
	#OBJ_X9_62_c2Кb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

220 
	#SN_X9_62_c2Џb191v4
 "c2Џb191v4"

	)

221 
	#NID_X9_62_c2Џb191v4
 691

	)

222 
	#OBJ_X9_62_c2Џb191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

224 
	#SN_X9_62_c2Џb191v5
 "c2Џb191v5"

	)

225 
	#NID_X9_62_c2Џb191v5
 692

	)

226 
	#OBJ_X9_62_c2Џb191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

228 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

229 
	#NID_X9_62_c2≤b208w1
 693

	)

230 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

232 
	#SN_X9_62_c2Кb239v1
 "c2Кb239v1"

	)

233 
	#NID_X9_62_c2Кb239v1
 694

	)

234 
	#OBJ_X9_62_c2Кb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

236 
	#SN_X9_62_c2Кb239v2
 "c2Кb239v2"

	)

237 
	#NID_X9_62_c2Кb239v2
 695

	)

238 
	#OBJ_X9_62_c2Кb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

240 
	#SN_X9_62_c2Кb239v3
 "c2Кb239v3"

	)

241 
	#NID_X9_62_c2Кb239v3
 696

	)

242 
	#OBJ_X9_62_c2Кb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

244 
	#SN_X9_62_c2Џb239v4
 "c2Џb239v4"

	)

245 
	#NID_X9_62_c2Џb239v4
 697

	)

246 
	#OBJ_X9_62_c2Џb239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

248 
	#SN_X9_62_c2Џb239v5
 "c2Џb239v5"

	)

249 
	#NID_X9_62_c2Џb239v5
 698

	)

250 
	#OBJ_X9_62_c2Џb239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

252 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

253 
	#NID_X9_62_c2≤b272w1
 699

	)

254 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

256 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

257 
	#NID_X9_62_c2≤b304w1
 700

	)

258 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

260 
	#SN_X9_62_c2Кb359v1
 "c2Кb359v1"

	)

261 
	#NID_X9_62_c2Кb359v1
 701

	)

262 
	#OBJ_X9_62_c2Кb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

264 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

265 
	#NID_X9_62_c2≤b368w1
 702

	)

266 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

268 
	#SN_X9_62_c2Кb431r1
 "c2Кb431r1"

	)

269 
	#NID_X9_62_c2Кb431r1
 703

	)

270 
	#OBJ_X9_62_c2Кb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

272 
	#OBJ_X9_62_іimeCurve
 
OBJ_X9_62_ЦlЭticCurve
,1L

	)

274 
	#SN_X9_62_іime192v1
 "іime192v1"

	)

275 
	#NID_X9_62_іime192v1
 409

	)

276 
	#OBJ_X9_62_іime192v1
 
OBJ_X9_62_іimeCurve
,1L

	)

278 
	#SN_X9_62_іime192v2
 "іime192v2"

	)

279 
	#NID_X9_62_іime192v2
 410

	)

280 
	#OBJ_X9_62_іime192v2
 
OBJ_X9_62_іimeCurve
,2L

	)

282 
	#SN_X9_62_іime192v3
 "іime192v3"

	)

283 
	#NID_X9_62_іime192v3
 411

	)

284 
	#OBJ_X9_62_іime192v3
 
OBJ_X9_62_іimeCurve
,3L

	)

286 
	#SN_X9_62_іime239v1
 "іime239v1"

	)

287 
	#NID_X9_62_іime239v1
 412

	)

288 
	#OBJ_X9_62_іime239v1
 
OBJ_X9_62_іimeCurve
,4L

	)

290 
	#SN_X9_62_іime239v2
 "іime239v2"

	)

291 
	#NID_X9_62_іime239v2
 413

	)

292 
	#OBJ_X9_62_іime239v2
 
OBJ_X9_62_іimeCurve
,5L

	)

294 
	#SN_X9_62_іime239v3
 "іime239v3"

	)

295 
	#NID_X9_62_іime239v3
 414

	)

296 
	#OBJ_X9_62_іime239v3
 
OBJ_X9_62_іimeCurve
,6L

	)

298 
	#SN_X9_62_іime256v1
 "іime256v1"

	)

299 
	#NID_X9_62_іime256v1
 415

	)

300 
	#OBJ_X9_62_іime256v1
 
OBJ_X9_62_іimeCurve
,7L

	)

302 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

304 
	#SN_ecdІ_wЩh_SHA1
 "ecdІ-wЩh-SHA1"

	)

305 
	#NID_ecdІ_wЩh_SHA1
 416

	)

306 
	#OBJ_ecdІ_wЩh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

308 
	#OBJ_£cg_ЦlЭticCurve
 
OBJ_ыєicom_ђc
,0L

	)

310 
	#SN_£э112r1
 "£э112r1"

	)

311 
	#NID_£э112r1
 704

	)

312 
	#OBJ_£э112r1
 
OBJ_£cg_ЦlЭticCurve
,6L

	)

314 
	#SN_£э112r2
 "£э112r2"

	)

315 
	#NID_£э112r2
 705

	)

316 
	#OBJ_£э112r2
 
OBJ_£cg_ЦlЭticCurve
,7L

	)

318 
	#SN_£э128r1
 "£э128r1"

	)

319 
	#NID_£э128r1
 706

	)

320 
	#OBJ_£э128r1
 
OBJ_£cg_ЦlЭticCurve
,28L

	)

322 
	#SN_£э128r2
 "£э128r2"

	)

323 
	#NID_£э128r2
 707

	)

324 
	#OBJ_£э128r2
 
OBJ_£cg_ЦlЭticCurve
,29L

	)

326 
	#SN_£э160k1
 "£э160k1"

	)

327 
	#NID_£э160k1
 708

	)

328 
	#OBJ_£э160k1
 
OBJ_£cg_ЦlЭticCurve
,9L

	)

330 
	#SN_£э160r1
 "£э160r1"

	)

331 
	#NID_£э160r1
 709

	)

332 
	#OBJ_£э160r1
 
OBJ_£cg_ЦlЭticCurve
,8L

	)

334 
	#SN_£э160r2
 "£э160r2"

	)

335 
	#NID_£э160r2
 710

	)

336 
	#OBJ_£э160r2
 
OBJ_£cg_ЦlЭticCurve
,30L

	)

338 
	#SN_£э192k1
 "£э192k1"

	)

339 
	#NID_£э192k1
 711

	)

340 
	#OBJ_£э192k1
 
OBJ_£cg_ЦlЭticCurve
,31L

	)

342 
	#SN_£э224k1
 "£э224k1"

	)

343 
	#NID_£э224k1
 712

	)

344 
	#OBJ_£э224k1
 
OBJ_£cg_ЦlЭticCurve
,32L

	)

346 
	#SN_£э224r1
 "£э224r1"

	)

347 
	#NID_£э224r1
 713

	)

348 
	#OBJ_£э224r1
 
OBJ_£cg_ЦlЭticCurve
,33L

	)

350 
	#SN_£э256k1
 "£э256k1"

	)

351 
	#NID_£э256k1
 714

	)

352 
	#OBJ_£э256k1
 
OBJ_£cg_ЦlЭticCurve
,10L

	)

354 
	#SN_£э384r1
 "£э384r1"

	)

355 
	#NID_£э384r1
 715

	)

356 
	#OBJ_£э384r1
 
OBJ_£cg_ЦlЭticCurve
,34L

	)

358 
	#SN_£э521r1
 "£э521r1"

	)

359 
	#NID_£э521r1
 716

	)

360 
	#OBJ_£э521r1
 
OBJ_£cg_ЦlЭticCurve
,35L

	)

362 
	#SN_£щ113r1
 "£щ113r1"

	)

363 
	#NID_£щ113r1
 717

	)

364 
	#OBJ_£щ113r1
 
OBJ_£cg_ЦlЭticCurve
,4L

	)

366 
	#SN_£щ113r2
 "£щ113r2"

	)

367 
	#NID_£щ113r2
 718

	)

368 
	#OBJ_£щ113r2
 
OBJ_£cg_ЦlЭticCurve
,5L

	)

370 
	#SN_£щ131r1
 "£щ131r1"

	)

371 
	#NID_£щ131r1
 719

	)

372 
	#OBJ_£щ131r1
 
OBJ_£cg_ЦlЭticCurve
,22L

	)

374 
	#SN_£щ131r2
 "£щ131r2"

	)

375 
	#NID_£щ131r2
 720

	)

376 
	#OBJ_£щ131r2
 
OBJ_£cg_ЦlЭticCurve
,23L

	)

378 
	#SN_£щ163k1
 "£щ163k1"

	)

379 
	#NID_£щ163k1
 721

	)

380 
	#OBJ_£щ163k1
 
OBJ_£cg_ЦlЭticCurve
,1L

	)

382 
	#SN_£щ163r1
 "£щ163r1"

	)

383 
	#NID_£щ163r1
 722

	)

384 
	#OBJ_£щ163r1
 
OBJ_£cg_ЦlЭticCurve
,2L

	)

386 
	#SN_£щ163r2
 "£щ163r2"

	)

387 
	#NID_£щ163r2
 723

	)

388 
	#OBJ_£щ163r2
 
OBJ_£cg_ЦlЭticCurve
,15L

	)

390 
	#SN_£щ193r1
 "£щ193r1"

	)

391 
	#NID_£щ193r1
 724

	)

392 
	#OBJ_£щ193r1
 
OBJ_£cg_ЦlЭticCurve
,24L

	)

394 
	#SN_£щ193r2
 "£щ193r2"

	)

395 
	#NID_£щ193r2
 725

	)

396 
	#OBJ_£щ193r2
 
OBJ_£cg_ЦlЭticCurve
,25L

	)

398 
	#SN_£щ233k1
 "£щ233k1"

	)

399 
	#NID_£щ233k1
 726

	)

400 
	#OBJ_£щ233k1
 
OBJ_£cg_ЦlЭticCurve
,26L

	)

402 
	#SN_£щ233r1
 "£щ233r1"

	)

403 
	#NID_£щ233r1
 727

	)

404 
	#OBJ_£щ233r1
 
OBJ_£cg_ЦlЭticCurve
,27L

	)

406 
	#SN_£щ239k1
 "£щ239k1"

	)

407 
	#NID_£щ239k1
 728

	)

408 
	#OBJ_£щ239k1
 
OBJ_£cg_ЦlЭticCurve
,3L

	)

410 
	#SN_£щ283k1
 "£щ283k1"

	)

411 
	#NID_£щ283k1
 729

	)

412 
	#OBJ_£щ283k1
 
OBJ_£cg_ЦlЭticCurve
,16L

	)

414 
	#SN_£щ283r1
 "£щ283r1"

	)

415 
	#NID_£щ283r1
 730

	)

416 
	#OBJ_£щ283r1
 
OBJ_£cg_ЦlЭticCurve
,17L

	)

418 
	#SN_£щ409k1
 "£щ409k1"

	)

419 
	#NID_£щ409k1
 731

	)

420 
	#OBJ_£щ409k1
 
OBJ_£cg_ЦlЭticCurve
,36L

	)

422 
	#SN_£щ409r1
 "£щ409r1"

	)

423 
	#NID_£щ409r1
 732

	)

424 
	#OBJ_£щ409r1
 
OBJ_£cg_ЦlЭticCurve
,37L

	)

426 
	#SN_£щ571k1
 "£щ571k1"

	)

427 
	#NID_£щ571k1
 733

	)

428 
	#OBJ_£щ571k1
 
OBJ_£cg_ЦlЭticCurve
,38L

	)

430 
	#SN_£щ571r1
 "£щ571r1"

	)

431 
	#NID_£щ571r1
 734

	)

432 
	#OBJ_£щ571r1
 
OBJ_£cg_ЦlЭticCurve
,39L

	)

434 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

436 
	#SN_w≠_wsg_idm_ecid_wОs1
 "w≠-wsg-idm-ecid-wОs1"

	)

437 
	#NID_w≠_wsg_idm_ecid_wОs1
 735

	)

438 
	#OBJ_w≠_wsg_idm_ecid_wОs1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

440 
	#SN_w≠_wsg_idm_ecid_wОs3
 "w≠-wsg-idm-ecid-wОs3"

	)

441 
	#NID_w≠_wsg_idm_ecid_wОs3
 736

	)

442 
	#OBJ_w≠_wsg_idm_ecid_wОs3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

444 
	#SN_w≠_wsg_idm_ecid_wОs4
 "w≠-wsg-idm-ecid-wОs4"

	)

445 
	#NID_w≠_wsg_idm_ecid_wОs4
 737

	)

446 
	#OBJ_w≠_wsg_idm_ecid_wОs4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

448 
	#SN_w≠_wsg_idm_ecid_wОs5
 "w≠-wsg-idm-ecid-wОs5"

	)

449 
	#NID_w≠_wsg_idm_ecid_wОs5
 738

	)

450 
	#OBJ_w≠_wsg_idm_ecid_wОs5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

452 
	#SN_w≠_wsg_idm_ecid_wОs6
 "w≠-wsg-idm-ecid-wОs6"

	)

453 
	#NID_w≠_wsg_idm_ecid_wОs6
 739

	)

454 
	#OBJ_w≠_wsg_idm_ecid_wОs6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

456 
	#SN_w≠_wsg_idm_ecid_wОs7
 "w≠-wsg-idm-ecid-wОs7"

	)

457 
	#NID_w≠_wsg_idm_ecid_wОs7
 740

	)

458 
	#OBJ_w≠_wsg_idm_ecid_wОs7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

460 
	#SN_w≠_wsg_idm_ecid_wОs8
 "w≠-wsg-idm-ecid-wОs8"

	)

461 
	#NID_w≠_wsg_idm_ecid_wОs8
 741

	)

462 
	#OBJ_w≠_wsg_idm_ecid_wОs8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

464 
	#SN_w≠_wsg_idm_ecid_wОs9
 "w≠-wsg-idm-ecid-wОs9"

	)

465 
	#NID_w≠_wsg_idm_ecid_wОs9
 742

	)

466 
	#OBJ_w≠_wsg_idm_ecid_wОs9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

468 
	#SN_w≠_wsg_idm_ecid_wОs10
 "w≠-wsg-idm-ecid-wОs10"

	)

469 
	#NID_w≠_wsg_idm_ecid_wОs10
 743

	)

470 
	#OBJ_w≠_wsg_idm_ecid_wОs10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

472 
	#SN_w≠_wsg_idm_ecid_wОs11
 "w≠-wsg-idm-ecid-wОs11"

	)

473 
	#NID_w≠_wsg_idm_ecid_wОs11
 744

	)

474 
	#OBJ_w≠_wsg_idm_ecid_wОs11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

476 
	#SN_w≠_wsg_idm_ecid_wОs12
 "w≠-wsg-idm-ecid-wОs12"

	)

477 
	#NID_w≠_wsg_idm_ecid_wОs12
 745

	)

478 
	#OBJ_w≠_wsg_idm_ecid_wОs12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

480 
	#SN_€°5_cbc
 "CAST5-CBC"

	)

481 
	#LN_€°5_cbc
 "€°5-cbc"

	)

482 
	#NID_€°5_cbc
 108

	)

483 
	#OBJ_€°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

485 
	#SN_€°5_ecb
 "CAST5-ECB"

	)

486 
	#LN_€°5_ecb
 "€°5-ecb"

	)

487 
	#NID_€°5_ecb
 109

	)

489 
	#SN_€°5_cfb64
 "CAST5-CFB"

	)

490 
	#LN_€°5_cfb64
 "€°5-cfb"

	)

491 
	#NID_€°5_cfb64
 110

	)

493 
	#SN_€°5_ofb64
 "CAST5-OFB"

	)

494 
	#LN_€°5_ofb64
 "€°5-ofb"

	)

495 
	#NID_€°5_ofb64
 111

	)

497 
	#LN_pbeWЩhMD5AndCa°5_CBC
 "pbeWЩhMD5AndCa°5CBC"

	)

498 
	#NID_pbeWЩhMD5AndCa°5_CBC
 112

	)

499 
	#OBJ_pbeWЩhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

501 
	#SN_rІdsi
 "rІdsi"

	)

502 
	#LN_rІdsi
 "RSA D©®SecurЩy, Inc."

	)

503 
	#NID_rІdsi
 1

	)

504 
	#OBJ_rІdsi
 
OBJ_ISO_US
,113549L

	)

506 
	#SN_pkcs
 "pkcs"

	)

507 
	#LN_pkcs
 "RSA D©®SecurЩy, Inc. PKCS"

	)

508 
	#NID_pkcs
 2

	)

509 
	#OBJ_pkcs
 
OBJ_rІdsi
,1L

	)

511 
	#SN_pkcs1
 "pkcs1"

	)

512 
	#NID_pkcs1
 186

	)

513 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

515 
	#LN_rІEnьy±iЏ
 "rІEnьy±iЏ"

	)

516 
	#NID_rІEnьy±iЏ
 6

	)

517 
	#OBJ_rІEnьy±iЏ
 
OBJ_pkcs1
,1L

	)

519 
	#SN_md2WЩhRSAEnьy±iЏ
 "RSA-MD2"

	)

520 
	#LN_md2WЩhRSAEnьy±iЏ
 "md2WЩhRSAEnьy±iЏ"

	)

521 
	#NID_md2WЩhRSAEnьy±iЏ
 7

	)

522 
	#OBJ_md2WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,2L

	)

524 
	#SN_md4WЩhRSAEnьy±iЏ
 "RSA-MD4"

	)

525 
	#LN_md4WЩhRSAEnьy±iЏ
 "md4WЩhRSAEnьy±iЏ"

	)

526 
	#NID_md4WЩhRSAEnьy±iЏ
 396

	)

527 
	#OBJ_md4WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,3L

	)

529 
	#SN_md5WЩhRSAEnьy±iЏ
 "RSA-MD5"

	)

530 
	#LN_md5WЩhRSAEnьy±iЏ
 "md5WЩhRSAEnьy±iЏ"

	)

531 
	#NID_md5WЩhRSAEnьy±iЏ
 8

	)

532 
	#OBJ_md5WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,4L

	)

534 
	#SN_sha1WЩhRSAEnьy±iЏ
 "RSA-SHA1"

	)

535 
	#LN_sha1WЩhRSAEnьy±iЏ
 "sha1WЩhRSAEnьy±iЏ"

	)

536 
	#NID_sha1WЩhRSAEnьy±iЏ
 65

	)

537 
	#OBJ_sha1WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,5L

	)

539 
	#SN_sha256WЩhRSAEnьy±iЏ
 "RSA-SHA256"

	)

540 
	#LN_sha256WЩhRSAEnьy±iЏ
 "sha256WЩhRSAEnьy±iЏ"

	)

541 
	#NID_sha256WЩhRSAEnьy±iЏ
 668

	)

542 
	#OBJ_sha256WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,11L

	)

544 
	#SN_sha384WЩhRSAEnьy±iЏ
 "RSA-SHA384"

	)

545 
	#LN_sha384WЩhRSAEnьy±iЏ
 "sha384WЩhRSAEnьy±iЏ"

	)

546 
	#NID_sha384WЩhRSAEnьy±iЏ
 669

	)

547 
	#OBJ_sha384WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,12L

	)

549 
	#SN_sha512WЩhRSAEnьy±iЏ
 "RSA-SHA512"

	)

550 
	#LN_sha512WЩhRSAEnьy±iЏ
 "sha512WЩhRSAEnьy±iЏ"

	)

551 
	#NID_sha512WЩhRSAEnьy±iЏ
 670

	)

552 
	#OBJ_sha512WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,13L

	)

554 
	#SN_sha224WЩhRSAEnьy±iЏ
 "RSA-SHA224"

	)

555 
	#LN_sha224WЩhRSAEnьy±iЏ
 "sha224WЩhRSAEnьy±iЏ"

	)

556 
	#NID_sha224WЩhRSAEnьy±iЏ
 671

	)

557 
	#OBJ_sha224WЩhRSAEnьy±iЏ
 
OBJ_pkcs1
,14L

	)

559 
	#SN_pkcs3
 "pkcs3"

	)

560 
	#NID_pkcs3
 27

	)

561 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

563 
	#LN_dhKeyAgїemТt
 "dhKeyAgїemТt"

	)

564 
	#NID_dhKeyAgїemТt
 28

	)

565 
	#OBJ_dhKeyAgїemТt
 
OBJ_pkcs3
,1L

	)

567 
	#SN_pkcs5
 "pkcs5"

	)

568 
	#NID_pkcs5
 187

	)

569 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

571 
	#SN_pbeWЩhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

572 
	#LN_pbeWЩhMD2AndDES_CBC
 "pbeWЩhMD2AndDES-CBC"

	)

573 
	#NID_pbeWЩhMD2AndDES_CBC
 9

	)

574 
	#OBJ_pbeWЩhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

576 
	#SN_pbeWЩhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

577 
	#LN_pbeWЩhMD5AndDES_CBC
 "pbeWЩhMD5AndDES-CBC"

	)

578 
	#NID_pbeWЩhMD5AndDES_CBC
 10

	)

579 
	#OBJ_pbeWЩhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

581 
	#SN_pbeWЩhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

582 
	#LN_pbeWЩhMD2AndRC2_CBC
 "pbeWЩhMD2AndRC2-CBC"

	)

583 
	#NID_pbeWЩhMD2AndRC2_CBC
 168

	)

584 
	#OBJ_pbeWЩhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

586 
	#SN_pbeWЩhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

587 
	#LN_pbeWЩhMD5AndRC2_CBC
 "pbeWЩhMD5AndRC2-CBC"

	)

588 
	#NID_pbeWЩhMD5AndRC2_CBC
 169

	)

589 
	#OBJ_pbeWЩhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

591 
	#SN_pbeWЩhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

592 
	#LN_pbeWЩhSHA1AndDES_CBC
 "pbeWЩhSHA1AndDES-CBC"

	)

593 
	#NID_pbeWЩhSHA1AndDES_CBC
 170

	)

594 
	#OBJ_pbeWЩhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

596 
	#SN_pbeWЩhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

597 
	#LN_pbeWЩhSHA1AndRC2_CBC
 "pbeWЩhSHA1AndRC2-CBC"

	)

598 
	#NID_pbeWЩhSHA1AndRC2_CBC
 68

	)

599 
	#OBJ_pbeWЩhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

601 
	#LN_id_pbkdf2
 "PBKDF2"

	)

602 
	#NID_id_pbkdf2
 69

	)

603 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

605 
	#LN_pbes2
 "PBES2"

	)

606 
	#NID_pbes2
 161

	)

607 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

609 
	#LN_pbmac1
 "PBMAC1"

	)

610 
	#NID_pbmac1
 162

	)

611 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

613 
	#SN_pkcs7
 "pkcs7"

	)

614 
	#NID_pkcs7
 20

	)

615 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

617 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

618 
	#NID_pkcs7_d©a
 21

	)

619 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

621 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

622 
	#NID_pkcs7_sig√d
 22

	)

623 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

625 
	#LN_pkcs7_ТvЦЁed
 "pkcs7-ТvЦЁedD©a"

	)

626 
	#NID_pkcs7_ТvЦЁed
 23

	)

627 
	#OBJ_pkcs7_ТvЦЁed
 
OBJ_pkcs7
,3L

	)

629 
	#LN_pkcs7_sig√dAndEnvЦЁed
 "pkcs7-sig√dAndEnvЦЁedD©a"

	)

630 
	#NID_pkcs7_sig√dAndEnvЦЁed
 24

	)

631 
	#OBJ_pkcs7_sig√dAndEnvЦЁed
 
OBJ_pkcs7
,4L

	)

633 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

634 
	#NID_pkcs7_dige°
 25

	)

635 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

637 
	#LN_pkcs7_Тьy±ed
 "pkcs7-Тьy±edD©a"

	)

638 
	#NID_pkcs7_Тьy±ed
 26

	)

639 
	#OBJ_pkcs7_Тьy±ed
 
OBJ_pkcs7
,6L

	)

641 
	#SN_pkcs9
 "pkcs9"

	)

642 
	#NID_pkcs9
 47

	)

643 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

645 
	#LN_pkcs9_emaЮAddїss
 "emaЮAddїss"

	)

646 
	#NID_pkcs9_emaЮAddїss
 48

	)

647 
	#OBJ_pkcs9_emaЮAddїss
 
OBJ_pkcs9
,1L

	)

649 
	#LN_pkcs9_un°ruщuїdName
 "un°ruщuїdName"

	)

650 
	#NID_pkcs9_un°ruщuїdName
 49

	)

651 
	#OBJ_pkcs9_un°ruщuїdName
 
OBJ_pkcs9
,2L

	)

653 
	#LN_pkcs9_cЏЛЅTy≥
 "cЏЛЅTy≥"

	)

654 
	#NID_pkcs9_cЏЛЅTy≥
 50

	)

655 
	#OBJ_pkcs9_cЏЛЅTy≥
 
OBJ_pkcs9
,3L

	)

657 
	#LN_pkcs9_mesІgeDige°
 "mesІgeDige°"

	)

658 
	#NID_pkcs9_mesІgeDige°
 51

	)

659 
	#OBJ_pkcs9_mesІgeDige°
 
OBJ_pkcs9
,4L

	)

661 
	#LN_pkcs9_signЪgTime
 "signЪgTime"

	)

662 
	#NID_pkcs9_signЪgTime
 52

	)

663 
	#OBJ_pkcs9_signЪgTime
 
OBJ_pkcs9
,5L

	)

665 
	#LN_pkcs9_couЅФsig«tuї
 "couЅФsig«tuї"

	)

666 
	#NID_pkcs9_couЅФsig«tuї
 53

	)

667 
	#OBJ_pkcs9_couЅФsig«tuї
 
OBJ_pkcs9
,6L

	)

669 
	#LN_pkcs9_chЃЋngePassw№d
 "chЃЋngePassw№d"

	)

670 
	#NID_pkcs9_chЃЋngePassw№d
 54

	)

671 
	#OBJ_pkcs9_chЃЋngePassw№d
 
OBJ_pkcs9
,7L

	)

673 
	#LN_pkcs9_un°ruщuїdAddїss
 "un°ruщuїdAddїss"

	)

674 
	#NID_pkcs9_un°ruщuїdAddїss
 55

	)

675 
	#OBJ_pkcs9_un°ruщuїdAddїss
 
OBJ_pkcs9
,8L

	)

677 
	#LN_pkcs9_extCФtAЙribuЛs
 "exЛndedCФtifi€ЛAЙribuЛs"

	)

678 
	#NID_pkcs9_extCФtAЙribuЛs
 56

	)

679 
	#OBJ_pkcs9_extCФtAЙribuЛs
 
OBJ_pkcs9
,9L

	)

681 
	#SN_ext_їq
 "extReq"

	)

682 
	#LN_ext_їq
 "ExЛnsiЏ Reque°"

	)

683 
	#NID_ext_їq
 172

	)

684 
	#OBJ_ext_їq
 
OBJ_pkcs9
,14L

	)

686 
	#SN_SMIMEC≠abЮЩЫs
 "SMIME-CAPS"

	)

687 
	#LN_SMIMEC≠abЮЩЫs
 "S/MIME C≠abЮЩЫs"

	)

688 
	#NID_SMIMEC≠abЮЩЫs
 167

	)

689 
	#OBJ_SMIMEC≠abЮЩЫs
 
OBJ_pkcs9
,15L

	)

691 
	#SN_SMIME
 "SMIME"

	)

692 
	#LN_SMIME
 "S/MIME"

	)

693 
	#NID_SMIME
 188

	)

694 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

696 
	#SN_id_smime_mod
 "id-smime-mod"

	)

697 
	#NID_id_smime_mod
 189

	)

698 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

700 
	#SN_id_smime_щ
 "id-smime-щ"

	)

701 
	#NID_id_smime_щ
 190

	)

702 
	#OBJ_id_smime_щ
 
OBJ_SMIME
,1L

	)

704 
	#SN_id_smime_ѓ
 "id-smime-ѓ"

	)

705 
	#NID_id_smime_ѓ
 191

	)

706 
	#OBJ_id_smime_ѓ
 
OBJ_SMIME
,2L

	)

708 
	#SN_id_smime_Ѓg
 "id-smime-Ѓg"

	)

709 
	#NID_id_smime_Ѓg
 192

	)

710 
	#OBJ_id_smime_Ѓg
 
OBJ_SMIME
,3L

	)

712 
	#SN_id_smime_cd
 "id-smime-cd"

	)

713 
	#NID_id_smime_cd
 193

	)

714 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

716 
	#SN_id_smime_•q
 "id-smime-•q"

	)

717 
	#NID_id_smime_•q
 194

	)

718 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

720 
	#SN_id_smime_щi
 "id-smime-щi"

	)

721 
	#NID_id_smime_щi
 195

	)

722 
	#OBJ_id_smime_щi
 
OBJ_SMIME
,6L

	)

724 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

725 
	#NID_id_smime_mod_cms
 196

	)

726 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

728 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

729 
	#NID_id_smime_mod_ess
 197

	)

730 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

732 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

733 
	#NID_id_smime_mod_oid
 198

	)

734 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

736 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

737 
	#NID_id_smime_mod_msg_v3
 199

	)

738 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

740 
	#SN_id_smime_mod_Сs_eSig«tuї_88
 "id-smime-mod-Сs-eSig«tuї-88"

	)

741 
	#NID_id_smime_mod_Сs_eSig«tuї_88
 200

	)

742 
	#OBJ_id_smime_mod_Сs_eSig«tuї_88
 
OBJ_id_smime_mod
,5L

	)

744 
	#SN_id_smime_mod_Сs_eSig«tuї_97
 "id-smime-mod-Сs-eSig«tuї-97"

	)

745 
	#NID_id_smime_mod_Сs_eSig«tuї_97
 201

	)

746 
	#OBJ_id_smime_mod_Сs_eSig«tuї_97
 
OBJ_id_smime_mod
,6L

	)

748 
	#SN_id_smime_mod_Сs_eSigPёicy_88
 "id-smime-mod-Сs-eSigPёicy-88"

	)

749 
	#NID_id_smime_mod_Сs_eSigPёicy_88
 202

	)

750 
	#OBJ_id_smime_mod_Сs_eSigPёicy_88
 
OBJ_id_smime_mod
,7L

	)

752 
	#SN_id_smime_mod_Сs_eSigPёicy_97
 "id-smime-mod-Сs-eSigPёicy-97"

	)

753 
	#NID_id_smime_mod_Сs_eSigPёicy_97
 203

	)

754 
	#OBJ_id_smime_mod_Сs_eSigPёicy_97
 
OBJ_id_smime_mod
,8L

	)

756 
	#SN_id_smime_щ_їыЭt
 "id-smime-щ-їыЭt"

	)

757 
	#NID_id_smime_щ_їыЭt
 204

	)

758 
	#OBJ_id_smime_щ_їыЭt
 
OBJ_id_smime_щ
,1L

	)

760 
	#SN_id_smime_щ_authD©a
 "id-smime-щ-authD©a"

	)

761 
	#NID_id_smime_щ_authD©a
 205

	)

762 
	#OBJ_id_smime_щ_authD©a
 
OBJ_id_smime_щ
,2L

	)

764 
	#SN_id_smime_щ_publishCФt
 "id-smime-щ-publishCФt"

	)

765 
	#NID_id_smime_щ_publishCФt
 206

	)

766 
	#OBJ_id_smime_щ_publishCФt
 
OBJ_id_smime_щ
,3L

	)

768 
	#SN_id_smime_щ_TSTInfo
 "id-smime-щ-TSTInfo"

	)

769 
	#NID_id_smime_щ_TSTInfo
 207

	)

770 
	#OBJ_id_smime_щ_TSTInfo
 
OBJ_id_smime_щ
,4L

	)

772 
	#SN_id_smime_щ_TDTInfo
 "id-smime-щ-TDTInfo"

	)

773 
	#NID_id_smime_щ_TDTInfo
 208

	)

774 
	#OBJ_id_smime_щ_TDTInfo
 
OBJ_id_smime_щ
,5L

	)

776 
	#SN_id_smime_щ_cЏЛЅInfo
 "id-smime-щ-cЏЛЅInfo"

	)

777 
	#NID_id_smime_щ_cЏЛЅInfo
 209

	)

778 
	#OBJ_id_smime_щ_cЏЛЅInfo
 
OBJ_id_smime_щ
,6L

	)

780 
	#SN_id_smime_щ_DVCSReque°D©a
 "id-smime-щ-DVCSReque°D©a"

	)

781 
	#NID_id_smime_щ_DVCSReque°D©a
 210

	)

782 
	#OBJ_id_smime_щ_DVCSReque°D©a
 
OBJ_id_smime_щ
,7L

	)

784 
	#SN_id_smime_щ_DVCSRe•Џ£D©a
 "id-smime-щ-DVCSRe•Џ£D©a"

	)

785 
	#NID_id_smime_щ_DVCSRe•Џ£D©a
 211

	)

786 
	#OBJ_id_smime_щ_DVCSRe•Џ£D©a
 
OBJ_id_smime_щ
,8L

	)

788 
	#SN_id_smime_ѓ_їыЭtReque°
 "id-smime-ѓ-їыЭtReque°"

	)

789 
	#NID_id_smime_ѓ_їыЭtReque°
 212

	)

790 
	#OBJ_id_smime_ѓ_їыЭtReque°
 
OBJ_id_smime_ѓ
,1L

	)

792 
	#SN_id_smime_ѓ_£curЩyLabЦ
 "id-smime-ѓ-£curЩyLabЦ"

	)

793 
	#NID_id_smime_ѓ_£curЩyLabЦ
 213

	)

794 
	#OBJ_id_smime_ѓ_£curЩyLabЦ
 
OBJ_id_smime_ѓ
,2L

	)

796 
	#SN_id_smime_ѓ_mlExЈndHi°№y
 "id-smime-ѓ-mlExЈndHi°№y"

	)

797 
	#NID_id_smime_ѓ_mlExЈndHi°№y
 214

	)

798 
	#OBJ_id_smime_ѓ_mlExЈndHi°№y
 
OBJ_id_smime_ѓ
,3L

	)

800 
	#SN_id_smime_ѓ_cЏЛЅHЪt
 "id-smime-ѓ-cЏЛЅHЪt"

	)

801 
	#NID_id_smime_ѓ_cЏЛЅHЪt
 215

	)

802 
	#OBJ_id_smime_ѓ_cЏЛЅHЪt
 
OBJ_id_smime_ѓ
,4L

	)

804 
	#SN_id_smime_ѓ_msgSigDige°
 "id-smime-ѓ-msgSigDige°"

	)

805 
	#NID_id_smime_ѓ_msgSigDige°
 216

	)

806 
	#OBJ_id_smime_ѓ_msgSigDige°
 
OBJ_id_smime_ѓ
,5L

	)

808 
	#SN_id_smime_ѓ_Т€pCЏЛЅTy≥
 "id-smime-ѓ-Т€pCЏЛЅTy≥"

	)

809 
	#NID_id_smime_ѓ_Т€pCЏЛЅTy≥
 217

	)

810 
	#OBJ_id_smime_ѓ_Т€pCЏЛЅTy≥
 
OBJ_id_smime_ѓ
,6L

	)

812 
	#SN_id_smime_ѓ_cЏЛЅIdТtifЫr
 "id-smime-ѓ-cЏЛЅIdТtifЫr"

	)

813 
	#NID_id_smime_ѓ_cЏЛЅIdТtifЫr
 218

	)

814 
	#OBJ_id_smime_ѓ_cЏЛЅIdТtifЫr
 
OBJ_id_smime_ѓ
,7L

	)

816 
	#SN_id_smime_ѓ_macVЃue
 "id-smime-ѓ-macVЃue"

	)

817 
	#NID_id_smime_ѓ_macVЃue
 219

	)

818 
	#OBJ_id_smime_ѓ_macVЃue
 
OBJ_id_smime_ѓ
,8L

	)

820 
	#SN_id_smime_ѓ_equivЃТtLabЦs
 "id-smime-ѓ-equivЃТtLabЦs"

	)

821 
	#NID_id_smime_ѓ_equivЃТtLabЦs
 220

	)

822 
	#OBJ_id_smime_ѓ_equivЃТtLabЦs
 
OBJ_id_smime_ѓ
,9L

	)

824 
	#SN_id_smime_ѓ_cЏЛЅReгїnы
 "id-smime-ѓ-cЏЛЅReгїnы"

	)

825 
	#NID_id_smime_ѓ_cЏЛЅReгїnы
 221

	)

826 
	#OBJ_id_smime_ѓ_cЏЛЅReгїnы
 
OBJ_id_smime_ѓ
,10L

	)

828 
	#SN_id_smime_ѓ_ТьypKeyPїf
 "id-smime-ѓ-ТьypKeyPїf"

	)

829 
	#NID_id_smime_ѓ_ТьypKeyPїf
 222

	)

830 
	#OBJ_id_smime_ѓ_ТьypKeyPїf
 
OBJ_id_smime_ѓ
,11L

	)

832 
	#SN_id_smime_ѓ_signЪgCФtifi€Л
 "id-smime-ѓ-signЪgCФtifi€Л"

	)

833 
	#NID_id_smime_ѓ_signЪgCФtifi€Л
 223

	)

834 
	#OBJ_id_smime_ѓ_signЪgCФtifi€Л
 
OBJ_id_smime_ѓ
,12L

	)

836 
	#SN_id_smime_ѓ_smimeEnьy±CФts
 "id-smime-ѓ-smimeEnьy±CФts"

	)

837 
	#NID_id_smime_ѓ_smimeEnьy±CФts
 224

	)

838 
	#OBJ_id_smime_ѓ_smimeEnьy±CФts
 
OBJ_id_smime_ѓ
,13L

	)

840 
	#SN_id_smime_ѓ_timeSПmpTokТ
 "id-smime-ѓ-timeSПmpTokТ"

	)

841 
	#NID_id_smime_ѓ_timeSПmpTokТ
 225

	)

842 
	#OBJ_id_smime_ѓ_timeSПmpTokТ
 
OBJ_id_smime_ѓ
,14L

	)

844 
	#SN_id_smime_ѓ_Сs_sigPёicyId
 "id-smime-ѓ-Сs-sigPёicyId"

	)

845 
	#NID_id_smime_ѓ_Сs_sigPёicyId
 226

	)

846 
	#OBJ_id_smime_ѓ_Сs_sigPёicyId
 
OBJ_id_smime_ѓ
,15L

	)

848 
	#SN_id_smime_ѓ_Сs_commЩmТtTy≥
 "id-smime-ѓ-Сs-commЩmТtTy≥"

	)

849 
	#NID_id_smime_ѓ_Сs_commЩmТtTy≥
 227

	)

850 
	#OBJ_id_smime_ѓ_Сs_commЩmТtTy≥
 
OBJ_id_smime_ѓ
,16L

	)

852 
	#SN_id_smime_ѓ_Сs_sig√rLo€tiЏ
 "id-smime-ѓ-Сs-sig√rLo€tiЏ"

	)

853 
	#NID_id_smime_ѓ_Сs_sig√rLo€tiЏ
 228

	)

854 
	#OBJ_id_smime_ѓ_Сs_sig√rLo€tiЏ
 
OBJ_id_smime_ѓ
,17L

	)

856 
	#SN_id_smime_ѓ_Сs_sig√rAЙr
 "id-smime-ѓ-Сs-sig√rAЙr"

	)

857 
	#NID_id_smime_ѓ_Сs_sig√rAЙr
 229

	)

858 
	#OBJ_id_smime_ѓ_Сs_sig√rAЙr
 
OBJ_id_smime_ѓ
,18L

	)

860 
	#SN_id_smime_ѓ_Сs_ўhФSigCФt
 "id-smime-ѓ-Сs-ўhФSigCФt"

	)

861 
	#NID_id_smime_ѓ_Сs_ўhФSigCФt
 230

	)

862 
	#OBJ_id_smime_ѓ_Сs_ўhФSigCФt
 
OBJ_id_smime_ѓ
,19L

	)

864 
	#SN_id_smime_ѓ_Сs_cЏЛЅTime°amp
 "id-smime-ѓ-Сs-cЏЛЅTime°amp"

	)

865 
	#NID_id_smime_ѓ_Сs_cЏЛЅTime°amp
 231

	)

866 
	#OBJ_id_smime_ѓ_Сs_cЏЛЅTime°amp
 
OBJ_id_smime_ѓ
,20L

	)

868 
	#SN_id_smime_ѓ_Сs_CФtifi€ЛRefs
 "id-smime-ѓ-Сs-CФtifi€ЛRefs"

	)

869 
	#NID_id_smime_ѓ_Сs_CФtifi€ЛRefs
 232

	)

870 
	#OBJ_id_smime_ѓ_Сs_CФtifi€ЛRefs
 
OBJ_id_smime_ѓ
,21L

	)

872 
	#SN_id_smime_ѓ_Сs_Revo€tiЏRefs
 "id-smime-ѓ-Сs-Revo€tiЏRefs"

	)

873 
	#NID_id_smime_ѓ_Сs_Revo€tiЏRefs
 233

	)

874 
	#OBJ_id_smime_ѓ_Сs_Revo€tiЏRefs
 
OBJ_id_smime_ѓ
,22L

	)

876 
	#SN_id_smime_ѓ_Сs_ыєVЃues
 "id-smime-ѓ-Сs-ыєVЃues"

	)

877 
	#NID_id_smime_ѓ_Сs_ыєVЃues
 234

	)

878 
	#OBJ_id_smime_ѓ_Сs_ыєVЃues
 
OBJ_id_smime_ѓ
,23L

	)

880 
	#SN_id_smime_ѓ_Сs_їvo€tiЏVЃues
 "id-smime-ѓ-Сs-їvo€tiЏVЃues"

	)

881 
	#NID_id_smime_ѓ_Сs_їvo€tiЏVЃues
 235

	)

882 
	#OBJ_id_smime_ѓ_Сs_їvo€tiЏVЃues
 
OBJ_id_smime_ѓ
,24L

	)

884 
	#SN_id_smime_ѓ_Сs_escTimeSПmp
 "id-smime-ѓ-Сs-escTimeSПmp"

	)

885 
	#NID_id_smime_ѓ_Сs_escTimeSПmp
 236

	)

886 
	#OBJ_id_smime_ѓ_Сs_escTimeSПmp
 
OBJ_id_smime_ѓ
,25L

	)

888 
	#SN_id_smime_ѓ_Сs_ыєCRLTime°amp
 "id-smime-ѓ-Сs-ыєCRLTime°amp"

	)

889 
	#NID_id_smime_ѓ_Сs_ыєCRLTime°amp
 237

	)

890 
	#OBJ_id_smime_ѓ_Сs_ыєCRLTime°amp
 
OBJ_id_smime_ѓ
,26L

	)

892 
	#SN_id_smime_ѓ_Сs_ђchiveTimeSПmp
 "id-smime-ѓ-Сs-ђchiveTimeSПmp"

	)

893 
	#NID_id_smime_ѓ_Сs_ђchiveTimeSПmp
 238

	)

894 
	#OBJ_id_smime_ѓ_Сs_ђchiveTimeSПmp
 
OBJ_id_smime_ѓ
,27L

	)

896 
	#SN_id_smime_ѓ_sig«tuїTy≥
 "id-smime-ѓ-sig«tuїTy≥"

	)

897 
	#NID_id_smime_ѓ_sig«tuїTy≥
 239

	)

898 
	#OBJ_id_smime_ѓ_sig«tuїTy≥
 
OBJ_id_smime_ѓ
,28L

	)

900 
	#SN_id_smime_ѓ_dvcs_dvc
 "id-smime-ѓ-dvcs-dvc"

	)

901 
	#NID_id_smime_ѓ_dvcs_dvc
 240

	)

902 
	#OBJ_id_smime_ѓ_dvcs_dvc
 
OBJ_id_smime_ѓ
,29L

	)

904 
	#SN_id_smime_Ѓg_ESDHwЩh3DES
 "id-smime-Ѓg-ESDHwЩh3DES"

	)

905 
	#NID_id_smime_Ѓg_ESDHwЩh3DES
 241

	)

906 
	#OBJ_id_smime_Ѓg_ESDHwЩh3DES
 
OBJ_id_smime_Ѓg
,1L

	)

908 
	#SN_id_smime_Ѓg_ESDHwЩhRC2
 "id-smime-Ѓg-ESDHwЩhRC2"

	)

909 
	#NID_id_smime_Ѓg_ESDHwЩhRC2
 242

	)

910 
	#OBJ_id_smime_Ѓg_ESDHwЩhRC2
 
OBJ_id_smime_Ѓg
,2L

	)

912 
	#SN_id_smime_Ѓg_3DESwњp
 "id-smime-Ѓg-3DESwњp"

	)

913 
	#NID_id_smime_Ѓg_3DESwњp
 243

	)

914 
	#OBJ_id_smime_Ѓg_3DESwњp
 
OBJ_id_smime_Ѓg
,3L

	)

916 
	#SN_id_smime_Ѓg_RC2wњp
 "id-smime-Ѓg-RC2wњp"

	)

917 
	#NID_id_smime_Ѓg_RC2wњp
 244

	)

918 
	#OBJ_id_smime_Ѓg_RC2wњp
 
OBJ_id_smime_Ѓg
,4L

	)

920 
	#SN_id_smime_Ѓg_ESDH
 "id-smime-Ѓg-ESDH"

	)

921 
	#NID_id_smime_Ѓg_ESDH
 245

	)

922 
	#OBJ_id_smime_Ѓg_ESDH
 
OBJ_id_smime_Ѓg
,5L

	)

924 
	#SN_id_smime_Ѓg_CMS3DESwњp
 "id-smime-Ѓg-CMS3DESwњp"

	)

925 
	#NID_id_smime_Ѓg_CMS3DESwњp
 246

	)

926 
	#OBJ_id_smime_Ѓg_CMS3DESwњp
 
OBJ_id_smime_Ѓg
,6L

	)

928 
	#SN_id_smime_Ѓg_CMSRC2wњp
 "id-smime-Ѓg-CMSRC2wњp"

	)

929 
	#NID_id_smime_Ѓg_CMSRC2wњp
 247

	)

930 
	#OBJ_id_smime_Ѓg_CMSRC2wњp
 
OBJ_id_smime_Ѓg
,7L

	)

932 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

933 
	#NID_id_smime_cd_ld≠
 248

	)

934 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

936 
	#SN_id_smime_•q_Сs_sqt_uri
 "id-smime-•q-Сs-sqt-uri"

	)

937 
	#NID_id_smime_•q_Сs_sqt_uri
 249

	)

938 
	#OBJ_id_smime_•q_Сs_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

940 
	#SN_id_smime_•q_Сs_sqt_unўiы
 "id-smime-•q-Сs-sqt-unўiы"

	)

941 
	#NID_id_smime_•q_Сs_sqt_unўiы
 250

	)

942 
	#OBJ_id_smime_•q_Сs_sqt_unўiы
 
OBJ_id_smime_•q
,2L

	)

944 
	#SN_id_smime_щi_Сs_іoofOfOrigЪ
 "id-smime-щi-Сs-іoofOfOrigЪ"

	)

945 
	#NID_id_smime_щi_Сs_іoofOfOrigЪ
 251

	)

946 
	#OBJ_id_smime_щi_Сs_іoofOfOrigЪ
 
OBJ_id_smime_щi
,1L

	)

948 
	#SN_id_smime_щi_Сs_іoofOfReыЭt
 "id-smime-щi-Сs-іoofOfReыЭt"

	)

949 
	#NID_id_smime_щi_Сs_іoofOfReыЭt
 252

	)

950 
	#OBJ_id_smime_щi_Сs_іoofOfReыЭt
 
OBJ_id_smime_щi
,2L

	)

952 
	#SN_id_smime_щi_Сs_іoofOfDЦivФy
 "id-smime-щi-Сs-іoofOfDЦivФy"

	)

953 
	#NID_id_smime_щi_Сs_іoofOfDЦivФy
 253

	)

954 
	#OBJ_id_smime_щi_Сs_іoofOfDЦivФy
 
OBJ_id_smime_щi
,3L

	)

956 
	#SN_id_smime_щi_Сs_іoofOfSТdФ
 "id-smime-щi-Сs-іoofOfSТdФ"

	)

957 
	#NID_id_smime_щi_Сs_іoofOfSТdФ
 254

	)

958 
	#OBJ_id_smime_щi_Сs_іoofOfSТdФ
 
OBJ_id_smime_щi
,4L

	)

960 
	#SN_id_smime_щi_Сs_іoofOfAµrovЃ
 "id-smime-щi-Сs-іoofOfAµrovЃ"

	)

961 
	#NID_id_smime_щi_Сs_іoofOfAµrovЃ
 255

	)

962 
	#OBJ_id_smime_щi_Сs_іoofOfAµrovЃ
 
OBJ_id_smime_щi
,5L

	)

964 
	#SN_id_smime_щi_Сs_іoofOfCї©iЏ
 "id-smime-щi-Сs-іoofOfCї©iЏ"

	)

965 
	#NID_id_smime_щi_Сs_іoofOfCї©iЏ
 256

	)

966 
	#OBJ_id_smime_щi_Сs_іoofOfCї©iЏ
 
OBJ_id_smime_щi
,6L

	)

968 
	#LN_дЫndlyName
 "дЫndlyName"

	)

969 
	#NID_дЫndlyName
 156

	)

970 
	#OBJ_дЫndlyName
 
OBJ_pkcs9
,20L

	)

972 
	#LN_lo€lKeyID
 "lo€lKeyID"

	)

973 
	#NID_lo€lKeyID
 157

	)

974 
	#OBJ_lo€lKeyID
 
OBJ_pkcs9
,21L

	)

976 
	#SN_ms_c•_«me
 "CSPName"

	)

977 
	#LN_ms_c•_«me
 "Miьosoб CSP Name"

	)

978 
	#NID_ms_c•_«me
 417

	)

979 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

981 
	#OBJ_ыєTy≥s
 
OBJ_pkcs9
,22L

	)

983 
	#LN_x509CФtifi€Л
 "x509CФtifi€Л"

	)

984 
	#NID_x509CФtifi€Л
 158

	)

985 
	#OBJ_x509CФtifi€Л
 
OBJ_ыєTy≥s
,1L

	)

987 
	#LN_sdsiCФtifi€Л
 "sdsiCФtifi€Л"

	)

988 
	#NID_sdsiCФtifi€Л
 159

	)

989 
	#OBJ_sdsiCФtifi€Л
 
OBJ_ыєTy≥s
,2L

	)

991 
	#OBJ_ьlTy≥s
 
OBJ_pkcs9
,23L

	)

993 
	#LN_x509CЊ
 "x509CЊ"

	)

994 
	#NID_x509CЊ
 160

	)

995 
	#OBJ_x509CЊ
 
OBJ_ьlTy≥s
,1L

	)

997 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

999 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1001 
	#SN_pbe_WЩhSHA1And128BЩRC4
 "PBE-SHA1-RC4-128"

	)

1002 
	#LN_pbe_WЩhSHA1And128BЩRC4
 "pbeWЩhSHA1And128BЩRC4"

	)

1003 
	#NID_pbe_WЩhSHA1And128BЩRC4
 144

	)

1004 
	#OBJ_pbe_WЩhSHA1And128BЩRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1006 
	#SN_pbe_WЩhSHA1And40BЩRC4
 "PBE-SHA1-RC4-40"

	)

1007 
	#LN_pbe_WЩhSHA1And40BЩRC4
 "pbeWЩhSHA1And40BЩRC4"

	)

1008 
	#NID_pbe_WЩhSHA1And40BЩRC4
 145

	)

1009 
	#OBJ_pbe_WЩhSHA1And40BЩRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1011 
	#SN_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 "PBE-SHA1-3DES"

	)

1012 
	#LN_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 "pbeWЩhSHA1And3-KeyTrЭЋDES-CBC"

	)

1013 
	#NID_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 146

	)

1014 
	#OBJ_pbe_WЩhSHA1And3_Key_TrЭЋDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1016 
	#SN_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 "PBE-SHA1-2DES"

	)

1017 
	#LN_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 "pbeWЩhSHA1And2-KeyTrЭЋDES-CBC"

	)

1018 
	#NID_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 147

	)

1019 
	#OBJ_pbe_WЩhSHA1And2_Key_TrЭЋDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1021 
	#SN_pbe_WЩhSHA1And128BЩRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1022 
	#LN_pbe_WЩhSHA1And128BЩRC2_CBC
 "pbeWЩhSHA1And128BЩRC2-CBC"

	)

1023 
	#NID_pbe_WЩhSHA1And128BЩRC2_CBC
 148

	)

1024 
	#OBJ_pbe_WЩhSHA1And128BЩRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1026 
	#SN_pbe_WЩhSHA1And40BЩRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1027 
	#LN_pbe_WЩhSHA1And40BЩRC2_CBC
 "pbeWЩhSHA1And40BЩRC2-CBC"

	)

1028 
	#NID_pbe_WЩhSHA1And40BЩRC2_CBC
 149

	)

1029 
	#OBJ_pbe_WЩhSHA1And40BЩRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1031 
	#OBJ_pkcs12_VФsiЏ1
 
OBJ_pkcs12
,10L

	)

1033 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_VФsiЏ1
,1L

	)

1035 
	#LN_keyBag
 "keyBag"

	)

1036 
	#NID_keyBag
 150

	)

1037 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1039 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1040 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1041 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1043 
	#LN_ыєBag
 "ыєBag"

	)

1044 
	#NID_ыєBag
 152

	)

1045 
	#OBJ_ыєBag
 
OBJ_pkcs12_BagIds
,3L

	)

1047 
	#LN_ьlBag
 "ьlBag"

	)

1048 
	#NID_ьlBag
 153

	)

1049 
	#OBJ_ьlBag
 
OBJ_pkcs12_BagIds
,4L

	)

1051 
	#LN_£ьСBag
 "£ьСBag"

	)

1052 
	#NID_£ьСBag
 154

	)

1053 
	#OBJ_£ьСBag
 
OBJ_pkcs12_BagIds
,5L

	)

1055 
	#LN_ІгCЏЛЅsBag
 "ІгCЏЛЅsBag"

	)

1056 
	#NID_ІгCЏЛЅsBag
 155

	)

1057 
	#OBJ_ІгCЏЛЅsBag
 
OBJ_pkcs12_BagIds
,6L

	)

1059 
	#SN_md2
 "MD2"

	)

1060 
	#LN_md2
 "md2"

	)

1061 
	#NID_md2
 3

	)

1062 
	#OBJ_md2
 
OBJ_rІdsi
,2L,2L

	)

1064 
	#SN_md4
 "MD4"

	)

1065 
	#LN_md4
 "md4"

	)

1066 
	#NID_md4
 257

	)

1067 
	#OBJ_md4
 
OBJ_rІdsi
,2L,4L

	)

1069 
	#SN_md5
 "MD5"

	)

1070 
	#LN_md5
 "md5"

	)

1071 
	#NID_md5
 4

	)

1072 
	#OBJ_md5
 
OBJ_rІdsi
,2L,5L

	)

1074 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1075 
	#LN_md5_sha1
 "md5-sha1"

	)

1076 
	#NID_md5_sha1
 114

	)

1078 
	#LN_hmacWЩhSHA1
 "hmacWЩhSHA1"

	)

1079 
	#NID_hmacWЩhSHA1
 163

	)

1080 
	#OBJ_hmacWЩhSHA1
 
OBJ_rІdsi
,2L,7L

	)

1082 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1083 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1084 
	#NID_rc2_cbc
 37

	)

1085 
	#OBJ_rc2_cbc
 
OBJ_rІdsi
,3L,2L

	)

1087 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1088 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1089 
	#NID_rc2_ecb
 38

	)

1091 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1092 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1093 
	#NID_rc2_cfb64
 39

	)

1095 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1096 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1097 
	#NID_rc2_ofb64
 40

	)

1099 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1100 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1101 
	#NID_rc2_40_cbc
 98

	)

1103 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1104 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1105 
	#NID_rc2_64_cbc
 166

	)

1107 
	#SN_rc4
 "RC4"

	)

1108 
	#LN_rc4
 "rc4"

	)

1109 
	#NID_rc4
 5

	)

1110 
	#OBJ_rc4
 
OBJ_rІdsi
,3L,4L

	)

1112 
	#SN_rc4_40
 "RC4-40"

	)

1113 
	#LN_rc4_40
 "rc4-40"

	)

1114 
	#NID_rc4_40
 97

	)

1116 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1117 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1118 
	#NID_des_ede3_cbc
 44

	)

1119 
	#OBJ_des_ede3_cbc
 
OBJ_rІdsi
,3L,7L

	)

1121 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1122 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1123 
	#NID_rc5_cbc
 120

	)

1124 
	#OBJ_rc5_cbc
 
OBJ_rІdsi
,3L,8L

	)

1126 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1127 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1128 
	#NID_rc5_ecb
 121

	)

1130 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1131 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1132 
	#NID_rc5_cfb64
 122

	)

1134 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1135 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1136 
	#NID_rc5_ofb64
 123

	)

1138 
	#SN_ms_ext_їq
 "msExtReq"

	)

1139 
	#LN_ms_ext_їq
 "Miьosoб ExЛnsiЏ Reque°"

	)

1140 
	#NID_ms_ext_їq
 171

	)

1141 
	#OBJ_ms_ext_їq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1143 
	#SN_ms_code_Ъd
 "msCodeInd"

	)

1144 
	#LN_ms_code_Ъd
 "Miьosoб IndividuЃ CodРSignЪg"

	)

1145 
	#NID_ms_code_Ъd
 134

	)

1146 
	#OBJ_ms_code_Ъd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1148 
	#SN_ms_code_com
 "msCodeCom"

	)

1149 
	#LN_ms_code_com
 "Miьosoб CommФcЯ»CodРSignЪg"

	)

1150 
	#NID_ms_code_com
 135

	)

1151 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1153 
	#SN_ms_щl_sign
 "msCTLSign"

	)

1154 
	#LN_ms_щl_sign
 "Miьosoб Tru° Li° SignЪg"

	)

1155 
	#NID_ms_щl_sign
 136

	)

1156 
	#OBJ_ms_щl_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1158 
	#SN_ms_sgc
 "msSGC"

	)

1159 
	#LN_ms_sgc
 "Miьosoб SФvФ G©ed Cry±o"

	)

1160 
	#NID_ms_sgc
 137

	)

1161 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1163 
	#SN_ms_efs
 "msEFS"

	)

1164 
	#LN_ms_efs
 "Miьosoб Enьy±ed FЮРSy°em"

	)

1165 
	#NID_ms_efs
 138

	)

1166 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1168 
	#SN_ms_smђt€rd_logЪ
 "msSmђt€rdLogЪ"

	)

1169 
	#LN_ms_smђt€rd_logЪ
 "Miьosoб Smђt€rdlogЪ"

	)

1170 
	#NID_ms_smђt€rd_logЪ
 648

	)

1171 
	#OBJ_ms_smђt€rd_logЪ
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1173 
	#SN_ms_u≤
 "msUPN"

	)

1174 
	#LN_ms_u≤
 "Miьosoб UnivФІ»PrЪcЭЃ Name"

	)

1175 
	#NID_ms_u≤
 649

	)

1176 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1178 
	#SN_idЧ_cbc
 "IDEA-CBC"

	)

1179 
	#LN_idЧ_cbc
 "idЧ-cbc"

	)

1180 
	#NID_idЧ_cbc
 34

	)

1181 
	#OBJ_idЧ_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1183 
	#SN_idЧ_ecb
 "IDEA-ECB"

	)

1184 
	#LN_idЧ_ecb
 "idЧ-ecb"

	)

1185 
	#NID_idЧ_ecb
 36

	)

1187 
	#SN_idЧ_cfb64
 "IDEA-CFB"

	)

1188 
	#LN_idЧ_cfb64
 "idЧ-cfb"

	)

1189 
	#NID_idЧ_cfb64
 35

	)

1191 
	#SN_idЧ_ofb64
 "IDEA-OFB"

	)

1192 
	#LN_idЧ_ofb64
 "idЧ-ofb"

	)

1193 
	#NID_idЧ_ofb64
 46

	)

1195 
	#SN_bf_cbc
 "BF-CBC"

	)

1196 
	#LN_bf_cbc
 "bf-cbc"

	)

1197 
	#NID_bf_cbc
 91

	)

1198 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1200 
	#SN_bf_ecb
 "BF-ECB"

	)

1201 
	#LN_bf_ecb
 "bf-ecb"

	)

1202 
	#NID_bf_ecb
 92

	)

1204 
	#SN_bf_cfb64
 "BF-CFB"

	)

1205 
	#LN_bf_cfb64
 "bf-cfb"

	)

1206 
	#NID_bf_cfb64
 93

	)

1208 
	#SN_bf_ofb64
 "BF-OFB"

	)

1209 
	#LN_bf_ofb64
 "bf-ofb"

	)

1210 
	#NID_bf_ofb64
 94

	)

1212 
	#SN_id_pkix
 "PKIX"

	)

1213 
	#NID_id_pkix
 127

	)

1214 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1216 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1217 
	#NID_id_pkix_mod
 258

	)

1218 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1220 
	#SN_id_≥
 "id-≥"

	)

1221 
	#NID_id_≥
 175

	)

1222 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1224 
	#SN_id_qt
 "id-qt"

	)

1225 
	#NID_id_qt
 259

	)

1226 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1228 
	#SN_id_kp
 "id-kp"

	)

1229 
	#NID_id_kp
 128

	)

1230 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1232 
	#SN_id_Щ
 "id-Щ"

	)

1233 
	#NID_id_Щ
 260

	)

1234 
	#OBJ_id_Щ
 
OBJ_id_pkix
,4L

	)

1236 
	#SN_id_pkЭ
 "id-pkЭ"

	)

1237 
	#NID_id_pkЭ
 261

	)

1238 
	#OBJ_id_pkЭ
 
OBJ_id_pkix
,5L

	)

1240 
	#SN_id_Ѓg
 "id-Ѓg"

	)

1241 
	#NID_id_Ѓg
 262

	)

1242 
	#OBJ_id_Ѓg
 
OBJ_id_pkix
,6L

	)

1244 
	#SN_id_cmc
 "id-cmc"

	)

1245 
	#NID_id_cmc
 263

	)

1246 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1248 
	#SN_id_Џ
 "id-Џ"

	)

1249 
	#NID_id_Џ
 264

	)

1250 
	#OBJ_id_Џ
 
OBJ_id_pkix
,8L

	)

1252 
	#SN_id_pda
 "id-pda"

	)

1253 
	#NID_id_pda
 265

	)

1254 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1256 
	#SN_id_a€
 "id-a€"

	)

1257 
	#NID_id_a€
 266

	)

1258 
	#OBJ_id_a€
 
OBJ_id_pkix
,10L

	)

1260 
	#SN_id_qcs
 "id-qcs"

	)

1261 
	#NID_id_qcs
 267

	)

1262 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1264 
	#SN_id_cщ
 "id-cщ"

	)

1265 
	#NID_id_cщ
 268

	)

1266 
	#OBJ_id_cщ
 
OBJ_id_pkix
,12L

	)

1268 
	#SN_id_µl
 "id-µl"

	)

1269 
	#NID_id_µl
 662

	)

1270 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1272 
	#SN_id_ad
 "id-ad"

	)

1273 
	#NID_id_ad
 176

	)

1274 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1276 
	#SN_id_pkix1_exґicЩ_88
 "id-pkix1-exґicЩ-88"

	)

1277 
	#NID_id_pkix1_exґicЩ_88
 269

	)

1278 
	#OBJ_id_pkix1_exґicЩ_88
 
OBJ_id_pkix_mod
,1L

	)

1280 
	#SN_id_pkix1_imґicЩ_88
 "id-pkix1-imґicЩ-88"

	)

1281 
	#NID_id_pkix1_imґicЩ_88
 270

	)

1282 
	#OBJ_id_pkix1_imґicЩ_88
 
OBJ_id_pkix_mod
,2L

	)

1284 
	#SN_id_pkix1_exґicЩ_93
 "id-pkix1-exґicЩ-93"

	)

1285 
	#NID_id_pkix1_exґicЩ_93
 271

	)

1286 
	#OBJ_id_pkix1_exґicЩ_93
 
OBJ_id_pkix_mod
,3L

	)

1288 
	#SN_id_pkix1_imґicЩ_93
 "id-pkix1-imґicЩ-93"

	)

1289 
	#NID_id_pkix1_imґicЩ_93
 272

	)

1290 
	#OBJ_id_pkix1_imґicЩ_93
 
OBJ_id_pkix_mod
,4L

	)

1292 
	#SN_id_mod_ьmf
 "id-mod-ьmf"

	)

1293 
	#NID_id_mod_ьmf
 273

	)

1294 
	#OBJ_id_mod_ьmf
 
OBJ_id_pkix_mod
,5L

	)

1296 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1297 
	#NID_id_mod_cmc
 274

	)

1298 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1300 
	#SN_id_mod_kЧ_іofЮe_88
 "id-mod-kЧ-іofЮe-88"

	)

1301 
	#NID_id_mod_kЧ_іofЮe_88
 275

	)

1302 
	#OBJ_id_mod_kЧ_іofЮe_88
 
OBJ_id_pkix_mod
,7L

	)

1304 
	#SN_id_mod_kЧ_іofЮe_93
 "id-mod-kЧ-іofЮe-93"

	)

1305 
	#NID_id_mod_kЧ_іofЮe_93
 276

	)

1306 
	#OBJ_id_mod_kЧ_іofЮe_93
 
OBJ_id_pkix_mod
,8L

	)

1308 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1309 
	#NID_id_mod_cmp
 277

	)

1310 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1312 
	#SN_id_mod_quЃifЫd_ыє_88
 "id-mod-quЃifЫd-ыє-88"

	)

1313 
	#NID_id_mod_quЃifЫd_ыє_88
 278

	)

1314 
	#OBJ_id_mod_quЃifЫd_ыє_88
 
OBJ_id_pkix_mod
,10L

	)

1316 
	#SN_id_mod_quЃifЫd_ыє_93
 "id-mod-quЃifЫd-ыє-93"

	)

1317 
	#NID_id_mod_quЃifЫd_ыє_93
 279

	)

1318 
	#OBJ_id_mod_quЃifЫd_ыє_93
 
OBJ_id_pkix_mod
,11L

	)

1320 
	#SN_id_mod_©МibuЛ_ыє
 "id-mod-©МibuЛ-ыє"

	)

1321 
	#NID_id_mod_©МibuЛ_ыє
 280

	)

1322 
	#OBJ_id_mod_©МibuЛ_ыє
 
OBJ_id_pkix_mod
,12L

	)

1324 
	#SN_id_mod_time°amp_іўocё
 "id-mod-time°amp-іўocё"

	)

1325 
	#NID_id_mod_time°amp_іўocё
 281

	)

1326 
	#OBJ_id_mod_time°amp_іўocё
 
OBJ_id_pkix_mod
,13L

	)

1328 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1329 
	#NID_id_mod_oc•
 282

	)

1330 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1332 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1333 
	#NID_id_mod_dvcs
 283

	)

1334 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1336 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1337 
	#NID_id_mod_cmp2000
 284

	)

1338 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1340 
	#SN_Ъfo_acыss
 "auth№ЩyInfoAcыss"

	)

1341 
	#LN_Ъfo_acыss
 "Auth№Щy Inf№m©iЏ Acыss"

	)

1342 
	#NID_Ъfo_acыss
 177

	)

1343 
	#OBJ_Ъfo_acыss
 
OBJ_id_≥
,1L

	)

1345 
	#SN_biomСricInfo
 "biomСricInfo"

	)

1346 
	#LN_biomСricInfo
 "BiomСriшInfo"

	)

1347 
	#NID_biomСricInfo
 285

	)

1348 
	#OBJ_biomСricInfo
 
OBJ_id_≥
,2L

	)

1350 
	#SN_qcSПЛmТts
 "qcSПЛmТts"

	)

1351 
	#NID_qcSПЛmТts
 286

	)

1352 
	#OBJ_qcSПЛmТts
 
OBJ_id_≥
,3L

	)

1354 
	#SN_ac_audЩEЅЩy
 "ac-audЩEЅЩy"

	)

1355 
	#NID_ac_audЩEЅЩy
 287

	)

1356 
	#OBJ_ac_audЩEЅЩy
 
OBJ_id_≥
,4L

	)

1358 
	#SN_ac_ПrgСЪg
 "ac-ПrgСЪg"

	)

1359 
	#NID_ac_ПrgСЪg
 288

	)

1360 
	#OBJ_ac_ПrgСЪg
 
OBJ_id_≥
,5L

	)

1362 
	#SN_ѓCЏМёs
 "ѓCЏМёs"

	)

1363 
	#NID_ѓCЏМёs
 289

	)

1364 
	#OBJ_ѓCЏМёs
 
OBJ_id_≥
,6L

	)

1366 
	#SN_sbgp_ЭAddrBlock
 "sbgp-ЭAddrBlock"

	)

1367 
	#NID_sbgp_ЭAddrBlock
 290

	)

1368 
	#OBJ_sbgp_ЭAddrBlock
 
OBJ_id_≥
,7L

	)

1370 
	#SN_sbgp_autЏomousSysNum
 "sbgp-autЏomousSysNum"

	)

1371 
	#NID_sbgp_autЏomousSysNum
 291

	)

1372 
	#OBJ_sbgp_autЏomousSysNum
 
OBJ_id_≥
,8L

	)

1374 
	#SN_sbgp_rouЛrIdТtifЫr
 "sbgp-rouЛrIdТtifЫr"

	)

1375 
	#NID_sbgp_rouЛrIdТtifЫr
 292

	)

1376 
	#OBJ_sbgp_rouЛrIdТtifЫr
 
OBJ_id_≥
,9L

	)

1378 
	#SN_ac_іoxyЪg
 "ac-іoxyЪg"

	)

1379 
	#NID_ac_іoxyЪg
 397

	)

1380 
	#OBJ_ac_іoxyЪg
 
OBJ_id_≥
,10L

	)

1382 
	#SN_sЪfo_acыss
 "subjeщInfoAcыss"

	)

1383 
	#LN_sЪfo_acыss
 "Subjeщ Inf№m©iЏ Acыss"

	)

1384 
	#NID_sЪfo_acыss
 398

	)

1385 
	#OBJ_sЪfo_acыss
 
OBJ_id_≥
,11L

	)

1387 
	#SN_іoxyCФtInfo
 "іoxyCФtInfo"

	)

1388 
	#LN_іoxyCФtInfo
 "Proxy CФtifi€Л Inf№m©iЏ"

	)

1389 
	#NID_іoxyCФtInfo
 663

	)

1390 
	#OBJ_іoxyCФtInfo
 
OBJ_id_≥
,14L

	)

1392 
	#SN_id_qt_эs
 "id-qt-эs"

	)

1393 
	#LN_id_qt_эs
 "Pёicy QuЃifЫЄCPS"

	)

1394 
	#NID_id_qt_эs
 164

	)

1395 
	#OBJ_id_qt_эs
 
OBJ_id_qt
,1L

	)

1397 
	#SN_id_qt_unўiы
 "id-qt-unўiы"

	)

1398 
	#LN_id_qt_unўiы
 "Pёicy QuЃifЫЄU£ЄNўiы"

	)

1399 
	#NID_id_qt_unўiы
 165

	)

1400 
	#OBJ_id_qt_unўiы
 
OBJ_id_qt
,2L

	)

1402 
	#SN_ЛxtNўiы
 "ЛxtNўiы"

	)

1403 
	#NID_ЛxtNўiы
 293

	)

1404 
	#OBJ_ЛxtNўiы
 
OBJ_id_qt
,3L

	)

1406 
	#SN_£rvФ_auth
 "£rvФAuth"

	)

1407 
	#LN_£rvФ_auth
 "TLS Web SФvФ AuthТti€tiЏ"

	)

1408 
	#NID_£rvФ_auth
 129

	)

1409 
	#OBJ_£rvФ_auth
 
OBJ_id_kp
,1L

	)

1411 
	#SN_юЫЅ_auth
 "юЫЅAuth"

	)

1412 
	#LN_юЫЅ_auth
 "TLS Web ClЫЅ AuthТti€tiЏ"

	)

1413 
	#NID_юЫЅ_auth
 130

	)

1414 
	#OBJ_юЫЅ_auth
 
OBJ_id_kp
,2L

	)

1416 
	#SN_code_sign
 "codeSignЪg"

	)

1417 
	#LN_code_sign
 "CodРSignЪg"

	)

1418 
	#NID_code_sign
 131

	)

1419 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1421 
	#SN_emaЮ_іўeщ
 "emaЮPrўeщiЏ"

	)

1422 
	#LN_emaЮ_іўeщ
 "E-maЮ PrўeщiЏ"

	)

1423 
	#NID_emaЮ_іўeщ
 132

	)

1424 
	#OBJ_emaЮ_іўeщ
 
OBJ_id_kp
,4L

	)

1426 
	#SN_Э£cEndSy°em
 "Э£cEndSy°em"

	)

1427 
	#LN_Э£cEndSy°em
 "IPSeшEnd Sy°em"

	)

1428 
	#NID_Э£cEndSy°em
 294

	)

1429 
	#OBJ_Э£cEndSy°em
 
OBJ_id_kp
,5L

	)

1431 
	#SN_Э£cTu¬Ц
 "Э£cTu¬Ц"

	)

1432 
	#LN_Э£cTu¬Ц
 "IPSeшTu¬Ц"

	)

1433 
	#NID_Э£cTu¬Ц
 295

	)

1434 
	#OBJ_Э£cTu¬Ц
 
OBJ_id_kp
,6L

	)

1436 
	#SN_Э£cU£r
 "Э£cU£r"

	)

1437 
	#LN_Э£cU£r
 "IPSeшU£r"

	)

1438 
	#NID_Э£cU£r
 296

	)

1439 
	#OBJ_Э£cU£r
 
OBJ_id_kp
,7L

	)

1441 
	#SN_time_°amp
 "timeSПmpЪg"

	)

1442 
	#LN_time_°amp
 "TimРSПmpЪg"

	)

1443 
	#NID_time_°amp
 133

	)

1444 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1446 
	#SN_OCSP_sign
 "OCSPSignЪg"

	)

1447 
	#LN_OCSP_sign
 "OCSP SignЪg"

	)

1448 
	#NID_OCSP_sign
 180

	)

1449 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1451 
	#SN_dvcs
 "DVCS"

	)

1452 
	#LN_dvcs
 "dvcs"

	)

1453 
	#NID_dvcs
 297

	)

1454 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1456 
	#SN_id_Щ_€PrўEncCФt
 "id-Щ-€PrўEncCФt"

	)

1457 
	#NID_id_Щ_€PrўEncCФt
 298

	)

1458 
	#OBJ_id_Щ_€PrўEncCФt
 
OBJ_id_Щ
,1L

	)

1460 
	#SN_id_Щ_signKeyPaЬTy≥s
 "id-Щ-signKeyPaЬTy≥s"

	)

1461 
	#NID_id_Щ_signKeyPaЬTy≥s
 299

	)

1462 
	#OBJ_id_Щ_signKeyPaЬTy≥s
 
OBJ_id_Щ
,2L

	)

1464 
	#SN_id_Щ_ТcKeyPaЬTy≥s
 "id-Щ-ТcKeyPaЬTy≥s"

	)

1465 
	#NID_id_Щ_ТcKeyPaЬTy≥s
 300

	)

1466 
	#OBJ_id_Щ_ТcKeyPaЬTy≥s
 
OBJ_id_Щ
,3L

	)

1468 
	#SN_id_Щ_іeгЉedSymmAlg
 "id-Щ-іeгЉedSymmAlg"

	)

1469 
	#NID_id_Щ_іeгЉedSymmAlg
 301

	)

1470 
	#OBJ_id_Щ_іeгЉedSymmAlg
 
OBJ_id_Щ
,4L

	)

1472 
	#SN_id_Щ_€KeyUpd©eInfo
 "id-Щ-€KeyUpd©eInfo"

	)

1473 
	#NID_id_Щ_€KeyUpd©eInfo
 302

	)

1474 
	#OBJ_id_Щ_€KeyUpd©eInfo
 
OBJ_id_Щ
,5L

	)

1476 
	#SN_id_Щ_cuЉТtCRL
 "id-Щ-cuЉТtCRL"

	)

1477 
	#NID_id_Щ_cuЉТtCRL
 303

	)

1478 
	#OBJ_id_Щ_cuЉТtCRL
 
OBJ_id_Щ
,6L

	)

1480 
	#SN_id_Щ_unsuµ№ЛdOIDs
 "id-Щ-unsuµ№ЛdOIDs"

	)

1481 
	#NID_id_Щ_unsuµ№ЛdOIDs
 304

	)

1482 
	#OBJ_id_Щ_unsuµ№ЛdOIDs
 
OBJ_id_Щ
,7L

	)

1484 
	#SN_id_Щ_subsьЭtiЏReque°
 "id-Щ-subsьЭtiЏReque°"

	)

1485 
	#NID_id_Щ_subsьЭtiЏReque°
 305

	)

1486 
	#OBJ_id_Щ_subsьЭtiЏReque°
 
OBJ_id_Щ
,8L

	)

1488 
	#SN_id_Щ_subsьЭtiЏRe•Џ£
 "id-Щ-subsьЭtiЏRe•Џ£"

	)

1489 
	#NID_id_Щ_subsьЭtiЏRe•Џ£
 306

	)

1490 
	#OBJ_id_Щ_subsьЭtiЏRe•Џ£
 
OBJ_id_Щ
,9L

	)

1492 
	#SN_id_Щ_keyPaЬPђamReq
 "id-Щ-keyPaЬPђamReq"

	)

1493 
	#NID_id_Щ_keyPaЬPђamReq
 307

	)

1494 
	#OBJ_id_Щ_keyPaЬPђamReq
 
OBJ_id_Щ
,10L

	)

1496 
	#SN_id_Щ_keyPaЬPђamRХ
 "id-Щ-keyPaЬPђamRХ"

	)

1497 
	#NID_id_Щ_keyPaЬPђamRХ
 308

	)

1498 
	#OBJ_id_Щ_keyPaЬPђamRХ
 
OBJ_id_Щ
,11L

	)

1500 
	#SN_id_Щ_їvPas•hњ£
 "id-Щ-їvPas•hњ£"

	)

1501 
	#NID_id_Щ_їvPas•hњ£
 309

	)

1502 
	#OBJ_id_Щ_їvPas•hњ£
 
OBJ_id_Щ
,12L

	)

1504 
	#SN_id_Щ_imґicЩCЏfЬm
 "id-Щ-imґicЩCЏfЬm"

	)

1505 
	#NID_id_Щ_imґicЩCЏfЬm
 310

	)

1506 
	#OBJ_id_Щ_imґicЩCЏfЬm
 
OBJ_id_Щ
,13L

	)

1508 
	#SN_id_Щ_cЏfЬmWaЩTime
 "id-Щ-cЏfЬmWaЩTime"

	)

1509 
	#NID_id_Щ_cЏfЬmWaЩTime
 311

	)

1510 
	#OBJ_id_Щ_cЏfЬmWaЩTime
 
OBJ_id_Щ
,14L

	)

1512 
	#SN_id_Щ_№igPKIMesІge
 "id-Щ-№igPKIMesІge"

	)

1513 
	#NID_id_Щ_№igPKIMesІge
 312

	)

1514 
	#OBJ_id_Щ_№igPKIMesІge
 
OBJ_id_Щ
,15L

	)

1516 
	#SN_id_їgCМl
 "id-їgCМl"

	)

1517 
	#NID_id_їgCМl
 313

	)

1518 
	#OBJ_id_їgCМl
 
OBJ_id_pkЭ
,1L

	)

1520 
	#SN_id_їgInfo
 "id-їgInfo"

	)

1521 
	#NID_id_їgInfo
 314

	)

1522 
	#OBJ_id_їgInfo
 
OBJ_id_pkЭ
,2L

	)

1524 
	#SN_id_їgCМl_їgTokТ
 "id-їgCМl-їgTokТ"

	)

1525 
	#NID_id_їgCМl_їgTokТ
 315

	)

1526 
	#OBJ_id_їgCМl_їgTokТ
 
OBJ_id_їgCМl
,1L

	)

1528 
	#SN_id_їgCМl_authТti€t№
 "id-їgCМl-authТti€t№"

	)

1529 
	#NID_id_їgCМl_authТti€t№
 316

	)

1530 
	#OBJ_id_їgCМl_authТti€t№
 
OBJ_id_їgCМl
,2L

	)

1532 
	#SN_id_їgCМl_pkiPubli€tiЏInfo
 "id-їgCМl-pkiPubli€tiЏInfo"

	)

1533 
	#NID_id_їgCМl_pkiPubli€tiЏInfo
 317

	)

1534 
	#OBJ_id_їgCМl_pkiPubli€tiЏInfo
 
OBJ_id_їgCМl
,3L

	)

1536 
	#SN_id_їgCМl_pkiArchiveO±iЏs
 "id-їgCМl-pkiArchiveO±iЏs"

	)

1537 
	#NID_id_їgCМl_pkiArchiveO±iЏs
 318

	)

1538 
	#OBJ_id_їgCМl_pkiArchiveO±iЏs
 
OBJ_id_їgCМl
,4L

	)

1540 
	#SN_id_їgCМl_ёdCФtID
 "id-їgCМl-ёdCФtID"

	)

1541 
	#NID_id_їgCМl_ёdCФtID
 319

	)

1542 
	#OBJ_id_їgCМl_ёdCФtID
 
OBJ_id_їgCМl
,5L

	)

1544 
	#SN_id_їgCМl_іўocёEnьKey
 "id-їgCМl-іўocёEnьKey"

	)

1545 
	#NID_id_їgCМl_іўocёEnьKey
 320

	)

1546 
	#OBJ_id_їgCМl_іўocёEnьKey
 
OBJ_id_їgCМl
,6L

	)

1548 
	#SN_id_їgInfo_utf8PaЬs
 "id-їgInfo-utf8PaЬs"

	)

1549 
	#NID_id_їgInfo_utf8PaЬs
 321

	)

1550 
	#OBJ_id_їgInfo_utf8PaЬs
 
OBJ_id_їgInfo
,1L

	)

1552 
	#SN_id_їgInfo_ыєReq
 "id-їgInfo-ыєReq"

	)

1553 
	#NID_id_їgInfo_ыєReq
 322

	)

1554 
	#OBJ_id_їgInfo_ыєReq
 
OBJ_id_їgInfo
,2L

	)

1556 
	#SN_id_Ѓg_des40
 "id-Ѓg-des40"

	)

1557 
	#NID_id_Ѓg_des40
 323

	)

1558 
	#OBJ_id_Ѓg_des40
 
OBJ_id_Ѓg
,1L

	)

1560 
	#SN_id_Ѓg_noSig«tuї
 "id-Ѓg-noSig«tuї"

	)

1561 
	#NID_id_Ѓg_noSig«tuї
 324

	)

1562 
	#OBJ_id_Ѓg_noSig«tuї
 
OBJ_id_Ѓg
,2L

	)

1564 
	#SN_id_Ѓg_dh_sig_hmac_sha1
 "id-Ѓg-dh-sig-hmac-sha1"

	)

1565 
	#NID_id_Ѓg_dh_sig_hmac_sha1
 325

	)

1566 
	#OBJ_id_Ѓg_dh_sig_hmac_sha1
 
OBJ_id_Ѓg
,3L

	)

1568 
	#SN_id_Ѓg_dh_pЁ
 "id-Ѓg-dh-pЁ"

	)

1569 
	#NID_id_Ѓg_dh_pЁ
 326

	)

1570 
	#OBJ_id_Ѓg_dh_pЁ
 
OBJ_id_Ѓg
,4L

	)

1572 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1573 
	#NID_id_cmc_°©usInfo
 327

	)

1574 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1576 
	#SN_id_cmc_idТtifi€tiЏ
 "id-cmc-idТtifi€tiЏ"

	)

1577 
	#NID_id_cmc_idТtifi€tiЏ
 328

	)

1578 
	#OBJ_id_cmc_idТtifi€tiЏ
 
OBJ_id_cmc
,2L

	)

1580 
	#SN_id_cmc_idТtЩyProof
 "id-cmc-idТtЩyProof"

	)

1581 
	#NID_id_cmc_idТtЩyProof
 329

	)

1582 
	#OBJ_id_cmc_idТtЩyProof
 
OBJ_id_cmc
,3L

	)

1584 
	#SN_id_cmc_d©aRСuЇ
 "id-cmc-d©aRСuЇ"

	)

1585 
	#NID_id_cmc_d©aRСuЇ
 330

	)

1586 
	#OBJ_id_cmc_d©aRСuЇ
 
OBJ_id_cmc
,4L

	)

1588 
	#SN_id_cmc_М™ІщiЏId
 "id-cmc-М™ІщiЏId"

	)

1589 
	#NID_id_cmc_М™ІщiЏId
 331

	)

1590 
	#OBJ_id_cmc_М™ІщiЏId
 
OBJ_id_cmc
,5L

	)

1592 
	#SN_id_cmc_£ndФNЏы
 "id-cmc-£ndФNЏы"

	)

1593 
	#NID_id_cmc_£ndФNЏы
 332

	)

1594 
	#OBJ_id_cmc_£ndФNЏы
 
OBJ_id_cmc
,6L

	)

1596 
	#SN_id_cmc_їcЭЫЅNЏы
 "id-cmc-їcЭЫЅNЏы"

	)

1597 
	#NID_id_cmc_їcЭЫЅNЏы
 333

	)

1598 
	#OBJ_id_cmc_їcЭЫЅNЏы
 
OBJ_id_cmc
,7L

	)

1600 
	#SN_id_cmc_addExЛnsiЏs
 "id-cmc-addExЛnsiЏs"

	)

1601 
	#NID_id_cmc_addExЛnsiЏs
 334

	)

1602 
	#OBJ_id_cmc_addExЛnsiЏs
 
OBJ_id_cmc
,8L

	)

1604 
	#SN_id_cmc_Тьy±edPOP
 "id-cmc-Тьy±edPOP"

	)

1605 
	#NID_id_cmc_Тьy±edPOP
 335

	)

1606 
	#OBJ_id_cmc_Тьy±edPOP
 
OBJ_id_cmc
,9L

	)

1608 
	#SN_id_cmc_deьy±edPOP
 "id-cmc-deьy±edPOP"

	)

1609 
	#NID_id_cmc_deьy±edPOP
 336

	)

1610 
	#OBJ_id_cmc_deьy±edPOP
 
OBJ_id_cmc
,10L

	)

1612 
	#SN_id_cmc_ћaPOPWЩ√ss
 "id-cmc-ћaPOPWЩ√ss"

	)

1613 
	#NID_id_cmc_ћaPOPWЩ√ss
 337

	)

1614 
	#OBJ_id_cmc_ћaPOPWЩ√ss
 
OBJ_id_cmc
,11L

	)

1616 
	#SN_id_cmc_gСCФt
 "id-cmc-gСCФt"

	)

1617 
	#NID_id_cmc_gСCФt
 338

	)

1618 
	#OBJ_id_cmc_gСCФt
 
OBJ_id_cmc
,15L

	)

1620 
	#SN_id_cmc_gСCRL
 "id-cmc-gСCRL"

	)

1621 
	#NID_id_cmc_gСCRL
 339

	)

1622 
	#OBJ_id_cmc_gСCRL
 
OBJ_id_cmc
,16L

	)

1624 
	#SN_id_cmc_їvokeReque°
 "id-cmc-їvokeReque°"

	)

1625 
	#NID_id_cmc_їvokeReque°
 340

	)

1626 
	#OBJ_id_cmc_їvokeReque°
 
OBJ_id_cmc
,17L

	)

1628 
	#SN_id_cmc_їgInfo
 "id-cmc-їgInfo"

	)

1629 
	#NID_id_cmc_їgInfo
 341

	)

1630 
	#OBJ_id_cmc_їgInfo
 
OBJ_id_cmc
,18L

	)

1632 
	#SN_id_cmc_ї•Џ£Info
 "id-cmc-ї•Џ£Info"

	)

1633 
	#NID_id_cmc_ї•Џ£Info
 342

	)

1634 
	#OBJ_id_cmc_ї•Џ£Info
 
OBJ_id_cmc
,19L

	)

1636 
	#SN_id_cmc_quФyPТdЪg
 "id-cmc-quФyPТdЪg"

	)

1637 
	#NID_id_cmc_quФyPТdЪg
 343

	)

1638 
	#OBJ_id_cmc_quФyPТdЪg
 
OBJ_id_cmc
,21L

	)

1640 
	#SN_id_cmc_pЁLЪkR™dom
 "id-cmc-pЁLЪkR™dom"

	)

1641 
	#NID_id_cmc_pЁLЪkR™dom
 344

	)

1642 
	#OBJ_id_cmc_pЁLЪkR™dom
 
OBJ_id_cmc
,22L

	)

1644 
	#SN_id_cmc_pЁLЪkWЩ√ss
 "id-cmc-pЁLЪkWЩ√ss"

	)

1645 
	#NID_id_cmc_pЁLЪkWЩ√ss
 345

	)

1646 
	#OBJ_id_cmc_pЁLЪkWЩ√ss
 
OBJ_id_cmc
,23L

	)

1648 
	#SN_id_cmc_cЏfЬmCФtAcы±™ы
 "id-cmc-cЏfЬmCФtAcы±™ы"

	)

1649 
	#NID_id_cmc_cЏfЬmCФtAcы±™ы
 346

	)

1650 
	#OBJ_id_cmc_cЏfЬmCФtAcы±™ы
 
OBJ_id_cmc
,24L

	)

1652 
	#SN_id_Џ_≥rsЏЃD©a
 "id-Џ-≥rsЏЃD©a"

	)

1653 
	#NID_id_Џ_≥rsЏЃD©a
 347

	)

1654 
	#OBJ_id_Џ_≥rsЏЃD©a
 
OBJ_id_Џ
,1L

	)

1656 
	#SN_id_pda_d©eOfBЬth
 "id-pda-d©eOfBЬth"

	)

1657 
	#NID_id_pda_d©eOfBЬth
 348

	)

1658 
	#OBJ_id_pda_d©eOfBЬth
 
OBJ_id_pda
,1L

	)

1660 
	#SN_id_pda_ґaыOfBЬth
 "id-pda-ґaыOfBЬth"

	)

1661 
	#NID_id_pda_ґaыOfBЬth
 349

	)

1662 
	#OBJ_id_pda_ґaыOfBЬth
 
OBJ_id_pda
,2L

	)

1664 
	#SN_id_pda_gТdФ
 "id-pda-gТdФ"

	)

1665 
	#NID_id_pda_gТdФ
 351

	)

1666 
	#OBJ_id_pda_gТdФ
 
OBJ_id_pda
,3L

	)

1668 
	#SN_id_pda_couЅryOfCЩizТshЭ
 "id-pda-couЅryOfCЩizТshЭ"

	)

1669 
	#NID_id_pda_couЅryOfCЩizТshЭ
 352

	)

1670 
	#OBJ_id_pda_couЅryOfCЩizТshЭ
 
OBJ_id_pda
,4L

	)

1672 
	#SN_id_pda_couЅryOfResidТы
 "id-pda-couЅryOfResidТы"

	)

1673 
	#NID_id_pda_couЅryOfResidТы
 353

	)

1674 
	#OBJ_id_pda_couЅryOfResidТы
 
OBJ_id_pda
,5L

	)

1676 
	#SN_id_a€_authТti€tiЏInfo
 "id-a€-authТti€tiЏInfo"

	)

1677 
	#NID_id_a€_authТti€tiЏInfo
 354

	)

1678 
	#OBJ_id_a€_authТti€tiЏInfo
 
OBJ_id_a€
,1L

	)

1680 
	#SN_id_a€_acыssIdТtЩy
 "id-a€-acыssIdТtЩy"

	)

1681 
	#NID_id_a€_acыssIdТtЩy
 355

	)

1682 
	#OBJ_id_a€_acыssIdТtЩy
 
OBJ_id_a€
,2L

	)

1684 
	#SN_id_a€_chђgЪgIdТtЩy
 "id-a€-chђgЪgIdТtЩy"

	)

1685 
	#NID_id_a€_chђgЪgIdТtЩy
 356

	)

1686 
	#OBJ_id_a€_chђgЪgIdТtЩy
 
OBJ_id_a€
,3L

	)

1688 
	#SN_id_a€_group
 "id-a€-group"

	)

1689 
	#NID_id_a€_group
 357

	)

1690 
	#OBJ_id_a€_group
 
OBJ_id_a€
,4L

	)

1692 
	#SN_id_a€_rёe
 "id-a€-rёe"

	)

1693 
	#NID_id_a€_rёe
 358

	)

1694 
	#OBJ_id_a€_rёe
 
OBJ_id_a€
,5L

	)

1696 
	#SN_id_a€_ТcAЙrs
 "id-a€-ТcAЙrs"

	)

1697 
	#NID_id_a€_ТcAЙrs
 399

	)

1698 
	#OBJ_id_a€_ТcAЙrs
 
OBJ_id_a€
,6L

	)

1700 
	#SN_id_qcs_pkixQCSyЅax_v1
 "id-qcs-pkixQCSyЅax-v1"

	)

1701 
	#NID_id_qcs_pkixQCSyЅax_v1
 359

	)

1702 
	#OBJ_id_qcs_pkixQCSyЅax_v1
 
OBJ_id_qcs
,1L

	)

1704 
	#SN_id_cщ_ьs
 "id-cщ-ьs"

	)

1705 
	#NID_id_cщ_ьs
 360

	)

1706 
	#OBJ_id_cщ_ьs
 
OBJ_id_cщ
,1L

	)

1708 
	#SN_id_cщ_PKID©a
 "id-cщ-PKID©a"

	)

1709 
	#NID_id_cщ_PKID©a
 361

	)

1710 
	#OBJ_id_cщ_PKID©a
 
OBJ_id_cщ
,2L

	)

1712 
	#SN_id_cщ_PKIRe•Џ£
 "id-cщ-PKIRe•Џ£"

	)

1713 
	#NID_id_cщ_PKIRe•Џ£
 362

	)

1714 
	#OBJ_id_cщ_PKIRe•Џ£
 
OBJ_id_cщ
,3L

	)

1716 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1717 
	#LN_id_µl_™yL™guage
 "AnyЖ™guage"

	)

1718 
	#NID_id_µl_™yL™guage
 664

	)

1719 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1721 
	#SN_id_µl_ЪhФЩAќ
 "id-µl-ЪhФЩAќ"

	)

1722 
	#LN_id_µl_ЪhФЩAќ
 "InhФЩЗќ"

	)

1723 
	#NID_id_µl_ЪhФЩAќ
 665

	)

1724 
	#OBJ_id_µl_ЪhФЩAќ
 
OBJ_id_µl
,1L

	)

1726 
	#SN_IndХТdТt
 "id-µl-ЪdХТdТt"

	)

1727 
	#LN_IndХТdТt
 "IndХТdТt"

	)

1728 
	#NID_IndХТdТt
 667

	)

1729 
	#OBJ_IndХТdТt
 
OBJ_id_µl
,2L

	)

1731 
	#SN_ad_OCSP
 "OCSP"

	)

1732 
	#LN_ad_OCSP
 "OCSP"

	)

1733 
	#NID_ad_OCSP
 178

	)

1734 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1736 
	#SN_ad_€_issuФs
 "€IssuФs"

	)

1737 
	#LN_ad_€_issuФs
 "CA IssuФs"

	)

1738 
	#NID_ad_€_issuФs
 179

	)

1739 
	#OBJ_ad_€_issuФs
 
OBJ_id_ad
,2L

	)

1741 
	#SN_ad_timeSПmpЪg
 "ad_time°ampЪg"

	)

1742 
	#LN_ad_timeSПmpЪg
 "AD TimРSПmpЪg"

	)

1743 
	#NID_ad_timeSПmpЪg
 363

	)

1744 
	#OBJ_ad_timeSПmpЪg
 
OBJ_id_ad
,3L

	)

1746 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1747 
	#LN_ad_dvcs
 "ad dvcs"

	)

1748 
	#NID_ad_dvcs
 364

	)

1749 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1751 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1753 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•Џ£"

	)

1754 
	#LN_id_pkix_OCSP_basic
 "BasiшOCSP Re•Џ£"

	)

1755 
	#NID_id_pkix_OCSP_basic
 365

	)

1756 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1758 
	#SN_id_pkix_OCSP_NЏы
 "NЏы"

	)

1759 
	#LN_id_pkix_OCSP_NЏы
 "OCSP NЏы"

	)

1760 
	#NID_id_pkix_OCSP_NЏы
 366

	)

1761 
	#OBJ_id_pkix_OCSP_NЏы
 
OBJ_id_pkix_OCSP
,2L

	)

1763 
	#SN_id_pkix_OCSP_CЊID
 "CЊID"

	)

1764 
	#LN_id_pkix_OCSP_CЊID
 "OCSP CRL ID"

	)

1765 
	#NID_id_pkix_OCSP_CЊID
 367

	)

1766 
	#OBJ_id_pkix_OCSP_CЊID
 
OBJ_id_pkix_OCSP
,3L

	)

1768 
	#SN_id_pkix_OCSP_acы±abЋRe•Џ£s
 "acы±abЋRe•Џ£s"

	)

1769 
	#LN_id_pkix_OCSP_acы±abЋRe•Џ£s
 "Acы±abЋ OCSP Re•Џ£s"

	)

1770 
	#NID_id_pkix_OCSP_acы±abЋRe•Џ£s
 368

	)

1771 
	#OBJ_id_pkix_OCSP_acы±abЋRe•Џ£s
 
OBJ_id_pkix_OCSP
,4L

	)

1773 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1774 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NЎCheck"

	)

1775 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1776 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1778 
	#SN_id_pkix_OCSP_ђchiveCutoff
 "ђchiveCutoff"

	)

1779 
	#LN_id_pkix_OCSP_ђchiveCutoff
 "OCSP ArchivРCutoff"

	)

1780 
	#NID_id_pkix_OCSP_ђchiveCutoff
 370

	)

1781 
	#OBJ_id_pkix_OCSP_ђchiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1783 
	#SN_id_pkix_OCSP_£rviыLo€t№
 "£rviыLo€t№"

	)

1784 
	#LN_id_pkix_OCSP_£rviыLo€t№
 "OCSP SФviы Lo€t№"

	)

1785 
	#NID_id_pkix_OCSP_£rviыLo€t№
 371

	)

1786 
	#OBJ_id_pkix_OCSP_£rviыLo€t№
 
OBJ_id_pkix_OCSP
,7L

	)

1788 
	#SN_id_pkix_OCSP_exЛndedSПtus
 "exЛndedSПtus"

	)

1789 
	#LN_id_pkix_OCSP_exЛndedSПtus
 "ExЛnded OCSP SПtus"

	)

1790 
	#NID_id_pkix_OCSP_exЛndedSПtus
 372

	)

1791 
	#OBJ_id_pkix_OCSP_exЛndedSПtus
 
OBJ_id_pkix_OCSP
,8L

	)

1793 
	#SN_id_pkix_OCSP_vЃid
 "vЃid"

	)

1794 
	#NID_id_pkix_OCSP_vЃid
 373

	)

1795 
	#OBJ_id_pkix_OCSP_vЃid
 
OBJ_id_pkix_OCSP
,9L

	)

1797 
	#SN_id_pkix_OCSP_Јth
 "Јth"

	)

1798 
	#NID_id_pkix_OCSP_Јth
 374

	)

1799 
	#OBJ_id_pkix_OCSP_Јth
 
OBJ_id_pkix_OCSP
,10L

	)

1801 
	#SN_id_pkix_OCSP_Мu°Roў
 "Мu°Roў"

	)

1802 
	#LN_id_pkix_OCSP_Мu°Roў
 "Tru° Roў"

	)

1803 
	#NID_id_pkix_OCSP_Мu°Roў
 375

	)

1804 
	#OBJ_id_pkix_OCSP_Мu°Roў
 
OBJ_id_pkix_OCSP
,11L

	)

1806 
	#SN_Ѓg№Щhm
 "Ѓg№Щhm"

	)

1807 
	#LN_Ѓg№Щhm
 "Ѓg№Щhm"

	)

1808 
	#NID_Ѓg№Щhm
 376

	)

1809 
	#OBJ_Ѓg№Щhm
 1L,3L,14L,3L,2L

	)

1811 
	#SN_md5WЩhRSA
 "RSA-NP-MD5"

	)

1812 
	#LN_md5WЩhRSA
 "md5WЩhRSA"

	)

1813 
	#NID_md5WЩhRSA
 104

	)

1814 
	#OBJ_md5WЩhRSA
 
OBJ_Ѓg№Щhm
,3L

	)

1816 
	#SN_des_ecb
 "DES-ECB"

	)

1817 
	#LN_des_ecb
 "des-ecb"

	)

1818 
	#NID_des_ecb
 29

	)

1819 
	#OBJ_des_ecb
 
OBJ_Ѓg№Щhm
,6L

	)

1821 
	#SN_des_cbc
 "DES-CBC"

	)

1822 
	#LN_des_cbc
 "des-cbc"

	)

1823 
	#NID_des_cbc
 31

	)

1824 
	#OBJ_des_cbc
 
OBJ_Ѓg№Щhm
,7L

	)

1826 
	#SN_des_ofb64
 "DES-OFB"

	)

1827 
	#LN_des_ofb64
 "des-ofb"

	)

1828 
	#NID_des_ofb64
 45

	)

1829 
	#OBJ_des_ofb64
 
OBJ_Ѓg№Щhm
,8L

	)

1831 
	#SN_des_cfb64
 "DES-CFB"

	)

1832 
	#LN_des_cfb64
 "des-cfb"

	)

1833 
	#NID_des_cfb64
 30

	)

1834 
	#OBJ_des_cfb64
 
OBJ_Ѓg№Щhm
,9L

	)

1836 
	#SN_rІSig«tuї
 "rІSig«tuї"

	)

1837 
	#NID_rІSig«tuї
 377

	)

1838 
	#OBJ_rІSig«tuї
 
OBJ_Ѓg№Щhm
,11L

	)

1840 
	#SN_dІ_2
 "DSA-ёd"

	)

1841 
	#LN_dІ_2
 "dІEnьy±iЏ-ёd"

	)

1842 
	#NID_dІ_2
 67

	)

1843 
	#OBJ_dІ_2
 
OBJ_Ѓg№Щhm
,12L

	)

1845 
	#SN_dІWЩhSHA
 "DSA-SHA"

	)

1846 
	#LN_dІWЩhSHA
 "dІWЩhSHA"

	)

1847 
	#NID_dІWЩhSHA
 66

	)

1848 
	#OBJ_dІWЩhSHA
 
OBJ_Ѓg№Щhm
,13L

	)

1850 
	#SN_shaWЩhRSAEnьy±iЏ
 "RSA-SHA"

	)

1851 
	#LN_shaWЩhRSAEnьy±iЏ
 "shaWЩhRSAEnьy±iЏ"

	)

1852 
	#NID_shaWЩhRSAEnьy±iЏ
 42

	)

1853 
	#OBJ_shaWЩhRSAEnьy±iЏ
 
OBJ_Ѓg№Щhm
,15L

	)

1855 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1856 
	#LN_des_ede_ecb
 "des-ede"

	)

1857 
	#NID_des_ede_ecb
 32

	)

1858 
	#OBJ_des_ede_ecb
 
OBJ_Ѓg№Щhm
,17L

	)

1860 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1861 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1862 
	#NID_des_ede3_ecb
 33

	)

1864 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1865 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1866 
	#NID_des_ede_cbc
 43

	)

1868 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1869 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1870 
	#NID_des_ede_cfb64
 60

	)

1872 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1873 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1874 
	#NID_des_ede3_cfb64
 61

	)

1876 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1877 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1878 
	#NID_des_ede_ofb64
 62

	)

1880 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1881 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1882 
	#NID_des_ede3_ofb64
 63

	)

1884 
	#SN_desx_cbc
 "DESX-CBC"

	)

1885 
	#LN_desx_cbc
 "desx-cbc"

	)

1886 
	#NID_desx_cbc
 80

	)

1888 
	#SN_sha
 "SHA"

	)

1889 
	#LN_sha
 "sha"

	)

1890 
	#NID_sha
 41

	)

1891 
	#OBJ_sha
 
OBJ_Ѓg№Щhm
,18L

	)

1893 
	#SN_sha1
 "SHA1"

	)

1894 
	#LN_sha1
 "sha1"

	)

1895 
	#NID_sha1
 64

	)

1896 
	#OBJ_sha1
 
OBJ_Ѓg№Щhm
,26L

	)

1898 
	#SN_dІWЩhSHA1_2
 "DSA-SHA1-ёd"

	)

1899 
	#LN_dІWЩhSHA1_2
 "dІWЩhSHA1-ёd"

	)

1900 
	#NID_dІWЩhSHA1_2
 70

	)

1901 
	#OBJ_dІWЩhSHA1_2
 
OBJ_Ѓg№Щhm
,27L

	)

1903 
	#SN_sha1WЩhRSA
 "RSA-SHA1-2"

	)

1904 
	#LN_sha1WЩhRSA
 "sha1WЩhRSA"

	)

1905 
	#NID_sha1WЩhRSA
 115

	)

1906 
	#OBJ_sha1WЩhRSA
 
OBJ_Ѓg№Щhm
,29L

	)

1908 
	#SN_rЭemd160
 "RIPEMD160"

	)

1909 
	#LN_rЭemd160
 "rЭemd160"

	)

1910 
	#NID_rЭemd160
 117

	)

1911 
	#OBJ_rЭemd160
 1L,3L,36L,3L,2L,1L

	)

1913 
	#SN_rЭemd160WЩhRSA
 "RSA-RIPEMD160"

	)

1914 
	#LN_rЭemd160WЩhRSA
 "rЭemd160WЩhRSA"

	)

1915 
	#NID_rЭemd160WЩhRSA
 119

	)

1916 
	#OBJ_rЭemd160WЩhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

1918 
	#SN_sx√t
 "SXNСID"

	)

1919 
	#LN_sx√t
 "SМЏg ExМ™С ID"

	)

1920 
	#NID_sx√t
 143

	)

1921 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

1923 
	#SN_X500
 "X500"

	)

1924 
	#LN_X500
 "dЬeщ№y sФviы†(X.500)"

	)

1925 
	#NID_X500
 11

	)

1926 
	#OBJ_X500
 2L,5L

	)

1928 
	#SN_X509
 "X509"

	)

1929 
	#NID_X509
 12

	)

1930 
	#OBJ_X509
 
OBJ_X500
,4L

	)

1932 
	#SN_commЏName
 "CN"

	)

1933 
	#LN_commЏName
 "commЏName"

	)

1934 
	#NID_commЏName
 13

	)

1935 
	#OBJ_commЏName
 
OBJ_X509
,3L

	)

1937 
	#SN_suЇame
 "SN"

	)

1938 
	#LN_suЇame
 "suЇame"

	)

1939 
	#NID_suЇame
 100

	)

1940 
	#OBJ_suЇame
 
OBJ_X509
,4L

	)

1942 
	#LN_£rЯlNumbФ
 "£rЯlNumbФ"

	)

1943 
	#NID_£rЯlNumbФ
 105

	)

1944 
	#OBJ_£rЯlNumbФ
 
OBJ_X509
,5L

	)

1946 
	#SN_couЅryName
 "C"

	)

1947 
	#LN_couЅryName
 "couЅryName"

	)

1948 
	#NID_couЅryName
 14

	)

1949 
	#OBJ_couЅryName
 
OBJ_X509
,6L

	)

1951 
	#SN_lo€lЩyName
 "L"

	)

1952 
	#LN_lo€lЩyName
 "lo€lЩyName"

	)

1953 
	#NID_lo€lЩyName
 15

	)

1954 
	#OBJ_lo€lЩyName
 
OBJ_X509
,7L

	)

1956 
	#SN_°©eOrProvЪыName
 "ST"

	)

1957 
	#LN_°©eOrProvЪыName
 "°©eOrProvЪыName"

	)

1958 
	#NID_°©eOrProvЪыName
 16

	)

1959 
	#OBJ_°©eOrProvЪыName
 
OBJ_X509
,8L

	)

1961 
	#LN_°їСAddїss
 "°їСAddїss"

	)

1962 
	#NID_°їСAddїss
 660

	)

1963 
	#OBJ_°їСAddїss
 
OBJ_X509
,9L

	)

1965 
	#SN_№g™iz©iЏName
 "O"

	)

1966 
	#LN_№g™iz©iЏName
 "№g™iz©iЏName"

	)

1967 
	#NID_№g™iz©iЏName
 17

	)

1968 
	#OBJ_№g™iz©iЏName
 
OBJ_X509
,10L

	)

1970 
	#SN_№g™iz©iЏЃUnЩName
 "OU"

	)

1971 
	#LN_№g™iz©iЏЃUnЩName
 "№g™iz©iЏЃUnЩName"

	)

1972 
	#NID_№g™iz©iЏЃUnЩName
 18

	)

1973 
	#OBJ_№g™iz©iЏЃUnЩName
 
OBJ_X509
,11L

	)

1975 
	#LN_tЩЋ
 "tЩЋ"

	)

1976 
	#NID_tЩЋ
 106

	)

1977 
	#OBJ_tЩЋ
 
OBJ_X509
,12L

	)

1979 
	#LN_desьЭtiЏ
 "desьЭtiЏ"

	)

1980 
	#NID_desьЭtiЏ
 107

	)

1981 
	#OBJ_desьЭtiЏ
 
OBJ_X509
,13L

	)

1983 
	#LN_po°ЃCode
 "po°ЃCode"

	)

1984 
	#NID_po°ЃCode
 661

	)

1985 
	#OBJ_po°ЃCode
 
OBJ_X509
,17L

	)

1987 
	#SN_«me
 "«me"

	)

1988 
	#LN_«me
 "«me"

	)

1989 
	#NID_«me
 173

	)

1990 
	#OBJ_«me
 
OBJ_X509
,41L

	)

1992 
	#SN_givТName
 "GN"

	)

1993 
	#LN_givТName
 "givТName"

	)

1994 
	#NID_givТName
 99

	)

1995 
	#OBJ_givТName
 
OBJ_X509
,42L

	)

1997 
	#LN_ЪЩЯls
 "ЪЩЯls"

	)

1998 
	#NID_ЪЩЯls
 101

	)

1999 
	#OBJ_ЪЩЯls
 
OBJ_X509
,43L

	)

2001 
	#LN_gТФ©iЏQuЃifЫr
 "gТФ©iЏQuЃifЫr"

	)

2002 
	#NID_gТФ©iЏQuЃifЫr
 509

	)

2003 
	#OBJ_gТФ©iЏQuЃifЫr
 
OBJ_X509
,44L

	)

2005 
	#LN_x500UniqueIdТtifЫr
 "x500UniqueIdТtifЫr"

	)

2006 
	#NID_x500UniqueIdТtifЫr
 503

	)

2007 
	#OBJ_x500UniqueIdТtifЫr
 
OBJ_X509
,45L

	)

2009 
	#SN_dnQuЃifЫr
 "dnQuЃifЫr"

	)

2010 
	#LN_dnQuЃifЫr
 "dnQuЃifЫr"

	)

2011 
	#NID_dnQuЃifЫr
 174

	)

2012 
	#OBJ_dnQuЃifЫr
 
OBJ_X509
,46L

	)

2014 
	#LN_p£udЏym
 "p£udЏym"

	)

2015 
	#NID_p£udЏym
 510

	)

2016 
	#OBJ_p£udЏym
 
OBJ_X509
,65L

	)

2018 
	#SN_rёe
 "rёe"

	)

2019 
	#LN_rёe
 "rёe"

	)

2020 
	#NID_rёe
 400

	)

2021 
	#OBJ_rёe
 
OBJ_X509
,72L

	)

2023 
	#SN_X500Ѓg№Щhms
 "X500Ѓg№Щhms"

	)

2024 
	#LN_X500Ѓg№Щhms
 "dЬeщ№y sФviы†-Зlg№Щhms"

	)

2025 
	#NID_X500Ѓg№Щhms
 378

	)

2026 
	#OBJ_X500Ѓg№Щhms
 
OBJ_X500
,8L

	)

2028 
	#SN_rІ
 "RSA"

	)

2029 
	#LN_rІ
 "rІ"

	)

2030 
	#NID_rІ
 19

	)

2031 
	#OBJ_rІ
 
OBJ_X500Ѓg№Щhms
,1L,1L

	)

2033 
	#SN_mdc2WЩhRSA
 "RSA-MDC2"

	)

2034 
	#LN_mdc2WЩhRSA
 "mdc2WЩhRSA"

	)

2035 
	#NID_mdc2WЩhRSA
 96

	)

2036 
	#OBJ_mdc2WЩhRSA
 
OBJ_X500Ѓg№Щhms
,3L,100L

	)

2038 
	#SN_mdc2
 "MDC2"

	)

2039 
	#LN_mdc2
 "mdc2"

	)

2040 
	#NID_mdc2
 95

	)

2041 
	#OBJ_mdc2
 
OBJ_X500Ѓg№Щhms
,3L,101L

	)

2043 
	#SN_id_ы
 "id-ы"

	)

2044 
	#NID_id_ы
 81

	)

2045 
	#OBJ_id_ы
 
OBJ_X500
,29L

	)

2047 
	#SN_subjeщ_dЬeщ№y_©МibuЛs
 "subjeщDЬeщ№yAЙribuЛs"

	)

2048 
	#LN_subjeщ_dЬeщ№y_©МibuЛs
 "X509v3 Subjeщ DЬeщ№y AЙribuЛs"

	)

2049 
	#NID_subjeщ_dЬeщ№y_©МibuЛs
 769

	)

2050 
	#OBJ_subjeщ_dЬeщ№y_©МibuЛs
 
OBJ_id_ы
,9L

	)

2052 
	#SN_subjeщ_key_idТtifЫr
 "subjeщKeyIdТtifЫr"

	)

2053 
	#LN_subjeщ_key_idТtifЫr
 "X509v3 Subjeщ Key IdТtifЫr"

	)

2054 
	#NID_subjeщ_key_idТtifЫr
 82

	)

2055 
	#OBJ_subjeщ_key_idТtifЫr
 
OBJ_id_ы
,14L

	)

2057 
	#SN_key_uІge
 "keyUІge"

	)

2058 
	#LN_key_uІge
 "X509v3 Key UІge"

	)

2059 
	#NID_key_uІge
 83

	)

2060 
	#OBJ_key_uІge
 
OBJ_id_ы
,15L

	)

2062 
	#SN_іiv©e_key_uІge_≥riod
 "іiv©eKeyUІgePФiod"

	)

2063 
	#LN_іiv©e_key_uІge_≥riod
 "X509v3 Priv©РKey UІgРPФiod"

	)

2064 
	#NID_іiv©e_key_uІge_≥riod
 84

	)

2065 
	#OBJ_іiv©e_key_uІge_≥riod
 
OBJ_id_ы
,16L

	)

2067 
	#SN_subjeщ_Ѓt_«me
 "subjeщA…Name"

	)

2068 
	#LN_subjeщ_Ѓt_«me
 "X509v3 Subjeщ A…Ф«tivРName"

	)

2069 
	#NID_subjeщ_Ѓt_«me
 85

	)

2070 
	#OBJ_subjeщ_Ѓt_«me
 
OBJ_id_ы
,17L

	)

2072 
	#SN_issuФ_Ѓt_«me
 "issuФA…Name"

	)

2073 
	#LN_issuФ_Ѓt_«me
 "X509v3 IssuФ A…Ф«tivРName"

	)

2074 
	#NID_issuФ_Ѓt_«me
 86

	)

2075 
	#OBJ_issuФ_Ѓt_«me
 
OBJ_id_ы
,18L

	)

2077 
	#SN_basic_cЏ°њЪts
 "basicCЏ°њЪts"

	)

2078 
	#LN_basic_cЏ°њЪts
 "X509v3 BasiшCЏ°њЪts"

	)

2079 
	#NID_basic_cЏ°њЪts
 87

	)

2080 
	#OBJ_basic_cЏ°њЪts
 
OBJ_id_ы
,19L

	)

2082 
	#SN_ьl_numbФ
 "ьlNumbФ"

	)

2083 
	#LN_ьl_numbФ
 "X509v3 CRL NumbФ"

	)

2084 
	#NID_ьl_numbФ
 88

	)

2085 
	#OBJ_ьl_numbФ
 
OBJ_id_ы
,20L

	)

2087 
	#SN_ьl_їasЏ
 "CRLRЧsЏ"

	)

2088 
	#LN_ьl_їasЏ
 "X509v3 CRL RЧsЏ Code"

	)

2089 
	#NID_ьl_їasЏ
 141

	)

2090 
	#OBJ_ьl_їasЏ
 
OBJ_id_ы
,21L

	)

2092 
	#SN_ЪvЃidЩy_d©e
 "ЪvЃidЩyD©e"

	)

2093 
	#LN_ЪvЃidЩy_d©e
 "InvЃidЩy D©e"

	)

2094 
	#NID_ЪvЃidЩy_d©e
 142

	)

2095 
	#OBJ_ЪvЃidЩy_d©e
 
OBJ_id_ы
,24L

	)

2097 
	#SN_dЦП_ьl
 "dЦПCRL"

	)

2098 
	#LN_dЦП_ьl
 "X509v3 DЦП CRL Indi€t№"

	)

2099 
	#NID_dЦП_ьl
 140

	)

2100 
	#OBJ_dЦП_ьl
 
OBJ_id_ы
,27L

	)

2102 
	#SN_issuЪg_di°ributiЏ_poЪt
 "issuЪgDi°ributiЏPoЪt"

	)

2103 
	#LN_issuЪg_di°ributiЏ_poЪt
 "X509v3 IssuЪg Di°rubutiЏ PoЪt"

	)

2104 
	#NID_issuЪg_di°ributiЏ_poЪt
 770

	)

2105 
	#OBJ_issuЪg_di°ributiЏ_poЪt
 
OBJ_id_ы
,28L

	)

2107 
	#SN_ыєifi€Л_issuФ
 "ыєifi€ЛIssuФ"

	)

2108 
	#LN_ыєifi€Л_issuФ
 "X509v3 CФtifi€Л IssuФ"

	)

2109 
	#NID_ыєifi€Л_issuФ
 771

	)

2110 
	#OBJ_ыєifi€Л_issuФ
 
OBJ_id_ы
,29L

	)

2112 
	#SN_«me_cЏ°њЪts
 "«meCЏ°њЪts"

	)

2113 
	#LN_«me_cЏ°њЪts
 "X509v3 NamРCЏ°њЪts"

	)

2114 
	#NID_«me_cЏ°њЪts
 666

	)

2115 
	#OBJ_«me_cЏ°њЪts
 
OBJ_id_ы
,30L

	)

2117 
	#SN_ьl_di°ributiЏ_poЪts
 "ьlDi°ributiЏPoЪts"

	)

2118 
	#LN_ьl_di°ributiЏ_poЪts
 "X509v3 CRL Di°ributiЏ PoЪts"

	)

2119 
	#NID_ьl_di°ributiЏ_poЪts
 103

	)

2120 
	#OBJ_ьl_di°ributiЏ_poЪts
 
OBJ_id_ы
,31L

	)

2122 
	#SN_ыєifi€Л_pёicЫs
 "ыєifi€ЛPёicЫs"

	)

2123 
	#LN_ыєifi€Л_pёicЫs
 "X509v3 CФtifi€Л PёicЫs"

	)

2124 
	#NID_ыєifi€Л_pёicЫs
 89

	)

2125 
	#OBJ_ыєifi€Л_pёicЫs
 
OBJ_id_ы
,32L

	)

2127 
	#SN_™y_pёicy
 "™yPёicy"

	)

2128 
	#LN_™y_pёicy
 "X509v3 Any Pёicy"

	)

2129 
	#NID_™y_pёicy
 746

	)

2130 
	#OBJ_™y_pёicy
 
OBJ_ыєifi€Л_pёicЫs
,0L

	)

2132 
	#SN_pёicy_m≠pЪgs
 "pёicyM≠pЪgs"

	)

2133 
	#LN_pёicy_m≠pЪgs
 "X509v3 Pёicy M≠pЪgs"

	)

2134 
	#NID_pёicy_m≠pЪgs
 747

	)

2135 
	#OBJ_pёicy_m≠pЪgs
 
OBJ_id_ы
,33L

	)

2137 
	#SN_auth№Щy_key_idТtifЫr
 "auth№ЩyKeyIdТtifЫr"

	)

2138 
	#LN_auth№Щy_key_idТtifЫr
 "X509v3 Auth№Щy Key IdТtifЫr"

	)

2139 
	#NID_auth№Щy_key_idТtifЫr
 90

	)

2140 
	#OBJ_auth№Щy_key_idТtifЫr
 
OBJ_id_ы
,35L

	)

2142 
	#SN_pёicy_cЏ°њЪts
 "pёicyCЏ°њЪts"

	)

2143 
	#LN_pёicy_cЏ°њЪts
 "X509v3 Pёicy CЏ°њЪts"

	)

2144 
	#NID_pёicy_cЏ°њЪts
 401

	)

2145 
	#OBJ_pёicy_cЏ°њЪts
 
OBJ_id_ы
,36L

	)

2147 
	#SN_ext_key_uІge
 "exЛndedKeyUІge"

	)

2148 
	#LN_ext_key_uІge
 "X509v3 ExЛnded Key UІge"

	)

2149 
	#NID_ext_key_uІge
 126

	)

2150 
	#OBJ_ext_key_uІge
 
OBJ_id_ы
,37L

	)

2152 
	#SN_ЪhibЩ_™y_pёicy
 "ЪhibЩAnyPёicy"

	)

2153 
	#LN_ЪhibЩ_™y_pёicy
 "X509v3 InhibЩ Any Pёicy"

	)

2154 
	#NID_ЪhibЩ_™y_pёicy
 748

	)

2155 
	#OBJ_ЪhibЩ_™y_pёicy
 
OBJ_id_ы
,54L

	)

2157 
	#SN_ПrgС_Ъf№m©iЏ
 "ПrgСInf№m©iЏ"

	)

2158 
	#LN_ПrgС_Ъf№m©iЏ
 "X509v3 AC TђgСЪg"

	)

2159 
	#NID_ПrgС_Ъf№m©iЏ
 402

	)

2160 
	#OBJ_ПrgС_Ъf№m©iЏ
 
OBJ_id_ы
,55L

	)

2162 
	#SN_no_їv_avaЮ
 "noRevAvaЮ"

	)

2163 
	#LN_no_їv_avaЮ
 "X509v3 NЎRevo€tiЏ AvaЮabЋ"

	)

2164 
	#NID_no_їv_avaЮ
 403

	)

2165 
	#OBJ_no_їv_avaЮ
 
OBJ_id_ы
,56L

	)

2167 
	#SN_√ts€≥
 "NСs€≥"

	)

2168 
	#LN_√ts€≥
 "NСs€≥ Communi€tiЏ†C№p."

	)

2169 
	#NID_√ts€≥
 57

	)

2170 
	#OBJ_√ts€≥
 2L,16L,840L,1L,113730L

	)

2172 
	#SN_√ts€≥_ыє_exЛnsiЏ
 "nsCФtExt"

	)

2173 
	#LN_√ts€≥_ыє_exЛnsiЏ
 "NСs€≥ CФtifi€Л ExЛnsiЏ"

	)

2174 
	#NID_√ts€≥_ыє_exЛnsiЏ
 58

	)

2175 
	#OBJ_√ts€≥_ыє_exЛnsiЏ
 
OBJ_√ts€≥
,1L

	)

2177 
	#SN_√ts€≥_d©a_ty≥
 "nsD©aTy≥"

	)

2178 
	#LN_√ts€≥_d©a_ty≥
 "NСs€≥ D©®Ty≥"

	)

2179 
	#NID_√ts€≥_d©a_ty≥
 59

	)

2180 
	#OBJ_√ts€≥_d©a_ty≥
 
OBJ_√ts€≥
,2L

	)

2182 
	#SN_√ts€≥_ыє_ty≥
 "nsCФtTy≥"

	)

2183 
	#LN_√ts€≥_ыє_ty≥
 "NСs€≥ CФИTy≥"

	)

2184 
	#NID_√ts€≥_ыє_ty≥
 71

	)

2185 
	#OBJ_√ts€≥_ыє_ty≥
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,1L

	)

2187 
	#SN_√ts€≥_ba£_uЊ
 "nsBa£UЊ"

	)

2188 
	#LN_√ts€≥_ba£_uЊ
 "NСs€≥ Ba£ UЊ"

	)

2189 
	#NID_√ts€≥_ba£_uЊ
 72

	)

2190 
	#OBJ_√ts€≥_ba£_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,2L

	)

2192 
	#SN_√ts€≥_їvo€tiЏ_uЊ
 "nsRevo€tiЏUЊ"

	)

2193 
	#LN_√ts€≥_їvo€tiЏ_uЊ
 "NСs€≥ Revo€tiЏ UЊ"

	)

2194 
	#NID_√ts€≥_їvo€tiЏ_uЊ
 73

	)

2195 
	#OBJ_√ts€≥_їvo€tiЏ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,3L

	)

2197 
	#SN_√ts€≥_€_їvo€tiЏ_uЊ
 "nsCaRevo€tiЏUЊ"

	)

2198 
	#LN_√ts€≥_€_їvo€tiЏ_uЊ
 "NСs€≥ CA Revo€tiЏ UЊ"

	)

2199 
	#NID_√ts€≥_€_їvo€tiЏ_uЊ
 74

	)

2200 
	#OBJ_√ts€≥_€_їvo€tiЏ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,4L

	)

2202 
	#SN_√ts€≥_ї√wЃ_uЊ
 "nsRТewЃUЊ"

	)

2203 
	#LN_√ts€≥_ї√wЃ_uЊ
 "NСs€≥ RТewЃ UЊ"

	)

2204 
	#NID_√ts€≥_ї√wЃ_uЊ
 75

	)

2205 
	#OBJ_√ts€≥_ї√wЃ_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,7L

	)

2207 
	#SN_√ts€≥_€_pёicy_uЊ
 "nsCaPёicyUЊ"

	)

2208 
	#LN_√ts€≥_€_pёicy_uЊ
 "NСs€≥ CA Pёicy UЊ"

	)

2209 
	#NID_√ts€≥_€_pёicy_uЊ
 76

	)

2210 
	#OBJ_√ts€≥_€_pёicy_uЊ
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,8L

	)

2212 
	#SN_√ts€≥_s¶_£rvФ_«me
 "nsS¶SФvФName"

	)

2213 
	#LN_√ts€≥_s¶_£rvФ_«me
 "NСs€≥ SSL SФvФ Name"

	)

2214 
	#NID_√ts€≥_s¶_£rvФ_«me
 77

	)

2215 
	#OBJ_√ts€≥_s¶_£rvФ_«me
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,12L

	)

2217 
	#SN_√ts€≥_commТt
 "nsCommТt"

	)

2218 
	#LN_√ts€≥_commТt
 "NСs€≥ CommТt"

	)

2219 
	#NID_√ts€≥_commТt
 78

	)

2220 
	#OBJ_√ts€≥_commТt
 
OBJ_√ts€≥_ыє_exЛnsiЏ
,13L

	)

2222 
	#SN_√ts€≥_ыє_£quТы
 "nsCФtSequТы"

	)

2223 
	#LN_√ts€≥_ыє_£quТы
 "NСs€≥ CФtifi€Л SequТы"

	)

2224 
	#NID_√ts€≥_ыє_£quТы
 79

	)

2225 
	#OBJ_√ts€≥_ыє_£quТы
 
OBJ_√ts€≥_d©a_ty≥
,5L

	)

2227 
	#SN_ns_sgc
 "nsSGC"

	)

2228 
	#LN_ns_sgc
 "NСs€≥ SФvФ G©ed Cry±o"

	)

2229 
	#NID_ns_sgc
 139

	)

2230 
	#OBJ_ns_sgc
 
OBJ_√ts€≥
,4L,1L

	)

2232 
	#SN_№g
 "ORG"

	)

2233 
	#LN_№g
 "№g"

	)

2234 
	#NID_№g
 379

	)

2235 
	#OBJ_№g
 
OBJ_iso
,3L

	)

2237 
	#SN_dod
 "DOD"

	)

2238 
	#LN_dod
 "dod"

	)

2239 
	#NID_dod
 380

	)

2240 
	#OBJ_dod
 
OBJ_№g
,6L

	)

2242 
	#SN_Я«
 "IANA"

	)

2243 
	#LN_Я«
 "Я«"

	)

2244 
	#NID_Я«
 381

	)

2245 
	#OBJ_Я«
 
OBJ_dod
,1L

	)

2247 
	#OBJ_ЪЛЇС
 
OBJ_Я«


	)

2249 
	#SN_DЬeщ№y
 "dЬeщ№y"

	)

2250 
	#LN_DЬeщ№y
 "DЬeщ№y"

	)

2251 
	#NID_DЬeщ№y
 382

	)

2252 
	#OBJ_DЬeщ№y
 
OBJ_ЪЛЇС
,1L

	)

2254 
	#SN_M™agemТt
 "mgmt"

	)

2255 
	#LN_M™agemТt
 "M™agemТt"

	)

2256 
	#NID_M™agemТt
 383

	)

2257 
	#OBJ_M™agemТt
 
OBJ_ЪЛЇС
,2L

	)

2259 
	#SN_Ex≥rimТПl
 "ex≥rimТПl"

	)

2260 
	#LN_Ex≥rimТПl
 "Ex≥rimТПl"

	)

2261 
	#NID_Ex≥rimТПl
 384

	)

2262 
	#OBJ_Ex≥rimТПl
 
OBJ_ЪЛЇС
,3L

	)

2264 
	#SN_Priv©e
 "іiv©e"

	)

2265 
	#LN_Priv©e
 "Priv©e"

	)

2266 
	#NID_Priv©e
 385

	)

2267 
	#OBJ_Priv©e
 
OBJ_ЪЛЇС
,4L

	)

2269 
	#SN_SecurЩy
 "£curЩy"

	)

2270 
	#LN_SecurЩy
 "SecurЩy"

	)

2271 
	#NID_SecurЩy
 386

	)

2272 
	#OBJ_SecurЩy
 
OBJ_ЪЛЇС
,5L

	)

2274 
	#SN_SNMPv2
 "Ґmpv2"

	)

2275 
	#LN_SNMPv2
 "SNMPv2"

	)

2276 
	#NID_SNMPv2
 387

	)

2277 
	#OBJ_SNMPv2
 
OBJ_ЪЛЇС
,6L

	)

2279 
	#LN_MaЮ
 "MaЮ"

	)

2280 
	#NID_MaЮ
 388

	)

2281 
	#OBJ_MaЮ
 
OBJ_ЪЛЇС
,7L

	)

2283 
	#SN_EЅФіi£s
 "ТЛљri£s"

	)

2284 
	#LN_EЅФіi£s
 "EЅФіi£s"

	)

2285 
	#NID_EЅФіi£s
 389

	)

2286 
	#OBJ_EЅФіi£s
 
OBJ_Priv©e
,1L

	)

2288 
	#SN_dcObjeщ
 "dcobjeщ"

	)

2289 
	#LN_dcObjeщ
 "dcObjeщ"

	)

2290 
	#NID_dcObjeщ
 390

	)

2291 
	#OBJ_dcObjeщ
 
OBJ_EЅФіi£s
,1466L,344L

	)

2293 
	#SN_mime_mhs
 "mime-mhs"

	)

2294 
	#LN_mime_mhs
 "MIME MHS"

	)

2295 
	#NID_mime_mhs
 504

	)

2296 
	#OBJ_mime_mhs
 
OBJ_MaЮ
,1L

	)

2298 
	#SN_mime_mhs_hЧdЪgs
 "mime-mhs-hЧdЪgs"

	)

2299 
	#LN_mime_mhs_hЧdЪgs
 "mime-mhs-hЧdЪgs"

	)

2300 
	#NID_mime_mhs_hЧdЪgs
 505

	)

2301 
	#OBJ_mime_mhs_hЧdЪgs
 
OBJ_mime_mhs
,1L

	)

2303 
	#SN_mime_mhs_bodЫs
 "mime-mhs-bodЫs"

	)

2304 
	#LN_mime_mhs_bodЫs
 "mime-mhs-bodЫs"

	)

2305 
	#NID_mime_mhs_bodЫs
 506

	)

2306 
	#OBJ_mime_mhs_bodЫs
 
OBJ_mime_mhs
,2L

	)

2308 
	#SN_id_hex_ЈєЯl_mesІge
 "id-hex-ЈєЯl-mesІge"

	)

2309 
	#LN_id_hex_ЈєЯl_mesІge
 "id-hex-ЈєЯl-mesІge"

	)

2310 
	#NID_id_hex_ЈєЯl_mesІge
 507

	)

2311 
	#OBJ_id_hex_ЈєЯl_mesІge
 
OBJ_mime_mhs_hЧdЪgs
,1L

	)

2313 
	#SN_id_hex_mu…Эђt_mesІge
 "id-hex-mu…Эђt-mesІge"

	)

2314 
	#LN_id_hex_mu…Эђt_mesІge
 "id-hex-mu…Эђt-mesІge"

	)

2315 
	#NID_id_hex_mu…Эђt_mesІge
 508

	)

2316 
	#OBJ_id_hex_mu…Эђt_mesІge
 
OBJ_mime_mhs_hЧdЪgs
,2L

	)

2318 
	#SN_Њe_comіessiЏ
 "RLE"

	)

2319 
	#LN_Њe_comіessiЏ
 "ruјЋngth comіessiЏ"

	)

2320 
	#NID_Њe_comіessiЏ
 124

	)

2321 
	#OBJ_Њe_comіessiЏ
 1L,1L,1L,1L,666L,1L

	)

2323 
	#SN_zlib_comіessiЏ
 "ZLIB"

	)

2324 
	#LN_zlib_comіessiЏ
 "zlib comіessiЏ"

	)

2325 
	#NID_zlib_comіessiЏ
 125

	)

2326 
	#OBJ_zlib_comіessiЏ
 1L,1L,1L,1L,666L,2L

	)

2328 
	#OBJ_cs№
 2L,16L,840L,1L,101L,3L

	)

2330 
	#OBJ_ni°Alg№Щhms
 
OBJ_cs№
,4L

	)

2332 
	#OBJ_Ђs
 
OBJ_ni°Alg№Щhms
,1L

	)

2334 
	#SN_Ђs_128_ecb
 "AES-128-ECB"

	)

2335 
	#LN_Ђs_128_ecb
 "Ђs-128-ecb"

	)

2336 
	#NID_Ђs_128_ecb
 418

	)

2337 
	#OBJ_Ђs_128_ecb
 
OBJ_Ђs
,1L

	)

2339 
	#SN_Ђs_128_cbc
 "AES-128-CBC"

	)

2340 
	#LN_Ђs_128_cbc
 "Ђs-128-cbc"

	)

2341 
	#NID_Ђs_128_cbc
 419

	)

2342 
	#OBJ_Ђs_128_cbc
 
OBJ_Ђs
,2L

	)

2344 
	#SN_Ђs_128_ofb128
 "AES-128-OFB"

	)

2345 
	#LN_Ђs_128_ofb128
 "Ђs-128-ofb"

	)

2346 
	#NID_Ђs_128_ofb128
 420

	)

2347 
	#OBJ_Ђs_128_ofb128
 
OBJ_Ђs
,3L

	)

2349 
	#SN_Ђs_128_cfb128
 "AES-128-CFB"

	)

2350 
	#LN_Ђs_128_cfb128
 "Ђs-128-cfb"

	)

2351 
	#NID_Ђs_128_cfb128
 421

	)

2352 
	#OBJ_Ђs_128_cfb128
 
OBJ_Ђs
,4L

	)

2354 
	#SN_Ђs_192_ecb
 "AES-192-ECB"

	)

2355 
	#LN_Ђs_192_ecb
 "Ђs-192-ecb"

	)

2356 
	#NID_Ђs_192_ecb
 422

	)

2357 
	#OBJ_Ђs_192_ecb
 
OBJ_Ђs
,21L

	)

2359 
	#SN_Ђs_192_cbc
 "AES-192-CBC"

	)

2360 
	#LN_Ђs_192_cbc
 "Ђs-192-cbc"

	)

2361 
	#NID_Ђs_192_cbc
 423

	)

2362 
	#OBJ_Ђs_192_cbc
 
OBJ_Ђs
,22L

	)

2364 
	#SN_Ђs_192_ofb128
 "AES-192-OFB"

	)

2365 
	#LN_Ђs_192_ofb128
 "Ђs-192-ofb"

	)

2366 
	#NID_Ђs_192_ofb128
 424

	)

2367 
	#OBJ_Ђs_192_ofb128
 
OBJ_Ђs
,23L

	)

2369 
	#SN_Ђs_192_cfb128
 "AES-192-CFB"

	)

2370 
	#LN_Ђs_192_cfb128
 "Ђs-192-cfb"

	)

2371 
	#NID_Ђs_192_cfb128
 425

	)

2372 
	#OBJ_Ђs_192_cfb128
 
OBJ_Ђs
,24L

	)

2374 
	#SN_Ђs_256_ecb
 "AES-256-ECB"

	)

2375 
	#LN_Ђs_256_ecb
 "Ђs-256-ecb"

	)

2376 
	#NID_Ђs_256_ecb
 426

	)

2377 
	#OBJ_Ђs_256_ecb
 
OBJ_Ђs
,41L

	)

2379 
	#SN_Ђs_256_cbc
 "AES-256-CBC"

	)

2380 
	#LN_Ђs_256_cbc
 "Ђs-256-cbc"

	)

2381 
	#NID_Ђs_256_cbc
 427

	)

2382 
	#OBJ_Ђs_256_cbc
 
OBJ_Ђs
,42L

	)

2384 
	#SN_Ђs_256_ofb128
 "AES-256-OFB"

	)

2385 
	#LN_Ђs_256_ofb128
 "Ђs-256-ofb"

	)

2386 
	#NID_Ђs_256_ofb128
 428

	)

2387 
	#OBJ_Ђs_256_ofb128
 
OBJ_Ђs
,43L

	)

2389 
	#SN_Ђs_256_cfb128
 "AES-256-CFB"

	)

2390 
	#LN_Ђs_256_cfb128
 "Ђs-256-cfb"

	)

2391 
	#NID_Ђs_256_cfb128
 429

	)

2392 
	#OBJ_Ђs_256_cfb128
 
OBJ_Ђs
,44L

	)

2394 
	#SN_Ђs_128_cfb1
 "AES-128-CFB1"

	)

2395 
	#LN_Ђs_128_cfb1
 "Ђs-128-cfb1"

	)

2396 
	#NID_Ђs_128_cfb1
 650

	)

2398 
	#SN_Ђs_192_cfb1
 "AES-192-CFB1"

	)

2399 
	#LN_Ђs_192_cfb1
 "Ђs-192-cfb1"

	)

2400 
	#NID_Ђs_192_cfb1
 651

	)

2402 
	#SN_Ђs_256_cfb1
 "AES-256-CFB1"

	)

2403 
	#LN_Ђs_256_cfb1
 "Ђs-256-cfb1"

	)

2404 
	#NID_Ђs_256_cfb1
 652

	)

2406 
	#SN_Ђs_128_cfb8
 "AES-128-CFB8"

	)

2407 
	#LN_Ђs_128_cfb8
 "Ђs-128-cfb8"

	)

2408 
	#NID_Ђs_128_cfb8
 653

	)

2410 
	#SN_Ђs_192_cfb8
 "AES-192-CFB8"

	)

2411 
	#LN_Ђs_192_cfb8
 "Ђs-192-cfb8"

	)

2412 
	#NID_Ђs_192_cfb8
 654

	)

2414 
	#SN_Ђs_256_cfb8
 "AES-256-CFB8"

	)

2415 
	#LN_Ђs_256_cfb8
 "Ђs-256-cfb8"

	)

2416 
	#NID_Ђs_256_cfb8
 655

	)

2418 
	#SN_des_cfb1
 "DES-CFB1"

	)

2419 
	#LN_des_cfb1
 "des-cfb1"

	)

2420 
	#NID_des_cfb1
 656

	)

2422 
	#SN_des_cfb8
 "DES-CFB8"

	)

2423 
	#LN_des_cfb8
 "des-cfb8"

	)

2424 
	#NID_des_cfb8
 657

	)

2426 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2427 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2428 
	#NID_des_ede3_cfb1
 658

	)

2430 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2431 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2432 
	#NID_des_ede3_cfb8
 659

	)

2434 
	#OBJ_ni°_hashЃgs
 
OBJ_ni°Alg№Щhms
,2L

	)

2436 
	#SN_sha256
 "SHA256"

	)

2437 
	#LN_sha256
 "sha256"

	)

2438 
	#NID_sha256
 672

	)

2439 
	#OBJ_sha256
 
OBJ_ni°_hashЃgs
,1L

	)

2441 
	#SN_sha384
 "SHA384"

	)

2442 
	#LN_sha384
 "sha384"

	)

2443 
	#NID_sha384
 673

	)

2444 
	#OBJ_sha384
 
OBJ_ni°_hashЃgs
,2L

	)

2446 
	#SN_sha512
 "SHA512"

	)

2447 
	#LN_sha512
 "sha512"

	)

2448 
	#NID_sha512
 674

	)

2449 
	#OBJ_sha512
 
OBJ_ni°_hashЃgs
,3L

	)

2451 
	#SN_sha224
 "SHA224"

	)

2452 
	#LN_sha224
 "sha224"

	)

2453 
	#NID_sha224
 675

	)

2454 
	#OBJ_sha224
 
OBJ_ni°_hashЃgs
,4L

	)

2456 
	#SN_hёd_Ъ°ruщiЏ_code
 "hёdIn°ruщiЏCode"

	)

2457 
	#LN_hёd_Ъ°ruщiЏ_code
 "Hёd In°ruщiЏ Code"

	)

2458 
	#NID_hёd_Ъ°ruщiЏ_code
 430

	)

2459 
	#OBJ_hёd_Ъ°ruщiЏ_code
 
OBJ_id_ы
,23L

	)

2461 
	#OBJ_hёdIn°ruщiЏ
 
OBJ_X9_57
,2L

	)

2463 
	#SN_hёd_Ъ°ruщiЏ_nЏe
 "hёdIn°ruщiЏNЏe"

	)

2464 
	#LN_hёd_Ъ°ruщiЏ_nЏe
 "Hёd In°ruщiЏ NЏe"

	)

2465 
	#NID_hёd_Ъ°ruщiЏ_nЏe
 431

	)

2466 
	#OBJ_hёd_Ъ°ruщiЏ_nЏe
 
OBJ_hёdIn°ruщiЏ
,1L

	)

2468 
	#SN_hёd_Ъ°ruщiЏ_€ќ_issuФ
 "hёdIn°ruщiЏCЃlIssuФ"

	)

2469 
	#LN_hёd_Ъ°ruщiЏ_€ќ_issuФ
 "Hёd In°ruщiЏ CЃ»IssuФ"

	)

2470 
	#NID_hёd_Ъ°ruщiЏ_€ќ_issuФ
 432

	)

2471 
	#OBJ_hёd_Ъ°ruщiЏ_€ќ_issuФ
 
OBJ_hёdIn°ruщiЏ
,2L

	)

2473 
	#SN_hёd_Ъ°ruщiЏ_їjeщ
 "hёdIn°ruщiЏRejeщ"

	)

2474 
	#LN_hёd_Ъ°ruщiЏ_їjeщ
 "Hёd In°ruщiЏ Rejeщ"

	)

2475 
	#NID_hёd_Ъ°ruщiЏ_їjeщ
 433

	)

2476 
	#OBJ_hёd_Ъ°ruщiЏ_їjeщ
 
OBJ_hёdIn°ruщiЏ
,3L

	)

2478 
	#SN_d©a
 "d©a"

	)

2479 
	#NID_d©a
 434

	)

2480 
	#OBJ_d©a
 
OBJ_Щu_t
,9L

	)

2482 
	#SN_pss
 "pss"

	)

2483 
	#NID_pss
 435

	)

2484 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2486 
	#SN_uю
 "uю"

	)

2487 
	#NID_uю
 436

	)

2488 
	#OBJ_uю
 
OBJ_pss
,19200300L

	)

2490 
	#SN_pЮў
 "pЮў"

	)

2491 
	#NID_pЮў
 437

	)

2492 
	#OBJ_pЮў
 
OBJ_uю
,100L

	)

2494 
	#LN_pЮўAЙribuЛTy≥
 "pЮўAЙribuЛTy≥"

	)

2495 
	#NID_pЮўAЙribuЛTy≥
 438

	)

2496 
	#OBJ_pЮўAЙribuЛTy≥
 
OBJ_pЮў
,1L

	)

2498 
	#LN_pЮўAЙribuЛSyЅax
 "pЮўAЙribuЛSyЅax"

	)

2499 
	#NID_pЮўAЙribuЛSyЅax
 439

	)

2500 
	#OBJ_pЮўAЙribuЛSyЅax
 
OBJ_pЮў
,3L

	)

2502 
	#LN_pЮўObjeщCѕss
 "pЮўObjeщCѕss"

	)

2503 
	#NID_pЮўObjeщCѕss
 440

	)

2504 
	#OBJ_pЮўObjeщCѕss
 
OBJ_pЮў
,4L

	)

2506 
	#LN_pЮўGroups
 "pЮўGroups"

	)

2507 
	#NID_pЮўGroups
 441

	)

2508 
	#OBJ_pЮўGroups
 
OBJ_pЮў
,10L

	)

2510 
	#LN_iA5SМЪgSyЅax
 "iA5SМЪgSyЅax"

	)

2511 
	#NID_iA5SМЪgSyЅax
 442

	)

2512 
	#OBJ_iA5SМЪgSyЅax
 
OBJ_pЮўAЙribuЛSyЅax
,4L

	)

2514 
	#LN_€£Ign№eIA5SМЪgSyЅax
 "€£Ign№eIA5SМЪgSyЅax"

	)

2515 
	#NID_€£Ign№eIA5SМЪgSyЅax
 443

	)

2516 
	#OBJ_€£Ign№eIA5SМЪgSyЅax
 
OBJ_pЮўAЙribuЛSyЅax
,5L

	)

2518 
	#LN_pЮўObjeщ
 "pЮўObjeщ"

	)

2519 
	#NID_pЮўObjeщ
 444

	)

2520 
	#OBJ_pЮўObjeщ
 
OBJ_pЮўObjeщCѕss
,3L

	)

2522 
	#LN_pЮўPФsЏ
 "pЮўPФsЏ"

	)

2523 
	#NID_pЮўPФsЏ
 445

	)

2524 
	#OBJ_pЮўPФsЏ
 
OBJ_pЮўObjeщCѕss
,4L

	)

2526 
	#SN_accouЅ
 "accouЅ"

	)

2527 
	#NID_accouЅ
 446

	)

2528 
	#OBJ_accouЅ
 
OBJ_pЮўObjeщCѕss
,5L

	)

2530 
	#SN_documТt
 "documТt"

	)

2531 
	#NID_documТt
 447

	)

2532 
	#OBJ_documТt
 
OBJ_pЮўObjeщCѕss
,6L

	)

2534 
	#SN_room
 "room"

	)

2535 
	#NID_room
 448

	)

2536 
	#OBJ_room
 
OBJ_pЮўObjeщCѕss
,7L

	)

2538 
	#LN_documТtSФЫs
 "documТtSФЫs"

	)

2539 
	#NID_documТtSФЫs
 449

	)

2540 
	#OBJ_documТtSФЫs
 
OBJ_pЮўObjeщCѕss
,9L

	)

2542 
	#SN_DomaЪ
 "domaЪ"

	)

2543 
	#LN_DomaЪ
 "DomaЪ"

	)

2544 
	#NID_DomaЪ
 392

	)

2545 
	#OBJ_DomaЪ
 
OBJ_pЮўObjeщCѕss
,13L

	)

2547 
	#LN_rFC822lo€lPђt
 "rFC822lo€lPђt"

	)

2548 
	#NID_rFC822lo€lPђt
 450

	)

2549 
	#OBJ_rFC822lo€lPђt
 
OBJ_pЮўObjeщCѕss
,14L

	)

2551 
	#LN_dNSDomaЪ
 "dNSDomaЪ"

	)

2552 
	#NID_dNSDomaЪ
 451

	)

2553 
	#OBJ_dNSDomaЪ
 
OBJ_pЮўObjeщCѕss
,15L

	)

2555 
	#LN_domaЪRЦ©edObjeщ
 "domaЪRЦ©edObjeщ"

	)

2556 
	#NID_domaЪRЦ©edObjeщ
 452

	)

2557 
	#OBJ_domaЪRЦ©edObjeщ
 
OBJ_pЮўObjeщCѕss
,17L

	)

2559 
	#LN_дЫndlyCouЅry
 "дЫndlyCouЅry"

	)

2560 
	#NID_дЫndlyCouЅry
 453

	)

2561 
	#OBJ_дЫndlyCouЅry
 
OBJ_pЮўObjeщCѕss
,18L

	)

2563 
	#LN_simґeSecurЩyObjeщ
 "simґeSecurЩyObjeщ"

	)

2564 
	#NID_simґeSecurЩyObjeщ
 454

	)

2565 
	#OBJ_simґeSecurЩyObjeщ
 
OBJ_pЮўObjeщCѕss
,19L

	)

2567 
	#LN_pЮўOrg™iz©iЏ
 "pЮўOrg™iz©iЏ"

	)

2568 
	#NID_pЮўOrg™iz©iЏ
 455

	)

2569 
	#OBJ_pЮўOrg™iz©iЏ
 
OBJ_pЮўObjeщCѕss
,20L

	)

2571 
	#LN_pЮўDSA
 "pЮўDSA"

	)

2572 
	#NID_pЮўDSA
 456

	)

2573 
	#OBJ_pЮўDSA
 
OBJ_pЮўObjeщCѕss
,21L

	)

2575 
	#LN_quЃЩyLabЦЋdD©a
 "quЃЩyLabЦЋdD©a"

	)

2576 
	#NID_quЃЩyLabЦЋdD©a
 457

	)

2577 
	#OBJ_quЃЩyLabЦЋdD©a
 
OBJ_pЮўObjeщCѕss
,22L

	)

2579 
	#SN_u£rId
 "UID"

	)

2580 
	#LN_u£rId
 "u£rId"

	)

2581 
	#NID_u£rId
 458

	)

2582 
	#OBJ_u£rId
 
OBJ_pЮўAЙribuЛTy≥
,1L

	)

2584 
	#LN_ЛxtEncodedORAddїss
 "ЛxtEncodedORAddїss"

	)

2585 
	#NID_ЛxtEncodedORAddїss
 459

	)

2586 
	#OBJ_ЛxtEncodedORAddїss
 
OBJ_pЮўAЙribuЛTy≥
,2L

	)

2588 
	#SN_rfc822MaЮbox
 "maЮ"

	)

2589 
	#LN_rfc822MaЮbox
 "rfc822MaЮbox"

	)

2590 
	#NID_rfc822MaЮbox
 460

	)

2591 
	#OBJ_rfc822MaЮbox
 
OBJ_pЮўAЙribuЛTy≥
,3L

	)

2593 
	#SN_Ъfo
 "Ъfo"

	)

2594 
	#NID_Ъfo
 461

	)

2595 
	#OBJ_Ъfo
 
OBJ_pЮўAЙribuЛTy≥
,4L

	)

2597 
	#LN_зvourЩeDrЪk
 "зvourЩeDrЪk"

	)

2598 
	#NID_зvourЩeDrЪk
 462

	)

2599 
	#OBJ_зvourЩeDrЪk
 
OBJ_pЮўAЙribuЛTy≥
,5L

	)

2601 
	#LN_roomNumbФ
 "roomNumbФ"

	)

2602 
	#NID_roomNumbФ
 463

	)

2603 
	#OBJ_roomNumbФ
 
OBJ_pЮўAЙribuЛTy≥
,6L

	)

2605 
	#SN_phўo
 "phўo"

	)

2606 
	#NID_phўo
 464

	)

2607 
	#OBJ_phўo
 
OBJ_pЮўAЙribuЛTy≥
,7L

	)

2609 
	#LN_u£rCѕss
 "u£rCѕss"

	)

2610 
	#NID_u£rCѕss
 465

	)

2611 
	#OBJ_u£rCѕss
 
OBJ_pЮўAЙribuЛTy≥
,8L

	)

2613 
	#SN_ho°
 "ho°"

	)

2614 
	#NID_ho°
 466

	)

2615 
	#OBJ_ho°
 
OBJ_pЮўAЙribuЛTy≥
,9L

	)

2617 
	#SN_m™agФ
 "m™agФ"

	)

2618 
	#NID_m™agФ
 467

	)

2619 
	#OBJ_m™agФ
 
OBJ_pЮўAЙribuЛTy≥
,10L

	)

2621 
	#LN_documТtIdТtifЫr
 "documТtIdТtifЫr"

	)

2622 
	#NID_documТtIdТtifЫr
 468

	)

2623 
	#OBJ_documТtIdТtifЫr
 
OBJ_pЮўAЙribuЛTy≥
,11L

	)

2625 
	#LN_documТtTЩЋ
 "documТtTЩЋ"

	)

2626 
	#NID_documТtTЩЋ
 469

	)

2627 
	#OBJ_documТtTЩЋ
 
OBJ_pЮўAЙribuЛTy≥
,12L

	)

2629 
	#LN_documТtVФsiЏ
 "documТtVФsiЏ"

	)

2630 
	#NID_documТtVФsiЏ
 470

	)

2631 
	#OBJ_documТtVФsiЏ
 
OBJ_pЮўAЙribuЛTy≥
,13L

	)

2633 
	#LN_documТtAuth№
 "documТtAuth№"

	)

2634 
	#NID_documТtAuth№
 471

	)

2635 
	#OBJ_documТtAuth№
 
OBJ_pЮўAЙribuЛTy≥
,14L

	)

2637 
	#LN_documТtLo€tiЏ
 "documТtLo€tiЏ"

	)

2638 
	#NID_documТtLo€tiЏ
 472

	)

2639 
	#OBJ_documТtLo€tiЏ
 
OBJ_pЮўAЙribuЛTy≥
,15L

	)

2641 
	#LN_homeTЦХhЏeNumbФ
 "homeTЦХhЏeNumbФ"

	)

2642 
	#NID_homeTЦХhЏeNumbФ
 473

	)

2643 
	#OBJ_homeTЦХhЏeNumbФ
 
OBJ_pЮўAЙribuЛTy≥
,20L

	)

2645 
	#SN_£ьСђy
 "£ьСђy"

	)

2646 
	#NID_£ьСђy
 474

	)

2647 
	#OBJ_£ьСђy
 
OBJ_pЮўAЙribuЛTy≥
,21L

	)

2649 
	#LN_ўhФMaЮbox
 "ўhФMaЮbox"

	)

2650 
	#NID_ўhФMaЮbox
 475

	)

2651 
	#OBJ_ўhФMaЮbox
 
OBJ_pЮўAЙribuЛTy≥
,22L

	)

2653 
	#LN_ѕ°ModifЫdTime
 "ѕ°ModifЫdTime"

	)

2654 
	#NID_ѕ°ModifЫdTime
 476

	)

2655 
	#OBJ_ѕ°ModifЫdTime
 
OBJ_pЮўAЙribuЛTy≥
,23L

	)

2657 
	#LN_ѕ°ModifЫdBy
 "ѕ°ModifЫdBy"

	)

2658 
	#NID_ѕ°ModifЫdBy
 477

	)

2659 
	#OBJ_ѕ°ModifЫdBy
 
OBJ_pЮўAЙribuЛTy≥
,24L

	)

2661 
	#SN_domaЪCompЏТt
 "DC"

	)

2662 
	#LN_domaЪCompЏТt
 "domaЪCompЏТt"

	)

2663 
	#NID_domaЪCompЏТt
 391

	)

2664 
	#OBJ_domaЪCompЏТt
 
OBJ_pЮўAЙribuЛTy≥
,25L

	)

2666 
	#LN_aRec№d
 "aRec№d"

	)

2667 
	#NID_aRec№d
 478

	)

2668 
	#OBJ_aRec№d
 
OBJ_pЮўAЙribuЛTy≥
,26L

	)

2670 
	#LN_pЮўAЙribuЛTy≥27
 "pЮўAЙribuЛTy≥27"

	)

2671 
	#NID_pЮўAЙribuЛTy≥27
 479

	)

2672 
	#OBJ_pЮўAЙribuЛTy≥27
 
OBJ_pЮўAЙribuЛTy≥
,27L

	)

2674 
	#LN_mXRec№d
 "mXRec№d"

	)

2675 
	#NID_mXRec№d
 480

	)

2676 
	#OBJ_mXRec№d
 
OBJ_pЮўAЙribuЛTy≥
,28L

	)

2678 
	#LN_nSRec№d
 "nSRec№d"

	)

2679 
	#NID_nSRec№d
 481

	)

2680 
	#OBJ_nSRec№d
 
OBJ_pЮўAЙribuЛTy≥
,29L

	)

2682 
	#LN_sOARec№d
 "sOARec№d"

	)

2683 
	#NID_sOARec№d
 482

	)

2684 
	#OBJ_sOARec№d
 
OBJ_pЮўAЙribuЛTy≥
,30L

	)

2686 
	#LN_cNAMERec№d
 "cNAMERec№d"

	)

2687 
	#NID_cNAMERec№d
 483

	)

2688 
	#OBJ_cNAMERec№d
 
OBJ_pЮўAЙribuЛTy≥
,31L

	)

2690 
	#LN_assocЯЛdDomaЪ
 "assocЯЛdDomaЪ"

	)

2691 
	#NID_assocЯЛdDomaЪ
 484

	)

2692 
	#OBJ_assocЯЛdDomaЪ
 
OBJ_pЮўAЙribuЛTy≥
,37L

	)

2694 
	#LN_assocЯЛdName
 "assocЯЛdName"

	)

2695 
	#NID_assocЯЛdName
 485

	)

2696 
	#OBJ_assocЯЛdName
 
OBJ_pЮўAЙribuЛTy≥
,38L

	)

2698 
	#LN_homePo°ЃAddїss
 "homePo°ЃAddїss"

	)

2699 
	#NID_homePo°ЃAddїss
 486

	)

2700 
	#OBJ_homePo°ЃAddїss
 
OBJ_pЮўAЙribuЛTy≥
,39L

	)

2702 
	#LN_≥rsЏЃTЩЋ
 "≥rsЏЃTЩЋ"

	)

2703 
	#NID_≥rsЏЃTЩЋ
 487

	)

2704 
	#OBJ_≥rsЏЃTЩЋ
 
OBJ_pЮўAЙribuЛTy≥
,40L

	)

2706 
	#LN_mobЮeTЦХhЏeNumbФ
 "mobЮeTЦХhЏeNumbФ"

	)

2707 
	#NID_mobЮeTЦХhЏeNumbФ
 488

	)

2708 
	#OBJ_mobЮeTЦХhЏeNumbФ
 
OBJ_pЮўAЙribuЛTy≥
,41L

	)

2710 
	#LN_ЈgФTЦХhЏeNumbФ
 "ЈgФTЦХhЏeNumbФ"

	)

2711 
	#NID_ЈgФTЦХhЏeNumbФ
 489

	)

2712 
	#OBJ_ЈgФTЦХhЏeNumbФ
 
OBJ_pЮўAЙribuЛTy≥
,42L

	)

2714 
	#LN_дЫndlyCouЅryName
 "дЫndlyCouЅryName"

	)

2715 
	#NID_дЫndlyCouЅryName
 490

	)

2716 
	#OBJ_дЫndlyCouЅryName
 
OBJ_pЮўAЙribuЛTy≥
,43L

	)

2718 
	#LN_№g™iz©iЏЃSПtus
 "№g™iz©iЏЃSПtus"

	)

2719 
	#NID_№g™iz©iЏЃSПtus
 491

	)

2720 
	#OBJ_№g™iz©iЏЃSПtus
 
OBJ_pЮўAЙribuЛTy≥
,45L

	)

2722 
	#LN_j™СMaЮbox
 "j™СMaЮbox"

	)

2723 
	#NID_j™СMaЮbox
 492

	)

2724 
	#OBJ_j™СMaЮbox
 
OBJ_pЮўAЙribuЛTy≥
,46L

	)

2726 
	#LN_maЮPїгїnыO±iЏ
 "maЮPїгїnыO±iЏ"

	)

2727 
	#NID_maЮPїгїnыO±iЏ
 493

	)

2728 
	#OBJ_maЮPїгїnыO±iЏ
 
OBJ_pЮўAЙribuЛTy≥
,47L

	)

2730 
	#LN_buЮdЪgName
 "buЮdЪgName"

	)

2731 
	#NID_buЮdЪgName
 494

	)

2732 
	#OBJ_buЮdЪgName
 
OBJ_pЮўAЙribuЛTy≥
,48L

	)

2734 
	#LN_dSAQuЃЩy
 "dSAQuЃЩy"

	)

2735 
	#NID_dSAQuЃЩy
 495

	)

2736 
	#OBJ_dSAQuЃЩy
 
OBJ_pЮўAЙribuЛTy≥
,49L

	)

2738 
	#LN_sЪgЋLevЦQuЃЩy
 "sЪgЋLevЦQuЃЩy"

	)

2739 
	#NID_sЪgЋLevЦQuЃЩy
 496

	)

2740 
	#OBJ_sЪgЋLevЦQuЃЩy
 
OBJ_pЮўAЙribuЛTy≥
,50L

	)

2742 
	#LN_subМУMЪimumQuЃЩy
 "subМУMЪimumQuЃЩy"

	)

2743 
	#NID_subМУMЪimumQuЃЩy
 497

	)

2744 
	#OBJ_subМУMЪimumQuЃЩy
 
OBJ_pЮўAЙribuЛTy≥
,51L

	)

2746 
	#LN_subМУMaximumQuЃЩy
 "subМУMaximumQuЃЩy"

	)

2747 
	#NID_subМУMaximumQuЃЩy
 498

	)

2748 
	#OBJ_subМУMaximumQuЃЩy
 
OBJ_pЮўAЙribuЛTy≥
,52L

	)

2750 
	#LN_≥rsЏЃSig«tuї
 "≥rsЏЃSig«tuї"

	)

2751 
	#NID_≥rsЏЃSig«tuї
 499

	)

2752 
	#OBJ_≥rsЏЃSig«tuї
 
OBJ_pЮўAЙribuЛTy≥
,53L

	)

2754 
	#LN_dITRedЬeщ
 "dITRedЬeщ"

	)

2755 
	#NID_dITRedЬeщ
 500

	)

2756 
	#OBJ_dITRedЬeщ
 
OBJ_pЮўAЙribuЛTy≥
,54L

	)

2758 
	#SN_audio
 "audio"

	)

2759 
	#NID_audio
 501

	)

2760 
	#OBJ_audio
 
OBJ_pЮўAЙribuЛTy≥
,55L

	)

2762 
	#LN_documТtPublishФ
 "documТtPublishФ"

	)

2763 
	#NID_documТtPublishФ
 502

	)

2764 
	#OBJ_documТtPublishФ
 
OBJ_pЮўAЙribuЛTy≥
,56L

	)

2766 
	#SN_id_£t
 "id-£t"

	)

2767 
	#LN_id_£t
 "Secuї EЋщrЏiшTњnІщiЏs"

	)

2768 
	#NID_id_£t
 512

	)

2769 
	#OBJ_id_£t
 
OBJ_ЪЛЇ©iЏЃ_№g™iz©iЏs
,42L

	)

2771 
	#SN_£t_щy≥
 "£t-щy≥"

	)

2772 
	#LN_£t_щy≥
 "cЏЛЅБy≥s"

	)

2773 
	#NID_£t_щy≥
 513

	)

2774 
	#OBJ_£t_щy≥
 
OBJ_id_£t
,0L

	)

2776 
	#SN_£t_msgExt
 "£t-msgExt"

	)

2777 
	#LN_£t_msgExt
 "mesІgРexЛnsiЏs"

	)

2778 
	#NID_£t_msgExt
 514

	)

2779 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

2781 
	#SN_£t_©М
 "£t-©М"

	)

2782 
	#NID_£t_©М
 515

	)

2783 
	#OBJ_£t_©М
 
OBJ_id_£t
,3L

	)

2785 
	#SN_£t_pёicy
 "£t-pёicy"

	)

2786 
	#NID_£t_pёicy
 516

	)

2787 
	#OBJ_£t_pёicy
 
OBJ_id_£t
,5L

	)

2789 
	#SN_£t_ыєExt
 "£t-ыєExt"

	)

2790 
	#LN_£t_ыєExt
 "ыєifi€ЛГxЛnsiЏs"

	)

2791 
	#NID_£t_ыєExt
 517

	)

2792 
	#OBJ_£t_ыєExt
 
OBJ_id_£t
,7L

	)

2794 
	#SN_£t_bњnd
 "£t-bњnd"

	)

2795 
	#NID_£t_bњnd
 518

	)

2796 
	#OBJ_£t_bњnd
 
OBJ_id_£t
,8L

	)

2798 
	#SN_£tщ_PAND©a
 "£tщ-PAND©a"

	)

2799 
	#NID_£tщ_PAND©a
 519

	)

2800 
	#OBJ_£tщ_PAND©a
 
OBJ_£t_щy≥
,0L

	)

2802 
	#SN_£tщ_PANTokТ
 "£tщ-PANTokТ"

	)

2803 
	#NID_£tщ_PANTokТ
 520

	)

2804 
	#OBJ_£tщ_PANTokТ
 
OBJ_£t_щy≥
,1L

	)

2806 
	#SN_£tщ_PANO∆y
 "£tщ-PANO∆y"

	)

2807 
	#NID_£tщ_PANO∆y
 521

	)

2808 
	#OBJ_£tщ_PANO∆y
 
OBJ_£t_щy≥
,2L

	)

2810 
	#SN_£tщ_OID©a
 "£tщ-OID©a"

	)

2811 
	#NID_£tщ_OID©a
 522

	)

2812 
	#OBJ_£tщ_OID©a
 
OBJ_£t_щy≥
,3L

	)

2814 
	#SN_£tщ_PI
 "£tщ-PI"

	)

2815 
	#NID_£tщ_PI
 523

	)

2816 
	#OBJ_£tщ_PI
 
OBJ_£t_щy≥
,4L

	)

2818 
	#SN_£tщ_PID©a
 "£tщ-PID©a"

	)

2819 
	#NID_£tщ_PID©a
 524

	)

2820 
	#OBJ_£tщ_PID©a
 
OBJ_£t_щy≥
,5L

	)

2822 
	#SN_£tщ_PID©aUnsig√d
 "£tщ-PID©aUnsig√d"

	)

2823 
	#NID_£tщ_PID©aUnsig√d
 525

	)

2824 
	#OBJ_£tщ_PID©aUnsig√d
 
OBJ_£t_щy≥
,6L

	)

2826 
	#SN_£tщ_HODI≈ut
 "£tщ-HODI≈ut"

	)

2827 
	#NID_£tщ_HODI≈ut
 526

	)

2828 
	#OBJ_£tщ_HODI≈ut
 
OBJ_£t_щy≥
,7L

	)

2830 
	#SN_£tщ_AuthResBaggage
 "£tщ-AuthResBaggage"

	)

2831 
	#NID_£tщ_AuthResBaggage
 527

	)

2832 
	#OBJ_£tщ_AuthResBaggage
 
OBJ_£t_щy≥
,8L

	)

2834 
	#SN_£tщ_AuthRevReqBaggage
 "£tщ-AuthRevReqBaggage"

	)

2835 
	#NID_£tщ_AuthRevReqBaggage
 528

	)

2836 
	#OBJ_£tщ_AuthRevReqBaggage
 
OBJ_£t_щy≥
,9L

	)

2838 
	#SN_£tщ_AuthRevResBaggage
 "£tщ-AuthRevResBaggage"

	)

2839 
	#NID_£tщ_AuthRevResBaggage
 529

	)

2840 
	#OBJ_£tщ_AuthRevResBaggage
 
OBJ_£t_щy≥
,10L

	)

2842 
	#SN_£tщ_C≠TokТSeq
 "£tщ-C≠TokТSeq"

	)

2843 
	#NID_£tщ_C≠TokТSeq
 530

	)

2844 
	#OBJ_£tщ_C≠TokТSeq
 
OBJ_£t_щy≥
,11L

	)

2846 
	#SN_£tщ_PInЩResD©a
 "£tщ-PInЩResD©a"

	)

2847 
	#NID_£tщ_PInЩResD©a
 531

	)

2848 
	#OBJ_£tщ_PInЩResD©a
 
OBJ_£t_щy≥
,12L

	)

2850 
	#SN_£tщ_PI_TBS
 "£tщ-PI-TBS"

	)

2851 
	#NID_£tщ_PI_TBS
 532

	)

2852 
	#OBJ_£tщ_PI_TBS
 
OBJ_£t_щy≥
,13L

	)

2854 
	#SN_£tщ_PResD©a
 "£tщ-PResD©a"

	)

2855 
	#NID_£tщ_PResD©a
 533

	)

2856 
	#OBJ_£tщ_PResD©a
 
OBJ_£t_щy≥
,14L

	)

2858 
	#SN_£tщ_AuthReqTBS
 "£tщ-AuthReqTBS"

	)

2859 
	#NID_£tщ_AuthReqTBS
 534

	)

2860 
	#OBJ_£tщ_AuthReqTBS
 
OBJ_£t_щy≥
,16L

	)

2862 
	#SN_£tщ_AuthResTBS
 "£tщ-AuthResTBS"

	)

2863 
	#NID_£tщ_AuthResTBS
 535

	)

2864 
	#OBJ_£tщ_AuthResTBS
 
OBJ_£t_щy≥
,17L

	)

2866 
	#SN_£tщ_AuthResTBSX
 "£tщ-AuthResTBSX"

	)

2867 
	#NID_£tщ_AuthResTBSX
 536

	)

2868 
	#OBJ_£tщ_AuthResTBSX
 
OBJ_£t_щy≥
,18L

	)

2870 
	#SN_£tщ_AuthTokТTBS
 "£tщ-AuthTokТTBS"

	)

2871 
	#NID_£tщ_AuthTokТTBS
 537

	)

2872 
	#OBJ_£tщ_AuthTokТTBS
 
OBJ_£t_щy≥
,19L

	)

2874 
	#SN_£tщ_C≠TokТD©a
 "£tщ-C≠TokТD©a"

	)

2875 
	#NID_£tщ_C≠TokТD©a
 538

	)

2876 
	#OBJ_£tщ_C≠TokТD©a
 
OBJ_£t_щy≥
,20L

	)

2878 
	#SN_£tщ_C≠TokТTBS
 "£tщ-C≠TokТTBS"

	)

2879 
	#NID_£tщ_C≠TokТTBS
 539

	)

2880 
	#OBJ_£tщ_C≠TokТTBS
 
OBJ_£t_щy≥
,21L

	)

2882 
	#SN_£tщ_AcqCђdCodeMsg
 "£tщ-AcqCђdCodeMsg"

	)

2883 
	#NID_£tщ_AcqCђdCodeMsg
 540

	)

2884 
	#OBJ_£tщ_AcqCђdCodeMsg
 
OBJ_£t_щy≥
,22L

	)

2886 
	#SN_£tщ_AuthRevReqTBS
 "£tщ-AuthRevReqTBS"

	)

2887 
	#NID_£tщ_AuthRevReqTBS
 541

	)

2888 
	#OBJ_£tщ_AuthRevReqTBS
 
OBJ_£t_щy≥
,23L

	)

2890 
	#SN_£tщ_AuthRevResD©a
 "£tщ-AuthRevResD©a"

	)

2891 
	#NID_£tщ_AuthRevResD©a
 542

	)

2892 
	#OBJ_£tщ_AuthRevResD©a
 
OBJ_£t_щy≥
,24L

	)

2894 
	#SN_£tщ_AuthRevResTBS
 "£tщ-AuthRevResTBS"

	)

2895 
	#NID_£tщ_AuthRevResTBS
 543

	)

2896 
	#OBJ_£tщ_AuthRevResTBS
 
OBJ_£t_щy≥
,25L

	)

2898 
	#SN_£tщ_C≠ReqTBS
 "£tщ-C≠ReqTBS"

	)

2899 
	#NID_£tщ_C≠ReqTBS
 544

	)

2900 
	#OBJ_£tщ_C≠ReqTBS
 
OBJ_£t_щy≥
,26L

	)

2902 
	#SN_£tщ_C≠ReqTBSX
 "£tщ-C≠ReqTBSX"

	)

2903 
	#NID_£tщ_C≠ReqTBSX
 545

	)

2904 
	#OBJ_£tщ_C≠ReqTBSX
 
OBJ_£t_щy≥
,27L

	)

2906 
	#SN_£tщ_C≠ResD©a
 "£tщ-C≠ResD©a"

	)

2907 
	#NID_£tщ_C≠ResD©a
 546

	)

2908 
	#OBJ_£tщ_C≠ResD©a
 
OBJ_£t_щy≥
,28L

	)

2910 
	#SN_£tщ_C≠RevReqTBS
 "£tщ-C≠RevReqTBS"

	)

2911 
	#NID_£tщ_C≠RevReqTBS
 547

	)

2912 
	#OBJ_£tщ_C≠RevReqTBS
 
OBJ_£t_щy≥
,29L

	)

2914 
	#SN_£tщ_C≠RevReqTBSX
 "£tщ-C≠RevReqTBSX"

	)

2915 
	#NID_£tщ_C≠RevReqTBSX
 548

	)

2916 
	#OBJ_£tщ_C≠RevReqTBSX
 
OBJ_£t_щy≥
,30L

	)

2918 
	#SN_£tщ_C≠RevResD©a
 "£tщ-C≠RevResD©a"

	)

2919 
	#NID_£tщ_C≠RevResD©a
 549

	)

2920 
	#OBJ_£tщ_C≠RevResD©a
 
OBJ_£t_щy≥
,31L

	)

2922 
	#SN_£tщ_CїdReqTBS
 "£tщ-CїdReqTBS"

	)

2923 
	#NID_£tщ_CїdReqTBS
 550

	)

2924 
	#OBJ_£tщ_CїdReqTBS
 
OBJ_£t_щy≥
,32L

	)

2926 
	#SN_£tщ_CїdReqTBSX
 "£tщ-CїdReqTBSX"

	)

2927 
	#NID_£tщ_CїdReqTBSX
 551

	)

2928 
	#OBJ_£tщ_CїdReqTBSX
 
OBJ_£t_щy≥
,33L

	)

2930 
	#SN_£tщ_CїdResD©a
 "£tщ-CїdResD©a"

	)

2931 
	#NID_£tщ_CїdResD©a
 552

	)

2932 
	#OBJ_£tщ_CїdResD©a
 
OBJ_£t_щy≥
,34L

	)

2934 
	#SN_£tщ_CїdRevReqTBS
 "£tщ-CїdRevReqTBS"

	)

2935 
	#NID_£tщ_CїdRevReqTBS
 553

	)

2936 
	#OBJ_£tщ_CїdRevReqTBS
 
OBJ_£t_щy≥
,35L

	)

2938 
	#SN_£tщ_CїdRevReqTBSX
 "£tщ-CїdRevReqTBSX"

	)

2939 
	#NID_£tщ_CїdRevReqTBSX
 554

	)

2940 
	#OBJ_£tщ_CїdRevReqTBSX
 
OBJ_£t_щy≥
,36L

	)

2942 
	#SN_£tщ_CїdRevResD©a
 "£tщ-CїdRevResD©a"

	)

2943 
	#NID_£tщ_CїdRevResD©a
 555

	)

2944 
	#OBJ_£tщ_CїdRevResD©a
 
OBJ_£t_щy≥
,37L

	)

2946 
	#SN_£tщ_PCФtReqD©a
 "£tщ-PCФtReqD©a"

	)

2947 
	#NID_£tщ_PCФtReqD©a
 556

	)

2948 
	#OBJ_£tщ_PCФtReqD©a
 
OBJ_£t_щy≥
,38L

	)

2950 
	#SN_£tщ_PCФtResTBS
 "£tщ-PCФtResTBS"

	)

2951 
	#NID_£tщ_PCФtResTBS
 557

	)

2952 
	#OBJ_£tщ_PCФtResTBS
 
OBJ_£t_щy≥
,39L

	)

2954 
	#SN_£tщ_B©chAdmЪReqD©a
 "£tщ-B©chAdmЪReqD©a"

	)

2955 
	#NID_£tщ_B©chAdmЪReqD©a
 558

	)

2956 
	#OBJ_£tщ_B©chAdmЪReqD©a
 
OBJ_£t_щy≥
,40L

	)

2958 
	#SN_£tщ_B©chAdmЪResD©a
 "£tщ-B©chAdmЪResD©a"

	)

2959 
	#NID_£tщ_B©chAdmЪResD©a
 559

	)

2960 
	#OBJ_£tщ_B©chAdmЪResD©a
 
OBJ_£t_щy≥
,41L

	)

2962 
	#SN_£tщ_CђdCInЩResTBS
 "£tщ-CђdCInЩResTBS"

	)

2963 
	#NID_£tщ_CђdCInЩResTBS
 560

	)

2964 
	#OBJ_£tщ_CђdCInЩResTBS
 
OBJ_£t_щy≥
,42L

	)

2966 
	#SN_£tщ_MeAqCInЩResTBS
 "£tщ-MeAqCInЩResTBS"

	)

2967 
	#NID_£tщ_MeAqCInЩResTBS
 561

	)

2968 
	#OBJ_£tщ_MeAqCInЩResTBS
 
OBJ_£t_щy≥
,43L

	)

2970 
	#SN_£tщ_RegF№mResTBS
 "£tщ-RegF№mResTBS"

	)

2971 
	#NID_£tщ_RegF№mResTBS
 562

	)

2972 
	#OBJ_£tщ_RegF№mResTBS
 
OBJ_£t_щy≥
,44L

	)

2974 
	#SN_£tщ_CФtReqD©a
 "£tщ-CФtReqD©a"

	)

2975 
	#NID_£tщ_CФtReqD©a
 563

	)

2976 
	#OBJ_£tщ_CФtReqD©a
 
OBJ_£t_щy≥
,45L

	)

2978 
	#SN_£tщ_CФtReqTBS
 "£tщ-CФtReqTBS"

	)

2979 
	#NID_£tщ_CФtReqTBS
 564

	)

2980 
	#OBJ_£tщ_CФtReqTBS
 
OBJ_£t_щy≥
,46L

	)

2982 
	#SN_£tщ_CФtResD©a
 "£tщ-CФtResD©a"

	)

2983 
	#NID_£tщ_CФtResD©a
 565

	)

2984 
	#OBJ_£tщ_CФtResD©a
 
OBJ_£t_щy≥
,47L

	)

2986 
	#SN_£tщ_CФtInqReqTBS
 "£tщ-CФtInqReqTBS"

	)

2987 
	#NID_£tщ_CФtInqReqTBS
 566

	)

2988 
	#OBJ_£tщ_CФtInqReqTBS
 
OBJ_£t_щy≥
,48L

	)

2990 
	#SN_£tщ_EЉ№TBS
 "£tщ-EЉ№TBS"

	)

2991 
	#NID_£tщ_EЉ№TBS
 567

	)

2992 
	#OBJ_£tщ_EЉ№TBS
 
OBJ_£t_щy≥
,49L

	)

2994 
	#SN_£tщ_PIDuЃSig√dTBE
 "£tщ-PIDuЃSig√dTBE"

	)

2995 
	#NID_£tщ_PIDuЃSig√dTBE
 568

	)

2996 
	#OBJ_£tщ_PIDuЃSig√dTBE
 
OBJ_£t_щy≥
,50L

	)

2998 
	#SN_£tщ_PIUnsig√dTBE
 "£tщ-PIUnsig√dTBE"

	)

2999 
	#NID_£tщ_PIUnsig√dTBE
 569

	)

3000 
	#OBJ_£tщ_PIUnsig√dTBE
 
OBJ_£t_щy≥
,51L

	)

3002 
	#SN_£tщ_AuthReqTBE
 "£tщ-AuthReqTBE"

	)

3003 
	#NID_£tщ_AuthReqTBE
 570

	)

3004 
	#OBJ_£tщ_AuthReqTBE
 
OBJ_£t_щy≥
,52L

	)

3006 
	#SN_£tщ_AuthResTBE
 "£tщ-AuthResTBE"

	)

3007 
	#NID_£tщ_AuthResTBE
 571

	)

3008 
	#OBJ_£tщ_AuthResTBE
 
OBJ_£t_щy≥
,53L

	)

3010 
	#SN_£tщ_AuthResTBEX
 "£tщ-AuthResTBEX"

	)

3011 
	#NID_£tщ_AuthResTBEX
 572

	)

3012 
	#OBJ_£tщ_AuthResTBEX
 
OBJ_£t_щy≥
,54L

	)

3014 
	#SN_£tщ_AuthTokТTBE
 "£tщ-AuthTokТTBE"

	)

3015 
	#NID_£tщ_AuthTokТTBE
 573

	)

3016 
	#OBJ_£tщ_AuthTokТTBE
 
OBJ_£t_щy≥
,55L

	)

3018 
	#SN_£tщ_C≠TokТTBE
 "£tщ-C≠TokТTBE"

	)

3019 
	#NID_£tщ_C≠TokТTBE
 574

	)

3020 
	#OBJ_£tщ_C≠TokТTBE
 
OBJ_£t_щy≥
,56L

	)

3022 
	#SN_£tщ_C≠TokТTBEX
 "£tщ-C≠TokТTBEX"

	)

3023 
	#NID_£tщ_C≠TokТTBEX
 575

	)

3024 
	#OBJ_£tщ_C≠TokТTBEX
 
OBJ_£t_щy≥
,57L

	)

3026 
	#SN_£tщ_AcqCђdCodeMsgTBE
 "£tщ-AcqCђdCodeMsgTBE"

	)

3027 
	#NID_£tщ_AcqCђdCodeMsgTBE
 576

	)

3028 
	#OBJ_£tщ_AcqCђdCodeMsgTBE
 
OBJ_£t_щy≥
,58L

	)

3030 
	#SN_£tщ_AuthRevReqTBE
 "£tщ-AuthRevReqTBE"

	)

3031 
	#NID_£tщ_AuthRevReqTBE
 577

	)

3032 
	#OBJ_£tщ_AuthRevReqTBE
 
OBJ_£t_щy≥
,59L

	)

3034 
	#SN_£tщ_AuthRevResTBE
 "£tщ-AuthRevResTBE"

	)

3035 
	#NID_£tщ_AuthRevResTBE
 578

	)

3036 
	#OBJ_£tщ_AuthRevResTBE
 
OBJ_£t_щy≥
,60L

	)

3038 
	#SN_£tщ_AuthRevResTBEB
 "£tщ-AuthRevResTBEB"

	)

3039 
	#NID_£tщ_AuthRevResTBEB
 579

	)

3040 
	#OBJ_£tщ_AuthRevResTBEB
 
OBJ_£t_щy≥
,61L

	)

3042 
	#SN_£tщ_C≠ReqTBE
 "£tщ-C≠ReqTBE"

	)

3043 
	#NID_£tщ_C≠ReqTBE
 580

	)

3044 
	#OBJ_£tщ_C≠ReqTBE
 
OBJ_£t_щy≥
,62L

	)

3046 
	#SN_£tщ_C≠ReqTBEX
 "£tщ-C≠ReqTBEX"

	)

3047 
	#NID_£tщ_C≠ReqTBEX
 581

	)

3048 
	#OBJ_£tщ_C≠ReqTBEX
 
OBJ_£t_щy≥
,63L

	)

3050 
	#SN_£tщ_C≠ResTBE
 "£tщ-C≠ResTBE"

	)

3051 
	#NID_£tщ_C≠ResTBE
 582

	)

3052 
	#OBJ_£tщ_C≠ResTBE
 
OBJ_£t_щy≥
,64L

	)

3054 
	#SN_£tщ_C≠RevReqTBE
 "£tщ-C≠RevReqTBE"

	)

3055 
	#NID_£tщ_C≠RevReqTBE
 583

	)

3056 
	#OBJ_£tщ_C≠RevReqTBE
 
OBJ_£t_щy≥
,65L

	)

3058 
	#SN_£tщ_C≠RevReqTBEX
 "£tщ-C≠RevReqTBEX"

	)

3059 
	#NID_£tщ_C≠RevReqTBEX
 584

	)

3060 
	#OBJ_£tщ_C≠RevReqTBEX
 
OBJ_£t_щy≥
,66L

	)

3062 
	#SN_£tщ_C≠RevResTBE
 "£tщ-C≠RevResTBE"

	)

3063 
	#NID_£tщ_C≠RevResTBE
 585

	)

3064 
	#OBJ_£tщ_C≠RevResTBE
 
OBJ_£t_щy≥
,67L

	)

3066 
	#SN_£tщ_CїdReqTBE
 "£tщ-CїdReqTBE"

	)

3067 
	#NID_£tщ_CїdReqTBE
 586

	)

3068 
	#OBJ_£tщ_CїdReqTBE
 
OBJ_£t_щy≥
,68L

	)

3070 
	#SN_£tщ_CїdReqTBEX
 "£tщ-CїdReqTBEX"

	)

3071 
	#NID_£tщ_CїdReqTBEX
 587

	)

3072 
	#OBJ_£tщ_CїdReqTBEX
 
OBJ_£t_щy≥
,69L

	)

3074 
	#SN_£tщ_CїdResTBE
 "£tщ-CїdResTBE"

	)

3075 
	#NID_£tщ_CїdResTBE
 588

	)

3076 
	#OBJ_£tщ_CїdResTBE
 
OBJ_£t_щy≥
,70L

	)

3078 
	#SN_£tщ_CїdRevReqTBE
 "£tщ-CїdRevReqTBE"

	)

3079 
	#NID_£tщ_CїdRevReqTBE
 589

	)

3080 
	#OBJ_£tщ_CїdRevReqTBE
 
OBJ_£t_щy≥
,71L

	)

3082 
	#SN_£tщ_CїdRevReqTBEX
 "£tщ-CїdRevReqTBEX"

	)

3083 
	#NID_£tщ_CїdRevReqTBEX
 590

	)

3084 
	#OBJ_£tщ_CїdRevReqTBEX
 
OBJ_£t_щy≥
,72L

	)

3086 
	#SN_£tщ_CїdRevResTBE
 "£tщ-CїdRevResTBE"

	)

3087 
	#NID_£tщ_CїdRevResTBE
 591

	)

3088 
	#OBJ_£tщ_CїdRevResTBE
 
OBJ_£t_щy≥
,73L

	)

3090 
	#SN_£tщ_B©chAdmЪReqTBE
 "£tщ-B©chAdmЪReqTBE"

	)

3091 
	#NID_£tщ_B©chAdmЪReqTBE
 592

	)

3092 
	#OBJ_£tщ_B©chAdmЪReqTBE
 
OBJ_£t_щy≥
,74L

	)

3094 
	#SN_£tщ_B©chAdmЪResTBE
 "£tщ-B©chAdmЪResTBE"

	)

3095 
	#NID_£tщ_B©chAdmЪResTBE
 593

	)

3096 
	#OBJ_£tщ_B©chAdmЪResTBE
 
OBJ_£t_щy≥
,75L

	)

3098 
	#SN_£tщ_RegF№mReqTBE
 "£tщ-RegF№mReqTBE"

	)

3099 
	#NID_£tщ_RegF№mReqTBE
 594

	)

3100 
	#OBJ_£tщ_RegF№mReqTBE
 
OBJ_£t_щy≥
,76L

	)

3102 
	#SN_£tщ_CФtReqTBE
 "£tщ-CФtReqTBE"

	)

3103 
	#NID_£tщ_CФtReqTBE
 595

	)

3104 
	#OBJ_£tщ_CФtReqTBE
 
OBJ_£t_щy≥
,77L

	)

3106 
	#SN_£tщ_CФtReqTBEX
 "£tщ-CФtReqTBEX"

	)

3107 
	#NID_£tщ_CФtReqTBEX
 596

	)

3108 
	#OBJ_£tщ_CФtReqTBEX
 
OBJ_£t_щy≥
,78L

	)

3110 
	#SN_£tщ_CФtResTBE
 "£tщ-CФtResTBE"

	)

3111 
	#NID_£tщ_CФtResTBE
 597

	)

3112 
	#OBJ_£tщ_CФtResTBE
 
OBJ_£t_щy≥
,79L

	)

3114 
	#SN_£tщ_CRLNўifi€tiЏTBS
 "£tщ-CRLNўifi€tiЏTBS"

	)

3115 
	#NID_£tщ_CRLNўifi€tiЏTBS
 598

	)

3116 
	#OBJ_£tщ_CRLNўifi€tiЏTBS
 
OBJ_£t_щy≥
,80L

	)

3118 
	#SN_£tщ_CRLNўifi€tiЏResTBS
 "£tщ-CRLNўifi€tiЏResTBS"

	)

3119 
	#NID_£tщ_CRLNўifi€tiЏResTBS
 599

	)

3120 
	#OBJ_£tщ_CRLNўifi€tiЏResTBS
 
OBJ_£t_щy≥
,81L

	)

3122 
	#SN_£tщ_BCIDi°ributiЏTBS
 "£tщ-BCIDi°ributiЏTBS"

	)

3123 
	#NID_£tщ_BCIDi°ributiЏTBS
 600

	)

3124 
	#OBJ_£tщ_BCIDi°ributiЏTBS
 
OBJ_£t_щy≥
,82L

	)

3126 
	#SN_£Лxt_gТCry±
 "£Лxt-gТCry±"

	)

3127 
	#LN_£Лxt_gТCry±
 "gТФiшьy±ogњm"

	)

3128 
	#NID_£Лxt_gТCry±
 601

	)

3129 
	#OBJ_£Лxt_gТCry±
 
OBJ_£t_msgExt
,1L

	)

3131 
	#SN_£Лxt_miAuth
 "£Лxt-miAuth"

	)

3132 
	#LN_£Лxt_miAuth
 "mФch™ИЪЩЯЛdЗuth"

	)

3133 
	#NID_£Лxt_miAuth
 602

	)

3134 
	#OBJ_£Лxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3136 
	#SN_£Лxt_pЪSecuї
 "£Лxt-pЪSecuї"

	)

3137 
	#NID_£Лxt_pЪSecuї
 603

	)

3138 
	#OBJ_£Лxt_pЪSecuї
 
OBJ_£t_msgExt
,4L

	)

3140 
	#SN_£Лxt_pЪAny
 "£Лxt-pЪAny"

	)

3141 
	#NID_£Лxt_pЪAny
 604

	)

3142 
	#OBJ_£Лxt_pЪAny
 
OBJ_£t_msgExt
,5L

	)

3144 
	#SN_£Лxt_Мack2
 "£Лxt-Мack2"

	)

3145 
	#NID_£Лxt_Мack2
 605

	)

3146 
	#OBJ_£Лxt_Мack2
 
OBJ_£t_msgExt
,7L

	)

3148 
	#SN_£Лxt_cv
 "£Лxt-cv"

	)

3149 
	#LN_£Лxt_cv
 "addЩiЏЃ vФifi€tiЏ"

	)

3150 
	#NID_£Лxt_cv
 606

	)

3151 
	#OBJ_£Лxt_cv
 
OBJ_£t_msgExt
,8L

	)

3153 
	#SN_£t_pёicy_roў
 "£t-pёicy-roў"

	)

3154 
	#NID_£t_pёicy_roў
 607

	)

3155 
	#OBJ_£t_pёicy_roў
 
OBJ_£t_pёicy
,0L

	)

3157 
	#SN_£tCext_hashedRoў
 "£tCext-hashedRoў"

	)

3158 
	#NID_£tCext_hashedRoў
 608

	)

3159 
	#OBJ_£tCext_hashedRoў
 
OBJ_£t_ыєExt
,0L

	)

3161 
	#SN_£tCext_ыєTy≥
 "£tCext-ыєTy≥"

	)

3162 
	#NID_£tCext_ыєTy≥
 609

	)

3163 
	#OBJ_£tCext_ыєTy≥
 
OBJ_£t_ыєExt
,1L

	)

3165 
	#SN_£tCext_mФchD©a
 "£tCext-mФchD©a"

	)

3166 
	#NID_£tCext_mФchD©a
 610

	)

3167 
	#OBJ_£tCext_mФchD©a
 
OBJ_£t_ыєExt
,2L

	)

3169 
	#SN_£tCext_cCФtRequЬed
 "£tCext-cCФtRequЬed"

	)

3170 
	#NID_£tCext_cCФtRequЬed
 611

	)

3171 
	#OBJ_£tCext_cCФtRequЬed
 
OBJ_£t_ыєExt
,3L

	)

3173 
	#SN_£tCext_tu¬ЦЪg
 "£tCext-tu¬ЦЪg"

	)

3174 
	#NID_£tCext_tu¬ЦЪg
 612

	)

3175 
	#OBJ_£tCext_tu¬ЦЪg
 
OBJ_£t_ыєExt
,4L

	)

3177 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3178 
	#NID_£tCext_£tExt
 613

	)

3179 
	#OBJ_£tCext_£tExt
 
OBJ_£t_ыєExt
,5L

	)

3181 
	#SN_£tCext_£tQuЃf
 "£tCext-£tQuЃf"

	)

3182 
	#NID_£tCext_£tQuЃf
 614

	)

3183 
	#OBJ_£tCext_£tQuЃf
 
OBJ_£t_ыєExt
,6L

	)

3185 
	#SN_£tCext_PGWY€ЈbЮЩЫs
 "£tCext-PGWY€ЈbЮЩЫs"

	)

3186 
	#NID_£tCext_PGWY€ЈbЮЩЫs
 615

	)

3187 
	#OBJ_£tCext_PGWY€ЈbЮЩЫs
 
OBJ_£t_ыєExt
,7L

	)

3189 
	#SN_£tCext_TokТIdТtifЫr
 "£tCext-TokТIdТtifЫr"

	)

3190 
	#NID_£tCext_TokТIdТtifЫr
 616

	)

3191 
	#OBJ_£tCext_TokТIdТtifЫr
 
OBJ_£t_ыєExt
,8L

	)

3193 
	#SN_£tCext_Tњck2D©a
 "£tCext-Tњck2D©a"

	)

3194 
	#NID_£tCext_Tњck2D©a
 617

	)

3195 
	#OBJ_£tCext_Tњck2D©a
 
OBJ_£t_ыєExt
,9L

	)

3197 
	#SN_£tCext_TokТTy≥
 "£tCext-TokТTy≥"

	)

3198 
	#NID_£tCext_TokТTy≥
 618

	)

3199 
	#OBJ_£tCext_TokТTy≥
 
OBJ_£t_ыєExt
,10L

	)

3201 
	#SN_£tCext_IssuФC≠abЮЩЫs
 "£tCext-IssuФC≠abЮЩЫs"

	)

3202 
	#NID_£tCext_IssuФC≠abЮЩЫs
 619

	)

3203 
	#OBJ_£tCext_IssuФC≠abЮЩЫs
 
OBJ_£t_ыєExt
,11L

	)

3205 
	#SN_£tAЙr_CФt
 "£tAЙr-CФt"

	)

3206 
	#NID_£tAЙr_CФt
 620

	)

3207 
	#OBJ_£tAЙr_CФt
 
OBJ_£t_©М
,0L

	)

3209 
	#SN_£tAЙr_PGWY€p
 "£tAЙr-PGWY€p"

	)

3210 
	#LN_£tAЙr_PGWY€p
 "ЈymТИg©eway c≠abЮЩЫs"

	)

3211 
	#NID_£tAЙr_PGWY€p
 621

	)

3212 
	#OBJ_£tAЙr_PGWY€p
 
OBJ_£t_©М
,1L

	)

3214 
	#SN_£tAЙr_TokТTy≥
 "£tAЙr-TokТTy≥"

	)

3215 
	#NID_£tAЙr_TokТTy≥
 622

	)

3216 
	#OBJ_£tAЙr_TokТTy≥
 
OBJ_£t_©М
,2L

	)

3218 
	#SN_£tAЙr_IssC≠
 "£tAЙr-IssC≠"

	)

3219 
	#LN_£tAЙr_IssC≠
 "issuФ c≠abЮЩЫs"

	)

3220 
	#NID_£tAЙr_IssC≠
 623

	)

3221 
	#OBJ_£tAЙr_IssC≠
 
OBJ_£t_©М
,3L

	)

3223 
	#SN_£t_roўKeyThumb
 "£t-roўKeyThumb"

	)

3224 
	#NID_£t_roўKeyThumb
 624

	)

3225 
	#OBJ_£t_roўKeyThumb
 
OBJ_£tAЙr_CФt
,0L

	)

3227 
	#SN_£t_addPёicy
 "£t-addPёicy"

	)

3228 
	#NID_£t_addPёicy
 625

	)

3229 
	#OBJ_£t_addPёicy
 
OBJ_£tAЙr_CФt
,1L

	)

3231 
	#SN_£tAЙr_TokТ_EMV
 "£tAЙr-TokТ-EMV"

	)

3232 
	#NID_£tAЙr_TokТ_EMV
 626

	)

3233 
	#OBJ_£tAЙr_TokТ_EMV
 
OBJ_£tAЙr_TokТTy≥
,1L

	)

3235 
	#SN_£tAЙr_TokТ_B0Prime
 "£tAЙr-TokТ-B0Prime"

	)

3236 
	#NID_£tAЙr_TokТ_B0Prime
 627

	)

3237 
	#OBJ_£tAЙr_TokТ_B0Prime
 
OBJ_£tAЙr_TokТTy≥
,2L

	)

3239 
	#SN_£tAЙr_IssC≠_CVM
 "£tAЙr-IssC≠-CVM"

	)

3240 
	#NID_£tAЙr_IssC≠_CVM
 628

	)

3241 
	#OBJ_£tAЙr_IssC≠_CVM
 
OBJ_£tAЙr_IssC≠
,3L

	)

3243 
	#SN_£tAЙr_IssC≠_T2
 "£tAЙr-IssC≠-T2"

	)

3244 
	#NID_£tAЙr_IssC≠_T2
 629

	)

3245 
	#OBJ_£tAЙr_IssC≠_T2
 
OBJ_£tAЙr_IssC≠
,4L

	)

3247 
	#SN_£tAЙr_IssC≠_Sig
 "£tAЙr-IssC≠-Sig"

	)

3248 
	#NID_£tAЙr_IssC≠_Sig
 630

	)

3249 
	#OBJ_£tAЙr_IssC≠_Sig
 
OBJ_£tAЙr_IssC≠
,5L

	)

3251 
	#SN_£tAЙr_GТCry±grm
 "£tAЙr-GТCry±grm"

	)

3252 
	#LN_£tAЙr_GТCry±grm
 "gТФ©Рьy±ogњm"

	)

3253 
	#NID_£tAЙr_GТCry±grm
 631

	)

3254 
	#OBJ_£tAЙr_GТCry±grm
 
OBJ_£tAЙr_IssC≠_CVM
,1L

	)

3256 
	#SN_£tAЙr_T2Enc
 "£tAЙr-T2Enc"

	)

3257 
	#LN_£tAЙr_T2Enc
 "Тьy±edБњck 2"

	)

3258 
	#NID_£tAЙr_T2Enc
 632

	)

3259 
	#OBJ_£tAЙr_T2Enc
 
OBJ_£tAЙr_IssC≠_T2
,1L

	)

3261 
	#SN_£tAЙr_T2юЧєxt
 "£tAЙr-T2юЧєxt"

	)

3262 
	#LN_£tAЙr_T2юЧєxt
 "юЧєexИМack 2"

	)

3263 
	#NID_£tAЙr_T2юЧєxt
 633

	)

3264 
	#OBJ_£tAЙr_T2юЧєxt
 
OBJ_£tAЙr_IssC≠_T2
,2L

	)

3266 
	#SN_£tAЙr_TokICCsig
 "£tAЙr-TokICCsig"

	)

3267 
	#LN_£tAЙr_TokICCsig
 "ICC oЄtokТ sig«tuї"

	)

3268 
	#NID_£tAЙr_TokICCsig
 634

	)

3269 
	#OBJ_£tAЙr_TokICCsig
 
OBJ_£tAЙr_IssC≠_Sig
,1L

	)

3271 
	#SN_£tAЙr_SecDevSig
 "£tAЙr-SecDevSig"

	)

3272 
	#LN_£tAЙr_SecDevSig
 "£cuї deviы sig«tuї"

	)

3273 
	#NID_£tAЙr_SecDevSig
 635

	)

3274 
	#OBJ_£tAЙr_SecDevSig
 
OBJ_£tAЙr_IssC≠_Sig
,2L

	)

3276 
	#SN_£t_bњnd_IATA_ATA
 "£t-bњnd-IATA-ATA"

	)

3277 
	#NID_£t_bњnd_IATA_ATA
 636

	)

3278 
	#OBJ_£t_bњnd_IATA_ATA
 
OBJ_£t_bњnd
,1L

	)

3280 
	#SN_£t_bњnd_DЪФs
 "£t-bњnd-DЪФs"

	)

3281 
	#NID_£t_bњnd_DЪФs
 637

	)

3282 
	#OBJ_£t_bњnd_DЪФs
 
OBJ_£t_bњnd
,30L

	)

3284 
	#SN_£t_bњnd_AmФi€nExіess
 "£t-bњnd-AmФi€nExіess"

	)

3285 
	#NID_£t_bњnd_AmФi€nExіess
 638

	)

3286 
	#OBJ_£t_bњnd_AmФi€nExіess
 
OBJ_£t_bњnd
,34L

	)

3288 
	#SN_£t_bњnd_JCB
 "£t-bњnd-JCB"

	)

3289 
	#NID_£t_bњnd_JCB
 639

	)

3290 
	#OBJ_£t_bњnd_JCB
 
OBJ_£t_bњnd
,35L

	)

3292 
	#SN_£t_bњnd_ViІ
 "£t-bњnd-ViІ"

	)

3293 
	#NID_£t_bњnd_ViІ
 640

	)

3294 
	#OBJ_£t_bњnd_ViІ
 
OBJ_£t_bњnd
,4L

	)

3296 
	#SN_£t_bњnd_Ma°ФCђd
 "£t-bњnd-Ma°ФCђd"

	)

3297 
	#NID_£t_bњnd_Ma°ФCђd
 641

	)

3298 
	#OBJ_£t_bњnd_Ma°ФCђd
 
OBJ_£t_bњnd
,5L

	)

3300 
	#SN_£t_bњnd_Novus
 "£t-bњnd-Novus"

	)

3301 
	#NID_£t_bњnd_Novus
 642

	)

3302 
	#OBJ_£t_bњnd_Novus
 
OBJ_£t_bњnd
,6011L

	)

3304 
	#SN_des_cdmf
 "DES-CDMF"

	)

3305 
	#LN_des_cdmf
 "des-cdmf"

	)

3306 
	#NID_des_cdmf
 643

	)

3307 
	#OBJ_des_cdmf
 
OBJ_rІdsi
,3L,10L

	)

3309 
	#SN_rІOAEPEnьy±iЏSET
 "rІOAEPEnьy±iЏSET"

	)

3310 
	#NID_rІOAEPEnьy±iЏSET
 644

	)

3311 
	#OBJ_rІOAEPEnьy±iЏSET
 
OBJ_rІdsi
,1L,1L,6L

	)

3313 
	#SN_Э£c3
 "OakЋy-EC2N-3"

	)

3314 
	#LN_Э£c3
 "Э£c3"

	)

3315 
	#NID_Э£c3
 749

	)

3317 
	#SN_Э£c4
 "OakЋy-EC2N-4"

	)

3318 
	#LN_Э£c4
 "Э£c4"

	)

3319 
	#NID_Э£c4
 750

	)

3321 
	#SN_€mЦlЯ_128_cbc
 "CAMELLIA-128-CBC"

	)

3322 
	#LN_€mЦlЯ_128_cbc
 "€mЦlЯ-128-cbc"

	)

3323 
	#NID_€mЦlЯ_128_cbc
 751

	)

3324 
	#OBJ_€mЦlЯ_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3326 
	#SN_€mЦlЯ_192_cbc
 "CAMELLIA-192-CBC"

	)

3327 
	#LN_€mЦlЯ_192_cbc
 "€mЦlЯ-192-cbc"

	)

3328 
	#NID_€mЦlЯ_192_cbc
 752

	)

3329 
	#OBJ_€mЦlЯ_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3331 
	#SN_€mЦlЯ_256_cbc
 "CAMELLIA-256-CBC"

	)

3332 
	#LN_€mЦlЯ_256_cbc
 "€mЦlЯ-256-cbc"

	)

3333 
	#NID_€mЦlЯ_256_cbc
 753

	)

3334 
	#OBJ_€mЦlЯ_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3336 
	#OBJ_Ѕt_ds
 0L,3L,4401L,5L

	)

3338 
	#OBJ_€mЦlЯ
 
OBJ_Ѕt_ds
,3L,1L,9L

	)

3340 
	#SN_€mЦlЯ_128_ecb
 "CAMELLIA-128-ECB"

	)

3341 
	#LN_€mЦlЯ_128_ecb
 "€mЦlЯ-128-ecb"

	)

3342 
	#NID_€mЦlЯ_128_ecb
 754

	)

3343 
	#OBJ_€mЦlЯ_128_ecb
 
OBJ_€mЦlЯ
,1L

	)

3345 
	#SN_€mЦlЯ_128_ofb128
 "CAMELLIA-128-OFB"

	)

3346 
	#LN_€mЦlЯ_128_ofb128
 "€mЦlЯ-128-ofb"

	)

3347 
	#NID_€mЦlЯ_128_ofb128
 766

	)

3348 
	#OBJ_€mЦlЯ_128_ofb128
 
OBJ_€mЦlЯ
,3L

	)

3350 
	#SN_€mЦlЯ_128_cfb128
 "CAMELLIA-128-CFB"

	)

3351 
	#LN_€mЦlЯ_128_cfb128
 "€mЦlЯ-128-cfb"

	)

3352 
	#NID_€mЦlЯ_128_cfb128
 757

	)

3353 
	#OBJ_€mЦlЯ_128_cfb128
 
OBJ_€mЦlЯ
,4L

	)

3355 
	#SN_€mЦlЯ_192_ecb
 "CAMELLIA-192-ECB"

	)

3356 
	#LN_€mЦlЯ_192_ecb
 "€mЦlЯ-192-ecb"

	)

3357 
	#NID_€mЦlЯ_192_ecb
 755

	)

3358 
	#OBJ_€mЦlЯ_192_ecb
 
OBJ_€mЦlЯ
,21L

	)

3360 
	#SN_€mЦlЯ_192_ofb128
 "CAMELLIA-192-OFB"

	)

3361 
	#LN_€mЦlЯ_192_ofb128
 "€mЦlЯ-192-ofb"

	)

3362 
	#NID_€mЦlЯ_192_ofb128
 767

	)

3363 
	#OBJ_€mЦlЯ_192_ofb128
 
OBJ_€mЦlЯ
,23L

	)

3365 
	#SN_€mЦlЯ_192_cfb128
 "CAMELLIA-192-CFB"

	)

3366 
	#LN_€mЦlЯ_192_cfb128
 "€mЦlЯ-192-cfb"

	)

3367 
	#NID_€mЦlЯ_192_cfb128
 758

	)

3368 
	#OBJ_€mЦlЯ_192_cfb128
 
OBJ_€mЦlЯ
,24L

	)

3370 
	#SN_€mЦlЯ_256_ecb
 "CAMELLIA-256-ECB"

	)

3371 
	#LN_€mЦlЯ_256_ecb
 "€mЦlЯ-256-ecb"

	)

3372 
	#NID_€mЦlЯ_256_ecb
 756

	)

3373 
	#OBJ_€mЦlЯ_256_ecb
 
OBJ_€mЦlЯ
,41L

	)

3375 
	#SN_€mЦlЯ_256_ofb128
 "CAMELLIA-256-OFB"

	)

3376 
	#LN_€mЦlЯ_256_ofb128
 "€mЦlЯ-256-ofb"

	)

3377 
	#NID_€mЦlЯ_256_ofb128
 768

	)

3378 
	#OBJ_€mЦlЯ_256_ofb128
 
OBJ_€mЦlЯ
,43L

	)

3380 
	#SN_€mЦlЯ_256_cfb128
 "CAMELLIA-256-CFB"

	)

3381 
	#LN_€mЦlЯ_256_cfb128
 "€mЦlЯ-256-cfb"

	)

3382 
	#NID_€mЦlЯ_256_cfb128
 759

	)

3383 
	#OBJ_€mЦlЯ_256_cfb128
 
OBJ_€mЦlЯ
,44L

	)

3385 
	#SN_€mЦlЯ_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3386 
	#LN_€mЦlЯ_128_cfb1
 "€mЦlЯ-128-cfb1"

	)

3387 
	#NID_€mЦlЯ_128_cfb1
 760

	)

3389 
	#SN_€mЦlЯ_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3390 
	#LN_€mЦlЯ_192_cfb1
 "€mЦlЯ-192-cfb1"

	)

3391 
	#NID_€mЦlЯ_192_cfb1
 761

	)

3393 
	#SN_€mЦlЯ_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3394 
	#LN_€mЦlЯ_256_cfb1
 "€mЦlЯ-256-cfb1"

	)

3395 
	#NID_€mЦlЯ_256_cfb1
 762

	)

3397 
	#SN_€mЦlЯ_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3398 
	#LN_€mЦlЯ_128_cfb8
 "€mЦlЯ-128-cfb8"

	)

3399 
	#NID_€mЦlЯ_128_cfb8
 763

	)

3401 
	#SN_€mЦlЯ_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3402 
	#LN_€mЦlЯ_192_cfb8
 "€mЦlЯ-192-cfb8"

	)

3403 
	#NID_€mЦlЯ_192_cfb8
 764

	)

3405 
	#SN_€mЦlЯ_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3406 
	#LN_€mЦlЯ_256_cfb8
 "€mЦlЯ-256-cfb8"

	)

3407 
	#NID_€mЦlЯ_256_cfb8
 765

	)

3409 
	#SN_kiІ
 "KISA"

	)

3410 
	#LN_kiІ
 "kiІ"

	)

3411 
	#NID_kiІ
 773

	)

3412 
	#OBJ_kiІ
 
OBJ_membФ_body
,410L,200004L

	)

3414 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3415 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3416 
	#NID_£ed_ecb
 776

	)

3417 
	#OBJ_£ed_ecb
 
OBJ_kiІ
,1L,3L

	)

3419 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3420 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3421 
	#NID_£ed_cbc
 777

	)

3422 
	#OBJ_£ed_cbc
 
OBJ_kiІ
,1L,4L

	)

3424 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

3425 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

3426 
	#NID_£ed_cfb128
 779

	)

3427 
	#OBJ_£ed_cfb128
 
OBJ_kiІ
,1L,5L

	)

3429 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

3430 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

3431 
	#NID_£ed_ofb128
 778

	)

3432 
	#OBJ_£ed_ofb128
 
OBJ_kiІ
,1L,6L

	)

	@/usr/include/wchar.h

24 #iвdeа
_WCHAR_H


26 #iа!
defЪed
 
__√ed_mb°©e_t
 && !defЪed 
__√ed_wЪt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<г©uїs.h
>

31 #ifdeа
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #iа
defЪed
 
__USE_UNIX98
 || defЪed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°dђg.h
>

42 
	~<bЩs/wchђ.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wchђ_t


	)

47 
	#__√ed_NULL


	)

49 #iа
defЪed
 
_WCHAR_H
 || defЪed 
__√ed_wЪt_t
 || !defЪed 
__WINT_TYPE__


50 #undeа
__√ed_wЪt_t


51 
	#__√ed_wЪt_t


	)

52 
	~<°ddef.h
>

55 #iа
defЪed
 
__эlu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #iвdeа
_WINT_T


66 
	#_WINT_T


	)

67 
	twЪt_t
;

71 #iа
defЪed
 
__эlu•lus
 && defЪed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
defЪed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twЪt_t
;

75 
	g__END_NAMESPACE_STD


80 #iа(
defЪed
 
_WCHAR_H
 || defЪed 
__√ed_mb°©e_t
и&& !defЪed 
__mb°©e_t_defЪed


81 
	#__mb°©e_t_defЪed
 1

	)

85 
	m__couЅ
;

88 #ifdeа
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wЪt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vЃue
;

95 } 
	t__mb°©e_t
;

97 #undeа
__√ed_mb°©e_t


102 #ifdeа
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifdeа
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #iвdeа
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #iвdeа
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #iа
defЪed
 
__USE_XOPEN
 && !defЪed 
__USE_UNIX98


125 
	~<wщy≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wchђ_t
 *
	$wcsэy
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

145 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
и
__THROW
;

147 
wchђ_t
 *
	$wcҐэy
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

148 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wchђ_t
 *
	$wcs€t
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

153 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
и
__THROW
;

155 
wchђ_t
 *
	$wcҐ€t
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

156 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
)

161 
__THROW
 
__©МibuЛ_puї__
;

163 
	$wcҐcmp
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©МibuЛ_puї__
;

165 
__END_NAMESPACE_STD


167 #ifdeа
__USE_XOPEN2K8


169 
	$wcs€£cmp
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
и
__THROW
;

172 
	$wcҐ€£cmp
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
,

173 
size_t
 
__n
и
__THROW
;

177 
	~<xlo€Ћ.h
>

179 
	$wcs€£cmp_l
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
,

180 
__lo€Ћ_t
 
__loc
и
__THROW
;

182 
	$wcҐ€£cmp_l
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
,

183 
size_t
 
__n
, 
__lo€Ћ_t
 
__loc
и
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscёl
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
и
__THROW
;

193 
size_t
 
	$wcsxдm
 (
wchђ_t
 *
__ї°riщ
 
__s1
,

194 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
и
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifdeа
__USE_XOPEN2K8


203 
	$wcscёl_l
 (
__cЏ°
 
wchђ_t
 *
__s1
, __cЏ° wchђ_И*
__s2
,

204 
__lo€Ћ_t
 
__loc
и
__THROW
;

209 
size_t
 
	$wcsxдm_l
 (
wchђ_t
 *
__s1
, 
__cЏ°
 wchђ_И*
__s2
,

210 
size_t
 
__n
, 
__lo€Ћ_t
 
__loc
и
__THROW
;

213 
wchђ_t
 *
	$wcsdup
 (
__cЏ°
 
wchђ_t
 *
__s
и
__THROW
 
__©МibuЛ_mЃloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wchђ_t
 *
	$wcschr
 (
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"и
__©МibuЛ_puї__
;

221 "C++" 
__cЏ°
 
wchђ_t
 *
	$wcschr
 (
__cЏ°
 
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"и
__©МibuЛ_puї__
;

224 
wchђ_t
 *
	$wcschr
 (
__cЏ°
 
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

225 
__THROW
 
__©МibuЛ_puї__
;

228 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wchђ_t
 *
	$wc§chr
 (
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"и
__©МibuЛ_puї__
;

231 "C++" 
__cЏ°
 
wchђ_t
 *
	$wc§chr
 (
__cЏ°
 
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"и
__©МibuЛ_puї__
;

234 
wchђ_t
 *
	$wc§chr
 (
__cЏ°
 
wchђ_t
 *
__wcs
, wchђ_И
__wc
)

235 
__THROW
 
__©МibuЛ_puї__
;

237 
__END_NAMESPACE_STD


239 #ifdeа
__USE_GNU


242 
wchђ_t
 *
	$wcschЇul
 (
__cЏ°
 
wchђ_t
 *
__s
, wchђ_И
__wc
)

243 
__THROW
 
__©МibuЛ_puї__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__cЏ°
 
wchђ_t
 *
__wcs
, __cЏ° wchђ_И*
__їjeщ
)

250 
__THROW
 
__©МibuЛ_puї__
;

253 
size_t
 
	$wcs•n
 (
__cЏ°
 
wchђ_t
 *
__wcs
, __cЏ° wchђ_И*
__acы±
)

254 
__THROW
 
__©МibuЛ_puї__
;

256 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wchђ_t
 *
	$wc•brk
 (
wchђ_t
 *
__wcs
, 
__cЏ°
 wchђ_И*
__acы±
)

258 
__THROW
 
	`__asm
 ("wc•brk"и
__©МibuЛ_puї__
;

259 "C++" 
__cЏ°
 
wchђ_t
 *
	$wc•brk
 (
__cЏ°
 
wchђ_t
 *
__wcs
,

260 
__cЏ°
 
wchђ_t
 *
__acы±
)

261 
__THROW
 
	`__asm
 ("wc•brk"и
__©МibuЛ_puї__
;

263 
wchђ_t
 *
	$wc•brk
 (
__cЏ°
 
wchђ_t
 *
__wcs
, __cЏ° wchђ_И*
__acы±
)

264 
__THROW
 
__©МibuЛ_puї__
;

267 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wchђ_t
 *
	$wcs°r
 (
wchђ_t
 *
__hay°ack
, 
__cЏ°
 wchђ_И*
__√edЋ
)

269 
__THROW
 
	`__asm
 ("wcs°r"и
__©МibuЛ_puї__
;

270 "C++" 
__cЏ°
 
wchђ_t
 *
	$wcs°r
 (
__cЏ°
 
wchђ_t
 *
__hay°ack
,

271 
__cЏ°
 
wchђ_t
 *
__√edЋ
)

272 
__THROW
 
	`__asm
 ("wcs°r"и
__©МibuЛ_puї__
;

274 
wchђ_t
 *
	$wcs°r
 (
__cЏ°
 
wchђ_t
 *
__hay°ack
, __cЏ° wchђ_И*
__√edЋ
)

275 
__THROW
 
__©МibuЛ_puї__
;

279 
wchђ_t
 *
	$wc°ok
 (
wchђ_t
 *
__ї°riщ
 
__s
,

280 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__dЦim
,

281 
wchђ_t
 **
__ї°riщ
 
__±r
и
__THROW
;

284 
size_t
 
	$wc¶Т
 (
__cЏ°
 
wchђ_t
 *
__s
и
__THROW
 
__©МibuЛ_puї__
;

285 
__END_NAMESPACE_STD


287 #ifdeа
__USE_XOPEN


289 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wchђ_t
 *
	$wcswcs
 (
wchђ_t
 *
__hay°ack
, 
__cЏ°
 wchђ_И*
__√edЋ
)

291 
__THROW
 
	`__asm
 ("wcswcs"и
__©МibuЛ_puї__
;

292 "C++" 
__cЏ°
 
wchђ_t
 *
	$wcswcs
 (
__cЏ°
 
wchђ_t
 *
__hay°ack
,

293 
__cЏ°
 
wchђ_t
 *
__√edЋ
)

294 
__THROW
 
	`__asm
 ("wcswcs"и
__©МibuЛ_puї__
;

296 
wchђ_t
 *
	$wcswcs
 (
__cЏ°
 
wchђ_t
 *
__hay°ack
, __cЏ° wchђ_И*
__√edЋ
)

297 
__THROW
 
__©МibuЛ_puї__
;

301 #ifdeа
__USE_XOPEN2K8


303 
size_t
 
	$wcҐЋn
 (
__cЏ°
 
wchђ_t
 *
__s
, 
size_t
 
__maxЋn
)

304 
__THROW
 
__©МibuЛ_puї__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifdeа
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wchђ_t
 *
	$wmemchr
 (
wchђ_t
 *
__s
, wchђ_И
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"и
__©МibuЛ_puї__
;

313 "C++" 
__cЏ°
 
wchђ_t
 *
	$wmemchr
 (
__cЏ°
 
wchђ_t
 *
__s
, wchђ_И
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"и
__©МibuЛ_puї__
;

317 
wchђ_t
 *
	$wmemchr
 (
__cЏ°
 
wchђ_t
 *
__s
, wchђ_И
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©МibuЛ_puї__
;

322 
	$wmemcmp
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s1
,

323 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©МibuЛ_puї__
;

327 
wchђ_t
 *
	$wmemэy
 (
wchђ_t
 *
__ї°riщ
 
__s1
,

328 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
и
__THROW
;

332 
wchђ_t
 *
	$wmemmove
 (
wchђ_t
 *
__s1
, 
__cЏ°
 wchђ_И*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wchђ_t
 *
	$wmem£t
 (
wchђ_t
 *
__s
, wchђ_И
__c
, 
size_t
 
__n
и
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdeа
__USE_GNU


342 
wchђ_t
 *
	$wmempэy
 (
wchђ_t
 *
__ї°riщ
 
__s1
,

343 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wЪt_t
 
	$btowc
 (
__c
и
__THROW
;

355 
	$wщob
 (
wЪt_t
 
__c
и
__THROW
;

359 
	$mbsЪЩ
 (
__cЏ°
 
mb°©e_t
 *
__ps
и
__THROW
 
__©МibuЛ_puї__
;

363 
size_t
 
	$mbєowc
 (
wchђ_t
 *
__ї°riщ
 
__pwc
,

364 
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
и
__THROW
;

368 
size_t
 
	$wьtomb
 (*
__ї°riщ
 
__s
, 
wchђ_t
 
__wc
,

369 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

372 
size_t
 
	$__mbЊТ
 (
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

374 
size_t
 
	$mbЊТ
 (
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifdeа
__USE_EXTERN_INLINES


384 
wЪt_t
 
	$__btowc_ЃЯs
 (
__c
и
	`__asm
 ("btowc");

385 
__exЛЇ_ЪlЪe
 
wЪt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buЮtЪ_cЏ°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wЪt_t
и
__c
 : 
	`__btowc_ЃЯs
 (__c)); 
	}
}

390 
	$__wщob_ЃЯs
 (
wЪt_t
 
__c
и
	`__asm
 ("wctob");

391 
__exЛЇ_ЪlЪe
 

392 
	`__NTH
 (
	$wщob
 (
wЪt_t
 
__wc
))

393 {  (
	`__buЮtЪ_cЏ°™t_p
 (
__wc
и&& __wш>р
L
'\0' && __wc <= L'\x7f'

394 ? (и
__wc
 : 
	`__wщob_ЃЯs
 (__wc)); 
	}
}

396 
__exЛЇ_ЪlЪe
 
size_t


397 
__NTH
 (
	$mbЊТ
 (
__cЏ°
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ї°riщ
 
__ps
))

399 {  (
__ps
 !р
NULL


400 ? 
	`mbєowc
 (
NULL
, 
__s
, 
__n
, 
__ps
и: 
	`__mbЊТ
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wchђ_t
 *
__ї°riщ
 
__d°
,

407 
__cЏ°
 **
__ї°riщ
 
__§c
, 
size_t
 
__Ћn
,

408 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ї°riщ
 
__d°
,

413 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
, 
size_t
 
__Ћn
,

414 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mbҐєowcs
 (
wchђ_t
 *
__ї°riщ
 
__d°
,

422 
__cЏ°
 **
__ї°riщ
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

427 
size_t
 
	$wcҐєombs
 (*
__ї°riщ
 
__d°
,

428 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

429 
size_t
 
__nwc
, size_И
__Ћn
,

430 
mb°©e_t
 *
__ї°riщ
 
__ps
и
__THROW
;

435 #ifdeа
__USE_XOPEN


437 
	$wcwidth
 (
wchђ_t
 
__c
и
__THROW
;

441 
	$wcswidth
 (
__cЏ°
 
wchђ_t
 *
__s
, 
size_t
 
__n
и
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

449 
wchђ_t
 **
__ї°riщ
 
__Тd±r
и
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifdeа
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

456 
wchђ_t
 **
__ї°riщ
 
__Тd±r
и
__THROW
;

457 
	$wc°ёd
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

458 
wchђ_t
 **
__ї°riщ
 
__Тd±r
и
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ё
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

467 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
и
__THROW
;

471 
	$wc°oul
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

472 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #iа
defЪed
 
__USE_ISOC99
 || (defЪed 
__GNUC__
 && defЪed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exЛnsiЏ__


481 
	$wc°ёl
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

482 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

483 
__THROW
;

487 
__exЛnsiЏ__


488 
	$wc°ouќ
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

489 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

490 
__ba£
и
__THROW
;

491 
__END_NAMESPACE_C99


494 #iа
defЪed
 
__GNUC__
 && defЪed 
__USE_GNU


497 
__exЛnsiЏ__


498 
	$wc°oq
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

499 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
)

500 
__THROW
;

504 
__exЛnsiЏ__


505 
	$wc°ouq
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

506 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

507 
__ba£
и
__THROW
;

510 #ifdeа
__USE_GNU


524 
	~<xlo€Ћ.h
>

528 
	$wc°ё_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

529 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__ba£
,

530 
__lo€Ћ_t
 
__loc
и
__THROW
;

532 
	$wc°oul_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

533 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

534 
__ba£
, 
__lo€Ћ_t
 
__loc
и
__THROW
;

536 
__exЛnsiЏ__


537 
	$wc°ёl_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

538 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

539 
__ba£
, 
__lo€Ћ_t
 
__loc
и
__THROW
;

541 
__exЛnsiЏ__


542 
	$wc°ouќ_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

543 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

544 
__ba£
, 
__lo€Ћ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

548 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__lo€Ћ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

552 
wchђ_t
 **
__ї°riщ
 
__Тd±r
, 
__lo€Ћ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ёd_l
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__≈М
,

556 
wchђ_t
 **
__ї°riщ
 
__Тd±r
,

557 
__lo€Ћ_t
 
__loc
и
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wchђ_t
 *
	$wээy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
и
__THROW
;

568 
wchђ_t
 *
	$wэnэy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$ЁТ_wmem°їam
 (
wchђ_t
 **
__buжoc
, 
size_t
 *
__sizЦoc
и
__THROW
;

581 #iа
defЪed
 
__USE_ISOC95
 || defЪed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__е
, 
__mode
и
__THROW
;

592 
	`fwіЪtf
 (
__FILE
 *
__ї°riщ
 
__°їam
,

593 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

599 
	`wіЪtf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

602 
	$swіЪtf
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

603 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

604 
__THROW
 ;

610 
	`vfwіЪtf
 (
__FILE
 *
__ї°riщ
 
__s
,

611 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

612 
__gnuc_va_li°
 
__ђg
)

618 
	`vwіЪtf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

619 
__gnuc_va_li°
 
__ђg
)

623 
	$vswіЪtf
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

624 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

625 
__gnuc_va_li°
 
__ђg
)

626 
__THROW
 ;

633 
	`fws€nf
 (
__FILE
 *
__ї°riщ
 
__°їam
,

634 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

640 
	`ws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

643 
	$sws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

644 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

645 
__THROW
 ;

647 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__USE_GNU
 \

648 && (!
defЪed
 
__LDBL_COMPAT
 || !defЪed 
__REDIRECT
) \

649 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

650 #ifdeа
__REDIRECT


654 
	`__REDIRECT
 (
fws€nf
, (
__FILE
 *
__ї°riщ
 
__°їam
,

655 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...),

656 
__isoc99_fws€nf
)

658 
	`__REDIRECT
 (
ws€nf
, (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...),

659 
__isoc99_ws€nf
)

661 
	`__REDIRECT
 (
sws€nf
, (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

662 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...),

663 
__isoc99_sws€nf
)

664 
__THROW
 ;

666 
	`__isoc99_fws€nf
 (
__FILE
 *
__ї°riщ
 
__°їam
,

667 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...);

668 
	`__isoc99_ws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...);

669 
	$__isoc99_sws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

670 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

671 
__THROW
;

672 
	#fws€nf
 
__isoc99_fws€nf


	)

673 
	#ws€nf
 
__isoc99_ws€nf


	)

674 
	#sws€nf
 
__isoc99_sws€nf


	)

678 
__END_NAMESPACE_STD


681 #ifdeа
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfws€nf
 (
__FILE
 *
__ї°riщ
 
__s
,

688 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

689 
__gnuc_va_li°
 
__ђg
)

695 
	`vws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

696 
__gnuc_va_li°
 
__ђg
)

699 
	$vsws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

700 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

701 
__gnuc_va_li°
 
__ђg
)

702 
__THROW
 ;

704 #iа!
defЪed
 
__USE_GNU
 \

705 && (!
defЪed
 
__LDBL_COMPAT
 || !defЪed 
__REDIRECT
) \

706 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

707 #ifdeа
__REDIRECT


708 
	`__REDIRECT
 (
vfws€nf
, (
__FILE
 *
__ї°riщ
 
__s
,

709 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

710 
__gnuc_va_li°
 
__ђg
), 
__isoc99_vfws€nf
)

712 
	`__REDIRECT
 (
vws€nf
, (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

713 
__gnuc_va_li°
 
__ђg
), 
__isoc99_vws€nf
)

715 
	`__REDIRECT
 (
vsws€nf
, (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

716 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

717 
__gnuc_va_li°
 
__ђg
), 
__isoc99_vsws€nf
)

718 
__THROW
 ;

720 
	`__isoc99_vfws€nf
 (
__FILE
 *
__ї°riщ
 
__s
,

721 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

722 
__gnuc_va_li°
 
__ђg
);

723 
	`__isoc99_vws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

724 
__gnuc_va_li°
 
__ђg
);

725 
	$__isoc99_vsws€nf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s
,

726 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

727 
__gnuc_va_li°
 
__ђg
и
__THROW
;

728 
	#vfws€nf
 
__isoc99_vfws€nf


	)

729 
	#vws€nf
 
__isoc99_vws€nf


	)

730 
	#vsws€nf
 
__isoc99_vsws€nf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wЪt_t
 
	`fgСwc
 (
__FILE
 *
__°їam
);

744 
wЪt_t
 
	`gСwc
 (
__FILE
 *
__°їam
);

750 
wЪt_t
 
	`gСwchђ
 ();

757 
wЪt_t
 
	`еutwc
 (
wchђ_t
 
__wc
, 
__FILE
 *
__°їam
);

758 
wЪt_t
 
	`putwc
 (
wchђ_t
 
__wc
, 
__FILE
 *
__°їam
);

764 
wЪt_t
 
	`putwchђ
 (
wchђ_t
 
__wc
);

772 
wchђ_t
 *
	`fgСws
 (wchђ_И*
__ї°riщ
 
__ws
, 
__n
,

773 
__FILE
 *
__ї°riщ
 
__°їam
);

779 
	`еutws
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__ws
,

780 
__FILE
 *
__ї°riщ
 
__°їam
);

787 
wЪt_t
 
	`ungСwc
 (wЪt_И
__wc
, 
__FILE
 *
__°їam
);

788 
__END_NAMESPACE_STD


791 #ifdeа
__USE_GNU


799 
wЪt_t
 
	`gСwc_u∆ocked
 (
__FILE
 *
__°їam
);

800 
wЪt_t
 
	`gСwchђ_u∆ocked
 ();

808 
wЪt_t
 
	`fgСwc_u∆ocked
 (
__FILE
 *
__°їam
);

816 
wЪt_t
 
	`еutwc_u∆ocked
 (
wchђ_t
 
__wc
, 
__FILE
 *
__°їam
);

825 
wЪt_t
 
	`putwc_u∆ocked
 (
wchђ_t
 
__wc
, 
__FILE
 *
__°їam
);

826 
wЪt_t
 
	`putwchђ_u∆ocked
 (
wchђ_t
 
__wc
);

835 
wchђ_t
 *
	`fgСws_u∆ocked
 (wchђ_И*
__ї°riщ
 
__ws
, 
__n
,

836 
__FILE
 *
__ї°riщ
 
__°їam
);

844 
	`еutws_u∆ocked
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__ws
,

845 
__FILE
 *
__ї°riщ
 
__°їam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcsбime
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__maxsize
,

854 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

855 
__cЏ°
 
tm
 *
__ї°riщ
 
__Н
и
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifdeа
__USE_GNU


859 
	~<xlo€Ћ.h
>

863 
size_t
 
	$wcsбime_l
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__maxsize
,

864 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

865 
__cЏ°
 
tm
 *
__ї°riщ
 
__Н
,

866 
__lo€Ћ_t
 
__loc
и
__THROW
;

875 #iа
defЪed
 
__USE_UNIX98
 && !defЪed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<wщy≥.h
>

881 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


882 
	~<bЩs/wchђ2.h
>

885 #ifdeа
__LDBL_COMPAT


886 
	~<bЩs/wchђ-ldbl.h
>

889 
__END_DECLS


897 #undeа
__√ed_mb°©e_t


898 #undeа
__√ed_wЪt_t


	@/usr/include/asm-generic/errno.h

1 #iвdeа
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gТФic/ФЇo-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/ioctl.h

1 #iвdeа
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #iвdeа
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #iвdeа
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #iвdeа
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #iвdeа
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #iвdeа
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dЬ
,
ty≥
,
ƒ
,
size
) \

66 (((
dЬ
и<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
и<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
и<< 
_IOC_NRSHIFT
) | \

69 ((
size
и<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
и(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
и
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
и
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
и((“rи>> 
_IOC_DIRSHIFT
и& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
и((“rи>> 
_IOC_TYPESHIFT
и& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
и((“rи>> 
_IOC_NRSHIFT
и& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
и((“rи>> 
_IOC_SIZESHIFT
и& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
и<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/wchar-ldbl.h

20 #iвdeа
_WCHAR_H


24 #iа
defЪed
 
__USE_ISOC95
 || defЪed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fwіЪtf
);

27 
__LDBL_REDIR_DECL
 (
wіЪtf
);

28 
__LDBL_REDIR_DECL
 (
swіЪtf
);

29 
__LDBL_REDIR_DECL
 (
vfwіЪtf
);

30 
__LDBL_REDIR_DECL
 (
vwіЪtf
);

31 
__LDBL_REDIR_DECL
 (
vswіЪtf
);

32 #iа
defЪed
 
__USE_ISOC99
 && !defЪed 
__USE_GNU
 \

33 && !
defЪed
 
	g__REDIRECT
 \

34 && (
defЪed
 
	g__STRICT_ANSI__
 || defЪed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fws€nf
, 
__∆dbl___isoc99_fws€nf
)

36 
	$__LDBL_REDIR1_DECL
 (
ws€nf
, 
__∆dbl___isoc99_ws€nf
)

37 
	$__LDBL_REDIR1_DECL
 (
sws€nf
, 
__∆dbl___isoc99_sws€nf
)

39 
	`__LDBL_REDIR_DECL
 (
fws€nf
);

40 
	`__LDBL_REDIR_DECL
 (
ws€nf
);

41 
	`__LDBL_REDIR_DECL
 (
sws€nf
);

43 
__END_NAMESPACE_C99


46 #ifdeа
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ёd
, 
wc°od
);

49 #iа!
defЪed
 
__USE_GNU
 && !defЪed 
__REDIRECT
 \

50 && (
defЪed
 
__STRICT_ANSI__
 || defЪed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfws€nf
, 
__∆dbl___isoc99_vfws€nf
)

52 
	$__LDBL_REDIR1_DECL
 (
vws€nf
, 
__∆dbl___isoc99_vws€nf
)

53 
	$__LDBL_REDIR1_DECL
 (
vsws€nf
, 
__∆dbl___isoc99_vsws€nf
)

55 
	`__LDBL_REDIR_DECL
 (
vfws€nf
);

56 
	`__LDBL_REDIR_DECL
 (
vws€nf
);

57 
	`__LDBL_REDIR_DECL
 (
vsws€nf
);

59 
__END_NAMESPACE_C99


62 #ifdeа
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ёd_l
, 
wc°od_l
);

66 #iа
__USE_FORTIFY_LEVEL
 > 0 && 
defЪed
 
__exЛЇ_Ѓways_ЪlЪe


67 
	$__LDBL_REDIR_DECL
 (
__swіЪtf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vswіЪtf_chk
)

69 #iа
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fwіЪtf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__wіЪtf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfwіЪtf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vwіЪtf_chk
)

	@/usr/include/bits/wchar2.h

20 #iвdeа
_WCHAR_H


25 
wchђ_t
 *
	$__wmemэy_chk
 (
wchђ_t
 *
__ї°riщ
 
__s1
,

26 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
и
__THROW
;

28 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmemэy_ЃЯs
,

29 (
wchђ_t
 *
__ї°riщ
 
__s1
,

30 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
),

31 
wmemэy
);

32 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmemэy_chk_wђn
,

33 (
wchђ_t
 *
__ї°riщ
 
__s1
,

34 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmemэy_chk
)

36 
	`__wђ«Йr
 ("wmemcpy called withЖength biggerБhan size of destination "

39 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

40 
	`__NTH
 (
	$wmemэy
 (
wchђ_t
 *
__ї°riщ
 
__s1
, 
__cЏ°
 wchђ_И*__ї°riщ 
__s2
,

41 
size_t
 
__n
))

43 iа(
	`__bos0
 (
__s1
и!р(
size_t
) -1)

45 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

46  
	`__wmemэy_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

49 iа(
__n
 > 
	`__bos0
 (
__s1
и/  (
wchђ_t
))

50  
	`__wmemэy_chk_wђn
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

53  
	`__wmemэy_ЃЯs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wchђ_t
 *
	$__wmemmove_chk
 (
wchђ_t
 *
__s1
, 
__cЏ°
 wchђ_И*
__s2
,

58 
size_t
 
__n
, size_И
__ns1
и
__THROW
;

59 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_ЃЯs
, (wchђ_И*
__s1
,

60 
__cЏ°
 
wchђ_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_wђn
,

63 (
wchђ_t
 *
__ї°riщ
 
__s1
,

64 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__wђ«Йr
 ("wmemmove called withЖength biggerБhan size of destination "

69 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wchђ_t
 *
__ї°riщ
 
__s1
, 
__cЏ°
 wchђ_И*__ї°riщ 
__s2
,

71 
size_t
 
__n
))

73 iа(
	`__bos0
 (
__s1
и!р(
size_t
) -1)

75 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

79 iа(
__n
 > 
	`__bos0
 (
__s1
и/  (
wchђ_t
))

80  
	`__wmemmove_chk_wђn
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

83  
	`__wmemmove_ЃЯs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifdeа
__USE_GNU


88 
wchђ_t
 *
	$__wmempэy_chk
 (
wchђ_t
 *
__ї°riщ
 
__s1
,

89 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
и
__THROW
;

91 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmempэy_ЃЯs
,

92 (
wchђ_t
 *
__ї°riщ
 
__s1
,

93 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
,

94 
size_t
 
__n
), 
wmempэy
);

95 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmempэy_chk_wђn
,

96 (
wchђ_t
 *
__ї°riщ
 
__s1
,

97 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmempэy_chk
)

99 
	`__wђ«Йr
 ("wmempcpy called withЖength biggerБhan size of destination "

102 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

103 
	`__NTH
 (
	$wmempэy
 (
wchђ_t
 *
__ї°riщ
 
__s1
, 
__cЏ°
 wchђ_И*__ї°riщ 
__s2
,

104 
size_t
 
__n
))

106 iа(
	`__bos0
 (
__s1
и!р(
size_t
) -1)

108 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

109  
	`__wmempэy_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

112 iа(
__n
 > 
	`__bos0
 (
__s1
и/  (
wchђ_t
))

113  
	`__wmempэy_chk_wђn
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
и/  (
wchђ_t
));

116  
	`__wmempэy_ЃЯs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wchђ_t
 *
	$__wmem£t_chk
 (
wchђ_t
 *
__s
, wchђ_И
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
и
__THROW
;

123 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_ЃЯs
, (wchђ_И*
__s
, wchђ_И
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_wђn
,

126 (
wchђ_t
 *
__s
, wchђ_И
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__wђ«Йr
 ("wmemset called withЖength biggerБhan size of destination "

131 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wchђ_t
 *
__ї°riщ
 
__s
, wchђ_И
__c
, 
size_t
 
__n
))

134 iа(
	`__bos0
 (
__s
и!р(
size_t
) -1)

136 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sи/  (
wchђ_t
));

139 iа(
__n
 > 
	`__bos0
 (
__s
и/  (
wchђ_t
))

140  
	`__wmem£t_chk_wђn
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
и/  (
wchђ_t
));

143  
	`__wmem£t_ЃЯs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wchђ_t
 *
	$__wcsэy_chk
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

148 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

149 
size_t
 
__n
и
__THROW
;

150 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wcsэy_ЃЯs
,

151 (
wchђ_t
 *
__ї°riщ
 
__de°
,

152 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
), 
wcsэy
);

154 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

155 
	`__NTH
 (
	$wcsэy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
))

157 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

158  
	`__wcsэy_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°и/  (
wchђ_t
));

159  
	`__wcsэy_ЃЯs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wchђ_t
 *
	$__wээy_chk
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
,

164 
size_t
 
__de°Ћn
и
__THROW
;

165 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wээy_ЃЯs
, (wchђ_И*
__de°
,

166 
__cЏ°
 
wchђ_t
 *
__§c
),

167 
wээy
);

169 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

170 
	`__NTH
 (
	$wээy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
))

172 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

173  
	`__wээy_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°и/  (
wchђ_t
));

174  
	`__wээy_ЃЯs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wchђ_t
 *
	$__wcҐэy_chk
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

179 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Ћn
и
__THROW
;

181 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wcҐэy_ЃЯs
,

182 (
wchђ_t
 *
__ї°riщ
 
__de°
,

183 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

184 
size_t
 
__n
), 
wcҐэy
);

185 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wcҐэy_chk_wђn
,

186 (
wchђ_t
 *
__ї°riщ
 
__de°
,

187 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

188 
size_t
 
__n
, size_И
__de°Ћn
), 
__wcҐэy_chk
)

189 
	`__wђ«Йr
 ("wcsncpy called withЖength biggerБhan size of destination "

192 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

193 
	`__NTH
 (
	$wcҐэy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
, 
size_t
 
__n
))

195 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

197 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

198  
	`__wcҐэy_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
и/  (
wchђ_t
));

200 iа(
__n
 > 
	`__bos
 (
__de°
и/  (
wchђ_t
))

201  
	`__wcҐэy_chk_wђn
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
и/  (
wchђ_t
));

204  
	`__wcҐэy_ЃЯs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wchђ_t
 *
	$__wэnэy_chk
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

209 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Ћn
и
__THROW
;

211 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wэnэy_ЃЯs
,

212 (
wchђ_t
 *
__ї°riщ
 
__de°
,

213 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

214 
size_t
 
__n
), 
wэnэy
);

215 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wэnэy_chk_wђn
,

216 (
wchђ_t
 *
__ї°riщ
 
__de°
,

217 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

218 
size_t
 
__n
, size_И
__de°Ћn
), 
__wэnэy_chk
)

219 
	`__wђ«Йr
 ("wcpncpy called withЖength biggerБhan size of destination "

222 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

223 
	`__NTH
 (
	$wэnэy
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
, 
size_t
 
__n
))

225 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

227 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
))

228  
	`__wэnэy_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
и/  (
wchђ_t
));

230 iа(
__n
 > 
	`__bos
 (
__de°
и/  (
wchђ_t
))

231  
	`__wэnэy_chk_wђn
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
и/  (
wchђ_t
));

234  
	`__wэnэy_ЃЯs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wchђ_t
 *
	$__wcs€t_chk
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

239 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

240 
size_t
 
__de°Ћn
и
__THROW
;

241 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wcs€t_ЃЯs
,

242 (
wchђ_t
 *
__ї°riщ
 
__de°
,

243 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
), 
wcs€t
);

245 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

246 
	`__NTH
 (
	$wcs€t
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
))

248 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

249  
	`__wcs€t_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°и/  (
wchђ_t
));

250  
	`__wcs€t_ЃЯs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wchђ_t
 *
	$__wcҐ€t_chk
 (
wchђ_t
 *
__ї°riщ
 
__de°
,

255 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

256 
size_t
 
__n
, size_И
__de°Ћn
и
__THROW
;

257 
wchђ_t
 *
	`__REDIRECT_NTH
 (
__wcҐ€t_ЃЯs
,

258 (
wchђ_t
 *
__ї°riщ
 
__de°
,

259 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__§c
,

260 
size_t
 
__n
), 
wcҐ€t
);

262 
__exЛЇ_Ѓways_ЪlЪe
 
wchђ_t
 *

263 
	`__NTH
 (
	$wcҐ€t
 (
wchђ_t
 *
__de°
, 
__cЏ°
 wchђ_И*
__§c
, 
size_t
 
__n
))

265 iа(
	`__bos
 (
__de°
и!р(
size_t
) -1)

266  
	`__wcҐ€t_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
и/  (
wchђ_t
));

268  
	`__wcҐ€t_ЃЯs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__swіЪtf_chk
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

273 
__жag
, 
size_t
 
__s_Ћn
,

274 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__swіЪtf_ЃЯs
,

278 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

279 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, ...),

280 
swіЪtf
);

282 #ifdeа
__va_ђg_Јck


283 
__exЛЇ_Ѓways_ЪlЪe
 

284 
	`__NTH
 (
	$swіЪtf
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

285 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, ...))

287 iа(
	`__bos
 (
__s
и!р(
size_t
и-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__swіЪtf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
и/  (
wchђ_t
),

290 
__fmt
, 
	`__va_ђg_Јck
 ());

291  
	`__swіЪtf_ЃЯs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_ђg_Јck
 ());

292 
	}
}

293 #Цiа!
defЪed
 
__эlu•lus


295 
	#swіЪtf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
и!р(
size_t
и-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__swіЪtf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
и/  (
wchђ_t
), 
__VA_ARGS__
) \

299 : 
	`swіЪtf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vswіЪtf_chk
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

303 
__жag
, 
size_t
 
__s_Ћn
,

304 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

305 
__gnuc_va_li°
 
__ђg
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vswіЪtf_ЃЯs
,

309 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

310 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vswіЪtf
);

313 
__exЛЇ_Ѓways_ЪlЪe
 

314 
	`__NTH
 (
	$vswіЪtf
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__n
,

315 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 iа(
	`__bos
 (
__s
и!р(
size_t
и-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vswіЪtf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
и/  (
wchђ_t
), 
__fmt
, 
__≠
);

320  
	`__vswіЪtf_ЃЯs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #iа
__USE_FORTIFY_LEVEL
 > 1

326 
__fwіЪtf_chk
 (
__FILE
 *
__ї°riщ
 
__°їam
, 
__жag
,

327 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
, ...);

328 
__wіЪtf_chk
 (
__жag
, 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

330 
__vfwіЪtf_chk
 (
__FILE
 *
__ї°riщ
 
__°їam
, 
__жag
,

331 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vwіЪtf_chk
 (
__жag
, 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__f№m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifdeа
__va_ђg_Јck


337 
__exЛЇ_Ѓways_ЪlЪe
 

338 
	$wіЪtf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, ...)

340  
	`__wіЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_ђg_Јck
 ());

341 
	}
}

343 
__exЛЇ_Ѓways_ЪlЪe
 

344 
	$fwіЪtf
 (
__FILE
 *
__ї°riщ
 
__°їam
, 
__cЏ°
 
wchђ_t
 *__ї°riщ 
__fmt
, ...)

346  
	`__fwіЪtf_chk
 (
__°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_ђg_Јck
 ());

348 
	}
}

349 #Цiа!
defЪed
 
__эlu•lus


350 
	#wіЪtf
(...) \

351 
	`__wіЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fwіЪtf
(
°їam
, ...) \

353 
	`__fwіЪtf_chk
 (
°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exЛЇ_Ѓways_ЪlЪe
 

357 
	$vwіЪtf
 (
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vwіЪtf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exЛЇ_Ѓways_ЪlЪe
 

363 
	$vfwіЪtf
 (
__FILE
 *
__ї°riщ
 
__°їam
,

364 
__cЏ°
 
wchђ_t
 *
__ї°riщ
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfwіЪtf_chk
 (
__°їam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wchђ_t
 *
	$__fgСws_chk
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ї°riщ
 
__°їam
и
__wur
;

373 
wchђ_t
 *
	`__REDIRECT
 (
__fgСws_ЃЯs
,

374 (
wchђ_t
 *
__ї°riщ
 
__s
, 
__n
,

375 
__FILE
 *
__ї°riщ
 
__°їam
), 
fgСws
и
__wur
;

376 
wchђ_t
 *
	`__REDIRECT
 (
__fgСws_chk_wђn
,

377 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ї°riщ
 
__°їam
), 
__fgСws_chk
)

379 
__wur
 
	`__wђ«Йr
 ("fgetws called with bigger sizeБhanЖength "

382 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
wchђ_t
 *

383 
	$fgСws
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
__n
, 
__FILE
 *__ї°riщ 
__°їam
)

385 iа(
	`__bos
 (
__s
и!р(
size_t
) -1)

387 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgСws_chk
 (
__s
, 
	`__bos
 (__sи/  (
wchђ_t
),

389 
__n
, 
__°їam
);

391 iа((
size_t
и
__n
 > 
	`__bos
 (
__s
и/  (
wchђ_t
))

392  
	`__fgСws_chk_wђn
 (
__s
, 
	`__bos
 (__sи/  (
wchђ_t
),

393 
__n
, 
__°їam
);

395  
	`__fgСws_ЃЯs
 (
__s
, 
__n
, 
__°їam
);

396 
	}
}

398 #ifdeа
__USE_GNU


399 
wchђ_t
 *
	$__fgСws_u∆ocked_chk
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ї°riщ
 
__°їam
)

401 
__wur
;

402 
wchђ_t
 *
	`__REDIRECT
 (
__fgСws_u∆ocked_ЃЯs
,

403 (
wchђ_t
 *
__ї°riщ
 
__s
, 
__n
,

404 
__FILE
 *
__ї°riщ
 
__°їam
), 
fgСws_u∆ocked
)

405 
__wur
;

406 
wchђ_t
 *
	`__REDIRECT
 (
__fgСws_u∆ocked_chk_wђn
,

407 (
wchђ_t
 *
__ї°riщ
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ї°riщ
 
__°їam
),

409 
__fgСws_u∆ocked_chk
)

410 
__wur
 
	`__wђ«Йr
 ("fgetws_unlocked called with bigger sizeБhanЖength "

413 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
wchђ_t
 *

414 
	$fgСws_u∆ocked
 (
wchђ_t
 *
__ї°riщ
 
__s
, 
__n
, 
__FILE
 *__ї°riщ 
__°їam
)

416 iа(
	`__bos
 (
__s
и!р(
size_t
) -1)

418 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgСws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sи/  (
wchђ_t
),

420 
__n
, 
__°їam
);

422 iа((
size_t
и
__n
 > 
	`__bos
 (
__s
и/  (
wchђ_t
))

423  
	`__fgСws_u∆ocked_chk_wђn
 (
__s
, 
	`__bos
 (__sи/  (
wchђ_t
),

424 
__n
, 
__°їam
);

426  
	`__fgСws_u∆ocked_ЃЯs
 (
__s
, 
__n
, 
__°їam
);

427 
	}
}

431 
size_t
 
	$__wьtomb_chk
 (*
__s
, 
wchђ_t
 
__wchђ
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buжТ
и
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__wьtomb_ЃЯs
,

434 (*
__ї°riщ
 
__s
, 
wchђ_t
 
__wchђ
,

435 
mb°©e_t
 *
__ї°riщ
 
__ps
), 
wьtomb
и
__wur
;

437 
__exЛЇ_Ѓways_ЪlЪe
 
__wur
 
size_t


438 
	`__NTH
 (
	$wьtomb
 (*
__s
, 
wchђ_t
 
__wchђ
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #iа
defЪed
 
MB_LEN_MAX
 && MB_LEN_MAX !р
__WCHAR_MB_LEN_MAX


447 iа(
	`__bos
 (
__s
и!р(
size_t
и-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__wьtomb_chk
 (
__s
, 
__wchђ
, 
__ps
, 
	`__bos
 (__s));

449  
	`__wьtomb_ЃЯs
 (
__s
, 
__wchђ
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wchђ_t
 *
__ї°riщ
 
__d°
,

454 
__cЏ°
 **
__ї°riщ
 
__§c
,

455 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

456 
size_t
 
__d°Ћn
и
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_ЃЯs
,

458 (
wchђ_t
 *
__ї°riщ
 
__d°
,

459 
__cЏ°
 **
__ї°riщ
 
__§c
,

460 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_wђn
,

463 (
wchђ_t
 *
__ї°riщ
 
__d°
,

464 
__cЏ°
 **
__ї°riщ
 
__§c
,

465 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

466 
size_t
 
__d°Ћn
), 
__mb§towcs_chk
)

467 
	`__wђ«Йr
 ("mbsrtowcs called with dst buffer smallerБhanЖen "

470 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wchђ_t
 *
__ї°riщ
 
__d°
, 
__cЏ°
 **__ї°riщ 
__§c
,

472 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
))

474 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

476 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
,

478 
	`__bos
 (
__d°
и/  (
wchђ_t
));

480 iа(
__Ћn
 > 
	`__bos
 (
__d°
и/  (
wchђ_t
))

481  
	`__mb§towcs_chk_wђn
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
,

482 
	`__bos
 (
__d°
и/  (
wchђ_t
));

484  
	`__mb§towcs_ЃЯs
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ї°riщ
 
__d°
,

489 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

490 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

491 
size_t
 
__d°Ћn
и
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_ЃЯs
,

493 (*
__ї°riщ
 
__d°
,

494 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

495 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_wђn
,

498 (*
__ї°riщ
 
__d°
,

499 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

500 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

501 
size_t
 
__d°Ћn
), 
__wc§tombs_chk
)

502 
	`__wђ«Йr
 ("wcsrtombs called with dst buffer smallerБhanЖen");

504 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ї°riщ
 
__d°
, 
__cЏ°
 
wchђ_t
 **__ї°riщ 
__§c
,

506 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
))

508 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

510 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
, 
	`__bos
 (__dst));

513 iа(
__Ћn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_wђn
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_ЃЯs
 (
__d°
, 
__§c
, 
__Ћn
, 
__ps
);

517 
	}
}

520 #ifdeа
__USE_GNU


521 
size_t
 
	$__mbҐєowcs_chk
 (
wchђ_t
 *
__ї°riщ
 
__d°
,

522 
__cЏ°
 **
__ї°riщ
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

524 
size_t
 
__d°Ћn
и
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mbҐєowcs_ЃЯs
,

526 (
wchђ_t
 *
__ї°riщ
 
__d°
,

527 
__cЏ°
 **
__ї°riщ
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
),

529 
mbҐєowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mbҐєowcs_chk_wђn
,

531 (
wchђ_t
 *
__ї°riщ
 
__d°
,

532 
__cЏ°
 **
__ї°riщ
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
,

534 
size_t
 
__d°Ћn
), 
__mbҐєowcs_chk
)

535 
	`__wђ«Йr
 ("mbsnrtowcs called with dst buffer smallerБhanЖen "

538 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


539 
	`__NTH
 (
	$mbҐєowcs
 (
wchђ_t
 *
__ї°riщ
 
__d°
, 
__cЏ°
 **__ї°riщ 
__§c
,

540 
size_t
 
__nmc
, size_И
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
))

542 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

544 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

545  
	`__mbҐєowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Ћn
, 
__ps
,

546 
	`__bos
 (
__d°
и/  (
wchђ_t
));

548 iа(
__Ћn
 > 
	`__bos
 (
__d°
и/  (
wchђ_t
))

549  
	`__mbҐєowcs_chk_wђn
 (
__d°
, 
__§c
, 
__nmc
, 
__Ћn
, 
__ps
,

550 
	`__bos
 (
__d°
и/  (
wchђ_t
));

552  
	`__mbҐєowcs_ЃЯs
 (
__d°
, 
__§c
, 
__nmc
, 
__Ћn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wcҐєombs_chk
 (*
__ї°riщ
 
__d°
,

557 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

558 
size_t
 
__nwc
, size_И
__Ћn
,

559 
mb°©e_t
 *
__ї°riщ
 
__ps
, 
size_t
 
__d°Ћn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wcҐєombs_ЃЯs
,

562 (*
__ї°riщ
 
__d°
,

563 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

564 
size_t
 
__nwc
, size_И
__Ћn
,

565 
mb°©e_t
 *
__ї°riщ
 
__ps
), 
wcҐєombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wcҐєombs_chk_wђn
,

567 (*
__ї°riщ
 
__d°
,

568 
__cЏ°
 
wchђ_t
 **
__ї°riщ
 
__§c
,

569 
size_t
 
__nwc
, size_И
__Ћn
,

570 
mb°©e_t
 *
__ї°riщ
 
__ps
,

571 
size_t
 
__d°Ћn
), 
__wcҐєombs_chk
)

572 
	`__wђ«Йr
 ("wcsnrtombs called with dst buffer smallerБhanЖen");

574 
__exЛЇ_Ѓways_ЪlЪe
 
size_t


575 
	`__NTH
 (
	$wcҐєombs
 (*
__ї°riщ
 
__d°
, 
__cЏ°
 
wchђ_t
 **__ї°riщ 
__§c
,

576 
size_t
 
__nwc
, size_И
__Ћn
, 
mb°©e_t
 *
__ї°riщ
 
__ps
))

578 iа(
	`__bos
 (
__d°
и!р(
size_t
) -1)

580 iа(!
	`__buЮtЪ_cЏ°™t_p
 (
__Ћn
))

581  
	`__wcҐєombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Ћn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 iа(
__Ћn
 > 
	`__bos
 (
__d°
))

585  
	`__wcҐєombs_chk_wђn
 (
__d°
, 
__§c
, 
__nwc
, 
__Ћn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wcҐєombs_ЃЯs
 (
__d°
, 
__§c
, 
__nwc
, 
__Ћn
, 
__ps
);

589 
	}
}

	@/usr/include/wctype.h

24 #iвdeа
_WCTYPE_H


26 
	~<г©uїs.h
>

27 
	~<bЩs/ty≥s.h
>

29 #iвdeа
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wЪt_t


	)

34 
	~<°ddef.h
>

38 #iвdeа
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #undeа
__√ed_iswxxx


47 #iвdeа
__iswxxx_defЪed


48 
	#__iswxxx_defЪed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	twщy≥_t
;

54 
	g__END_NAMESPACE_C99


56 #iвdeа
_ISwbЩ


61 
	~<ТdЯn.h
>

62 #iа
__BYTE_ORDER
 =р
__BIG_ENDIAN


63 
	#_ISwbЩ
(
bЩ
и(1 << (bЩ))

	)

65 
	#_ISwbЩ
(
bЩ
) \

66 ((
bЩ
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bЩ
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bЩ
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (и((1UL << (
bЩ
)и>> 24))))

	)

74 
	m__ISwuµФ
 = 0,

75 
	m__ISwlowФ
 = 1,

76 
	m__ISwЃpha
 = 2,

77 
	m__ISwdigЩ
 = 3,

78 
	m__ISwxdigЩ
 = 4,

79 
	m__ISw•aы
 = 5,

80 
	m__ISwіЪt
 = 6,

81 
	m__ISwgњph
 = 7,

82 
	m__ISwbѕnk
 = 8,

83 
	m__ISwъМl
 = 9,

84 
	m__ISwpunщ
 = 10,

85 
	m__ISwЃnum
 = 11,

87 
	m_ISwuµФ
 = 
_ISwbЩ
 (
__ISwuµФ
),

88 
	m_ISwlowФ
 = 
_ISwbЩ
 (
__ISwlowФ
),

89 
	m_ISwЃpha
 = 
_ISwbЩ
 (
__ISwЃpha
),

90 
	m_ISwdigЩ
 = 
_ISwbЩ
 (
__ISwdigЩ
),

91 
	m_ISwxdigЩ
 = 
_ISwbЩ
 (
__ISwxdigЩ
),

92 
	m_ISw•aы
 = 
_ISwbЩ
 (
__ISw•aы
),

93 
	m_ISwіЪt
 = 
_ISwbЩ
 (
__ISwіЪt
),

94 
	m_ISwgњph
 = 
_ISwbЩ
 (
__ISwgњph
),

95 
	m_ISwbѕnk
 = 
_ISwbЩ
 (
__ISwbѕnk
),

96 
	m_ISwъМl
 = 
_ISwbЩ
 (
__ISwъМl
),

97 
	m_ISwpunщ
 = 
_ISwbЩ
 (
__ISwpunщ
),

98 
	m_ISwЃnum
 = 
_ISwbЩ
 (
__ISwЃnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswЃnum
 (
wЪt_t
 
__wc
и
__THROW
;

118 
	$iswЃpha
 (
wЪt_t
 
__wc
и
__THROW
;

121 
	$iswъМl
 (
wЪt_t
 
__wc
и
__THROW
;

125 
	$iswdigЩ
 (
wЪt_t
 
__wc
и
__THROW
;

129 
	$iswgњph
 (
wЪt_t
 
__wc
и
__THROW
;

134 
	$iswlowФ
 (
wЪt_t
 
__wc
и
__THROW
;

137 
	$iswіЪt
 (
wЪt_t
 
__wc
и
__THROW
;

142 
	$iswpunщ
 (
wЪt_t
 
__wc
и
__THROW
;

147 
	$isw•aы
 (
wЪt_t
 
__wc
и
__THROW
;

152 
	$iswuµФ
 (
wЪt_t
 
__wc
и
__THROW
;

157 
	$iswxdigЩ
 (
wЪt_t
 
__wc
и
__THROW
;

162 #ifdeа
__USE_ISOC99


163 
	$iswbѕnk
 (
wЪt_t
 
__wc
и
__THROW
;

172 
wщy≥_t
 
	$wщy≥
 (
__cЏ°
 *
__іЁФty
и
__THROW
;

176 
	$iswщy≥
 (
wЪt_t
 
__wc
, 
wщy≥_t
 
__desc
и
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__cЏ°
 
	t__Ъt32_t
 *
	twщњns_t
;

188 
__END_NAMESPACE_C99


189 #ifdeа
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
wщњns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wЪt_t
 
	$towlowФ
 (
wЪt_t
 
__wc
и
__THROW
;

198 
wЪt_t
 
	$towuµФ
 (
wЪt_t
 
__wc
и
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifdeа
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
wщњns_t
 
	$wщњns
 (
__cЏ°
 *
__іЁФty
и
__THROW
;

222 
wЪt_t
 
	$towщњns
 (
wЪt_t
 
__wc
, 
wщњns_t
 
__desc
и
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifdeа
__USE_XOPEN2K8


227 
	~<xlo€Ћ.h
>

231 
	$iswЃnum_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

237 
	$iswЃpha_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

240 
	$iswъМl_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

244 
	$iswdigЩ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

248 
	$iswgњph_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

253 
	$iswlowФ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

256 
	$iswіЪt_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

261 
	$iswpunщ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

266 
	$isw•aы_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

271 
	$iswuµФ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

276 
	$iswxdigЩ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

281 
	$iswbѕnk_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

285 
wщy≥_t
 
	$wщy≥_l
 (
__cЏ°
 *
__іЁФty
, 
__lo€Ћ_t
 
__lo€Ћ
)

286 
__THROW
;

290 
	$iswщy≥_l
 (
wЪt_t
 
__wc
, 
wщy≥_t
 
__desc
, 
__lo€Ћ_t
 
__lo€Ћ
)

291 
__THROW
;

299 
wЪt_t
 
	$towlowФ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

302 
wЪt_t
 
	$towuµФ_l
 (
wЪt_t
 
__wc
, 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

306 
wщњns_t
 
	$wщњns_l
 (
__cЏ°
 *
__іЁФty
, 
__lo€Ћ_t
 
__lo€Ћ
)

307 
__THROW
;

310 
wЪt_t
 
	$towщњns_l
 (
wЪt_t
 
__wc
, 
wщњns_t
 
__desc
,

311 
__lo€Ћ_t
 
__lo€Ћ
и
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #iвdeа
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
309
7261
WIN32-Code/event-config.h
WIN32-Code/tree.h
arc4random.c
buffer.c
buffer_iocp.c
bufferevent-internal.h
bufferevent.c
bufferevent_async.c
bufferevent_filter.c
bufferevent_openssl.c
bufferevent_pair.c
bufferevent_ratelim.c
bufferevent_sock.c
changelist-internal.h
compat/sys/queue.h
config.h
defer-internal.h
devpoll.c
epoll.c
epoll_sub.c
evbuffer-internal.h
evdns.c
evdns.h
event-config.h
event-internal.h
event.c
event.h
event_iocp.c
event_tagging.c
evhttp.h
evmap-internal.h
evmap.c
evport.c
evrpc-internal.h
evrpc.c
evrpc.h
evsignal-internal.h
evthread-internal.h
evthread.c
evthread_pthread.c
evthread_win32.c
evutil.c
evutil.h
evutil_rand.c
ht-internal.h
http-internal.h
http.c
include/event2/buffer.h
include/event2/buffer_compat.h
include/event2/bufferevent.h
include/event2/bufferevent_compat.h
include/event2/bufferevent_ssl.h
include/event2/bufferevent_struct.h
include/event2/dns.h
include/event2/dns_compat.h
include/event2/dns_struct.h
include/event2/event.h
include/event2/event_compat.h
include/event2/event_struct.h
include/event2/http.h
include/event2/http_compat.h
include/event2/http_struct.h
include/event2/listener.h
include/event2/rpc.h
include/event2/rpc_compat.h
include/event2/rpc_struct.h
include/event2/tag.h
include/event2/tag_compat.h
include/event2/thread.h
include/event2/util.h
iocp-internal.h
ipv6-internal.h
kqueue.c
listener.c
log-internal.h
log.c
minheap-internal.h
mm-internal.h
poll.c
ratelim-internal.h
sample/dns-example.c
sample/event-test.c
sample/hello-world.c
sample/le-proxy.c
sample/signal-test.c
sample/time-test.c
select.c
signal.c
strlcpy-internal.h
strlcpy.c
test/bench.c
test/bench_cascade.c
test/bench_http.c
test/bench_httpclient.c
test/regress.c
test/regress.gen.c
test/regress.gen.h
test/regress.h
test/regress_buffer.c
test/regress_bufferevent.c
test/regress_dns.c
test/regress_et.c
test/regress_http.c
test/regress_iocp.c
test/regress_listener.c
test/regress_main.c
test/regress_minheap.c
test/regress_pthread.c
test/regress_rpc.c
test/regress_ssl.c
test/regress_testutils.c
test/regress_testutils.h
test/regress_util.c
test/regress_zlib.c
test/test-eof.c
test/test-init.c
test/test-ratelim.c
test/test-time.c
test/test-weof.c
test/tinytest.c
test/tinytest.h
test/tinytest_macros.h
util-internal.h
win32select.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/openssl/bio.h
/usr/include/openssl/err.h
/usr/include/openssl/pem.h
/usr/include/openssl/rand.h
/usr/include/openssl/ssl.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/eventfd.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/queue.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sendfile.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/timeb.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/evp.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem2.h
/usr/include/openssl/safestack.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/poll.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/predefs.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pq_compat.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/sys/cdefs.h
/usr/include/zlibdefs.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/openssl/bn.h
/usr/include/openssl/obj_mac.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
